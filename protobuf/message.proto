syntax = "proto3";

//import "nanopb.proto";
//option (nanopb_fileopt).packed_struct = true;

enum SensorPacketTypes {
    UNKNOWN_PACKET_TYPE = 0;
	PPG_RED         = 1;
	PPG_IR          = 2;
	SPECTROMETER    = 3;
	BME             = 4;
	CO2             = 5;
	IMU             = 6;
	THERMOPILE      = 7;
	LUX             = 8;
	LIDAR           = 9;
	MIC             = 10;
	SHT             = 11;
	SGP             = 12;
	BLINK           = 13;
	MIC_LEVEL	= 14;
} 

enum Tsl2591Gain{
    TSL2722_GAIN_1X 	= 0x00;  /// low gain (1x)
    TSL2722_GAIN_8X 	= 0x01;  /// medium gain (25x)
    TSL2722_GAIN_16X 	= 0x02; /// medium gain (428x)
    TSL2722_GAIN_120X = 0x03;  /// max gain (9876x)
} ;

enum Tsl2591IntegrationTime {
    TSL2722_INTEGRATIONTIME_600MS 	= 0x00; // 699 millis
    TSL2722_INTEGRATIONTIME_2_73MS 	= 0xFF; // 2.73 millis
    TSL2722_INTEGRATIONTIME_27_30MS 	= 0xF6; // 27.3 millis
    TSL2722_INTEGRATIONTIME_101MS 	= 0xDB; // 101 millis
    TSL2722_INTEGRATIONTIME_175MS 	= 0xC0; // 175 millis
} ;

enum Sht45_precision {
    SHT4X_HIGH_PRECISION = 0;
    SHT4X_MED_PRECISION = 1;
    SHT4X_LOW_PRECISION = 2;
} ;

/** Optional pre-heater configuration setting */
enum Sht45_heater {
    SHT4X_NO_HEATER           = 0;
    SHT4X_HIGH_HEATER_1S      = 1;
    SHT4X_HIGH_HEATER_100MS   = 2;
    SHT4X_MED_HEATER_1S       = 3;
    SHT4X_MED_HEATER_100MS    = 4;
    SHT4X_LOW_HEATER_1S       = 5;
    SHT4X_LOW_HEATER_100MS    = 6;
} ;

enum Thermopile_location {
    TIP_OF_NOSE = 0;
    NOSE_BRIDGE = 1;
    FRONT_TEMPLE = 2;
    MID_TEMPLE = 3;
    REAR_TEMPLE = 4;
} ;

/** defined by Bosch */
enum BME680_accuracy {
    UNRELIABLE          = 0;
    LOW_ACCURACY        = 1;
    MEDIUM_ACCURACY     = 2;
    HIGH_ACCURACY       = 3;
} ;

/** defined by Bosch */
enum BME680_signal_id {
    UNDEFINED           = 0;
    IAQ                 = 1;
    STATIC_IAQ          = 2;
    CO2_EQ              = 3;
    BREATH_VOC_EQ       = 4;
    RAW_TEMPERATURE     = 6;
    RAW_PRESSURE        = 7;
    RAW_HUMIDITY        = 8;
    RAW_GAS             = 9;
    STABILIZATION_STATUS = 12;
    RUN_IN_STATUS       = 13;
    SENSOR_HEAT_COMPEN_TEMP = 14;
    HEAT_COMPEN_HUMID   = 15;
    GAS_PERCENTAGE      = 21;
} ;

/** defined in spectrometer (AS7341) datasheet */
enum Spec_gain {
    GAIN_0_5X = 0;
    GAIN_1X = 1;
    GAIN_2X = 2;
    GAIN_4X = 3;
    GAIN_8X = 4;
    GAIN_16X = 5;
    GAIN_32X = 6;
    GAIN_64X = 7;
    GAIN_128X = 8;
    GAIN_256X = 9;
    GAIN_512X = 10;
}

/** defined in IMU (ICM20948) datasheet */
enum IMU_gyro_cutoff {
	ICM20X_GYRO_FREQ_196_6_HZ = 0;
	ICM20X_GYRO_FREQ_151_8_HZ = 1;
	ICM20X_GYRO_FREQ_119_5_HZ = 2;
	ICM20X_GYRO_FREQ_51_2_HZ = 3;
	ICM20X_GYRO_FREQ_23_9_HZ = 4;
	ICM20X_GYRO_FREQ_11_6_HZ = 5;
	ICM20X_GYRO_FREQ_5_7_HZ = 6;
	ICM20X_GYRO_FREQ_361_4_HZ = 7;
} 

/** defined in IMU (ICM20948) datasheet */
enum IMU_gyro_range {
    RANGE_250_dps = 0;
	RANGE_500_dps = 1;
	RANGE_1000_dps = 2;
	RANGE_2000_dps = 3;
} 


/** defined in IMU (ICM20948) datasheet */
enum IMU_accel_cutoff {
    UNDEFINED_ACCEL_CUTOFF = 0;
	ICM20X_ACCEL_FREQ_246_0_HZ = 1;
	ICM20X_ACCEL_FREQ_111_4_HZ = 2;
	ICM20X_ACCEL_FREQ_50_4_HZ = 3;
	ICM20X_ACCEL_FREQ_23_9_HZ = 4;
	ICM20X_ACCEL_FREQ_11_5_HZ = 5;
	ICM20X_ACCEL_FREQ_5_7_HZ = 6;
	ICM20X_ACCEL_FREQ_473_HZ = 7;
} 

/** defined in IMU (ICM20948) datasheet */
enum IMU_accel_range {
    RANGE_2G = 0;
	RANGE_4G = 1;
	RANGE_8G = 2;
	RANGE_16G = 3;
} 

/** defined in IMU (ICM20948) datasheet */
enum IMU_mag_cutoff {
    UNDEFINED_MAG_CUTOFF = 0;
	ICM20X_MAG_10_HZ = 2;
	ICM20X_MAG_20_HZ = 4;
	ICM20X_MAG_50_HZ = 6;
	ICM20X_MAG_100_HZ = 8;
} 


message SensorPacketHeader {
    uint32 system_uid = 1;
    uint32 ms_from_start = 2;
    uint64 epoch = 3;
}

message LuxPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;
    Tsl2591Gain gain = 3;
    Tsl2591IntegrationTime integration_time = 4;
    uint32 sensor_id = 5;

    message Payload {
        uint32 lux = 1;
        uint64 timestamp_unix = 2;
        uint32 timestamp_ms_from_start = 3;
    }
    repeated Payload payload = 6;
} 

enum mic_weighting {
    no_weight = 0;
	A_weight = 1;
	C_weight = 2;
} 

message MicLevelPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;
    uint32 mic_sample_freq = 3;
    uint32 sample_length = 4; //e.g., 8192 samples
    uint32 num_of_samples_used = 5; //e.g., if multiple sample windows are averaged
    mic_weighting weighting = 6; //e.g., A-weighting

    message Payload {
        float  sound_spl_db = 1;
        float  sound_rms = 2;
        uint64 timestamp_unix = 3;
        uint32 timestamp_ms_from_start = 4;
    }
    repeated Payload payload = 7;
} 

message SGPPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;
    uint32 sensor_id = 3;

    message Payload {
        uint64 timestamp_unix = 2;
        uint32 timestamp_ms_from_start = 3;
        uint32 sraw_voc = 4;
        uint32 sraw_nox = 5;
        int32 voc_index_value = 6;
        int32 nox_index_value = 7;
    }
    repeated Payload payload = 4;
} 

message BMEPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;
    uint32 sensor_id = 3;
    
    message Payload {
        fixed64 timestamp_sensor = 1;
        uint64 timestamp_unix = 2;
        uint32 timestamp_ms_from_start = 3;
        float signal = 4;
        uint32 signal_dimensions = 5;
        BME680_signal_id sensor_id = 6;
        BME680_accuracy accuracy = 7;
    }
    repeated Payload payload = 4;
} 

message Blink_saturation_settings{
    bool diode_turned_off = 1;
    uint32 diode_saturation_lower_thresh = 2;
    uint32 diode_saturation_upper_thresh = 3;
}

message BlinkBytePayload {
    bytes sample = 1;
}
message BlinkHighResPayload {
    bytes sample = 1;
}
message BlinkPacket{
    uint32 packet_index = 1;
    uint64 timestamp_unix = 2;
    uint32 timestamp_ms_from_start = 3;
    Blink_saturation_settings saturation_settings = 4;
    uint32 sample_rate = 5;

    oneof payload{
        BlinkBytePayload payloadByte = 6;
        BlinkHighResPayload payloadHighRes = 7;
    }
} 



message SHTPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;
    Sht45_precision precision = 3;
    Sht45_heater heater = 4;
    uint32 sensor_id = 5;

    message Payload {
        uint64 timestamp_unix = 1;
        uint32 timestamp_ms_from_start = 2;
        float temperature = 3;
        float humidity = 4;
    }
    repeated Payload payload = 6;
} 

message SpecPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;
    uint32 integration_time = 3;
    uint32 integration_step = 4;
    Spec_gain gain = 5;
    uint32 sensor_id = 6;

    message Payload {
        uint32 band_415 = 1;
        uint32 band_445 = 2;
        uint32 band_480 = 3;
        uint32 band_515 = 4;
        uint32 band_clear_1 = 5;
        uint32 band_nir_1 = 6;
        uint32 band_555 = 7;
        uint32 band_590 = 8;
        uint32 band_630 = 9;
        uint32 band_680 = 10;
        uint32 band_clear_2 = 11;
        uint32 band_nir_2 = 12;
        uint32 flicker = 13;
        uint64 timestamp_unix = 14;
        uint32 timestamp_ms_from_start = 15;
    }
    repeated Payload payload = 7;
} 

message ThermPacket{
    uint32 packet_index = 1;
    uint32 sample_period = 2;

    message Payload {
        Thermopile_location descriptor = 1;
        uint64 timestamp_unix = 2;
        uint32 timestamp_ms_from_start = 3;
        uint32 ambient_raw = 4;
        uint32 object_raw = 5;
        float ambient_temp = 6;
        float object_temp = 7;
    }
    repeated Payload payload = 3;
} 

message IMU_Accel_Settings{
    optional IMU_accel_cutoff cutoff = 1;
    IMU_accel_range range = 2;
    uint32 sample_rate_divisor = 3;
}

message IMU_Gyro_Settings{
    optional IMU_gyro_cutoff cutoff = 1;
    IMU_gyro_range range = 2;
    uint32 sample_rate_divisor = 3;
}

message IMUPacket{
    uint32 packet_index = 1;
    uint64 timestamp_unix = 2;
    uint32 timestamp_ms_from_start = 3;
    float  sampling_frequency = 4;
    IMU_Accel_Settings accel_settings = 5;
    IMU_Gyro_Settings gyro_settings = 6;

    message Payload {
        bytes sample = 1;
    }
    Payload payload = 7;
} 

message MicPacket{
    uint32 packet_index = 1;
    uint32 fft_index = 2;
    uint64 timestamp_unix = 3;
    uint32 timestamp_ms_from_start = 4;
    uint32 sample_period = 5;
    uint32 mic_sample_freq = 6;
    uint32 packets_per_fft = 7; //total packets required to send FFT
    uint32 samples_per_fft = 8; //total samples per FFT
    float start_frequency = 9; 
    float frequency_spacing = 10;

    message Payload {
        repeated float sample = 1;
    }
    Payload payload = 11;
} 



/* defining AirSpec incoming packet structure */

message AirSpecColors{
    uint32 red = 1;
    uint32 green = 2;
    uint32 blue = 3;
}

message AirSpecColorPosition{
    AirSpecColors forward = 1;
    AirSpecColors eye = 2;
    AirSpecColors top = 3;
}

message LightControlPacket {
    AirSpecColorPosition left = 1;
    AirSpecColorPosition right = 2;
}

message SensorControl{
    bool enable_all = 1;
    bool spectrometer = 2;
    bool bme688 = 3;
    bool imu = 4;
    bool thermopiles = 5;
    bool lux = 6;
    bool mic = 7;
    bool sht = 8;
    bool sgp = 9;
    bool blink = 10;
    bool synchronize_windows = 11;
    uint32 window_size_ms = 12;
    uint32 window_period_ms = 13;
}

message LuxSensorConfig{
    uint32 sample_period_ms = 1;
    Tsl2591Gain gain = 2;
    Tsl2591IntegrationTime integration_time = 3;
}

message SGP_Sensor_Config{
    uint32 sample_period_ms = 1;
}

message BME_Sensor_Config{
    uint32 sample_period_ms = 1;
}

message ColorSensorConfig{
    uint32 sample_period_ms = 1;
    uint32 integration_time = 2;
    uint32 integration_step = 3;
    Spec_gain gain = 4;
}

message ThermopileSensorConfig{
    uint32 sample_period_ms = 1;
    bool enable_top_of_nose = 2;
    bool enable_nose_bridge = 3;
    bool enable_front_temple = 4;
    bool enable_mid_temple = 5;
    bool enable_rear_temple = 6;
}

message BlinkSensorConfig{
    uint32 sample_frequency = 1;
    bool enable_daylight_compensation = 2;
    uint32 daylightCompensationUpperThresh = 3;
    uint32 daylightCompensationLowerThresh = 4;
    uint32 enable_windowing = 5;
    uint32 enable_windowing_sync = 6;
    uint32 window_size_ms = 7;
    uint32 window_period_ms = 8;
}

message MicSensorConfig{
    uint32 sample_period_ms = 1;
    uint32 mic_sample_freq = 2;
}

message HumiditySensorConfig{
    uint32 sample_period_ms = 1;
    Sht45_precision precisionLevel = 2;
    Sht45_heater heaterSettings = 3;
}

message IMU_SensorConfig{
    IMU_Accel_Settings accel_settings = 1;
    IMU_Gyro_Settings gyro_settings = 2;
    uint32 enable_windowing = 3;
    uint32 enable_windowing_sync = 4;
    uint32 window_size_ms = 5;
    uint32 window_period_ms = 6;
}

message SensorConfig{
    LuxSensorConfig lux = 1;
    SGP_Sensor_Config sgp = 2;
    BME_Sensor_Config bme = 3;
    ColorSensorConfig color = 4;
    ThermopileSensorConfig thermopile = 5;
    BlinkSensorConfig blink = 6;
    MicSensorConfig mic = 7;
    HumiditySensorConfig humidity = 8;
    IMU_SensorConfig imu = 9;
}

message DFU_Mode{
    bool enable = 1;
}

message BlueGreenTransition{
    bool enable = 1;
    uint32 blue_min_intensity = 2;
    uint32 blue_max_intensity = 3;
    uint32 green_max_intensity = 4; 
    uint32 step_size = 5; 
    uint32 step_duration_ms = 6; 
    uint32 green_hold_length_seconds = 7; 
    uint32 transition_delay_seconds = 8; 
}

message BlinkCalibration{
    bool enable = 1;
    uint32 duration_ms = 2;
}

message RedFlashTask{
    bool enable = 1;
    uint32 red_max_intensity = 2;
    uint32 red_min_intensity = 3;
    uint32 frequency = 4;
    uint32 duration_ms = 5;
    uint32 enable_speaker = 6;
}

message AirSpecConfigHeader{
    uint64 timestamp_unix = 1;
}

message AirSpecConfigPacket {
    AirSpecConfigHeader header = 1;

    oneof payload {
        LightControlPacket ctrl_indiv_led = 2;
        SensorControl sensor_control = 3;
        SensorConfig sensor_config = 4;
        DFU_Mode    dfu_mode = 5;
        BlueGreenTransition blueGreenTransition = 6;
        RedFlashTask redFlashTask = 7;
	BlinkCalibration blinkCalibration = 8;
    }
}


message systemState {
    uint32 firmware_version = 1;
    SensorControl control = 2;
    SensorConfig  config = 3;
}



message appSurveyDataPayload {
    int32 q_index = 1;
    string q_choice = 2;
    uint32 q_group_index = 3;
    uint64 timestamp_unix = 4;
}

message appSurveyDataPacket {
    repeated appSurveyDataPayload payload = 1;
}

message appMetaDataPacket {
    string payload = 1;
    uint32 type = 2;
    uint64 timestamp_unix = 3;
}


message SensorPacket {
    SensorPacketHeader header = 1;

    oneof payload {
        LuxPacket lux_packet = 2;
        SGPPacket sgp_packet = 3;
        BMEPacket bme_packet = 4;
        BlinkPacket blink_packet = 5;
        SHTPacket sht_packet = 6;
        SpecPacket spec_packet = 7;
        ThermPacket therm_packet = 8;
        IMUPacket imu_packet = 9;
        MicPacket mic_packet = 10;
	    MicLevelPacket mic_level_packet = 11;
        appSurveyDataPacket survey_packet = 12;
        appMetaDataPacket meta_data_packet = 13;
	
    }

}

