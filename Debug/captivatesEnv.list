
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174b4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  080175f4  080175f4  000275f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000018  08017a54  08017a54  00027a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000010  08017a6c  08017a6c  00027a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  20000004  08017a7c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005fc0  20000204  08017c7c  00030204  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200061c4  08017c7c  000361c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
  9 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 10 MB_MEM1       000000ac  20030028  20030028  00040000  2**2
                  ALLOC
 11 .debug_info   00079348  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ca5d  00000000  00000000  000a957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003e88  00000000  00000000  000b5fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00003a30  00000000  00000000  000b9e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e63f  00000000  00000000  000bd898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000508d4  00000000  00000000  000fbed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00127e0e  00000000  00000000  0014c7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002745b9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00010b94  00000000  00000000  0027460c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000204 	.word	0x20000204
 800015c:	00000000 	.word	0x00000000
 8000160:	080175dc 	.word	0x080175dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000208 	.word	0x20000208
 800017c:	080175dc 	.word	0x080175dc

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <MX_ADC1_Init+0xc4>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a16:	2210      	movs	r2, #16
 8000a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a48:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a6e:	f002 fb9d 	bl	80031ac <HAL_ADC_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f001 f9e0 	bl	8001e3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_ADC1_Init+0xc8>)
 8000a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a80:	2306      	movs	r3, #6
 8000a82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000a84:	2306      	movs	r3, #6
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a88:	237f      	movs	r3, #127	; 0x7f
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a9a:	f002 fd61 	bl	8003560 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000aa4:	f001 f9ca 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20004560 	.word	0x20004560
 8000ab4:	50040000 	.word	0x50040000
 8000ab8:	19200040 	.word	0x19200040

08000abc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <HAL_ADC_MspInit+0xa4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d13c      	bne.n	8000b58 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ade:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae2:	f7ff ff6b 	bl	80009bc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff ff68 	bl	80009bc <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000aec:	2302      	movs	r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af0:	2303      	movs	r3, #3
 8000af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f003 fd55 	bl	80045b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_ADC_MspInit+0xac>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b0e:	2205      	movs	r2, #5
 8000b10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b32:	2220      	movs	r2, #32
 8000b34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b3e:	f003 fac3 	bl	80040c8 <HAL_DMA_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000b48:	f001 f978 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b50:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_ADC_MspInit+0xa8>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	50040000 	.word	0x50040000
 8000b64:	200045c4 	.word	0x200045c4
 8000b68:	40020008 	.word	0x40020008

08000b6c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000b7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b86:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	cafecafe 	.word	0xcafecafe

08000ba8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c00:	d101      	bne.n	8000c06 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000c26:	d101      	bne.n	8000c2c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	041b      	lsls	r3, r3, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	605a      	str	r2, [r3, #4]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	605a      	str	r2, [r3, #4]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	041b      	lsls	r3, r3, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	615a      	str	r2, [r3, #20]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	615a      	str	r2, [r3, #20]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	609a      	str	r2, [r3, #8]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	619a      	str	r2, [r3, #24]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <LL_LPM_EnableSleep+0x1c>)
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <LL_LPM_EnableSleep+0x1c>)
 8000d3a:	f023 0304 	bic.w	r3, r3, #4
 8000d3e:	6113      	str	r3, [r2, #16]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <MX_APPE_Config+0x18>)
 8000d56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d5a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000d5c:	f000 f806 	bl	8000d6c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d60:	f000 f846 	bl	8000df0 <Config_HSE>

  return;
 8000d64:	bf00      	nop
}
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58004000 	.word	0x58004000

08000d6c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000d70:	f000 f804 	bl	8000d7c <Reset_BackupDomain>

  Reset_IPCC();
 8000d74:	f000 f81a 	bl	8000dac <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000d78:	bf00      	nop
}
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000d80:	f7ff ff34 	bl	8000bec <LL_RCC_IsActiveFlag_PINRST>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00d      	beq.n	8000da6 <Reset_BackupDomain+0x2a>
 8000d8a:	f7ff ff42 	bl	8000c12 <LL_RCC_IsActiveFlag_SFTRST>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d108      	bne.n	8000da6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000d94:	f006 f970 	bl	8007078 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000d98:	f006 f96e 	bl	8007078 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000d9c:	f7ff ff04 	bl	8000ba8 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000da0:	f7ff ff13 	bl	8000bca <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
}
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000db0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000db4:	f7ff ff40 	bl	8000c38 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000db8:	213f      	movs	r1, #63	; 0x3f
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <Reset_IPCC+0x40>)
 8000dbc:	f7ff ff9b 	bl	8000cf6 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000dc0:	213f      	movs	r1, #63	; 0x3f
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <Reset_IPCC+0x40>)
 8000dc4:	f7ff ffa5 	bl	8000d12 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000dc8:	213f      	movs	r1, #63	; 0x3f
 8000dca:	4808      	ldr	r0, [pc, #32]	; (8000dec <Reset_IPCC+0x40>)
 8000dcc:	f7ff ff4d 	bl	8000c6a <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000dd0:	213f      	movs	r1, #63	; 0x3f
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <Reset_IPCC+0x40>)
 8000dd4:	f7ff ff6c 	bl	8000cb0 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000dd8:	213f      	movs	r1, #63	; 0x3f
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <Reset_IPCC+0x40>)
 8000ddc:	f7ff ff57 	bl	8000c8e <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000de0:	213f      	movs	r1, #63	; 0x3f
 8000de2:	4802      	ldr	r0, [pc, #8]	; (8000dec <Reset_IPCC+0x40>)
 8000de4:	f7ff ff76 	bl	8000cd4 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000de8:	bf00      	nop
}
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58000c00 	.word	0x58000c00

08000df0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f00f f90e 	bl	8010018 <OTP_Read>
 8000dfc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	799b      	ldrb	r3, [r3, #6]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff feaf 	bl	8000b6c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
}
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f001 ffd8 	bl	8002dd4 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e30:	d00a      	beq.n	8000e48 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000e32:	f001 ffe7 	bl	8002e04 <HAL_GetTickFreq>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e40:	e002      	b.n	8000e48 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000e42:	f7ff ff75 	bl	8000d30 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000e46:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000e48:	f001 ffc4 	bl	8002dd4 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f4      	bhi.n	8000e42 <HAL_Delay+0x2a>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C1_Lock */
  messageI2C1_LockHandle = osMutexNew(&messageI2C1_Lock_attributes);
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <_Z16MX_FREERTOS_Initv+0x64>)
 8000e6a:	f011 f9d9 	bl	8012220 <osMutexNew>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <_Z16MX_FREERTOS_Initv+0x68>)
 8000e72:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 8000e74:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <_Z16MX_FREERTOS_Initv+0x6c>)
 8000e76:	2112      	movs	r1, #18
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f011 faed 	bl	8012458 <osMessageQueueNew>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_Z16MX_FREERTOS_Initv+0x70>)
 8000e82:	6013      	str	r3, [r2, #0]
			&lightsComplexQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_Z16MX_FREERTOS_Initv+0x74>)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4814      	ldr	r0, [pc, #80]	; (8000edc <_Z16MX_FREERTOS_Initv+0x78>)
 8000e8a:	f010 ff59 	bl	8011d40 <osThreadNew>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <_Z16MX_FREERTOS_Initv+0x7c>)
 8000e92:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <_Z16MX_FREERTOS_Initv+0x80>)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <_Z16MX_FREERTOS_Initv+0x84>)
 8000e9a:	f010 ff51 	bl	8011d40 <osThreadNew>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_Z16MX_FREERTOS_Initv+0x88>)
 8000ea2:	6013      	str	r3, [r2, #0]

  /* creation of thermopileTask */
  thermopileTaskHandle = osThreadNew(Thermopile_Task, NULL, &thermopileTask_attributes);
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_Z16MX_FREERTOS_Initv+0x8c>)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <_Z16MX_FREERTOS_Initv+0x90>)
 8000eaa:	f010 ff49 	bl	8011d40 <osThreadNew>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <_Z16MX_FREERTOS_Initv+0x94>)
 8000eb2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
//  specTaskHandle = osThreadNew(Spec_Task, NULL, &specTask_attributes);
//  luxTaskHandle = osThreadNew(LuxTask, NULL, &luxTask_attributes);
//  bmeTaskHandle = osThreadNew(BME_Task, NULL, &bmeTask_attributes);
//  imuTaskHandle = osThreadNew(IMU_Task, NULL, &imuTask_attributes);
  blinkTaskHandle = osThreadNew(BlinkTask, NULL, &blinkTask_attributes);
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <_Z16MX_FREERTOS_Initv+0x98>)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <_Z16MX_FREERTOS_Initv+0x9c>)
 8000eba:	f010 ff41 	bl	8011d40 <osThreadNew>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <_Z16MX_FREERTOS_Initv+0xa0>)
 8000ec2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	080177e8 	.word	0x080177e8
 8000ecc:	20000234 	.word	0x20000234
 8000ed0:	08017740 	.word	0x08017740
 8000ed4:	20000220 	.word	0x20000220
 8000ed8:	0801777c 	.word	0x0801777c
 8000edc:	08000f09 	.word	0x08000f09
 8000ee0:	20000228 	.word	0x20000228
 8000ee4:	080177a0 	.word	0x080177a0
 8000ee8:	080018f9 	.word	0x080018f9
 8000eec:	2000022c 	.word	0x2000022c
 8000ef0:	080177c4 	.word	0x080177c4
 8000ef4:	080026ed 	.word	0x080026ed
 8000ef8:	20000230 	.word	0x20000230
 8000efc:	08017758 	.word	0x08017758
 8000f00:	08000f21 	.word	0x08000f21
 8000f04:	20000224 	.word	0x20000224

08000f08 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f14:	f011 f875 	bl	8012002 <osDelay>

	while(1){
		ledStartupSequence();
 8000f18:	f000 fd46 	bl	80019a8 <ledStartupSequence>
 8000f1c:	e7fc      	b.n	8000f18 <_Z16StartDefaultTaskPv+0x10>
	...

08000f20 <BlinkTask>:
/**
 * @brief Thread initialization.
 * @param  None
 * @retval None
 */
void BlinkTask(void *argument) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	uint32_t evt;
	uint8_t diodeSaturatedFlag = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float rolling_avg = 255;
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <BlinkTask+0x134>)
 8000f30:	60bb      	str	r3, [r7, #8]
	uint16_t packetsPerHalfBuffer = ceil( ( (float) BLINK_HALF_BUFFER_SIZE)/BLINK_PACKET_SIZE );
 8000f32:	2303      	movs	r3, #3
 8000f34:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t payloadLength = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t blinkDataTracker = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	843b      	strh	r3, [r7, #32]
	uint32_t payload_ID = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
	uint32_t tickCnt;
	uint32_t blinkSampleHalfBuffer_ms = BLINK_HALF_BUFFER_SIZE * (1.0/BLINK_SAMPLE_RATE) * 1000.0;
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	61bb      	str	r3, [r7, #24]
	uint32_t packetRemainder = BLINK_SAMPLE_RATE % BLINK_PACKET_SIZE;
 8000f48:	23c8      	movs	r3, #200	; 0xc8
 8000f4a:	617b      	str	r3, [r7, #20]


	while (1) {
//		evt = osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
		evt = 0x00000001U;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	613b      	str	r3, [r7, #16]
		// if signal was received successfully, start blink task
		if ((evt & 0x00000001U) == 0x00000001U) {
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f8      	beq.n	8000f4c <BlinkTask+0x2c>
//			osMessageQueueGet(statusQueueHandle, &statusMessage, 0U, 1000);
//			statusMessage.blinkEnabled = 1;
//			osMessageQueuePut(statusQueueHandle, (void*) &statusMessage, 0U, 0);

			// start timer for ADC to sample at 1kHz
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_buffer,
 8000f5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f5e:	493e      	ldr	r1, [pc, #248]	; (8001058 <BlinkTask+0x138>)
 8000f60:	483e      	ldr	r0, [pc, #248]	; (800105c <BlinkTask+0x13c>)
 8000f62:	f002 fa6f 	bl	8003444 <HAL_ADC_Start_DMA>
			// start timer for ADC to sample at 1kHz
//			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) blink_float_buffer, sizeof(blink_float_buffer));

//
//			 start timer
			HAL_TIM_Base_Start(&htim2);
 8000f66:	483e      	ldr	r0, [pc, #248]	; (8001060 <BlinkTask+0x140>)
 8000f68:	f00a f86e 	bl	800b048 <HAL_TIM_Base_Start>

			HAL_TIM_Base_Start(&htim16); // modulation frequency is at 1kHz
 8000f6c:	483d      	ldr	r0, [pc, #244]	; (8001064 <BlinkTask+0x144>)
 8000f6e:	f00a f86b 	bl	800b048 <HAL_TIM_Base_Start>
//			 start  PWM channel for blink LED
			if(HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1) == HAL_OK){
 8000f72:	2100      	movs	r1, #0
 8000f74:	483b      	ldr	r0, [pc, #236]	; (8001064 <BlinkTask+0x144>)
 8000f76:	f00a f9bd 	bl	800b2f4 <HAL_TIM_PWM_Start>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <BlinkTask+0x66>
				diodeState = 1;
 8000f80:	4b39      	ldr	r3, [pc, #228]	; (8001068 <BlinkTask+0x148>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
			}

//			HAL_GPIO_WritePin(BLINK_PWM_GPIO_Port, BLINK_PWM_Pin,
//					GPIO_PIN_SET);
			diodeState = 1;
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <BlinkTask+0x148>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]

			// reset external infrared detection flag
			diodeSaturatedFlag = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			//      is passed by reference via queue to masterThread for packetization

			while (1) {

				// wait for data ready flag and/or stop task flags
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny,
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f96:	2100      	movs	r1, #0
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f010 ffb1 	bl	8011f00 <osThreadFlagsWait>
 8000f9e:	6138      	str	r0, [r7, #16]
						osWaitForever);
				blink_ptr_copy = blink_ptr;
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <BlinkTask+0x14c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a32      	ldr	r2, [pc, #200]	; (8001070 <BlinkTask+0x150>)
 8000fa6:	6013      	str	r3, [r2, #0]
//				memcpy(blink_copy,blink_ptr,1000);

				if ((evt & 0x00000004U) == 0x00000004U) {
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d048      	beq.n	8001044 <BlinkTask+0x124>

					tickCnt = HAL_GetTick() - blinkSampleHalfBuffer_ms;
 8000fb2:	f001 ff0f 	bl	8002dd4 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	60fb      	str	r3, [r7, #12]

					// interpolate timestamps for blink packets
					if (previousTick_ms == 0) {
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <BlinkTask+0x154>)
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d108      	bne.n	8000fe0 <BlinkTask+0xc0>
						previousTick_ms = HAL_GetTick();
 8000fce:	f001 ff01 	bl	8002dd4 <HAL_GetTick>
 8000fd2:	ee07 0a90 	vmov	s15, r0
 8000fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <BlinkTask+0x154>)
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
					}
					tick_ms_diff = (HAL_GetTick() - previousTick_ms)
 8000fe0:	f001 fef8 	bl	8002dd4 <HAL_GetTick>
 8000fe4:	ee07 0a90 	vmov	s15, r0
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <BlinkTask+0x154>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee37 7a67 	vsub.f32	s14, s14, s15
							/ ((float) BLINK_ITERATOR_COUNT);
 8000ff6:	eef0 6a04 	vmov.f32	s13, #4	; 0x40200000  2.5
 8000ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
					tick_ms_diff = (HAL_GetTick() - previousTick_ms)
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <BlinkTask+0x158>)
 8001000:	edc3 7a00 	vstr	s15, [r3]
					/* check to see if external infrared is saturating
					 *   if so, disable active diode
					 *   otherwise, leave enabled */

					// BLINK_SAMPLE_RATE == size of blink_ptr array
					diodeSaturatedFlag = externalInfraredDetect(blink_ptr_copy, BLINK_SAMPLE_RATE, &rolling_avg);
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <BlinkTask+0x150>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f853 	bl	80010bc <externalInfraredDetect>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					if(diodeSaturatedFlag){
 800101c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <BlinkTask+0x112>
						if(diodeState) turnOffDiode();
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <BlinkTask+0x148>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d008      	beq.n	800103e <BlinkTask+0x11e>
 800102c:	f000 f826 	bl	800107c <turnOffDiode>
 8001030:	e005      	b.n	800103e <BlinkTask+0x11e>
					}
					else{
						if(!diodeState) turnOnDiode();
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <BlinkTask+0x148>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <BlinkTask+0x11e>
 800103a:	f000 f82f 	bl	800109c <turnOnDiode>
					}

					blinkDataTracker = BLINK_HALF_BUFFER_SIZE;
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	843b      	strh	r3, [r7, #32]
//
//					}
				}

				// stop timer and put thread in idle if signal was reset
				if ((evt & 0x00000002U) == 0x00000002U) {
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d100      	bne.n	8001050 <BlinkTask+0x130>
				evt = osThreadFlagsWait(0x00000006U, osFlagsWaitAny,
 800104e:	e7a0      	b.n	8000f92 <BlinkTask+0x72>
//					// clear any flags
//					osThreadFlagsClear(0x0000000EU);
//
//					payload_ID = 0;

					break;
 8001050:	bf00      	nop
		evt = 0x00000001U;
 8001052:	e77b      	b.n	8000f4c <BlinkTask+0x2c>
 8001054:	437f0000 	.word	0x437f0000
 8001058:	20000238 	.word	0x20000238
 800105c:	20004560 	.word	0x20004560
 8001060:	20004914 	.word	0x20004914
 8001064:	20004960 	.word	0x20004960
 8001068:	20000a10 	.word	0x20000a10
 800106c:	20004624 	.word	0x20004624
 8001070:	2000462c 	.word	0x2000462c
 8001074:	20000a08 	.word	0x20000a08
 8001078:	20000a0c 	.word	0x20000a0c

0800107c <turnOffDiode>:
			}
		}
	}
}

void turnOffDiode(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLINK_PWM_GPIO_Port, BLINK_PWM_Pin,
 8001080:	2200      	movs	r2, #0
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f003 fc02 	bl	8004890 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	diodeState = 0;
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <turnOffDiode+0x1c>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000a10 	.word	0x20000a10

0800109c <turnOnDiode>:

void turnOnDiode(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BLINK_PWM_GPIO_Port, BLINK_PWM_Pin,
 80010a0:	2201      	movs	r2, #1
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f003 fbf2 	bl	8004890 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	diodeState = 1;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <turnOnDiode+0x1c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000a10 	.word	0x20000a10

080010bc <externalInfraredDetect>:

#define INFRARED_DETECT 	1
#define NO_INFRARED_DETECT	0
float32_t sample_avg;
uint8_t detect_active = 0;
uint8_t externalInfraredDetect(uint8_t* blink_sample, uint32_t size_of_blink_ptr, float* rolling_avg){
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]

	//todo: convert to q format or float32 and use arm library. uint8_t can't be typecasted to 32-bit float
//	arm_mean_f32((float *) random_array, 2, &sample_avg);

	// temporary brute force average
	sample_avg = blink_sample[0] + blink_sample[100] + blink_sample[200] + blink_sample[300] + blink_sample[400]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3364      	adds	r3, #100	; 0x64
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	32c8      	adds	r2, #200	; 0xc8
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	4413      	add	r3, r2
               + blink_sample[500] + blink_sample[600] + blink_sample[700] + blink_sample[800] + blink_sample[900];
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001102:	7812      	ldrb	r2, [r2, #0]
 8001104:	4413      	add	r3, r2
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	f502 722f 	add.w	r2, r2, #700	; 0x2bc
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	4413      	add	r3, r2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	4413      	add	r3, r2
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	f502 7261 	add.w	r2, r2, #900	; 0x384
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4413      	add	r3, r2
	sample_avg = blink_sample[0] + blink_sample[100] + blink_sample[200] + blink_sample[300] + blink_sample[400]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <externalInfraredDetect+0x124>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
	sample_avg /= 10;
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <externalInfraredDetect+0x124>)
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800113c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <externalInfraredDetect+0x124>)
 8001142:	edc3 7a00 	vstr	s15, [r3]

	*rolling_avg = INFRARED_DETECT_ALPHA * sample_avg + (1.0-INFRARED_DETECT_ALPHA) * (*rolling_avg);
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <externalInfraredDetect+0x124>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f97c 	bl	8000448 <__aeabi_f2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <externalInfraredDetect+0x128>)
 8001156:	f7ff f9cf 	bl	80004f8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4614      	mov	r4, r2
 8001160:	461d      	mov	r5, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f96e 	bl	8000448 <__aeabi_f2d>
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <externalInfraredDetect+0x128>)
 8001172:	f7ff f9c1 	bl	80004f8 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff f805 	bl	800018c <__adddf3>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fbc7 	bl	800091c <__aeabi_d2f>
 800118e:	4602      	mov	r2, r0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]

	/* SCHMITT TRIGGER */
	if(detect_active){
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <externalInfraredDetect+0x12c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00d      	beq.n	80011b8 <externalInfraredDetect+0xfc>
		if( (*rolling_avg) > INFRARED_DETECT_UPPER_THRESH ){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80011ec <externalInfraredDetect+0x130>
 80011a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	dd10      	ble.n	80011d2 <externalInfraredDetect+0x116>
			detect_active = NO_INFRARED_DETECT;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <externalInfraredDetect+0x12c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e00c      	b.n	80011d2 <externalInfraredDetect+0x116>
		}
	}else{
		if( (*rolling_avg) < INFRARED_DETECT_LOWER_THRESH ){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	d502      	bpl.n	80011d2 <externalInfraredDetect+0x116>
			detect_active = INFRARED_DETECT;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <externalInfraredDetect+0x12c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		}
	}

	return detect_active;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <externalInfraredDetect+0x12c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	20004628 	.word	0x20004628
 80011e4:	3fe00000 	.word	0x3fe00000
 80011e8:	20000a11 	.word	0x20000a11
 80011ec:	436b0000 	.word	0x436b0000

080011f0 <HAL_ADC_ConvCpltCallback>:
//volatile uint32_t pwm_tracker = 0;
//
//volatile uint8_t low_adc_sample = 0;
//volatile uint8_t random_sample = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	end_time = HAL_GetTick() - start_time;
 80011f8:	f001 fdec 	bl	8002dd4 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_ADC_ConvCpltCallback+0x40>)
 8001206:	6013      	str	r3, [r2, #0]
//	pwm_tracker_diff = pwm_tracker - pwm_tracker_s;
	start_time = HAL_GetTick();
 8001208:	f001 fde4 	bl	8002dd4 <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001210:	6013      	str	r3, [r2, #0]
//	if(low_adc_sample){
//		HAL_ADC_Stop(&hadc1);
//		low_adc_sample = 0;
//		return;
//	}
	blink_ptr = &blink_buffer[BLINK_HALF_BUFFER_SIZE];
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_ADC_ConvCpltCallback+0x44>)
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_ADC_ConvCpltCallback+0x48>)
 8001216:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_ADC_ConvCpltCallback+0x4c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2104      	movs	r1, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f010 fe20 	bl	8011e64 <osThreadFlagsSet>

}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000a14 	.word	0x20000a14
 8001230:	20000a18 	.word	0x20000a18
 8001234:	20004624 	.word	0x20004624
 8001238:	20000620 	.word	0x20000620
 800123c:	20000224 	.word	0x20000224

08001240 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	blink_ptr = blink_buffer;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800124c:	601a      	str	r2, [r3, #0]
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2104      	movs	r1, #4
 8001254:	4618      	mov	r0, r3
 8001256:	f010 fe05 	bl	8011e64 <osThreadFlagsSet>

}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20004624 	.word	0x20004624
 8001268:	20000238 	.word	0x20000238
 800126c:	20000224 	.word	0x20000224

08001270 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
//	}
//	pwm_tracker++;

//	low_adc_sample = 1;
//	HAL_ADC_Start(&hadc1);
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerBMESample(void *argument) {
	osThreadFlagsSet(bmeTaskHandle, GRAB_SAMPLE_BIT);
}
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129a:	4293      	cmp	r3, r2
 800129c:	d102      	bne.n	80012a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_BME680 bme;
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80012a0:	f00f f814 	bl	80102cc <_ZN15Adafruit_BME680C1Ev>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000a1c 	.word	0x20000a1c

080012b0 <_GLOBAL__sub_I_periodicBMETimer_id>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff ffe3 	bl	8001284 <_Z41__static_initialization_and_destruction_0ii>
 80012be:	bd80      	pop	{r7, pc}

080012c0 <LL_AHB1_GRP1_EnableClock>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e4:	68fb      	ldr	r3, [r7, #12]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012f6:	2004      	movs	r0, #4
 80012f8:	f7ff ffe2 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff ffdf 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	200b      	movs	r0, #11
 8001308:	f002 feb6 	bl	8004078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800130c:	200b      	movs	r0, #11
 800130e:	f002 fecd 	bl	80040ac <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <LL_AHB2_GRP1_EnableClock>:
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4013      	ands	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff ffda 	bl	8001316 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2004      	movs	r0, #4
 8001364:	f7ff ffd7 	bl	8001316 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff ffd4 	bl	8001316 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	2008      	movs	r0, #8
 8001370:	f7ff ffd1 	bl	8001316 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137a:	4830      	ldr	r0, [pc, #192]	; (800143c <MX_GPIO_Init+0xf4>)
 800137c:	f003 fa88 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2101      	movs	r1, #1
 8001384:	482e      	ldr	r0, [pc, #184]	; (8001440 <MX_GPIO_Init+0xf8>)
 8001386:	f003 fa83 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 800138a:	2302      	movs	r3, #2
 800138c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f003 f907 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 80013a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4820      	ldr	r0, [pc, #128]	; (800143c <MX_GPIO_Init+0xf4>)
 80013ba:	f003 f8f9 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013c2:	2311      	movs	r3, #17
 80013c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_GPIO_Init+0xf8>)
 80013d4:	f003 f8ec 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80013d8:	2304      	movs	r3, #4
 80013da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	4816      	ldr	r0, [pc, #88]	; (8001444 <MX_GPIO_Init+0xfc>)
 80013ec:	f003 f8e0 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f003 f8d3 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 800140a:	f44f 7304 	mov.w	r3, #528	; 0x210
 800140e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <MX_GPIO_Init+0xf8>)
 800141e:	f003 f8c7 	bl	80045b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2105      	movs	r1, #5
 8001426:	2008      	movs	r0, #8
 8001428:	f002 fe26 	bl	8004078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800142c:	2008      	movs	r0, #8
 800142e:	f002 fe3d 	bl	80040ac <HAL_NVIC_EnableIRQ>

}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48000400 	.word	0x48000400

08001448 <LL_AHB2_GRP1_EnableClock>:
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4313      	orrs	r3, r2
 8001490:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_I2C1_Init+0x7c>)
 80014ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_I2C1_Init+0x74>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <MX_I2C1_Init+0x74>)
 80014e8:	f003 fa32 	bl	8004950 <HAL_I2C_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014f2:	f000 fca3 	bl	8001e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <MX_I2C1_Init+0x74>)
 80014fa:	f003 ff6b 	bl	80053d4 <HAL_I2CEx_ConfigAnalogFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 fc9a 	bl	8001e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001508:	2100      	movs	r1, #0
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_I2C1_Init+0x74>)
 800150c:	f003 ffad 	bl	800546a <HAL_I2CEx_ConfigDigitalFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001516:	f000 fc91 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000467c 	.word	0x2000467c
 8001524:	40005400 	.word	0x40005400
 8001528:	10707dbc 	.word	0x10707dbc

0800152c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C3_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C3_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C3_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C3_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C3_Init+0x74>)
 8001568:	f003 f9f2 	bl	8004950 <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001572:	f000 fc63 	bl	8001e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C3_Init+0x74>)
 800157a:	f003 ff2b 	bl	80053d4 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001584:	f000 fc5a 	bl	8001e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C3_Init+0x74>)
 800158c:	f003 ff6d 	bl	800546a <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 fc51 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20004630 	.word	0x20004630
 80015a4:	40005c00 	.word	0x40005c00
 80015a8:	10707dbc 	.word	0x10707dbc

080015ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b09c      	sub	sp, #112	; 0x70
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2250      	movs	r2, #80	; 0x50
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f015 fe75 	bl	80172bc <memset>
  if(i2cHandle->Instance==I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a3f      	ldr	r2, [pc, #252]	; (80016d4 <HAL_I2C_MspInit+0x128>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d12f      	bne.n	800163c <HAL_I2C_MspInit+0x90>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015dc:	2304      	movs	r3, #4
 80015de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015e0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4618      	mov	r0, r3
 80015ec:	f007 fada 	bl	8008ba4 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015f6:	f000 fc21 	bl	8001e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2002      	movs	r0, #2
 80015fc:	f7ff ff24 	bl	8001448 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001600:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001604:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001606:	2312      	movs	r3, #18
 8001608:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	2302      	movs	r3, #2
 8001610:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001612:	2304      	movs	r3, #4
 8001614:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800161a:	4619      	mov	r1, r3
 800161c:	482e      	ldr	r0, [pc, #184]	; (80016d8 <HAL_I2C_MspInit+0x12c>)
 800161e:	f002 ffc7 	bl	80045b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001622:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001626:	f7ff ff28 	bl	800147a <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2105      	movs	r1, #5
 800162e:	201e      	movs	r0, #30
 8001630:	f002 fd22 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001634:	201e      	movs	r0, #30
 8001636:	f002 fd39 	bl	80040ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800163a:	e046      	b.n	80016ca <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <HAL_I2C_MspInit+0x130>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d141      	bne.n	80016ca <HAL_I2C_MspInit+0x11e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001646:	2308      	movs	r3, #8
 8001648:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800164a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4618      	mov	r0, r3
 8001656:	f007 faa5 	bl	8008ba4 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_I2C_MspInit+0xb8>
      Error_Handler();
 8001660:	f000 fbec 	bl	8001e3c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	2004      	movs	r0, #4
 8001666:	f7ff feef 	bl	8001448 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff feec 	bl	8001448 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001670:	2302      	movs	r3, #2
 8001672:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001678:	2301      	movs	r3, #1
 800167a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167c:	2302      	movs	r3, #2
 800167e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001680:	2304      	movs	r3, #4
 8001682:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001688:	4619      	mov	r1, r3
 800168a:	4815      	ldr	r0, [pc, #84]	; (80016e0 <HAL_I2C_MspInit+0x134>)
 800168c:	f002 ff90 	bl	80045b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169c:	2302      	movs	r3, #2
 800169e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016a0:	2304      	movs	r3, #4
 80016a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f002 ff7f 	bl	80045b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016b6:	f7ff fee0 	bl	800147a <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	2020      	movs	r0, #32
 80016c0:	f002 fcda 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80016c4:	2020      	movs	r0, #32
 80016c6:	f002 fcf1 	bl	80040ac <HAL_NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3770      	adds	r7, #112	; 0x70
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	48000400 	.word	0x48000400
 80016dc:	40005c00 	.word	0x40005c00
 80016e0:	48000800 	.word	0x48000800

080016e4 <_ZN17Adafruit_ICM20948D1Ev>:
 *            the ST ICM2948 9-DoF Accelerometer, gyro, and magnetometer
 */
class Adafruit_ICM20948: public Adafruit_ICM20X {
public:
	Adafruit_ICM20948();
	~Adafruit_ICM20948() {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <_ZN17Adafruit_ICM20948D1Ev+0x20>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00f faaf 	bl	8010c58 <_ZN15Adafruit_ICM20XD1Ev>
	}
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0801792c 	.word	0x0801792c

08001708 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerIMUSample(void *argument) {
	osThreadFlagsSet(imuTaskHandle, GRAB_SAMPLE_BIT);
}
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	4293      	cmp	r3, r2
 8001720:	d102      	bne.n	8001728 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_ICM20948 imu;
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001724:	f00f f8ac 	bl	8010880 <_ZN17Adafruit_ICM20948C1Ev>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d107      	bne.n	800173e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001734:	4293      	cmp	r3, r2
 8001736:	d102      	bne.n	800173e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800173a:	f7ff ffd3 	bl	80016e4 <_ZN17Adafruit_ICM20948D1Ev>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000ab4 	.word	0x20000ab4

0800174c <_GLOBAL__sub_I_periodicIMUTimer_id>:
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
 8001750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff ffd7 	bl	8001708 <_Z41__static_initialization_and_destruction_0ii>
 800175a:	bd80      	pop	{r7, pc}

0800175c <_GLOBAL__sub_D_periodicIMUTimer_id>:
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
 8001760:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff ffcf 	bl	8001708 <_Z41__static_initialization_and_destruction_0ii>
 800176a:	bd80      	pop	{r7, pc}

0800176c <LL_AHB3_GRP1_EnableClock>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_IPCC_Init+0x20>)
 80017a6:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <MX_IPCC_Init+0x24>)
 80017a8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_IPCC_Init+0x20>)
 80017ac:	f003 feaa 	bl	8005504 <HAL_IPCC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80017b6:	f000 fb41 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200046c8 	.word	0x200046c8
 80017c4:	58000c00 	.word	0x58000c00

080017c8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_IPCC_MspInit+0x44>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d113      	bne.n	8001802 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80017da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80017de:	f7ff ffc5 	bl	800176c <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 5, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2105      	movs	r1, #5
 80017e6:	202c      	movs	r0, #44	; 0x2c
 80017e8:	f002 fc46 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80017ec:	202c      	movs	r0, #44	; 0x2c
 80017ee:	f002 fc5d 	bl	80040ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	202d      	movs	r0, #45	; 0x2d
 80017f8:	f002 fc3e 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80017fc:	202d      	movs	r0, #45	; 0x2d
 80017fe:	f002 fc55 	bl	80040ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	58000c00 	.word	0x58000c00

08001810 <setup_LP5523>:
		LOG_EN, LOG_EN, LOG_EN, LOG_EN };
uint8_t deviceAddress;
uint8_t led_PWM[9] = { 0 };
uint8_t packet;

void setup_LP5523(uint8_t ADDR) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af04      	add	r7, sp, #16
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <setup_LP5523+0xcc>)
 8001822:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <setup_LP5523+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800182c:	4618      	mov	r0, r3
 800182e:	f010 fd7d 	bl	801232c <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <setup_LP5523+0xd4>)
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG,
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <setup_LP5523+0xcc>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b299      	uxth	r1, r3
 800183e:	230a      	movs	r3, #10
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	2301      	movs	r3, #1
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <setup_LP5523+0xd4>)
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	2200      	movs	r2, #0
 800184e:	4826      	ldr	r0, [pc, #152]	; (80018e8 <setup_LP5523+0xd8>)
 8001850:	f003 f90e 	bl	8004a70 <HAL_I2C_Mem_Write>
			1, &packet, 1, I2C_TIMEOUT);

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <setup_LP5523+0xd4>)
 8001856:	224f      	movs	r2, #79	; 0x4f
 8001858:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1,
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <setup_LP5523+0xcc>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b299      	uxth	r1, r3
 8001860:	230a      	movs	r3, #10
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2301      	movs	r3, #1
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <setup_LP5523+0xd4>)
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2301      	movs	r3, #1
 800186e:	2236      	movs	r2, #54	; 0x36
 8001870:	481d      	ldr	r0, [pc, #116]	; (80018e8 <setup_LP5523+0xd8>)
 8001872:	f003 f8fd 	bl	8004a70 <HAL_I2C_Mem_Write>
			&packet, 1, I2C_TIMEOUT);

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1,
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <setup_LP5523+0xcc>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b299      	uxth	r1, r3
 800187c:	230a      	movs	r3, #10
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2309      	movs	r3, #9
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <setup_LP5523+0xdc>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	2216      	movs	r2, #22
 800188c:	4816      	ldr	r0, [pc, #88]	; (80018e8 <setup_LP5523+0xd8>)
 800188e:	f003 f8ef 	bl	8004a70 <HAL_I2C_Mem_Write>
			led_PWM, 9, I2C_TIMEOUT);

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress,
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <setup_LP5523+0xcc>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b299      	uxth	r1, r3
 8001898:	230a      	movs	r3, #10
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2309      	movs	r3, #9
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <setup_LP5523+0xe0>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	2226      	movs	r2, #38	; 0x26
 80018a8:	480f      	ldr	r0, [pc, #60]	; (80018e8 <setup_LP5523+0xd8>)
 80018aa:	f003 f8e1 	bl	8004a70 <HAL_I2C_Mem_Write>
			LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1,
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <setup_LP5523+0xcc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b299      	uxth	r1, r3
 80018b4:	230a      	movs	r3, #10
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2309      	movs	r3, #9
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <setup_LP5523+0xe4>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	2206      	movs	r2, #6
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <setup_LP5523+0xd8>)
 80018c6:	f003 f8d3 	bl	8004a70 <HAL_I2C_Mem_Write>
			packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C1_LockHandle);
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <setup_LP5523+0xd0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f010 fd7e 	bl	80123d0 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000471a 	.word	0x2000471a
 80018e0:	20000234 	.word	0x20000234
 80018e4:	20004704 	.word	0x20004704
 80018e8:	2000467c 	.word	0x2000467c
 80018ec:	20000b3c 	.word	0x20000b3c
 80018f0:	20000004 	.word	0x20000004
 80018f4:	0801780c 	.word	0x0801780c

080018f8 <ThreadFrontLightsComplexTask>:
	    	}
#endif
}

union ColorComplex receivedColors;
void ThreadFrontLightsComplexTask(void *argument){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]

	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8001900:	2034      	movs	r0, #52	; 0x34
 8001902:	f7ff ff85 	bl	8001810 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 8001906:	2035      	movs	r0, #53	; 0x35
 8001908:	f7ff ff82 	bl	8001810 <setup_LP5523>

	HAL_StatusTypeDef state = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]



	while (1) {
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <ThreadFrontLightsComplexTask+0x98>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001918:	2200      	movs	r2, #0
 800191a:	491e      	ldr	r1, [pc, #120]	; (8001994 <ThreadFrontLightsComplexTask+0x9c>)
 800191c:	f010 fe70 	bl	8012600 <osMessageQueueGet>
						0U, osWaitForever);
		memcpy(led_left_PWM, &receivedColors, 9);
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <ThreadFrontLightsComplexTask+0xa0>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <ThreadFrontLightsComplexTask+0x9c>)
 8001924:	6810      	ldr	r0, [r2, #0]
 8001926:	6851      	ldr	r1, [r2, #4]
 8001928:	c303      	stmia	r3!, {r0, r1}
 800192a:	7a12      	ldrb	r2, [r2, #8]
 800192c:	701a      	strb	r2, [r3, #0]
		memcpy(led_right_PWM, &(receivedColors.color[9]), 9);
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <ThreadFrontLightsComplexTask+0xa4>)
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <ThreadFrontLightsComplexTask+0x9c>)
 8001932:	3209      	adds	r2, #9
 8001934:	6810      	ldr	r0, [r2, #0]
 8001936:	6851      	ldr	r1, [r2, #4]
 8001938:	c303      	stmia	r3!, {r0, r1}
 800193a:	7a12      	ldrb	r2, [r2, #8]
 800193c:	701a      	strb	r2, [r3, #0]
	#ifndef DONGLE_CODE
		osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <ThreadFrontLightsComplexTask+0xa8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001946:	4618      	mov	r0, r3
 8001948:	f010 fcf0 	bl	801232c <osSemaphoreAcquire>

//		HAL_I2C_Mem_Write_DMA(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
//				LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9);
		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 800194c:	2305      	movs	r3, #5
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	2309      	movs	r3, #9
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <ThreadFrontLightsComplexTask+0xa0>)
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	2216      	movs	r2, #22
 800195c:	2168      	movs	r1, #104	; 0x68
 800195e:	4811      	ldr	r0, [pc, #68]	; (80019a4 <ThreadFrontLightsComplexTask+0xac>)
 8001960:	f003 f886 	bl	8004a70 <HAL_I2C_Mem_Write>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]
////			if(counter > 1000){
////				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
////			}
//		}

		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 8001968:	2305      	movs	r3, #5
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2309      	movs	r3, #9
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <ThreadFrontLightsComplexTask+0xa4>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	2216      	movs	r2, #22
 8001978:	216a      	movs	r1, #106	; 0x6a
 800197a:	480a      	ldr	r0, [pc, #40]	; (80019a4 <ThreadFrontLightsComplexTask+0xac>)
 800197c:	f003 f878 	bl	8004a70 <HAL_I2C_Mem_Write>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]
//			if(counter > 1000){
//				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
//			}
//		}

		osSemaphoreRelease(messageI2C1_LockHandle);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <ThreadFrontLightsComplexTask+0xa8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f010 fd21 	bl	80123d0 <osSemaphoreRelease>
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 800198e:	e7bf      	b.n	8001910 <ThreadFrontLightsComplexTask+0x18>
 8001990:	20000220 	.word	0x20000220
 8001994:	20004708 	.word	0x20004708
 8001998:	20000b24 	.word	0x20000b24
 800199c:	20000b30 	.word	0x20000b30
 80019a0:	20000234 	.word	0x20000234
 80019a4:	2000467c 	.word	0x2000467c

080019a8 <ledStartupSequence>:
{
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
}
#endif

void ledStartupSequence(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 80019ac:	4864      	ldr	r0, [pc, #400]	; (8001b40 <ledStartupSequence+0x198>)
 80019ae:	f000 f8ed 	bl	8001b8c <resetColor>

	receivedColor.colors_indiv.left_front_b = 255;
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <ledStartupSequence+0x198>)
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	705a      	strb	r2, [r3, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <ledStartupSequence+0x19c>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	2200      	movs	r2, #0
 80019c0:	495f      	ldr	r1, [pc, #380]	; (8001b40 <ledStartupSequence+0x198>)
 80019c2:	f010 fdbd 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor););
	osDelay(LED_START_SEQ_INTERVAL);
 80019c6:	2050      	movs	r0, #80	; 0x50
 80019c8:	f010 fb1b 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.left_front_b = 0;
 80019cc:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <ledStartupSequence+0x198>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	705a      	strb	r2, [r3, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 80019d2:	4b5b      	ldr	r3, [pc, #364]	; (8001b40 <ledStartupSequence+0x198>)
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	701a      	strb	r2, [r3, #0]

	receivedColor.colors_indiv.left_top_b = 255;
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <ledStartupSequence+0x198>)
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	709a      	strb	r2, [r3, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <ledStartupSequence+0x19c>)
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	2200      	movs	r2, #0
 80019e6:	4956      	ldr	r1, [pc, #344]	; (8001b40 <ledStartupSequence+0x198>)
 80019e8:	f010 fdaa 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 80019ec:	2050      	movs	r0, #80	; 0x50
 80019ee:	f010 fb08 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.left_front_g = 0;
 80019f2:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <ledStartupSequence+0x198>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 80019f8:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <ledStartupSequence+0x198>)
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_b = 0;
 80019fe:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <ledStartupSequence+0x198>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	709a      	strb	r2, [r3, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <ledStartupSequence+0x198>)
 8001a06:	22ff      	movs	r2, #255	; 0xff
 8001a08:	70da      	strb	r2, [r3, #3]

	receivedColor.colors_indiv.left_side_b = 255;
 8001a0a:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <ledStartupSequence+0x198>)
 8001a0c:	22ff      	movs	r2, #255	; 0xff
 8001a0e:	711a      	strb	r2, [r3, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <ledStartupSequence+0x19c>)
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	2300      	movs	r3, #0
 8001a16:	2200      	movs	r2, #0
 8001a18:	4949      	ldr	r1, [pc, #292]	; (8001b40 <ledStartupSequence+0x198>)
 8001a1a:	f010 fd91 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001a1e:	2050      	movs	r0, #80	; 0x50
 8001a20:	f010 faef 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.left_front_r = 0;
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <ledStartupSequence+0x198>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_g = 0;
 8001a2a:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <ledStartupSequence+0x198>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	70da      	strb	r2, [r3, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <ledStartupSequence+0x198>)
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_b = 0;
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <ledStartupSequence+0x198>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 8001a3c:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <ledStartupSequence+0x198>)
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	715a      	strb	r2, [r3, #5]

	receivedColor.colors_indiv.right_side_b = 255;
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <ledStartupSequence+0x198>)
 8001a44:	22ff      	movs	r2, #255	; 0xff
 8001a46:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <ledStartupSequence+0x19c>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	493b      	ldr	r1, [pc, #236]	; (8001b40 <ledStartupSequence+0x198>)
 8001a52:	f010 fd75 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001a56:	2050      	movs	r0, #80	; 0x50
 8001a58:	f010 fad3 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.left_top_r = 0;
 8001a5c:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <ledStartupSequence+0x198>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_g = 0;
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <ledStartupSequence+0x198>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <ledStartupSequence+0x198>)
 8001a6a:	22ff      	movs	r2, #255	; 0xff
 8001a6c:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_b = 0;
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <ledStartupSequence+0x198>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	735a      	strb	r2, [r3, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 8001a74:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <ledStartupSequence+0x198>)
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	739a      	strb	r2, [r3, #14]

	receivedColor.colors_indiv.right_top_b = 255;
 8001a7a:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <ledStartupSequence+0x198>)
 8001a7c:	22ff      	movs	r2, #255	; 0xff
 8001a7e:	72da      	strb	r2, [r3, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <ledStartupSequence+0x19c>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	2300      	movs	r3, #0
 8001a86:	2200      	movs	r2, #0
 8001a88:	492d      	ldr	r1, [pc, #180]	; (8001b40 <ledStartupSequence+0x198>)
 8001a8a:	f010 fd59 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001a8e:	2050      	movs	r0, #80	; 0x50
 8001a90:	f010 fab7 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.left_side_r = 0;
 8001a94:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <ledStartupSequence+0x198>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_g = 0;
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <ledStartupSequence+0x198>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <ledStartupSequence+0x198>)
 8001aa2:	22ff      	movs	r2, #255	; 0xff
 8001aa4:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_b = 0;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <ledStartupSequence+0x198>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	72da      	strb	r2, [r3, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <ledStartupSequence+0x198>)
 8001aae:	22ff      	movs	r2, #255	; 0xff
 8001ab0:	731a      	strb	r2, [r3, #12]

	receivedColor.colors_indiv.right_front_b = 255;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <ledStartupSequence+0x198>)
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	729a      	strb	r2, [r3, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <ledStartupSequence+0x19c>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	491f      	ldr	r1, [pc, #124]	; (8001b40 <ledStartupSequence+0x198>)
 8001ac2:	f010 fd3d 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001ac6:	2050      	movs	r0, #80	; 0x50
 8001ac8:	f010 fa9b 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.right_side_r = 0;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <ledStartupSequence+0x198>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_g = 0;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <ledStartupSequence+0x198>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	731a      	strb	r2, [r3, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <ledStartupSequence+0x198>)
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_b = 0;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <ledStartupSequence+0x198>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	729a      	strb	r2, [r3, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <ledStartupSequence+0x198>)
 8001ae6:	22ff      	movs	r2, #255	; 0xff
 8001ae8:	725a      	strb	r2, [r3, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <ledStartupSequence+0x19c>)
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	4913      	ldr	r1, [pc, #76]	; (8001b40 <ledStartupSequence+0x198>)
 8001af4:	f010 fd24 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001af8:	2050      	movs	r0, #80	; 0x50
 8001afa:	f010 fa82 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.right_top_r = 0;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <ledStartupSequence+0x198>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_g = 0;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <ledStartupSequence+0x198>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	725a      	strb	r2, [r3, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <ledStartupSequence+0x198>)
 8001b0c:	22ff      	movs	r2, #255	; 0xff
 8001b0e:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <ledStartupSequence+0x19c>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <ledStartupSequence+0x198>)
 8001b1a:	f010 fd11 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001b1e:	2050      	movs	r0, #80	; 0x50
 8001b20:	f010 fa6f 	bl	8012002 <osDelay>

	receivedColor.colors_indiv.right_front_r = 0;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <ledStartupSequence+0x198>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <ledStartupSequence+0x19c>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2200      	movs	r2, #0
 8001b32:	4903      	ldr	r1, [pc, #12]	; (8001b40 <ledStartupSequence+0x198>)
 8001b34:	f010 fd04 	bl	8012540 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);

	ledDisconnectNotification();
 8001b38:	f000 f806 	bl	8001b48 <ledDisconnectNotification>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000471c 	.word	0x2000471c
 8001b44:	20000220 	.word	0x20000220

08001b48 <ledDisconnectNotification>:

void ledDisconnectNotification(void){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <ledDisconnectNotification+0x3c>)
 8001b4e:	f000 f81d 	bl	8001b8c <resetColor>

	receivedColor.colors_indiv.left_side_g = 0;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <ledDisconnectNotification+0x3c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <ledDisconnectNotification+0x3c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <ledDisconnectNotification+0x3c>)
 8001b60:	2232      	movs	r2, #50	; 0x32
 8001b62:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <ledDisconnectNotification+0x3c>)
 8001b66:	2232      	movs	r2, #50	; 0x32
 8001b68:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <ledDisconnectNotification+0x40>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	4904      	ldr	r1, [pc, #16]	; (8001b84 <ledDisconnectNotification+0x3c>)
 8001b74:	f010 fce4 	bl	8012540 <osMessageQueuePut>
	osDelay(10);
 8001b78:	200a      	movs	r0, #10
 8001b7a:	f010 fa42 	bl	8012002 <osDelay>
//	FrontLightsSet(&receivedColor);
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000471c 	.word	0x2000471c
 8001b88:	20000220 	.word	0x20000220

08001b8c <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 8001b8c:	b4b0      	push	{r4, r5, r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <resetColor+0x28>)
 8001b98:	461d      	mov	r5, r3
 8001b9a:	4614      	mov	r4, r2
 8001b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9e:	6028      	str	r0, [r5, #0]
 8001ba0:	6069      	str	r1, [r5, #4]
 8001ba2:	60aa      	str	r2, [r5, #8]
 8001ba4:	60eb      	str	r3, [r5, #12]
 8001ba6:	8823      	ldrh	r3, [r4, #0]
 8001ba8:	822b      	strh	r3, [r5, #16]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bcb0      	pop	{r4, r5, r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	080177f8 	.word	0x080177f8

08001bb8 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerLuxSample(void *argument) {
	osThreadFlagsSet(luxTaskHandle, GRAB_SAMPLE_BIT);
}
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d102      	bne.n	8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x20>
TSL2772 luxSensor;
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001bd4:	f00f fffa 	bl	8011bcc <_ZN7TSL2772C1Ev>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d107      	bne.n	8001bee <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001bea:	f010 f80f 	bl	8011c0c <_ZN7TSL2772D1Ev>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000b48 	.word	0x20000b48

08001bfc <_GLOBAL__sub_I_periodicLuxTimer_id>:
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff ffd7 	bl	8001bb8 <_Z41__static_initialization_and_destruction_0ii>
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_GLOBAL__sub_D_periodicLuxTimer_id>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff ffcf 	bl	8001bb8 <_Z41__static_initialization_and_destruction_0ii>
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <LL_RCC_LSE_SetDriveCapability>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2c:	f023 0218 	bic.w	r2, r3, #24
 8001c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4c:	f001 f88e 	bl	8002d6c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001c50:	f7ff f87e 	bl	8000d50 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c54:	f000 f826 	bl	8001ca4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c58:	f000 f8a2 	bl	8001da0 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001c5c:	f7ff fda0 	bl	80017a0 <MX_IPCC_Init>
  MX_TIM16_Init();
  MX_TIM2_Init();
  MX_USB_Device_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 8001c60:	f7ff fb72 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c64:	f7ff fb45 	bl	80012f2 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c68:	f7fe fec2 	bl	80009f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c6c:	f7ff fc1e 	bl	80014ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c70:	f7ff fc5c 	bl	800152c <MX_I2C3_Init>
  MX_RF_Init();
 8001c74:	f000 f8e7 	bl	8001e46 <MX_RF_Init>
  MX_RTC_Init();
 8001c78:	f000 f916 	bl	8001ea8 <MX_RTC_Init>
  MX_SAI1_Init();
 8001c7c:	f000 f984 	bl	8001f88 <MX_SAI1_Init>
  MX_SPI1_Init();
 8001c80:	f000 fa7e 	bl	8002180 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c84:	f000 faba 	bl	80021fc <MX_SPI2_Init>
  MX_TIM16_Init();
 8001c88:	f000 ff68 	bl	8002b5c <MX_TIM16_Init>
  MX_TIM2_Init();
 8001c8c:	f000 fef2 	bl	8002a74 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8001c90:	f014 f920 	bl	8015ed4 <MX_USB_Device_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c94:	f010 f80a 	bl	8011cac <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c98:	f7ff f8e4 	bl	8000e64 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8001c9c:	f010 f82a 	bl	8011cf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001ca0:	e7fe      	b.n	8001ca0 <main+0x58>
	...

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09a      	sub	sp, #104	; 0x68
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2248      	movs	r2, #72	; 0x48
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f015 fb02 	bl	80172bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cca:	f005 f9d5 	bl	8007078 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff ffa4 	bl	8001c1c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <SystemClock_Config+0xf8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <SystemClock_Config+0xf8>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <SystemClock_Config+0xf8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001cf0:	2327      	movs	r3, #39	; 0x27
 8001cf2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d04:	2301      	movs	r3, #1
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001d20:	2320      	movs	r3, #32
 8001d22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001d2a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001d2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d34:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 fd4c 	bl	80077d8 <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001d50:	f000 f874 	bl	8001e3c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d54:	236f      	movs	r3, #111	; 0x6f
 8001d56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2103      	movs	r1, #3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f006 f8bb 	bl	8007ef0 <HAL_RCC_ClockConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001d8a:	f000 f857 	bl	8001e3c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d8e:	f007 fc96 	bl	80096be <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d92:	bf00      	nop
 8001d94:	3768      	adds	r7, #104	; 0x68
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	58000400 	.word	0x58000400

08001da0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da6:	463b      	mov	r3, r7
 8001da8:	2250      	movs	r2, #80	; 0x50
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f015 fa85 	bl	80172bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001db2:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8001db6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 12;
 8001db8:	230c      	movs	r3, #12
 8001dba:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001dc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dcc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_Z24PeriphCommonClock_Configv+0x74>)
 8001dd0:	617b      	str	r3, [r7, #20]
                              |RCC_PLLSAI1_ADCCLK;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001dd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001de2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001dec:	2310      	movs	r3, #16
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 fed6 	bl	8008ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <_Z24PeriphCommonClock_Configv+0x6c>
  {
    Error_Handler();
 8001e08:	f000 f818 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e0c:	bf00      	nop
 8001e0e:	3750      	adds	r7, #80	; 0x50
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	11010000 	.word	0x11010000

08001e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e2a:	f000 ffbf 	bl	8002dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40012c00 	.word	0x40012c00

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>

08001e46 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_RCC_EnableRTC>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_APB1_GRP1_EnableClock>:
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_RTC_Init+0x50>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001eba:	220f      	movs	r2, #15
 8001ebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001ec0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ec4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <MX_RTC_Init+0x4c>)
 8001ee0:	f007 feb2 	bl	8009c48 <HAL_RTC_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001eea:	f7ff ffa7 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20004744 	.word	0x20004744
 8001ef8:	40002800 	.word	0x40002800

08001efc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b096      	sub	sp, #88	; 0x58
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	2250      	movs	r2, #80	; 0x50
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f015 f9d5 	bl	80172bc <memset>
  if(rtcHandle->Instance==RTC)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_RTC_MspInit+0x54>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d115      	bne.n	8001f48 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f20:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 fe39 	bl	8008ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f38:	f7ff ff80 	bl	8001e3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f3c:	f7ff ff8a 	bl	8001e54 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f44:	f7ff ff97 	bl	8001e76 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3758      	adds	r7, #88	; 0x58
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40002800 	.word	0x40002800

08001f54 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001f8e:	4a19      	ldr	r2, [pc, #100]	; (8001ff4 <MX_SAI1_Init+0x6c>)
 8001f90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <MX_SAI1_Init+0x70>)
 8001fba:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_SAI1_Init+0x68>)
 8001fde:	f007 ff21 	bl	8009e24 <HAL_SAI_InitProtocol>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001fe8:	f7ff ff28 	bl	8001e3c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20004768 	.word	0x20004768
 8001ff4:	40015404 	.word	0x40015404
 8001ff8:	0002ee00 	.word	0x0002ee00

08001ffc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_SAI_MspInit+0x78>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12d      	bne.n	800206a <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_SAI_MspInit+0x7c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002016:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800201a:	f7ff ff9b 	bl	8001f54 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_SAI_MspInit+0x7c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <HAL_SAI_MspInit+0x7c>)
 8002026:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002028:	2308      	movs	r3, #8
 800202a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002038:	230d      	movs	r3, #13
 800203a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4619      	mov	r1, r3
 8002042:	480e      	ldr	r0, [pc, #56]	; (800207c <HAL_SAI_MspInit+0x80>)
 8002044:	f002 fab4 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002048:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800204c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800205a:	230d      	movs	r3, #13
 800205c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	4619      	mov	r1, r3
 8002064:	4806      	ldr	r0, [pc, #24]	; (8002080 <HAL_SAI_MspInit+0x84>)
 8002066:	f002 faa3 	bl	80045b0 <HAL_GPIO_Init>

    }
}
 800206a:	bf00      	nop
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40015404 	.word	0x40015404
 8002078:	20000b60 	.word	0x20000b60
 800207c:	48000800 	.word	0x48000800
 8002080:	48000400 	.word	0x48000400

08002084 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerSpectrometerSample(void *argument) {
	osThreadFlagsSet(specTaskHandle, GRAB_SAMPLE_BIT);
}
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209a:	4293      	cmp	r3, r2
 800209c:	d102      	bne.n	80020a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_AS7341 specSensor;
 800209e:	4809      	ldr	r0, [pc, #36]	; (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80020a0:	f00e f844 	bl	801012c <_ZN15Adafruit_AS7341C1Ev>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d107      	bne.n	80020ba <_Z41__static_initialization_and_destruction_0ii+0x36>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d102      	bne.n	80020ba <_Z41__static_initialization_and_destruction_0ii+0x36>
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80020b6:	f00e f853 	bl	8010160 <_ZN15Adafruit_AS7341D1Ev>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000b64 	.word	0x20000b64

080020c8 <_GLOBAL__sub_I_periodicSpecTimer_id>:
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff ffd7 	bl	8002084 <_Z41__static_initialization_and_destruction_0ii>
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_GLOBAL__sub_D_periodicSpecTimer_id>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
 80020dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff ffcf 	bl	8002084 <_Z41__static_initialization_and_destruction_0ii>
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <LL_AHB2_GRP1_EnableClock>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800210c:	68fb      	ldr	r3, [r7, #12]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_APB1_GRP1_EnableClock>:
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_APB2_GRP1_EnableClock>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_SPI1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_SPI1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_SPI1_Init+0x74>)
 800218c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_SPI1_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_SPI1_Init+0x74>)
 800219a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800219e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021ce:	2207      	movs	r2, #7
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021da:	2208      	movs	r2, #8
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_SPI1_Init+0x74>)
 80021e0:	f008 f952 	bl	800a488 <HAL_SPI_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f7ff fe27 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20004864 	.word	0x20004864
 80021f8:	40013000 	.word	0x40013000

080021fc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <MX_SPI2_Init+0x74>)
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <MX_SPI2_Init+0x78>)
 8002204:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_SPI2_Init+0x74>)
 8002208:	f44f 7282 	mov.w	r2, #260	; 0x104
 800220c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <MX_SPI2_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <MX_SPI2_Init+0x74>)
 8002216:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800221a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <MX_SPI2_Init+0x74>)
 800221e:	2202      	movs	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <MX_SPI2_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_SPI2_Init+0x74>)
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <MX_SPI2_Init+0x74>)
 8002232:	2218      	movs	r2, #24
 8002234:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_SPI2_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_SPI2_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_SPI2_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_SPI2_Init+0x74>)
 800224a:	2207      	movs	r2, #7
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_SPI2_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_SPI2_Init+0x74>)
 8002256:	2208      	movs	r2, #8
 8002258:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_SPI2_Init+0x74>)
 800225c:	f008 f914 	bl	800a488 <HAL_SPI_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002266:	f7ff fde9 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20004800 	.word	0x20004800
 8002274:	40003800 	.word	0x40003800

08002278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a31      	ldr	r2, [pc, #196]	; (800235c <HAL_SPI_MspInit+0xe4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12c      	bne.n	80022f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800229a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800229e:	f7ff ff55 	bl	800214c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2002      	movs	r0, #2
 80022a4:	f7ff ff20 	bl	80020e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7ff ff1d 	bl	80020e8 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 80022ae:	2338      	movs	r3, #56	; 0x38
 80022b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022be:	2305      	movs	r3, #5
 80022c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	4825      	ldr	r0, [pc, #148]	; (8002360 <HAL_SPI_MspInit+0xe8>)
 80022ca:	f002 f971 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e0:	2305      	movs	r3, #5
 80022e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ee:	f002 f95f 	bl	80045b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022f2:	e02f      	b.n	8002354 <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_SPI_MspInit+0xec>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d12a      	bne.n	8002354 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002302:	f7ff ff0a 	bl	800211a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	2008      	movs	r0, #8
 8002308:	f7ff feee 	bl	80020e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230c:	2002      	movs	r0, #2
 800230e:	f7ff feeb 	bl	80020e8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002312:	2302      	movs	r3, #2
 8002314:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002322:	2305      	movs	r3, #5
 8002324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	4619      	mov	r1, r3
 800232c:	480e      	ldr	r0, [pc, #56]	; (8002368 <HAL_SPI_MspInit+0xf0>)
 800232e:	f002 f93f 	bl	80045b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002332:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002336:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002344:	2305      	movs	r3, #5
 8002346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <HAL_SPI_MspInit+0xe8>)
 8002350:	f002 f92e 	bl	80045b0 <HAL_GPIO_Init>
}
 8002354:	bf00      	nop
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40013000 	.word	0x40013000
 8002360:	48000400 	.word	0x48000400
 8002364:	40003800 	.word	0x40003800
 8002368:	48000c00 	.word	0x48000c00

0800236c <LL_AHB3_GRP1_EnableClock>:
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800237a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4313      	orrs	r3, r2
 8002382:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002390:	68fb      	ldr	r3, [r7, #12]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80023a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023a6:	f7ff ffe1 	bl	800236c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	210f      	movs	r1, #15
 80023ae:	f06f 0001 	mvn.w	r0, #1
 80023b2:	f001 fe61 	bl	8004078 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2105      	movs	r1, #5
 80023ba:	202e      	movs	r0, #46	; 0x2e
 80023bc:	f001 fe5c 	bl	8004078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80023c0:	202e      	movs	r0, #46	; 0x2e
 80023c2:	f001 fe73 	bl	80040ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}

080023ca <LL_APB2_GRP1_EnableClock>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	; 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	2019      	movs	r0, #25
 8002412:	f001 fe31 	bl	8004078 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002416:	2019      	movs	r0, #25
 8002418:	f001 fe48 	bl	80040ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800241c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002420:	f7ff ffd3 	bl	80023ca <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002424:	f107 0208 	add.w	r2, r7, #8
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f005 ff34 	bl	800829c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002434:	f005 ff1c 	bl	8008270 <HAL_RCC_GetPCLK2Freq>
 8002438:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_InitTick+0x8c>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	3b01      	subs	r3, #1
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_InitTick+0x90>)
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_InitTick+0x94>)
 800244c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_InitTick+0x90>)
 8002450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002454:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002456:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_InitTick+0x90>)
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_InitTick+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_InitTick+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <HAL_InitTick+0x90>)
 800246a:	f008 fd95 	bl	800af98 <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <HAL_InitTick+0x90>)
 8002476:	f008 fe2d 	bl	800b0d4 <HAL_TIM_Base_Start_IT>
 800247a:	4603      	mov	r3, r0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	431bde83 	.word	0x431bde83
 800248c:	200048c8 	.word	0x200048c8
 8002490:	40012c00 	.word	0x40012c00

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80024c4:	2004      	movs	r0, #4
 80024c6:	f002 f9fb 	bl	80048c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA1_Channel1_IRQHandler+0x10>)
 80024d6:	f001 ff1a 	bl	800430e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200045c4 	.word	0x200045c4

080024e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <USB_LP_IRQHandler+0x10>)
 80024ea:	f003 f998 	bl	800581e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20005ec0 	.word	0x20005ec0

080024f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <TIM1_UP_TIM16_IRQHandler+0x14>)
 80024fe:	f008 ffd3 	bl	800b4a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002504:	f008 ffd0 	bl	800b4a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200048c8 	.word	0x200048c8
 8002510:	20004960 	.word	0x20004960

08002514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM2_IRQHandler+0x10>)
 800251a:	f008 ffc5 	bl	800b4a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20004914 	.word	0x20004914

08002528 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <I2C1_EV_IRQHandler+0x10>)
 800252e:	f002 fccd 	bl	8004ecc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000467c 	.word	0x2000467c

0800253c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <I2C3_EV_IRQHandler+0x10>)
 8002542:	f002 fcc3 	bl	8004ecc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20004630 	.word	0x20004630

08002550 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002554:	f013 fbfc 	bl	8015d50 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002560:	f013 fc2e 	bl	8015dc0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800256c:	f002 f9cc 	bl	8004908 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	return 1;
 8002578:	2301      	movs	r3, #1
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_kill>:

int _kill(int pid, int sig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800258e:	f014 fe4b 	bl	8017228 <__errno>
 8002592:	4603      	mov	r3, r0
 8002594:	2216      	movs	r2, #22
 8002596:	601a      	str	r2, [r3, #0]
	return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_exit>:

void _exit (int status)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ffe7 	bl	8002584 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025b6:	e7fe      	b.n	80025b6 <_exit+0x12>

080025b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <_sbrk+0x5c>)
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <_sbrk+0x60>)
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <_sbrk+0x64>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <_sbrk+0x68>)
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d207      	bcs.n	80025f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e8:	f014 fe1e 	bl	8017228 <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	220c      	movs	r2, #12
 80025f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f6:	e009      	b.n	800260c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <_sbrk+0x64>)
 8002608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20030000 	.word	0x20030000
 8002618:	00000400 	.word	0x00000400
 800261c:	20000b8c 	.word	0x20000b8c
 8002620:	200061c8 	.word	0x200061c8

08002624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <SystemInit+0x98>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <SystemInit+0x98>)
 8002630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002650:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <SystemInit+0x9c>)
 800265e:	4013      	ands	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266e:	f023 0305 	bic.w	r3, r3, #5
 8002672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800267e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <SystemInit+0xa0>)
 8002690:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <SystemInit+0xa0>)
 8002698:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00
 80026c0:	faf6fefb 	.word	0xfaf6fefb
 80026c4:	22041000 	.word	0x22041000

080026c8 <_ZN8CALIPILEC1Ev>:
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	721a      	strb	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <Thermopile_Task>:
void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp);

uint16_t thermIdx;
uint32_t thermID;

void Thermopile_Task(void *argument) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
//	tp_nose_bridge.setup((uint8_t) THERMOPLE_NOSE_BRIDGE_ADDR, &hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
//	tp_nose_bridge.wake(); 		// wakeup thermopile sensors on i2c1 bus
//	tp_temple_front.setup((uint8_t) THERMOPLE_TEMPLE_FRONT_ADDR, &hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
//	tp_temple_front.wake(); 	// wakeup thermopile sensors on i2c3 bus

	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <Thermopile_Task+0x174>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002700:	4618      	mov	r0, r3
 8002702:	f00f fe13 	bl	801232c <osSemaphoreAcquire>
	initThermopiles(&tp_nose_tip,		THERMOPLE_NOSE_TIP_ADDR,	&hi2c1,	THERMOPLE_NOSE_TIP_ID);
 8002706:	2301      	movs	r3, #1
 8002708:	4a56      	ldr	r2, [pc, #344]	; (8002864 <Thermopile_Task+0x178>)
 800270a:	210c      	movs	r1, #12
 800270c:	4856      	ldr	r0, [pc, #344]	; (8002868 <Thermopile_Task+0x17c>)
 800270e:	f000 f8c3 	bl	8002898 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_nose_bridge,	THERMOPLE_NOSE_BRIDGE_ADDR,	&hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
 8002712:	2302      	movs	r3, #2
 8002714:	4a53      	ldr	r2, [pc, #332]	; (8002864 <Thermopile_Task+0x178>)
 8002716:	210d      	movs	r1, #13
 8002718:	4854      	ldr	r0, [pc, #336]	; (800286c <Thermopile_Task+0x180>)
 800271a:	f000 f8bd 	bl	8002898 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_front,	THERMOPLE_TEMPLE_FRONT_ADDR,&hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
 800271e:	2303      	movs	r3, #3
 8002720:	4a53      	ldr	r2, [pc, #332]	; (8002870 <Thermopile_Task+0x184>)
 8002722:	210f      	movs	r1, #15
 8002724:	4853      	ldr	r0, [pc, #332]	; (8002874 <Thermopile_Task+0x188>)
 8002726:	f000 f8b7 	bl	8002898 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_mid,		THERMOPLE_TEMPLE_MID_ADDR,	&hi2c3, THERMOPLE_TEMPLE_MID_ADDR_ID);
 800272a:	2304      	movs	r3, #4
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <Thermopile_Task+0x184>)
 800272e:	210e      	movs	r1, #14
 8002730:	4851      	ldr	r0, [pc, #324]	; (8002878 <Thermopile_Task+0x18c>)
 8002732:	f000 f8b1 	bl	8002898 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_back,	THERMOPLE_TEMPLE_BACK_ADDR,	&hi2c3, THERMOPLE_TEMPLE_BACK_ADDR_ID);
 8002736:	2305      	movs	r3, #5
 8002738:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <Thermopile_Task+0x184>)
 800273a:	210c      	movs	r1, #12
 800273c:	484f      	ldr	r0, [pc, #316]	; (800287c <Thermopile_Task+0x190>)
 800273e:	f000 f8ab 	bl	8002898 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	osSemaphoreRelease(messageI2C1_LockHandle);
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <Thermopile_Task+0x174>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f00f fe42 	bl	80123d0 <osSemaphoreRelease>

	header.payloadLength = MAX_THERMOPILE_SAMPLES_PACKET
 800274c:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <Thermopile_Task+0x194>)
 800274e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8002752:	60da      	str	r2, [r3, #12]
			* sizeof(thermopile_packet);
	header.reserved[0] = THERMOPILE_SAMPLE_PERIOD_MS;
 8002754:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <Thermopile_Task+0x194>)
 8002756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800275a:	611a      	str	r2, [r3, #16]
	header.reserved[1] = THERMOPILE_CNT;
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <Thermopile_Task+0x194>)
 800275e:	2202      	movs	r2, #2
 8002760:	615a      	str	r2, [r3, #20]

	thermIdx = 0;
 8002762:	4b48      	ldr	r3, [pc, #288]	; (8002884 <Thermopile_Task+0x198>)
 8002764:	2200      	movs	r2, #0
 8002766:	801a      	strh	r2, [r3, #0]
	thermID = 0;
 8002768:	4b47      	ldr	r3, [pc, #284]	; (8002888 <Thermopile_Task+0x19c>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

	periodicThermopileTimer_id = osTimerNew(triggerThermopileSample,
 800276e:	2300      	movs	r3, #0
 8002770:	2200      	movs	r2, #0
 8002772:	2101      	movs	r1, #1
 8002774:	4845      	ldr	r0, [pc, #276]	; (800288c <Thermopile_Task+0x1a0>)
 8002776:	f00f fc75 	bl	8012064 <osTimerNew>
 800277a:	4603      	mov	r3, r0
 800277c:	4a44      	ldr	r2, [pc, #272]	; (8002890 <Thermopile_Task+0x1a4>)
 800277e:	6013      	str	r3, [r2, #0]
			osTimerPeriodic, NULL, NULL);
	osTimerStart(periodicThermopileTimer_id, THERMOPILE_SAMPLE_PERIOD_MS);
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <Thermopile_Task+0x1a4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002788:	4618      	mov	r0, r3
 800278a:	f00f fce7 	bl	801215c <osTimerStart>

	while (1) {

		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 800278e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002792:	2100      	movs	r1, #0
 8002794:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002798:	f00f fbb2 	bl	8011f00 <osThreadFlagsWait>
 800279c:	60b8      	str	r0, [r7, #8]
				osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d04c      	beq.n	8002842 <Thermopile_Task+0x156>

			osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <Thermopile_Task+0x174>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027b0:	4618      	mov	r0, r3
 80027b2:	f00f fdbb 	bl	801232c <osSemaphoreAcquire>

			// sample nose
			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_tip);
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <Thermopile_Task+0x198>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4a33      	ldr	r2, [pc, #204]	; (8002894 <Thermopile_Task+0x1a8>)
 80027c6:	4413      	add	r3, r2
 80027c8:	4927      	ldr	r1, [pc, #156]	; (8002868 <Thermopile_Task+0x17c>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f887 	bl	80028de <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_bridge);
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <Thermopile_Task+0x198>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <Thermopile_Task+0x1a8>)
 80027e0:	4413      	add	r3, r2
 80027e2:	4922      	ldr	r1, [pc, #136]	; (800286c <Thermopile_Task+0x180>)
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f87a 	bl	80028de <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
//
//			// sample temple
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_front);
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <Thermopile_Task+0x198>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4a26      	ldr	r2, [pc, #152]	; (8002894 <Thermopile_Task+0x1a8>)
 80027fa:	4413      	add	r3, r2
 80027fc:	491d      	ldr	r1, [pc, #116]	; (8002874 <Thermopile_Task+0x188>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f86d 	bl	80028de <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_mid);
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <Thermopile_Task+0x198>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <Thermopile_Task+0x1a8>)
 8002814:	4413      	add	r3, r2
 8002816:	4918      	ldr	r1, [pc, #96]	; (8002878 <Thermopile_Task+0x18c>)
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f860 	bl	80028de <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_back);
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <Thermopile_Task+0x198>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <Thermopile_Task+0x1a8>)
 800282e:	4413      	add	r3, r2
 8002830:	4912      	ldr	r1, [pc, #72]	; (800287c <Thermopile_Task+0x190>)
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f853 	bl	80028de <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			osSemaphoreRelease(messageI2C1_LockHandle);
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <Thermopile_Task+0x174>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f00f fdc7 	bl	80123d0 <osSemaphoreRelease>
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0a0      	beq.n	800278e <Thermopile_Task+0xa2>
			osTimerDelete(periodicThermopileTimer_id);
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <Thermopile_Task+0x1a4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f00f fcb1 	bl	80121b8 <osTimerDelete>
			break;
 8002856:	bf00      	nop
		}
	}

}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000234 	.word	0x20000234
 8002864:	2000467c 	.word	0x2000467c
 8002868:	20000d80 	.word	0x20000d80
 800286c:	20000da4 	.word	0x20000da4
 8002870:	20004630 	.word	0x20004630
 8002874:	20000dc8 	.word	0x20000dc8
 8002878:	20000dec 	.word	0x20000dec
 800287c:	20000e10 	.word	0x20000e10
 8002880:	20000d58 	.word	0x20000d58
 8002884:	20000e34 	.word	0x20000e34
 8002888:	20000e38 	.word	0x20000e38
 800288c:	08002955 	.word	0x08002955
 8002890:	20000d7c 	.word	0x20000d7c
 8002894:	20000b90 	.word	0x20000b90

08002898 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>:

void initThermopiles(CALIPILE *tp, uint8_t address, I2C_HandleTypeDef* i2c_handle, uint8_t descriptor){
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	461a      	mov	r2, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	72fb      	strb	r3, [r7, #11]
 80028a8:	4613      	mov	r3, r2
 80028aa:	72bb      	strb	r3, [r7, #10]

	uint16_t Tcounts = 0x83; // set threshold for over temperature interrupt, 0x83 == 67072 counts
 80028ac:	2383      	movs	r3, #131	; 0x83
 80028ae:	82fb      	strh	r3, [r7, #22]
	uint32_t flags = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
	//	uint8_t intStatus;


	tp->setup((uint8_t) address, i2c_handle, descriptor);
 80028b4:	7abb      	ldrb	r3, [r7, #10]
 80028b6:	7af9      	ldrb	r1, [r7, #11]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f00d fd1d 	bl	80102fa <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>

//	if(wakeupFlag==0){
//		tp->wake();
//		wakeupFlag=1;
//	}
	tp->wake();
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f00d fd35 	bl	8010330 <_ZN8CALIPILE4wakeEv>
	tp->readEEPROM(); // Verify protocol number and checksum and get calibration constants
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f00d fd4e 	bl	8010368 <_ZN8CALIPILE10readEEPROMEv>
	//  tp_outer.initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
	tp->initTempThr(Tcounts);  // choose something ~5% above TPAMB
 80028cc:	8afb      	ldrh	r3, [r7, #22]
 80028ce:	4619      	mov	r1, r3
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f00d fe47 	bl	8010564 <_ZN8CALIPILE11initTempThrEt>
	// read interrupt status register(s) to unlatch interrupt before entering main loop
//	intStatus  = tp.checkIntStatus(); //dont do if not using interrupts

}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>:
		thermID++;
		thermIdx = 0;
	}
}

void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp) {
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
	data->descriptor = tp->descriptor;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	701a      	strb	r2, [r3, #0]
	data->timestamp = HAL_GetTick();
 80028f0:	f000 fa70 	bl	8002dd4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]
	data->ambientRaw = tp->getTPAMB();
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f00d fe72 	bl	80105e4 <_ZN8CALIPILE8getTPAMBEv>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	811a      	strh	r2, [r3, #8]
	data->objectRaw = tp->getTPOBJ();
 8002908:	6838      	ldr	r0, [r7, #0]
 800290a:	f00d fe8b 	bl	8010624 <_ZN8CALIPILE8getTPOBJEv>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
	data->ambientTemp = tp->getTamb(data->ambientRaw);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	891b      	ldrh	r3, [r3, #8]
 8002918:	4619      	mov	r1, r3
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	f00d feaa 	bl	8010674 <_ZN8CALIPILE7getTambEt>
 8002920:	eef0 7a40 	vmov.f32	s15, s0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	edc3 7a04 	vstr	s15, [r3, #16]
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	edd3 7a04 	vldr	s15, [r3, #16]
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	4611      	mov	r1, r2
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f00d fecc 	bl	80106d8 <_ZN8CALIPILE7getTobjEmf>
 8002940:	eef0 7a40 	vmov.f32	s15, s0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <triggerThermopileSample>:

static void triggerThermopileSample(void *argument) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <triggerThermopileSample+0x20>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002964:	4618      	mov	r0, r3
 8002966:	f00f fa7d 	bl	8011e64 <osThreadFlagsSet>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000230 	.word	0x20000230

08002978 <_Z41__static_initialization_and_destruction_0ii>:
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d113      	bne.n	80029b0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298e:	4293      	cmp	r3, r2
 8002990:	d10e      	bne.n	80029b0 <_Z41__static_initialization_and_destruction_0ii+0x38>
CALIPILE tp_nose_tip;
 8002992:	4809      	ldr	r0, [pc, #36]	; (80029b8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002994:	f7ff fe98 	bl	80026c8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_nose_bridge;
 8002998:	4808      	ldr	r0, [pc, #32]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800299a:	f7ff fe95 	bl	80026c8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_front;
 800299e:	4808      	ldr	r0, [pc, #32]	; (80029c0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80029a0:	f7ff fe92 	bl	80026c8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_mid;
 80029a4:	4807      	ldr	r0, [pc, #28]	; (80029c4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80029a6:	f7ff fe8f 	bl	80026c8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_back;
 80029aa:	4807      	ldr	r0, [pc, #28]	; (80029c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80029ac:	f7ff fe8c 	bl	80026c8 <_ZN8CALIPILEC1Ev>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000d80 	.word	0x20000d80
 80029bc:	20000da4 	.word	0x20000da4
 80029c0:	20000dc8 	.word	0x20000dc8
 80029c4:	20000dec 	.word	0x20000dec
 80029c8:	20000e10 	.word	0x20000e10

080029cc <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff ffcf 	bl	8002978 <_Z41__static_initialization_and_destruction_0ii>
 80029da:	bd80      	pop	{r7, pc}

080029dc <LL_AHB2_GRP1_EnableClock>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_APB1_GRP1_EnableClock>:
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b085      	sub	sp, #20
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_APB2_GRP1_EnableClock>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	; 0x38
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a94:	463b      	mov	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	615a      	str	r2, [r3, #20]
 8002aa4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002ab0:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002ab4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002abe:	2213      	movs	r2, #19
 8002ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ac8:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ace:	4822      	ldr	r0, [pc, #136]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002ad0:	f008 fa62 	bl	800af98 <HAL_TIM_Base_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002ada:	f7ff f9af 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481b      	ldr	r0, [pc, #108]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002aec:	f008 ff8a 	bl	800ba04 <HAL_TIM_ConfigClockSource>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002af6:	f7ff f9a1 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002afa:	4817      	ldr	r0, [pc, #92]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002afc:	f008 fb38 	bl	800b170 <HAL_TIM_OC_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002b06:	f7ff f999 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	480f      	ldr	r0, [pc, #60]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002b1a:	f009 fbff 	bl	800c31c <HAL_TIMEx_MasterConfigSynchronization>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002b24:	f7ff f98a 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b38:	463b      	mov	r3, r7
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4806      	ldr	r0, [pc, #24]	; (8002b58 <MX_TIM2_Init+0xe4>)
 8002b40:	f008 fdd2 	bl	800b6e8 <HAL_TIM_OC_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002b4a:	f7ff f977 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	3738      	adds	r7, #56	; 0x38
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20004914 	.word	0x20004914

08002b5c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b094      	sub	sp, #80	; 0x50
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	615a      	str	r2, [r3, #20]
 8002b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b76:	463b      	mov	r3, r7
 8002b78:	2234      	movs	r2, #52	; 0x34
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f014 fb9d 	bl	80172bc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b82:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002b84:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <MX_TIM16_Init+0xec>)
 8002b86:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002b8a:	223f      	movs	r2, #63	; 0x3f
 8002b8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8002b94:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002b96:	2263      	movs	r2, #99	; 0x63
 8002b98:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002bac:	4825      	ldr	r0, [pc, #148]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002bae:	f008 f9f3 	bl	800af98 <HAL_TIM_Base_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8002bb8:	f7ff f940 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002bbc:	4821      	ldr	r0, [pc, #132]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002bbe:	f008 fb38 	bl	800b232 <HAL_TIM_PWM_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8002bc8:	f7ff f938 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bcc:	2360      	movs	r3, #96	; 0x60
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 50;
 8002bd0:	2332      	movs	r3, #50	; 0x32
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002be8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bec:	2200      	movs	r2, #0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4814      	ldr	r0, [pc, #80]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002bf2:	f008 fdf3 	bl	800b7dc <HAL_TIM_PWM_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8002bfc:	f7ff f91e 	bl	8001e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002c22:	463b      	mov	r3, r7
 8002c24:	4619      	mov	r1, r3
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002c28:	f009 fbd8 	bl	800c3dc <HAL_TIMEx_ConfigBreakDeadTime>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8002c32:	f7ff f903 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002c36:	4803      	ldr	r0, [pc, #12]	; (8002c44 <MX_TIM16_Init+0xe8>)
 8002c38:	f000 f834 	bl	8002ca4 <HAL_TIM_MspPostInit>

}
 8002c3c:	bf00      	nop
 8002c3e:	3750      	adds	r7, #80	; 0x50
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20004960 	.word	0x20004960
 8002c48:	40014400 	.word	0x40014400

08002c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff fed5 	bl	8002a0e <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2105      	movs	r1, #5
 8002c68:	201c      	movs	r0, #28
 8002c6a:	f001 fa05 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c6e:	201c      	movs	r0, #28
 8002c70:	f001 fa1c 	bl	80040ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002c74:	e010      	b.n	8002c98 <HAL_TIM_Base_MspInit+0x4c>
  else if(tim_baseHandle->Instance==TIM16)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_TIM_Base_MspInit+0x54>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10b      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c80:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c84:	f7ff fedc 	bl	8002a40 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	2019      	movs	r0, #25
 8002c8e:	f001 f9f3 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c92:	2019      	movs	r0, #25
 8002c94:	f001 fa0a 	bl	80040ac <HAL_NVIC_EnableIRQ>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40014400 	.word	0x40014400

08002ca4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_TIM_MspPostInit+0x54>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d113      	bne.n	8002cee <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7ff fe88 	bl	80029dc <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8002ccc:	2340      	movs	r3, #64	; 0x40
 8002cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002cdc:	230e      	movs	r3, #14
 8002cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cea:	f001 fc61 	bl	80045b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40014400 	.word	0x40014400

08002cfc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002cfc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d00:	3304      	adds	r3, #4

08002d02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d06:	d3f9      	bcc.n	8002cfc <CopyDataInit>
  bx lr
 8002d08:	4770      	bx	lr

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d0c:	3004      	adds	r0, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>
  bx lr
 8002d12:	4770      	bx	lr

08002d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d14:	480c      	ldr	r0, [pc, #48]	; (8002d48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002d16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d18:	f7ff fc84 	bl	8002624 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <LoopForever+0x8>)
 8002d1e:	490c      	ldr	r1, [pc, #48]	; (8002d50 <LoopForever+0xc>)
 8002d20:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <LoopForever+0x10>)
 8002d22:	2300      	movs	r3, #0
 8002d24:	f7ff ffed 	bl	8002d02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d28:	480b      	ldr	r0, [pc, #44]	; (8002d58 <LoopForever+0x14>)
 8002d2a:	490c      	ldr	r1, [pc, #48]	; (8002d5c <LoopForever+0x18>)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f7ff ffee 	bl	8002d0e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d32:	480b      	ldr	r0, [pc, #44]	; (8002d60 <LoopForever+0x1c>)
 8002d34:	490b      	ldr	r1, [pc, #44]	; (8002d64 <LoopForever+0x20>)
 8002d36:	2300      	movs	r3, #0
 8002d38:	f7ff ffe9 	bl	8002d0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d3c:	f014 fa7a 	bl	8017234 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002d40:	f7fe ff82 	bl	8001c48 <main>

08002d44 <LoopForever>:

LoopForever:
  b LoopForever
 8002d44:	e7fe      	b.n	8002d44 <LoopForever>
 8002d46:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002d48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d4c:	20000004 	.word	0x20000004
 8002d50:	20000204 	.word	0x20000204
 8002d54:	08017a7c 	.word	0x08017a7c
  INIT_BSS _sbss, _ebss
 8002d58:	20000204 	.word	0x20000204
 8002d5c:	200061c4 	.word	0x200061c4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d60:	200300d4 	.word	0x200300d4
 8002d64:	200300d4 	.word	0x200300d4

08002d68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC1_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_Init+0x3c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_Init+0x3c>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d82:	2003      	movs	r0, #3
 8002d84:	f001 f96d 	bl	8004062 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d88:	200f      	movs	r0, #15
 8002d8a:	f7ff fb37 	bl	80023fc <HAL_InitTick>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	e001      	b.n	8002d9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d9a:	f7ff fb00 	bl	800239e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	58004000 	.word	0x58004000

08002dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_IncTick+0x24>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000018 	.word	0x20000018
 8002dd0:	200049ac 	.word	0x200049ac

08002dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_GetTick+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	200049ac 	.word	0x200049ac

08002dec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetTickPrio+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000014 	.word	0x20000014

08002e04 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetTickFreq+0x14>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000018 	.word	0x20000018

08002e1c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3360      	adds	r3, #96	; 0x60
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <LL_ADC_SetOffset+0x44>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	03fff000 	.word	0x03fff000

08002ecc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f46:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3330      	adds	r3, #48	; 0x30
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	4413      	add	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	211f      	movs	r1, #31
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	f003 011f 	and.w	r1, r3, #31
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3314      	adds	r3, #20
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0e5b      	lsrs	r3, r3, #25
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0d1b      	lsrs	r3, r3, #20
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2107      	movs	r1, #7
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	0d1b      	lsrs	r3, r3, #20
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0318 	and.w	r3, r3, #24
 8003026:	4908      	ldr	r1, [pc, #32]	; (8003048 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003028:	40d9      	lsrs	r1, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	400b      	ands	r3, r1
 800302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003032:	431a      	orrs	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	0007ffff 	.word	0x0007ffff

0800304c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800305c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6093      	str	r3, [r2, #8]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d101      	bne.n	800308a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d4:	d101      	bne.n	80030da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <LL_ADC_IsEnabled+0x18>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <LL_ADC_IsEnabled+0x1a>
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003146:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d101      	bne.n	8003176 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b08      	cmp	r3, #8
 8003196:	d101      	bne.n	800319c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e12e      	b.n	8003428 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd fc6f 	bl	8000abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff3d 	bl	8003070 <LL_ADC_IsDeepPowerDownEnabled>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff23 	bl	800304c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff58 	bl	80030c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d115      	bne.n	8003242 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff3c 	bl	8003098 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003220:	4b83      	ldr	r3, [pc, #524]	; (8003430 <HAL_ADC_Init+0x284>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	4a83      	ldr	r2, [pc, #524]	; (8003434 <HAL_ADC_Init+0x288>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003234:	e002      	b.n	800323c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3b01      	subs	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff3a 	bl	80030c0 <LL_ADC_IsInternalRegulatorEnabled>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff73 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 8003278:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 80c7 	bne.w	8003416 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 80c3 	bne.w	8003416 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff33 	bl	8003110 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b0:	4861      	ldr	r0, [pc, #388]	; (8003438 <HAL_ADC_Init+0x28c>)
 80032b2:	f7ff ff2d 	bl	8003110 <LL_ADC_IsEnabled>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4619      	mov	r1, r3
 80032c2:	485e      	ldr	r0, [pc, #376]	; (800343c <HAL_ADC_Init+0x290>)
 80032c4:	f7ff fdaa 	bl	8002e1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7e5b      	ldrb	r3, [r3, #25]
 80032cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80032d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80032de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80032e8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	3b01      	subs	r3, #1
 8003300:	045b      	lsls	r3, r3, #17
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <HAL_ADC_Init+0x294>)
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	430b      	orrs	r3, r1
 8003336:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff0e 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 8003342:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff1b 	bl	8003184 <LL_ADC_INJ_IsConversionOngoing>
 800334e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d13d      	bne.n	80033d2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d13a      	bne.n	80033d2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003360:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003368:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003378:	f023 0302 	bic.w	r3, r3, #2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	69b9      	ldr	r1, [r7, #24]
 8003382:	430b      	orrs	r3, r1
 8003384:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800338c:	2b01      	cmp	r3, #1
 800338e:	d118      	bne.n	80033c2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800339a:	f023 0304 	bic.w	r3, r3, #4
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033ac:	4311      	orrs	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033b2:	430a      	orrs	r2, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	611a      	str	r2, [r3, #16]
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10c      	bne.n	80033f4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f023 010f 	bic.w	r1, r3, #15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
 80033f2:	e007      	b.n	8003404 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 020f 	bic.w	r2, r2, #15
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
 8003414:	e007      	b.n	8003426 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003426:	7ffb      	ldrb	r3, [r7, #31]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000010 	.word	0x20000010
 8003434:	053e2d63 	.word	0x053e2d63
 8003438:	50040000 	.word	0x50040000
 800343c:	50040300 	.word	0x50040300
 8003440:	fff0c007 	.word	0xfff0c007

08003444 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fe82 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d167      	bne.n	8003530 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADC_Start_DMA+0x2a>
 800346a:	2302      	movs	r3, #2
 800346c:	e063      	b.n	8003536 <HAL_ADC_Start_DMA+0xf2>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc38 	bl	8003cec <ADC_Enable>
 800347c:	4603      	mov	r3, r0
 800347e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d14f      	bne.n	8003526 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f023 0206 	bic.w	r2, r3, #6
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	659a      	str	r2, [r3, #88]	; 0x58
 80034b2:	e002      	b.n	80034ba <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	4a20      	ldr	r2, [pc, #128]	; (8003540 <HAL_ADC_Start_DMA+0xfc>)
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_ADC_Start_DMA+0x100>)
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HAL_ADC_Start_DMA+0x104>)
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	221c      	movs	r2, #28
 80034d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0210 	orr.w	r2, r2, #16
 80034f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3340      	adds	r3, #64	; 0x40
 800350c:	4619      	mov	r1, r3
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f000 fe81 	bl	8004218 <HAL_DMA_Start_IT>
 8003516:	4603      	mov	r3, r0
 8003518:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe09 	bl	8003136 <LL_ADC_REG_StartConversion>
 8003524:	e006      	b.n	8003534 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800352e:	e001      	b.n	8003534 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08003de1 	.word	0x08003de1
 8003544:	08003eb9 	.word	0x08003eb9
 8003548:	08003ed5 	.word	0x08003ed5

0800354c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0b6      	sub	sp, #216	; 0xd8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x22>
 800357e:	2302      	movs	r3, #2
 8003580:	e39f      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x762>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fde5 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8384 	bne.w	8003ca4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f7ff fcd3 	bl	8002f54 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fdd3 	bl	800315e <LL_ADC_REG_IsConversionOngoing>
 80035b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fddf 	bl	8003184 <LL_ADC_INJ_IsConversionOngoing>
 80035c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 81a6 	bne.w	8003920 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f040 81a1 	bne.w	8003920 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f7ff fcde 	bl	8002fac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	08db      	lsrs	r3, r3, #3
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00a      	beq.n	8003628 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6919      	ldr	r1, [r3, #16]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003622:	f7ff fc2f 	bl	8002e84 <LL_ADC_SetOffset>
 8003626:	e17b      	b.n	8003920 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fc4c 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <HAL_ADC_ConfigChannel+0xf4>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fc41 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800364a:	4603      	mov	r3, r0
 800364c:	0e9b      	lsrs	r3, r3, #26
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	e01e      	b.n	8003692 <HAL_ADC_ConfigChannel+0x132>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fc36 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800367a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e004      	b.n	8003690 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8003686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x14a>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	e018      	b.n	80036dc <HAL_ADC_ConfigChannel+0x17c>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80036ce:	2320      	movs	r3, #32
 80036d0:	e004      	b.n	80036dc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80036d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fc05 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fbe9 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_ADC_ConfigChannel+0x1ba>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fbde 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	0e9b      	lsrs	r3, r3, #26
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	e01e      	b.n	8003758 <HAL_ADC_ConfigChannel+0x1f8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fbd3 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003738:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800373c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003740:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e004      	b.n	8003756 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800374c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x210>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e9b      	lsrs	r3, r3, #26
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	e018      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x242>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003784:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	e004      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d106      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fba2 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fb86 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x280>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fb7b 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80037d6:	4603      	mov	r3, r0
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	f003 021f 	and.w	r2, r3, #31
 80037de:	e01e      	b.n	800381e <HAL_ADC_ConfigChannel+0x2be>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fb70 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80037fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800380e:	2320      	movs	r3, #32
 8003810:	e004      	b.n	800381c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003812:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003826:	2b00      	cmp	r3, #0
 8003828:	d105      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x2d6>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0e9b      	lsrs	r3, r3, #26
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	e016      	b.n	8003864 <HAL_ADC_ConfigChannel+0x304>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800384a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800384e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003856:	2320      	movs	r3, #32
 8003858:	e004      	b.n	8003864 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800385a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	429a      	cmp	r2, r3
 8003866:	d106      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	2102      	movs	r1, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fb41 	bl	8002ef8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2103      	movs	r1, #3
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fb25 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x342>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2103      	movs	r1, #3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fb1a 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	0e9b      	lsrs	r3, r3, #26
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	e017      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x372>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2103      	movs	r1, #3
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fb0f 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80038c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x38a>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0e9b      	lsrs	r3, r3, #26
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	e011      	b.n	800390e <HAL_ADC_ConfigChannel+0x3ae>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003902:	2320      	movs	r3, #32
 8003904:	e003      	b.n	800390e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	429a      	cmp	r2, r3
 8003910:	d106      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	2103      	movs	r1, #3
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff faec 	bl	8002ef8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fbf3 	bl	8003110 <LL_ADC_IsEnabled>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 81c2 	bne.w	8003cb6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	461a      	mov	r2, r3
 8003940:	f7ff fb60 	bl	8003004 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a8e      	ldr	r2, [pc, #568]	; (8003b84 <HAL_ADC_ConfigChannel+0x624>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f040 8130 	bne.w	8003bb0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x418>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	3301      	adds	r3, #1
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2b09      	cmp	r3, #9
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e019      	b.n	80039ac <HAL_ADC_ConfigChannel+0x44c>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003988:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800398a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e003      	b.n	800399c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2b09      	cmp	r3, #9
 80039a4:	bf94      	ite	ls
 80039a6:	2301      	movls	r3, #1
 80039a8:	2300      	movhi	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d079      	beq.n	8003aa4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x46c>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0e9b      	lsrs	r3, r3, #26
 80039c2:	3301      	adds	r3, #1
 80039c4:	069b      	lsls	r3, r3, #26
 80039c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ca:	e015      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x498>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80039e4:	2320      	movs	r3, #32
 80039e6:	e003      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	3301      	adds	r3, #1
 80039f2:	069b      	lsls	r3, r3, #26
 80039f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x4b8>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	e017      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x4e8>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	ea42 0103 	orr.w	r1, r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x50e>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0e9b      	lsrs	r3, r3, #26
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	051b      	lsls	r3, r3, #20
 8003a6c:	e018      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x540>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a86:	2320      	movs	r3, #32
 8003a88:	e003      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	e080      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x560>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	069b      	lsls	r3, r3, #26
 8003aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003abe:	e015      	b.n	8003aec <HAL_ADC_ConfigChannel+0x58c>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	e003      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	069b      	lsls	r3, r3, #26
 8003ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x5ac>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	e017      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x5dc>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	61fb      	str	r3, [r7, #28]
  return result;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e003      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	ea42 0103 	orr.w	r1, r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x608>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	3301      	adds	r3, #1
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3b1e      	subs	r3, #30
 8003b60:	051b      	lsls	r3, r3, #20
 8003b62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b66:	e01d      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x644>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	613b      	str	r3, [r7, #16]
  return result;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003b80:	2320      	movs	r3, #32
 8003b82:	e005      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x630>
 8003b84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	f003 021f 	and.w	r2, r3, #31
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3b1e      	subs	r3, #30
 8003b9e:	051b      	lsls	r3, r3, #20
 8003ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	6892      	ldr	r2, [r2, #8]
 8003baa:	4619      	mov	r1, r3
 8003bac:	f7ff f9fe 	bl	8002fac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b45      	ldr	r3, [pc, #276]	; (8003ccc <HAL_ADC_ConfigChannel+0x76c>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d07c      	beq.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bbc:	4844      	ldr	r0, [pc, #272]	; (8003cd0 <HAL_ADC_ConfigChannel+0x770>)
 8003bbe:	f7ff f953 	bl	8002e68 <LL_ADC_GetCommonPathInternalCh>
 8003bc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bc6:	4843      	ldr	r0, [pc, #268]	; (8003cd4 <HAL_ADC_ConfigChannel+0x774>)
 8003bc8:	f7ff faa2 	bl	8003110 <LL_ADC_IsEnabled>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d15e      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a40      	ldr	r2, [pc, #256]	; (8003cd8 <HAL_ADC_ConfigChannel+0x778>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d127      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x6cc>
 8003bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d121      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a39      	ldr	r2, [pc, #228]	; (8003cd4 <HAL_ADC_ConfigChannel+0x774>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d161      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4834      	ldr	r0, [pc, #208]	; (8003cd0 <HAL_ADC_ConfigChannel+0x770>)
 8003bfe:	f7ff f920 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c02:	4b36      	ldr	r3, [pc, #216]	; (8003cdc <HAL_ADC_ConfigChannel+0x77c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <HAL_ADC_ConfigChannel+0x780>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003c1c:	e002      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f9      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c2a:	e044      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2c      	ldr	r2, [pc, #176]	; (8003ce4 <HAL_ADC_ConfigChannel+0x784>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d113      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x6fe>
 8003c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10d      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <HAL_ADC_ConfigChannel+0x774>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d134      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c54:	4619      	mov	r1, r3
 8003c56:	481e      	ldr	r0, [pc, #120]	; (8003cd0 <HAL_ADC_ConfigChannel+0x770>)
 8003c58:	f7ff f8f3 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c5c:	e02b      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <HAL_ADC_ConfigChannel+0x788>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d126      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d120      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <HAL_ADC_ConfigChannel+0x774>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d11b      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c86:	4619      	mov	r1, r3
 8003c88:	4811      	ldr	r0, [pc, #68]	; (8003cd0 <HAL_ADC_ConfigChannel+0x770>)
 8003c8a:	f7ff f8da 	bl	8002e42 <LL_ADC_SetCommonPathInternalCh>
 8003c8e:	e012      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ca2:	e008      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003cbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	37d8      	adds	r7, #216	; 0xd8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	80080000 	.word	0x80080000
 8003cd0:	50040300 	.word	0x50040300
 8003cd4:	50040000 	.word	0x50040000
 8003cd8:	c7520000 	.word	0xc7520000
 8003cdc:	20000010 	.word	0x20000010
 8003ce0:	053e2d63 	.word	0x053e2d63
 8003ce4:	cb840000 	.word	0xcb840000
 8003ce8:	80000001 	.word	0x80000001

08003cec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fa07 	bl	8003110 <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d15e      	bne.n	8003dc6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <ADC_Enable+0xe4>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e04a      	b.n	8003dc8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f9d6 	bl	80030e8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d3c:	4825      	ldr	r0, [pc, #148]	; (8003dd4 <ADC_Enable+0xe8>)
 8003d3e:	f7ff f893 	bl	8002e68 <LL_ADC_GetCommonPathInternalCh>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00f      	beq.n	8003d6c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <ADC_Enable+0xec>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <ADC_Enable+0xf0>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d5e:	e002      	b.n	8003d66 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f9      	bne.n	8003d60 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d6c:	f7ff f832 	bl	8002dd4 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d72:	e021      	b.n	8003db8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f9c9 	bl	8003110 <LL_ADC_IsEnabled>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f9ad 	bl	80030e8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d8e:	f7ff f821 	bl	8002dd4 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d90d      	bls.n	8003db8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f043 0210 	orr.w	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f043 0201 	orr.w	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d1d6      	bne.n	8003d74 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	8000003f 	.word	0x8000003f
 8003dd4:	50040300 	.word	0x50040300
 8003dd8:	20000010 	.word	0x20000010
 8003ddc:	053e2d63 	.word	0x053e2d63

08003de0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d14b      	bne.n	8003e92 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d021      	beq.n	8003e58 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f888 	bl	8002f2e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d032      	beq.n	8003e8a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d12b      	bne.n	8003e8a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d11f      	bne.n	8003e8a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
 8003e56:	e018      	b.n	8003e8a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d111      	bne.n	8003e8a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d105      	bne.n	8003e8a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7fd f9b0 	bl	80011f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e90:	e00e      	b.n	8003eb0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fb54 	bl	800354c <HAL_ADC_ErrorCallback>
}
 8003ea4:	e004      	b.n	8003eb0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7fd f9ba 	bl	8001240 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fb26 	bl	800354c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f24:	4013      	ands	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3a:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	60d3      	str	r3, [r2, #12]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <__NVIC_GetPriorityGrouping+0x18>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	f003 0307 	and.w	r3, r3, #7
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	db0b      	blt.n	8003f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4907      	ldr	r1, [pc, #28]	; (8003fa4 <__NVIC_EnableIRQ+0x38>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	e000e100 	.word	0xe000e100

08003fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	db0a      	blt.n	8003fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	490c      	ldr	r1, [pc, #48]	; (8003ff4 <__NVIC_SetPriority+0x4c>)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	0112      	lsls	r2, r2, #4
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd0:	e00a      	b.n	8003fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <__NVIC_SetPriority+0x50>)
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	3b04      	subs	r3, #4
 8003fe0:	0112      	lsls	r2, r2, #4
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	761a      	strb	r2, [r3, #24]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000e100 	.word	0xe000e100
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f1c3 0307 	rsb	r3, r3, #7
 8004016:	2b04      	cmp	r3, #4
 8004018:	bf28      	it	cs
 800401a:	2304      	movcs	r3, #4
 800401c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3304      	adds	r3, #4
 8004022:	2b06      	cmp	r3, #6
 8004024:	d902      	bls.n	800402c <NVIC_EncodePriority+0x30>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3b03      	subs	r3, #3
 800402a:	e000      	b.n	800402e <NVIC_EncodePriority+0x32>
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	401a      	ands	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	43d9      	mvns	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004054:	4313      	orrs	r3, r2
         );
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	; 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff4c 	bl	8003f08 <__NVIC_SetPriorityGrouping>
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004086:	f7ff ff63 	bl	8003f50 <__NVIC_GetPriorityGrouping>
 800408a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	6978      	ldr	r0, [r7, #20]
 8004092:	f7ff ffb3 	bl	8003ffc <NVIC_EncodePriority>
 8004096:	4602      	mov	r2, r0
 8004098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409c:	4611      	mov	r1, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff82 	bl	8003fa8 <__NVIC_SetPriority>
}
 80040a4:	bf00      	nop
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff ff56 	bl	8003f6c <__NVIC_EnableIRQ>
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e08e      	b.n	80041f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_DMA_Init+0x138>)
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d80f      	bhi.n	8004106 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b45      	ldr	r3, [pc, #276]	; (8004204 <HAL_DMA_Init+0x13c>)
 80040ee:	4413      	add	r3, r2
 80040f0:	4a45      	ldr	r2, [pc, #276]	; (8004208 <HAL_DMA_Init+0x140>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	009a      	lsls	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_DMA_Init+0x144>)
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
 8004104:	e00e      	b.n	8004124 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	4b40      	ldr	r3, [pc, #256]	; (8004210 <HAL_DMA_Init+0x148>)
 800410e:	4413      	add	r3, r2
 8004110:	4a3d      	ldr	r2, [pc, #244]	; (8004208 <HAL_DMA_Init+0x140>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	009a      	lsls	r2, r3, #2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a3c      	ldr	r2, [pc, #240]	; (8004214 <HAL_DMA_Init+0x14c>)
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9b6 	bl	80044e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004184:	d102      	bne.n	800418c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004198:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_DMA_Init+0x106>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d80c      	bhi.n	80041ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f9d5 	bl	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e008      	b.n	80041e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40020407 	.word	0x40020407
 8004204:	bffdfff8 	.word	0xbffdfff8
 8004208:	cccccccd 	.word	0xcccccccd
 800420c:	40020000 	.word	0x40020000
 8004210:	bffdfbf8 	.word	0xbffdfbf8
 8004214:	40020400 	.word	0x40020400

08004218 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_DMA_Start_IT+0x20>
 8004234:	2302      	movs	r3, #2
 8004236:	e066      	b.n	8004306 <HAL_DMA_Start_IT+0xee>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d155      	bne.n	80042f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f8fb 	bl	800446c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 020e 	orr.w	r2, r2, #14
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e00f      	b.n	80042b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 020a 	orr.w	r2, r2, #10
 80042ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e005      	b.n	8004304 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004300:	2302      	movs	r3, #2
 8004302:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004304:	7dfb      	ldrb	r3, [r7, #23]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f003 031c 	and.w	r3, r3, #28
 800432e:	2204      	movs	r2, #4
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d026      	beq.n	8004388 <HAL_DMA_IRQHandler+0x7a>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d021      	beq.n	8004388 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0204 	bic.w	r2, r2, #4
 8004360:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f003 021c 	and.w	r2, r3, #28
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2104      	movs	r1, #4
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d071      	beq.n	8004462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004386:	e06c      	b.n	8004462 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	f003 031c 	and.w	r3, r3, #28
 8004390:	2202      	movs	r2, #2
 8004392:	409a      	lsls	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02e      	beq.n	80043fa <HAL_DMA_IRQHandler+0xec>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d029      	beq.n	80043fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 020a 	bic.w	r2, r2, #10
 80043c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	f003 021c 	and.w	r2, r3, #28
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	2102      	movs	r1, #2
 80043da:	fa01 f202 	lsl.w	r2, r1, r2
 80043de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d038      	beq.n	8004462 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043f8:	e033      	b.n	8004462 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f003 031c 	and.w	r3, r3, #28
 8004402:	2208      	movs	r2, #8
 8004404:	409a      	lsls	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d02a      	beq.n	8004464 <HAL_DMA_IRQHandler+0x156>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d025      	beq.n	8004464 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 020e 	bic.w	r2, r2, #14
 8004426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 021c 	and.w	r2, r3, #28
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004462:	bf00      	nop
 8004464:	bf00      	nop
}
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004482:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f003 021c 	and.w	r2, r3, #28
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2101      	movs	r1, #1
 80044a4:	fa01 f202 	lsl.w	r2, r1, r2
 80044a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d108      	bne.n	80044cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044ca:	e007      	b.n	80044dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b17      	ldr	r3, [pc, #92]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d80a      	bhi.n	8004512 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004508:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6493      	str	r3, [r2, #72]	; 0x48
 8004510:	e007      	b.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	009a      	lsls	r2, r3, #2
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800451c:	4413      	add	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	3b08      	subs	r3, #8
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004538:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40020407 	.word	0x40020407
 8004558:	4002081c 	.word	0x4002081c
 800455c:	cccccccd 	.word	0xcccccccd
 8004560:	40020880 	.word	0x40020880

08004564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004574:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004588:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3b01      	subs	r3, #1
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	1000823f 	.word	0x1000823f
 80045ac:	40020940 	.word	0x40020940

080045b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045be:	e14c      	b.n	800485a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	2101      	movs	r1, #1
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 813e 	beq.w	8004854 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d005      	beq.n	80045f0 <HAL_GPIO_Init+0x40>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d130      	bne.n	8004652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004626:	2201      	movs	r2, #1
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0201 	and.w	r2, r3, #1
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b03      	cmp	r3, #3
 800465c:	d017      	beq.n	800468e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d123      	bne.n	80046e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	08da      	lsrs	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3208      	adds	r2, #8
 80046a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	220f      	movs	r2, #15
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	08da      	lsrs	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3208      	adds	r2, #8
 80046dc:	6939      	ldr	r1, [r7, #16]
 80046de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	2203      	movs	r2, #3
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0203 	and.w	r2, r3, #3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8098 	beq.w	8004854 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004724:	4a54      	ldr	r2, [pc, #336]	; (8004878 <HAL_GPIO_Init+0x2c8>)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	3302      	adds	r3, #2
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800474e:	d019      	beq.n	8004784 <HAL_GPIO_Init+0x1d4>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_GPIO_Init+0x2cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_GPIO_Init+0x1d0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a49      	ldr	r2, [pc, #292]	; (8004880 <HAL_GPIO_Init+0x2d0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00d      	beq.n	800477c <HAL_GPIO_Init+0x1cc>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a48      	ldr	r2, [pc, #288]	; (8004884 <HAL_GPIO_Init+0x2d4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <HAL_GPIO_Init+0x1c8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a47      	ldr	r2, [pc, #284]	; (8004888 <HAL_GPIO_Init+0x2d8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_GPIO_Init+0x1c4>
 8004770:	2304      	movs	r3, #4
 8004772:	e008      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004774:	2307      	movs	r3, #7
 8004776:	e006      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004778:	2303      	movs	r3, #3
 800477a:	e004      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 800477c:	2302      	movs	r3, #2
 800477e:	e002      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_GPIO_Init+0x1d6>
 8004784:	2300      	movs	r3, #0
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	f002 0203 	and.w	r2, r2, #3
 800478c:	0092      	lsls	r2, r2, #2
 800478e:	4093      	lsls	r3, r2
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004796:	4938      	ldr	r1, [pc, #224]	; (8004878 <HAL_GPIO_Init+0x2c8>)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	3302      	adds	r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a4:	4b39      	ldr	r3, [pc, #228]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047c8:	4a30      	ldr	r2, [pc, #192]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047ce:	4b2f      	ldr	r3, [pc, #188]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047f2:	4a26      	ldr	r2, [pc, #152]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047f8:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_GPIO_Init+0x2dc>)
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800481e:	4a1b      	ldr	r2, [pc, #108]	; (800488c <HAL_GPIO_Init+0x2dc>)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_GPIO_Init+0x2dc>)
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800484c:	4a0f      	ldr	r2, [pc, #60]	; (800488c <HAL_GPIO_Init+0x2dc>)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3301      	adds	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	f47f aeab 	bne.w	80045c0 <HAL_GPIO_Init+0x10>
  }
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40010000 	.word	0x40010000
 800487c:	48000400 	.word	0x48000400
 8004880:	48000800 	.word	0x48000800
 8004884:	48000c00 	.word	0x48000c00
 8004888:	48001000 	.word	0x48001000
 800488c:	58000800 	.word	0x58000800

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048ac:	e002      	b.n	80048b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ae:	887a      	ldrh	r2, [r7, #2]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f806 	bl	80048f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58000800 	.word	0x58000800

080048f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	43db      	mvns	r3, r3
 800491c:	4906      	ldr	r1, [pc, #24]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 800491e:	4013      	ands	r3, r2
 8004920:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <HAL_HSEM_IRQHandler+0x30>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f807 	bl	800493c <HAL_HSEM_FreeCallback>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	58001500 	.word	0x58001500

0800493c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e081      	b.n	8004a66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fe18 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	e006      	b.n	80049d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d104      	bne.n	80049ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69d9      	ldr	r1, [r3, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	817b      	strh	r3, [r7, #10]
 8004a82:	460b      	mov	r3, r1
 8004a84:	813b      	strh	r3, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	f040 80f9 	bne.w	8004c8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x34>
 8004a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0ed      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_I2C_Mem_Write+0x4e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0e6      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fe f985 	bl	8002dd4 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2319      	movs	r3, #25
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fadd 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0d1      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2221      	movs	r2, #33	; 0x21
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2240      	movs	r2, #64	; 0x40
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a3a      	ldr	r2, [r7, #32]
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b10:	88f8      	ldrh	r0, [r7, #6]
 8004b12:	893a      	ldrh	r2, [r7, #8]
 8004b14:	8979      	ldrh	r1, [r7, #10]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4603      	mov	r3, r0
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f9ed 	bl	8004f00 <I2C_RequestMemoryWrite>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0a9      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2bff      	cmp	r3, #255	; 0xff
 8004b40:	d90e      	bls.n	8004b60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	2300      	movs	r3, #0
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fc09 	bl	8005370 <I2C_TransferConfig>
 8004b5e:	e00f      	b.n	8004b80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	8979      	ldrh	r1, [r7, #10]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fbf8 	bl	8005370 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fac7 	bl	8005118 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e07b      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d034      	beq.n	8004c38 <HAL_I2C_Mem_Write+0x1c8>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d130      	bne.n	8004c38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa59 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e04d      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2bff      	cmp	r3, #255	; 0xff
 8004bf8:	d90e      	bls.n	8004c18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	8979      	ldrh	r1, [r7, #10]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fbad 	bl	8005370 <I2C_TransferConfig>
 8004c16:	e00f      	b.n	8004c38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fb9c 	bl	8005370 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d19e      	bne.n	8004b80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 faa6 	bl	8005198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e01a      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_I2C_Mem_Write+0x224>)
 8004c6a:	400b      	ands	r3, r1
 8004c6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	fe00e800 	.word	0xfe00e800

08004c98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	f040 80fd 	bne.w	8004eba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_I2C_Mem_Read+0x34>
 8004cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0f1      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_I2C_Mem_Read+0x4e>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e0ea      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cee:	f7fe f871 	bl	8002dd4 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2319      	movs	r3, #25
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f9c9 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0d5      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2222      	movs	r2, #34	; 0x22
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2240      	movs	r2, #64	; 0x40
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a3a      	ldr	r2, [r7, #32]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d38:	88f8      	ldrh	r0, [r7, #6]
 8004d3a:	893a      	ldrh	r2, [r7, #8]
 8004d3c:	8979      	ldrh	r1, [r7, #10]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	4603      	mov	r3, r0
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f92d 	bl	8004fa8 <I2C_RequestMemoryRead>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0ad      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2bff      	cmp	r3, #255	; 0xff
 8004d68:	d90e      	bls.n	8004d88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	22ff      	movs	r2, #255	; 0xff
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	8979      	ldrh	r1, [r7, #10]
 8004d78:	4b52      	ldr	r3, [pc, #328]	; (8004ec4 <HAL_I2C_Mem_Read+0x22c>)
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 faf5 	bl	8005370 <I2C_TransferConfig>
 8004d86:	e00f      	b.n	8004da8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	8979      	ldrh	r1, [r7, #10]
 8004d9a:	4b4a      	ldr	r3, [pc, #296]	; (8004ec4 <HAL_I2C_Mem_Read+0x22c>)
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 fae4 	bl	8005370 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	2200      	movs	r2, #0
 8004db0:	2104      	movs	r1, #4
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f970 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07c      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d034      	beq.n	8004e68 <HAL_I2C_Mem_Read+0x1d0>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d130      	bne.n	8004e68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f941 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04d      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2bff      	cmp	r3, #255	; 0xff
 8004e28:	d90e      	bls.n	8004e48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	22ff      	movs	r2, #255	; 0xff
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	8979      	ldrh	r1, [r7, #10]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fa95 	bl	8005370 <I2C_TransferConfig>
 8004e46:	e00f      	b.n	8004e68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	8979      	ldrh	r1, [r7, #10]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa84 	bl	8005370 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d19a      	bne.n	8004da8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f98e 	bl	8005198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e01a      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6859      	ldr	r1, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_I2C_Mem_Read+0x230>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e000      	b.n	8004ebc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	80002400 	.word	0x80002400
 8004ec8:	fe00e800 	.word	0xfe00e800

08004ecc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	4608      	mov	r0, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	817b      	strh	r3, [r7, #10]
 8004f12:	460b      	mov	r3, r1
 8004f14:	813b      	strh	r3, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	8979      	ldrh	r1, [r7, #10]
 8004f20:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <I2C_RequestMemoryWrite+0xa4>)
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fa21 	bl	8005370 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f8f0 	bl	8005118 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e02c      	b.n	8004f9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f48:	893b      	ldrh	r3, [r7, #8]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
 8004f52:	e015      	b.n	8004f80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f54:	893b      	ldrh	r3, [r7, #8]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f8d6 	bl	8005118 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e012      	b.n	8004f9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f76:	893b      	ldrh	r3, [r7, #8]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2200      	movs	r2, #0
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f884 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	80002000 	.word	0x80002000

08004fa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	817b      	strh	r3, [r7, #10]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	813b      	strh	r3, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	8979      	ldrh	r1, [r7, #10]
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <I2C_RequestMemoryRead+0xa4>)
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f9ce 	bl	8005370 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	69b9      	ldr	r1, [r7, #24]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f89d 	bl	8005118 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e02c      	b.n	8005042 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fee:	893b      	ldrh	r3, [r7, #8]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff8:	e015      	b.n	8005026 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ffa:	893b      	ldrh	r3, [r7, #8]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	69b9      	ldr	r1, [r7, #24]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f883 	bl	8005118 <I2C_WaitOnTXISFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e012      	b.n	8005042 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800501c:	893b      	ldrh	r3, [r7, #8]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2200      	movs	r2, #0
 800502e:	2140      	movs	r1, #64	; 0x40
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f831 	bl	8005098 <I2C_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	80002000 	.word	0x80002000

08005050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d103      	bne.n	800506e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2200      	movs	r2, #0
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b01      	cmp	r3, #1
 800507a:	d007      	beq.n	800508c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	619a      	str	r2, [r3, #24]
  }
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050a8:	e022      	b.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b0:	d01e      	beq.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fd fe8f 	bl	8002dd4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d113      	bne.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e00f      	b.n	8005110 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	429a      	cmp	r2, r3
 800510c:	d0cd      	beq.n	80050aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005124:	e02c      	b.n	8005180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f870 	bl	8005210 <I2C_IsErrorOccurred>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e02a      	b.n	8005190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005140:	d01e      	beq.n	8005180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005142:	f7fd fe47 	bl	8002dd4 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d113      	bne.n	8005180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e007      	b.n	8005190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d1cb      	bne.n	8005126 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051a4:	e028      	b.n	80051f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f830 	bl	8005210 <I2C_IsErrorOccurred>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e026      	b.n	8005208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fd fe0b 	bl	8002dd4 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d113      	bne.n	80051f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d4:	f043 0220 	orr.w	r2, r3, #32
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e007      	b.n	8005208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	d1cf      	bne.n	80051a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d040      	beq.n	80052b8 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005244:	d01d      	beq.n	8005282 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005254:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005256:	e014      	b.n	8005282 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525e:	d010      	beq.n	8005282 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005260:	f7fd fdb8 	bl	8002dd4 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	d302      	bcc.n	8005276 <I2C_IsErrorOccurred+0x66>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d105      	bne.n	8005282 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f043 0320 	orr.w	r3, r3, #32
 800527c:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b20      	cmp	r3, #32
 800528e:	d002      	beq.n	8005296 <I2C_IsErrorOccurred+0x86>
 8005290:	7ffb      	ldrb	r3, [r7, #31]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0e0      	beq.n	8005258 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005296:	7ffb      	ldrb	r3, [r7, #31]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2220      	movs	r2, #32
 80052a2:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2210      	movs	r2, #16
 80052aa:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f043 0308 	orr.w	r3, r3, #8
 80052f0:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01c      	beq.n	8005360 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff fe92 	bl	8005050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <I2C_IsErrorOccurred+0x15c>)
 8005338:	400b      	ands	r3, r1
 800533a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	431a      	orrs	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005360:	7ffb      	ldrb	r3, [r7, #31]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	fe00e800 	.word	0xfe00e800

08005370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	460b      	mov	r3, r1
 800537c:	817b      	strh	r3, [r7, #10]
 800537e:	4613      	mov	r3, r2
 8005380:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005382:	897b      	ldrh	r3, [r7, #10]
 8005384:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005388:	7a7b      	ldrb	r3, [r7, #9]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005390:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	4313      	orrs	r3, r2
 800539a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800539e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	0d5b      	lsrs	r3, r3, #21
 80053aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <I2C_TransferConfig+0x60>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	43db      	mvns	r3, r3
 80053b4:	ea02 0103 	and.w	r1, r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	03ff63ff 	.word	0x03ff63ff

080053d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d138      	bne.n	800545c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e032      	b.n	800545e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2224      	movs	r2, #36	; 0x24
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6819      	ldr	r1, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
  }
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b20      	cmp	r3, #32
 800547e:	d139      	bne.n	80054f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800548a:	2302      	movs	r3, #2
 800548c:	e033      	b.n	80054f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2224      	movs	r2, #36	; 0x24
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01e      	beq.n	8005554 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <HAL_IPCC_Init+0x60>)
 8005518:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc f94e 	bl	80017c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800552c:	68b8      	ldr	r0, [r7, #8]
 800552e:	f000 f85b 	bl	80055e8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f82c 	bl	800559c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005552:	e001      	b.n	8005558 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	58000c00 	.word	0x58000c00

08005568 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e00f      	b.n	80055ca <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <IPCC_SetDefaultCallbacks+0x44>)
 80055b4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3306      	adds	r3, #6
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <IPCC_SetDefaultCallbacks+0x48>)
 80055c2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d9ec      	bls.n	80055aa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	08005569 	.word	0x08005569
 80055e4:	08005583 	.word	0x08005583

080055e8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80055fc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	223f      	movs	r2, #63	; 0x3f
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005612:	b08b      	sub	sp, #44	; 0x2c
 8005614:	af06      	add	r7, sp, #24
 8005616:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0d7      	b.n	80057d2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f010 fe5e 	bl	80162f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2203      	movs	r2, #3
 8005640:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f006 ff8c 	bl	800c566 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
 8005652:	e04c      	b.n	80056ee <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	440b      	add	r3, r1
 8005664:	3301      	adds	r3, #1
 8005666:	2201      	movs	r2, #1
 8005668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	440b      	add	r3, r1
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800567e:	7bfa      	ldrb	r2, [r7, #15]
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	b298      	uxth	r0, r3
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	440b      	add	r3, r1
 8005690:	3336      	adds	r3, #54	; 0x36
 8005692:	4602      	mov	r2, r0
 8005694:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3303      	adds	r3, #3
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	3338      	adds	r3, #56	; 0x38
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	333c      	adds	r3, #60	; 0x3c
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	440b      	add	r3, r1
 80056e2:	3340      	adds	r3, #64	; 0x40
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	3301      	adds	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3ad      	bcc.n	8005654 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e044      	b.n	8005788 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	440b      	add	r3, r1
 800570c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	440b      	add	r3, r1
 800574e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	440b      	add	r3, r1
 8005764:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	440b      	add	r3, r1
 800577a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	3301      	adds	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3b5      	bcc.n	80056fe <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	687e      	ldr	r6, [r7, #4]
 800579a:	466d      	mov	r5, sp
 800579c:	f106 0410 	add.w	r4, r6, #16
 80057a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	1d33      	adds	r3, r6, #4
 80057aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057ac:	6838      	ldr	r0, [r7, #0]
 80057ae:	f006 fef5 	bl	800c59c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fc29 	bl	8007022 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_Start+0x16>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e012      	b.n	8005816 <HAL_PCD_Start+0x3c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f006 fe9b 	bl	800c538 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f008 fe50 	bl	800e4ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f008 fe55 	bl	800e4da <USB_ReadInterrupts>
 8005830:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fb26 	bl	8005e8e <PCD_EP_ISR_Handler>

    return;
 8005842:	e110      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	b292      	uxth	r2, r2
 8005862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f010 fde9 	bl	801643e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800586c:	2100      	movs	r1, #0
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8fc 	bl	8005a6c <HAL_PCD_SetAddress>

    return;
 8005874:	e0f7      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00c      	beq.n	800589a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005892:	b292      	uxth	r2, r2
 8005894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005898:	e0e5      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b6:	b292      	uxth	r2, r2
 80058b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80058bc:	e0d3      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d034      	beq.n	8005932 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	b292      	uxth	r2, r2
 80058dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0208 	bic.w	r2, r2, #8
 80058f2:	b292      	uxth	r2, r2
 80058f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800590a:	2100      	movs	r1, #0
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f010 ff8d 	bl	801682c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f010 fdcc 	bl	80164b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800592a:	b292      	uxth	r2, r2
 800592c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005930:	e099      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005938:	2b00      	cmp	r3, #0
 800593a:	d027      	beq.n	800598c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	b292      	uxth	r2, r2
 8005950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005966:	b292      	uxth	r2, r2
 8005968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0204 	orr.w	r2, r2, #4
 800597e:	b292      	uxth	r2, r2
 8005980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f010 fd79 	bl	801647c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800598a:	e06c      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d040      	beq.n	8005a18 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a8:	b292      	uxth	r2, r2
 80059aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d12b      	bne.n	8005a10 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0204 	orr.w	r2, r2, #4
 80059ca:	b292      	uxth	r2, r2
 80059cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0208 	orr.w	r2, r2, #8
 80059e2:	b292      	uxth	r2, r2
 80059e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a06:	2101      	movs	r1, #1
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f010 ff0f 	bl	801682c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005a0e:	e02a      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f010 fd33 	bl	801647c <HAL_PCD_SuspendCallback>
    return;
 8005a16:	e026      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00f      	beq.n	8005a42 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a34:	b292      	uxth	r2, r2
 8005a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f010 fcf1 	bl	8016422 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a40:	e011      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a5e:	b292      	uxth	r2, r2
 8005a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005a64:	bf00      	nop
  }
}
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_SetAddress+0x1a>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e013      	b.n	8005aae <HAL_PCD_SetAddress+0x42>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f008 fcf0 	bl	800e484 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	70fb      	strb	r3, [r7, #3]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	803b      	strh	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da0e      	bge.n	8005afa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	705a      	strb	r2, [r3, #1]
 8005af8:	e00e      	b.n	8005b18 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	f003 0207 	and.w	r2, r3, #7
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b24:	883a      	ldrh	r2, [r7, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	78ba      	ldrb	r2, [r7, #2]
 8005b2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b42:	78bb      	ldrb	r3, [r7, #2]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d102      	bne.n	8005b4e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_PCD_EP_Open+0xa6>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e00e      	b.n	8005b7a <HAL_PCD_EP_Open+0xc4>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f006 fd38 	bl	800c5e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005b78:	7afb      	ldrb	r3, [r7, #11]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da0e      	bge.n	8005bb4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4413      	add	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	705a      	strb	r2, [r3, #1]
 8005bb2:	e00e      	b.n	8005bd2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 0207 	and.w	r2, r3, #7
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_PCD_EP_Close+0x6a>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e00e      	b.n	8005c0a <HAL_PCD_EP_Close+0x88>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f007 f884 	bl	800cd08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	f003 0207 	and.w	r2, r3, #7
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f007 fa37 	bl	800d0e2 <USB_EPStartXfer>
 8005c74:	e005      	b.n	8005c82 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f007 fa30 	bl	800d0e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	f003 0207 	and.w	r2, r3, #7
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	440b      	add	r3, r1
 8005caa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	607a      	str	r2, [r7, #4]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2201      	movs	r2, #1
 8005d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d14:	7afb      	ldrb	r3, [r7, #11]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6979      	ldr	r1, [r7, #20]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f007 f9dc 	bl	800d0e2 <USB_EPStartXfer>
 8005d2a:	e005      	b.n	8005d38 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6979      	ldr	r1, [r7, #20]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f007 f9d5 	bl	800d0e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	f003 0207 	and.w	r2, r3, #7
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d901      	bls.n	8005d60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e03e      	b.n	8005dde <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da0e      	bge.n	8005d86 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	705a      	strb	r2, [r3, #1]
 8005d84:	e00c      	b.n	8005da0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4413      	add	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_PCD_EP_SetStall+0x7e>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e00e      	b.n	8005dde <HAL_PCD_EP_SetStall+0x9c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f008 fa59 	bl	800e286 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d901      	bls.n	8005e04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e040      	b.n	8005e86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	da0e      	bge.n	8005e2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	705a      	strb	r2, [r3, #1]
 8005e28:	e00e      	b.n	8005e48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	f003 0207 	and.w	r2, r3, #7
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_PCD_EP_ClrStall+0x82>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e00e      	b.n	8005e86 <HAL_PCD_EP_ClrStall+0xa0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f008 fa56 	bl	800e328 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b096      	sub	sp, #88	; 0x58
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e96:	e39c      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ea0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005ea4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005eb2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 815e 	bne.w	8006178 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005ebc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d150      	bne.n	8005f6a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	81fb      	strh	r3, [r7, #14]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	89fb      	ldrh	r3, [r7, #14]
 8005ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3328      	adds	r3, #40	; 0x28
 8005ef0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	461a      	mov	r2, r3
 8005efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	4413      	add	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	441a      	add	r2, r3
 8005f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005f28:	2100      	movs	r1, #0
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f010 fa5f 	bl	80163ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 834a 	beq.w	80065d2 <PCD_EP_ISR_Handler+0x744>
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 8345 	bne.w	80065d2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f68:	e333      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f70:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005f7c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d032      	beq.n	8005fee <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f008 fadb 	bl	800e57e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	823b      	strh	r3, [r7, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	8a3a      	ldrh	r2, [r7, #16]
 8005fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f010 f9d4 	bl	8016394 <HAL_PCD_SetupStageCallback>
 8005fec:	e2f1      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005fee:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f280 82ed 	bge.w	80065d2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006004:	4013      	ands	r3, r2
 8006006:	83fb      	strh	r3, [r7, #30]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	8bfa      	ldrh	r2, [r7, #30]
 800600e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006012:	b292      	uxth	r2, r2
 8006014:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601e:	b29b      	uxth	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	4413      	add	r3, r2
 8006030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800603a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800603e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d019      	beq.n	800607a <PCD_EP_ISR_Handler+0x1ec>
 8006046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d015      	beq.n	800607a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006054:	6959      	ldr	r1, [r3, #20]
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800605e:	b29b      	uxth	r3, r3
 8006060:	f008 fa8d 	bl	800e57e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	441a      	add	r2, r3
 800606e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006070:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006072:	2100      	movs	r1, #0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f010 f99f 	bl	80163b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006086:	2b00      	cmp	r3, #0
 8006088:	f040 82a3 	bne.w	80065d2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	4413      	add	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b3e      	cmp	r3, #62	; 0x3e
 80060b2:	d918      	bls.n	80060e6 <PCD_EP_ISR_Handler+0x258>
 80060b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	647b      	str	r3, [r7, #68]	; 0x44
 80060bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <PCD_EP_ISR_Handler+0x240>
 80060c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ca:	3b01      	subs	r3, #1
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
 80060ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	029b      	lsls	r3, r3, #10
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060de:	b29a      	uxth	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	e029      	b.n	800613a <PCD_EP_ISR_Handler+0x2ac>
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d112      	bne.n	8006114 <PCD_EP_ISR_Handler+0x286>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610c:	b29a      	uxth	r2, r3
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e012      	b.n	800613a <PCD_EP_ISR_Handler+0x2ac>
 8006114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
 800611c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <PCD_EP_ISR_Handler+0x2a0>
 8006128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612a:	3301      	adds	r3, #1
 800612c:	647b      	str	r3, [r7, #68]	; 0x44
 800612e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006130:	b29b      	uxth	r3, r3
 8006132:	029b      	lsls	r3, r3, #10
 8006134:	b29a      	uxth	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	827b      	strh	r3, [r7, #18]
 800614c:	8a7b      	ldrh	r3, [r7, #18]
 800614e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006152:	827b      	strh	r3, [r7, #18]
 8006154:	8a7b      	ldrh	r3, [r7, #18]
 8006156:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800615a:	827b      	strh	r3, [r7, #18]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	8a7b      	ldrh	r3, [r7, #18]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]
 8006176:	e22c      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800618c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006190:	2b00      	cmp	r3, #0
 8006192:	f280 80f6 	bge.w	8006382 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80061ac:	4013      	ands	r3, r2
 80061ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80061c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061c8:	b292      	uxth	r2, r2
 80061ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80061cc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4413      	add	r3, r2
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80061e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e4:	7b1b      	ldrb	r3, [r3, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d123      	bne.n	8006232 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	4413      	add	r3, r2
 8006204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800620e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006212:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 808e 	beq.w	8006338 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006222:	6959      	ldr	r1, [r3, #20]
 8006224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006226:	88da      	ldrh	r2, [r3, #6]
 8006228:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800622c:	f008 f9a7 	bl	800e57e <USB_ReadPMA>
 8006230:	e082      	b.n	8006338 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006234:	78db      	ldrb	r3, [r3, #3]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d10a      	bne.n	8006250 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800623a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800623e:	461a      	mov	r2, r3
 8006240:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f9d3 	bl	80065ee <HAL_PCD_EP_DB_Receive>
 8006248:	4603      	mov	r3, r0
 800624a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800624e:	e073      	b.n	8006338 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	441a      	add	r2, r3
 800627c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006290:	b29b      	uxth	r3, r3
 8006292:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d022      	beq.n	80062f4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80062d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d02c      	beq.n	8006338 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e4:	6959      	ldr	r1, [r3, #20]
 80062e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e8:	891a      	ldrh	r2, [r3, #8]
 80062ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80062ee:	f008 f946 	bl	800e57e <USB_ReadPMA>
 80062f2:	e021      	b.n	8006338 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6812      	ldr	r2, [r2, #0]
 800630c:	4413      	add	r3, r2
 800630e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006318:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800631c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006320:	2b00      	cmp	r3, #0
 8006322:	d009      	beq.n	8006338 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632a:	6959      	ldr	r1, [r3, #20]
 800632c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632e:	895a      	ldrh	r2, [r3, #10]
 8006330:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006334:	f008 f923 	bl	800e57e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006340:	441a      	add	r2, r3
 8006342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006344:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800634e:	441a      	add	r2, r3
 8006350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006352:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <PCD_EP_ISR_Handler+0x4da>
 800635c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	429a      	cmp	r2, r3
 8006366:	d206      	bcs.n	8006376 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f010 f822 	bl	80163b8 <HAL_PCD_DataOutStageCallback>
 8006374:	e005      	b.n	8006382 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800637c:	4618      	mov	r0, r3
 800637e:	f006 feb0 	bl	800d0e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006382:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8121 	beq.w	80065d2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8006390:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	441a      	add	r2, r3
 80063d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29b      	uxth	r3, r3
 80063de:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80063e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e2:	78db      	ldrb	r3, [r3, #3]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	f000 80a2 	beq.w	800652e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80063ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ec:	2200      	movs	r2, #0
 80063ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80063f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8093 	beq.w	8006520 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d046      	beq.n	8006494 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d126      	bne.n	800645c <PCD_EP_ISR_Handler+0x5ce>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641c:	b29b      	uxth	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	4413      	add	r3, r2
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
 8006426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	00da      	lsls	r2, r3, #3
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	4413      	add	r3, r2
 8006430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006440:	b29a      	uxth	r2, r3
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006454:	b29a      	uxth	r2, r3
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	e061      	b.n	8006520 <PCD_EP_ISR_Handler+0x692>
 800645c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d15d      	bne.n	8006520 <PCD_EP_ISR_Handler+0x692>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	4413      	add	r3, r2
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	00da      	lsls	r2, r3, #3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	4413      	add	r3, r2
 8006486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2200      	movs	r2, #0
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e045      	b.n	8006520 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d126      	bne.n	80064f0 <PCD_EP_ISR_Handler+0x662>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	4413      	add	r3, r2
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00da      	lsls	r2, r3, #3
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064c8:	633b      	str	r3, [r7, #48]	; 0x30
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e017      	b.n	8006520 <PCD_EP_ISR_Handler+0x692>
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d113      	bne.n	8006520 <PCD_EP_ISR_Handler+0x692>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006500:	b29b      	uxth	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006506:	4413      	add	r3, r2
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	00da      	lsls	r2, r3, #3
 8006510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006512:	4413      	add	r3, r2
 8006514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006518:	63bb      	str	r3, [r7, #56]	; 0x38
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	2200      	movs	r2, #0
 800651e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f00f ff61 	bl	80163ee <HAL_PCD_DataInStageCallback>
 800652c:	e051      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800652e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d144      	bne.n	80065c4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	4413      	add	r3, r2
 8006554:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800656a:	429a      	cmp	r2, r3
 800656c:	d907      	bls.n	800657e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657a:	619a      	str	r2, [r3, #24]
 800657c:	e002      	b.n	8006584 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006580:	2200      	movs	r2, #0
 8006582:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800658c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f00f ff2b 	bl	80163ee <HAL_PCD_DataInStageCallback>
 8006598:	e01b      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800659a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065a2:	441a      	add	r2, r3
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065b0:	441a      	add	r2, r3
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80065bc:	4618      	mov	r0, r3
 80065be:	f006 fd90 	bl	800d0e2 <USB_EPStartXfer>
 80065c2:	e006      	b.n	80065d2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80065c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80065c8:	461a      	mov	r2, r3
 80065ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f917 	bl	8006800 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065da:	b29b      	uxth	r3, r3
 80065dc:	b21b      	sxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f6ff ac5a 	blt.w	8005e98 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3758      	adds	r7, #88	; 0x58
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b088      	sub	sp, #32
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d07c      	beq.n	8006700 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4413      	add	r3, r2
 8006620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800662a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	8b7b      	ldrh	r3, [r7, #26]
 8006632:	429a      	cmp	r2, r3
 8006634:	d306      	bcc.n	8006644 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	8b7b      	ldrh	r3, [r7, #26]
 800663c:	1ad2      	subs	r2, r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	619a      	str	r2, [r3, #24]
 8006642:	e002      	b.n	800664a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d123      	bne.n	800669a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	833b      	strh	r3, [r7, #24]
 800666e:	8b3b      	ldrh	r3, [r7, #24]
 8006670:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006674:	833b      	strh	r3, [r7, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	8b3b      	ldrh	r3, [r7, #24]
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01f      	beq.n	80066e4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	82fb      	strh	r3, [r7, #22]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	8afb      	ldrh	r3, [r7, #22]
 80066d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80066e4:	8b7b      	ldrh	r3, [r7, #26]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8085 	beq.w	80067f6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	891a      	ldrh	r2, [r3, #8]
 80066f8:	8b7b      	ldrh	r3, [r7, #26]
 80066fa:	f007 ff40 	bl	800e57e <USB_ReadPMA>
 80066fe:	e07a      	b.n	80067f6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006708:	b29b      	uxth	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4413      	add	r3, r2
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	4413      	add	r3, r2
 800671a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006724:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	8b7b      	ldrh	r3, [r7, #26]
 800672c:	429a      	cmp	r2, r3
 800672e:	d306      	bcc.n	800673e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	8b7b      	ldrh	r3, [r7, #26]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	619a      	str	r2, [r3, #24]
 800673c:	e002      	b.n	8006744 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2200      	movs	r2, #0
 8006742:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d123      	bne.n	8006794 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	83fb      	strh	r3, [r7, #30]
 8006768:	8bfb      	ldrh	r3, [r7, #30]
 800676a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800676e:	83fb      	strh	r3, [r7, #30]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	441a      	add	r2, r3
 800677e:	8bfb      	ldrh	r3, [r7, #30]
 8006780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006790:	b29b      	uxth	r3, r3
 8006792:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11f      	bne.n	80067de <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	83bb      	strh	r3, [r7, #28]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	8bbb      	ldrh	r3, [r7, #28]
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80067de:	8b7b      	ldrh	r3, [r7, #26]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6959      	ldr	r1, [r3, #20]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	895a      	ldrh	r2, [r3, #10]
 80067f0:	8b7b      	ldrh	r3, [r7, #26]
 80067f2:	f007 fec4 	bl	800e57e <USB_ReadPMA>
    }
  }

  return count;
 80067f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b0a2      	sub	sp, #136	; 0x88
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 81c5 	beq.w	8006ba4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4413      	add	r3, r2
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	4413      	add	r3, r2
 8006834:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800683e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800684a:	429a      	cmp	r2, r3
 800684c:	d907      	bls.n	800685e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006856:	1ad2      	subs	r2, r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	619a      	str	r2, [r3, #24]
 800685c:	e002      	b.n	8006864 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2200      	movs	r2, #0
 8006862:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 80b9 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d126      	bne.n	80068c4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006884:	b29b      	uxth	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	4413      	add	r3, r2
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	00da      	lsls	r2, r3, #3
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	4413      	add	r3, r2
 8006898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e01a      	b.n	80068fa <HAL_PCD_EP_DB_Transmit+0xfa>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d116      	bne.n	80068fa <HAL_PCD_EP_DB_Transmit+0xfa>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	633b      	str	r3, [r7, #48]	; 0x30
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068da:	b29b      	uxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	4413      	add	r3, r2
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	00da      	lsls	r2, r3, #3
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	4413      	add	r3, r2
 80068ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	2200      	movs	r2, #0
 80068f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d126      	bne.n	8006956 <HAL_PCD_EP_DB_Transmit+0x156>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	4413      	add	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	00da      	lsls	r2, r3, #3
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	4413      	add	r3, r2
 800692a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800693a:	b29a      	uxth	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694e:	b29a      	uxth	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e017      	b.n	8006986 <HAL_PCD_EP_DB_Transmit+0x186>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d113      	bne.n	8006986 <HAL_PCD_EP_DB_Transmit+0x186>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006966:	b29b      	uxth	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	4413      	add	r3, r2
 800696e:	623b      	str	r3, [r7, #32]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	00da      	lsls	r2, r3, #3
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	4413      	add	r3, r2
 800697a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2200      	movs	r2, #0
 8006984:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	4619      	mov	r1, r3
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f00f fd2e 	bl	80163ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 82d2 	beq.w	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	827b      	strh	r3, [r7, #18]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	8a7b      	ldrh	r3, [r7, #18]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
 80069de:	e2b0      	b.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80069e0:	88fb      	ldrh	r3, [r7, #6]
 80069e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d021      	beq.n	8006a2e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	441a      	add	r2, r3
 8006a16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	f040 8284 	bne.w	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	695a      	ldr	r2, [r3, #20]
 8006a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a42:	441a      	add	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a50:	441a      	add	r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d309      	bcc.n	8006a76 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	621a      	str	r2, [r3, #32]
 8006a74:	e015      	b.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d107      	bne.n	8006a8e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006a8c:	e009      	b.n	8006aa2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d155      	bne.n	8006b56 <HAL_PCD_EP_DB_Transmit+0x356>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	4413      	add	r3, r2
 8006ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	00da      	lsls	r2, r3, #3
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	4413      	add	r3, r2
 8006acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad6:	d916      	bls.n	8006b06 <HAL_PCD_EP_DB_Transmit+0x306>
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aea:	3b01      	subs	r3, #1
 8006aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e043      	b.n	8006b8e <HAL_PCD_EP_DB_Transmit+0x38e>
 8006b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d112      	bne.n	8006b32 <HAL_PCD_EP_DB_Transmit+0x332>
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e02d      	b.n	8006b8e <HAL_PCD_EP_DB_Transmit+0x38e>
 8006b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_PCD_EP_DB_Transmit+0x348>
 8006b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b44:	3301      	adds	r3, #1
 8006b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	029b      	lsls	r3, r3, #10
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e01b      	b.n	8006b8e <HAL_PCD_EP_DB_Transmit+0x38e>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d117      	bne.n	8006b8e <HAL_PCD_EP_DB_Transmit+0x38e>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	643b      	str	r3, [r7, #64]	; 0x40
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b72:	4413      	add	r3, r2
 8006b74:	643b      	str	r3, [r7, #64]	; 0x40
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	00da      	lsls	r2, r3, #3
 8006b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6959      	ldr	r1, [r3, #20]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	891a      	ldrh	r2, [r3, #8]
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f007 fcac 	bl	800e4fa <USB_WritePMA>
 8006ba2:	e1ce      	b.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d307      	bcc.n	8006be8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	699a      	ldr	r2, [r3, #24]
 8006bdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	619a      	str	r2, [r3, #24]
 8006be6:	e002      	b.n	8006bee <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 80c4 	bne.w	8006d80 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d126      	bne.n	8006c4e <HAL_PCD_EP_DB_Transmit+0x44e>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	461a      	mov	r2, r3
 8006c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c14:	4413      	add	r3, r2
 8006c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	00da      	lsls	r2, r3, #3
 8006c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c26:	667b      	str	r3, [r7, #100]	; 0x64
 8006c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	e01a      	b.n	8006c84 <HAL_PCD_EP_DB_Transmit+0x484>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d116      	bne.n	8006c84 <HAL_PCD_EP_DB_Transmit+0x484>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c6a:	4413      	add	r3, r2
 8006c6c:	673b      	str	r3, [r7, #112]	; 0x70
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	00da      	lsls	r2, r3, #3
 8006c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c80:	2200      	movs	r2, #0
 8006c82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d12f      	bne.n	8006cf2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006caa:	4413      	add	r3, r2
 8006cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	00da      	lsls	r2, r3, #3
 8006cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e017      	b.n	8006d22 <HAL_PCD_EP_DB_Transmit+0x522>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	785b      	ldrb	r3, [r3, #1]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d113      	bne.n	8006d22 <HAL_PCD_EP_DB_Transmit+0x522>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d08:	4413      	add	r3, r2
 8006d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	00da      	lsls	r2, r3, #3
 8006d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1e:	2200      	movs	r2, #0
 8006d20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	4619      	mov	r1, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f00f fb60 	bl	80163ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 8104 	bne.w	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	441a      	add	r2, r3
 8006d66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]
 8006d7e:	e0e0      	b.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d121      	bne.n	8006dce <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f040 80b4 	bne.w	8006f42 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	695a      	ldr	r2, [r3, #20]
 8006dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006de2:	441a      	add	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006df0:	441a      	add	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6a1a      	ldr	r2, [r3, #32]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d309      	bcc.n	8006e16 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	621a      	str	r2, [r3, #32]
 8006e14:	e015      	b.n	8006e42 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d107      	bne.n	8006e2e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006e1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e2c:	e009      	b.n	8006e42 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	663b      	str	r3, [r7, #96]	; 0x60
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d155      	bne.n	8006efc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e64:	4413      	add	r3, r2
 8006e66:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00da      	lsls	r2, r3, #3
 8006e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e70:	4413      	add	r3, r2
 8006e72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e76:	657b      	str	r3, [r7, #84]	; 0x54
 8006e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7c:	d916      	bls.n	8006eac <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	677b      	str	r3, [r7, #116]	; 0x74
 8006e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_PCD_EP_DB_Transmit+0x694>
 8006e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e90:	3b01      	subs	r3, #1
 8006e92:	677b      	str	r3, [r7, #116]	; 0x74
 8006e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e040      	b.n	8006f2e <HAL_PCD_EP_DB_Transmit+0x72e>
 8006eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d112      	bne.n	8006ed8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e02a      	b.n	8006f2e <HAL_PCD_EP_DB_Transmit+0x72e>
 8006ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	677b      	str	r3, [r7, #116]	; 0x74
 8006ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eea:	3301      	adds	r3, #1
 8006eec:	677b      	str	r3, [r7, #116]	; 0x74
 8006eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	029b      	lsls	r3, r3, #10
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	e018      	b.n	8006f2e <HAL_PCD_EP_DB_Transmit+0x72e>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d114      	bne.n	8006f2e <HAL_PCD_EP_DB_Transmit+0x72e>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f12:	4413      	add	r3, r2
 8006f14:	663b      	str	r3, [r7, #96]	; 0x60
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	00da      	lsls	r2, r3, #3
 8006f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6959      	ldr	r1, [r3, #20]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	895a      	ldrh	r2, [r3, #10]
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f007 fadc 	bl	800e4fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5c:	823b      	strh	r3, [r7, #16]
 8006f5e:	8a3b      	ldrh	r3, [r7, #16]
 8006f60:	f083 0310 	eor.w	r3, r3, #16
 8006f64:	823b      	strh	r3, [r7, #16]
 8006f66:	8a3b      	ldrh	r3, [r7, #16]
 8006f68:	f083 0320 	eor.w	r3, r3, #32
 8006f6c:	823b      	strh	r3, [r7, #16]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	441a      	add	r2, r3
 8006f7c:	8a3b      	ldrh	r3, [r7, #16]
 8006f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3788      	adds	r7, #136	; 0x88
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	817b      	strh	r3, [r7, #10]
 8006faa:	4613      	mov	r3, r2
 8006fac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	e009      	b.n	8006fe6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fd2:	897a      	ldrh	r2, [r7, #10]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	80da      	strh	r2, [r3, #6]
 8006ffa:	e00b      	b.n	8007014 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2201      	movs	r2, #1
 8007000:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	b29a      	uxth	r2, r3
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	b29a      	uxth	r2, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007022:	b480      	push	{r7}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007046:	b29b      	uxth	r3, r3
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800705a:	b29b      	uxth	r3, r3
 800705c:	f043 0302 	orr.w	r3, r3, #2
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a04      	ldr	r2, [pc, #16]	; (8007094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	58000400 	.word	0x58000400

08007098 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	58000400 	.word	0x58000400

080070b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80070be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070c2:	6053      	str	r3, [r2, #4]
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	58000400 	.word	0x58000400

080070d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80070d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070e6:	d101      	bne.n	80070ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <LL_RCC_HSE_Enable>:
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80070fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710a:	6013      	str	r3, [r2, #0]
}
 800710c:	bf00      	nop
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <LL_RCC_HSE_Disable>:
{
 8007116:	b480      	push	{r7}
 8007118:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800711a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007128:	6013      	str	r3, [r2, #0]
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <LL_RCC_HSE_IsReady>:
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007146:	d101      	bne.n	800714c <LL_RCC_HSE_IsReady+0x18>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <LL_RCC_HSE_IsReady+0x1a>
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <LL_RCC_HSI_Enable>:
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800715c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716a:	6013      	str	r3, [r2, #0]
}
 800716c:	bf00      	nop
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <LL_RCC_HSI_Disable>:
{
 8007176:	b480      	push	{r7}
 8007178:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800717a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007188:	6013      	str	r3, [r2, #0]
}
 800718a:	bf00      	nop
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <LL_RCC_HSI_IsReady>:
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071a6:	d101      	bne.n	80071ac <LL_RCC_HSI_IsReady+0x18>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <LL_RCC_HSI_IsReady+0x1a>
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	061b      	lsls	r3, r3, #24
 80071ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071d2:	4313      	orrs	r3, r2
 80071d4:	604b      	str	r3, [r1, #4]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <LL_RCC_HSI48_Enable>:
{
 80071e2:	b480      	push	{r7}
 80071e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80071e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80071fa:	bf00      	nop
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <LL_RCC_HSI48_Disable>:
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800720c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <LL_RCC_HSI48_IsReady>:
{
 8007226:	b480      	push	{r7}
 8007228:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800722a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b02      	cmp	r3, #2
 8007238:	d101      	bne.n	800723e <LL_RCC_HSI48_IsReady+0x18>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <LL_RCC_HSI48_IsReady+0x1a>
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <LL_RCC_LSE_Enable>:
{
 800724a:	b480      	push	{r7}
 800724c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800724e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800725a:	f043 0301 	orr.w	r3, r3, #1
 800725e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007262:	bf00      	nop
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <LL_RCC_LSE_Disable>:
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <LL_RCC_LSE_EnableBypass>:
{
 800728e:	b480      	push	{r7}
 8007290:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800729e:	f043 0304 	orr.w	r3, r3, #4
 80072a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_RCC_LSE_DisableBypass>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80072c8:	bf00      	nop
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <LL_RCC_LSE_IsReady>:
{
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80072d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d101      	bne.n	80072ea <LL_RCC_LSE_IsReady+0x18>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <LL_RCC_LSE_IsReady+0x1a>
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <LL_RCC_LSI1_Enable>:
{
 80072f6:	b480      	push	{r7}
 80072f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80072fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <LL_RCC_LSI1_Disable>:
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800731c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007330:	bf00      	nop
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <LL_RCC_LSI1_IsReady>:
{
 800733a:	b480      	push	{r7}
 800733c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800733e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b02      	cmp	r3, #2
 800734c:	d101      	bne.n	8007352 <LL_RCC_LSI1_IsReady+0x18>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <LL_RCC_LSI1_IsReady+0x1a>
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <LL_RCC_LSI2_Enable>:
{
 800735e:	b480      	push	{r7}
 8007360:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800736a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800736e:	f043 0304 	orr.w	r3, r3, #4
 8007372:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007376:	bf00      	nop
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <LL_RCC_LSI2_Disable>:
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800738c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007390:	f023 0304 	bic.w	r3, r3, #4
 8007394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <LL_RCC_LSI2_IsReady>:
{
 80073a2:	b480      	push	{r7}
 80073a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80073a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	d101      	bne.n	80073ba <LL_RCC_LSI2_IsReady+0x18>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <LL_RCC_LSI2_IsReady+0x1a>
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <LL_RCC_LSI2_SetTrimming>:
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80073ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e2:	4313      	orrs	r3, r2
 80073e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <LL_RCC_MSI_Enable>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80073f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	6013      	str	r3, [r2, #0]
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <LL_RCC_MSI_Disable>:
{
 8007412:	b480      	push	{r7}
 8007414:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	6013      	str	r3, [r2, #0]
}
 8007426:	bf00      	nop
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <LL_RCC_MSI_IsReady>:
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b02      	cmp	r3, #2
 8007440:	d101      	bne.n	8007446 <LL_RCC_MSI_IsReady+0x16>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <LL_RCC_MSI_IsReady+0x18>
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <LL_RCC_MSI_SetRange>:
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800745a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4313      	orrs	r3, r2
 800746c:	600b      	str	r3, [r1, #0]
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <LL_RCC_MSI_GetRange>:
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800748a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2bb0      	cmp	r3, #176	; 0xb0
 8007490:	d901      	bls.n	8007496 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007492:	23b0      	movs	r3, #176	; 0xb0
 8007494:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007496:	687b      	ldr	r3, [r7, #4]
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80074ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074be:	4313      	orrs	r3, r2
 80074c0:	604b      	str	r3, [r1, #4]
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <LL_RCC_SetSysClkSource>:
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80074d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f023 0203 	bic.w	r2, r3, #3
 80074e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	608b      	str	r3, [r1, #8]
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <LL_RCC_GetSysClkSource>:
{
 80074f6:	b480      	push	{r7}
 80074f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80074fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 030c 	and.w	r3, r3, #12
}
 8007504:	4618      	mov	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <LL_RCC_SetAHBPrescaler>:
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4313      	orrs	r3, r2
 8007528:	608b      	str	r3, [r1, #8]
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800753e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007542:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800754a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <LL_RCC_SetAHB4Prescaler>:
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800756a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007572:	f023 020f 	bic.w	r2, r3, #15
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_RCC_SetAPB1Prescaler>:
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	608b      	str	r3, [r1, #8]
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <LL_RCC_SetAPB2Prescaler>:
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80075c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	608b      	str	r3, [r1, #8]
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <LL_RCC_GetAHBPrescaler>:
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80075e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <LL_C2_RCC_GetAHBPrescaler>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80075fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007600:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007608:	4618      	mov	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_RCC_GetAHB4Prescaler>:
{
 8007612:	b480      	push	{r7}
 8007614:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007624:	4618      	mov	r0, r3
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <LL_RCC_GetAPB1Prescaler>:
{
 800762e:	b480      	push	{r7}
 8007630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800763c:	4618      	mov	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <LL_RCC_GetAPB2Prescaler>:
{
 8007646:	b480      	push	{r7}
 8007648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800764a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007654:	4618      	mov	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <LL_RCC_PLL_Enable>:
{
 800765e:	b480      	push	{r7}
 8007660:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800766c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007670:	6013      	str	r3, [r2, #0]
}
 8007672:	bf00      	nop
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <LL_RCC_PLL_Disable>:
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800768a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800768e:	6013      	str	r3, [r2, #0]
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <LL_RCC_PLL_IsReady>:
{
 800769a:	b480      	push	{r7}
 800769c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800769e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ac:	d101      	bne.n	80076b2 <LL_RCC_PLL_IsReady+0x18>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <LL_RCC_PLL_IsReady+0x1a>
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <LL_RCC_PLL_GetN>:
{
 80076be:	b480      	push	{r7}
 80076c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <LL_RCC_PLL_GetR>:
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80076dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <LL_RCC_PLL_GetDivider>:
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80076f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80076fe:	4618      	mov	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <LL_RCC_PLL_GetMainSource>:
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800770c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0303 	and.w	r3, r3, #3
}
 8007716:	4618      	mov	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007732:	d101      	bne.n	8007738 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007758:	d101      	bne.n	800775e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800776a:	b480      	push	{r7}
 800776c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800776e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007772:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777e:	d101      	bne.n	8007784 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a2:	d101      	bne.n	80077a8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80077b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077c6:	d101      	bne.n	80077cc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d8:	b590      	push	{r4, r7, lr}
 80077da:	b08d      	sub	sp, #52	; 0x34
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e37e      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8092 	beq.w	800791c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077f8:	f7ff fe7d 	bl	80074f6 <LL_RCC_GetSysClkSource>
 80077fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077fe:	f7ff ff83 	bl	8007708 <LL_RCC_PLL_GetMainSource>
 8007802:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_RCC_OscConfig+0x3e>
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	2b0c      	cmp	r3, #12
 800780e:	d14c      	bne.n	80078aa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	2b01      	cmp	r3, #1
 8007814:	d149      	bne.n	80078aa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007816:	f7ff fe0b 	bl	8007430 <LL_RCC_MSI_IsReady>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <HAL_RCC_OscConfig+0x54>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e35d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007830:	f7ff fe23 	bl	800747a <LL_RCC_MSI_GetRange>
 8007834:	4603      	mov	r3, r0
 8007836:	429c      	cmp	r4, r3
 8007838:	d914      	bls.n	8007864 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fd5e 	bl	8008300 <RCC_SetFlashLatencyFromMSIRange>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e34c      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fdfd 	bl	8007452 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fe21 	bl	80074a4 <LL_RCC_MSI_SetCalibTrimming>
 8007862:	e013      	b.n	800788c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fdf2 	bl	8007452 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff fe16 	bl	80074a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fd3f 	bl	8008300 <RCC_SetFlashLatencyFromMSIRange>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e32d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800788c:	f000 fcdc 	bl	8008248 <HAL_RCC_GetHCLKFreq>
 8007890:	4603      	mov	r3, r0
 8007892:	4ab3      	ldr	r2, [pc, #716]	; (8007b60 <HAL_RCC_OscConfig+0x388>)
 8007894:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007896:	4bb3      	ldr	r3, [pc, #716]	; (8007b64 <HAL_RCC_OscConfig+0x38c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f7fa fdae 	bl	80023fc <HAL_InitTick>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d039      	beq.n	800791a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e31e      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01e      	beq.n	80078f0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80078b2:	f7ff fd9f 	bl	80073f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078b6:	f7fb fa8d 	bl	8002dd4 <HAL_GetTick>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078be:	f7fb fa89 	bl	8002dd4 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e30b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80078d0:	f7ff fdae 	bl	8007430 <LL_RCC_MSI_IsReady>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f1      	beq.n	80078be <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fdb7 	bl	8007452 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff fddb 	bl	80074a4 <LL_RCC_MSI_SetCalibTrimming>
 80078ee:	e015      	b.n	800791c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80078f0:	f7ff fd8f 	bl	8007412 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078f4:	f7fb fa6e 	bl	8002dd4 <HAL_GetTick>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078fc:	f7fb fa6a 	bl	8002dd4 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e2ec      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800790e:	f7ff fd8f 	bl	8007430 <LL_RCC_MSI_IsReady>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f1      	bne.n	80078fc <HAL_RCC_OscConfig+0x124>
 8007918:	e000      	b.n	800791c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800791a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d04e      	beq.n	80079c6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007928:	f7ff fde5 	bl	80074f6 <LL_RCC_GetSysClkSource>
 800792c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800792e:	f7ff feeb 	bl	8007708 <LL_RCC_PLL_GetMainSource>
 8007932:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	2b08      	cmp	r3, #8
 8007938:	d005      	beq.n	8007946 <HAL_RCC_OscConfig+0x16e>
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	2b0c      	cmp	r3, #12
 800793e:	d10d      	bne.n	800795c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b03      	cmp	r3, #3
 8007944:	d10a      	bne.n	800795c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007946:	f7ff fbf5 	bl	8007134 <LL_RCC_HSE_IsReady>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d039      	beq.n	80079c4 <HAL_RCC_OscConfig+0x1ec>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d135      	bne.n	80079c4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e2c5      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007964:	d102      	bne.n	800796c <HAL_RCC_OscConfig+0x194>
 8007966:	f7ff fbc7 	bl	80070f8 <LL_RCC_HSE_Enable>
 800796a:	e001      	b.n	8007970 <HAL_RCC_OscConfig+0x198>
 800796c:	f7ff fbd3 	bl	8007116 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d012      	beq.n	800799e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fb fa2c 	bl	8002dd4 <HAL_GetTick>
 800797c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007980:	f7fb fa28 	bl	8002dd4 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	; 0x64
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e2aa      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007992:	f7ff fbcf 	bl	8007134 <LL_RCC_HSE_IsReady>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0f1      	beq.n	8007980 <HAL_RCC_OscConfig+0x1a8>
 800799c:	e013      	b.n	80079c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799e:	f7fb fa19 	bl	8002dd4 <HAL_GetTick>
 80079a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079a6:	f7fb fa15 	bl	8002dd4 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b64      	cmp	r3, #100	; 0x64
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e297      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80079b8:	f7ff fbbc 	bl	8007134 <LL_RCC_HSE_IsReady>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f1      	bne.n	80079a6 <HAL_RCC_OscConfig+0x1ce>
 80079c2:	e000      	b.n	80079c6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d051      	beq.n	8007a76 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079d2:	f7ff fd90 	bl	80074f6 <LL_RCC_GetSysClkSource>
 80079d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079d8:	f7ff fe96 	bl	8007708 <LL_RCC_PLL_GetMainSource>
 80079dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d005      	beq.n	80079f0 <HAL_RCC_OscConfig+0x218>
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2b0c      	cmp	r3, #12
 80079e8:	d113      	bne.n	8007a12 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d110      	bne.n	8007a12 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079f0:	f7ff fbd0 	bl	8007194 <LL_RCC_HSI_IsReady>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <HAL_RCC_OscConfig+0x22e>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e270      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fbd4 	bl	80071b8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a10:	e031      	b.n	8007a76 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d019      	beq.n	8007a4e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a1a:	f7ff fb9d 	bl	8007158 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1e:	f7fb f9d9 	bl	8002dd4 <HAL_GetTick>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a26:	f7fb f9d5 	bl	8002dd4 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e257      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007a38:	f7ff fbac 	bl	8007194 <LL_RCC_HSI_IsReady>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f1      	beq.n	8007a26 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fbb6 	bl	80071b8 <LL_RCC_HSI_SetCalibTrimming>
 8007a4c:	e013      	b.n	8007a76 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a4e:	f7ff fb92 	bl	8007176 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a52:	f7fb f9bf 	bl	8002dd4 <HAL_GetTick>
 8007a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007a58:	e008      	b.n	8007a6c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a5a:	f7fb f9bb 	bl	8002dd4 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e23d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007a6c:	f7ff fb92 	bl	8007194 <LL_RCC_HSI_IsReady>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f1      	bne.n	8007a5a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80a3 	beq.w	8007bd6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d076      	beq.n	8007b86 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d046      	beq.n	8007b32 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007aa4:	f7ff fc49 	bl	800733a <LL_RCC_LSI1_IsReady>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d113      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007aae:	f7ff fc22 	bl	80072f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ab2:	f7fb f98f 	bl	8002dd4 <HAL_GetTick>
 8007ab6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007ab8:	e008      	b.n	8007acc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007aba:	f7fb f98b 	bl	8002dd4 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e20d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007acc:	f7ff fc35 	bl	800733a <LL_RCC_LSI1_IsReady>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f1      	beq.n	8007aba <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007ad6:	f7ff fc42 	bl	800735e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ada:	f7fb f97b 	bl	8002dd4 <HAL_GetTick>
 8007ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007ae0:	e008      	b.n	8007af4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007ae2:	f7fb f977 	bl	8002dd4 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d901      	bls.n	8007af4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e1f9      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007af4:	f7ff fc55 	bl	80073a2 <LL_RCC_LSI2_IsReady>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f1      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fc5f 	bl	80073c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007b08:	f7ff fc06 	bl	8007318 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0c:	f7fb f962 	bl	8002dd4 <HAL_GetTick>
 8007b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007b14:	f7fb f95e 	bl	8002dd4 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e1e0      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007b26:	f7ff fc08 	bl	800733a <LL_RCC_LSI1_IsReady>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f1      	bne.n	8007b14 <HAL_RCC_OscConfig+0x33c>
 8007b30:	e051      	b.n	8007bd6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007b32:	f7ff fbe0 	bl	80072f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b36:	f7fb f94d 	bl	8002dd4 <HAL_GetTick>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007b3e:	f7fb f949 	bl	8002dd4 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e1cb      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007b50:	f7ff fbf3 	bl	800733a <LL_RCC_LSI1_IsReady>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f1      	beq.n	8007b3e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007b5a:	f7ff fc11 	bl	8007380 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007b5e:	e00c      	b.n	8007b7a <HAL_RCC_OscConfig+0x3a2>
 8007b60:	20000010 	.word	0x20000010
 8007b64:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007b68:	f7fb f934 	bl	8002dd4 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e1b6      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007b7a:	f7ff fc12 	bl	80073a2 <LL_RCC_LSI2_IsReady>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f1      	bne.n	8007b68 <HAL_RCC_OscConfig+0x390>
 8007b84:	e027      	b.n	8007bd6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007b86:	f7ff fbfb 	bl	8007380 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8a:	f7fb f923 	bl	8002dd4 <HAL_GetTick>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007b92:	f7fb f91f 	bl	8002dd4 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e1a1      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007ba4:	f7ff fbfd 	bl	80073a2 <LL_RCC_LSI2_IsReady>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f1      	bne.n	8007b92 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007bae:	f7ff fbb3 	bl	8007318 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb2:	f7fb f90f 	bl	8002dd4 <HAL_GetTick>
 8007bb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007bba:	f7fb f90b 	bl	8002dd4 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e18d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007bcc:	f7ff fbb5 	bl	800733a <LL_RCC_LSI1_IsReady>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1f1      	bne.n	8007bba <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d05b      	beq.n	8007c9a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be2:	4bb5      	ldr	r3, [pc, #724]	; (8007eb8 <HAL_RCC_OscConfig+0x6e0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d114      	bne.n	8007c18 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007bee:	f7ff fa43 	bl	8007078 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bf2:	f7fb f8ef 	bl	8002dd4 <HAL_GetTick>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bfa:	f7fb f8eb 	bl	8002dd4 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e16d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c0c:	4baa      	ldr	r3, [pc, #680]	; (8007eb8 <HAL_RCC_OscConfig+0x6e0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d102      	bne.n	8007c26 <HAL_RCC_OscConfig+0x44e>
 8007c20:	f7ff fb13 	bl	800724a <LL_RCC_LSE_Enable>
 8007c24:	e00c      	b.n	8007c40 <HAL_RCC_OscConfig+0x468>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d104      	bne.n	8007c38 <HAL_RCC_OscConfig+0x460>
 8007c2e:	f7ff fb2e 	bl	800728e <LL_RCC_LSE_EnableBypass>
 8007c32:	f7ff fb0a 	bl	800724a <LL_RCC_LSE_Enable>
 8007c36:	e003      	b.n	8007c40 <HAL_RCC_OscConfig+0x468>
 8007c38:	f7ff fb18 	bl	800726c <LL_RCC_LSE_Disable>
 8007c3c:	f7ff fb38 	bl	80072b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d014      	beq.n	8007c72 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c48:	f7fb f8c4 	bl	8002dd4 <HAL_GetTick>
 8007c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007c4e:	e00a      	b.n	8007c66 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c50:	f7fb f8c0 	bl	8002dd4 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e140      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007c66:	f7ff fb34 	bl	80072d2 <LL_RCC_LSE_IsReady>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0ef      	beq.n	8007c50 <HAL_RCC_OscConfig+0x478>
 8007c70:	e013      	b.n	8007c9a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c72:	f7fb f8af 	bl	8002dd4 <HAL_GetTick>
 8007c76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007c78:	e00a      	b.n	8007c90 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c7a:	f7fb f8ab 	bl	8002dd4 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e12b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007c90:	f7ff fb1f 	bl	80072d2 <LL_RCC_LSE_IsReady>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1ef      	bne.n	8007c7a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d02c      	beq.n	8007d00 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d014      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cae:	f7ff fa98 	bl	80071e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb2:	f7fb f88f 	bl	8002dd4 <HAL_GetTick>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cba:	f7fb f88b 	bl	8002dd4 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e10d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007ccc:	f7ff faab 	bl	8007226 <LL_RCC_HSI48_IsReady>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f1      	beq.n	8007cba <HAL_RCC_OscConfig+0x4e2>
 8007cd6:	e013      	b.n	8007d00 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cd8:	f7ff fa94 	bl	8007204 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cdc:	f7fb f87a 	bl	8002dd4 <HAL_GetTick>
 8007ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ce4:	f7fb f876 	bl	8002dd4 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e0f8      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007cf6:	f7ff fa96 	bl	8007226 <LL_RCC_HSI48_IsReady>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1f1      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 80ee 	beq.w	8007ee6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d0a:	f7ff fbf4 	bl	80074f6 <LL_RCC_GetSysClkSource>
 8007d0e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	f040 80af 	bne.w	8007e80 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f003 0203 	and.w	r2, r3, #3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d123      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d11c      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	0a1b      	lsrs	r3, r3, #8
 8007d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d114      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d10d      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d106      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d05d      	beq.n	8007e34 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b0c      	cmp	r3, #12
 8007d7c:	d058      	beq.n	8007e30 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0ab      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007d90:	f7ff fc74 	bl	800767c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d94:	f7fb f81e 	bl	8002dd4 <HAL_GetTick>
 8007d98:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d9c:	f7fb f81a 	bl	8002dd4 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e09c      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ef      	bne.n	8007d9c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	4b3e      	ldr	r3, [pc, #248]	; (8007ebc <HAL_RCC_OscConfig+0x6e4>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dce:	4311      	orrs	r1, r2
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dd4:	0212      	lsls	r2, r2, #8
 8007dd6:	4311      	orrs	r1, r2
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ddc:	4311      	orrs	r1, r2
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007de2:	4311      	orrs	r1, r2
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007de8:	430a      	orrs	r2, r1
 8007dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007df2:	f7ff fc34 	bl	800765e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e04:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e06:	f7fa ffe5 	bl	8002dd4 <HAL_GetTick>
 8007e0a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e0c:	e008      	b.n	8007e20 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e0e:	f7fa ffe1 	bl	8002dd4 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e063      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0ef      	beq.n	8007e0e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e2e:	e05a      	b.n	8007ee6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e059      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d151      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007e42:	f7ff fc0c 	bl	800765e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e54:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e56:	f7fa ffbd 	bl	8002dd4 <HAL_GetTick>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e5e:	f7fa ffb9 	bl	8002dd4 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e03b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0ef      	beq.n	8007e5e <HAL_RCC_OscConfig+0x686>
 8007e7e:	e032      	b.n	8007ee6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	d02d      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e86:	f7ff fbf9 	bl	800767c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8007e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ea4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eae:	f7fa ff91 	bl	8002dd4 <HAL_GetTick>
 8007eb2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eb4:	e00d      	b.n	8007ed2 <HAL_RCC_OscConfig+0x6fa>
 8007eb6:	bf00      	nop
 8007eb8:	58000400 	.word	0x58000400
 8007ebc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec0:	f7fa ff88 	bl	8002dd4 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1ef      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x6e8>
 8007ee0:	e001      	b.n	8007ee6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3734      	adds	r7, #52	; 0x34
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd90      	pop	{r4, r7, pc}

08007ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e12d      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f04:	4b98      	ldr	r3, [pc, #608]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d91b      	bls.n	8007f4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f12:	4b95      	ldr	r3, [pc, #596]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f023 0207 	bic.w	r2, r3, #7
 8007f1a:	4993      	ldr	r1, [pc, #588]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f22:	f7fa ff57 	bl	8002dd4 <HAL_GetTick>
 8007f26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007f2a:	f7fa ff53 	bl	8002dd4 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e111      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f3c:	4b8a      	ldr	r3, [pc, #552]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0307 	and.w	r3, r3, #7
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d1ef      	bne.n	8007f2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d016      	beq.n	8007f84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fad7 	bl	800750e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f60:	f7fa ff38 	bl	8002dd4 <HAL_GetTick>
 8007f64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f68:	f7fa ff34 	bl	8002dd4 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e0f2      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007f7a:	f7ff fbd1 	bl	8007720 <LL_RCC_IsActiveFlag_HPRE>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0f1      	beq.n	8007f68 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d016      	beq.n	8007fbe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff face 	bl	8007536 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f9a:	f7fa ff1b 	bl	8002dd4 <HAL_GetTick>
 8007f9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007fa2:	f7fa ff17 	bl	8002dd4 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e0d5      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007fb4:	f7ff fbc6 	bl	8007744 <LL_RCC_IsActiveFlag_C2HPRE>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f1      	beq.n	8007fa2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fac7 	bl	8007562 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007fd4:	f7fa fefe 	bl	8002dd4 <HAL_GetTick>
 8007fd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007fdc:	f7fa fefa 	bl	8002dd4 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e0b8      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007fee:	f7ff fbbc 	bl	800776a <LL_RCC_IsActiveFlag_SHDHPRE>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f1      	beq.n	8007fdc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d016      	beq.n	8008032 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fac1 	bl	8007590 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800800e:	f7fa fee1 	bl	8002dd4 <HAL_GetTick>
 8008012:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008014:	e008      	b.n	8008028 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008016:	f7fa fedd 	bl	8002dd4 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d901      	bls.n	8008028 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e09b      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008028:	f7ff fbb2 	bl	8007790 <LL_RCC_IsActiveFlag_PPRE1>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0f1      	beq.n	8008016 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d017      	beq.n	800806e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff fab7 	bl	80075b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800804a:	f7fa fec3 	bl	8002dd4 <HAL_GetTick>
 800804e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008050:	e008      	b.n	8008064 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008052:	f7fa febf 	bl	8002dd4 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e07d      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008064:	f7ff fba6 	bl	80077b4 <LL_RCC_IsActiveFlag_PPRE2>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f1      	beq.n	8008052 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d043      	beq.n	8008102 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d106      	bne.n	8008090 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008082:	f7ff f857 	bl	8007134 <LL_RCC_HSE_IsReady>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11e      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e067      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d106      	bne.n	80080a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008098:	f7ff faff 	bl	800769a <LL_RCC_PLL_IsReady>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d113      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e05c      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80080ae:	f7ff f9bf 	bl	8007430 <LL_RCC_MSI_IsReady>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d108      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e051      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80080bc:	f7ff f86a 	bl	8007194 <LL_RCC_HSI_IsReady>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e04a      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff f9fd 	bl	80074ce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d4:	f7fa fe7e 	bl	8002dd4 <HAL_GetTick>
 80080d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080da:	e00a      	b.n	80080f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080dc:	f7fa fe7a 	bl	8002dd4 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e036      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080f2:	f7ff fa00 	bl	80074f6 <LL_RCC_GetSysClkSource>
 80080f6:	4602      	mov	r2, r0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	429a      	cmp	r2, r3
 8008100:	d1ec      	bne.n	80080dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008102:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d21b      	bcs.n	8008148 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008110:	4b15      	ldr	r3, [pc, #84]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f023 0207 	bic.w	r2, r3, #7
 8008118:	4913      	ldr	r1, [pc, #76]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	4313      	orrs	r3, r2
 800811e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008120:	f7fa fe58 	bl	8002dd4 <HAL_GetTick>
 8008124:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008126:	e008      	b.n	800813a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008128:	f7fa fe54 	bl	8002dd4 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e012      	b.n	8008160 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800813a:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <HAL_RCC_ClockConfig+0x278>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d1ef      	bne.n	8008128 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008148:	f000 f87e 	bl	8008248 <HAL_RCC_GetHCLKFreq>
 800814c:	4603      	mov	r3, r0
 800814e:	4a07      	ldr	r2, [pc, #28]	; (800816c <HAL_RCC_ClockConfig+0x27c>)
 8008150:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008152:	f7fa fe4b 	bl	8002dec <HAL_GetTickPrio>
 8008156:	4603      	mov	r3, r0
 8008158:	4618      	mov	r0, r3
 800815a:	f7fa f94f 	bl	80023fc <HAL_InitTick>
 800815e:	4603      	mov	r3, r0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	58004000 	.word	0x58004000
 800816c:	20000010 	.word	0x20000010

08008170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008170:	b590      	push	{r4, r7, lr}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008176:	f7ff f9be 	bl	80074f6 <LL_RCC_GetSysClkSource>
 800817a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008182:	f7ff f97a 	bl	800747a <LL_RCC_MSI_GetRange>
 8008186:	4603      	mov	r3, r0
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	4a2b      	ldr	r2, [pc, #172]	; (800823c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	e04b      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b04      	cmp	r3, #4
 800819c:	d102      	bne.n	80081a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800819e:	4b28      	ldr	r3, [pc, #160]	; (8008240 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	e045      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b08      	cmp	r3, #8
 80081a8:	d10a      	bne.n	80081c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80081aa:	f7fe ff93 	bl	80070d4 <LL_RCC_HSE_IsEnabledDiv2>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d102      	bne.n	80081ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80081b4:	4b22      	ldr	r3, [pc, #136]	; (8008240 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e03a      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80081ba:	4b22      	ldr	r3, [pc, #136]	; (8008244 <HAL_RCC_GetSysClockFreq+0xd4>)
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	e037      	b.n	8008230 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80081c0:	f7ff faa2 	bl	8007708 <LL_RCC_PLL_GetMainSource>
 80081c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d003      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x64>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d003      	beq.n	80081da <HAL_RCC_GetSysClockFreq+0x6a>
 80081d2:	e00d      	b.n	80081f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80081d4:	4b1a      	ldr	r3, [pc, #104]	; (8008240 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081d6:	60bb      	str	r3, [r7, #8]
        break;
 80081d8:	e015      	b.n	8008206 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80081da:	f7fe ff7b 	bl	80070d4 <LL_RCC_HSE_IsEnabledDiv2>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d102      	bne.n	80081ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80081e4:	4b16      	ldr	r3, [pc, #88]	; (8008240 <HAL_RCC_GetSysClockFreq+0xd0>)
 80081e6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80081e8:	e00d      	b.n	8008206 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80081ea:	4b16      	ldr	r3, [pc, #88]	; (8008244 <HAL_RCC_GetSysClockFreq+0xd4>)
 80081ec:	60bb      	str	r3, [r7, #8]
        break;
 80081ee:	e00a      	b.n	8008206 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80081f0:	f7ff f943 	bl	800747a <LL_RCC_MSI_GetRange>
 80081f4:	4603      	mov	r3, r0
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	4a0f      	ldr	r2, [pc, #60]	; (800823c <HAL_RCC_GetSysClockFreq+0xcc>)
 80081fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008202:	60bb      	str	r3, [r7, #8]
        break;
 8008204:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8008206:	f7ff fa5a 	bl	80076be <LL_RCC_PLL_GetN>
 800820a:	4602      	mov	r2, r0
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	fb03 f402 	mul.w	r4, r3, r2
 8008212:	f7ff fa6d 	bl	80076f0 <LL_RCC_PLL_GetDivider>
 8008216:	4603      	mov	r3, r0
 8008218:	091b      	lsrs	r3, r3, #4
 800821a:	3301      	adds	r3, #1
 800821c:	fbb4 f4f3 	udiv	r4, r4, r3
 8008220:	f7ff fa5a 	bl	80076d8 <LL_RCC_PLL_GetR>
 8008224:	4603      	mov	r3, r0
 8008226:	0f5b      	lsrs	r3, r3, #29
 8008228:	3301      	adds	r3, #1
 800822a:	fbb4 f3f3 	udiv	r3, r4, r3
 800822e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bd90      	pop	{r4, r7, pc}
 800823a:	bf00      	nop
 800823c:	08017878 	.word	0x08017878
 8008240:	00f42400 	.word	0x00f42400
 8008244:	01e84800 	.word	0x01e84800

08008248 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008248:	b598      	push	{r3, r4, r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800824c:	f7ff ff90 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 8008250:	4604      	mov	r4, r0
 8008252:	f7ff f9c5 	bl	80075e0 <LL_RCC_GetAHBPrescaler>
 8008256:	4603      	mov	r3, r0
 8008258:	091b      	lsrs	r3, r3, #4
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	4a03      	ldr	r2, [pc, #12]	; (800826c <HAL_RCC_GetHCLKFreq+0x24>)
 8008260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008264:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008268:	4618      	mov	r0, r3
 800826a:	bd98      	pop	{r3, r4, r7, pc}
 800826c:	08017818 	.word	0x08017818

08008270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008270:	b598      	push	{r3, r4, r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008274:	f7ff ffe8 	bl	8008248 <HAL_RCC_GetHCLKFreq>
 8008278:	4604      	mov	r4, r0
 800827a:	f7ff f9e4 	bl	8007646 <LL_RCC_GetAPB2Prescaler>
 800827e:	4603      	mov	r3, r0
 8008280:	0adb      	lsrs	r3, r3, #11
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	4a04      	ldr	r2, [pc, #16]	; (8008298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008294:	4618      	mov	r0, r3
 8008296:	bd98      	pop	{r3, r4, r7, pc}
 8008298:	08017858 	.word	0x08017858

0800829c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	226f      	movs	r2, #111	; 0x6f
 80082aa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80082ac:	f7ff f923 	bl	80074f6 <LL_RCC_GetSysClkSource>
 80082b0:	4602      	mov	r2, r0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80082b6:	f7ff f993 	bl	80075e0 <LL_RCC_GetAHBPrescaler>
 80082ba:	4602      	mov	r2, r0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80082c0:	f7ff f9b5 	bl	800762e <LL_RCC_GetAPB1Prescaler>
 80082c4:	4602      	mov	r2, r0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80082ca:	f7ff f9bc 	bl	8007646 <LL_RCC_GetAPB2Prescaler>
 80082ce:	4602      	mov	r2, r0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80082d4:	f7ff f990 	bl	80075f8 <LL_C2_RCC_GetAHBPrescaler>
 80082d8:	4602      	mov	r2, r0
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80082de:	f7ff f998 	bl	8007612 <LL_RCC_GetAHB4Prescaler>
 80082e2:	4602      	mov	r2, r0
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80082e8:	4b04      	ldr	r3, [pc, #16]	; (80082fc <HAL_RCC_GetClockConfig+0x60>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0207 	and.w	r2, r3, #7
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58004000 	.word	0x58004000

08008300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2bb0      	cmp	r3, #176	; 0xb0
 800830c:	d903      	bls.n	8008316 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e007      	b.n	8008326 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	091b      	lsrs	r3, r3, #4
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	4a11      	ldr	r2, [pc, #68]	; (8008364 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008324:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008326:	f7ff f974 	bl	8007612 <LL_RCC_GetAHB4Prescaler>
 800832a:	4603      	mov	r3, r0
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	f003 030f 	and.w	r3, r3, #15
 8008332:	4a0d      	ldr	r2, [pc, #52]	; (8008368 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	fbb2 f3f3 	udiv	r3, r2, r3
 800833e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a0a      	ldr	r2, [pc, #40]	; (800836c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	0c9c      	lsrs	r4, r3, #18
 800834a:	f7fe fea5 	bl	8007098 <HAL_PWREx_GetVoltageRange>
 800834e:	4603      	mov	r3, r0
 8008350:	4619      	mov	r1, r3
 8008352:	4620      	mov	r0, r4
 8008354:	f000 f80c 	bl	8008370 <RCC_SetFlashLatency>
 8008358:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	bd90      	pop	{r4, r7, pc}
 8008362:	bf00      	nop
 8008364:	08017878 	.word	0x08017878
 8008368:	08017818 	.word	0x08017818
 800836c:	431bde83 	.word	0x431bde83

08008370 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b093      	sub	sp, #76	; 0x4c
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800837a:	4b39      	ldr	r3, [pc, #228]	; (8008460 <RCC_SetFlashLatency+0xf0>)
 800837c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008382:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008386:	4a37      	ldr	r2, [pc, #220]	; (8008464 <RCC_SetFlashLatency+0xf4>)
 8008388:	f107 031c 	add.w	r3, r7, #28
 800838c:	ca07      	ldmia	r2, {r0, r1, r2}
 800838e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008392:	4b35      	ldr	r3, [pc, #212]	; (8008468 <RCC_SetFlashLatency+0xf8>)
 8008394:	f107 040c 	add.w	r4, r7, #12
 8008398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800839a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800839e:	2300      	movs	r3, #0
 80083a0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a8:	d11c      	bne.n	80083e4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80083aa:	2300      	movs	r3, #0
 80083ac:	643b      	str	r3, [r7, #64]	; 0x40
 80083ae:	e015      	b.n	80083dc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80083b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083b8:	4413      	add	r3, r2
 80083ba:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d808      	bhi.n	80083d6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80083c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083cc:	4413      	add	r3, r2
 80083ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80083d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80083d4:	e022      	b.n	800841c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80083d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d8:	3301      	adds	r3, #1
 80083da:	643b      	str	r3, [r7, #64]	; 0x40
 80083dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d9e6      	bls.n	80083b0 <RCC_SetFlashLatency+0x40>
 80083e2:	e01b      	b.n	800841c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e015      	b.n	8008416 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80083ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80083f2:	4413      	add	r3, r2
 80083f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d808      	bhi.n	8008410 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80083fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008406:	4413      	add	r3, r2
 8008408:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800840c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800840e:	e005      	b.n	800841c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008412:	3301      	adds	r3, #1
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	2b02      	cmp	r3, #2
 800841a:	d9e6      	bls.n	80083ea <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <RCC_SetFlashLatency+0xfc>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f023 0207 	bic.w	r2, r3, #7
 8008424:	4911      	ldr	r1, [pc, #68]	; (800846c <RCC_SetFlashLatency+0xfc>)
 8008426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008428:	4313      	orrs	r3, r2
 800842a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800842c:	f7fa fcd2 	bl	8002dd4 <HAL_GetTick>
 8008430:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008432:	e008      	b.n	8008446 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008434:	f7fa fcce 	bl	8002dd4 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e007      	b.n	8008456 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <RCC_SetFlashLatency+0xfc>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008450:	429a      	cmp	r2, r3
 8008452:	d1ef      	bne.n	8008434 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	374c      	adds	r7, #76	; 0x4c
 800845a:	46bd      	mov	sp, r7
 800845c:	bd90      	pop	{r4, r7, pc}
 800845e:	bf00      	nop
 8008460:	08017680 	.word	0x08017680
 8008464:	08017690 	.word	0x08017690
 8008468:	0801769c 	.word	0x0801769c
 800846c:	58004000 	.word	0x58004000

08008470 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800847e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008482:	d101      	bne.n	8008488 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <LL_RCC_HSE_IsReady>:
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a6:	d101      	bne.n	80084ac <LL_RCC_HSE_IsReady+0x18>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <LL_RCC_HSE_IsReady+0x1a>
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <LL_RCC_HSI_IsReady>:
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80084bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ca:	d101      	bne.n	80084d0 <LL_RCC_HSI_IsReady+0x18>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <LL_RCC_HSI_IsReady+0x1a>
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <LL_RCC_HSI48_IsReady>:
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80084e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d101      	bne.n	80084f4 <LL_RCC_HSI48_IsReady+0x18>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <LL_RCC_HSI48_IsReady+0x1a>
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <LL_RCC_LSE_IsEnabled>:
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <LL_RCC_LSE_IsEnabled+0x18>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <LL_RCC_LSE_IsEnabled+0x1a>
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <LL_RCC_LSE_IsReady>:
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b02      	cmp	r3, #2
 8008536:	d101      	bne.n	800853c <LL_RCC_LSE_IsReady+0x18>
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <LL_RCC_LSE_IsReady+0x1a>
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <LL_RCC_LSI1_IsReady>:
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800854c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b02      	cmp	r3, #2
 800855a:	d101      	bne.n	8008560 <LL_RCC_LSI1_IsReady+0x18>
 800855c:	2301      	movs	r3, #1
 800855e:	e000      	b.n	8008562 <LL_RCC_LSI1_IsReady+0x1a>
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <LL_RCC_LSI2_IsReady>:
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b08      	cmp	r3, #8
 800857e:	d101      	bne.n	8008584 <LL_RCC_LSI2_IsReady+0x18>
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <LL_RCC_LSI2_IsReady+0x1a>
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <LL_RCC_MSI_IsReady>:
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d101      	bne.n	80085a6 <LL_RCC_MSI_IsReady+0x16>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <LL_RCC_MSI_IsReady+0x18>
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <LL_RCC_MSI_EnablePLLMode>:
{
 80085b2:	b480      	push	{r7}
 80085b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80085b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085c0:	f043 0304 	orr.w	r3, r3, #4
 80085c4:	6013      	str	r3, [r2, #0]
}
 80085c6:	bf00      	nop
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <LL_RCC_MSI_GetRange>:
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80085d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e0:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2bb0      	cmp	r3, #176	; 0xb0
 80085e6:	d901      	bls.n	80085ec <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80085e8:	23b0      	movs	r3, #176	; 0xb0
 80085ea:	607b      	str	r3, [r7, #4]
  return msiRange;
 80085ec:	687b      	ldr	r3, [r7, #4]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <LL_RCC_SetRFWKPClockSource>:
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800860a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800860e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4313      	orrs	r3, r2
 8008616:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <LL_RCC_GetRFWKPClockSource>:
{
 8008626:	b480      	push	{r7}
 8008628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800862a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800862e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8008636:	4618      	mov	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <LL_RCC_GetAHBPrescaler>:
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <LL_RCC_GetAPB1Prescaler>:
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800865c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008666:	4618      	mov	r0, r3
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <LL_RCC_GetAPB2Prescaler>:
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <LL_RCC_SetSMPSClockSource>:
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	f023 0203 	bic.w	r2, r3, #3
 800869a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <LL_RCC_GetSMPSClockSource>:
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 80086b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_RCC_SetSMPSPrescaler>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80086d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <LL_RCC_GetSMPSPrescaler>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80086f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 80086fe:	4618      	mov	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <LL_RCC_SetUSARTClockSource>:
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008718:	f023 0203 	bic.w	r2, r3, #3
 800871c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <LL_RCC_SetLPUARTClockSource>:
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008744:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4313      	orrs	r3, r2
 8008750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <LL_RCC_SetI2CClockSource>:
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800876c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	091b      	lsrs	r3, r3, #4
 8008774:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008778:	43db      	mvns	r3, r3
 800877a:	401a      	ands	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008788:	4313      	orrs	r3, r2
 800878a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <LL_RCC_SetLPTIMClockSource>:
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80087a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	0c1b      	lsrs	r3, r3, #16
 80087ae:	041b      	lsls	r3, r3, #16
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	041b      	lsls	r3, r3, #16
 80087b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087bc:	4313      	orrs	r3, r2
 80087be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <LL_RCC_SetSAIClockSource>:
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80087d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <LL_RCC_SetRNGClockSource>:
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800880e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4313      	orrs	r3, r2
 8008816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <LL_RCC_SetCLK48ClockSource>:
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800882e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800883a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4313      	orrs	r3, r2
 8008842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <LL_RCC_SetUSBClockSource>:
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff ffe3 	bl	8008826 <LL_RCC_SetCLK48ClockSource>
}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <LL_RCC_SetADCClockSource>:
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008878:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800887c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4313      	orrs	r3, r2
 8008884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <LL_RCC_GetUSARTClockSource>:
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800889c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4013      	ands	r3, r2
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <LL_RCC_GetLPUARTClockSource>:
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80088bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4013      	ands	r3, r2
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <LL_RCC_GetI2CClockSource>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80088dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4013      	ands	r3, r2
 80088e8:	091a      	lsrs	r2, r3, #4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	4313      	orrs	r3, r2
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <LL_RCC_GetLPTIMClockSource>:
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8008904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008908:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4013      	ands	r3, r2
 8008910:	0c1a      	lsrs	r2, r3, #16
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4313      	orrs	r3, r2
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <LL_RCC_GetSAIClockSource>:
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 800892a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800892e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4013      	ands	r3, r2
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <LL_RCC_GetRNGClockSource>:
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800894a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800894e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4013      	ands	r3, r2
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <LL_RCC_GetCLK48ClockSource>:
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800896a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800896e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4013      	ands	r3, r2
}
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <LL_RCC_GetUSBClockSource>:
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff ffe9 	bl	8008962 <LL_RCC_GetCLK48ClockSource>
 8008990:	4603      	mov	r3, r0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <LL_RCC_GetADCClockSource>:
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 80089a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4013      	ands	r3, r2
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <LL_RCC_SetRTCClockSource>:
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80089c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <LL_RCC_GetRTCClockSource>:
{
 80089e6:	b480      	push	{r7}
 80089e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80089ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <LL_RCC_ForceBackupDomainReset>:
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a18:	bf00      	nop
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008a22:	b480      	push	{r7}
 8008a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008a3a:	bf00      	nop
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <LL_RCC_PLL_IsReady>:
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a56:	d101      	bne.n	8008a5c <LL_RCC_PLL_IsReady+0x18>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <LL_RCC_PLL_IsReady+0x1a>
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <LL_RCC_PLL_GetN>:
{
 8008a68:	b480      	push	{r7}
 8008a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <LL_RCC_PLL_GetP>:
{
 8008a82:	b480      	push	{r7}
 8008a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8008a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <LL_RCC_PLL_GetQ>:
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8008a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <LL_RCC_PLL_GetDivider>:
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <LL_RCC_PLLSAI1_Enable>:
{
 8008aca:	b480      	push	{r7}
 8008acc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008adc:	6013      	str	r3, [r2, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <LL_RCC_PLLSAI1_Disable>:
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008afa:	6013      	str	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <LL_RCC_PLLSAI1_IsReady>:
{
 8008b06:	b480      	push	{r7}
 8008b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b18:	d101      	bne.n	8008b1e <LL_RCC_PLLSAI1_IsReady+0x18>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <LL_RCC_PLLSAI1_GetN>:
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8008b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	0a1b      	lsrs	r3, r3, #8
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <LL_RCC_PLLSAI1_GetP>:
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8008b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <LL_RCC_PLLSAI1_GetQ>:
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8008b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <LL_RCC_PLLSAI1_GetR>:
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8008b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <LL_RCC_PLL_GetMainSource>:
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0303 	and.w	r3, r3, #3
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008bac:	2300      	movs	r3, #0
 8008bae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d034      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008bc8:	d021      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008bce:	d81b      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bd4:	d01d      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bda:	d815      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be4:	d110      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008bf6:	e00d      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fd64 	bl	80096ca <RCCEx_PLLSAI1_ConfigNP>
 8008c02:	4603      	mov	r3, r0
 8008c04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008c06:	e005      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	77fb      	strb	r3, [r7, #31]
        break;
 8008c0c:	e002      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008c0e:	bf00      	nop
 8008c10:	e000      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c14:	7ffb      	ldrb	r3, [r7, #31]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d105      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fdd5 	bl	80087ce <LL_RCC_SetSAIClockSource>
 8008c24:	e001      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c26:	7ffb      	ldrb	r3, [r7, #31]
 8008c28:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d046      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008c36:	f7ff fed6 	bl	80089e6 <LL_RCC_GetRTCClockSource>
 8008c3a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d03c      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008c46:	f7fe fa17 	bl	8007078 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d105      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff feb0 	bl	80089ba <LL_RCC_SetRTCClockSource>
 8008c5a:	e02e      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c64:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008c66:	f7ff fecb 	bl	8008a00 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008c6a:	f7ff feda 	bl	8008a22 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008c86:	f7ff fc3b 	bl	8008500 <LL_RCC_LSE_IsEnabled>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d114      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c90:	f7fa f8a0 	bl	8002dd4 <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008c96:	e00b      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c98:	f7fa f89c 	bl	8002dd4 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d902      	bls.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	77fb      	strb	r3, [r7, #31]
              break;
 8008cae:	e004      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008cb0:	f7ff fc38 	bl	8008524 <LL_RCC_LSE_IsReady>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d1ee      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008cba:	7ffb      	ldrb	r3, [r7, #31]
 8008cbc:	77bb      	strb	r3, [r7, #30]
 8008cbe:	e001      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc0:	7ffb      	ldrb	r3, [r7, #31]
 8008cc2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d004      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff fd17 	bl	8008708 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fd22 	bl	8008734 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff fd4a 	bl	800879a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fd3f 	bl	800879a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fd17 	bl	8008760 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d004      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fd0c 	bl	8008760 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d022      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fd7a 	bl	8008852 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d66:	d107      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d76:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d80:	d10b      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fcfa 	bl	8009780 <RCCEx_PLLSAI1_ConfigNQ>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8008d90:	7ffb      	ldrb	r3, [r7, #31]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8008d96:	7ffb      	ldrb	r3, [r7, #31]
 8008d98:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d02b      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dae:	d008      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008db8:	d003      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d105      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fd17 	bl	80087fa <LL_RCC_SetRNGClockSource>
 8008dcc:	e00a      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f7ff fd0e 	bl	80087fa <LL_RCC_SetRNGClockSource>
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff fd21 	bl	8008826 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008dec:	d107      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dfc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d022      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7ff fd2a 	bl	8008868 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e2c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e36:	d10b      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fcfa 	bl	8009836 <RCCEx_PLLSAI1_ConfigNR>
 8008e42:	4603      	mov	r3, r0
 8008e44:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8008e46:	7ffb      	ldrb	r3, [r7, #31]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8008e4c:	7ffb      	ldrb	r3, [r7, #31]
 8008e4e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff fbca 	bl	80085fa <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff fc26 	bl	80086c8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fc01 	bl	8008688 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8008e86:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b093      	sub	sp, #76	; 0x4c
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8008e9c:	f7ff fc28 	bl	80086f0 <LL_RCC_GetSMPSPrescaler>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	091b      	lsrs	r3, r3, #4
 8008ea4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eac:	d12d      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8008eae:	f7ff fd9a 	bl	80089e6 <LL_RCC_GetRTCClockSource>
 8008eb2:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eba:	d109      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8008ebc:	f7ff fb32 	bl	8008524 <LL_RCC_LSE_IsReady>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	f040 83d8 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8008ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ece:	e3d3      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed6:	d110      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8008ed8:	f7ff fb36 	bl	8008548 <LL_RCC_LSI1_IsReady>
 8008edc:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8008ede:	f7ff fb45 	bl	800856c <LL_RCC_LSI2_IsReady>
 8008ee2:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d003      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	f040 83c3 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8008ef2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ef8:	e3be      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f00:	f040 83ba 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 8008f04:	4bba      	ldr	r3, [pc, #744]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8008f06:	647b      	str	r3, [r7, #68]	; 0x44
 8008f08:	e3b6      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	d130      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8008f10:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8008f14:	f7ff fd05 	bl	8008922 <LL_RCC_GetSAIClockSource>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f1e:	d008      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f24:	d822      	bhi.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00c      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8008f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f2e:	d013      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8008f30:	e01c      	b.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 8008f32:	f7ff fac1 	bl	80084b8 <LL_RCC_HSI_IsReady>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	f040 837e 	bne.w	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8008f3e:	4bad      	ldr	r3, [pc, #692]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8008f40:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008f42:	e37a      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8008f44:	f7ff fddf 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	f040 8377 	bne.w	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8008f50:	f000 fdce 	bl	8009af0 <RCC_PLLSAI1_GetFreqDomain_P>
 8008f54:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008f56:	e372      	b.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8008f58:	f7ff fd74 	bl	8008a44 <LL_RCC_PLL_IsReady>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	f040 836f 	bne.w	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 8008f64:	f000 fcc2 	bl	80098ec <RCC_PLL_GetFreqDomain_P>
 8008f68:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008f6a:	e36a      	b.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f6c:	4ba2      	ldr	r3, [pc, #648]	; (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8008f6e:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8008f70:	e382      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f78:	d168      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8008f7a:	f000 fb87 	bl	800968c <HAL_RCCEx_GetRngCLKSource>
 8008f7e:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f86:	d110      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8008f88:	f7ff fade 	bl	8008548 <LL_RCC_LSI1_IsReady>
 8008f8c:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8008f8e:	f7ff faed 	bl	800856c <LL_RCC_LSI2_IsReady>
 8008f92:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d003      	beq.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f040 836b 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8008fa2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8008fa8:	e366      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fb0:	d109      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8008fb2:	f7ff fab7 	bl	8008524 <LL_RCC_LSE_IsReady>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	f040 835d 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8008fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc4:	e358      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008fcc:	d10e      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 8008fce:	f7ff fd39 	bl	8008a44 <LL_RCC_PLL_IsReady>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 834f 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 8008fda:	f000 fcdd 	bl	8009998 <RCC_PLL_GetFreqDomain_Q>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	4a86      	ldr	r2, [pc, #536]	; (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8008fea:	e345      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8008ff2:	d114      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 8008ff4:	f7ff facc 	bl	8008590 <LL_RCC_MSI_IsReady>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	f040 833c 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8009000:	f7ff fae6 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009004:	4603      	mov	r3, r0
 8009006:	091b      	lsrs	r3, r3, #4
 8009008:	f003 030f 	and.w	r3, r3, #15
 800900c:	4a7c      	ldr	r2, [pc, #496]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009012:	4a7a      	ldr	r2, [pc, #488]	; (80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8009014:	fba2 2303 	umull	r2, r3, r2, r3
 8009018:	085b      	lsrs	r3, r3, #1
 800901a:	647b      	str	r3, [r7, #68]	; 0x44
 800901c:	e32c      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8009024:	d109      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8009026:	f7ff fd6e 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 800902a:	4603      	mov	r3, r0
 800902c:	2b01      	cmp	r3, #1
 800902e:	f040 8323 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8009032:	f000 fdb3 	bl	8009b9c <RCC_PLLSAI1_GetFreqDomain_Q>
 8009036:	6478      	str	r0, [r7, #68]	; 0x44
 8009038:	e31e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 800903a:	f7ff fa4f 	bl	80084dc <LL_RCC_HSI48_IsReady>
 800903e:	4603      	mov	r3, r0
 8009040:	2b01      	cmp	r3, #1
 8009042:	f040 8319 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 8009046:	4b6b      	ldr	r3, [pc, #428]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8009048:	647b      	str	r3, [r7, #68]	; 0x44
 800904a:	e315      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009052:	d13f      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8009054:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8009058:	f7ff fc93 	bl	8008982 <LL_RCC_GetUSBClockSource>
 800905c:	4603      	mov	r3, r0
 800905e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009062:	d01d      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8009064:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009068:	d82b      	bhi.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800906a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800906e:	d003      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8009070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009074:	d00a      	beq.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009076:	e024      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8009078:	f7ff fd45 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 800907c:	4603      	mov	r3, r0
 800907e:	2b01      	cmp	r3, #1
 8009080:	f040 82e1 	bne.w	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8009084:	f000 fd8a 	bl	8009b9c <RCC_PLLSAI1_GetFreqDomain_Q>
 8009088:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800908a:	e2dc      	b.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 800908c:	f7ff fcda 	bl	8008a44 <LL_RCC_PLL_IsReady>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	f040 82d9 	bne.w	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 8009098:	f000 fc7e 	bl	8009998 <RCC_PLL_GetFreqDomain_Q>
 800909c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800909e:	e2d4      	b.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 80090a0:	f7ff fa76 	bl	8008590 <LL_RCC_MSI_IsReady>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	f040 82d1 	bne.w	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80090ac:	f7ff fa90 	bl	80085d0 <LL_RCC_MSI_GetRange>
 80090b0:	4603      	mov	r3, r0
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	4a51      	ldr	r2, [pc, #324]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80090ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090be:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80090c0:	e2c5      	b.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 80090c2:	f7ff fa0b 	bl	80084dc <LL_RCC_HSI48_IsReady>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	f040 82c2 	bne.w	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 80090ce:	4b4d      	ldr	r3, [pc, #308]	; (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80090d0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80090d2:	e2be      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d140      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80090da:	2003      	movs	r0, #3
 80090dc:	f7ff fbda 	bl	8008894 <LL_RCC_GetUSARTClockSource>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d013      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d81b      	bhi.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d002      	beq.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d004      	beq.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80090f2:	e016      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80090f4:	f7ff f83c 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 80090f8:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80090fa:	e2bd      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80090fc:	f7ff f9dc 	bl	80084b8 <LL_RCC_HSI_IsReady>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	f040 82a7 	bne.w	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 8009108:	4b3a      	ldr	r3, [pc, #232]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800910a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800910c:	e2a3      	b.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 800910e:	f7ff fa09 	bl	8008524 <LL_RCC_LSE_IsReady>
 8009112:	4603      	mov	r3, r0
 8009114:	2b01      	cmp	r3, #1
 8009116:	f040 82a0 	bne.w	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 800911a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8009120:	e29b      	b.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8009122:	f7ff f825 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 8009126:	4604      	mov	r4, r0
 8009128:	f7ff fa8a 	bl	8008640 <LL_RCC_GetAHBPrescaler>
 800912c:	4603      	mov	r3, r0
 800912e:	091b      	lsrs	r3, r3, #4
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	4a34      	ldr	r2, [pc, #208]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8009136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913a:	fbb4 f4f3 	udiv	r4, r4, r3
 800913e:	f7ff fa97 	bl	8008670 <LL_RCC_GetAPB2Prescaler>
 8009142:	4603      	mov	r3, r0
 8009144:	0adb      	lsrs	r3, r3, #11
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	4a30      	ldr	r2, [pc, #192]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800914c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009150:	f003 031f 	and.w	r3, r3, #31
 8009154:	fa24 f303 	lsr.w	r3, r4, r3
 8009158:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800915a:	e28d      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d156      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8009162:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009166:	f7ff fba5 	bl	80088b4 <LL_RCC_GetLPUARTClockSource>
 800916a:	4603      	mov	r3, r0
 800916c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009170:	d016      	beq.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8009172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009176:	d81d      	bhi.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8009178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800917c:	d003      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800917e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009182:	d004      	beq.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8009184:	e016      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8009186:	f7fe fff3 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 800918a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800918c:	e274      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800918e:	f7ff f993 	bl	80084b8 <LL_RCC_HSI_IsReady>
 8009192:	4603      	mov	r3, r0
 8009194:	2b01      	cmp	r3, #1
 8009196:	f040 8262 	bne.w	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800919c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800919e:	e25e      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80091a0:	f7ff f9c0 	bl	8008524 <LL_RCC_LSE_IsReady>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	f040 825b 	bne.w	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 80091ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091b0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80091b2:	e256      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80091b4:	f7fe ffdc 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 80091b8:	4604      	mov	r4, r0
 80091ba:	f7ff fa41 	bl	8008640 <LL_RCC_GetAHBPrescaler>
 80091be:	4603      	mov	r3, r0
 80091c0:	091b      	lsrs	r3, r3, #4
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	4a10      	ldr	r2, [pc, #64]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80091c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80091d0:	f7ff fa42 	bl	8008658 <LL_RCC_GetAPB1Prescaler>
 80091d4:	4603      	mov	r3, r0
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80091de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	fa24 f303 	lsr.w	r3, r4, r3
 80091ea:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80091ec:	e244      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80091ee:	bf00      	nop
 80091f0:	000f4240 	.word	0x000f4240
 80091f4:	00f42400 	.word	0x00f42400
 80091f8:	001fff68 	.word	0x001fff68
 80091fc:	aaaaaaab 	.word	0xaaaaaaab
 8009200:	08017878 	.word	0x08017878
 8009204:	02dc6c00 	.word	0x02dc6c00
 8009208:	08017818 	.word	0x08017818
 800920c:	08017858 	.word	0x08017858
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009216:	d12a      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8009218:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 800921c:	f7ff fbbd 	bl	800899a <LL_RCC_GetADCClockSource>
 8009220:	4603      	mov	r3, r0
 8009222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009226:	d014      	beq.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800922c:	f200 821b 	bhi.w	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8009230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009234:	d003      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8009236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923a:	d00e      	beq.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 800923c:	e213      	b.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800923e:	f7ff fc62 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 8009242:	4603      	mov	r3, r0
 8009244:	2b01      	cmp	r3, #1
 8009246:	f040 8210 	bne.w	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800924a:	f000 fbfb 	bl	8009a44 <RCC_PLLSAI1_GetFreqDomain_R>
 800924e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8009250:	e20b      	b.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 8009252:	f7fe ff8d 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 8009256:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8009258:	e20e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800925a:	f7ff fbf3 	bl	8008a44 <LL_RCC_PLL_IsReady>
 800925e:	4603      	mov	r3, r0
 8009260:	2b01      	cmp	r3, #1
 8009262:	f040 8204 	bne.w	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 8009266:	f000 fb41 	bl	80098ec <RCC_PLL_GetFreqDomain_P>
 800926a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800926c:	e1ff      	b.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b04      	cmp	r3, #4
 8009272:	d135      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8009274:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8009278:	f7ff fb2c 	bl	80088d4 <LL_RCC_GetI2CClockSource>
 800927c:	4603      	mov	r3, r0
 800927e:	4ab7      	ldr	r2, [pc, #732]	; (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8009284:	4ab6      	ldr	r2, [pc, #728]	; (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d004      	beq.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800928a:	e00c      	b.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800928c:	f7fe ff70 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 8009290:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8009292:	e1f1      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8009294:	f7ff f910 	bl	80084b8 <LL_RCC_HSI_IsReady>
 8009298:	4603      	mov	r3, r0
 800929a:	2b01      	cmp	r3, #1
 800929c:	f040 81e9 	bne.w	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 80092a0:	4bb0      	ldr	r3, [pc, #704]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80092a2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80092a4:	e1e5      	b.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80092a6:	f7fe ff63 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 80092aa:	4604      	mov	r4, r0
 80092ac:	f7ff f9c8 	bl	8008640 <LL_RCC_GetAHBPrescaler>
 80092b0:	4603      	mov	r3, r0
 80092b2:	091b      	lsrs	r3, r3, #4
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	4aab      	ldr	r2, [pc, #684]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80092ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092be:	fbb4 f4f3 	udiv	r4, r4, r3
 80092c2:	f7ff f9c9 	bl	8008658 <LL_RCC_GetAPB1Prescaler>
 80092c6:	4603      	mov	r3, r0
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	4aa7      	ldr	r2, [pc, #668]	; (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa24 f303 	lsr.w	r3, r4, r3
 80092dc:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80092de:	e1cb      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b08      	cmp	r3, #8
 80092e4:	d135      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80092e6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80092ea:	f7ff faf3 	bl	80088d4 <LL_RCC_GetI2CClockSource>
 80092ee:	4603      	mov	r3, r0
 80092f0:	4a9f      	ldr	r2, [pc, #636]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d003      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80092f6:	4a9f      	ldr	r2, [pc, #636]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d004      	beq.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80092fc:	e00c      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80092fe:	f7fe ff37 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 8009302:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8009304:	e1b8      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8009306:	f7ff f8d7 	bl	80084b8 <LL_RCC_HSI_IsReady>
 800930a:	4603      	mov	r3, r0
 800930c:	2b01      	cmp	r3, #1
 800930e:	f040 81b2 	bne.w	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 8009312:	4b94      	ldr	r3, [pc, #592]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8009314:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8009316:	e1ae      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8009318:	f7fe ff2a 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 800931c:	4604      	mov	r4, r0
 800931e:	f7ff f98f 	bl	8008640 <LL_RCC_GetAHBPrescaler>
 8009322:	4603      	mov	r3, r0
 8009324:	091b      	lsrs	r3, r3, #4
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	4a8f      	ldr	r2, [pc, #572]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800932c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009330:	fbb4 f4f3 	udiv	r4, r4, r3
 8009334:	f7ff f990 	bl	8008658 <LL_RCC_GetAPB1Prescaler>
 8009338:	4603      	mov	r3, r0
 800933a:	0a1b      	lsrs	r3, r3, #8
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	4a8a      	ldr	r2, [pc, #552]	; (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8009342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009346:	f003 031f 	and.w	r3, r3, #31
 800934a:	fa24 f303 	lsr.w	r3, r4, r3
 800934e:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8009350:	e192      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b10      	cmp	r3, #16
 8009356:	d151      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8009358:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800935c:	f7ff face 	bl	80088fc <LL_RCC_GetLPTIMClockSource>
 8009360:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	4a84      	ldr	r2, [pc, #528]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d110      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800936a:	f7ff f8ed 	bl	8008548 <LL_RCC_LSI1_IsReady>
 800936e:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8009370:	f7ff f8fc 	bl	800856c <LL_RCC_LSI2_IsReady>
 8009374:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	2b01      	cmp	r3, #1
 800937a:	d003      	beq.n	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	2b01      	cmp	r3, #1
 8009380:	f040 817a 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8009384:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009388:	647b      	str	r3, [r7, #68]	; 0x44
 800938a:	e175      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	4a7b      	ldr	r2, [pc, #492]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d108      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8009394:	f7ff f890 	bl	80084b8 <LL_RCC_HSI_IsReady>
 8009398:	4603      	mov	r3, r0
 800939a:	2b01      	cmp	r3, #1
 800939c:	f040 816c 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 80093a0:	4b70      	ldr	r3, [pc, #448]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80093a2:	647b      	str	r3, [r7, #68]	; 0x44
 80093a4:	e168      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 80093a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a8:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80093ac:	d109      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80093ae:	f7ff f8b9 	bl	8008524 <LL_RCC_LSE_IsReady>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	f040 815f 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80093ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093be:	647b      	str	r3, [r7, #68]	; 0x44
 80093c0:	e15a      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80093c2:	f7fe fed5 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 80093c6:	4604      	mov	r4, r0
 80093c8:	f7ff f93a 	bl	8008640 <LL_RCC_GetAHBPrescaler>
 80093cc:	4603      	mov	r3, r0
 80093ce:	091b      	lsrs	r3, r3, #4
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	4a64      	ldr	r2, [pc, #400]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80093d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093da:	fbb4 f4f3 	udiv	r4, r4, r3
 80093de:	f7ff f93b 	bl	8008658 <LL_RCC_GetAPB1Prescaler>
 80093e2:	4603      	mov	r3, r0
 80093e4:	0a1b      	lsrs	r3, r3, #8
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	4a60      	ldr	r2, [pc, #384]	; (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80093ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f0:	f003 031f 	and.w	r3, r3, #31
 80093f4:	fa24 f303 	lsr.w	r3, r4, r3
 80093f8:	647b      	str	r3, [r7, #68]	; 0x44
 80093fa:	e13d      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b20      	cmp	r3, #32
 8009400:	d151      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8009402:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8009406:	f7ff fa79 	bl	80088fc <LL_RCC_GetLPTIMClockSource>
 800940a:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	4a5c      	ldr	r2, [pc, #368]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d110      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8009414:	f7ff f898 	bl	8008548 <LL_RCC_LSI1_IsReady>
 8009418:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800941a:	f7ff f8a7 	bl	800856c <LL_RCC_LSI2_IsReady>
 800941e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	2b01      	cmp	r3, #1
 8009424:	d003      	beq.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	2b01      	cmp	r3, #1
 800942a:	f040 8125 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800942e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009432:	647b      	str	r3, [r7, #68]	; 0x44
 8009434:	e120      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8009436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009438:	4a52      	ldr	r2, [pc, #328]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d108      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800943e:	f7ff f83b 	bl	80084b8 <LL_RCC_HSI_IsReady>
 8009442:	4603      	mov	r3, r0
 8009444:	2b01      	cmp	r3, #1
 8009446:	f040 8117 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 800944a:	4b46      	ldr	r3, [pc, #280]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800944c:	647b      	str	r3, [r7, #68]	; 0x44
 800944e:	e113      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8009450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009452:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8009456:	d109      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8009458:	f7ff f864 	bl	8008524 <LL_RCC_LSE_IsReady>
 800945c:	4603      	mov	r3, r0
 800945e:	2b01      	cmp	r3, #1
 8009460:	f040 810a 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8009464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009468:	647b      	str	r3, [r7, #68]	; 0x44
 800946a:	e105      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 800946c:	f7fe fe80 	bl	8008170 <HAL_RCC_GetSysClockFreq>
 8009470:	4604      	mov	r4, r0
 8009472:	f7ff f8e5 	bl	8008640 <LL_RCC_GetAHBPrescaler>
 8009476:	4603      	mov	r3, r0
 8009478:	091b      	lsrs	r3, r3, #4
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	4a3a      	ldr	r2, [pc, #232]	; (8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8009480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009484:	fbb4 f4f3 	udiv	r4, r4, r3
 8009488:	f7ff f8e6 	bl	8008658 <LL_RCC_GetAPB1Prescaler>
 800948c:	4603      	mov	r3, r0
 800948e:	0a1b      	lsrs	r3, r3, #8
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	4a35      	ldr	r2, [pc, #212]	; (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8009496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800949a:	f003 031f 	and.w	r3, r3, #31
 800949e:	fa24 f303 	lsr.w	r3, r4, r3
 80094a2:	647b      	str	r3, [r7, #68]	; 0x44
 80094a4:	e0e8      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ac:	d119      	bne.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 80094ae:	f7ff f8ba 	bl	8008626 <LL_RCC_GetRFWKPClockSource>
 80094b2:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ba:	d109      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80094bc:	f7ff f832 	bl	8008524 <LL_RCC_LSE_IsReady>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	f040 80d8 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80094c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094cc:	647b      	str	r3, [r7, #68]	; 0x44
 80094ce:	e0d3      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80094d6:	f040 80cf 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 80094da:	f647 2312 	movw	r3, #31250	; 0x7a12
 80094de:	647b      	str	r3, [r7, #68]	; 0x44
 80094e0:	e0ca      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094e8:	f040 80c6 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 80094ec:	f7ff f8e0 	bl	80086b0 <LL_RCC_GetSMPSClockSource>
 80094f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d115      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80094f8:	f7fe ffde 	bl	80084b8 <LL_RCC_HSI_IsReady>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	f040 80ba 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8009504:	4920      	ldr	r1, [pc, #128]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8009506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009508:	4613      	mov	r3, r2
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	4413      	add	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	440b      	add	r3, r1
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a13      	ldr	r2, [pc, #76]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8009516:	fbb2 f3f3 	udiv	r3, r2, r3
 800951a:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800951c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	647b      	str	r3, [r7, #68]	; 0x44
 8009522:	e0a9      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800952a:	d131      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 800952c:	f7fe ffb2 	bl	8008494 <LL_RCC_HSE_IsReady>
 8009530:	4603      	mov	r3, r0
 8009532:	2b01      	cmp	r3, #1
 8009534:	f040 80a0 	bne.w	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8009538:	4913      	ldr	r1, [pc, #76]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800953a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800953c:	4613      	mov	r3, r2
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	4413      	add	r3, r2
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	440b      	add	r3, r1
 8009546:	3314      	adds	r3, #20
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a10      	ldr	r2, [pc, #64]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800954c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009550:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8009552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	647b      	str	r3, [r7, #68]	; 0x44
 8009558:	e08e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800955a:	bf00      	nop
 800955c:	00030100 	.word	0x00030100
 8009560:	00030200 	.word	0x00030200
 8009564:	00f42400 	.word	0x00f42400
 8009568:	08017818 	.word	0x08017818
 800956c:	08017858 	.word	0x08017858
 8009570:	00301000 	.word	0x00301000
 8009574:	00302000 	.word	0x00302000
 8009578:	000c0004 	.word	0x000c0004
 800957c:	000c0008 	.word	0x000c0008
 8009580:	00300010 	.word	0x00300010
 8009584:	00300020 	.word	0x00300020
 8009588:	080178b8 	.word	0x080178b8
 800958c:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8009590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009596:	d16f      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8009598:	f7ff f81a 	bl	80085d0 <LL_RCC_MSI_GetRange>
 800959c:	4603      	mov	r3, r0
 800959e:	2bb0      	cmp	r3, #176	; 0xb0
 80095a0:	d037      	beq.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80095a2:	2bb0      	cmp	r3, #176	; 0xb0
 80095a4:	d844      	bhi.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80095a6:	2ba0      	cmp	r3, #160	; 0xa0
 80095a8:	d024      	beq.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 80095aa:	2ba0      	cmp	r3, #160	; 0xa0
 80095ac:	d840      	bhi.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80095ae:	2b80      	cmp	r3, #128	; 0x80
 80095b0:	d002      	beq.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80095b2:	2b90      	cmp	r3, #144	; 0x90
 80095b4:	d00f      	beq.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 80095b6:	e03b      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 80095b8:	4b32      	ldr	r3, [pc, #200]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80095ba:	6a19      	ldr	r1, [r3, #32]
 80095bc:	4832      	ldr	r0, [pc, #200]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80095be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095c0:	4613      	mov	r3, r2
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	4413      	add	r3, r2
 80095c6:	00db      	lsls	r3, r3, #3
 80095c8:	4403      	add	r3, r0
 80095ca:	3310      	adds	r3, #16
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80095d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80095d4:	e02d      	b.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 80095d6:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80095d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80095da:	482b      	ldr	r0, [pc, #172]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80095dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095de:	4613      	mov	r3, r2
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	4413      	add	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	4403      	add	r3, r0
 80095e8:	330c      	adds	r3, #12
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80095f0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80095f2:	e01e      	b.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80095f4:	4b23      	ldr	r3, [pc, #140]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80095f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80095f8:	4823      	ldr	r0, [pc, #140]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80095fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095fc:	4613      	mov	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	4413      	add	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4403      	add	r3, r0
 8009606:	3308      	adds	r3, #8
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	fbb1 f3f3 	udiv	r3, r1, r3
 800960e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8009610:	e00f      	b.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8009614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009616:	481c      	ldr	r0, [pc, #112]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8009618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800961a:	4613      	mov	r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4413      	add	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4403      	add	r3, r0
 8009624:	3304      	adds	r3, #4
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	fbb1 f3f3 	udiv	r3, r1, r3
 800962c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800962e:	e000      	b.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8009630:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8009632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	647b      	str	r3, [r7, #68]	; 0x44
 8009638:	e01e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800963a:	bf00      	nop
 800963c:	e01c      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800963e:	bf00      	nop
 8009640:	e01a      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009642:	bf00      	nop
 8009644:	e018      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009646:	bf00      	nop
 8009648:	e016      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800964a:	bf00      	nop
 800964c:	e014      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800964e:	bf00      	nop
 8009650:	e012      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009652:	bf00      	nop
 8009654:	e010      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009656:	bf00      	nop
 8009658:	e00e      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800965a:	bf00      	nop
 800965c:	e00c      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800965e:	bf00      	nop
 8009660:	e00a      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009662:	bf00      	nop
 8009664:	e008      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009666:	bf00      	nop
 8009668:	e006      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800966a:	bf00      	nop
 800966c:	e004      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800966e:	bf00      	nop
 8009670:	e002      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009672:	bf00      	nop
 8009674:	e000      	b.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8009676:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 8009678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800967a:	4618      	mov	r0, r3
 800967c:	374c      	adds	r7, #76	; 0x4c
 800967e:	46bd      	mov	sp, r7
 8009680:	bd90      	pop	{r4, r7, pc}
 8009682:	bf00      	nop
 8009684:	08017878 	.word	0x08017878
 8009688:	080178b8 	.word	0x080178b8

0800968c <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8009692:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8009696:	f7ff f954 	bl	8008942 <LL_RCC_GetRNGClockSource>
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d108      	bne.n	80096b4 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 80096a2:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 80096a6:	f7ff f95c 	bl	8008962 <LL_RCC_GetCLK48ClockSource>
 80096aa:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b2:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 80096b4:	687b      	ldr	r3, [r7, #4]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80096c2:	f7fe ff76 	bl	80085b2 <LL_RCC_MSI_EnablePLLMode>
}
 80096c6:	bf00      	nop
 80096c8:	bd80      	pop	{r7, pc}

080096ca <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80096d6:	f7ff fa07 	bl	8008ae8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80096da:	f7f9 fb7b 	bl	8002dd4 <HAL_GetTick>
 80096de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80096e0:	e009      	b.n	80096f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80096e2:	f7f9 fb77 	bl	8002dd4 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d902      	bls.n	80096f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	73fb      	strb	r3, [r7, #15]
      break;
 80096f4:	e004      	b.n	8009700 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80096f6:	f7ff fa06 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1f0      	bne.n	80096e2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d137      	bne.n	8009776 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800971a:	4313      	orrs	r3, r2
 800971c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800971e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009730:	4313      	orrs	r3, r2
 8009732:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009734:	f7ff f9c9 	bl	8008aca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009738:	f7f9 fb4c 	bl	8002dd4 <HAL_GetTick>
 800973c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800973e:	e009      	b.n	8009754 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009740:	f7f9 fb48 	bl	8002dd4 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d902      	bls.n	8009754 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	73fb      	strb	r3, [r7, #15]
        break;
 8009752:	e004      	b.n	800975e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009754:	f7ff f9d7 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 8009758:	4603      	mov	r3, r0
 800975a:	2b01      	cmp	r3, #1
 800975c:	d1f0      	bne.n	8009740 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d108      	bne.n	8009776 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009772:	4313      	orrs	r3, r2
 8009774:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800978c:	f7ff f9ac 	bl	8008ae8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009790:	f7f9 fb20 	bl	8002dd4 <HAL_GetTick>
 8009794:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009796:	e009      	b.n	80097ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009798:	f7f9 fb1c 	bl	8002dd4 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d902      	bls.n	80097ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	73fb      	strb	r3, [r7, #15]
      break;
 80097aa:	e004      	b.n	80097b6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80097ac:	f7ff f9ab 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f0      	bne.n	8009798 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d137      	bne.n	800982c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80097bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097d0:	4313      	orrs	r3, r2
 80097d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80097d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097e6:	4313      	orrs	r3, r2
 80097e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80097ea:	f7ff f96e 	bl	8008aca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ee:	f7f9 faf1 	bl	8002dd4 <HAL_GetTick>
 80097f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80097f4:	e009      	b.n	800980a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097f6:	f7f9 faed 	bl	8002dd4 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d902      	bls.n	800980a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	73fb      	strb	r3, [r7, #15]
        break;
 8009808:	e004      	b.n	8009814 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800980a:	f7ff f97c 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 800980e:	4603      	mov	r3, r0
 8009810:	2b01      	cmp	r3, #1
 8009812:	d1f0      	bne.n	80097f6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d108      	bne.n	800982c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800981a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800981e:	691a      	ldr	r2, [r3, #16]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009828:	4313      	orrs	r3, r2
 800982a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009842:	f7ff f951 	bl	8008ae8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009846:	f7f9 fac5 	bl	8002dd4 <HAL_GetTick>
 800984a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800984c:	e009      	b.n	8009862 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800984e:	f7f9 fac1 	bl	8002dd4 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d902      	bls.n	8009862 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	73fb      	strb	r3, [r7, #15]
      break;
 8009860:	e004      	b.n	800986c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009862:	f7ff f950 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1f0      	bne.n	800984e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d137      	bne.n	80098e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	021b      	lsls	r3, r3, #8
 8009882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009886:	4313      	orrs	r3, r2
 8009888:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800988a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800989c:	4313      	orrs	r3, r2
 800989e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80098a0:	f7ff f913 	bl	8008aca <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a4:	f7f9 fa96 	bl	8002dd4 <HAL_GetTick>
 80098a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80098aa:	e009      	b.n	80098c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098ac:	f7f9 fa92 	bl	8002dd4 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d902      	bls.n	80098c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	73fb      	strb	r3, [r7, #15]
        break;
 80098be:	e004      	b.n	80098ca <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80098c0:	f7ff f921 	bl	8008b06 <LL_RCC_PLLSAI1_IsReady>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d1f0      	bne.n	80098ac <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d108      	bne.n	80098e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80098d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098d4:	691a      	ldr	r2, [r3, #16]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098de:	4313      	orrs	r3, r2
 80098e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80098f2:	f7ff f94b 	bl	8008b8c <LL_RCC_PLL_GetMainSource>
 80098f6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d017      	beq.n	800992e <RCC_PLL_GetFreqDomain_P+0x42>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b03      	cmp	r3, #3
 8009902:	d81f      	bhi.n	8009944 <RCC_PLL_GetFreqDomain_P+0x58>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d003      	beq.n	8009912 <RCC_PLL_GetFreqDomain_P+0x26>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b02      	cmp	r3, #2
 800990e:	d00b      	beq.n	8009928 <RCC_PLL_GetFreqDomain_P+0x3c>
 8009910:	e018      	b.n	8009944 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009912:	f7fe fe5d 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009916:	4603      	mov	r3, r0
 8009918:	091b      	lsrs	r3, r3, #4
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	4a1b      	ldr	r2, [pc, #108]	; (800998c <RCC_PLL_GetFreqDomain_P+0xa0>)
 8009920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009924:	607b      	str	r3, [r7, #4]
      break;
 8009926:	e018      	b.n	800995a <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009928:	4b19      	ldr	r3, [pc, #100]	; (8009990 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800992a:	607b      	str	r3, [r7, #4]
      break;
 800992c:	e015      	b.n	800995a <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800992e:	f7fe fd9f 	bl	8008470 <LL_RCC_HSE_IsEnabledDiv2>
 8009932:	4603      	mov	r3, r0
 8009934:	2b01      	cmp	r3, #1
 8009936:	d102      	bne.n	800993e <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8009938:	4b15      	ldr	r3, [pc, #84]	; (8009990 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800993a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800993c:	e00d      	b.n	800995a <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 800993e:	4b15      	ldr	r3, [pc, #84]	; (8009994 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8009940:	607b      	str	r3, [r7, #4]
      break;
 8009942:	e00a      	b.n	800995a <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009944:	f7fe fe44 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009948:	4603      	mov	r3, r0
 800994a:	091b      	lsrs	r3, r3, #4
 800994c:	f003 030f 	and.w	r3, r3, #15
 8009950:	4a0e      	ldr	r2, [pc, #56]	; (800998c <RCC_PLL_GetFreqDomain_P+0xa0>)
 8009952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009956:	607b      	str	r3, [r7, #4]
      break;
 8009958:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800995a:	f7ff f885 	bl	8008a68 <LL_RCC_PLL_GetN>
 800995e:	4602      	mov	r2, r0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	fb03 f402 	mul.w	r4, r3, r2
 8009966:	f7ff f8a4 	bl	8008ab2 <LL_RCC_PLL_GetDivider>
 800996a:	4603      	mov	r3, r0
 800996c:	091b      	lsrs	r3, r3, #4
 800996e:	3301      	adds	r3, #1
 8009970:	fbb4 f4f3 	udiv	r4, r4, r3
 8009974:	f7ff f885 	bl	8008a82 <LL_RCC_PLL_GetP>
 8009978:	4603      	mov	r3, r0
 800997a:	0c5b      	lsrs	r3, r3, #17
 800997c:	3301      	adds	r3, #1
 800997e:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	bd90      	pop	{r4, r7, pc}
 800998a:	bf00      	nop
 800998c:	08017878 	.word	0x08017878
 8009990:	00f42400 	.word	0x00f42400
 8009994:	01e84800 	.word	0x01e84800

08009998 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8009998:	b590      	push	{r4, r7, lr}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800999e:	f7ff f8f5 	bl	8008b8c <LL_RCC_PLL_GetMainSource>
 80099a2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d017      	beq.n	80099da <RCC_PLL_GetFreqDomain_Q+0x42>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d81f      	bhi.n	80099f0 <RCC_PLL_GetFreqDomain_Q+0x58>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d003      	beq.n	80099be <RCC_PLL_GetFreqDomain_Q+0x26>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d00b      	beq.n	80099d4 <RCC_PLL_GetFreqDomain_Q+0x3c>
 80099bc:	e018      	b.n	80099f0 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80099be:	f7fe fe07 	bl	80085d0 <LL_RCC_MSI_GetRange>
 80099c2:	4603      	mov	r3, r0
 80099c4:	091b      	lsrs	r3, r3, #4
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	4a1b      	ldr	r2, [pc, #108]	; (8009a38 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80099cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d0:	607b      	str	r3, [r7, #4]
      break;
 80099d2:	e018      	b.n	8009a06 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80099d4:	4b19      	ldr	r3, [pc, #100]	; (8009a3c <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80099d6:	607b      	str	r3, [r7, #4]
      break;
 80099d8:	e015      	b.n	8009a06 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80099da:	f7fe fd49 	bl	8008470 <LL_RCC_HSE_IsEnabledDiv2>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d102      	bne.n	80099ea <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80099e6:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 80099e8:	e00d      	b.n	8009a06 <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 80099ec:	607b      	str	r3, [r7, #4]
      break;
 80099ee:	e00a      	b.n	8009a06 <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80099f0:	f7fe fdee 	bl	80085d0 <LL_RCC_MSI_GetRange>
 80099f4:	4603      	mov	r3, r0
 80099f6:	091b      	lsrs	r3, r3, #4
 80099f8:	f003 030f 	and.w	r3, r3, #15
 80099fc:	4a0e      	ldr	r2, [pc, #56]	; (8009a38 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80099fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a02:	607b      	str	r3, [r7, #4]
      break;
 8009a04:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009a06:	f7ff f82f 	bl	8008a68 <LL_RCC_PLL_GetN>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	fb03 f402 	mul.w	r4, r3, r2
 8009a12:	f7ff f84e 	bl	8008ab2 <LL_RCC_PLL_GetDivider>
 8009a16:	4603      	mov	r3, r0
 8009a18:	091b      	lsrs	r3, r3, #4
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	fbb4 f4f3 	udiv	r4, r4, r3
 8009a20:	f7ff f83b 	bl	8008a9a <LL_RCC_PLL_GetQ>
 8009a24:	4603      	mov	r3, r0
 8009a26:	0e5b      	lsrs	r3, r3, #25
 8009a28:	3301      	adds	r3, #1
 8009a2a:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd90      	pop	{r4, r7, pc}
 8009a36:	bf00      	nop
 8009a38:	08017878 	.word	0x08017878
 8009a3c:	00f42400 	.word	0x00f42400
 8009a40:	01e84800 	.word	0x01e84800

08009a44 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009a4a:	f7ff f89f 	bl	8008b8c <LL_RCC_PLL_GetMainSource>
 8009a4e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d017      	beq.n	8009a86 <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d81f      	bhi.n	8009a9c <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d003      	beq.n	8009a6a <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d00b      	beq.n	8009a80 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8009a68:	e018      	b.n	8009a9c <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009a6a:	f7fe fdb1 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	091b      	lsrs	r3, r3, #4
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	4a1b      	ldr	r2, [pc, #108]	; (8009ae4 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8009a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a7c:	607b      	str	r3, [r7, #4]
      break;
 8009a7e:	e018      	b.n	8009ab2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8009a80:	4b19      	ldr	r3, [pc, #100]	; (8009ae8 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8009a82:	607b      	str	r3, [r7, #4]
      break;
 8009a84:	e015      	b.n	8009ab2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009a86:	f7fe fcf3 	bl	8008470 <LL_RCC_HSE_IsEnabledDiv2>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d102      	bne.n	8009a96 <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8009a90:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8009a92:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8009a94:	e00d      	b.n	8009ab2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8009a96:	4b15      	ldr	r3, [pc, #84]	; (8009aec <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8009a98:	607b      	str	r3, [r7, #4]
      break;
 8009a9a:	e00a      	b.n	8009ab2 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009a9c:	f7fe fd98 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	091b      	lsrs	r3, r3, #4
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	4a0e      	ldr	r2, [pc, #56]	; (8009ae4 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8009aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aae:	607b      	str	r3, [r7, #4]
      break;
 8009ab0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009ab2:	f7ff f83a 	bl	8008b2a <LL_RCC_PLLSAI1_GetN>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	fb03 f402 	mul.w	r4, r3, r2
 8009abe:	f7fe fff8 	bl	8008ab2 <LL_RCC_PLL_GetDivider>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	091b      	lsrs	r3, r3, #4
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	fbb4 f4f3 	udiv	r4, r4, r3
 8009acc:	f7ff f852 	bl	8008b74 <LL_RCC_PLLSAI1_GetR>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	0f5b      	lsrs	r3, r3, #29
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	08017878 	.word	0x08017878
 8009ae8:	00f42400 	.word	0x00f42400
 8009aec:	01e84800 	.word	0x01e84800

08009af0 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009af6:	f7ff f849 	bl	8008b8c <LL_RCC_PLL_GetMainSource>
 8009afa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d017      	beq.n	8009b32 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d81f      	bhi.n	8009b48 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d003      	beq.n	8009b16 <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d00b      	beq.n	8009b2c <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8009b14:	e018      	b.n	8009b48 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009b16:	f7fe fd5b 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	091b      	lsrs	r3, r3, #4
 8009b1e:	f003 030f 	and.w	r3, r3, #15
 8009b22:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8009b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b28:	607b      	str	r3, [r7, #4]
      break;
 8009b2a:	e018      	b.n	8009b5e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8009b2c:	4b19      	ldr	r3, [pc, #100]	; (8009b94 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8009b2e:	607b      	str	r3, [r7, #4]
      break;
 8009b30:	e015      	b.n	8009b5e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009b32:	f7fe fc9d 	bl	8008470 <LL_RCC_HSE_IsEnabledDiv2>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d102      	bne.n	8009b42 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8009b3c:	4b15      	ldr	r3, [pc, #84]	; (8009b94 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8009b3e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8009b40:	e00d      	b.n	8009b5e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8009b42:	4b15      	ldr	r3, [pc, #84]	; (8009b98 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8009b44:	607b      	str	r3, [r7, #4]
      break;
 8009b46:	e00a      	b.n	8009b5e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009b48:	f7fe fd42 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	f003 030f 	and.w	r3, r3, #15
 8009b54:	4a0e      	ldr	r2, [pc, #56]	; (8009b90 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8009b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5a:	607b      	str	r3, [r7, #4]
      break;
 8009b5c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009b5e:	f7fe ffe4 	bl	8008b2a <LL_RCC_PLLSAI1_GetN>
 8009b62:	4602      	mov	r2, r0
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	fb03 f402 	mul.w	r4, r3, r2
 8009b6a:	f7fe ffa2 	bl	8008ab2 <LL_RCC_PLL_GetDivider>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	091b      	lsrs	r3, r3, #4
 8009b72:	3301      	adds	r3, #1
 8009b74:	fbb4 f4f3 	udiv	r4, r4, r3
 8009b78:	f7fe ffe4 	bl	8008b44 <LL_RCC_PLLSAI1_GetP>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	0c5b      	lsrs	r3, r3, #17
 8009b80:	3301      	adds	r3, #1
 8009b82:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd90      	pop	{r4, r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	08017878 	.word	0x08017878
 8009b94:	00f42400 	.word	0x00f42400
 8009b98:	01e84800 	.word	0x01e84800

08009b9c <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009ba2:	f7fe fff3 	bl	8008b8c <LL_RCC_PLL_GetMainSource>
 8009ba6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d017      	beq.n	8009bde <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d81f      	bhi.n	8009bf4 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d003      	beq.n	8009bc2 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d00b      	beq.n	8009bd8 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8009bc0:	e018      	b.n	8009bf4 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009bc2:	f7fe fd05 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	091b      	lsrs	r3, r3, #4
 8009bca:	f003 030f 	and.w	r3, r3, #15
 8009bce:	4a1b      	ldr	r2, [pc, #108]	; (8009c3c <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8009bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bd4:	607b      	str	r3, [r7, #4]
      break;
 8009bd6:	e018      	b.n	8009c0a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8009bd8:	4b19      	ldr	r3, [pc, #100]	; (8009c40 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8009bda:	607b      	str	r3, [r7, #4]
      break;
 8009bdc:	e015      	b.n	8009c0a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009bde:	f7fe fc47 	bl	8008470 <LL_RCC_HSE_IsEnabledDiv2>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d102      	bne.n	8009bee <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8009be8:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8009bea:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8009bec:	e00d      	b.n	8009c0a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8009bee:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8009bf0:	607b      	str	r3, [r7, #4]
      break;
 8009bf2:	e00a      	b.n	8009c0a <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009bf4:	f7fe fcec 	bl	80085d0 <LL_RCC_MSI_GetRange>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	091b      	lsrs	r3, r3, #4
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	4a0e      	ldr	r2, [pc, #56]	; (8009c3c <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8009c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c06:	607b      	str	r3, [r7, #4]
      break;
 8009c08:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009c0a:	f7fe ff8e 	bl	8008b2a <LL_RCC_PLLSAI1_GetN>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	fb03 f402 	mul.w	r4, r3, r2
 8009c16:	f7fe ff4c 	bl	8008ab2 <LL_RCC_PLL_GetDivider>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	091b      	lsrs	r3, r3, #4
 8009c1e:	3301      	adds	r3, #1
 8009c20:	fbb4 f4f3 	udiv	r4, r4, r3
 8009c24:	f7fe ff9a 	bl	8008b5c <LL_RCC_PLLSAI1_GetQ>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	0e5b      	lsrs	r3, r3, #25
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd90      	pop	{r4, r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08017878 	.word	0x08017878
 8009c40:	00f42400 	.word	0x00f42400
 8009c44:	01e84800 	.word	0x01e84800

08009c48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e090      	b.n	8009d7c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f8 f944 	bl	8001efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	22ca      	movs	r2, #202	; 0xca
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2253      	movs	r2, #83	; 0x53
 8009c8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f89f 	bl	8009dd0 <RTC_EnterInitMode>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d009      	beq.n	8009cac <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	22ff      	movs	r2, #255	; 0xff
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e067      	b.n	8009d7c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6812      	ldr	r2, [r2, #0]
 8009cb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cbe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6899      	ldr	r1, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	68d2      	ldr	r2, [r2, #12]
 8009ce6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6919      	ldr	r1, [r3, #16]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	041a      	lsls	r2, r3, #16
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d0a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 0203 	bic.w	r2, r2, #3
 8009d1a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69da      	ldr	r2, [r3, #28]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f003 0320 	and.w	r3, r3, #32
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d113      	bne.n	8009d6a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f81e 	bl	8009d84 <HAL_RTC_WaitForSynchro>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00d      	beq.n	8009d6a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	22ff      	movs	r2, #255	; 0xff
 8009d54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e008      	b.n	8009d7c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	22ff      	movs	r2, #255	; 0xff
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
  }
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009d9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009d9c:	f7f9 f81a 	bl	8002dd4 <HAL_GetTick>
 8009da0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009da2:	e009      	b.n	8009db8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009da4:	f7f9 f816 	bl	8002dd4 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db2:	d901      	bls.n	8009db8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e007      	b.n	8009dc8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0ee      	beq.n	8009da4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d119      	bne.n	8009e1a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009df0:	f7f8 fff0 	bl	8002dd4 <HAL_GetTick>
 8009df4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009df6:	e009      	b.n	8009e0c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009df8:	f7f8 ffec 	bl	8002dd4 <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e06:	d901      	bls.n	8009e0c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e007      	b.n	8009e1c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0ee      	beq.n	8009df8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d904      	bls.n	8009e42 <HAL_SAI_InitProtocol+0x1e>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	3b03      	subs	r3, #3
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d812      	bhi.n	8009e66 <HAL_SAI_InitProtocol+0x42>
 8009e40:	e008      	b.n	8009e54 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	68b9      	ldr	r1, [r7, #8]
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f9af 	bl	800a1ac <SAI_InitI2S>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]
      break;
 8009e52:	e00b      	b.n	8009e6c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fa58 	bl	800a310 <SAI_InitPCM>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
      break;
 8009e64:	e002      	b.n	8009e6c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6a:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d104      	bne.n	8009e7c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f000 f808 	bl	8009e88 <HAL_SAI_Init>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e17c      	b.n	800a194 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d10e      	bne.n	8009ec2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a5c      	ldr	r2, [pc, #368]	; (800a01c <HAL_SAI_Init+0x194>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d107      	bne.n	8009ebe <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d103      	bne.n	8009ebe <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e168      	b.n	800a194 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f8 f890 	bl	8001ffc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fa99 	bl	800a414 <SAI_Disable>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e153      	b.n	800a194 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_SAI_Init+0x7a>
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d003      	beq.n	8009f08 <HAL_SAI_Init+0x80>
 8009f00:	e006      	b.n	8009f10 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	61bb      	str	r3, [r7, #24]
      break;
 8009f06:	e006      	b.n	8009f16 <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0c:	61bb      	str	r3, [r7, #24]
      break;
 8009f0e:	e002      	b.n	8009f16 <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	61bb      	str	r3, [r7, #24]
      break;
 8009f14:	bf00      	nop
  }

  SAI1->GCR = 0;
 8009f16:	4b42      	ldr	r3, [pc, #264]	; (800a020 <HAL_SAI_Init+0x198>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a1b      	ldr	r3, [r3, #32]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d062      	beq.n	8009fea <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009f24:	2040      	movs	r0, #64	; 0x40
 8009f26:	f7fe ffb3 	bl	8008e90 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f2a:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f34:	d120      	bne.n	8009f78 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d102      	bne.n	8009f44 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009f3e:	2340      	movs	r3, #64	; 0x40
 8009f40:	613b      	str	r3, [r7, #16]
 8009f42:	e00a      	b.n	8009f5a <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d103      	bne.n	8009f54 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f50:	613b      	str	r3, [r7, #16]
 8009f52:	e002      	b.n	8009f5a <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f58:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	4619      	mov	r1, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	fb02 f303 	mul.w	r3, r2, r3
 8009f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	e017      	b.n	8009fa8 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f80:	d101      	bne.n	8009f86 <HAL_SAI_Init+0xfe>
 8009f82:	2302      	movs	r3, #2
 8009f84:	e000      	b.n	8009f88 <HAL_SAI_Init+0x100>
 8009f86:	2301      	movs	r3, #1
 8009f88:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	4619      	mov	r1, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	021b      	lsls	r3, r3, #8
 8009fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fa6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	4a1e      	ldr	r2, [pc, #120]	; (800a024 <HAL_SAI_Init+0x19c>)
 8009fac:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb0:	08da      	lsrs	r2, r3, #3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009fb6:	6979      	ldr	r1, [r7, #20]
 8009fb8:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <HAL_SAI_Init+0x19c>)
 8009fba:	fba3 2301 	umull	r2, r3, r3, r1
 8009fbe:	08da      	lsrs	r2, r3, #3
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	1aca      	subs	r2, r1, r3
 8009fca:	2a08      	cmp	r2, #8
 8009fcc:	d904      	bls.n	8009fd8 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	d104      	bne.n	8009fea <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	085a      	lsrs	r2, r3, #1
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_SAI_Init+0x172>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d109      	bne.n	800a00e <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_SAI_Init+0x17e>
 800a002:	2300      	movs	r3, #0
 800a004:	e001      	b.n	800a00a <HAL_SAI_Init+0x182>
 800a006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e00e      	b.n	800a02c <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	2b01      	cmp	r3, #1
 800a014:	d108      	bne.n	800a028 <HAL_SAI_Init+0x1a0>
 800a016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a01a:	e006      	b.n	800a02a <HAL_SAI_Init+0x1a2>
 800a01c:	40015404 	.word	0x40015404
 800a020:	40015400 	.word	0x40015400
 800a024:	cccccccd 	.word	0xcccccccd
 800a028:	2300      	movs	r3, #0
 800a02a:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6819      	ldr	r1, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	4b59      	ldr	r3, [pc, #356]	; (800a19c <HAL_SAI_Init+0x314>)
 800a038:	400b      	ands	r3, r1
 800a03a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6819      	ldr	r1, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a050:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a056:	431a      	orrs	r2, r3
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a064:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a070:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	051b      	lsls	r3, r3, #20
 800a078:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a07e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a09c:	f023 030f 	bic.w	r3, r3, #15
 800a0a0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6859      	ldr	r1, [r3, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	69da      	ldr	r2, [r3, #28]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6899      	ldr	r1, [r3, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b35      	ldr	r3, [pc, #212]	; (800a1a0 <HAL_SAI_Init+0x318>)
 800a0cc:	400b      	ands	r3, r1
 800a0ce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6899      	ldr	r1, [r3, #8]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0da:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a0e0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a0e6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a0ec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a0f6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68d9      	ldr	r1, [r3, #12]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a10e:	400b      	ands	r3, r1
 800a110:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68d9      	ldr	r1, [r3, #12]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a120:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a126:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a128:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12e:	3b01      	subs	r3, #1
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a18      	ldr	r2, [pc, #96]	; (800a1a4 <HAL_SAI_Init+0x31c>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d119      	bne.n	800a17a <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a146:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <HAL_SAI_Init+0x320>)
 800a148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14a:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <HAL_SAI_Init+0x320>)
 800a14c:	f023 0301 	bic.w	r3, r3, #1
 800a150:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d10e      	bne.n	800a17a <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a164:	3b01      	subs	r3, #1
 800a166:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a168:	490f      	ldr	r1, [pc, #60]	; (800a1a8 <HAL_SAI_Init+0x320>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a16e:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <HAL_SAI_Init+0x320>)
 800a170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a172:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <HAL_SAI_Init+0x320>)
 800a174:	f043 0301 	orr.w	r3, r3, #1
 800a178:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	f005c010 	.word	0xf005c010
 800a1a0:	fff88000 	.word	0xfff88000
 800a1a4:	40015404 	.word	0x40015404
 800a1a8:	40015400 	.word	0x40015400

0800a1ac <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <SAI_InitI2S+0x2e>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d103      	bne.n	800a1e2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	651a      	str	r2, [r3, #80]	; 0x50
 800a1e0:	e002      	b.n	800a1e8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a1ee:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1f6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e077      	b.n	800a302 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d107      	bne.n	800a228 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a224:	665a      	str	r2, [r3, #100]	; 0x64
 800a226:	e006      	b.n	800a236 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a22e:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	665a      	str	r2, [r3, #100]	; 0x64
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d84f      	bhi.n	800a2dc <SAI_InitI2S+0x130>
 800a23c:	a201      	add	r2, pc, #4	; (adr r2, 800a244 <SAI_InitI2S+0x98>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a255 	.word	0x0800a255
 800a248:	0800a277 	.word	0x0800a277
 800a24c:	0800a299 	.word	0x0800a299
 800a250:	0800a2bb 	.word	0x0800a2bb

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2280      	movs	r2, #128	; 0x80
 800a258:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	085b      	lsrs	r3, r3, #1
 800a268:	011a      	lsls	r2, r3, #4
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2240      	movs	r2, #64	; 0x40
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a274:	e035      	b.n	800a2e2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2280      	movs	r2, #128	; 0x80
 800a27a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	085b      	lsrs	r3, r3, #1
 800a280:	019a      	lsls	r2, r3, #6
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2280      	movs	r2, #128	; 0x80
 800a294:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a296:	e024      	b.n	800a2e2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	22c0      	movs	r2, #192	; 0xc0
 800a29c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	019a      	lsls	r2, r3, #6
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2280      	movs	r2, #128	; 0x80
 800a2b6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a2b8:	e013      	b.n	800a2e2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	22e0      	movs	r2, #224	; 0xe0
 800a2be:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	019a      	lsls	r2, r3, #6
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	085b      	lsrs	r3, r3, #1
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2280      	movs	r2, #128	; 0x80
 800a2d8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a2da:	e002      	b.n	800a2e2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d10b      	bne.n	800a300 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d102      	bne.n	800a2f4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2210      	movs	r2, #16
 800a2f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d102      	bne.n	800a300 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2208      	movs	r2, #8
 800a2fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
}
 800a302:	4618      	mov	r0, r3
 800a304:	371c      	adds	r7, #28
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop

0800a310 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a310:	b480      	push	{r7}
 800a312:	b087      	sub	sp, #28
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <SAI_InitPCM+0x2e>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d103      	bne.n	800a346 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2201      	movs	r2, #1
 800a342:	651a      	str	r2, [r3, #80]	; 0x50
 800a344:	e002      	b.n	800a34c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a358:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a360:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a374:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d103      	bne.n	800a384 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2201      	movs	r2, #1
 800a380:	659a      	str	r2, [r3, #88]	; 0x58
 800a382:	e002      	b.n	800a38a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	220d      	movs	r2, #13
 800a388:	659a      	str	r2, [r3, #88]	; 0x58
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d837      	bhi.n	800a400 <SAI_InitPCM+0xf0>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <SAI_InitPCM+0x88>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3a9 	.word	0x0800a3a9
 800a39c:	0800a3bf 	.word	0x0800a3bf
 800a3a0:	0800a3d5 	.word	0x0800a3d5
 800a3a4:	0800a3eb 	.word	0x0800a3eb
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2280      	movs	r2, #128	; 0x80
 800a3ac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	011a      	lsls	r2, r3, #4
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2240      	movs	r2, #64	; 0x40
 800a3ba:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a3bc:	e023      	b.n	800a406 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2280      	movs	r2, #128	; 0x80
 800a3c2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2280      	movs	r2, #128	; 0x80
 800a3d0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a3d2:	e018      	b.n	800a406 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	22c0      	movs	r2, #192	; 0xc0
 800a3d8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2280      	movs	r2, #128	; 0x80
 800a3e6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a3e8:	e00d      	b.n	800a406 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	22e0      	movs	r2, #224	; 0xe0
 800a3ee:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2280      	movs	r2, #128	; 0x80
 800a3fc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800a3fe:	e002      	b.n	800a406 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
      break;
 800a404:	bf00      	nop
  }

  return status;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a41c:	4b18      	ldr	r3, [pc, #96]	; (800a480 <SAI_Disable+0x6c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a18      	ldr	r2, [pc, #96]	; (800a484 <SAI_Disable+0x70>)
 800a422:	fba2 2303 	umull	r2, r3, r2, r3
 800a426:	0b1b      	lsrs	r3, r3, #12
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a43e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a44c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	72fb      	strb	r3, [r7, #11]
      break;
 800a45a:	e009      	b.n	800a470 <SAI_Disable+0x5c>
    }
    count--;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3b01      	subs	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e7      	bne.n	800a440 <SAI_Disable+0x2c>

  return status;
 800a470:	7afb      	ldrb	r3, [r7, #11]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	20000010 	.word	0x20000010
 800a484:	95cbec1b 	.word	0x95cbec1b

0800a488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e095      	b.n	800a5c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d108      	bne.n	800a4b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4aa:	d009      	beq.n	800a4c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	61da      	str	r2, [r3, #28]
 800a4b2:	e005      	b.n	800a4c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7f7 fecc 	bl	8002278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a500:	d902      	bls.n	800a508 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a502:	2300      	movs	r3, #0
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	e002      	b.n	800a50e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a50c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a516:	d007      	beq.n	800a528 <HAL_SPI_Init+0xa0>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a520:	d002      	beq.n	800a528 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a538:	431a      	orrs	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	431a      	orrs	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	431a      	orrs	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a560:	431a      	orrs	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56a:	ea42 0103 	orr.w	r1, r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a572:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	0c1b      	lsrs	r3, r3, #16
 800a584:	f003 0204 	and.w	r2, r3, #4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	431a      	orrs	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5a4:	ea42 0103 	orr.w	r1, r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b088      	sub	sp, #32
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	603b      	str	r3, [r7, #0]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <HAL_SPI_Transmit+0x22>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	e158      	b.n	800a8a2 <HAL_SPI_Transmit+0x2d4>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5f8:	f7f8 fbec 	bl	8002dd4 <HAL_GetTick>
 800a5fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a5fe:	88fb      	ldrh	r3, [r7, #6]
 800a600:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d002      	beq.n	800a614 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a60e:	2302      	movs	r3, #2
 800a610:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a612:	e13d      	b.n	800a890 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <HAL_SPI_Transmit+0x52>
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a624:	e134      	b.n	800a890 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2203      	movs	r2, #3
 800a62a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	88fa      	ldrh	r2, [r7, #6]
 800a63e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	88fa      	ldrh	r2, [r7, #6]
 800a644:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a670:	d10f      	bne.n	800a692 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a680:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a690:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69c:	2b40      	cmp	r3, #64	; 0x40
 800a69e:	d007      	beq.n	800a6b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6b8:	d94b      	bls.n	800a752 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <HAL_SPI_Transmit+0xfa>
 800a6c2:	8afb      	ldrh	r3, [r7, #22]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d13e      	bne.n	800a746 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	881a      	ldrh	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d8:	1c9a      	adds	r2, r3, #2
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a6ec:	e02b      	b.n	800a746 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d112      	bne.n	800a722 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a700:	881a      	ldrh	r2, [r3, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	1c9a      	adds	r2, r3, #2
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a716:	b29b      	uxth	r3, r3
 800a718:	3b01      	subs	r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a720:	e011      	b.n	800a746 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a722:	f7f8 fb57 	bl	8002dd4 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d803      	bhi.n	800a73a <HAL_SPI_Transmit+0x16c>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a738:	d102      	bne.n	800a740 <HAL_SPI_Transmit+0x172>
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a744:	e0a4      	b.n	800a890 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1ce      	bne.n	800a6ee <HAL_SPI_Transmit+0x120>
 800a750:	e07c      	b.n	800a84c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <HAL_SPI_Transmit+0x192>
 800a75a:	8afb      	ldrh	r3, [r7, #22]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d170      	bne.n	800a842 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a764:	b29b      	uxth	r3, r3
 800a766:	2b01      	cmp	r3, #1
 800a768:	d912      	bls.n	800a790 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	881a      	ldrh	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	1c9a      	adds	r2, r3, #2
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a784:	b29b      	uxth	r3, r3
 800a786:	3b02      	subs	r3, #2
 800a788:	b29a      	uxth	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a78e:	e058      	b.n	800a842 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	330c      	adds	r3, #12
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	1c5a      	adds	r2, r3, #1
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a7b6:	e044      	b.n	800a842 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d12b      	bne.n	800a81e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d912      	bls.n	800a7f6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d4:	881a      	ldrh	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	1c9a      	adds	r2, r3, #2
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	3b02      	subs	r3, #2
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a7f4:	e025      	b.n	800a842 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	330c      	adds	r3, #12
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a81c:	e011      	b.n	800a842 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a81e:	f7f8 fad9 	bl	8002dd4 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d803      	bhi.n	800a836 <HAL_SPI_Transmit+0x268>
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a834:	d102      	bne.n	800a83c <HAL_SPI_Transmit+0x26e>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d102      	bne.n	800a842 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a840:	e026      	b.n	800a890 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a846:	b29b      	uxth	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1b5      	bne.n	800a7b8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 fb5b 	bl	800af0c <SPI_EndRxTxTransaction>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2220      	movs	r2, #32
 800a860:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a86a:	2300      	movs	r3, #0
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	77fb      	strb	r3, [r7, #31]
 800a88c:	e000      	b.n	800a890 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a88e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a8a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3720      	adds	r7, #32
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b08a      	sub	sp, #40	; 0x28
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
 800a8b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d101      	bne.n	800a8d0 <HAL_SPI_TransmitReceive+0x26>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e1fb      	b.n	800acc8 <HAL_SPI_TransmitReceive+0x41e>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8d8:	f7f8 fa7c 	bl	8002dd4 <HAL_GetTick>
 800a8dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a8e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a8ec:	887b      	ldrh	r3, [r7, #2]
 800a8ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a8f0:	887b      	ldrh	r3, [r7, #2]
 800a8f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a8f4:	7efb      	ldrb	r3, [r7, #27]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d00e      	beq.n	800a918 <HAL_SPI_TransmitReceive+0x6e>
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a900:	d106      	bne.n	800a910 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d102      	bne.n	800a910 <HAL_SPI_TransmitReceive+0x66>
 800a90a:	7efb      	ldrb	r3, [r7, #27]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d003      	beq.n	800a918 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a910:	2302      	movs	r3, #2
 800a912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a916:	e1cd      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <HAL_SPI_TransmitReceive+0x80>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <HAL_SPI_TransmitReceive+0x80>
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d103      	bne.n	800a932 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a930:	e1c0      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d003      	beq.n	800a946 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2205      	movs	r2, #5
 800a942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	887a      	ldrh	r2, [r7, #2]
 800a956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	887a      	ldrh	r2, [r7, #2]
 800a95e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	887a      	ldrh	r2, [r7, #2]
 800a96c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	887a      	ldrh	r2, [r7, #2]
 800a972:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a988:	d802      	bhi.n	800a990 <HAL_SPI_TransmitReceive+0xe6>
 800a98a:	8a3b      	ldrh	r3, [r7, #16]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d908      	bls.n	800a9a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a99e:	605a      	str	r2, [r3, #4]
 800a9a0:	e007      	b.n	800a9b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9bc:	2b40      	cmp	r3, #64	; 0x40
 800a9be:	d007      	beq.n	800a9d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9d8:	d97c      	bls.n	800aad4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <HAL_SPI_TransmitReceive+0x13e>
 800a9e2:	8a7b      	ldrh	r3, [r7, #18]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d169      	bne.n	800aabc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	881a      	ldrh	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	1c9a      	adds	r2, r3, #2
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	3b01      	subs	r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa0c:	e056      	b.n	800aabc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d11b      	bne.n	800aa54 <HAL_SPI_TransmitReceive+0x1aa>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d016      	beq.n	800aa54 <HAL_SPI_TransmitReceive+0x1aa>
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d113      	bne.n	800aa54 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	881a      	ldrh	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	1c9a      	adds	r2, r3, #2
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d11c      	bne.n	800aa9c <HAL_SPI_TransmitReceive+0x1f2>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d016      	beq.n	800aa9c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68da      	ldr	r2, [r3, #12]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	b292      	uxth	r2, r2
 800aa7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	1c9a      	adds	r2, r3, #2
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa9c:	f7f8 f99a 	bl	8002dd4 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d807      	bhi.n	800aabc <HAL_SPI_TransmitReceive+0x212>
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab2:	d003      	beq.n	800aabc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800aaba:	e0fb      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1a3      	bne.n	800aa0e <HAL_SPI_TransmitReceive+0x164>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aacc:	b29b      	uxth	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d19d      	bne.n	800aa0e <HAL_SPI_TransmitReceive+0x164>
 800aad2:	e0df      	b.n	800ac94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <HAL_SPI_TransmitReceive+0x23a>
 800aadc:	8a7b      	ldrh	r3, [r7, #18]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	f040 80cb 	bne.w	800ac7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d912      	bls.n	800ab14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	881a      	ldrh	r2, [r3, #0]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	1c9a      	adds	r2, r3, #2
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	3b02      	subs	r3, #2
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab12:	e0b2      	b.n	800ac7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	7812      	ldrb	r2, [r2, #0]
 800ab20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	3b01      	subs	r3, #1
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab3a:	e09e      	b.n	800ac7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f003 0302 	and.w	r3, r3, #2
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d134      	bne.n	800abb4 <HAL_SPI_TransmitReceive+0x30a>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d02f      	beq.n	800abb4 <HAL_SPI_TransmitReceive+0x30a>
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d12c      	bne.n	800abb4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d912      	bls.n	800ab8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	881a      	ldrh	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	1c9a      	adds	r2, r3, #2
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	3b02      	subs	r3, #2
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab88:	e012      	b.n	800abb0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	330c      	adds	r3, #12
 800ab94:	7812      	ldrb	r2, [r2, #0]
 800ab96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	3b01      	subs	r3, #1
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d148      	bne.n	800ac54 <HAL_SPI_TransmitReceive+0x3aa>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abc8:	b29b      	uxth	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d042      	beq.n	800ac54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d923      	bls.n	800ac22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe4:	b292      	uxth	r2, r2
 800abe6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abec:	1c9a      	adds	r2, r3, #2
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	3b02      	subs	r3, #2
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d81f      	bhi.n	800ac50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac1e:	605a      	str	r2, [r3, #4]
 800ac20:	e016      	b.n	800ac50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f103 020c 	add.w	r2, r3, #12
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	3b01      	subs	r3, #1
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac50:	2301      	movs	r3, #1
 800ac52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac54:	f7f8 f8be 	bl	8002dd4 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d803      	bhi.n	800ac6c <HAL_SPI_TransmitReceive+0x3c2>
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac6a:	d102      	bne.n	800ac72 <HAL_SPI_TransmitReceive+0x3c8>
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d103      	bne.n	800ac7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ac78:	e01c      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f47f af5b 	bne.w	800ab3c <HAL_SPI_TransmitReceive+0x292>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f47f af54 	bne.w	800ab3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac94:	69fa      	ldr	r2, [r7, #28]
 800ac96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f937 	bl	800af0c <SPI_EndRxTxTransaction>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	661a      	str	r2, [r3, #96]	; 0x60
 800acb0:	e000      	b.n	800acb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800acb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800acc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3728      	adds	r7, #40	; 0x28
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	4613      	mov	r3, r2
 800acde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ace0:	f7f8 f878 	bl	8002dd4 <HAL_GetTick>
 800ace4:	4602      	mov	r2, r0
 800ace6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace8:	1a9b      	subs	r3, r3, r2
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	4413      	add	r3, r2
 800acee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800acf0:	f7f8 f870 	bl	8002dd4 <HAL_GetTick>
 800acf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800acf6:	4b39      	ldr	r3, [pc, #228]	; (800addc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	015b      	lsls	r3, r3, #5
 800acfc:	0d1b      	lsrs	r3, r3, #20
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	fb02 f303 	mul.w	r3, r2, r3
 800ad04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad06:	e054      	b.n	800adb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0e:	d050      	beq.n	800adb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad10:	f7f8 f860 	bl	8002dd4 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d902      	bls.n	800ad26 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d13d      	bne.n	800ada2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad3e:	d111      	bne.n	800ad64 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad48:	d004      	beq.n	800ad54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad52:	d107      	bne.n	800ad64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad6c:	d10f      	bne.n	800ad8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e017      	b.n	800add2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	3b01      	subs	r3, #1
 800adb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	4013      	ands	r3, r2
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	bf0c      	ite	eq
 800adc2:	2301      	moveq	r3, #1
 800adc4:	2300      	movne	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	461a      	mov	r2, r3
 800adca:	79fb      	ldrb	r3, [r7, #7]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d19b      	bne.n	800ad08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3720      	adds	r7, #32
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000010 	.word	0x20000010

0800ade0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800adf2:	f7f7 ffef 	bl	8002dd4 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	4413      	add	r3, r2
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ae02:	f7f7 ffe7 	bl	8002dd4 <HAL_GetTick>
 800ae06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae10:	4b3d      	ldr	r3, [pc, #244]	; (800af08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	4613      	mov	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	00da      	lsls	r2, r3, #3
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	0d1b      	lsrs	r3, r3, #20
 800ae20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae22:	fb02 f303 	mul.w	r3, r2, r3
 800ae26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae28:	e060      	b.n	800aeec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae30:	d107      	bne.n	800ae42 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae48:	d050      	beq.n	800aeec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae4a:	f7f7 ffc3 	bl	8002dd4 <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d902      	bls.n	800ae60 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d13d      	bne.n	800aedc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae78:	d111      	bne.n	800ae9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae82:	d004      	beq.n	800ae8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae8c:	d107      	bne.n	800ae9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aea6:	d10f      	bne.n	800aec8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e010      	b.n	800aefe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689a      	ldr	r2, [r3, #8]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4013      	ands	r3, r2
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d196      	bne.n	800ae2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20000010 	.word	0x20000010

0800af0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af02      	add	r7, sp, #8
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2200      	movs	r2, #0
 800af20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7ff ff5b 	bl	800ade0 <SPI_WaitFifoStateUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d007      	beq.n	800af40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af34:	f043 0220 	orr.w	r2, r3, #32
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e027      	b.n	800af90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2200      	movs	r2, #0
 800af48:	2180      	movs	r1, #128	; 0x80
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f7ff fec0 	bl	800acd0 <SPI_WaitFlagStateUntilTimeout>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d007      	beq.n	800af66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af5a:	f043 0220 	orr.w	r2, r3, #32
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e014      	b.n	800af90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f7ff ff34 	bl	800ade0 <SPI_WaitFifoStateUntilTimeout>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d007      	beq.n	800af8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af82:	f043 0220 	orr.w	r2, r3, #32
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e000      	b.n	800af90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e049      	b.n	800b03e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f7 fe44 	bl	8002c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f000 fdfc 	bl	800bbd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d001      	beq.n	800b060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e02e      	b.n	800b0be <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <HAL_TIM_Base_Start+0x84>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d004      	beq.n	800b07c <HAL_TIM_Base_Start+0x34>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07a:	d115      	bne.n	800b0a8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <HAL_TIM_Base_Start+0x88>)
 800b084:	4013      	ands	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b06      	cmp	r3, #6
 800b08c:	d015      	beq.n	800b0ba <HAL_TIM_Base_Start+0x72>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b094:	d011      	beq.n	800b0ba <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f042 0201 	orr.w	r2, r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0a6:	e008      	b.n	800b0ba <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f042 0201 	orr.w	r2, r2, #1
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	e000      	b.n	800b0bc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	40012c00 	.word	0x40012c00
 800b0d0:	00010007 	.word	0x00010007

0800b0d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d001      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e036      	b.n	800b15a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0201 	orr.w	r2, r2, #1
 800b102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a17      	ldr	r2, [pc, #92]	; (800b168 <HAL_TIM_Base_Start_IT+0x94>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d004      	beq.n	800b118 <HAL_TIM_Base_Start_IT+0x44>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b116:	d115      	bne.n	800b144 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	4b13      	ldr	r3, [pc, #76]	; (800b16c <HAL_TIM_Base_Start_IT+0x98>)
 800b120:	4013      	ands	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b06      	cmp	r3, #6
 800b128:	d015      	beq.n	800b156 <HAL_TIM_Base_Start_IT+0x82>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b130:	d011      	beq.n	800b156 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f042 0201 	orr.w	r2, r2, #1
 800b140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b142:	e008      	b.n	800b156 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0201 	orr.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	e000      	b.n	800b158 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	40012c00 	.word	0x40012c00
 800b16c:	00010007 	.word	0x00010007

0800b170 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e049      	b.n	800b216 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d106      	bne.n	800b19c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f841 	bl	800b21e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f000 fd10 	bl	800bbd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b082      	sub	sp, #8
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e049      	b.n	800b2d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f841 	bl	800b2e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2202      	movs	r2, #2
 800b262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4619      	mov	r1, r3
 800b270:	4610      	mov	r0, r2
 800b272:	f000 fcaf 	bl	800bbd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d109      	bne.n	800b318 <HAL_TIM_PWM_Start+0x24>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	bf14      	ite	ne
 800b310:	2301      	movne	r3, #1
 800b312:	2300      	moveq	r3, #0
 800b314:	b2db      	uxtb	r3, r3
 800b316:	e03c      	b.n	800b392 <HAL_TIM_PWM_Start+0x9e>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b04      	cmp	r3, #4
 800b31c:	d109      	bne.n	800b332 <HAL_TIM_PWM_Start+0x3e>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b01      	cmp	r3, #1
 800b328:	bf14      	ite	ne
 800b32a:	2301      	movne	r3, #1
 800b32c:	2300      	moveq	r3, #0
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	e02f      	b.n	800b392 <HAL_TIM_PWM_Start+0x9e>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b08      	cmp	r3, #8
 800b336:	d109      	bne.n	800b34c <HAL_TIM_PWM_Start+0x58>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b01      	cmp	r3, #1
 800b342:	bf14      	ite	ne
 800b344:	2301      	movne	r3, #1
 800b346:	2300      	moveq	r3, #0
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	e022      	b.n	800b392 <HAL_TIM_PWM_Start+0x9e>
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b0c      	cmp	r3, #12
 800b350:	d109      	bne.n	800b366 <HAL_TIM_PWM_Start+0x72>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	bf14      	ite	ne
 800b35e:	2301      	movne	r3, #1
 800b360:	2300      	moveq	r3, #0
 800b362:	b2db      	uxtb	r3, r3
 800b364:	e015      	b.n	800b392 <HAL_TIM_PWM_Start+0x9e>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b10      	cmp	r3, #16
 800b36a:	d109      	bne.n	800b380 <HAL_TIM_PWM_Start+0x8c>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b01      	cmp	r3, #1
 800b376:	bf14      	ite	ne
 800b378:	2301      	movne	r3, #1
 800b37a:	2300      	moveq	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	e008      	b.n	800b392 <HAL_TIM_PWM_Start+0x9e>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b01      	cmp	r3, #1
 800b38a:	bf14      	ite	ne
 800b38c:	2301      	movne	r3, #1
 800b38e:	2300      	moveq	r3, #0
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e079      	b.n	800b48e <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d104      	bne.n	800b3aa <HAL_TIM_PWM_Start+0xb6>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3a8:	e023      	b.n	800b3f2 <HAL_TIM_PWM_Start+0xfe>
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d104      	bne.n	800b3ba <HAL_TIM_PWM_Start+0xc6>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3b8:	e01b      	b.n	800b3f2 <HAL_TIM_PWM_Start+0xfe>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	d104      	bne.n	800b3ca <HAL_TIM_PWM_Start+0xd6>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3c8:	e013      	b.n	800b3f2 <HAL_TIM_PWM_Start+0xfe>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b0c      	cmp	r3, #12
 800b3ce:	d104      	bne.n	800b3da <HAL_TIM_PWM_Start+0xe6>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3d8:	e00b      	b.n	800b3f2 <HAL_TIM_PWM_Start+0xfe>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b10      	cmp	r3, #16
 800b3de:	d104      	bne.n	800b3ea <HAL_TIM_PWM_Start+0xf6>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3e8:	e003      	b.n	800b3f2 <HAL_TIM_PWM_Start+0xfe>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f000 ff68 	bl	800c2d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a24      	ldr	r2, [pc, #144]	; (800b498 <HAL_TIM_PWM_Start+0x1a4>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d009      	beq.n	800b41e <HAL_TIM_PWM_Start+0x12a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a23      	ldr	r2, [pc, #140]	; (800b49c <HAL_TIM_PWM_Start+0x1a8>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d004      	beq.n	800b41e <HAL_TIM_PWM_Start+0x12a>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a21      	ldr	r2, [pc, #132]	; (800b4a0 <HAL_TIM_PWM_Start+0x1ac>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d101      	bne.n	800b422 <HAL_TIM_PWM_Start+0x12e>
 800b41e:	2301      	movs	r3, #1
 800b420:	e000      	b.n	800b424 <HAL_TIM_PWM_Start+0x130>
 800b422:	2300      	movs	r3, #0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d007      	beq.n	800b438 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b436:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a16      	ldr	r2, [pc, #88]	; (800b498 <HAL_TIM_PWM_Start+0x1a4>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d004      	beq.n	800b44c <HAL_TIM_PWM_Start+0x158>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b44a:	d115      	bne.n	800b478 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	689a      	ldr	r2, [r3, #8]
 800b452:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <HAL_TIM_PWM_Start+0x1b0>)
 800b454:	4013      	ands	r3, r2
 800b456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2b06      	cmp	r3, #6
 800b45c:	d015      	beq.n	800b48a <HAL_TIM_PWM_Start+0x196>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b464:	d011      	beq.n	800b48a <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f042 0201 	orr.w	r2, r2, #1
 800b474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b476:	e008      	b.n	800b48a <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e000      	b.n	800b48c <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b48a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	40012c00 	.word	0x40012c00
 800b49c:	40014400 	.word	0x40014400
 800b4a0:	40014800 	.word	0x40014800
 800b4a4:	00010007 	.word	0x00010007

0800b4a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	f003 0302 	and.w	r3, r3, #2
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d122      	bne.n	800b504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d11b      	bne.n	800b504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f06f 0202 	mvn.w	r2, #2
 800b4d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	f003 0303 	and.w	r3, r3, #3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fb5d 	bl	800bbaa <HAL_TIM_IC_CaptureCallback>
 800b4f0:	e005      	b.n	800b4fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fb4f 	bl	800bb96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7f5 feb9 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b04      	cmp	r3, #4
 800b510:	d122      	bne.n	800b558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f003 0304 	and.w	r3, r3, #4
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	d11b      	bne.n	800b558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f06f 0204 	mvn.w	r2, #4
 800b528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2202      	movs	r2, #2
 800b52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fb33 	bl	800bbaa <HAL_TIM_IC_CaptureCallback>
 800b544:	e005      	b.n	800b552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fb25 	bl	800bb96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7f5 fe8f 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f003 0308 	and.w	r3, r3, #8
 800b562:	2b08      	cmp	r3, #8
 800b564:	d122      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	f003 0308 	and.w	r3, r3, #8
 800b570:	2b08      	cmp	r3, #8
 800b572:	d11b      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f06f 0208 	mvn.w	r2, #8
 800b57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2204      	movs	r2, #4
 800b582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fb09 	bl	800bbaa <HAL_TIM_IC_CaptureCallback>
 800b598:	e005      	b.n	800b5a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fafb 	bl	800bb96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7f5 fe65 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f003 0310 	and.w	r3, r3, #16
 800b5b6:	2b10      	cmp	r3, #16
 800b5b8:	d122      	bne.n	800b600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f003 0310 	and.w	r3, r3, #16
 800b5c4:	2b10      	cmp	r3, #16
 800b5c6:	d11b      	bne.n	800b600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f06f 0210 	mvn.w	r2, #16
 800b5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2208      	movs	r2, #8
 800b5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fadf 	bl	800bbaa <HAL_TIM_IC_CaptureCallback>
 800b5ec:	e005      	b.n	800b5fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fad1 	bl	800bb96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7f5 fe3b 	bl	8001270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	f003 0301 	and.w	r3, r3, #1
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d10e      	bne.n	800b62c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d107      	bne.n	800b62c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f06f 0201 	mvn.w	r2, #1
 800b624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7f6 fbf6 	bl	8001e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b636:	2b80      	cmp	r3, #128	; 0x80
 800b638:	d10e      	bne.n	800b658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b644:	2b80      	cmp	r3, #128	; 0x80
 800b646:	d107      	bne.n	800b658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 ff5c 	bl	800c510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b666:	d10e      	bne.n	800b686 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b672:	2b80      	cmp	r3, #128	; 0x80
 800b674:	d107      	bne.n	800b686 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 ff4f 	bl	800c524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b690:	2b40      	cmp	r3, #64	; 0x40
 800b692:	d10e      	bne.n	800b6b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b69e:	2b40      	cmp	r3, #64	; 0x40
 800b6a0:	d107      	bne.n	800b6b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa86 	bl	800bbbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f003 0320 	and.w	r3, r3, #32
 800b6bc:	2b20      	cmp	r3, #32
 800b6be:	d10e      	bne.n	800b6de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b20      	cmp	r3, #32
 800b6cc:	d107      	bne.n	800b6de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f06f 0220 	mvn.w	r2, #32
 800b6d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 ff0f 	bl	800c4fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b702:	2302      	movs	r3, #2
 800b704:	e066      	b.n	800b7d4 <HAL_TIM_OC_ConfigChannel+0xec>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b14      	cmp	r3, #20
 800b712:	d857      	bhi.n	800b7c4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b714:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <HAL_TIM_OC_ConfigChannel+0x34>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b771 	.word	0x0800b771
 800b720:	0800b7c5 	.word	0x0800b7c5
 800b724:	0800b7c5 	.word	0x0800b7c5
 800b728:	0800b7c5 	.word	0x0800b7c5
 800b72c:	0800b77f 	.word	0x0800b77f
 800b730:	0800b7c5 	.word	0x0800b7c5
 800b734:	0800b7c5 	.word	0x0800b7c5
 800b738:	0800b7c5 	.word	0x0800b7c5
 800b73c:	0800b78d 	.word	0x0800b78d
 800b740:	0800b7c5 	.word	0x0800b7c5
 800b744:	0800b7c5 	.word	0x0800b7c5
 800b748:	0800b7c5 	.word	0x0800b7c5
 800b74c:	0800b79b 	.word	0x0800b79b
 800b750:	0800b7c5 	.word	0x0800b7c5
 800b754:	0800b7c5 	.word	0x0800b7c5
 800b758:	0800b7c5 	.word	0x0800b7c5
 800b75c:	0800b7a9 	.word	0x0800b7a9
 800b760:	0800b7c5 	.word	0x0800b7c5
 800b764:	0800b7c5 	.word	0x0800b7c5
 800b768:	0800b7c5 	.word	0x0800b7c5
 800b76c:	0800b7b7 	.word	0x0800b7b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68b9      	ldr	r1, [r7, #8]
 800b776:	4618      	mov	r0, r3
 800b778:	f000 fa90 	bl	800bc9c <TIM_OC1_SetConfig>
      break;
 800b77c:	e025      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68b9      	ldr	r1, [r7, #8]
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fb05 	bl	800bd94 <TIM_OC2_SetConfig>
      break;
 800b78a:	e01e      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fb78 	bl	800be88 <TIM_OC3_SetConfig>
      break;
 800b798:	e017      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68b9      	ldr	r1, [r7, #8]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f000 fbe9 	bl	800bf78 <TIM_OC4_SetConfig>
      break;
 800b7a6:	e010      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68b9      	ldr	r1, [r7, #8]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fc40 	bl	800c034 <TIM_OC5_SetConfig>
      break;
 800b7b4:	e009      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68b9      	ldr	r1, [r7, #8]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fc91 	bl	800c0e4 <TIM_OC6_SetConfig>
      break;
 800b7c2:	e002      	b.n	800b7ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d101      	bne.n	800b7fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e0ff      	b.n	800b9fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b14      	cmp	r3, #20
 800b806:	f200 80f0 	bhi.w	800b9ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b80a:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b9eb 	.word	0x0800b9eb
 800b818:	0800b9eb 	.word	0x0800b9eb
 800b81c:	0800b9eb 	.word	0x0800b9eb
 800b820:	0800b8a5 	.word	0x0800b8a5
 800b824:	0800b9eb 	.word	0x0800b9eb
 800b828:	0800b9eb 	.word	0x0800b9eb
 800b82c:	0800b9eb 	.word	0x0800b9eb
 800b830:	0800b8e7 	.word	0x0800b8e7
 800b834:	0800b9eb 	.word	0x0800b9eb
 800b838:	0800b9eb 	.word	0x0800b9eb
 800b83c:	0800b9eb 	.word	0x0800b9eb
 800b840:	0800b927 	.word	0x0800b927
 800b844:	0800b9eb 	.word	0x0800b9eb
 800b848:	0800b9eb 	.word	0x0800b9eb
 800b84c:	0800b9eb 	.word	0x0800b9eb
 800b850:	0800b969 	.word	0x0800b969
 800b854:	0800b9eb 	.word	0x0800b9eb
 800b858:	0800b9eb 	.word	0x0800b9eb
 800b85c:	0800b9eb 	.word	0x0800b9eb
 800b860:	0800b9a9 	.word	0x0800b9a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fa16 	bl	800bc9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	699a      	ldr	r2, [r3, #24]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f042 0208 	orr.w	r2, r2, #8
 800b87e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	699a      	ldr	r2, [r3, #24]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f022 0204 	bic.w	r2, r2, #4
 800b88e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6999      	ldr	r1, [r3, #24]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	691a      	ldr	r2, [r3, #16]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	619a      	str	r2, [r3, #24]
      break;
 800b8a2:	e0a5      	b.n	800b9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68b9      	ldr	r1, [r7, #8]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fa72 	bl	800bd94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699a      	ldr	r2, [r3, #24]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699a      	ldr	r2, [r3, #24]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6999      	ldr	r1, [r3, #24]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	021a      	lsls	r2, r3, #8
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	619a      	str	r2, [r3, #24]
      break;
 800b8e4:	e084      	b.n	800b9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 facb 	bl	800be88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69da      	ldr	r2, [r3, #28]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f042 0208 	orr.w	r2, r2, #8
 800b900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69da      	ldr	r2, [r3, #28]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f022 0204 	bic.w	r2, r2, #4
 800b910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69d9      	ldr	r1, [r3, #28]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	691a      	ldr	r2, [r3, #16]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	61da      	str	r2, [r3, #28]
      break;
 800b924:	e064      	b.n	800b9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68b9      	ldr	r1, [r7, #8]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fb23 	bl	800bf78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69da      	ldr	r2, [r3, #28]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	69da      	ldr	r2, [r3, #28]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	69d9      	ldr	r1, [r3, #28]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	021a      	lsls	r2, r3, #8
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	61da      	str	r2, [r3, #28]
      break;
 800b966:	e043      	b.n	800b9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 fb60 	bl	800c034 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f042 0208 	orr.w	r2, r2, #8
 800b982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f022 0204 	bic.w	r2, r2, #4
 800b992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	691a      	ldr	r2, [r3, #16]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9a6:	e023      	b.n	800b9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fb98 	bl	800c0e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	021a      	lsls	r2, r3, #8
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	430a      	orrs	r2, r1
 800b9e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9e8:	e002      	b.n	800b9f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop

0800ba04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d101      	bne.n	800ba20 <HAL_TIM_ConfigClockSource+0x1c>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e0b6      	b.n	800bb8e <HAL_TIM_ConfigClockSource+0x18a>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ba3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba5c:	d03e      	beq.n	800badc <HAL_TIM_ConfigClockSource+0xd8>
 800ba5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba62:	f200 8087 	bhi.w	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6a:	f000 8086 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x176>
 800ba6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba72:	d87f      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba74:	2b70      	cmp	r3, #112	; 0x70
 800ba76:	d01a      	beq.n	800baae <HAL_TIM_ConfigClockSource+0xaa>
 800ba78:	2b70      	cmp	r3, #112	; 0x70
 800ba7a:	d87b      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba7c:	2b60      	cmp	r3, #96	; 0x60
 800ba7e:	d050      	beq.n	800bb22 <HAL_TIM_ConfigClockSource+0x11e>
 800ba80:	2b60      	cmp	r3, #96	; 0x60
 800ba82:	d877      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba84:	2b50      	cmp	r3, #80	; 0x50
 800ba86:	d03c      	beq.n	800bb02 <HAL_TIM_ConfigClockSource+0xfe>
 800ba88:	2b50      	cmp	r3, #80	; 0x50
 800ba8a:	d873      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba8c:	2b40      	cmp	r3, #64	; 0x40
 800ba8e:	d058      	beq.n	800bb42 <HAL_TIM_ConfigClockSource+0x13e>
 800ba90:	2b40      	cmp	r3, #64	; 0x40
 800ba92:	d86f      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba94:	2b30      	cmp	r3, #48	; 0x30
 800ba96:	d064      	beq.n	800bb62 <HAL_TIM_ConfigClockSource+0x15e>
 800ba98:	2b30      	cmp	r3, #48	; 0x30
 800ba9a:	d86b      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800ba9c:	2b20      	cmp	r3, #32
 800ba9e:	d060      	beq.n	800bb62 <HAL_TIM_ConfigClockSource+0x15e>
 800baa0:	2b20      	cmp	r3, #32
 800baa2:	d867      	bhi.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d05c      	beq.n	800bb62 <HAL_TIM_ConfigClockSource+0x15e>
 800baa8:	2b10      	cmp	r3, #16
 800baaa:	d05a      	beq.n	800bb62 <HAL_TIM_ConfigClockSource+0x15e>
 800baac:	e062      	b.n	800bb74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	6899      	ldr	r1, [r3, #8]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	f000 fbe7 	bl	800c290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	609a      	str	r2, [r3, #8]
      break;
 800bada:	e04f      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	6899      	ldr	r1, [r3, #8]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	685a      	ldr	r2, [r3, #4]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f000 fbd0 	bl	800c290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	689a      	ldr	r2, [r3, #8]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bafe:	609a      	str	r2, [r3, #8]
      break;
 800bb00:	e03c      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	6859      	ldr	r1, [r3, #4]
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f000 fb42 	bl	800c198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2150      	movs	r1, #80	; 0x50
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 fb9b 	bl	800c256 <TIM_ITRx_SetConfig>
      break;
 800bb20:	e02c      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6818      	ldr	r0, [r3, #0]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	6859      	ldr	r1, [r3, #4]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f000 fb61 	bl	800c1f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2160      	movs	r1, #96	; 0x60
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fb8b 	bl	800c256 <TIM_ITRx_SetConfig>
      break;
 800bb40:	e01c      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6818      	ldr	r0, [r3, #0]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	6859      	ldr	r1, [r3, #4]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f000 fb22 	bl	800c198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2140      	movs	r1, #64	; 0x40
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 fb7b 	bl	800c256 <TIM_ITRx_SetConfig>
      break;
 800bb60:	e00c      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f000 fb72 	bl	800c256 <TIM_ITRx_SetConfig>
      break;
 800bb72:	e003      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
      break;
 800bb78:	e000      	b.n	800bb7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bb7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb9e:	bf00      	nop
 800bba0:	370c      	adds	r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbb2:	bf00      	nop
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b083      	sub	sp, #12
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbc6:	bf00      	nop
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a2a      	ldr	r2, [pc, #168]	; (800bc90 <TIM_Base_SetConfig+0xbc>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d003      	beq.n	800bbf4 <TIM_Base_SetConfig+0x20>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf2:	d108      	bne.n	800bc06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a21      	ldr	r2, [pc, #132]	; (800bc90 <TIM_Base_SetConfig+0xbc>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d00b      	beq.n	800bc26 <TIM_Base_SetConfig+0x52>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc14:	d007      	beq.n	800bc26 <TIM_Base_SetConfig+0x52>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <TIM_Base_SetConfig+0xc0>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d003      	beq.n	800bc26 <TIM_Base_SetConfig+0x52>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a1d      	ldr	r2, [pc, #116]	; (800bc98 <TIM_Base_SetConfig+0xc4>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d108      	bne.n	800bc38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	689a      	ldr	r2, [r3, #8]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a0c      	ldr	r2, [pc, #48]	; (800bc90 <TIM_Base_SetConfig+0xbc>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d007      	beq.n	800bc74 <TIM_Base_SetConfig+0xa0>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a0b      	ldr	r2, [pc, #44]	; (800bc94 <TIM_Base_SetConfig+0xc0>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d003      	beq.n	800bc74 <TIM_Base_SetConfig+0xa0>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a0a      	ldr	r2, [pc, #40]	; (800bc98 <TIM_Base_SetConfig+0xc4>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d103      	bne.n	800bc7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	691a      	ldr	r2, [r3, #16]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	615a      	str	r2, [r3, #20]
}
 800bc82:	bf00      	nop
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	40012c00 	.word	0x40012c00
 800bc94:	40014400 	.word	0x40014400
 800bc98:	40014800 	.word	0x40014800

0800bc9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b087      	sub	sp, #28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f023 0201 	bic.w	r2, r3, #1
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 0303 	bic.w	r3, r3, #3
 800bcd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f023 0302 	bic.w	r3, r3, #2
 800bce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	697a      	ldr	r2, [r7, #20]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a24      	ldr	r2, [pc, #144]	; (800bd88 <TIM_OC1_SetConfig+0xec>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d007      	beq.n	800bd0c <TIM_OC1_SetConfig+0x70>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a23      	ldr	r2, [pc, #140]	; (800bd8c <TIM_OC1_SetConfig+0xf0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d003      	beq.n	800bd0c <TIM_OC1_SetConfig+0x70>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a22      	ldr	r2, [pc, #136]	; (800bd90 <TIM_OC1_SetConfig+0xf4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d10c      	bne.n	800bd26 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f023 0308 	bic.w	r3, r3, #8
 800bd12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	f023 0304 	bic.w	r3, r3, #4
 800bd24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <TIM_OC1_SetConfig+0xec>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d007      	beq.n	800bd3e <TIM_OC1_SetConfig+0xa2>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a17      	ldr	r2, [pc, #92]	; (800bd90 <TIM_OC1_SetConfig+0xf4>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d003      	beq.n	800bd3e <TIM_OC1_SetConfig+0xa2>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a14      	ldr	r2, [pc, #80]	; (800bd8c <TIM_OC1_SetConfig+0xf0>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d111      	bne.n	800bd62 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	621a      	str	r2, [r3, #32]
}
 800bd7c:	bf00      	nop
 800bd7e:	371c      	adds	r7, #28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	40012c00 	.word	0x40012c00
 800bd8c:	40014800 	.word	0x40014800
 800bd90:	40014400 	.word	0x40014400

0800bd94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	f023 0210 	bic.w	r2, r3, #16
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	021b      	lsls	r3, r3, #8
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f023 0320 	bic.w	r3, r3, #32
 800bde2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a22      	ldr	r2, [pc, #136]	; (800be7c <TIM_OC2_SetConfig+0xe8>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d10d      	bne.n	800be14 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	011b      	lsls	r3, r3, #4
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	4313      	orrs	r3, r2
 800be0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a19      	ldr	r2, [pc, #100]	; (800be7c <TIM_OC2_SetConfig+0xe8>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d007      	beq.n	800be2c <TIM_OC2_SetConfig+0x98>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a18      	ldr	r2, [pc, #96]	; (800be80 <TIM_OC2_SetConfig+0xec>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d003      	beq.n	800be2c <TIM_OC2_SetConfig+0x98>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a17      	ldr	r2, [pc, #92]	; (800be84 <TIM_OC2_SetConfig+0xf0>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d113      	bne.n	800be54 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	4313      	orrs	r3, r2
 800be46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	693a      	ldr	r2, [r7, #16]
 800be50:	4313      	orrs	r3, r2
 800be52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	621a      	str	r2, [r3, #32]
}
 800be6e:	bf00      	nop
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	40012c00 	.word	0x40012c00
 800be80:	40014400 	.word	0x40014400
 800be84:	40014800 	.word	0x40014800

0800be88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 0303 	bic.w	r3, r3, #3
 800bec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	4313      	orrs	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	4313      	orrs	r3, r2
 800bee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a21      	ldr	r2, [pc, #132]	; (800bf6c <TIM_OC3_SetConfig+0xe4>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d10d      	bne.n	800bf06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	021b      	lsls	r3, r3, #8
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	4313      	orrs	r3, r2
 800befc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a18      	ldr	r2, [pc, #96]	; (800bf6c <TIM_OC3_SetConfig+0xe4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d007      	beq.n	800bf1e <TIM_OC3_SetConfig+0x96>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a17      	ldr	r2, [pc, #92]	; (800bf70 <TIM_OC3_SetConfig+0xe8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d003      	beq.n	800bf1e <TIM_OC3_SetConfig+0x96>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a16      	ldr	r2, [pc, #88]	; (800bf74 <TIM_OC3_SetConfig+0xec>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d113      	bne.n	800bf46 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	621a      	str	r2, [r3, #32]
}
 800bf60:	bf00      	nop
 800bf62:	371c      	adds	r7, #28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	40012c00 	.word	0x40012c00
 800bf70:	40014400 	.word	0x40014400
 800bf74:	40014800 	.word	0x40014800

0800bf78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b087      	sub	sp, #28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	69db      	ldr	r3, [r3, #28]
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	031b      	lsls	r3, r3, #12
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a14      	ldr	r2, [pc, #80]	; (800c028 <TIM_OC4_SetConfig+0xb0>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d007      	beq.n	800bfec <TIM_OC4_SetConfig+0x74>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a13      	ldr	r2, [pc, #76]	; (800c02c <TIM_OC4_SetConfig+0xb4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d003      	beq.n	800bfec <TIM_OC4_SetConfig+0x74>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a12      	ldr	r2, [pc, #72]	; (800c030 <TIM_OC4_SetConfig+0xb8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d109      	bne.n	800c000 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	019b      	lsls	r3, r3, #6
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40012c00 	.word	0x40012c00
 800c02c:	40014400 	.word	0x40014400
 800c030:	40014800 	.word	0x40014800

0800c034 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c034:	b480      	push	{r7}
 800c036:	b087      	sub	sp, #28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c078:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	041b      	lsls	r3, r3, #16
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	4313      	orrs	r3, r2
 800c084:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a13      	ldr	r2, [pc, #76]	; (800c0d8 <TIM_OC5_SetConfig+0xa4>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d007      	beq.n	800c09e <TIM_OC5_SetConfig+0x6a>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a12      	ldr	r2, [pc, #72]	; (800c0dc <TIM_OC5_SetConfig+0xa8>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d003      	beq.n	800c09e <TIM_OC5_SetConfig+0x6a>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a11      	ldr	r2, [pc, #68]	; (800c0e0 <TIM_OC5_SetConfig+0xac>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d109      	bne.n	800c0b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	697a      	ldr	r2, [r7, #20]
 800c0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	621a      	str	r2, [r3, #32]
}
 800c0cc:	bf00      	nop
 800c0ce:	371c      	adds	r7, #28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	40012c00 	.word	0x40012c00
 800c0dc:	40014400 	.word	0x40014400
 800c0e0:	40014800 	.word	0x40014800

0800c0e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	021b      	lsls	r3, r3, #8
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	4313      	orrs	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c12a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	051b      	lsls	r3, r3, #20
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	4313      	orrs	r3, r2
 800c136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a14      	ldr	r2, [pc, #80]	; (800c18c <TIM_OC6_SetConfig+0xa8>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d007      	beq.n	800c150 <TIM_OC6_SetConfig+0x6c>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a13      	ldr	r2, [pc, #76]	; (800c190 <TIM_OC6_SetConfig+0xac>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d003      	beq.n	800c150 <TIM_OC6_SetConfig+0x6c>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a12      	ldr	r2, [pc, #72]	; (800c194 <TIM_OC6_SetConfig+0xb0>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d109      	bne.n	800c164 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c156:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	029b      	lsls	r3, r3, #10
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4313      	orrs	r3, r2
 800c162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	621a      	str	r2, [r3, #32]
}
 800c17e:	bf00      	nop
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	40012c00 	.word	0x40012c00
 800c190:	40014400 	.word	0x40014400
 800c194:	40014800 	.word	0x40014800

0800c198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	f023 0201 	bic.w	r2, r3, #1
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f023 030a 	bic.w	r3, r3, #10
 800c1d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	621a      	str	r2, [r3, #32]
}
 800c1ea:	bf00      	nop
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b087      	sub	sp, #28
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f023 0210 	bic.w	r2, r3, #16
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	699b      	ldr	r3, [r3, #24]
 800c212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6a1b      	ldr	r3, [r3, #32]
 800c218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	031b      	lsls	r3, r3, #12
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	4313      	orrs	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	621a      	str	r2, [r3, #32]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c256:	b480      	push	{r7}
 800c258:	b085      	sub	sp, #20
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c26c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4313      	orrs	r3, r2
 800c278:	f043 0307 	orr.w	r3, r3, #7
 800c27c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	609a      	str	r2, [r3, #8]
}
 800c284:	bf00      	nop
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	021a      	lsls	r2, r3, #8
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	431a      	orrs	r2, r3
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	609a      	str	r2, [r3, #8]
}
 800c2c4:	bf00      	nop
 800c2c6:	371c      	adds	r7, #28
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f003 031f 	and.w	r3, r3, #31
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a1a      	ldr	r2, [r3, #32]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	43db      	mvns	r3, r3
 800c2f2:	401a      	ands	r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6a1a      	ldr	r2, [r3, #32]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f003 031f 	and.w	r3, r3, #31
 800c302:	6879      	ldr	r1, [r7, #4]
 800c304:	fa01 f303 	lsl.w	r3, r1, r3
 800c308:	431a      	orrs	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	621a      	str	r2, [r3, #32]
}
 800c30e:	bf00      	nop
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
	...

0800c31c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d101      	bne.n	800c334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c330:	2302      	movs	r3, #2
 800c332:	e04a      	b.n	800c3ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a1f      	ldr	r2, [pc, #124]	; (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d108      	bne.n	800c370 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c364:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4313      	orrs	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a12      	ldr	r2, [pc, #72]	; (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d004      	beq.n	800c39e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c39c:	d10c      	bne.n	800c3b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	40012c00 	.word	0x40012c00

0800c3dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d101      	bne.n	800c3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	e078      	b.n	800c4ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	4313      	orrs	r3, r2
 800c41a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	4313      	orrs	r3, r2
 800c428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4313      	orrs	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	4313      	orrs	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	4313      	orrs	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	041b      	lsls	r3, r3, #16
 800c46e:	4313      	orrs	r3, r2
 800c470:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a20      	ldr	r2, [pc, #128]	; (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d106      	bne.n	800c48a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a1a      	ldr	r2, [pc, #104]	; (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d121      	bne.n	800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49e:	051b      	lsls	r3, r3, #20
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a0c      	ldr	r2, [pc, #48]	; (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d106      	bne.n	800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	40012c00 	.word	0x40012c00

0800c4fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c548:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c54c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	b29a      	uxth	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3714      	adds	r7, #20
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c566:	b480      	push	{r7}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c56e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c572:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	43db      	mvns	r3, r3
 800c582:	b29b      	uxth	r3, r3
 800c584:	4013      	ands	r3, r2
 800c586:	b29a      	uxth	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c59c:	b084      	sub	sp, #16
 800c59e:	b480      	push	{r7}
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	f107 0014 	add.w	r0, r7, #20
 800c5aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	b004      	add	sp, #16
 800c5dc:	4770      	bx	lr
	...

0800c5e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b09d      	sub	sp, #116	; 0x74
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c606:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	78db      	ldrb	r3, [r3, #3]
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d81f      	bhi.n	800c652 <USB_ActivateEndpoint+0x72>
 800c612:	a201      	add	r2, pc, #4	; (adr r2, 800c618 <USB_ActivateEndpoint+0x38>)
 800c614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c618:	0800c629 	.word	0x0800c629
 800c61c:	0800c645 	.word	0x0800c645
 800c620:	0800c65b 	.word	0x0800c65b
 800c624:	0800c637 	.word	0x0800c637
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c62c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c630:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c634:	e012      	b.n	800c65c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c636:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c63a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c63e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c642:	e00b      	b.n	800c65c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c644:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c64c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c650:	e004      	b.n	800c65c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c658:	e000      	b.n	800c65c <USB_ActivateEndpoint+0x7c>
      break;
 800c65a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	441a      	add	r2, r3
 800c666:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4413      	add	r3, r2
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	b21b      	sxth	r3, r3
 800c68e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c696:	b21a      	sxth	r2, r3
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	b21b      	sxth	r3, r3
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	b21b      	sxth	r3, r3
 800c6a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	441a      	add	r2, r3
 800c6b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	7b1b      	ldrb	r3, [r3, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f040 8149 	bne.w	800c964 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f000 8084 	beq.w	800c7e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	61bb      	str	r3, [r7, #24]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	61bb      	str	r3, [r7, #24]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	00da      	lsls	r2, r3, #3
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6fe:	617b      	str	r3, [r7, #20]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	88db      	ldrh	r3, [r3, #6]
 800c704:	085b      	lsrs	r3, r3, #1
 800c706:	b29b      	uxth	r3, r3
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	881b      	ldrh	r3, [r3, #0]
 800c71c:	827b      	strh	r3, [r7, #18]
 800c71e:	8a7b      	ldrh	r3, [r7, #18]
 800c720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01b      	beq.n	800c760 <USB_ActivateEndpoint+0x180>
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	b29b      	uxth	r3, r3
 800c736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c73e:	823b      	strh	r3, [r7, #16]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	441a      	add	r2, r3
 800c74a:	8a3b      	ldrh	r3, [r7, #16]
 800c74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	78db      	ldrb	r3, [r3, #3]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d020      	beq.n	800c7aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	b29b      	uxth	r3, r3
 800c776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c77a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c77e:	81bb      	strh	r3, [r7, #12]
 800c780:	89bb      	ldrh	r3, [r7, #12]
 800c782:	f083 0320 	eor.w	r3, r3, #32
 800c786:	81bb      	strh	r3, [r7, #12]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	441a      	add	r2, r3
 800c792:	89bb      	ldrh	r3, [r7, #12]
 800c794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c79c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	8013      	strh	r3, [r2, #0]
 800c7a8:	e2a6      	b.n	800ccf8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7c0:	81fb      	strh	r3, [r7, #14]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	441a      	add	r2, r3
 800c7cc:	89fb      	ldrh	r3, [r7, #14]
 800c7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	8013      	strh	r3, [r2, #0]
 800c7e2:	e289      	b.n	800ccf8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	4413      	add	r3, r2
 800c7f6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	00da      	lsls	r2, r3, #3
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	4413      	add	r3, r2
 800c802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c806:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	88db      	ldrh	r3, [r3, #6]
 800c80c:	085b      	lsrs	r3, r3, #1
 800c80e:	b29b      	uxth	r3, r3
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	b29a      	uxth	r2, r3
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c822:	b29b      	uxth	r3, r3
 800c824:	461a      	mov	r2, r3
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	4413      	add	r3, r2
 800c82a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	00da      	lsls	r2, r3, #3
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	4413      	add	r3, r2
 800c836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	2b3e      	cmp	r3, #62	; 0x3e
 800c842:	d918      	bls.n	800c876 <USB_ActivateEndpoint+0x296>
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	095b      	lsrs	r3, r3, #5
 800c84a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	f003 031f 	and.w	r3, r3, #31
 800c854:	2b00      	cmp	r3, #0
 800c856:	d102      	bne.n	800c85e <USB_ActivateEndpoint+0x27e>
 800c858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c85a:	3b01      	subs	r3, #1
 800c85c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c85e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c860:	b29b      	uxth	r3, r3
 800c862:	029b      	lsls	r3, r3, #10
 800c864:	b29b      	uxth	r3, r3
 800c866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c86a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c86e:	b29a      	uxth	r2, r3
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	801a      	strh	r2, [r3, #0]
 800c874:	e029      	b.n	800c8ca <USB_ActivateEndpoint+0x2ea>
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d112      	bne.n	800c8a4 <USB_ActivateEndpoint+0x2c4>
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	881b      	ldrh	r3, [r3, #0]
 800c882:	b29b      	uxth	r3, r3
 800c884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c888:	b29a      	uxth	r2, r3
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	801a      	strh	r2, [r3, #0]
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	b29b      	uxth	r3, r3
 800c894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	801a      	strh	r2, [r3, #0]
 800c8a2:	e012      	b.n	800c8ca <USB_ActivateEndpoint+0x2ea>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	085b      	lsrs	r3, r3, #1
 800c8aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <USB_ActivateEndpoint+0x2de>
 800c8b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c8be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	029b      	lsls	r3, r3, #10
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	4413      	add	r3, r2
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c8d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d01b      	beq.n	800c91a <USB_ActivateEndpoint+0x33a>
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8f8:	843b      	strh	r3, [r7, #32]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	441a      	add	r2, r3
 800c904:	8c3b      	ldrh	r3, [r7, #32]
 800c906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c90a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c90e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c916:	b29b      	uxth	r3, r3
 800c918:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	b29b      	uxth	r3, r3
 800c928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c92c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c930:	83fb      	strh	r3, [r7, #30]
 800c932:	8bfb      	ldrh	r3, [r7, #30]
 800c934:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c938:	83fb      	strh	r3, [r7, #30]
 800c93a:	8bfb      	ldrh	r3, [r7, #30]
 800c93c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c940:	83fb      	strh	r3, [r7, #30]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	441a      	add	r2, r3
 800c94c:	8bfb      	ldrh	r3, [r7, #30]
 800c94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c95e:	b29b      	uxth	r3, r3
 800c960:	8013      	strh	r3, [r2, #0]
 800c962:	e1c9      	b.n	800ccf8 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	78db      	ldrb	r3, [r3, #3]
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d11e      	bne.n	800c9aa <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	4413      	add	r3, r2
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	b29b      	uxth	r3, r3
 800c97a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c982:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	441a      	add	r2, r3
 800c990:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c99c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	8013      	strh	r3, [r2, #0]
 800c9a8:	e01d      	b.n	800c9e6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	441a      	add	r2, r3
 800c9ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c9d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9f6:	4413      	add	r3, r2
 800c9f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	00da      	lsls	r2, r3, #3
 800ca00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca08:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	891b      	ldrh	r3, [r3, #8]
 800ca0e:	085b      	lsrs	r3, r3, #1
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca18:	801a      	strh	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	657b      	str	r3, [r7, #84]	; 0x54
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	461a      	mov	r2, r3
 800ca28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca2a:	4413      	add	r3, r2
 800ca2c:	657b      	str	r3, [r7, #84]	; 0x54
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	00da      	lsls	r2, r3, #3
 800ca34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca36:	4413      	add	r3, r2
 800ca38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ca3c:	653b      	str	r3, [r7, #80]	; 0x50
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	895b      	ldrh	r3, [r3, #10]
 800ca42:	085b      	lsrs	r3, r3, #1
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca4c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	785b      	ldrb	r3, [r3, #1]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f040 8093 	bne.w	800cb7e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ca68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d01b      	beq.n	800caac <USB_ActivateEndpoint+0x4cc>
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	4413      	add	r3, r2
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	441a      	add	r2, r3
 800ca96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800caa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800caba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d01b      	beq.n	800cafc <USB_ActivateEndpoint+0x51c>
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cada:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	441a      	add	r2, r3
 800cae6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb12:	873b      	strh	r3, [r7, #56]	; 0x38
 800cb14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cb16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cb1a:	873b      	strh	r3, [r7, #56]	; 0x38
 800cb1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cb1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cb22:	873b      	strh	r3, [r7, #56]	; 0x38
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	441a      	add	r2, r3
 800cb2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cb30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb5a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	441a      	add	r2, r3
 800cb66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cb68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	8013      	strh	r3, [r2, #0]
 800cb7c:	e0bc      	b.n	800ccf8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800cb8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d01d      	beq.n	800cbd6 <USB_ActivateEndpoint+0x5f6>
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	441a      	add	r2, r3
 800cbbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800cbc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cbce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4413      	add	r3, r2
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800cbe6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d01d      	beq.n	800cc2e <USB_ActivateEndpoint+0x64e>
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	4413      	add	r3, r2
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc08:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	441a      	add	r2, r3
 800cc16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cc1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	78db      	ldrb	r3, [r3, #3]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d024      	beq.n	800cc80 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	881b      	ldrh	r3, [r3, #0]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cc50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cc54:	f083 0320 	eor.w	r3, r3, #32
 800cc58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	441a      	add	r2, r3
 800cc66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cc6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	8013      	strh	r3, [r2, #0]
 800cc7e:	e01d      	b.n	800ccbc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4413      	add	r3, r2
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	441a      	add	r2, r3
 800cca4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	441a      	add	r2, r3
 800cce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ccf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3774      	adds	r7, #116	; 0x74
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b08d      	sub	sp, #52	; 0x34
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	7b1b      	ldrb	r3, [r3, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f040 808e 	bne.w	800ce38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	785b      	ldrb	r3, [r3, #1]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d044      	beq.n	800cdae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	81bb      	strh	r3, [r7, #12]
 800cd32:	89bb      	ldrh	r3, [r7, #12]
 800cd34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d01b      	beq.n	800cd74 <USB_DeactivateEndpoint+0x6c>
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	881b      	ldrh	r3, [r3, #0]
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd52:	817b      	strh	r3, [r7, #10]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	441a      	add	r2, r3
 800cd5e:	897b      	ldrh	r3, [r7, #10]
 800cd60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd8a:	813b      	strh	r3, [r7, #8]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	441a      	add	r2, r3
 800cd96:	893b      	ldrh	r3, [r7, #8]
 800cd98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cda0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cda4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	8013      	strh	r3, [r2, #0]
 800cdac:	e192      	b.n	800d0d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	827b      	strh	r3, [r7, #18]
 800cdbc:	8a7b      	ldrh	r3, [r7, #18]
 800cdbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d01b      	beq.n	800cdfe <USB_DeactivateEndpoint+0xf6>
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cddc:	823b      	strh	r3, [r7, #16]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	441a      	add	r2, r3
 800cde8:	8a3b      	ldrh	r3, [r7, #16]
 800cdea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cdf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce14:	81fb      	strh	r3, [r7, #14]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	441a      	add	r2, r3
 800ce20:	89fb      	ldrh	r3, [r7, #14]
 800ce22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	8013      	strh	r3, [r2, #0]
 800ce36:	e14d      	b.n	800d0d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f040 80a5 	bne.w	800cf8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	4413      	add	r3, r2
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	843b      	strh	r3, [r7, #32]
 800ce50:	8c3b      	ldrh	r3, [r7, #32]
 800ce52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d01b      	beq.n	800ce92 <USB_DeactivateEndpoint+0x18a>
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce70:	83fb      	strh	r3, [r7, #30]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	441a      	add	r2, r3
 800ce7c:	8bfb      	ldrh	r3, [r7, #30]
 800ce7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	83bb      	strh	r3, [r7, #28]
 800cea0:	8bbb      	ldrh	r3, [r7, #28]
 800cea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d01b      	beq.n	800cee2 <USB_DeactivateEndpoint+0x1da>
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4413      	add	r3, r2
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cec0:	837b      	strh	r3, [r7, #26]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	441a      	add	r2, r3
 800cecc:	8b7b      	ldrh	r3, [r7, #26]
 800cece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ced2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ced6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cede:	b29b      	uxth	r3, r3
 800cee0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cef8:	833b      	strh	r3, [r7, #24]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	441a      	add	r2, r3
 800cf04:	8b3b      	ldrh	r3, [r7, #24]
 800cf06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf30:	82fb      	strh	r3, [r7, #22]
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	441a      	add	r2, r3
 800cf3c:	8afb      	ldrh	r3, [r7, #22]
 800cf3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf68:	82bb      	strh	r3, [r7, #20]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	441a      	add	r2, r3
 800cf74:	8abb      	ldrh	r3, [r7, #20]
 800cf76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	8013      	strh	r3, [r2, #0]
 800cf8a:	e0a3      	b.n	800d0d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d01b      	beq.n	800cfdc <USB_DeactivateEndpoint+0x2d4>
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	441a      	add	r2, r3
 800cfc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cfc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800cfea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d01b      	beq.n	800d02c <USB_DeactivateEndpoint+0x324>
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	b29b      	uxth	r3, r3
 800d002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d00a:	853b      	strh	r3, [r7, #40]	; 0x28
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	441a      	add	r2, r3
 800d016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d01c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d028:	b29b      	uxth	r3, r3
 800d02a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d042:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	441a      	add	r2, r3
 800d04e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d060:	b29b      	uxth	r3, r3
 800d062:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	881b      	ldrh	r3, [r3, #0]
 800d070:	b29b      	uxth	r3, r3
 800d072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d07a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	441a      	add	r2, r3
 800d086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d08c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d098:	b29b      	uxth	r3, r3
 800d09a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	4413      	add	r3, r2
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	441a      	add	r2, r3
 800d0be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3734      	adds	r7, #52	; 0x34
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b0c2      	sub	sp, #264	; 0x108
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	1d3b      	adds	r3, r7, #4
 800d0ea:	6018      	str	r0, [r3, #0]
 800d0ec:	463b      	mov	r3, r7
 800d0ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d0f0:	463b      	mov	r3, r7
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	785b      	ldrb	r3, [r3, #1]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	f040 8509 	bne.w	800db0e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d0fc:	463b      	mov	r3, r7
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	699a      	ldr	r2, [r3, #24]
 800d102:	463b      	mov	r3, r7
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d905      	bls.n	800d118 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800d10c:	463b      	mov	r3, r7
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d116:	e004      	b.n	800d122 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800d118:	463b      	mov	r3, r7
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d122:	463b      	mov	r3, r7
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	7b1b      	ldrb	r3, [r3, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d128      	bne.n	800d17e <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d12c:	463b      	mov	r3, r7
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6959      	ldr	r1, [r3, #20]
 800d132:	463b      	mov	r3, r7
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	88da      	ldrh	r2, [r3, #6]
 800d138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	1d38      	adds	r0, r7, #4
 800d140:	6800      	ldr	r0, [r0, #0]
 800d142:	f001 f9da 	bl	800e4fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d146:	1d3b      	adds	r3, r7, #4
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	613b      	str	r3, [r7, #16]
 800d14c:	1d3b      	adds	r3, r7, #4
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d154:	b29b      	uxth	r3, r3
 800d156:	461a      	mov	r2, r3
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	4413      	add	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
 800d15e:	463b      	mov	r3, r7
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	00da      	lsls	r2, r3, #3
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	4413      	add	r3, r2
 800d16a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d174:	b29a      	uxth	r2, r3
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	801a      	strh	r2, [r3, #0]
 800d17a:	f000 bc9f 	b.w	800dabc <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d17e:	463b      	mov	r3, r7
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	78db      	ldrb	r3, [r3, #3]
 800d184:	2b02      	cmp	r3, #2
 800d186:	f040 8347 	bne.w	800d818 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d18a:	463b      	mov	r3, r7
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6a1a      	ldr	r2, [r3, #32]
 800d190:	463b      	mov	r3, r7
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	429a      	cmp	r2, r3
 800d198:	f240 82eb 	bls.w	800d772 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d19c:	1d3b      	adds	r3, r7, #4
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	463b      	mov	r3, r7
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800d1ba:	1d3b      	adds	r3, r7, #4
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	463b      	mov	r3, r7
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	441a      	add	r2, r3
 800d1c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d1cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d1e0:	463b      	mov	r3, r7
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6a1a      	ldr	r2, [r3, #32]
 800d1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ea:	1ad2      	subs	r2, r2, r3
 800d1ec:	463b      	mov	r3, r7
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d1f2:	1d3b      	adds	r3, r7, #4
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	b29b      	uxth	r3, r3
 800d204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 8159 	beq.w	800d4c0 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d20e:	1d3b      	adds	r3, r7, #4
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	633b      	str	r3, [r7, #48]	; 0x30
 800d214:	463b      	mov	r3, r7
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	785b      	ldrb	r3, [r3, #1]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d164      	bne.n	800d2e8 <USB_EPStartXfer+0x206>
 800d21e:	1d3b      	adds	r3, r7, #4
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	62bb      	str	r3, [r7, #40]	; 0x28
 800d224:	1d3b      	adds	r3, r7, #4
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	461a      	mov	r2, r3
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	4413      	add	r3, r2
 800d234:	62bb      	str	r3, [r7, #40]	; 0x28
 800d236:	463b      	mov	r3, r7
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	00da      	lsls	r2, r3, #3
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	4413      	add	r3, r2
 800d242:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d246:	627b      	str	r3, [r7, #36]	; 0x24
 800d248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d24c:	2b3e      	cmp	r3, #62	; 0x3e
 800d24e:	d91c      	bls.n	800d28a <USB_EPStartXfer+0x1a8>
 800d250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d254:	095b      	lsrs	r3, r3, #5
 800d256:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d25e:	f003 031f 	and.w	r3, r3, #31
 800d262:	2b00      	cmp	r3, #0
 800d264:	d104      	bne.n	800d270 <USB_EPStartXfer+0x18e>
 800d266:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d26a:	3b01      	subs	r3, #1
 800d26c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d270:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d274:	b29b      	uxth	r3, r3
 800d276:	029b      	lsls	r3, r3, #10
 800d278:	b29b      	uxth	r3, r3
 800d27a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d27e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d282:	b29a      	uxth	r2, r3
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	801a      	strh	r2, [r3, #0]
 800d288:	e04a      	b.n	800d320 <USB_EPStartXfer+0x23e>
 800d28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d112      	bne.n	800d2b8 <USB_EPStartXfer+0x1d6>
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	b29b      	uxth	r3, r3
 800d298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	801a      	strh	r2, [r3, #0]
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b4:	801a      	strh	r2, [r3, #0]
 800d2b6:	e033      	b.n	800d320 <USB_EPStartXfer+0x23e>
 800d2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2bc:	085b      	lsrs	r3, r3, #1
 800d2be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <USB_EPStartXfer+0x1f6>
 800d2ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d2d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	029b      	lsls	r3, r3, #10
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	e01b      	b.n	800d320 <USB_EPStartXfer+0x23e>
 800d2e8:	463b      	mov	r3, r7
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	785b      	ldrb	r3, [r3, #1]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d116      	bne.n	800d320 <USB_EPStartXfer+0x23e>
 800d2f2:	1d3b      	adds	r3, r7, #4
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d300:	4413      	add	r3, r2
 800d302:	633b      	str	r3, [r7, #48]	; 0x30
 800d304:	463b      	mov	r3, r7
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	00da      	lsls	r2, r3, #3
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	4413      	add	r3, r2
 800d310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d320:	463b      	mov	r3, r7
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	895b      	ldrh	r3, [r3, #10]
 800d326:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d32a:	463b      	mov	r3, r7
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6959      	ldr	r1, [r3, #20]
 800d330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d334:	b29b      	uxth	r3, r3
 800d336:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d33a:	1d38      	adds	r0, r7, #4
 800d33c:	6800      	ldr	r0, [r0, #0]
 800d33e:	f001 f8dc 	bl	800e4fa <USB_WritePMA>
            ep->xfer_buff += len;
 800d342:	463b      	mov	r3, r7
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	695a      	ldr	r2, [r3, #20]
 800d348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d34c:	441a      	add	r2, r3
 800d34e:	463b      	mov	r3, r7
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d354:	463b      	mov	r3, r7
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6a1a      	ldr	r2, [r3, #32]
 800d35a:	463b      	mov	r3, r7
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	429a      	cmp	r2, r3
 800d362:	d909      	bls.n	800d378 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800d364:	463b      	mov	r3, r7
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6a1a      	ldr	r2, [r3, #32]
 800d36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d36e:	1ad2      	subs	r2, r2, r3
 800d370:	463b      	mov	r3, r7
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	621a      	str	r2, [r3, #32]
 800d376:	e008      	b.n	800d38a <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800d378:	463b      	mov	r3, r7
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6a1b      	ldr	r3, [r3, #32]
 800d37e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d382:	463b      	mov	r3, r7
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2200      	movs	r2, #0
 800d388:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d38a:	463b      	mov	r3, r7
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d164      	bne.n	800d45e <USB_EPStartXfer+0x37c>
 800d394:	1d3b      	adds	r3, r7, #4
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	61bb      	str	r3, [r7, #24]
 800d39a:	1d3b      	adds	r3, r7, #4
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	61bb      	str	r3, [r7, #24]
 800d3ac:	463b      	mov	r3, r7
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	00da      	lsls	r2, r3, #3
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3c2:	2b3e      	cmp	r3, #62	; 0x3e
 800d3c4:	d91c      	bls.n	800d400 <USB_EPStartXfer+0x31e>
 800d3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3ca:	095b      	lsrs	r3, r3, #5
 800d3cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3d4:	f003 031f 	and.w	r3, r3, #31
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d104      	bne.n	800d3e6 <USB_EPStartXfer+0x304>
 800d3dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d3e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	029b      	lsls	r3, r3, #10
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	801a      	strh	r2, [r3, #0]
 800d3fe:	e04d      	b.n	800d49c <USB_EPStartXfer+0x3ba>
 800d400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d404:	2b00      	cmp	r3, #0
 800d406:	d112      	bne.n	800d42e <USB_EPStartXfer+0x34c>
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d412:	b29a      	uxth	r2, r3
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	801a      	strh	r2, [r3, #0]
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d426:	b29a      	uxth	r2, r3
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	801a      	strh	r2, [r3, #0]
 800d42c:	e036      	b.n	800d49c <USB_EPStartXfer+0x3ba>
 800d42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d432:	085b      	lsrs	r3, r3, #1
 800d434:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d004      	beq.n	800d44e <USB_EPStartXfer+0x36c>
 800d444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d448:	3301      	adds	r3, #1
 800d44a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d44e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d452:	b29b      	uxth	r3, r3
 800d454:	029b      	lsls	r3, r3, #10
 800d456:	b29a      	uxth	r2, r3
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	801a      	strh	r2, [r3, #0]
 800d45c:	e01e      	b.n	800d49c <USB_EPStartXfer+0x3ba>
 800d45e:	463b      	mov	r3, r7
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	785b      	ldrb	r3, [r3, #1]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d119      	bne.n	800d49c <USB_EPStartXfer+0x3ba>
 800d468:	1d3b      	adds	r3, r7, #4
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	623b      	str	r3, [r7, #32]
 800d46e:	1d3b      	adds	r3, r7, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d476:	b29b      	uxth	r3, r3
 800d478:	461a      	mov	r2, r3
 800d47a:	6a3b      	ldr	r3, [r7, #32]
 800d47c:	4413      	add	r3, r2
 800d47e:	623b      	str	r3, [r7, #32]
 800d480:	463b      	mov	r3, r7
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	00da      	lsls	r2, r3, #3
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	4413      	add	r3, r2
 800d48c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d490:	61fb      	str	r3, [r7, #28]
 800d492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d496:	b29a      	uxth	r2, r3
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d49c:	463b      	mov	r3, r7
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	891b      	ldrh	r3, [r3, #8]
 800d4a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4a6:	463b      	mov	r3, r7
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	6959      	ldr	r1, [r3, #20]
 800d4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d4b6:	1d38      	adds	r0, r7, #4
 800d4b8:	6800      	ldr	r0, [r0, #0]
 800d4ba:	f001 f81e 	bl	800e4fa <USB_WritePMA>
 800d4be:	e2fd      	b.n	800dabc <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4c0:	463b      	mov	r3, r7
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d164      	bne.n	800d594 <USB_EPStartXfer+0x4b2>
 800d4ca:	1d3b      	adds	r3, r7, #4
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4d0:	1d3b      	adds	r3, r7, #4
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	461a      	mov	r2, r3
 800d4dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4de:	4413      	add	r3, r2
 800d4e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4e2:	463b      	mov	r3, r7
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	00da      	lsls	r2, r3, #3
 800d4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ec:	4413      	add	r3, r2
 800d4ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4f2:	647b      	str	r3, [r7, #68]	; 0x44
 800d4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4f8:	2b3e      	cmp	r3, #62	; 0x3e
 800d4fa:	d91c      	bls.n	800d536 <USB_EPStartXfer+0x454>
 800d4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d500:	095b      	lsrs	r3, r3, #5
 800d502:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d50a:	f003 031f 	and.w	r3, r3, #31
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d104      	bne.n	800d51c <USB_EPStartXfer+0x43a>
 800d512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d516:	3b01      	subs	r3, #1
 800d518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d51c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d520:	b29b      	uxth	r3, r3
 800d522:	029b      	lsls	r3, r3, #10
 800d524:	b29b      	uxth	r3, r3
 800d526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d52e:	b29a      	uxth	r2, r3
 800d530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d532:	801a      	strh	r2, [r3, #0]
 800d534:	e04d      	b.n	800d5d2 <USB_EPStartXfer+0x4f0>
 800d536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d112      	bne.n	800d564 <USB_EPStartXfer+0x482>
 800d53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	b29b      	uxth	r3, r3
 800d544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d548:	b29a      	uxth	r2, r3
 800d54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d54c:	801a      	strh	r2, [r3, #0]
 800d54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	b29b      	uxth	r3, r3
 800d554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d560:	801a      	strh	r2, [r3, #0]
 800d562:	e036      	b.n	800d5d2 <USB_EPStartXfer+0x4f0>
 800d564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d568:	085b      	lsrs	r3, r3, #1
 800d56a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	d004      	beq.n	800d584 <USB_EPStartXfer+0x4a2>
 800d57a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d57e:	3301      	adds	r3, #1
 800d580:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d584:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d588:	b29b      	uxth	r3, r3
 800d58a:	029b      	lsls	r3, r3, #10
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d590:	801a      	strh	r2, [r3, #0]
 800d592:	e01e      	b.n	800d5d2 <USB_EPStartXfer+0x4f0>
 800d594:	463b      	mov	r3, r7
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	785b      	ldrb	r3, [r3, #1]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d119      	bne.n	800d5d2 <USB_EPStartXfer+0x4f0>
 800d59e:	1d3b      	adds	r3, r7, #4
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	653b      	str	r3, [r7, #80]	; 0x50
 800d5a4:	1d3b      	adds	r3, r7, #4
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5b2:	4413      	add	r3, r2
 800d5b4:	653b      	str	r3, [r7, #80]	; 0x50
 800d5b6:	463b      	mov	r3, r7
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	00da      	lsls	r2, r3, #3
 800d5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d5d2:	463b      	mov	r3, r7
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	891b      	ldrh	r3, [r3, #8]
 800d5d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5dc:	463b      	mov	r3, r7
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6959      	ldr	r1, [r3, #20]
 800d5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d5ec:	1d38      	adds	r0, r7, #4
 800d5ee:	6800      	ldr	r0, [r0, #0]
 800d5f0:	f000 ff83 	bl	800e4fa <USB_WritePMA>
            ep->xfer_buff += len;
 800d5f4:	463b      	mov	r3, r7
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	695a      	ldr	r2, [r3, #20]
 800d5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5fe:	441a      	add	r2, r3
 800d600:	463b      	mov	r3, r7
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d606:	463b      	mov	r3, r7
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6a1a      	ldr	r2, [r3, #32]
 800d60c:	463b      	mov	r3, r7
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	429a      	cmp	r2, r3
 800d614:	d909      	bls.n	800d62a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800d616:	463b      	mov	r3, r7
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6a1a      	ldr	r2, [r3, #32]
 800d61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d620:	1ad2      	subs	r2, r2, r3
 800d622:	463b      	mov	r3, r7
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	621a      	str	r2, [r3, #32]
 800d628:	e008      	b.n	800d63c <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800d62a:	463b      	mov	r3, r7
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
 800d630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d634:	463b      	mov	r3, r7
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2200      	movs	r2, #0
 800d63a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d63c:	1d3b      	adds	r3, r7, #4
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	643b      	str	r3, [r7, #64]	; 0x40
 800d642:	463b      	mov	r3, r7
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	785b      	ldrb	r3, [r3, #1]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d164      	bne.n	800d716 <USB_EPStartXfer+0x634>
 800d64c:	1d3b      	adds	r3, r7, #4
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	63bb      	str	r3, [r7, #56]	; 0x38
 800d652:	1d3b      	adds	r3, r7, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	461a      	mov	r2, r3
 800d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d660:	4413      	add	r3, r2
 800d662:	63bb      	str	r3, [r7, #56]	; 0x38
 800d664:	463b      	mov	r3, r7
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	00da      	lsls	r2, r3, #3
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	4413      	add	r3, r2
 800d670:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d674:	637b      	str	r3, [r7, #52]	; 0x34
 800d676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d67a:	2b3e      	cmp	r3, #62	; 0x3e
 800d67c:	d91c      	bls.n	800d6b8 <USB_EPStartXfer+0x5d6>
 800d67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d682:	095b      	lsrs	r3, r3, #5
 800d684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d68c:	f003 031f 	and.w	r3, r3, #31
 800d690:	2b00      	cmp	r3, #0
 800d692:	d104      	bne.n	800d69e <USB_EPStartXfer+0x5bc>
 800d694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d698:	3b01      	subs	r3, #1
 800d69a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d69e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	029b      	lsls	r3, r3, #10
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b4:	801a      	strh	r2, [r3, #0]
 800d6b6:	e04a      	b.n	800d74e <USB_EPStartXfer+0x66c>
 800d6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d112      	bne.n	800d6e6 <USB_EPStartXfer+0x604>
 800d6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ce:	801a      	strh	r2, [r3, #0]
 800d6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d2:	881b      	ldrh	r3, [r3, #0]
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e2:	801a      	strh	r2, [r3, #0]
 800d6e4:	e033      	b.n	800d74e <USB_EPStartXfer+0x66c>
 800d6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6ea:	085b      	lsrs	r3, r3, #1
 800d6ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <USB_EPStartXfer+0x624>
 800d6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d700:	3301      	adds	r3, #1
 800d702:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	029b      	lsls	r3, r3, #10
 800d70e:	b29a      	uxth	r2, r3
 800d710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d712:	801a      	strh	r2, [r3, #0]
 800d714:	e01b      	b.n	800d74e <USB_EPStartXfer+0x66c>
 800d716:	463b      	mov	r3, r7
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	785b      	ldrb	r3, [r3, #1]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d116      	bne.n	800d74e <USB_EPStartXfer+0x66c>
 800d720:	1d3b      	adds	r3, r7, #4
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d728:	b29b      	uxth	r3, r3
 800d72a:	461a      	mov	r2, r3
 800d72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72e:	4413      	add	r3, r2
 800d730:	643b      	str	r3, [r7, #64]	; 0x40
 800d732:	463b      	mov	r3, r7
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	00da      	lsls	r2, r3, #3
 800d73a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d73c:	4413      	add	r3, r2
 800d73e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d748:	b29a      	uxth	r2, r3
 800d74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d74e:	463b      	mov	r3, r7
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	895b      	ldrh	r3, [r3, #10]
 800d754:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d758:	463b      	mov	r3, r7
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6959      	ldr	r1, [r3, #20]
 800d75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d762:	b29b      	uxth	r3, r3
 800d764:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d768:	1d38      	adds	r0, r7, #4
 800d76a:	6800      	ldr	r0, [r0, #0]
 800d76c:	f000 fec5 	bl	800e4fa <USB_WritePMA>
 800d770:	e1a4      	b.n	800dabc <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d772:	463b      	mov	r3, r7
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d77c:	1d3b      	adds	r3, r7, #4
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	463b      	mov	r3, r7
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d796:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d79a:	1d3b      	adds	r3, r7, #4
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	463b      	mov	r3, r7
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	441a      	add	r2, r3
 800d7a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d7ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d7c0:	1d3b      	adds	r3, r7, #4
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7c6:	1d3b      	adds	r3, r7, #4
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7d4:	4413      	add	r3, r2
 800d7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7d8:	463b      	mov	r3, r7
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	00da      	lsls	r2, r3, #3
 800d7e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e2:	4413      	add	r3, r2
 800d7e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d7e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d7f4:	463b      	mov	r3, r7
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	891b      	ldrh	r3, [r3, #8]
 800d7fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7fe:	463b      	mov	r3, r7
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6959      	ldr	r1, [r3, #20]
 800d804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d808:	b29b      	uxth	r3, r3
 800d80a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d80e:	1d38      	adds	r0, r7, #4
 800d810:	6800      	ldr	r0, [r0, #0]
 800d812:	f000 fe72 	bl	800e4fa <USB_WritePMA>
 800d816:	e151      	b.n	800dabc <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d818:	463b      	mov	r3, r7
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6a1a      	ldr	r2, [r3, #32]
 800d81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d822:	1ad2      	subs	r2, r2, r3
 800d824:	463b      	mov	r3, r7
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d82a:	1d3b      	adds	r3, r7, #4
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	463b      	mov	r3, r7
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 809b 	beq.w	800d97c <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d846:	1d3b      	adds	r3, r7, #4
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	673b      	str	r3, [r7, #112]	; 0x70
 800d84c:	463b      	mov	r3, r7
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	785b      	ldrb	r3, [r3, #1]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d164      	bne.n	800d920 <USB_EPStartXfer+0x83e>
 800d856:	1d3b      	adds	r3, r7, #4
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d85c:	1d3b      	adds	r3, r7, #4
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d864:	b29b      	uxth	r3, r3
 800d866:	461a      	mov	r2, r3
 800d868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d86a:	4413      	add	r3, r2
 800d86c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d86e:	463b      	mov	r3, r7
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	00da      	lsls	r2, r3, #3
 800d876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d878:	4413      	add	r3, r2
 800d87a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d87e:	667b      	str	r3, [r7, #100]	; 0x64
 800d880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d884:	2b3e      	cmp	r3, #62	; 0x3e
 800d886:	d91c      	bls.n	800d8c2 <USB_EPStartXfer+0x7e0>
 800d888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d88c:	095b      	lsrs	r3, r3, #5
 800d88e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d896:	f003 031f 	and.w	r3, r3, #31
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d104      	bne.n	800d8a8 <USB_EPStartXfer+0x7c6>
 800d89e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d8a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	029b      	lsls	r3, r3, #10
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8be:	801a      	strh	r2, [r3, #0]
 800d8c0:	e04a      	b.n	800d958 <USB_EPStartXfer+0x876>
 800d8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d112      	bne.n	800d8f0 <USB_EPStartXfer+0x80e>
 800d8ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8d8:	801a      	strh	r2, [r3, #0]
 800d8da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8ec:	801a      	strh	r2, [r3, #0]
 800d8ee:	e033      	b.n	800d958 <USB_EPStartXfer+0x876>
 800d8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8f4:	085b      	lsrs	r3, r3, #1
 800d8f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	2b00      	cmp	r3, #0
 800d904:	d004      	beq.n	800d910 <USB_EPStartXfer+0x82e>
 800d906:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d90a:	3301      	adds	r3, #1
 800d90c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d910:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d914:	b29b      	uxth	r3, r3
 800d916:	029b      	lsls	r3, r3, #10
 800d918:	b29a      	uxth	r2, r3
 800d91a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d91c:	801a      	strh	r2, [r3, #0]
 800d91e:	e01b      	b.n	800d958 <USB_EPStartXfer+0x876>
 800d920:	463b      	mov	r3, r7
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	785b      	ldrb	r3, [r3, #1]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d116      	bne.n	800d958 <USB_EPStartXfer+0x876>
 800d92a:	1d3b      	adds	r3, r7, #4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d932:	b29b      	uxth	r3, r3
 800d934:	461a      	mov	r2, r3
 800d936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d938:	4413      	add	r3, r2
 800d93a:	673b      	str	r3, [r7, #112]	; 0x70
 800d93c:	463b      	mov	r3, r7
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	00da      	lsls	r2, r3, #3
 800d944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d946:	4413      	add	r3, r2
 800d948:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d94c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d952:	b29a      	uxth	r2, r3
 800d954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d956:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d958:	463b      	mov	r3, r7
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	895b      	ldrh	r3, [r3, #10]
 800d95e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d962:	463b      	mov	r3, r7
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6959      	ldr	r1, [r3, #20]
 800d968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d972:	1d38      	adds	r0, r7, #4
 800d974:	6800      	ldr	r0, [r0, #0]
 800d976:	f000 fdc0 	bl	800e4fa <USB_WritePMA>
 800d97a:	e09f      	b.n	800dabc <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d97c:	463b      	mov	r3, r7
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	785b      	ldrb	r3, [r3, #1]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d164      	bne.n	800da50 <USB_EPStartXfer+0x96e>
 800d986:	1d3b      	adds	r3, r7, #4
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d98c:	1d3b      	adds	r3, r7, #4
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d994:	b29b      	uxth	r3, r3
 800d996:	461a      	mov	r2, r3
 800d998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d99a:	4413      	add	r3, r2
 800d99c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d99e:	463b      	mov	r3, r7
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	00da      	lsls	r2, r3, #3
 800d9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d9ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800d9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9b4:	2b3e      	cmp	r3, #62	; 0x3e
 800d9b6:	d91c      	bls.n	800d9f2 <USB_EPStartXfer+0x910>
 800d9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9bc:	095b      	lsrs	r3, r3, #5
 800d9be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9c6:	f003 031f 	and.w	r3, r3, #31
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d104      	bne.n	800d9d8 <USB_EPStartXfer+0x8f6>
 800d9ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d9d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	029b      	lsls	r3, r3, #10
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ee:	801a      	strh	r2, [r3, #0]
 800d9f0:	e053      	b.n	800da9a <USB_EPStartXfer+0x9b8>
 800d9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d112      	bne.n	800da20 <USB_EPStartXfer+0x93e>
 800d9fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800da04:	b29a      	uxth	r2, r3
 800da06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da08:	801a      	strh	r2, [r3, #0]
 800da0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da18:	b29a      	uxth	r2, r3
 800da1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da1c:	801a      	strh	r2, [r3, #0]
 800da1e:	e03c      	b.n	800da9a <USB_EPStartXfer+0x9b8>
 800da20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da24:	085b      	lsrs	r3, r3, #1
 800da26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	d004      	beq.n	800da40 <USB_EPStartXfer+0x95e>
 800da36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da3a:	3301      	adds	r3, #1
 800da3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da44:	b29b      	uxth	r3, r3
 800da46:	029b      	lsls	r3, r3, #10
 800da48:	b29a      	uxth	r2, r3
 800da4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da4c:	801a      	strh	r2, [r3, #0]
 800da4e:	e024      	b.n	800da9a <USB_EPStartXfer+0x9b8>
 800da50:	463b      	mov	r3, r7
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	785b      	ldrb	r3, [r3, #1]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d11f      	bne.n	800da9a <USB_EPStartXfer+0x9b8>
 800da5a:	1d3b      	adds	r3, r7, #4
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da62:	1d3b      	adds	r3, r7, #4
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	461a      	mov	r2, r3
 800da6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da72:	4413      	add	r3, r2
 800da74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da78:	463b      	mov	r3, r7
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	00da      	lsls	r2, r3, #3
 800da80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da84:	4413      	add	r3, r2
 800da86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800da8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800da8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da92:	b29a      	uxth	r2, r3
 800da94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da9a:	463b      	mov	r3, r7
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	891b      	ldrh	r3, [r3, #8]
 800daa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800daa4:	463b      	mov	r3, r7
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6959      	ldr	r1, [r3, #20]
 800daaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daae:	b29b      	uxth	r3, r3
 800dab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dab4:	1d38      	adds	r0, r7, #4
 800dab6:	6800      	ldr	r0, [r0, #0]
 800dab8:	f000 fd1f 	bl	800e4fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dabc:	1d3b      	adds	r3, r7, #4
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	463b      	mov	r3, r7
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dad6:	817b      	strh	r3, [r7, #10]
 800dad8:	897b      	ldrh	r3, [r7, #10]
 800dada:	f083 0310 	eor.w	r3, r3, #16
 800dade:	817b      	strh	r3, [r7, #10]
 800dae0:	897b      	ldrh	r3, [r7, #10]
 800dae2:	f083 0320 	eor.w	r3, r3, #32
 800dae6:	817b      	strh	r3, [r7, #10]
 800dae8:	1d3b      	adds	r3, r7, #4
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	463b      	mov	r3, r7
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	441a      	add	r2, r3
 800daf6:	897b      	ldrh	r3, [r7, #10]
 800daf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dafc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db08:	b29b      	uxth	r3, r3
 800db0a:	8013      	strh	r3, [r2, #0]
 800db0c:	e3b5      	b.n	800e27a <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800db0e:	463b      	mov	r3, r7
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	7b1b      	ldrb	r3, [r3, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	f040 8090 	bne.w	800dc3a <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800db1a:	463b      	mov	r3, r7
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	699a      	ldr	r2, [r3, #24]
 800db20:	463b      	mov	r3, r7
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	429a      	cmp	r2, r3
 800db28:	d90e      	bls.n	800db48 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800db2a:	463b      	mov	r3, r7
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800db34:	463b      	mov	r3, r7
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	699a      	ldr	r2, [r3, #24]
 800db3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db3e:	1ad2      	subs	r2, r2, r3
 800db40:	463b      	mov	r3, r7
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	619a      	str	r2, [r3, #24]
 800db46:	e008      	b.n	800db5a <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800db48:	463b      	mov	r3, r7
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800db52:	463b      	mov	r3, r7
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2200      	movs	r2, #0
 800db58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800db5a:	1d3b      	adds	r3, r7, #4
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db62:	1d3b      	adds	r3, r7, #4
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	461a      	mov	r2, r3
 800db6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db72:	4413      	add	r3, r2
 800db74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db78:	463b      	mov	r3, r7
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	00da      	lsls	r2, r3, #3
 800db80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db84:	4413      	add	r3, r2
 800db86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800db8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800db8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db92:	2b3e      	cmp	r3, #62	; 0x3e
 800db94:	d91d      	bls.n	800dbd2 <USB_EPStartXfer+0xaf0>
 800db96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db9a:	095b      	lsrs	r3, r3, #5
 800db9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dba4:	f003 031f 	and.w	r3, r3, #31
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <USB_EPStartXfer+0xad4>
 800dbac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dbb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	029b      	lsls	r3, r3, #10
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbce:	801a      	strh	r2, [r3, #0]
 800dbd0:	e325      	b.n	800e21e <USB_EPStartXfer+0x113c>
 800dbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d116      	bne.n	800dc08 <USB_EPStartXfer+0xb26>
 800dbda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbec:	801a      	strh	r2, [r3, #0]
 800dbee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbf2:	881b      	ldrh	r3, [r3, #0]
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc04:	801a      	strh	r2, [r3, #0]
 800dc06:	e30a      	b.n	800e21e <USB_EPStartXfer+0x113c>
 800dc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc0c:	085b      	lsrs	r3, r3, #1
 800dc0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d004      	beq.n	800dc28 <USB_EPStartXfer+0xb46>
 800dc1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc22:	3301      	adds	r3, #1
 800dc24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	029b      	lsls	r3, r3, #10
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc36:	801a      	strh	r2, [r3, #0]
 800dc38:	e2f1      	b.n	800e21e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dc3a:	463b      	mov	r3, r7
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	78db      	ldrb	r3, [r3, #3]
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	f040 818f 	bne.w	800df64 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dc46:	463b      	mov	r3, r7
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	785b      	ldrb	r3, [r3, #1]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d175      	bne.n	800dd3c <USB_EPStartXfer+0xc5a>
 800dc50:	1d3b      	adds	r3, r7, #4
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc58:	1d3b      	adds	r3, r7, #4
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	461a      	mov	r2, r3
 800dc64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc68:	4413      	add	r3, r2
 800dc6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc6e:	463b      	mov	r3, r7
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	00da      	lsls	r2, r3, #3
 800dc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dc80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dc84:	463b      	mov	r3, r7
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	2b3e      	cmp	r3, #62	; 0x3e
 800dc8c:	d91f      	bls.n	800dcce <USB_EPStartXfer+0xbec>
 800dc8e:	463b      	mov	r3, r7
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	095b      	lsrs	r3, r3, #5
 800dc96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dc9a:	463b      	mov	r3, r7
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	f003 031f 	and.w	r3, r3, #31
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d104      	bne.n	800dcb2 <USB_EPStartXfer+0xbd0>
 800dca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcac:	3b01      	subs	r3, #1
 800dcae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	029b      	lsls	r3, r3, #10
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcca:	801a      	strh	r2, [r3, #0]
 800dccc:	e05c      	b.n	800dd88 <USB_EPStartXfer+0xca6>
 800dcce:	463b      	mov	r3, r7
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d116      	bne.n	800dd06 <USB_EPStartXfer+0xc24>
 800dcd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcdc:	881b      	ldrh	r3, [r3, #0]
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcea:	801a      	strh	r2, [r3, #0]
 800dcec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd02:	801a      	strh	r2, [r3, #0]
 800dd04:	e040      	b.n	800dd88 <USB_EPStartXfer+0xca6>
 800dd06:	463b      	mov	r3, r7
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	085b      	lsrs	r3, r3, #1
 800dd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd12:	463b      	mov	r3, r7
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	f003 0301 	and.w	r3, r3, #1
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d004      	beq.n	800dd2a <USB_EPStartXfer+0xc48>
 800dd20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd24:	3301      	adds	r3, #1
 800dd26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	029b      	lsls	r3, r3, #10
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd38:	801a      	strh	r2, [r3, #0]
 800dd3a:	e025      	b.n	800dd88 <USB_EPStartXfer+0xca6>
 800dd3c:	463b      	mov	r3, r7
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	785b      	ldrb	r3, [r3, #1]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d120      	bne.n	800dd88 <USB_EPStartXfer+0xca6>
 800dd46:	1d3b      	adds	r3, r7, #4
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd4e:	1d3b      	adds	r3, r7, #4
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	461a      	mov	r2, r3
 800dd5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd5e:	4413      	add	r3, r2
 800dd60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd64:	463b      	mov	r3, r7
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	00da      	lsls	r2, r3, #3
 800dd6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd70:	4413      	add	r3, r2
 800dd72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dd76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd7a:	463b      	mov	r3, r7
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd86:	801a      	strh	r2, [r3, #0]
 800dd88:	1d3b      	adds	r3, r7, #4
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dd90:	463b      	mov	r3, r7
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	785b      	ldrb	r3, [r3, #1]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d175      	bne.n	800de86 <USB_EPStartXfer+0xda4>
 800dd9a:	1d3b      	adds	r3, r7, #4
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dda2:	1d3b      	adds	r3, r7, #4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	461a      	mov	r2, r3
 800ddae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ddb8:	463b      	mov	r3, r7
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	00da      	lsls	r2, r3, #3
 800ddc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ddca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ddce:	463b      	mov	r3, r7
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	2b3e      	cmp	r3, #62	; 0x3e
 800ddd6:	d91f      	bls.n	800de18 <USB_EPStartXfer+0xd36>
 800ddd8:	463b      	mov	r3, r7
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	095b      	lsrs	r3, r3, #5
 800dde0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dde4:	463b      	mov	r3, r7
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	f003 031f 	and.w	r3, r3, #31
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d104      	bne.n	800ddfc <USB_EPStartXfer+0xd1a>
 800ddf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ddfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de00:	b29b      	uxth	r3, r3
 800de02:	029b      	lsls	r3, r3, #10
 800de04:	b29b      	uxth	r3, r3
 800de06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de0e:	b29a      	uxth	r2, r3
 800de10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de14:	801a      	strh	r2, [r3, #0]
 800de16:	e058      	b.n	800deca <USB_EPStartXfer+0xde8>
 800de18:	463b      	mov	r3, r7
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d116      	bne.n	800de50 <USB_EPStartXfer+0xd6e>
 800de22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800de2e:	b29a      	uxth	r2, r3
 800de30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de34:	801a      	strh	r2, [r3, #0]
 800de36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de3a:	881b      	ldrh	r3, [r3, #0]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de46:	b29a      	uxth	r2, r3
 800de48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de4c:	801a      	strh	r2, [r3, #0]
 800de4e:	e03c      	b.n	800deca <USB_EPStartXfer+0xde8>
 800de50:	463b      	mov	r3, r7
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	085b      	lsrs	r3, r3, #1
 800de58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800de5c:	463b      	mov	r3, r7
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b00      	cmp	r3, #0
 800de68:	d004      	beq.n	800de74 <USB_EPStartXfer+0xd92>
 800de6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de6e:	3301      	adds	r3, #1
 800de70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800de74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de78:	b29b      	uxth	r3, r3
 800de7a:	029b      	lsls	r3, r3, #10
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de82:	801a      	strh	r2, [r3, #0]
 800de84:	e021      	b.n	800deca <USB_EPStartXfer+0xde8>
 800de86:	463b      	mov	r3, r7
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	785b      	ldrb	r3, [r3, #1]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d11c      	bne.n	800deca <USB_EPStartXfer+0xde8>
 800de90:	1d3b      	adds	r3, r7, #4
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de98:	b29b      	uxth	r3, r3
 800de9a:	461a      	mov	r2, r3
 800de9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dea0:	4413      	add	r3, r2
 800dea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dea6:	463b      	mov	r3, r7
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	00da      	lsls	r2, r3, #3
 800deae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800deb2:	4413      	add	r3, r2
 800deb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800deb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800debc:	463b      	mov	r3, r7
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dec8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800deca:	463b      	mov	r3, r7
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	69db      	ldr	r3, [r3, #28]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f000 81a4 	beq.w	800e21e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ded6:	1d3b      	adds	r3, r7, #4
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	463b      	mov	r3, r7
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4413      	add	r3, r2
 800dee4:	881b      	ldrh	r3, [r3, #0]
 800dee6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800deea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800deee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800def2:	2b00      	cmp	r3, #0
 800def4:	d005      	beq.n	800df02 <USB_EPStartXfer+0xe20>
 800def6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800defa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	d10d      	bne.n	800df1e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800df02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800df06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f040 8187 	bne.w	800e21e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800df10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800df14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f040 8180 	bne.w	800e21e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800df1e:	1d3b      	adds	r3, r7, #4
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	463b      	mov	r3, r7
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	b29b      	uxth	r3, r3
 800df30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800df3c:	1d3b      	adds	r3, r7, #4
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	463b      	mov	r3, r7
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	441a      	add	r2, r3
 800df4a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800df4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df5e:	b29b      	uxth	r3, r3
 800df60:	8013      	strh	r3, [r2, #0]
 800df62:	e15c      	b.n	800e21e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800df64:	463b      	mov	r3, r7
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	78db      	ldrb	r3, [r3, #3]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	f040 8155 	bne.w	800e21a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800df70:	463b      	mov	r3, r7
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	699a      	ldr	r2, [r3, #24]
 800df76:	463b      	mov	r3, r7
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d90e      	bls.n	800df9e <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800df80:	463b      	mov	r3, r7
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800df8a:	463b      	mov	r3, r7
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	699a      	ldr	r2, [r3, #24]
 800df90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df94:	1ad2      	subs	r2, r2, r3
 800df96:	463b      	mov	r3, r7
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	619a      	str	r2, [r3, #24]
 800df9c:	e008      	b.n	800dfb0 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800df9e:	463b      	mov	r3, r7
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	699b      	ldr	r3, [r3, #24]
 800dfa4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800dfa8:	463b      	mov	r3, r7
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2200      	movs	r2, #0
 800dfae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dfb0:	463b      	mov	r3, r7
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d16f      	bne.n	800e09a <USB_EPStartXfer+0xfb8>
 800dfba:	1d3b      	adds	r3, r7, #4
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dfc2:	1d3b      	adds	r3, r7, #4
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	461a      	mov	r2, r3
 800dfce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dfd8:	463b      	mov	r3, r7
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	00da      	lsls	r2, r3, #3
 800dfe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dfea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dff2:	2b3e      	cmp	r3, #62	; 0x3e
 800dff4:	d91d      	bls.n	800e032 <USB_EPStartXfer+0xf50>
 800dff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dffa:	095b      	lsrs	r3, r3, #5
 800dffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e004:	f003 031f 	and.w	r3, r3, #31
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d104      	bne.n	800e016 <USB_EPStartXfer+0xf34>
 800e00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e010:	3b01      	subs	r3, #1
 800e012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	029b      	lsls	r3, r3, #10
 800e01e:	b29b      	uxth	r3, r3
 800e020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e028:	b29a      	uxth	r2, r3
 800e02a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e02e:	801a      	strh	r2, [r3, #0]
 800e030:	e058      	b.n	800e0e4 <USB_EPStartXfer+0x1002>
 800e032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e036:	2b00      	cmp	r3, #0
 800e038:	d116      	bne.n	800e068 <USB_EPStartXfer+0xf86>
 800e03a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e046:	b29a      	uxth	r2, r3
 800e048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e04c:	801a      	strh	r2, [r3, #0]
 800e04e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	b29b      	uxth	r3, r3
 800e056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e05a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e05e:	b29a      	uxth	r2, r3
 800e060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e064:	801a      	strh	r2, [r3, #0]
 800e066:	e03d      	b.n	800e0e4 <USB_EPStartXfer+0x1002>
 800e068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e06c:	085b      	lsrs	r3, r3, #1
 800e06e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d004      	beq.n	800e088 <USB_EPStartXfer+0xfa6>
 800e07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e082:	3301      	adds	r3, #1
 800e084:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	029b      	lsls	r3, r3, #10
 800e090:	b29a      	uxth	r2, r3
 800e092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e096:	801a      	strh	r2, [r3, #0]
 800e098:	e024      	b.n	800e0e4 <USB_EPStartXfer+0x1002>
 800e09a:	463b      	mov	r3, r7
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	785b      	ldrb	r3, [r3, #1]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d11f      	bne.n	800e0e4 <USB_EPStartXfer+0x1002>
 800e0a4:	1d3b      	adds	r3, r7, #4
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e0ac:	1d3b      	adds	r3, r7, #4
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0bc:	4413      	add	r3, r2
 800e0be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	00da      	lsls	r2, r3, #3
 800e0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e0d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e0e2:	801a      	strh	r2, [r3, #0]
 800e0e4:	1d3b      	adds	r3, r7, #4
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e0ec:	463b      	mov	r3, r7
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	785b      	ldrb	r3, [r3, #1]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d16f      	bne.n	800e1d6 <USB_EPStartXfer+0x10f4>
 800e0f6:	1d3b      	adds	r3, r7, #4
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e0fe:	1d3b      	adds	r3, r7, #4
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e106:	b29b      	uxth	r3, r3
 800e108:	461a      	mov	r2, r3
 800e10a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e10e:	4413      	add	r3, r2
 800e110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e114:	463b      	mov	r3, r7
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	00da      	lsls	r2, r3, #3
 800e11c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e120:	4413      	add	r3, r2
 800e122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e12e:	2b3e      	cmp	r3, #62	; 0x3e
 800e130:	d91d      	bls.n	800e16e <USB_EPStartXfer+0x108c>
 800e132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e136:	095b      	lsrs	r3, r3, #5
 800e138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e140:	f003 031f 	and.w	r3, r3, #31
 800e144:	2b00      	cmp	r3, #0
 800e146:	d104      	bne.n	800e152 <USB_EPStartXfer+0x1070>
 800e148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e14c:	3b01      	subs	r3, #1
 800e14e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e156:	b29b      	uxth	r3, r3
 800e158:	029b      	lsls	r3, r3, #10
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e164:	b29a      	uxth	r2, r3
 800e166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e16a:	801a      	strh	r2, [r3, #0]
 800e16c:	e057      	b.n	800e21e <USB_EPStartXfer+0x113c>
 800e16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e172:	2b00      	cmp	r3, #0
 800e174:	d116      	bne.n	800e1a4 <USB_EPStartXfer+0x10c2>
 800e176:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e17a:	881b      	ldrh	r3, [r3, #0]
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e182:	b29a      	uxth	r2, r3
 800e184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e188:	801a      	strh	r2, [r3, #0]
 800e18a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	b29b      	uxth	r3, r3
 800e192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1a0:	801a      	strh	r2, [r3, #0]
 800e1a2:	e03c      	b.n	800e21e <USB_EPStartXfer+0x113c>
 800e1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1a8:	085b      	lsrs	r3, r3, #1
 800e1aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d004      	beq.n	800e1c4 <USB_EPStartXfer+0x10e2>
 800e1ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1be:	3301      	adds	r3, #1
 800e1c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e1c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	029b      	lsls	r3, r3, #10
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1d2:	801a      	strh	r2, [r3, #0]
 800e1d4:	e023      	b.n	800e21e <USB_EPStartXfer+0x113c>
 800e1d6:	463b      	mov	r3, r7
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	785b      	ldrb	r3, [r3, #1]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d11e      	bne.n	800e21e <USB_EPStartXfer+0x113c>
 800e1e0:	1d3b      	adds	r3, r7, #4
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e1f6:	463b      	mov	r3, r7
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	00da      	lsls	r2, r3, #3
 800e1fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e202:	4413      	add	r3, r2
 800e204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e210:	b29a      	uxth	r2, r3
 800e212:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e216:	801a      	strh	r2, [r3, #0]
 800e218:	e001      	b.n	800e21e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	e02e      	b.n	800e27c <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e21e:	1d3b      	adds	r3, r7, #4
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	463b      	mov	r3, r7
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	b29b      	uxth	r3, r3
 800e230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e238:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e23c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e240:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e244:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e248:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e24c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e250:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e254:	1d3b      	adds	r3, r7, #4
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	463b      	mov	r3, r7
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	441a      	add	r2, r3
 800e262:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e26a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e276:	b29b      	uxth	r3, r3
 800e278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e286:	b480      	push	{r7}
 800e288:	b085      	sub	sp, #20
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	785b      	ldrb	r3, [r3, #1]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d020      	beq.n	800e2da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2ae:	81bb      	strh	r3, [r7, #12]
 800e2b0:	89bb      	ldrh	r3, [r7, #12]
 800e2b2:	f083 0310 	eor.w	r3, r3, #16
 800e2b6:	81bb      	strh	r3, [r7, #12]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	441a      	add	r2, r3
 800e2c2:	89bb      	ldrh	r3, [r7, #12]
 800e2c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	8013      	strh	r3, [r2, #0]
 800e2d8:	e01f      	b.n	800e31a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e2ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2f0:	81fb      	strh	r3, [r7, #14]
 800e2f2:	89fb      	ldrh	r3, [r7, #14]
 800e2f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e2f8:	81fb      	strh	r3, [r7, #14]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	441a      	add	r2, r3
 800e304:	89fb      	ldrh	r3, [r7, #14]
 800e306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e30a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e316:	b29b      	uxth	r3, r3
 800e318:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e328:	b480      	push	{r7}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	7b1b      	ldrb	r3, [r3, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f040 809d 	bne.w	800e476 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d04c      	beq.n	800e3de <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4413      	add	r3, r2
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	823b      	strh	r3, [r7, #16]
 800e352:	8a3b      	ldrh	r3, [r7, #16]
 800e354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d01b      	beq.n	800e394 <USB_EPClearStall+0x6c>
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	4413      	add	r3, r2
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	b29b      	uxth	r3, r3
 800e36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e372:	81fb      	strh	r3, [r7, #14]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	441a      	add	r2, r3
 800e37e:	89fb      	ldrh	r3, [r7, #14]
 800e380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e38c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e390:	b29b      	uxth	r3, r3
 800e392:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	78db      	ldrb	r3, [r3, #3]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d06c      	beq.n	800e476 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	4413      	add	r3, r2
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3b2:	81bb      	strh	r3, [r7, #12]
 800e3b4:	89bb      	ldrh	r3, [r7, #12]
 800e3b6:	f083 0320 	eor.w	r3, r3, #32
 800e3ba:	81bb      	strh	r3, [r7, #12]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	441a      	add	r2, r3
 800e3c6:	89bb      	ldrh	r3, [r7, #12]
 800e3c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	8013      	strh	r3, [r2, #0]
 800e3dc:	e04b      	b.n	800e476 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	4413      	add	r3, r2
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	82fb      	strh	r3, [r7, #22]
 800e3ec:	8afb      	ldrh	r3, [r7, #22]
 800e3ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d01b      	beq.n	800e42e <USB_EPClearStall+0x106>
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	b29b      	uxth	r3, r3
 800e404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e40c:	82bb      	strh	r3, [r7, #20]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	441a      	add	r2, r3
 800e418:	8abb      	ldrh	r3, [r7, #20]
 800e41a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e41e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4413      	add	r3, r2
 800e438:	881b      	ldrh	r3, [r3, #0]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e444:	827b      	strh	r3, [r7, #18]
 800e446:	8a7b      	ldrh	r3, [r7, #18]
 800e448:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e44c:	827b      	strh	r3, [r7, #18]
 800e44e:	8a7b      	ldrh	r3, [r7, #18]
 800e450:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e454:	827b      	strh	r3, [r7, #18]
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	441a      	add	r2, r3
 800e460:	8a7b      	ldrh	r3, [r7, #18]
 800e462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e46a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e472:	b29b      	uxth	r3, r3
 800e474:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	371c      	adds	r7, #28
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	460b      	mov	r3, r1
 800e48e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e490:	78fb      	ldrb	r3, [r7, #3]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d103      	bne.n	800e49e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2280      	movs	r2, #128	; 0x80
 800e49a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b085      	sub	sp, #20
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3714      	adds	r7, #20
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b08d      	sub	sp, #52	; 0x34
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	60f8      	str	r0, [r7, #12]
 800e502:	60b9      	str	r1, [r7, #8]
 800e504:	4611      	mov	r1, r2
 800e506:	461a      	mov	r2, r3
 800e508:	460b      	mov	r3, r1
 800e50a:	80fb      	strh	r3, [r7, #6]
 800e50c:	4613      	mov	r3, r2
 800e50e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e510:	88bb      	ldrh	r3, [r7, #4]
 800e512:	3301      	adds	r3, #1
 800e514:	085b      	lsrs	r3, r3, #1
 800e516:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e520:	88fa      	ldrh	r2, [r7, #6]
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	4413      	add	r3, r2
 800e526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e52a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e530:	e01b      	b.n	800e56a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800e532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800e538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53a:	3301      	adds	r3, #1
 800e53c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	b29b      	uxth	r3, r3
 800e544:	021b      	lsls	r3, r3, #8
 800e546:	b29b      	uxth	r3, r3
 800e548:	461a      	mov	r2, r3
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	b29a      	uxth	r2, r3
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55a:	3302      	adds	r3, #2
 800e55c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	3301      	adds	r3, #1
 800e562:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	3b01      	subs	r3, #1
 800e568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1e0      	bne.n	800e532 <USB_WritePMA+0x38>
  }
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	3734      	adds	r7, #52	; 0x34
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e57e:	b480      	push	{r7}
 800e580:	b08b      	sub	sp, #44	; 0x2c
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	4611      	mov	r1, r2
 800e58a:	461a      	mov	r2, r3
 800e58c:	460b      	mov	r3, r1
 800e58e:	80fb      	strh	r3, [r7, #6]
 800e590:	4613      	mov	r3, r2
 800e592:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e594:	88bb      	ldrh	r3, [r7, #4]
 800e596:	085b      	lsrs	r3, r3, #1
 800e598:	b29b      	uxth	r3, r3
 800e59a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e5a4:	88fa      	ldrh	r2, [r7, #6]
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e5ae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b4:	e018      	b.n	800e5e8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	881b      	ldrh	r3, [r3, #0]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	3302      	adds	r3, #2
 800e5c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	0a1b      	lsrs	r3, r3, #8
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1e3      	bne.n	800e5b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e5ee:	88bb      	ldrh	r3, [r7, #4]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d007      	beq.n	800e60a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	b2da      	uxtb	r2, r3
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	701a      	strb	r2, [r3, #0]
  }
}
 800e60a:	bf00      	nop
 800e60c:	372c      	adds	r7, #44	; 0x2c
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b084      	sub	sp, #16
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	460b      	mov	r3, r1
 800e620:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e622:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e626:	f008 f937 	bl	8016898 <USBD_static_malloc>
 800e62a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d105      	bne.n	800e63e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e63a:	2302      	movs	r3, #2
 800e63c:	e066      	b.n	800e70c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	7c1b      	ldrb	r3, [r3, #16]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d119      	bne.n	800e682 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e64e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e652:	2202      	movs	r2, #2
 800e654:	2181      	movs	r1, #129	; 0x81
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f007 ffc3 	bl	80165e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2201      	movs	r2, #1
 800e660:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e662:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e666:	2202      	movs	r2, #2
 800e668:	2101      	movs	r1, #1
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f007 ffb9 	bl	80165e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2210      	movs	r2, #16
 800e67c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e680:	e016      	b.n	800e6b0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e682:	2340      	movs	r3, #64	; 0x40
 800e684:	2202      	movs	r2, #2
 800e686:	2181      	movs	r1, #129	; 0x81
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f007 ffaa 	bl	80165e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e694:	2340      	movs	r3, #64	; 0x40
 800e696:	2202      	movs	r2, #2
 800e698:	2101      	movs	r1, #1
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f007 ffa1 	bl	80165e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2210      	movs	r2, #16
 800e6ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e6b0:	2308      	movs	r3, #8
 800e6b2:	2203      	movs	r2, #3
 800e6b4:	2182      	movs	r1, #130	; 0x82
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f007 ff93 	bl	80165e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7c1b      	ldrb	r3, [r3, #16]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f008 f865 	bl	80167c2 <USBD_LL_PrepareReceive>
 800e6f8:	e007      	b.n	800e70a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e700:	2340      	movs	r3, #64	; 0x40
 800e702:	2101      	movs	r1, #1
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f008 f85c 	bl	80167c2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e720:	2181      	movs	r1, #129	; 0x81
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f007 ff83 	bl	801662e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e72e:	2101      	movs	r1, #1
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f007 ff7c 	bl	801662e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e73e:	2182      	movs	r1, #130	; 0x82
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f007 ff74 	bl	801662e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00e      	beq.n	800e77e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e770:	4618      	mov	r0, r3
 800e772:	f008 f89f 	bl	80168b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e798:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e79a:	2300      	movs	r3, #0
 800e79c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	e0af      	b.n	800e910 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d03f      	beq.n	800e83c <USBD_CDC_Setup+0xb4>
 800e7bc:	2b20      	cmp	r3, #32
 800e7be:	f040 809f 	bne.w	800e900 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	88db      	ldrh	r3, [r3, #6]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d02e      	beq.n	800e828 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	b25b      	sxtb	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	da16      	bge.n	800e802 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e7e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	88d2      	ldrh	r2, [r2, #6]
 800e7e6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	88db      	ldrh	r3, [r3, #6]
 800e7ec:	2b07      	cmp	r3, #7
 800e7ee:	bf28      	it	cs
 800e7f0:	2307      	movcs	r3, #7
 800e7f2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	89fa      	ldrh	r2, [r7, #14]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f001 fa9f 	bl	800fd3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e800:	e085      	b.n	800e90e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	785a      	ldrb	r2, [r3, #1]
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	88db      	ldrh	r3, [r3, #6]
 800e810:	b2da      	uxtb	r2, r3
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e818:	6939      	ldr	r1, [r7, #16]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	88db      	ldrh	r3, [r3, #6]
 800e81e:	461a      	mov	r2, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f001 fab8 	bl	800fd96 <USBD_CtlPrepareRx>
      break;
 800e826:	e072      	b.n	800e90e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	7850      	ldrb	r0, [r2, #1]
 800e834:	2200      	movs	r2, #0
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	4798      	blx	r3
      break;
 800e83a:	e068      	b.n	800e90e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	785b      	ldrb	r3, [r3, #1]
 800e840:	2b0b      	cmp	r3, #11
 800e842:	d852      	bhi.n	800e8ea <USBD_CDC_Setup+0x162>
 800e844:	a201      	add	r2, pc, #4	; (adr r2, 800e84c <USBD_CDC_Setup+0xc4>)
 800e846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84a:	bf00      	nop
 800e84c:	0800e87d 	.word	0x0800e87d
 800e850:	0800e8f9 	.word	0x0800e8f9
 800e854:	0800e8eb 	.word	0x0800e8eb
 800e858:	0800e8eb 	.word	0x0800e8eb
 800e85c:	0800e8eb 	.word	0x0800e8eb
 800e860:	0800e8eb 	.word	0x0800e8eb
 800e864:	0800e8eb 	.word	0x0800e8eb
 800e868:	0800e8eb 	.word	0x0800e8eb
 800e86c:	0800e8eb 	.word	0x0800e8eb
 800e870:	0800e8eb 	.word	0x0800e8eb
 800e874:	0800e8a7 	.word	0x0800e8a7
 800e878:	0800e8d1 	.word	0x0800e8d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b03      	cmp	r3, #3
 800e886:	d107      	bne.n	800e898 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e888:	f107 030a 	add.w	r3, r7, #10
 800e88c:	2202      	movs	r2, #2
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 fa54 	bl	800fd3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e896:	e032      	b.n	800e8fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e898:	6839      	ldr	r1, [r7, #0]
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f001 f9de 	bl	800fc5c <USBD_CtlError>
            ret = USBD_FAIL;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	75fb      	strb	r3, [r7, #23]
          break;
 800e8a4:	e02b      	b.n	800e8fe <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d107      	bne.n	800e8c2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e8b2:	f107 030d 	add.w	r3, r7, #13
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f001 fa3f 	bl	800fd3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8c0:	e01d      	b.n	800e8fe <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e8c2:	6839      	ldr	r1, [r7, #0]
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f001 f9c9 	bl	800fc5c <USBD_CtlError>
            ret = USBD_FAIL;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	75fb      	strb	r3, [r7, #23]
          break;
 800e8ce:	e016      	b.n	800e8fe <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d00f      	beq.n	800e8fc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f001 f9bc 	bl	800fc5c <USBD_CtlError>
            ret = USBD_FAIL;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e8e8:	e008      	b.n	800e8fc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e8ea:	6839      	ldr	r1, [r7, #0]
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f001 f9b5 	bl	800fc5c <USBD_CtlError>
          ret = USBD_FAIL;
 800e8f2:	2303      	movs	r3, #3
 800e8f4:	75fb      	strb	r3, [r7, #23]
          break;
 800e8f6:	e002      	b.n	800e8fe <USBD_CDC_Setup+0x176>
          break;
 800e8f8:	bf00      	nop
 800e8fa:	e008      	b.n	800e90e <USBD_CDC_Setup+0x186>
          break;
 800e8fc:	bf00      	nop
      }
      break;
 800e8fe:	e006      	b.n	800e90e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e900:	6839      	ldr	r1, [r7, #0]
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f001 f9aa 	bl	800fc5c <USBD_CtlError>
      ret = USBD_FAIL;
 800e908:	2303      	movs	r3, #3
 800e90a:	75fb      	strb	r3, [r7, #23]
      break;
 800e90c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3718      	adds	r7, #24
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e92a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e936:	2303      	movs	r3, #3
 800e938:	e04f      	b.n	800e9da <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e940:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e942:	78fa      	ldrb	r2, [r7, #3]
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	440b      	add	r3, r1
 800e950:	3318      	adds	r3, #24
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d029      	beq.n	800e9ac <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e958:	78fa      	ldrb	r2, [r7, #3]
 800e95a:	6879      	ldr	r1, [r7, #4]
 800e95c:	4613      	mov	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4413      	add	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	440b      	add	r3, r1
 800e966:	3318      	adds	r3, #24
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	78f9      	ldrb	r1, [r7, #3]
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	460b      	mov	r3, r1
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	440b      	add	r3, r1
 800e974:	00db      	lsls	r3, r3, #3
 800e976:	4403      	add	r3, r0
 800e978:	3338      	adds	r3, #56	; 0x38
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e980:	fb03 f301 	mul.w	r3, r3, r1
 800e984:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e986:	2b00      	cmp	r3, #0
 800e988:	d110      	bne.n	800e9ac <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e98a:	78fa      	ldrb	r2, [r7, #3]
 800e98c:	6879      	ldr	r1, [r7, #4]
 800e98e:	4613      	mov	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4413      	add	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	440b      	add	r3, r1
 800e998:	3318      	adds	r3, #24
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e99e:	78f9      	ldrb	r1, [r7, #3]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f007 feeb 	bl	8016780 <USBD_LL_Transmit>
 800e9aa:	e015      	b.n	800e9d8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9ba:	691b      	ldr	r3, [r3, #16]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00b      	beq.n	800e9d8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e9d4:	78fa      	ldrb	r2, [r7, #3]
 800e9d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea00:	2303      	movs	r3, #3
 800ea02:	e015      	b.n	800ea30 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ea04:	78fb      	ldrb	r3, [r7, #3]
 800ea06:	4619      	mov	r1, r3
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f007 fefb 	bl	8016804 <USBD_LL_GetRxDataSize>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	e01b      	b.n	800ea8a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d015      	beq.n	800ea88 <USBD_CDC_EP0_RxReady+0x50>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ea62:	2bff      	cmp	r3, #255	; 0xff
 800ea64:	d010      	beq.n	800ea88 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ea74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ea7c:	b292      	uxth	r2, r2
 800ea7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	22ff      	movs	r2, #255	; 0xff
 800ea84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
	...

0800ea94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2243      	movs	r2, #67	; 0x43
 800eaa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eaa2:	4b03      	ldr	r3, [pc, #12]	; (800eab0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	200000a4 	.word	0x200000a4

0800eab4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2243      	movs	r2, #67	; 0x43
 800eac0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800eac2:	4b03      	ldr	r3, [pc, #12]	; (800ead0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	20000060 	.word	0x20000060

0800ead4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2243      	movs	r2, #67	; 0x43
 800eae0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eae2:	4b03      	ldr	r3, [pc, #12]	; (800eaf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	200000e8 	.word	0x200000e8

0800eaf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	220a      	movs	r2, #10
 800eb00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eb02:	4b03      	ldr	r3, [pc, #12]	; (800eb10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	2000001c 	.word	0x2000001c

0800eb14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eb24:	2303      	movs	r3, #3
 800eb26:	e004      	b.n	800eb32 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	370c      	adds	r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b087      	sub	sp, #28
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	60f8      	str	r0, [r7, #12]
 800eb46:	60b9      	str	r1, [r7, #8]
 800eb48:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb50:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	e008      	b.n	800eb6e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b085      	sub	sp, #20
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d101      	bne.n	800eb96 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800eb92:	2303      	movs	r3, #3
 800eb94:	e004      	b.n	800eba0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d101      	bne.n	800ebca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	e016      	b.n	800ebf8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7c1b      	ldrb	r3, [r3, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d109      	bne.n	800ebe6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ebd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebdc:	2101      	movs	r1, #1
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f007 fdef 	bl	80167c2 <USBD_LL_PrepareReceive>
 800ebe4:	e007      	b.n	800ebf6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ebec:	2340      	movs	r3, #64	; 0x40
 800ebee:	2101      	movs	r1, #1
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f007 fde6 	bl	80167c2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3710      	adds	r7, #16
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	4613      	mov	r3, r2
 800ec0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e01f      	b.n	800ec58 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	79fa      	ldrb	r2, [r7, #7]
 800ec4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f007 fc4b 	bl	80164e8 <USBD_LL_Init>
 800ec52:	4603      	mov	r3, r0
 800ec54:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ec56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3718      	adds	r7, #24
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ec74:	2303      	movs	r3, #3
 800ec76:	e016      	b.n	800eca6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	683a      	ldr	r2, [r7, #0]
 800ec7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00b      	beq.n	800eca4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec94:	f107 020e 	add.w	r2, r7, #14
 800ec98:	4610      	mov	r0, r2
 800ec9a:	4798      	blx	r3
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b082      	sub	sp, #8
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f007 fc78 	bl	80165ac <USBD_LL_Start>
 800ecbc:	4603      	mov	r3, r0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	b083      	sub	sp, #12
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ece8:	2303      	movs	r3, #3
 800ecea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d009      	beq.n	800ed0a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	78fa      	ldrb	r2, [r7, #3]
 800ed00:	4611      	mov	r1, r2
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	4798      	blx	r3
 800ed06:	4603      	mov	r3, r0
 800ed08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ed0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d007      	beq.n	800ed3a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	78fa      	ldrb	r2, [r7, #3]
 800ed34:	4611      	mov	r1, r2
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
  }

  return USBD_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f000 ff46 	bl	800fbe8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed78:	f003 031f 	and.w	r3, r3, #31
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d01a      	beq.n	800edb6 <USBD_LL_SetupStage+0x72>
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d822      	bhi.n	800edca <USBD_LL_SetupStage+0x86>
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <USBD_LL_SetupStage+0x4a>
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d00a      	beq.n	800eda2 <USBD_LL_SetupStage+0x5e>
 800ed8c:	e01d      	b.n	800edca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed94:	4619      	mov	r1, r3
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f9ee 	bl	800f178 <USBD_StdDevReq>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73fb      	strb	r3, [r7, #15]
      break;
 800eda0:	e020      	b.n	800ede4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fa52 	bl	800f254 <USBD_StdItfReq>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]
      break;
 800edb4:	e016      	b.n	800ede4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800edbc:	4619      	mov	r1, r3
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fa91 	bl	800f2e6 <USBD_StdEPReq>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73fb      	strb	r3, [r7, #15]
      break;
 800edc8:	e00c      	b.n	800ede4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800edd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	4619      	mov	r1, r3
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f007 fc47 	bl	801666c <USBD_LL_StallEP>
 800edde:	4603      	mov	r3, r0
 800ede0:	73fb      	strb	r3, [r7, #15]
      break;
 800ede2:	bf00      	nop
  }

  return ret;
 800ede4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b086      	sub	sp, #24
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	460b      	mov	r3, r1
 800edf8:	607a      	str	r2, [r7, #4]
 800edfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800edfc:	7afb      	ldrb	r3, [r7, #11]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d138      	bne.n	800ee74 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ee08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d14a      	bne.n	800eeaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	689a      	ldr	r2, [r3, #8]
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d913      	bls.n	800ee48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	689a      	ldr	r2, [r3, #8]
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	1ad2      	subs	r2, r2, r3
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	68da      	ldr	r2, [r3, #12]
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	4293      	cmp	r3, r2
 800ee38:	bf28      	it	cs
 800ee3a:	4613      	movcs	r3, r2
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f000 ffc5 	bl	800fdd0 <USBD_CtlContinueRx>
 800ee46:	e030      	b.n	800eeaa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	2b03      	cmp	r3, #3
 800ee52:	d10b      	bne.n	800ee6c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5a:	691b      	ldr	r3, [r3, #16]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d005      	beq.n	800ee6c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f000 ffc0 	bl	800fdf2 <USBD_CtlSendStatus>
 800ee72:	e01a      	b.n	800eeaa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	2b03      	cmp	r3, #3
 800ee7e:	d114      	bne.n	800eeaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00e      	beq.n	800eeaa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	7afa      	ldrb	r2, [r7, #11]
 800ee96:	4611      	mov	r1, r2
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	4798      	blx	r3
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800eea0:	7dfb      	ldrb	r3, [r7, #23]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800eea6:	7dfb      	ldrb	r3, [r7, #23]
 800eea8:	e000      	b.n	800eeac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b086      	sub	sp, #24
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	460b      	mov	r3, r1
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eec2:	7afb      	ldrb	r3, [r7, #11]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d16b      	bne.n	800efa0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3314      	adds	r3, #20
 800eecc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d156      	bne.n	800ef86 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	689a      	ldr	r2, [r3, #8]
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d914      	bls.n	800ef0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	689a      	ldr	r2, [r3, #8]
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	1ad2      	subs	r2, r2, r3
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	461a      	mov	r2, r3
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 ff3a 	bl	800fd74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef00:	2300      	movs	r3, #0
 800ef02:	2200      	movs	r2, #0
 800ef04:	2100      	movs	r1, #0
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f007 fc5b 	bl	80167c2 <USBD_LL_PrepareReceive>
 800ef0c:	e03b      	b.n	800ef86 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	68da      	ldr	r2, [r3, #12]
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d11c      	bne.n	800ef54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	685a      	ldr	r2, [r3, #4]
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d316      	bcc.n	800ef54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ef26:	693b      	ldr	r3, [r7, #16]
 800ef28:	685a      	ldr	r2, [r3, #4]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d20f      	bcs.n	800ef54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ef34:	2200      	movs	r2, #0
 800ef36:	2100      	movs	r1, #0
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f000 ff1b 	bl	800fd74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef46:	2300      	movs	r3, #0
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f007 fc38 	bl	80167c2 <USBD_LL_PrepareReceive>
 800ef52:	e018      	b.n	800ef86 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d10b      	bne.n	800ef78 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d005      	beq.n	800ef78 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef78:	2180      	movs	r1, #128	; 0x80
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f007 fb76 	bl	801666c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f000 ff49 	bl	800fe18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d122      	bne.n	800efd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f7ff fe98 	bl	800ecc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ef9e:	e01a      	b.n	800efd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	d114      	bne.n	800efd6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efb2:	695b      	ldr	r3, [r3, #20]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00e      	beq.n	800efd6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efbe:	695b      	ldr	r3, [r3, #20]
 800efc0:	7afa      	ldrb	r2, [r7, #11]
 800efc2:	4611      	mov	r1, r2
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	4798      	blx	r3
 800efc8:	4603      	mov	r3, r0
 800efca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800efcc:	7dfb      	ldrb	r3, [r7, #23]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d001      	beq.n	800efd6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800efd2:	7dfb      	ldrb	r3, [r7, #23]
 800efd4:	e000      	b.n	800efd8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2200      	movs	r2, #0
 800effc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f010:	2303      	movs	r3, #3
 800f012:	e02f      	b.n	800f074 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00f      	beq.n	800f03e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d009      	beq.n	800f03e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	6852      	ldr	r2, [r2, #4]
 800f036:	b2d2      	uxtb	r2, r2
 800f038:	4611      	mov	r1, r2
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f03e:	2340      	movs	r3, #64	; 0x40
 800f040:	2200      	movs	r2, #0
 800f042:	2100      	movs	r1, #0
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f007 facc 	bl	80165e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2201      	movs	r2, #1
 800f04e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2240      	movs	r2, #64	; 0x40
 800f056:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f05a:	2340      	movs	r3, #64	; 0x40
 800f05c:	2200      	movs	r2, #0
 800f05e:	2180      	movs	r1, #128	; 0x80
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f007 fabe 	bl	80165e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2201      	movs	r2, #1
 800f06a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2240      	movs	r2, #64	; 0x40
 800f070:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	460b      	mov	r3, r1
 800f086:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	78fa      	ldrb	r2, [r7, #3]
 800f08c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f08e:	2300      	movs	r3, #0
}
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2204      	movs	r2, #4
 800f0b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f0ba:	2300      	movs	r3, #0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	370c      	adds	r7, #12
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	2b04      	cmp	r3, #4
 800f0da:	d106      	bne.n	800f0ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f106:	2b00      	cmp	r3, #0
 800f108:	d101      	bne.n	800f10e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f10a:	2303      	movs	r3, #3
 800f10c:	e012      	b.n	800f134 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b03      	cmp	r3, #3
 800f118:	d10b      	bne.n	800f132 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f120:	69db      	ldr	r3, [r3, #28]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d005      	beq.n	800f132 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f12c:	69db      	ldr	r3, [r3, #28]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f132:	2300      	movs	r3, #0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	3301      	adds	r3, #1
 800f152:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f15a:	8a3b      	ldrh	r3, [r7, #16]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	b21a      	sxth	r2, r3
 800f160:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f164:	4313      	orrs	r3, r2
 800f166:	b21b      	sxth	r3, r3
 800f168:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f16a:	89fb      	ldrh	r3, [r7, #14]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	371c      	adds	r7, #28
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f182:	2300      	movs	r3, #0
 800f184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f18e:	2b40      	cmp	r3, #64	; 0x40
 800f190:	d005      	beq.n	800f19e <USBD_StdDevReq+0x26>
 800f192:	2b40      	cmp	r3, #64	; 0x40
 800f194:	d853      	bhi.n	800f23e <USBD_StdDevReq+0xc6>
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00b      	beq.n	800f1b2 <USBD_StdDevReq+0x3a>
 800f19a:	2b20      	cmp	r3, #32
 800f19c:	d14f      	bne.n	800f23e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	6839      	ldr	r1, [r7, #0]
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	4798      	blx	r3
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f1b0:	e04a      	b.n	800f248 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	785b      	ldrb	r3, [r3, #1]
 800f1b6:	2b09      	cmp	r3, #9
 800f1b8:	d83b      	bhi.n	800f232 <USBD_StdDevReq+0xba>
 800f1ba:	a201      	add	r2, pc, #4	; (adr r2, 800f1c0 <USBD_StdDevReq+0x48>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f215 	.word	0x0800f215
 800f1c4:	0800f229 	.word	0x0800f229
 800f1c8:	0800f233 	.word	0x0800f233
 800f1cc:	0800f21f 	.word	0x0800f21f
 800f1d0:	0800f233 	.word	0x0800f233
 800f1d4:	0800f1f3 	.word	0x0800f1f3
 800f1d8:	0800f1e9 	.word	0x0800f1e9
 800f1dc:	0800f233 	.word	0x0800f233
 800f1e0:	0800f20b 	.word	0x0800f20b
 800f1e4:	0800f1fd 	.word	0x0800f1fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f9de 	bl	800f5ac <USBD_GetDescriptor>
          break;
 800f1f0:	e024      	b.n	800f23c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fb6d 	bl	800f8d4 <USBD_SetAddress>
          break;
 800f1fa:	e01f      	b.n	800f23c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1fc:	6839      	ldr	r1, [r7, #0]
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fbac 	bl	800f95c <USBD_SetConfig>
 800f204:	4603      	mov	r3, r0
 800f206:	73fb      	strb	r3, [r7, #15]
          break;
 800f208:	e018      	b.n	800f23c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f20a:	6839      	ldr	r1, [r7, #0]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fc4b 	bl	800faa8 <USBD_GetConfig>
          break;
 800f212:	e013      	b.n	800f23c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fc7c 	bl	800fb14 <USBD_GetStatus>
          break;
 800f21c:	e00e      	b.n	800f23c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fcab 	bl	800fb7c <USBD_SetFeature>
          break;
 800f226:	e009      	b.n	800f23c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fcba 	bl	800fba4 <USBD_ClrFeature>
          break;
 800f230:	e004      	b.n	800f23c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 fd11 	bl	800fc5c <USBD_CtlError>
          break;
 800f23a:	bf00      	nop
      }
      break;
 800f23c:	e004      	b.n	800f248 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fd0b 	bl	800fc5c <USBD_CtlError>
      break;
 800f246:	bf00      	nop
  }

  return ret;
 800f248:	7bfb      	ldrb	r3, [r7, #15]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop

0800f254 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f25e:	2300      	movs	r3, #0
 800f260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f26a:	2b40      	cmp	r3, #64	; 0x40
 800f26c:	d005      	beq.n	800f27a <USBD_StdItfReq+0x26>
 800f26e:	2b40      	cmp	r3, #64	; 0x40
 800f270:	d82f      	bhi.n	800f2d2 <USBD_StdItfReq+0x7e>
 800f272:	2b00      	cmp	r3, #0
 800f274:	d001      	beq.n	800f27a <USBD_StdItfReq+0x26>
 800f276:	2b20      	cmp	r3, #32
 800f278:	d12b      	bne.n	800f2d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f280:	b2db      	uxtb	r3, r3
 800f282:	3b01      	subs	r3, #1
 800f284:	2b02      	cmp	r3, #2
 800f286:	d81d      	bhi.n	800f2c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	889b      	ldrh	r3, [r3, #4]
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d813      	bhi.n	800f2ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f298:	689b      	ldr	r3, [r3, #8]
 800f29a:	6839      	ldr	r1, [r7, #0]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	4798      	blx	r3
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	88db      	ldrh	r3, [r3, #6]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d110      	bne.n	800f2ce <USBD_StdItfReq+0x7a>
 800f2ac:	7bfb      	ldrb	r3, [r7, #15]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d10d      	bne.n	800f2ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fd9d 	bl	800fdf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f2b8:	e009      	b.n	800f2ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fccd 	bl	800fc5c <USBD_CtlError>
          break;
 800f2c2:	e004      	b.n	800f2ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fcc8 	bl	800fc5c <USBD_CtlError>
          break;
 800f2cc:	e000      	b.n	800f2d0 <USBD_StdItfReq+0x7c>
          break;
 800f2ce:	bf00      	nop
      }
      break;
 800f2d0:	e004      	b.n	800f2dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f2d2:	6839      	ldr	r1, [r7, #0]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 fcc1 	bl	800fc5c <USBD_CtlError>
      break;
 800f2da:	bf00      	nop
  }

  return ret;
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b084      	sub	sp, #16
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	889b      	ldrh	r3, [r3, #4]
 800f2f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f302:	2b40      	cmp	r3, #64	; 0x40
 800f304:	d007      	beq.n	800f316 <USBD_StdEPReq+0x30>
 800f306:	2b40      	cmp	r3, #64	; 0x40
 800f308:	f200 8145 	bhi.w	800f596 <USBD_StdEPReq+0x2b0>
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00c      	beq.n	800f32a <USBD_StdEPReq+0x44>
 800f310:	2b20      	cmp	r3, #32
 800f312:	f040 8140 	bne.w	800f596 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	6839      	ldr	r1, [r7, #0]
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	4798      	blx	r3
 800f324:	4603      	mov	r3, r0
 800f326:	73fb      	strb	r3, [r7, #15]
      break;
 800f328:	e13a      	b.n	800f5a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	785b      	ldrb	r3, [r3, #1]
 800f32e:	2b03      	cmp	r3, #3
 800f330:	d007      	beq.n	800f342 <USBD_StdEPReq+0x5c>
 800f332:	2b03      	cmp	r3, #3
 800f334:	f300 8129 	bgt.w	800f58a <USBD_StdEPReq+0x2a4>
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d07f      	beq.n	800f43c <USBD_StdEPReq+0x156>
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d03c      	beq.n	800f3ba <USBD_StdEPReq+0xd4>
 800f340:	e123      	b.n	800f58a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	d002      	beq.n	800f354 <USBD_StdEPReq+0x6e>
 800f34e:	2b03      	cmp	r3, #3
 800f350:	d016      	beq.n	800f380 <USBD_StdEPReq+0x9a>
 800f352:	e02c      	b.n	800f3ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00d      	beq.n	800f376 <USBD_StdEPReq+0x90>
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
 800f35c:	2b80      	cmp	r3, #128	; 0x80
 800f35e:	d00a      	beq.n	800f376 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f360:	7bbb      	ldrb	r3, [r7, #14]
 800f362:	4619      	mov	r1, r3
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f007 f981 	bl	801666c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f36a:	2180      	movs	r1, #128	; 0x80
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f007 f97d 	bl	801666c <USBD_LL_StallEP>
 800f372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f374:	e020      	b.n	800f3b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f376:	6839      	ldr	r1, [r7, #0]
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f000 fc6f 	bl	800fc5c <USBD_CtlError>
              break;
 800f37e:	e01b      	b.n	800f3b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	885b      	ldrh	r3, [r3, #2]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10e      	bne.n	800f3a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00b      	beq.n	800f3a6 <USBD_StdEPReq+0xc0>
 800f38e:	7bbb      	ldrb	r3, [r7, #14]
 800f390:	2b80      	cmp	r3, #128	; 0x80
 800f392:	d008      	beq.n	800f3a6 <USBD_StdEPReq+0xc0>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	88db      	ldrh	r3, [r3, #6]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d104      	bne.n	800f3a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f39c:	7bbb      	ldrb	r3, [r7, #14]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f007 f963 	bl	801666c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fd23 	bl	800fdf2 <USBD_CtlSendStatus>

              break;
 800f3ac:	e004      	b.n	800f3b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fc53 	bl	800fc5c <USBD_CtlError>
              break;
 800f3b6:	bf00      	nop
          }
          break;
 800f3b8:	e0ec      	b.n	800f594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d002      	beq.n	800f3cc <USBD_StdEPReq+0xe6>
 800f3c6:	2b03      	cmp	r3, #3
 800f3c8:	d016      	beq.n	800f3f8 <USBD_StdEPReq+0x112>
 800f3ca:	e030      	b.n	800f42e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00d      	beq.n	800f3ee <USBD_StdEPReq+0x108>
 800f3d2:	7bbb      	ldrb	r3, [r7, #14]
 800f3d4:	2b80      	cmp	r3, #128	; 0x80
 800f3d6:	d00a      	beq.n	800f3ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3d8:	7bbb      	ldrb	r3, [r7, #14]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f007 f945 	bl	801666c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3e2:	2180      	movs	r1, #128	; 0x80
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f007 f941 	bl	801666c <USBD_LL_StallEP>
 800f3ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3ec:	e025      	b.n	800f43a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f3ee:	6839      	ldr	r1, [r7, #0]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fc33 	bl	800fc5c <USBD_CtlError>
              break;
 800f3f6:	e020      	b.n	800f43a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	885b      	ldrh	r3, [r3, #2]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d11b      	bne.n	800f438 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f400:	7bbb      	ldrb	r3, [r7, #14]
 800f402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f406:	2b00      	cmp	r3, #0
 800f408:	d004      	beq.n	800f414 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f40a:	7bbb      	ldrb	r3, [r7, #14]
 800f40c:	4619      	mov	r1, r3
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f007 f94b 	bl	80166aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fcec 	bl	800fdf2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	6839      	ldr	r1, [r7, #0]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	4798      	blx	r3
 800f428:	4603      	mov	r3, r0
 800f42a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f42c:	e004      	b.n	800f438 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fc13 	bl	800fc5c <USBD_CtlError>
              break;
 800f436:	e000      	b.n	800f43a <USBD_StdEPReq+0x154>
              break;
 800f438:	bf00      	nop
          }
          break;
 800f43a:	e0ab      	b.n	800f594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b02      	cmp	r3, #2
 800f446:	d002      	beq.n	800f44e <USBD_StdEPReq+0x168>
 800f448:	2b03      	cmp	r3, #3
 800f44a:	d032      	beq.n	800f4b2 <USBD_StdEPReq+0x1cc>
 800f44c:	e097      	b.n	800f57e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f44e:	7bbb      	ldrb	r3, [r7, #14]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d007      	beq.n	800f464 <USBD_StdEPReq+0x17e>
 800f454:	7bbb      	ldrb	r3, [r7, #14]
 800f456:	2b80      	cmp	r3, #128	; 0x80
 800f458:	d004      	beq.n	800f464 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 fbfd 	bl	800fc5c <USBD_CtlError>
                break;
 800f462:	e091      	b.n	800f588 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	da0b      	bge.n	800f484 <USBD_StdEPReq+0x19e>
 800f46c:	7bbb      	ldrb	r3, [r7, #14]
 800f46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f472:	4613      	mov	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	3310      	adds	r3, #16
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	4413      	add	r3, r2
 800f480:	3304      	adds	r3, #4
 800f482:	e00b      	b.n	800f49c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f484:	7bbb      	ldrb	r3, [r7, #14]
 800f486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f48a:	4613      	mov	r3, r2
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4413      	add	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	4413      	add	r3, r2
 800f49a:	3304      	adds	r3, #4
 800f49c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	2202      	movs	r2, #2
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 fc47 	bl	800fd3e <USBD_CtlSendData>
              break;
 800f4b0:	e06a      	b.n	800f588 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f4b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	da11      	bge.n	800f4de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	f003 020f 	and.w	r2, r3, #15
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3324      	adds	r3, #36	; 0x24
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d117      	bne.n	800f504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fbc0 	bl	800fc5c <USBD_CtlError>
                  break;
 800f4dc:	e054      	b.n	800f588 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4de:	7bbb      	ldrb	r3, [r7, #14]
 800f4e0:	f003 020f 	and.w	r2, r3, #15
 800f4e4:	6879      	ldr	r1, [r7, #4]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4413      	add	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	440b      	add	r3, r1
 800f4f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d104      	bne.n	800f504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 fbad 	bl	800fc5c <USBD_CtlError>
                  break;
 800f502:	e041      	b.n	800f588 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	da0b      	bge.n	800f524 <USBD_StdEPReq+0x23e>
 800f50c:	7bbb      	ldrb	r3, [r7, #14]
 800f50e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f512:	4613      	mov	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	3310      	adds	r3, #16
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	4413      	add	r3, r2
 800f520:	3304      	adds	r3, #4
 800f522:	e00b      	b.n	800f53c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f524:	7bbb      	ldrb	r3, [r7, #14]
 800f526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f52a:	4613      	mov	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	4413      	add	r3, r2
 800f53a:	3304      	adds	r3, #4
 800f53c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f53e:	7bbb      	ldrb	r3, [r7, #14]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <USBD_StdEPReq+0x264>
 800f544:	7bbb      	ldrb	r3, [r7, #14]
 800f546:	2b80      	cmp	r3, #128	; 0x80
 800f548:	d103      	bne.n	800f552 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2200      	movs	r2, #0
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	e00e      	b.n	800f570 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f552:	7bbb      	ldrb	r3, [r7, #14]
 800f554:	4619      	mov	r1, r3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f007 f8c6 	bl	80166e8 <USBD_LL_IsStallEP>
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d003      	beq.n	800f56a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2201      	movs	r2, #1
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	e002      	b.n	800f570 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	2200      	movs	r2, #0
 800f56e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	2202      	movs	r2, #2
 800f574:	4619      	mov	r1, r3
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 fbe1 	bl	800fd3e <USBD_CtlSendData>
              break;
 800f57c:	e004      	b.n	800f588 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fb6b 	bl	800fc5c <USBD_CtlError>
              break;
 800f586:	bf00      	nop
          }
          break;
 800f588:	e004      	b.n	800f594 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f58a:	6839      	ldr	r1, [r7, #0]
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fb65 	bl	800fc5c <USBD_CtlError>
          break;
 800f592:	bf00      	nop
      }
      break;
 800f594:	e004      	b.n	800f5a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f596:	6839      	ldr	r1, [r7, #0]
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 fb5f 	bl	800fc5c <USBD_CtlError>
      break;
 800f59e:	bf00      	nop
  }

  return ret;
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
	...

0800f5ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	885b      	ldrh	r3, [r3, #2]
 800f5c6:	0a1b      	lsrs	r3, r3, #8
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	2b0e      	cmp	r3, #14
 800f5ce:	f200 8152 	bhi.w	800f876 <USBD_GetDescriptor+0x2ca>
 800f5d2:	a201      	add	r2, pc, #4	; (adr r2, 800f5d8 <USBD_GetDescriptor+0x2c>)
 800f5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d8:	0800f649 	.word	0x0800f649
 800f5dc:	0800f661 	.word	0x0800f661
 800f5e0:	0800f6a1 	.word	0x0800f6a1
 800f5e4:	0800f877 	.word	0x0800f877
 800f5e8:	0800f877 	.word	0x0800f877
 800f5ec:	0800f817 	.word	0x0800f817
 800f5f0:	0800f843 	.word	0x0800f843
 800f5f4:	0800f877 	.word	0x0800f877
 800f5f8:	0800f877 	.word	0x0800f877
 800f5fc:	0800f877 	.word	0x0800f877
 800f600:	0800f877 	.word	0x0800f877
 800f604:	0800f877 	.word	0x0800f877
 800f608:	0800f877 	.word	0x0800f877
 800f60c:	0800f877 	.word	0x0800f877
 800f610:	0800f615 	.word	0x0800f615
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f61a:	69db      	ldr	r3, [r3, #28]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00b      	beq.n	800f638 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	7c12      	ldrb	r2, [r2, #16]
 800f62c:	f107 0108 	add.w	r1, r7, #8
 800f630:	4610      	mov	r0, r2
 800f632:	4798      	blx	r3
 800f634:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f636:	e126      	b.n	800f886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fb0e 	bl	800fc5c <USBD_CtlError>
        err++;
 800f640:	7afb      	ldrb	r3, [r7, #11]
 800f642:	3301      	adds	r3, #1
 800f644:	72fb      	strb	r3, [r7, #11]
      break;
 800f646:	e11e      	b.n	800f886 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	7c12      	ldrb	r2, [r2, #16]
 800f654:	f107 0108 	add.w	r1, r7, #8
 800f658:	4610      	mov	r0, r2
 800f65a:	4798      	blx	r3
 800f65c:	60f8      	str	r0, [r7, #12]
      break;
 800f65e:	e112      	b.n	800f886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	7c1b      	ldrb	r3, [r3, #16]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10d      	bne.n	800f684 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f670:	f107 0208 	add.w	r2, r7, #8
 800f674:	4610      	mov	r0, r2
 800f676:	4798      	blx	r3
 800f678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	3301      	adds	r3, #1
 800f67e:	2202      	movs	r2, #2
 800f680:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f682:	e100      	b.n	800f886 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68c:	f107 0208 	add.w	r2, r7, #8
 800f690:	4610      	mov	r0, r2
 800f692:	4798      	blx	r3
 800f694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3301      	adds	r3, #1
 800f69a:	2202      	movs	r2, #2
 800f69c:	701a      	strb	r2, [r3, #0]
      break;
 800f69e:	e0f2      	b.n	800f886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	885b      	ldrh	r3, [r3, #2]
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	2b05      	cmp	r3, #5
 800f6a8:	f200 80ac 	bhi.w	800f804 <USBD_GetDescriptor+0x258>
 800f6ac:	a201      	add	r2, pc, #4	; (adr r2, 800f6b4 <USBD_GetDescriptor+0x108>)
 800f6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b2:	bf00      	nop
 800f6b4:	0800f6cd 	.word	0x0800f6cd
 800f6b8:	0800f701 	.word	0x0800f701
 800f6bc:	0800f735 	.word	0x0800f735
 800f6c0:	0800f769 	.word	0x0800f769
 800f6c4:	0800f79d 	.word	0x0800f79d
 800f6c8:	0800f7d1 	.word	0x0800f7d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00b      	beq.n	800f6f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	7c12      	ldrb	r2, [r2, #16]
 800f6e4:	f107 0108 	add.w	r1, r7, #8
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	4798      	blx	r3
 800f6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ee:	e091      	b.n	800f814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6f0:	6839      	ldr	r1, [r7, #0]
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 fab2 	bl	800fc5c <USBD_CtlError>
            err++;
 800f6f8:	7afb      	ldrb	r3, [r7, #11]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f6fe:	e089      	b.n	800f814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00b      	beq.n	800f724 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	7c12      	ldrb	r2, [r2, #16]
 800f718:	f107 0108 	add.w	r1, r7, #8
 800f71c:	4610      	mov	r0, r2
 800f71e:	4798      	blx	r3
 800f720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f722:	e077      	b.n	800f814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f724:	6839      	ldr	r1, [r7, #0]
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 fa98 	bl	800fc5c <USBD_CtlError>
            err++;
 800f72c:	7afb      	ldrb	r3, [r7, #11]
 800f72e:	3301      	adds	r3, #1
 800f730:	72fb      	strb	r3, [r7, #11]
          break;
 800f732:	e06f      	b.n	800f814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00b      	beq.n	800f758 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	7c12      	ldrb	r2, [r2, #16]
 800f74c:	f107 0108 	add.w	r1, r7, #8
 800f750:	4610      	mov	r0, r2
 800f752:	4798      	blx	r3
 800f754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f756:	e05d      	b.n	800f814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f000 fa7e 	bl	800fc5c <USBD_CtlError>
            err++;
 800f760:	7afb      	ldrb	r3, [r7, #11]
 800f762:	3301      	adds	r3, #1
 800f764:	72fb      	strb	r3, [r7, #11]
          break;
 800f766:	e055      	b.n	800f814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00b      	beq.n	800f78c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	7c12      	ldrb	r2, [r2, #16]
 800f780:	f107 0108 	add.w	r1, r7, #8
 800f784:	4610      	mov	r0, r2
 800f786:	4798      	blx	r3
 800f788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f78a:	e043      	b.n	800f814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f78c:	6839      	ldr	r1, [r7, #0]
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fa64 	bl	800fc5c <USBD_CtlError>
            err++;
 800f794:	7afb      	ldrb	r3, [r7, #11]
 800f796:	3301      	adds	r3, #1
 800f798:	72fb      	strb	r3, [r7, #11]
          break;
 800f79a:	e03b      	b.n	800f814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d00b      	beq.n	800f7c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	7c12      	ldrb	r2, [r2, #16]
 800f7b4:	f107 0108 	add.w	r1, r7, #8
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
 800f7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7be:	e029      	b.n	800f814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 fa4a 	bl	800fc5c <USBD_CtlError>
            err++;
 800f7c8:	7afb      	ldrb	r3, [r7, #11]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f7ce:	e021      	b.n	800f814 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00b      	beq.n	800f7f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7e2:	699b      	ldr	r3, [r3, #24]
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	7c12      	ldrb	r2, [r2, #16]
 800f7e8:	f107 0108 	add.w	r1, r7, #8
 800f7ec:	4610      	mov	r0, r2
 800f7ee:	4798      	blx	r3
 800f7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7f2:	e00f      	b.n	800f814 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 fa30 	bl	800fc5c <USBD_CtlError>
            err++;
 800f7fc:	7afb      	ldrb	r3, [r7, #11]
 800f7fe:	3301      	adds	r3, #1
 800f800:	72fb      	strb	r3, [r7, #11]
          break;
 800f802:	e007      	b.n	800f814 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fa28 	bl	800fc5c <USBD_CtlError>
          err++;
 800f80c:	7afb      	ldrb	r3, [r7, #11]
 800f80e:	3301      	adds	r3, #1
 800f810:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f812:	bf00      	nop
      }
      break;
 800f814:	e037      	b.n	800f886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	7c1b      	ldrb	r3, [r3, #16]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d109      	bne.n	800f832 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f826:	f107 0208 	add.w	r2, r7, #8
 800f82a:	4610      	mov	r0, r2
 800f82c:	4798      	blx	r3
 800f82e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f830:	e029      	b.n	800f886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 fa11 	bl	800fc5c <USBD_CtlError>
        err++;
 800f83a:	7afb      	ldrb	r3, [r7, #11]
 800f83c:	3301      	adds	r3, #1
 800f83e:	72fb      	strb	r3, [r7, #11]
      break;
 800f840:	e021      	b.n	800f886 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	7c1b      	ldrb	r3, [r3, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d10d      	bne.n	800f866 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f852:	f107 0208 	add.w	r2, r7, #8
 800f856:	4610      	mov	r0, r2
 800f858:	4798      	blx	r3
 800f85a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3301      	adds	r3, #1
 800f860:	2207      	movs	r2, #7
 800f862:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f864:	e00f      	b.n	800f886 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f9f7 	bl	800fc5c <USBD_CtlError>
        err++;
 800f86e:	7afb      	ldrb	r3, [r7, #11]
 800f870:	3301      	adds	r3, #1
 800f872:	72fb      	strb	r3, [r7, #11]
      break;
 800f874:	e007      	b.n	800f886 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f9ef 	bl	800fc5c <USBD_CtlError>
      err++;
 800f87e:	7afb      	ldrb	r3, [r7, #11]
 800f880:	3301      	adds	r3, #1
 800f882:	72fb      	strb	r3, [r7, #11]
      break;
 800f884:	bf00      	nop
  }

  if (err != 0U)
 800f886:	7afb      	ldrb	r3, [r7, #11]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d11e      	bne.n	800f8ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	88db      	ldrh	r3, [r3, #6]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d016      	beq.n	800f8c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f894:	893b      	ldrh	r3, [r7, #8]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00e      	beq.n	800f8b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	88da      	ldrh	r2, [r3, #6]
 800f89e:	893b      	ldrh	r3, [r7, #8]
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	bf28      	it	cs
 800f8a4:	4613      	movcs	r3, r2
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f8aa:	893b      	ldrh	r3, [r7, #8]
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	68f9      	ldr	r1, [r7, #12]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 fa44 	bl	800fd3e <USBD_CtlSendData>
 800f8b6:	e009      	b.n	800f8cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f8b8:	6839      	ldr	r1, [r7, #0]
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 f9ce 	bl	800fc5c <USBD_CtlError>
 800f8c0:	e004      	b.n	800f8cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 fa95 	bl	800fdf2 <USBD_CtlSendStatus>
 800f8c8:	e000      	b.n	800f8cc <USBD_GetDescriptor+0x320>
    return;
 800f8ca:	bf00      	nop
  }
}
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop

0800f8d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	889b      	ldrh	r3, [r3, #4]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d131      	bne.n	800f94a <USBD_SetAddress+0x76>
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	88db      	ldrh	r3, [r3, #6]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d12d      	bne.n	800f94a <USBD_SetAddress+0x76>
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	885b      	ldrh	r3, [r3, #2]
 800f8f2:	2b7f      	cmp	r3, #127	; 0x7f
 800f8f4:	d829      	bhi.n	800f94a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	885b      	ldrh	r3, [r3, #2]
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f900:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b03      	cmp	r3, #3
 800f90c:	d104      	bne.n	800f918 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f9a3 	bl	800fc5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f916:	e01d      	b.n	800f954 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	7bfa      	ldrb	r2, [r7, #15]
 800f91c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f920:	7bfb      	ldrb	r3, [r7, #15]
 800f922:	4619      	mov	r1, r3
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f006 ff0c 	bl	8016742 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 fa61 	bl	800fdf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f930:	7bfb      	ldrb	r3, [r7, #15]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d004      	beq.n	800f940 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2202      	movs	r2, #2
 800f93a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f93e:	e009      	b.n	800f954 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2201      	movs	r2, #1
 800f944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f948:	e004      	b.n	800f954 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f94a:	6839      	ldr	r1, [r7, #0]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f985 	bl	800fc5c <USBD_CtlError>
  }
}
 800f952:	bf00      	nop
 800f954:	bf00      	nop
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f966:	2300      	movs	r3, #0
 800f968:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	885b      	ldrh	r3, [r3, #2]
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	4b4c      	ldr	r3, [pc, #304]	; (800faa4 <USBD_SetConfig+0x148>)
 800f972:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f974:	4b4b      	ldr	r3, [pc, #300]	; (800faa4 <USBD_SetConfig+0x148>)
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d905      	bls.n	800f988 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f97c:	6839      	ldr	r1, [r7, #0]
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f96c 	bl	800fc5c <USBD_CtlError>
    return USBD_FAIL;
 800f984:	2303      	movs	r3, #3
 800f986:	e088      	b.n	800fa9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	2b02      	cmp	r3, #2
 800f992:	d002      	beq.n	800f99a <USBD_SetConfig+0x3e>
 800f994:	2b03      	cmp	r3, #3
 800f996:	d025      	beq.n	800f9e4 <USBD_SetConfig+0x88>
 800f998:	e071      	b.n	800fa7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f99a:	4b42      	ldr	r3, [pc, #264]	; (800faa4 <USBD_SetConfig+0x148>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d01c      	beq.n	800f9dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f9a2:	4b40      	ldr	r3, [pc, #256]	; (800faa4 <USBD_SetConfig+0x148>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9ac:	4b3d      	ldr	r3, [pc, #244]	; (800faa4 <USBD_SetConfig+0x148>)
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7ff f992 	bl	800ecdc <USBD_SetClassConfig>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d004      	beq.n	800f9cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f9c2:	6839      	ldr	r1, [r7, #0]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f949 	bl	800fc5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9ca:	e065      	b.n	800fa98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 fa10 	bl	800fdf2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2203      	movs	r2, #3
 800f9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f9da:	e05d      	b.n	800fa98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 fa08 	bl	800fdf2 <USBD_CtlSendStatus>
      break;
 800f9e2:	e059      	b.n	800fa98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9e4:	4b2f      	ldr	r3, [pc, #188]	; (800faa4 <USBD_SetConfig+0x148>)
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d112      	bne.n	800fa12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2202      	movs	r2, #2
 800f9f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f9f4:	4b2b      	ldr	r3, [pc, #172]	; (800faa4 <USBD_SetConfig+0x148>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9fe:	4b29      	ldr	r3, [pc, #164]	; (800faa4 <USBD_SetConfig+0x148>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	4619      	mov	r1, r3
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7ff f985 	bl	800ed14 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 f9f1 	bl	800fdf2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa10:	e042      	b.n	800fa98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fa12:	4b24      	ldr	r3, [pc, #144]	; (800faa4 <USBD_SetConfig+0x148>)
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d02a      	beq.n	800fa76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	4619      	mov	r1, r3
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7ff f973 	bl	800ed14 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa2e:	4b1d      	ldr	r3, [pc, #116]	; (800faa4 <USBD_SetConfig+0x148>)
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa38:	4b1a      	ldr	r3, [pc, #104]	; (800faa4 <USBD_SetConfig+0x148>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f7ff f94c 	bl	800ecdc <USBD_SetClassConfig>
 800fa44:	4603      	mov	r3, r0
 800fa46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d00f      	beq.n	800fa6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 f903 	bl	800fc5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7ff f958 	bl	800ed14 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2202      	movs	r2, #2
 800fa68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa6c:	e014      	b.n	800fa98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 f9bf 	bl	800fdf2 <USBD_CtlSendStatus>
      break;
 800fa74:	e010      	b.n	800fa98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f9bb 	bl	800fdf2 <USBD_CtlSendStatus>
      break;
 800fa7c:	e00c      	b.n	800fa98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 f8eb 	bl	800fc5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa86:	4b07      	ldr	r3, [pc, #28]	; (800faa4 <USBD_SetConfig+0x148>)
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff f941 	bl	800ed14 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa92:	2303      	movs	r3, #3
 800fa94:	73fb      	strb	r3, [r7, #15]
      break;
 800fa96:	bf00      	nop
  }

  return ret;
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	20000e3c 	.word	0x20000e3c

0800faa8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	88db      	ldrh	r3, [r3, #6]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d004      	beq.n	800fac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f8cd 	bl	800fc5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fac2:	e023      	b.n	800fb0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faca:	b2db      	uxtb	r3, r3
 800facc:	2b02      	cmp	r3, #2
 800face:	dc02      	bgt.n	800fad6 <USBD_GetConfig+0x2e>
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	dc03      	bgt.n	800fadc <USBD_GetConfig+0x34>
 800fad4:	e015      	b.n	800fb02 <USBD_GetConfig+0x5a>
 800fad6:	2b03      	cmp	r3, #3
 800fad8:	d00b      	beq.n	800faf2 <USBD_GetConfig+0x4a>
 800fada:	e012      	b.n	800fb02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3308      	adds	r3, #8
 800fae6:	2201      	movs	r2, #1
 800fae8:	4619      	mov	r1, r3
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f927 	bl	800fd3e <USBD_CtlSendData>
        break;
 800faf0:	e00c      	b.n	800fb0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3304      	adds	r3, #4
 800faf6:	2201      	movs	r2, #1
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 f91f 	bl	800fd3e <USBD_CtlSendData>
        break;
 800fb00:	e004      	b.n	800fb0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 f8a9 	bl	800fc5c <USBD_CtlError>
        break;
 800fb0a:	bf00      	nop
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	3b01      	subs	r3, #1
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d81e      	bhi.n	800fb6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	88db      	ldrh	r3, [r3, #6]
 800fb30:	2b02      	cmp	r3, #2
 800fb32:	d004      	beq.n	800fb3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb34:	6839      	ldr	r1, [r7, #0]
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f890 	bl	800fc5c <USBD_CtlError>
        break;
 800fb3c:	e01a      	b.n	800fb74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2201      	movs	r2, #1
 800fb42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d005      	beq.n	800fb5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	f043 0202 	orr.w	r2, r3, #2
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	330c      	adds	r3, #12
 800fb5e:	2202      	movs	r2, #2
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f8eb 	bl	800fd3e <USBD_CtlSendData>
      break;
 800fb68:	e004      	b.n	800fb74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f875 	bl	800fc5c <USBD_CtlError>
      break;
 800fb72:	bf00      	nop
  }
}
 800fb74:	bf00      	nop
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	885b      	ldrh	r3, [r3, #2]
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d106      	bne.n	800fb9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 f92b 	bl	800fdf2 <USBD_CtlSendStatus>
  }
}
 800fb9c:	bf00      	nop
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d80b      	bhi.n	800fbd4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	885b      	ldrh	r3, [r3, #2]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d10c      	bne.n	800fbde <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 f910 	bl	800fdf2 <USBD_CtlSendStatus>
      }
      break;
 800fbd2:	e004      	b.n	800fbde <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbd4:	6839      	ldr	r1, [r7, #0]
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 f840 	bl	800fc5c <USBD_CtlError>
      break;
 800fbdc:	e000      	b.n	800fbe0 <USBD_ClrFeature+0x3c>
      break;
 800fbde:	bf00      	nop
  }
}
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	781a      	ldrb	r2, [r3, #0]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3301      	adds	r3, #1
 800fc02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	781a      	ldrb	r2, [r3, #0]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f7ff fa92 	bl	800f13c <SWAPBYTE>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3301      	adds	r3, #1
 800fc24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f7ff fa85 	bl	800f13c <SWAPBYTE>
 800fc32:	4603      	mov	r3, r0
 800fc34:	461a      	mov	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	3301      	adds	r3, #1
 800fc44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7ff fa78 	bl	800f13c <SWAPBYTE>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	461a      	mov	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	80da      	strh	r2, [r3, #6]
}
 800fc54:	bf00      	nop
 800fc56:	3710      	adds	r7, #16
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc66:	2180      	movs	r1, #128	; 0x80
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f006 fcff 	bl	801666c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc6e:	2100      	movs	r1, #0
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f006 fcfb 	bl	801666c <USBD_LL_StallEP>
}
 800fc76:	bf00      	nop
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b086      	sub	sp, #24
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	60f8      	str	r0, [r7, #12]
 800fc86:	60b9      	str	r1, [r7, #8]
 800fc88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d036      	beq.n	800fd02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc98:	6938      	ldr	r0, [r7, #16]
 800fc9a:	f000 f836 	bl	800fd0a <USBD_GetLen>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	3301      	adds	r3, #1
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	005b      	lsls	r3, r3, #1
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fcac:	7dfb      	ldrb	r3, [r7, #23]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	7812      	ldrb	r2, [r2, #0]
 800fcb6:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	2203      	movs	r2, #3
 800fcc6:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	3301      	adds	r3, #1
 800fccc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcce:	e013      	b.n	800fcf8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcd0:	7dfb      	ldrb	r3, [r7, #23]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	693a      	ldr	r2, [r7, #16]
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	3301      	adds	r3, #1
 800fce0:	613b      	str	r3, [r7, #16]
    idx++;
 800fce2:	7dfb      	ldrb	r3, [r7, #23]
 800fce4:	3301      	adds	r3, #1
 800fce6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fce8:	7dfb      	ldrb	r3, [r7, #23]
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	4413      	add	r3, r2
 800fcee:	2200      	movs	r2, #0
 800fcf0:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e7      	bne.n	800fcd0 <USBD_GetString+0x52>
 800fd00:	e000      	b.n	800fd04 <USBD_GetString+0x86>
    return;
 800fd02:	bf00      	nop
  }
}
 800fd04:	3718      	adds	r7, #24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fd0a:	b480      	push	{r7}
 800fd0c:	b085      	sub	sp, #20
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd12:	2300      	movs	r3, #0
 800fd14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd1a:	e005      	b.n	800fd28 <USBD_GetLen+0x1e>
  {
    len++;
 800fd1c:	7bfb      	ldrb	r3, [r7, #15]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	3301      	adds	r3, #1
 800fd26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1f5      	bne.n	800fd1c <USBD_GetLen+0x12>
  }

  return len;
 800fd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3714      	adds	r7, #20
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b084      	sub	sp, #16
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	60f8      	str	r0, [r7, #12]
 800fd46:	60b9      	str	r1, [r7, #8]
 800fd48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2202      	movs	r2, #2
 800fd4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	68ba      	ldr	r2, [r7, #8]
 800fd62:	2100      	movs	r1, #0
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f006 fd0b 	bl	8016780 <USBD_LL_Transmit>

  return USBD_OK;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	2100      	movs	r1, #0
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f006 fcfa 	bl	8016780 <USBD_LL_Transmit>

  return USBD_OK;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b084      	sub	sp, #16
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2203      	movs	r2, #3
 800fda6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f006 fcfe 	bl	80167c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	2100      	movs	r1, #0
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f006 fced 	bl	80167c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2204      	movs	r2, #4
 800fdfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe02:	2300      	movs	r3, #0
 800fe04:	2200      	movs	r2, #0
 800fe06:	2100      	movs	r1, #0
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f006 fcb9 	bl	8016780 <USBD_LL_Transmit>

  return USBD_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2205      	movs	r2, #5
 800fe24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe28:	2300      	movs	r3, #0
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f006 fcc7 	bl	80167c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3708      	adds	r7, #8
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
	...

0800fe40 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800fe46:	e01c      	b.n	800fe82 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800fe48:	1d3b      	adds	r3, r7, #4
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	4812      	ldr	r0, [pc, #72]	; (800fe98 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800fe4e:	f000 f94e 	bl	80100ee <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	7a5b      	ldrb	r3, [r3, #9]
 800fe56:	2b0f      	cmp	r3, #15
 800fe58:	d003      	beq.n	800fe62 <HW_IPCC_BLE_RxEvtNot+0x22>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	7a5b      	ldrb	r3, [r3, #9]
 800fe5e:	2b0e      	cmp	r3, #14
 800fe60:	d105      	bne.n	800fe6e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4619      	mov	r1, r3
 800fe66:	2002      	movs	r0, #2
 800fe68:	f000 f880 	bl	800ff6c <OutputDbgTrace>
 800fe6c:	e004      	b.n	800fe78 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4619      	mov	r1, r3
 800fe72:	2003      	movs	r0, #3
 800fe74:	f000 f87a 	bl	800ff6c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800fe78:	4b08      	ldr	r3, [pc, #32]	; (800fe9c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	4610      	mov	r0, r2
 800fe80:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800fe82:	4805      	ldr	r0, [pc, #20]	; (800fe98 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800fe84:	f000 f8f0 	bl	8010068 <LST_is_empty>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d0dc      	beq.n	800fe48 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800fe8e:	bf00      	nop
}
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	200300c4 	.word	0x200300c4
 800fe9c:	20000e40 	.word	0x20000e40

0800fea0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800fea4:	4b02      	ldr	r3, [pc, #8]	; (800feb0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4798      	blx	r3

  return;
 800feaa:	bf00      	nop
}
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	20000e44 	.word	0x20000e44

0800feb4 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800feb8:	4b07      	ldr	r3, [pc, #28]	; (800fed8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4619      	mov	r1, r3
 800fec0:	2005      	movs	r0, #5
 800fec2:	f000 f853 	bl	800ff6c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800fec6:	4b05      	ldr	r3, [pc, #20]	; (800fedc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a03      	ldr	r2, [pc, #12]	; (800fed8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800fecc:	68d2      	ldr	r2, [r2, #12]
 800fece:	6812      	ldr	r2, [r2, #0]
 800fed0:	4610      	mov	r0, r2
 800fed2:	4798      	blx	r3

  return;
 800fed4:	bf00      	nop
}
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	20030000 	.word	0x20030000
 800fedc:	20000e48 	.word	0x20000e48

0800fee0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800fee6:	e00e      	b.n	800ff06 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800fee8:	1d3b      	adds	r3, r7, #4
 800feea:	4619      	mov	r1, r3
 800feec:	480b      	ldr	r0, [pc, #44]	; (800ff1c <HW_IPCC_SYS_EvtNot+0x3c>)
 800feee:	f000 f8fe 	bl	80100ee <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4619      	mov	r1, r3
 800fef6:	2006      	movs	r0, #6
 800fef8:	f000 f838 	bl	800ff6c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800fefc:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <HW_IPCC_SYS_EvtNot+0x40>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	4610      	mov	r0, r2
 800ff04:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ff06:	4805      	ldr	r0, [pc, #20]	; (800ff1c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ff08:	f000 f8ae 	bl	8010068 <LST_is_empty>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d0ea      	beq.n	800fee8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ff12:	bf00      	nop
}
 800ff14:	3708      	adds	r7, #8
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	200300cc 	.word	0x200300cc
 800ff20:	20000e4c 	.word	0x20000e4c

0800ff24 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ff2a:	e008      	b.n	800ff3e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ff2c:	1d3b      	adds	r3, r7, #4
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4808      	ldr	r0, [pc, #32]	; (800ff54 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ff32:	f000 f8dc 	bl	80100ee <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f000 f80d 	bl	800ff58 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ff3e:	4805      	ldr	r0, [pc, #20]	; (800ff54 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ff40:	f000 f892 	bl	8010068 <LST_is_empty>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d0f0      	beq.n	800ff2c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ff4a:	bf00      	nop
}
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	200300bc 	.word	0x200300bc

0800ff58 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b085      	sub	sp, #20
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	4603      	mov	r3, r0
 800ff74:	6039      	str	r1, [r7, #0]
 800ff76:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ff78:	79fb      	ldrb	r3, [r7, #7]
 800ff7a:	2b06      	cmp	r3, #6
 800ff7c:	d845      	bhi.n	801000a <OutputDbgTrace+0x9e>
 800ff7e:	a201      	add	r2, pc, #4	; (adr r2, 800ff84 <OutputDbgTrace+0x18>)
 800ff80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff84:	0800ffa1 	.word	0x0800ffa1
 800ff88:	0800ffc5 	.word	0x0800ffc5
 800ff8c:	0800ffcb 	.word	0x0800ffcb
 800ff90:	0800ffdf 	.word	0x0800ffdf
 800ff94:	0800ffeb 	.word	0x0800ffeb
 800ff98:	0800fff1 	.word	0x0800fff1
 800ff9c:	0800ffff 	.word	0x0800ffff
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	7a5b      	ldrb	r3, [r3, #9]
 800ffa8:	2bff      	cmp	r3, #255	; 0xff
 800ffaa:	d005      	beq.n	800ffb8 <OutputDbgTrace+0x4c>
 800ffac:	2bff      	cmp	r3, #255	; 0xff
 800ffae:	dc05      	bgt.n	800ffbc <OutputDbgTrace+0x50>
 800ffb0:	2b0e      	cmp	r3, #14
 800ffb2:	d005      	beq.n	800ffc0 <OutputDbgTrace+0x54>
 800ffb4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ffb6:	e001      	b.n	800ffbc <OutputDbgTrace+0x50>
          break;
 800ffb8:	bf00      	nop
 800ffba:	e027      	b.n	801000c <OutputDbgTrace+0xa0>
          break;
 800ffbc:	bf00      	nop
 800ffbe:	e025      	b.n	801000c <OutputDbgTrace+0xa0>
          break;
 800ffc0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ffc2:	e023      	b.n	801000c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ffc8:	e020      	b.n	801000c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	7a5b      	ldrb	r3, [r3, #9]
 800ffd2:	2b0e      	cmp	r3, #14
 800ffd4:	d001      	beq.n	800ffda <OutputDbgTrace+0x6e>
 800ffd6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ffd8:	e000      	b.n	800ffdc <OutputDbgTrace+0x70>
          break;
 800ffda:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ffdc:	e016      	b.n	801000c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	7a5b      	ldrb	r3, [r3, #9]
 800ffe6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ffe8:	e010      	b.n	801000c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ffee:	e00d      	b.n	801000c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	7a5b      	ldrb	r3, [r3, #9]
 800fff8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800fffa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fffc:	e006      	b.n	801000c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	7a5b      	ldrb	r3, [r3, #9]
 8010006:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010008:	e000      	b.n	801000c <OutputDbgTrace+0xa0>

    default:
      break;
 801000a:	bf00      	nop
  }

  return;
 801000c:	bf00      	nop
}
 801000e:	3714      	adds	r7, #20
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010022:	4b0f      	ldr	r3, [pc, #60]	; (8010060 <OTP_Read+0x48>)
 8010024:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010026:	e002      	b.n	801002e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3b08      	subs	r3, #8
 801002c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3307      	adds	r3, #7
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	79fa      	ldrb	r2, [r7, #7]
 8010036:	429a      	cmp	r2, r3
 8010038:	d003      	beq.n	8010042 <OTP_Read+0x2a>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	4a09      	ldr	r2, [pc, #36]	; (8010064 <OTP_Read+0x4c>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d1f2      	bne.n	8010028 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3307      	adds	r3, #7
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	79fa      	ldrb	r2, [r7, #7]
 801004a:	429a      	cmp	r2, r3
 801004c:	d001      	beq.n	8010052 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801004e:	2300      	movs	r3, #0
 8010050:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010052:	68fb      	ldr	r3, [r7, #12]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	1fff73f8 	.word	0x1fff73f8
 8010064:	1fff7000 	.word	0x1fff7000

08010068 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 8010068:	b480      	push	{r7}
 801006a:	b087      	sub	sp, #28
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010070:	f3ef 8310 	mrs	r3, PRIMASK
 8010074:	60fb      	str	r3, [r7, #12]
  return(result);
 8010076:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801007a:	b672      	cpsid	i
}
 801007c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	429a      	cmp	r2, r3
 8010086:	d102      	bne.n	801008e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010088:	2301      	movs	r3, #1
 801008a:	75fb      	strb	r3, [r7, #23]
 801008c:	e001      	b.n	8010092 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801008e:	2300      	movs	r3, #0
 8010090:	75fb      	strb	r3, [r7, #23]
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	f383 8810 	msr	PRIMASK, r3
}
 801009c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801009e:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	371c      	adds	r7, #28
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <LST_remove_node>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_node (tListNode * node)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b087      	sub	sp, #28
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100b4:	f3ef 8310 	mrs	r3, PRIMASK
 80100b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80100ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80100bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80100be:	b672      	cpsid	i
}
 80100c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	6812      	ldr	r2, [r2, #0]
 80100ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	6852      	ldr	r2, [r2, #4]
 80100d4:	605a      	str	r2, [r3, #4]
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	f383 8810 	msr	PRIMASK, r3
}
 80100e0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80100e2:	bf00      	nop
 80100e4:	371c      	adds	r7, #28
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr

080100ee <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b086      	sub	sp, #24
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
 80100f6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100f8:	f3ef 8310 	mrs	r3, PRIMASK
 80100fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80100fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010100:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010102:	b672      	cpsid	i
}
 8010104:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681a      	ldr	r2, [r3, #0]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff ffca 	bl	80100ac <LST_remove_node>
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	f383 8810 	msr	PRIMASK, r3
}
 8010122:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010124:	bf00      	nop
 8010126:	3718      	adds	r7, #24
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	4a09      	ldr	r2, [pc, #36]	; (801015c <_ZN15Adafruit_AS7341C1Ev+0x30>)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	711a      	strb	r2, [r3, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	609a      	str	r2, [r3, #8]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	731a      	strb	r2, [r3, #12]
}
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4618      	mov	r0, r3
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	08017920 	.word	0x08017920

08010160 <_ZN15Adafruit_AS7341D1Ev>:

/**
 * @brief Destroy the Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::~Adafruit_AS7341(void) {
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	4a04      	ldr	r2, [pc, #16]	; (801017c <_ZN15Adafruit_AS7341D1Ev+0x1c>)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	601a      	str	r2, [r3, #0]
	//   if (temp_sensor)
	//     delete temp_sensor;
	//   if (pressure_sensor)
	//     delete pressure_sensor;
}
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr
 801017c:	08017920 	.word	0x08017920

08010180 <_ZN15Adafruit_AS73415_initEl>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_AS7341::_init(int32_t sensor_id) {
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]

	// make sure we're talking to the right chip
	if ((readRegisterByte(AS7341_WHOAMI) & 0xFC) != (AS7341_CHIP_ID << 2)) {
 801018a:	2192      	movs	r1, #146	; 0x92
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 f882 	bl	8010296 <_ZN15Adafruit_AS734116readRegisterByteEt>
 8010192:	4603      	mov	r3, r0
 8010194:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8010198:	2b24      	cmp	r3, #36	; 0x24
 801019a:	bf14      	ite	ne
 801019c:	2301      	movne	r3, #1
 801019e:	2300      	moveq	r3, #0
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d001      	beq.n	80101aa <_ZN15Adafruit_AS73415_initEl+0x2a>
		return false;
 80101a6:	2300      	movs	r3, #0
 80101a8:	e004      	b.n	80101b4 <_ZN15Adafruit_AS73415_initEl+0x34>
	}

	powerEnable(true);
 80101aa:	2101      	movs	r1, #1
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f805 	bl	80101bc <_ZN15Adafruit_AS734111powerEnableEb>
	return true;
 80101b2:	2301      	movs	r3, #1
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	460b      	mov	r3, r1
 80101c6:	70fb      	strb	r3, [r7, #3]
	uint8_t enable_reg = readRegisterByte(AS7341_ENABLE);
 80101c8:	2180      	movs	r1, #128	; 0x80
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f863 	bl	8010296 <_ZN15Adafruit_AS734116readRegisterByteEt>
 80101d0:	4603      	mov	r3, r0
 80101d2:	73fb      	strb	r3, [r7, #15]
	enable_reg = modifyBitInByte(enable_reg, (uint8_t) enable_power, 0);
 80101d4:	78fa      	ldrb	r2, [r7, #3]
 80101d6:	7bf9      	ldrb	r1, [r7, #15]
 80101d8:	2300      	movs	r3, #0
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 f833 	bl	8010246 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>
 80101e0:	4603      	mov	r3, r0
 80101e2:	73fb      	strb	r3, [r7, #15]
	writeRegisterByte(AS7341_ENABLE, enable_reg);
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
 80101e6:	461a      	mov	r2, r3
 80101e8:	2180      	movs	r1, #128	; 0x80
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 f804 	bl	80101f8 <_ZN15Adafruit_AS734117writeRegisterByteEhh>
}
 80101f0:	bf00      	nop
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <_ZN15Adafruit_AS734117writeRegisterByteEhh>:
	} else {
		return false;
	}
}

bool Adafruit_AS7341::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b086      	sub	sp, #24
 80101fc:	af04      	add	r7, sp, #16
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	460b      	mov	r3, r1
 8010202:	70fb      	strb	r3, [r7, #3]
 8010204:	4613      	mov	r3, r2
 8010206:	70bb      	strb	r3, [r7, #2]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, &val, 1, 10)) {
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6898      	ldr	r0, [r3, #8]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	7b1b      	ldrb	r3, [r3, #12]
 8010210:	b299      	uxth	r1, r3
 8010212:	78fb      	ldrb	r3, [r7, #3]
 8010214:	b29a      	uxth	r2, r3
 8010216:	230a      	movs	r3, #10
 8010218:	9302      	str	r3, [sp, #8]
 801021a:	2301      	movs	r3, #1
 801021c:	9301      	str	r3, [sp, #4]
 801021e:	1cbb      	adds	r3, r7, #2
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	2301      	movs	r3, #1
 8010224:	f7f4 fc24 	bl	8004a70 <HAL_I2C_Mem_Write>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	bf0c      	ite	eq
 801022e:	2301      	moveq	r3, #1
 8010230:	2300      	movne	r3, #0
 8010232:	b2db      	uxtb	r3, r3
	if (HAL_OK
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x44>
		return true;
 8010238:	2301      	movs	r3, #1
 801023a:	e000      	b.n	801023e <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x46>
	} else {
		return false;
 801023c:	2300      	movs	r3, #0
	}
}
 801023e:	4618      	mov	r0, r3
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}

08010246 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>:

uint8_t Adafruit_AS7341::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
 8010246:	b480      	push	{r7}
 8010248:	b085      	sub	sp, #20
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
 801024e:	4608      	mov	r0, r1
 8010250:	4611      	mov	r1, r2
 8010252:	461a      	mov	r2, r3
 8010254:	4603      	mov	r3, r0
 8010256:	70fb      	strb	r3, [r7, #3]
 8010258:	460b      	mov	r3, r1
 801025a:	70bb      	strb	r3, [r7, #2]
 801025c:	4613      	mov	r3, r2
 801025e:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 1 << pos;
 8010260:	787b      	ldrb	r3, [r7, #1]
 8010262:	2201      	movs	r2, #1
 8010264:	fa02 f303 	lsl.w	r3, r2, r3
 8010268:	73fb      	strb	r3, [r7, #15]
	return ((var & ~mask) | (value << pos));
 801026a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801026e:	43db      	mvns	r3, r3
 8010270:	b25a      	sxtb	r2, r3
 8010272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010276:	4013      	ands	r3, r2
 8010278:	b25a      	sxtb	r2, r3
 801027a:	78b9      	ldrb	r1, [r7, #2]
 801027c:	787b      	ldrb	r3, [r7, #1]
 801027e:	fa01 f303 	lsl.w	r3, r1, r3
 8010282:	b25b      	sxtb	r3, r3
 8010284:	4313      	orrs	r3, r2
 8010286:	b25b      	sxtb	r3, r3
 8010288:	b2db      	uxtb	r3, r3
}
 801028a:	4618      	mov	r0, r3
 801028c:	3714      	adds	r7, #20
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <_ZN15Adafruit_AS734116readRegisterByteEt>:
	register_value |= value << pos; // and add in the new data

	return writeRegisterByte(reg, register_value);
}

uint8_t Adafruit_AS7341::readRegisterByte(uint16_t mem_addr) {
 8010296:	b580      	push	{r7, lr}
 8010298:	b088      	sub	sp, #32
 801029a:	af04      	add	r7, sp, #16
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	460b      	mov	r3, r1
 80102a0:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6898      	ldr	r0, [r3, #8]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7b1b      	ldrb	r3, [r3, #12]
 80102aa:	b299      	uxth	r1, r3
 80102ac:	887a      	ldrh	r2, [r7, #2]
 80102ae:	230a      	movs	r3, #10
 80102b0:	9302      	str	r3, [sp, #8]
 80102b2:	2301      	movs	r3, #1
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	f107 030f 	add.w	r3, r7, #15
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	2301      	movs	r3, #1
 80102be:	f7f4 fceb 	bl	8004c98 <HAL_I2C_Mem_Read>
	return data;
 80102c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <_ZN15Adafruit_BME680C1Ev>:
/*!
 *  @brief  Instantiates sensor with i2c.
 *  @param  *theWire
 *          optional Wire object
 */
Adafruit_BME680::Adafruit_BME680(void)
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
    : _meas_start(0), _meas_period(0) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	611a      	str	r2, [r3, #16]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	751a      	strb	r2, [r3, #20]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	625a      	str	r2, [r3, #36]	; 0x24
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2200      	movs	r2, #0
 80102ea:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	4618      	mov	r0, r3
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr

080102fa <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>:
#include "math.h"

#define delay			HAL_Delay
#define I2C_TIMEOUT		100

void CALIPILE::setup(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, uint8_t identifier) {
 80102fa:	b480      	push	{r7}
 80102fc:	b085      	sub	sp, #20
 80102fe:	af00      	add	r7, sp, #0
 8010300:	60f8      	str	r0, [r7, #12]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	461a      	mov	r2, r3
 8010306:	460b      	mov	r3, r1
 8010308:	72fb      	strb	r3, [r7, #11]
 801030a:	4613      	mov	r3, r2
 801030c:	72bb      	strb	r3, [r7, #10]
	i2c_han = i2c_handle;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	605a      	str	r2, [r3, #4]
	i2c_addr = i2c_address << 1;
 8010314:	7afb      	ldrb	r3, [r7, #11]
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	b2da      	uxtb	r2, r3
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	721a      	strb	r2, [r3, #8]
	descriptor = identifier;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	7aba      	ldrb	r2, [r7, #10]
 8010322:	701a      	strb	r2, [r3, #0]
}
 8010324:	bf00      	nop
 8010326:	3714      	adds	r7, #20
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <_ZN8CALIPILE4wakeEv>:

void CALIPILE::wake() {
 8010330:	b580      	push	{r7, lr}
 8010332:	b088      	sub	sp, #32
 8010334:	af04      	add	r7, sp, #16
 8010336:	6078      	str	r0, [r7, #4]
//	writeByte(0x00, 0x04, 0x00);  // issue general call and reload command
	uint8_t data = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c_han, 0, 0x04, 1, &data, 1, I2C_TIMEOUT);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6858      	ldr	r0, [r3, #4]
 8010340:	2364      	movs	r3, #100	; 0x64
 8010342:	9302      	str	r3, [sp, #8]
 8010344:	2301      	movs	r3, #1
 8010346:	9301      	str	r3, [sp, #4]
 8010348:	f107 030f 	add.w	r3, r7, #15
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	2301      	movs	r3, #1
 8010350:	2204      	movs	r2, #4
 8010352:	2100      	movs	r1, #0
 8010354:	f7f4 fb8c 	bl	8004a70 <HAL_I2C_Mem_Write>
	delay(1);
 8010358:	2001      	movs	r0, #1
 801035a:	f7f0 fd5d 	bl	8000e18 <HAL_Delay>
}
 801035e:	bf00      	nop
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
	...

08010368 <_ZN8CALIPILE10readEEPROMEv>:

void CALIPILE::readEEPROM()
{
 8010368:	b580      	push	{r7, lr}
 801036a:	ed2d 8b02 	vpush	{d8}
 801036e:	b088      	sub	sp, #32
 8010370:	af02      	add	r7, sp, #8
 8010372:	6078      	str	r0, [r7, #4]

	uint8_t rawData[2] = {0, 0};
 8010374:	2300      	movs	r3, #0
 8010376:	81bb      	strh	r3, [r7, #12]
	/* Start of EEPROM operations, just have to do once *************************************************** */
	// Check EEPROM protocol number as a test of I2C communication
	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x80);// enable EEPROM read
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	7a19      	ldrb	r1, [r3, #8]
 801037c:	2380      	movs	r3, #128	; 0x80
 801037e:	221f      	movs	r2, #31
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f9e7 	bl	8010754 <_ZN8CALIPILE9writeByteEhhh>

	uint8_t c = readByte(i2c_addr, CALIPILE_EEPROM_PROTOCOL);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	7a1b      	ldrb	r3, [r3, #8]
 801038a:	2220      	movs	r2, #32
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 f9f7 	bl	8010782 <_ZN8CALIPILE8readByteEhh>
 8010394:	4603      	mov	r3, r0
 8010396:	73fb      	strb	r3, [r7, #15]
	//Serial.print("CaliPile EEPROM protocol number is "); //Serial.println(c);
	//Serial.println("CaliPile EEPROM protocol number should be 3");

	uint8_t d = readByte(i2c_addr, CALIPILE_SLAVE_ADDRESS);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	7a1b      	ldrb	r3, [r3, #8]
 801039c:	223f      	movs	r2, #63	; 0x3f
 801039e:	4619      	mov	r1, r3
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f9ee 	bl	8010782 <_ZN8CALIPILE8readByteEhh>
 80103a6:	4603      	mov	r3, r0
 80103a8:	73bb      	strb	r3, [r7, #14]
	//Serial.println("CaliPile EEPROM slave address should be 140");
	//Serial.println(" ");

	// Read the EEPROM calibration constants

	_LOOKUP = readByte(i2c_addr, CALIPILE_EEPROM_LOOKUPNUM);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	7a1b      	ldrb	r3, [r3, #8]
 80103ae:	2229      	movs	r2, #41	; 0x29
 80103b0:	4619      	mov	r1, r3
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 f9e5 	bl	8010782 <_ZN8CALIPILE8readByteEhh>
 80103b8:	4603      	mov	r3, r0
 80103ba:	461a      	mov	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	765a      	strb	r2, [r3, #25]
	//Serial.print("CaliPile LookUpNumber is "); //Serial.println(_LOOKUP);

	readBytes(i2c_addr, CALIPILE_EEPROM_PTAT25, 2, &rawData[0]);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	7a19      	ldrb	r1, [r3, #8]
 80103c4:	f107 030c 	add.w	r3, r7, #12
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	2302      	movs	r3, #2
 80103cc:	222a      	movs	r2, #42	; 0x2a
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 f9ec 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	_PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 80103d4:	7b3b      	ldrb	r3, [r7, #12]
 80103d6:	021b      	lsls	r3, r3, #8
 80103d8:	b21a      	sxth	r2, r3
 80103da:	7b7b      	ldrb	r3, [r7, #13]
 80103dc:	b21b      	sxth	r3, r3
 80103de:	4313      	orrs	r3, r2
 80103e0:	b21b      	sxth	r3, r3
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	815a      	strh	r2, [r3, #10]
	//Serial.print("CaliPile PTAT25 is "); //Serial.println(_PTAT25);

	readBytes(i2c_addr, CALIPILE_EEPROM_M, 2, &rawData[0]);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	7a19      	ldrb	r1, [r3, #8]
 80103ec:	f107 030c 	add.w	r3, r7, #12
 80103f0:	9300      	str	r3, [sp, #0]
 80103f2:	2302      	movs	r3, #2
 80103f4:	222c      	movs	r2, #44	; 0x2c
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 f9d8 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	_M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 80103fc:	7b3b      	ldrb	r3, [r7, #12]
 80103fe:	021b      	lsls	r3, r3, #8
 8010400:	b21a      	sxth	r2, r3
 8010402:	7b7b      	ldrb	r3, [r7, #13]
 8010404:	b21b      	sxth	r3, r3
 8010406:	4313      	orrs	r3, r2
 8010408:	b21b      	sxth	r3, r3
 801040a:	b29a      	uxth	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	819a      	strh	r2, [r3, #12]
	_M /= 100;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	899b      	ldrh	r3, [r3, #12]
 8010414:	4a4f      	ldr	r2, [pc, #316]	; (8010554 <_ZN8CALIPILE10readEEPROMEv+0x1ec>)
 8010416:	fba2 2303 	umull	r2, r3, r2, r3
 801041a:	095b      	lsrs	r3, r3, #5
 801041c:	b29a      	uxth	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	819a      	strh	r2, [r3, #12]
	//Serial.print("CaliPile M is "); //Serial.println(_M);

	readBytes(i2c_addr, CALIPILE_EEPROM_U0, 2, &rawData[0]);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	7a19      	ldrb	r1, [r3, #8]
 8010426:	f107 030c 	add.w	r3, r7, #12
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	2302      	movs	r3, #2
 801042e:	222e      	movs	r2, #46	; 0x2e
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 f9bb 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	_U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 8010436:	7b3b      	ldrb	r3, [r7, #12]
 8010438:	021b      	lsls	r3, r3, #8
 801043a:	b21a      	sxth	r2, r3
 801043c:	7b7b      	ldrb	r3, [r7, #13]
 801043e:	b21b      	sxth	r3, r3
 8010440:	4313      	orrs	r3, r2
 8010442:	b21b      	sxth	r3, r3
 8010444:	b29a      	uxth	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	81da      	strh	r2, [r3, #14]
	_U0 += 32768;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	89db      	ldrh	r3, [r3, #14]
 801044e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010452:	b29a      	uxth	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	81da      	strh	r2, [r3, #14]
	//Serial.print("CaliPile U0 is "); //Serial.println(_U0);

	readBytes(i2c_addr, CALIPILE_EEPROM_UOUT1, 2, &rawData[0]);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	7a19      	ldrb	r1, [r3, #8]
 801045c:	f107 030c 	add.w	r3, r7, #12
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	2302      	movs	r3, #2
 8010464:	2230      	movs	r2, #48	; 0x30
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 f9a0 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	_UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 801046c:	7b3b      	ldrb	r3, [r7, #12]
 801046e:	021b      	lsls	r3, r3, #8
 8010470:	7b7a      	ldrb	r2, [r7, #13]
 8010472:	4313      	orrs	r3, r2
 8010474:	461a      	mov	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	615a      	str	r2, [r3, #20]
	_UOUT1 *= 2;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	695b      	ldr	r3, [r3, #20]
 801047e:	005a      	lsls	r2, r3, #1
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	615a      	str	r2, [r3, #20]
	//Serial.print("CaliPile UOUT1 is "); //Serial.println(_UOUT1);

	_TOBJ1 = readByte(i2c_addr, CALIPILE_EEPROM_TOBJ1);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	7a1b      	ldrb	r3, [r3, #8]
 8010488:	2232      	movs	r2, #50	; 0x32
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f978 	bl	8010782 <_ZN8CALIPILE8readByteEhh>
 8010492:	4603      	mov	r3, r0
 8010494:	461a      	mov	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	761a      	strb	r2, [r3, #24]
	//Serial.print("CaliPile TOBJ1 is "); //Serial.println(_TOBJ1);

	readBytes(i2c_addr, CALIPILE_EEPROM_CHECKSUM, 2, &rawData[0]);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	7a19      	ldrb	r1, [r3, #8]
 801049e:	f107 030c 	add.w	r3, r7, #12
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	2302      	movs	r3, #2
 80104a6:	2221      	movs	r2, #33	; 0x21
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f97f 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	_CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 80104ae:	7b3b      	ldrb	r3, [r7, #12]
 80104b0:	021b      	lsls	r3, r3, #8
 80104b2:	b21a      	sxth	r2, r3
 80104b4:	7b7b      	ldrb	r3, [r7, #13]
 80104b6:	b21b      	sxth	r3, r3
 80104b8:	4313      	orrs	r3, r2
 80104ba:	b21b      	sxth	r3, r3
 80104bc:	b29a      	uxth	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	821a      	strh	r2, [r3, #16]
	//Serial.print("CaliPile CHECKSUM is supposed to be "); //Serial.println(_CHECKSUM);

	// Calculate the checksum
	uint16_t sum = 0;
 80104c2:	2300      	movs	r3, #0
 80104c4:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 80104c6:	2323      	movs	r3, #35	; 0x23
 80104c8:	613b      	str	r3, [r7, #16]
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	2b3f      	cmp	r3, #63	; 0x3f
 80104ce:	dc10      	bgt.n	80104f2 <_ZN8CALIPILE10readEEPROMEv+0x18a>
	{
		sum += readByte(i2c_addr, ii);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	7a1b      	ldrb	r3, [r3, #8]
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	b2d2      	uxtb	r2, r2
 80104d8:	4619      	mov	r1, r3
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f951 	bl	8010782 <_ZN8CALIPILE8readByteEhh>
 80104e0:	4603      	mov	r3, r0
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	8afb      	ldrh	r3, [r7, #22]
 80104e6:	4413      	add	r3, r2
 80104e8:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	3301      	adds	r3, #1
 80104ee:	613b      	str	r3, [r7, #16]
 80104f0:	e7eb      	b.n	80104ca <_ZN8CALIPILE10readEEPROMEv+0x162>
	}
	//Serial.print("CaliPile CHECKSUM is "); //Serial.println(sum + c);

	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x00); // disable EEPROM read
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	7a19      	ldrb	r1, [r3, #8]
 80104f6:	2300      	movs	r3, #0
 80104f8:	221f      	movs	r2, #31
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f000 f92a 	bl	8010754 <_ZN8CALIPILE9writeByteEhhh>
	/* End of EEPROM operations, just have to do once *************************************************** */

	// Construct needed calibration constants (just need to calculate once)
	_k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	695b      	ldr	r3, [r3, #20]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	89d2      	ldrh	r2, [r2, #14]
 8010508:	1a9b      	subs	r3, r3, r2
 801050a:	ee07 3a90 	vmov	s15, r3
 801050e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	7e1b      	ldrb	r3, [r3, #24]
 8010516:	ee07 3a90 	vmov	s15, r3
 801051a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801051e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8010558 <_ZN8CALIPILE10readEEPROMEv+0x1f0>
 8010522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010526:	eddf 0a0d 	vldr	s1, [pc, #52]	; 801055c <_ZN8CALIPILE10readEEPROMEv+0x1f4>
 801052a:	eeb0 0a67 	vmov.f32	s0, s15
 801052e:	f006 fa2f 	bl	8016990 <powf>
 8010532:	eef0 7a40 	vmov.f32	s15, s0
 8010536:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8010560 <_ZN8CALIPILE10readEEPROMEv+0x1f8>
 801053a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801053e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8010548:	bf00      	nop
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	ecbd 8b02 	vpop	{d8}
 8010552:	bd80      	pop	{r7, pc}
 8010554:	51eb851f 	.word	0x51eb851f
 8010558:	43889333 	.word	0x43889333
 801055c:	40733333 	.word	0x40733333
 8010560:	4f16b4e3 	.word	0x4f16b4e3

08010564 <_ZN8CALIPILE11initTempThrEt>:
	// select motion threshold
	writeByte(i2c_addr, CALIPILE_TP_PRES_THLD, 0x22);// presence threshold, set at 50 counts
	writeByte(i2c_addr, CALIPILE_TP_MOT_THLD, 0x0A);// motion threshold, set at 10 counts
}

void CALIPILE::initTempThr(uint16_t Tcounts) {
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af02      	add	r7, sp, #8
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	460b      	mov	r3, r1
 801056e:	807b      	strh	r3, [r7, #2]
	uint8_t rawData[2] = {0, 0};
 8010570:	2300      	movs	r3, #0
 8010572:	813b      	strh	r3, [r7, #8]
	// specify the over temperature interrupt threshold (2 bytes)
	writeByte(i2c_addr, CALIPILE_TPOT_THR, Tcounts);// 0x83 means 67,072 counts as threshold
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	7a19      	ldrb	r1, [r3, #8]
 8010578:	887b      	ldrh	r3, [r7, #2]
 801057a:	b2db      	uxtb	r3, r3
 801057c:	221c      	movs	r2, #28
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f8e8 	bl	8010754 <_ZN8CALIPILE9writeByteEhhh>
	writeByte(i2c_addr, (CALIPILE_TPOT_THR + 1), 0x00);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	7a19      	ldrb	r1, [r3, #8]
 8010588:	2300      	movs	r3, #0
 801058a:	221d      	movs	r2, #29
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 f8e1 	bl	8010754 <_ZN8CALIPILE9writeByteEhhh>
	uint8_t temp = readByte(i2c_addr, CALIPILE_SRC_SELECT);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	7a1b      	ldrb	r3, [r3, #8]
 8010596:	221a      	movs	r2, #26
 8010598:	4619      	mov	r1, r3
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 f8f1 	bl	8010782 <_ZN8CALIPILE8readByteEhh>
 80105a0:	4603      	mov	r3, r0
 80105a2:	73fb      	strb	r3, [r7, #15]
	writeByte(i2c_addr, CALIPILE_SRC_SELECT, temp | 0x10);// interrupt on exceeding threshold
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7a19      	ldrb	r1, [r3, #8]
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	f043 0310 	orr.w	r3, r3, #16
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	221a      	movs	r2, #26
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 f8ce 	bl	8010754 <_ZN8CALIPILE9writeByteEhhh>
	// Verify threshold set
	readBytes(i2c_addr, CALIPILE_TPOT_THR, 2, &rawData[0]);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	7a19      	ldrb	r1, [r3, #8]
 80105bc:	f107 0308 	add.w	r3, r7, #8
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	2302      	movs	r3, #2
 80105c4:	221c      	movs	r2, #28
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 f8f0 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 80105cc:	7a3b      	ldrb	r3, [r7, #8]
 80105ce:	021b      	lsls	r3, r3, #8
 80105d0:	b21a      	sxth	r2, r3
 80105d2:	7a7b      	ldrb	r3, [r7, #9]
 80105d4:	b21b      	sxth	r3, r3
 80105d6:	4313      	orrs	r3, r2
 80105d8:	b21b      	sxth	r3, r3
 80105da:	81bb      	strh	r3, [r7, #12]
	//Serial.print("Overtemp threshold = "); //Serial.println(TPOTTHR * 2);
}
 80105dc:	bf00      	nop
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <_ZN8CALIPILE8getTPAMBEv>:

uint16_t CALIPILE::getTPAMB() {
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af02      	add	r7, sp, #8
 80105ea:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2] = {0, 0};
 80105ec:	2300      	movs	r3, #0
 80105ee:	81bb      	strh	r3, [r7, #12]
	readBytes(i2c_addr, CALIPILE_TPAMBIENT, 2, &rawData[0]);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	7a19      	ldrb	r1, [r3, #8]
 80105f4:	f107 030c 	add.w	r3, r7, #12
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	2302      	movs	r3, #2
 80105fc:	2203      	movs	r2, #3
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 f8d4 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1];
 8010604:	7b3b      	ldrb	r3, [r7, #12]
 8010606:	021b      	lsls	r3, r3, #8
 8010608:	b21b      	sxth	r3, r3
 801060a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 801060e:	b21a      	sxth	r2, r3
 8010610:	7b7b      	ldrb	r3, [r7, #13]
 8010612:	b21b      	sxth	r3, r3
 8010614:	4313      	orrs	r3, r2
 8010616:	b21b      	sxth	r3, r3
 8010618:	81fb      	strh	r3, [r7, #14]
	return temp;
 801061a:	89fb      	ldrh	r3, [r7, #14]
}
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <_ZN8CALIPILE8getTPOBJEv>:

uint32_t CALIPILE::getTPOBJ() {
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af02      	add	r7, sp, #8
 801062a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[3] = {0, 0, 0};
 801062c:	4b10      	ldr	r3, [pc, #64]	; (8010670 <_ZN8CALIPILE8getTPOBJEv+0x4c>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	723b      	strb	r3, [r7, #8]
 8010632:	f107 0309 	add.w	r3, r7, #9
 8010636:	2200      	movs	r2, #0
 8010638:	801a      	strh	r2, [r3, #0]
	readBytes(i2c_addr, CALIPILE_TPOBJECT, 3, &rawData[0]);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	7a19      	ldrb	r1, [r3, #8]
 801063e:	f107 0308 	add.w	r3, r7, #8
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	2303      	movs	r3, #3
 8010646:	2201      	movs	r2, #1
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 f8af 	bl	80107ac <_ZN8CALIPILE9readBytesEhhhPh>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 801064e:	7a3b      	ldrb	r3, [r7, #8]
 8010650:	061a      	lsls	r2, r3, #24
 8010652:	7a7b      	ldrb	r3, [r7, #9]
 8010654:	041b      	lsls	r3, r3, #16
 8010656:	431a      	orrs	r2, r3
 8010658:	7abb      	ldrb	r3, [r7, #10]
 801065a:	021b      	lsls	r3, r3, #8
 801065c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010660:	4313      	orrs	r3, r2
 8010662:	0bdb      	lsrs	r3, r3, #15
 8010664:	60fb      	str	r3, [r7, #12]
	return temp;
 8010666:	68fb      	ldr	r3, [r7, #12]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	080176ac 	.word	0x080176ac

08010674 <_ZN8CALIPILE7getTambEt>:
uint8_t CALIPILE::getTPAMBSHK() {
	uint8_t temp = readByte(i2c_addr, CALIPILE_TPAMB_SHOCK);
	return temp;
}

float CALIPILE::getTamb(uint16_t TPAMB) {
 8010674:	b480      	push	{r7}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	460b      	mov	r3, r1
 801067e:	807b      	strh	r3, [r7, #2]
	float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 8010680:	887b      	ldrh	r3, [r7, #2]
 8010682:	ee07 3a90 	vmov	s15, r3
 8010686:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	895b      	ldrh	r3, [r3, #10]
 801068e:	ee07 3a90 	vmov	s15, r3
 8010692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010696:	ee37 7a67 	vsub.f32	s14, s14, s15
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	899b      	ldrh	r3, [r3, #12]
 801069e:	ee07 3a90 	vmov	s15, r3
 80106a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80106a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80106aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80106ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80106d4 <_ZN8CALIPILE7getTambEt+0x60>
 80106b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106ba:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	ee07 3a90 	vmov	s15, r3
}
 80106c4:	eeb0 0a67 	vmov.f32	s0, s15
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	43951333 	.word	0x43951333

080106d8 <_ZN8CALIPILE7getTobjEmf>:

float CALIPILE::getTobj(uint32_t TPOBJ, float Tamb) {
 80106d8:	b580      	push	{r7, lr}
 80106da:	b088      	sub	sp, #32
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp0 = powf(Tamb, 3.8f);
 80106e6:	eddf 0a19 	vldr	s1, [pc, #100]	; 801074c <_ZN8CALIPILE7getTobjEmf+0x74>
 80106ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80106ee:	f006 f94f 	bl	8016990 <powf>
 80106f2:	ed87 0a07 	vstr	s0, [r7, #28]
	float temp1 = ( ((float) TPOBJ) - ((float) _U0) ) / _k;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	ee07 3a90 	vmov	s15, r3
 80106fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	89db      	ldrh	r3, [r3, #14]
 8010704:	ee07 3a90 	vmov	s15, r3
 8010708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801070c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	ed93 7a07 	vldr	s14, [r3, #28]
 8010716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801071a:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 801071e:	ed97 7a07 	vldr	s14, [r7, #28]
 8010722:	edd7 7a06 	vldr	s15, [r7, #24]
 8010726:	ee77 7a27 	vadd.f32	s15, s14, s15
 801072a:	eddf 0a09 	vldr	s1, [pc, #36]	; 8010750 <_ZN8CALIPILE7getTobjEmf+0x78>
 801072e:	eeb0 0a67 	vmov.f32	s0, s15
 8010732:	f006 f92d 	bl	8016990 <powf>
 8010736:	ed87 0a05 	vstr	s0, [r7, #20]
	return temp3;
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	ee07 3a90 	vmov	s15, r3
}
 8010740:	eeb0 0a67 	vmov.f32	s0, s15
 8010744:	3720      	adds	r7, #32
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	40733333 	.word	0x40733333
 8010750:	3e86bca2 	.word	0x3e86bca2

08010754 <_ZN8CALIPILE9writeByteEhhh>:
//	//Serial.println("done\n");
//
//}

// I2C read/write functions for the BMP280 sensors
void CALIPILE::writeByte(uint8_t address, uint8_t subAddress, uint8_t data) {
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	4608      	mov	r0, r1
 801075e:	4611      	mov	r1, r2
 8010760:	461a      	mov	r2, r3
 8010762:	4603      	mov	r3, r0
 8010764:	70fb      	strb	r3, [r7, #3]
 8010766:	460b      	mov	r3, r1
 8010768:	70bb      	strb	r3, [r7, #2]
 801076a:	4613      	mov	r3, r2
 801076c:	707b      	strb	r3, [r7, #1]
	writeRegister(subAddress, &data, 1);
 801076e:	1c7a      	adds	r2, r7, #1
 8010770:	78b9      	ldrb	r1, [r7, #2]
 8010772:	2301      	movs	r3, #1
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f85a 	bl	801082e <_ZN8CALIPILE13writeRegisterEhPht>
}
 801077a:	bf00      	nop
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <_ZN8CALIPILE8readByteEhh>:

uint8_t CALIPILE::readByte(uint8_t address, uint8_t subAddress) {
 8010782:	b580      	push	{r7, lr}
 8010784:	b084      	sub	sp, #16
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	70fb      	strb	r3, [r7, #3]
 801078e:	4613      	mov	r3, r2
 8010790:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[1];
	readRegister(subAddress, &temp[0], 1);
 8010792:	78bb      	ldrb	r3, [r7, #2]
 8010794:	b299      	uxth	r1, r3
 8010796:	f107 020c 	add.w	r2, r7, #12
 801079a:	2301      	movs	r3, #1
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f81e 	bl	80107de <_ZN8CALIPILE12readRegisterEtPht>
	return temp[0];
 80107a2:	7b3b      	ldrb	r3, [r7, #12]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_ZN8CALIPILE9readBytesEhhhPh>:

void CALIPILE::readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest) {
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	4608      	mov	r0, r1
 80107b6:	4611      	mov	r1, r2
 80107b8:	461a      	mov	r2, r3
 80107ba:	4603      	mov	r3, r0
 80107bc:	70fb      	strb	r3, [r7, #3]
 80107be:	460b      	mov	r3, r1
 80107c0:	70bb      	strb	r3, [r7, #2]
 80107c2:	4613      	mov	r3, r2
 80107c4:	707b      	strb	r3, [r7, #1]
	readRegister(subAddress, dest, count);
 80107c6:	78bb      	ldrb	r3, [r7, #2]
 80107c8:	b299      	uxth	r1, r3
 80107ca:	787b      	ldrb	r3, [r7, #1]
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	693a      	ldr	r2, [r7, #16]
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 f804 	bl	80107de <_ZN8CALIPILE12readRegisterEtPht>
}
 80107d6:	bf00      	nop
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <_ZN8CALIPILE12readRegisterEtPht>:
	} else {
		return false;
	}
}

bool CALIPILE::readRegister(uint16_t mem_addr, uint8_t *dest, uint16_t size) {
 80107de:	b580      	push	{r7, lr}
 80107e0:	b088      	sub	sp, #32
 80107e2:	af04      	add	r7, sp, #16
 80107e4:	60f8      	str	r0, [r7, #12]
 80107e6:	607a      	str	r2, [r7, #4]
 80107e8:	461a      	mov	r2, r3
 80107ea:	460b      	mov	r3, r1
 80107ec:	817b      	strh	r3, [r7, #10]
 80107ee:	4613      	mov	r3, r2
 80107f0:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, I2C_TIMEOUT)) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6858      	ldr	r0, [r3, #4]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	7a1b      	ldrb	r3, [r3, #8]
 80107fa:	b299      	uxth	r1, r3
 80107fc:	897a      	ldrh	r2, [r7, #10]
 80107fe:	2364      	movs	r3, #100	; 0x64
 8010800:	9302      	str	r3, [sp, #8]
 8010802:	893b      	ldrh	r3, [r7, #8]
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	2301      	movs	r3, #1
 801080c:	f7f4 fa44 	bl	8004c98 <HAL_I2C_Mem_Read>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	bf0c      	ite	eq
 8010816:	2301      	moveq	r3, #1
 8010818:	2300      	movne	r3, #0
 801081a:	b2db      	uxtb	r3, r3
	if (HAL_OK
 801081c:	2b00      	cmp	r3, #0
 801081e:	d001      	beq.n	8010824 <_ZN8CALIPILE12readRegisterEtPht+0x46>
		return true;
 8010820:	2301      	movs	r3, #1
 8010822:	e000      	b.n	8010826 <_ZN8CALIPILE12readRegisterEtPht+0x48>
	} else {
		return false;
 8010824:	2300      	movs	r3, #0
	}
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <_ZN8CALIPILE13writeRegisterEhPht>:

bool CALIPILE::writeRegister(uint8_t mem_addr, uint8_t *val, uint16_t size) {
 801082e:	b580      	push	{r7, lr}
 8010830:	b088      	sub	sp, #32
 8010832:	af04      	add	r7, sp, #16
 8010834:	60f8      	str	r0, [r7, #12]
 8010836:	607a      	str	r2, [r7, #4]
 8010838:	461a      	mov	r2, r3
 801083a:	460b      	mov	r3, r1
 801083c:	72fb      	strb	r3, [r7, #11]
 801083e:	4613      	mov	r3, r2
 8010840:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, val, size, I2C_TIMEOUT)) {
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6858      	ldr	r0, [r3, #4]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	7a1b      	ldrb	r3, [r3, #8]
 801084a:	b299      	uxth	r1, r3
 801084c:	7afb      	ldrb	r3, [r7, #11]
 801084e:	b29a      	uxth	r2, r3
 8010850:	2364      	movs	r3, #100	; 0x64
 8010852:	9302      	str	r3, [sp, #8]
 8010854:	893b      	ldrh	r3, [r7, #8]
 8010856:	9301      	str	r3, [sp, #4]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	2301      	movs	r3, #1
 801085e:	f7f4 f907 	bl	8004a70 <HAL_I2C_Mem_Write>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	bf0c      	ite	eq
 8010868:	2301      	moveq	r3, #1
 801086a:	2300      	movne	r3, #0
 801086c:	b2db      	uxtb	r3, r3
	if (HAL_OK
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <_ZN8CALIPILE13writeRegisterEhPht+0x48>
		return true;
 8010872:	2301      	movs	r3, #1
 8010874:	e000      	b.n	8010878 <_ZN8CALIPILE13writeRegisterEhPht+0x4a>
	} else {
		return false;
 8010876:	2300      	movs	r3, #0
	}
}
 8010878:	4618      	mov	r0, r3
 801087a:	3710      	adds	r7, #16
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <_ZN17Adafruit_ICM20948C1Ev>:
#include "main.h"
/*!
 *    @brief  Instantiates a new ICM20948 class!
 */

Adafruit_ICM20948::Adafruit_ICM20948(void) {
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4618      	mov	r0, r3
 801088c:	f000 f9c0 	bl	8010c10 <_ZN15Adafruit_ICM20XC1Ev>
 8010890:	4a03      	ldr	r2, [pc, #12]	; (80108a0 <_ZN17Adafruit_ICM20948C1Ev+0x20>)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	601a      	str	r2, [r3, #0]
}
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	0801792c 	.word	0x0801792c

080108a4 <_ZN17Adafruit_ICM209489begin_I2CEhP19__I2C_HandleTypeDefl>:
 *            An optional parameter to set the sensor ids to differentiate
 * similar sensors The passed value is assigned to the accelerometer and the
 * gyro get +1 and the temperature sensor +2.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_ICM20948::begin_I2C(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, int32_t sensor_id) {
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	607a      	str	r2, [r7, #4]
 80108ae:	603b      	str	r3, [r7, #0]
 80108b0:	460b      	mov	r3, r1
 80108b2:	72fb      	strb	r3, [r7, #11]


	i2c_han = &hi2c3;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	4a0a      	ldr	r2, [pc, #40]	; (80108e0 <_ZN17Adafruit_ICM209489begin_I2CEhP19__I2C_HandleTypeDefl+0x3c>)
 80108b8:	639a      	str	r2, [r3, #56]	; 0x38
	i2c_addr = i2c_address << 1;
 80108ba:	7afb      	ldrb	r3, [r7, #11]
 80108bc:	005b      	lsls	r3, r3, #1
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	bool init_success = _init(sensor_id);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	6839      	ldr	r1, [r7, #0]
 80108ca:	4618      	mov	r0, r3
 80108cc:	f000 fa5c 	bl	8010d88 <_ZN15Adafruit_ICM20X5_initEl>
 80108d0:	4603      	mov	r3, r0
 80108d2:	75fb      	strb	r3, [r7, #23]
	// todo: the below function doesnt execute properly, not sure why yet (or if its needed)
//	if (!setupMag()) {
//		return false;
//	}

	return init_success;
 80108d4:	7dfb      	ldrb	r3, [r7, #23]

}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3718      	adds	r7, #24
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	20004630 	.word	0x20004630
 80108e4:	00000000 	.word	0x00000000

080108e8 <_ZN17Adafruit_ICM2094811scaleValuesEv>:

bool Adafruit_ICM20948::writeMagRegister(uint8_t mag_reg_addr, uint8_t value) {
	return writeExternalRegister(0x0C, mag_reg_addr, value);
}

void Adafruit_ICM20948::scaleValues(void) {
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]

	icm20948_gyro_range_t gyro_range = (icm20948_gyro_range_t) current_gyro_range;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80108f6:	73fb      	strb	r3, [r7, #15]
	icm20948_accel_range_t accel_range =
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80108fe:	73bb      	strb	r3, [r7, #14]
			(icm20948_accel_range_t) current_accel_range;

	float accel_scale = 1.0;
 8010900:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010904:	617b      	str	r3, [r7, #20]
	float gyro_scale = 1.0;
 8010906:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801090a:	613b      	str	r3, [r7, #16]

	if (gyro_range == ICM20948_GYRO_RANGE_250_DPS)
 801090c:	7bfb      	ldrb	r3, [r7, #15]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x2e>
		gyro_scale = 131.0;
 8010912:	4b61      	ldr	r3, [pc, #388]	; (8010a98 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b0>)
 8010914:	613b      	str	r3, [r7, #16]
	if (gyro_range == ICM20948_GYRO_RANGE_500_DPS)
 8010916:	7bfb      	ldrb	r3, [r7, #15]
 8010918:	2b01      	cmp	r3, #1
 801091a:	d101      	bne.n	8010920 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x38>
		gyro_scale = 65.5;
 801091c:	4b5f      	ldr	r3, [pc, #380]	; (8010a9c <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b4>)
 801091e:	613b      	str	r3, [r7, #16]
	if (gyro_range == ICM20948_GYRO_RANGE_1000_DPS)
 8010920:	7bfb      	ldrb	r3, [r7, #15]
 8010922:	2b02      	cmp	r3, #2
 8010924:	d101      	bne.n	801092a <_ZN17Adafruit_ICM2094811scaleValuesEv+0x42>
		gyro_scale = 32.8;
 8010926:	4b5e      	ldr	r3, [pc, #376]	; (8010aa0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b8>)
 8010928:	613b      	str	r3, [r7, #16]
	if (gyro_range == ICM20948_GYRO_RANGE_2000_DPS)
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	2b03      	cmp	r3, #3
 801092e:	d101      	bne.n	8010934 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x4c>
		gyro_scale = 16.4;
 8010930:	4b5c      	ldr	r3, [pc, #368]	; (8010aa4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1bc>)
 8010932:	613b      	str	r3, [r7, #16]

	if (accel_range == ICM20948_ACCEL_RANGE_2_G)
 8010934:	7bbb      	ldrb	r3, [r7, #14]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d102      	bne.n	8010940 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x58>
		accel_scale = 16384.0;
 801093a:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 801093e:	617b      	str	r3, [r7, #20]
	if (accel_range == ICM20948_ACCEL_RANGE_4_G)
 8010940:	7bbb      	ldrb	r3, [r7, #14]
 8010942:	2b01      	cmp	r3, #1
 8010944:	d102      	bne.n	801094c <_ZN17Adafruit_ICM2094811scaleValuesEv+0x64>
		accel_scale = 8192.0;
 8010946:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 801094a:	617b      	str	r3, [r7, #20]
	if (accel_range == ICM20948_ACCEL_RANGE_8_G)
 801094c:	7bbb      	ldrb	r3, [r7, #14]
 801094e:	2b02      	cmp	r3, #2
 8010950:	d102      	bne.n	8010958 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x70>
		accel_scale = 4096.0;
 8010952:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8010956:	617b      	str	r3, [r7, #20]
	if (accel_range == ICM20948_ACCEL_RANGE_16_G)
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b03      	cmp	r3, #3
 801095c:	d102      	bne.n	8010964 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x7c>
		accel_scale = 2048.0;
 801095e:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8010962:	617b      	str	r3, [r7, #20]

	gyroX = rawGyroX / gyro_scale;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 801096a:	ee07 3a90 	vmov	s15, r3
 801096e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010972:	ed97 7a04 	vldr	s14, [r7, #16]
 8010976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	edc3 7a08 	vstr	s15, [r3, #32]
	gyroY = rawGyroY / gyro_scale;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8010986:	ee07 3a90 	vmov	s15, r3
 801098a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801098e:	ed97 7a04 	vldr	s14, [r7, #16]
 8010992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	gyroZ = rawGyroZ / gyro_scale;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80109a2:	ee07 3a90 	vmov	s15, r3
 80109a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80109aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80109ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	accX = rawAccX / accel_scale;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80109be:	ee07 3a90 	vmov	s15, r3
 80109c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80109c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80109ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	edc3 7a05 	vstr	s15, [r3, #20]
	accY = rawAccY / accel_scale;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80109da:	ee07 3a90 	vmov	s15, r3
 80109de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80109e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80109e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	edc3 7a06 	vstr	s15, [r3, #24]
	accZ = rawAccZ / accel_scale;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80109f6:	ee07 3a90 	vmov	s15, r3
 80109fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80109fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8010a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	edc3 7a07 	vstr	s15, [r3, #28]

	magX = rawMagX * ICM20948_UT_PER_LSB;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7ef fd06 	bl	8000424 <__aeabi_i2d>
 8010a18:	a31d      	add	r3, pc, #116	; (adr r3, 8010a90 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	f7ef fd6b 	bl	80004f8 <__aeabi_dmul>
 8010a22:	4602      	mov	r2, r0
 8010a24:	460b      	mov	r3, r1
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	f7ef ff77 	bl	800091c <__aeabi_d2f>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	62da      	str	r2, [r3, #44]	; 0x2c
	magY = rawMagY * ICM20948_UT_PER_LSB;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7ef fcf2 	bl	8000424 <__aeabi_i2d>
 8010a40:	a313      	add	r3, pc, #76	; (adr r3, 8010a90 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 8010a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a46:	f7ef fd57 	bl	80004f8 <__aeabi_dmul>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	4610      	mov	r0, r2
 8010a50:	4619      	mov	r1, r3
 8010a52:	f7ef ff63 	bl	800091c <__aeabi_d2f>
 8010a56:	4602      	mov	r2, r0
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	631a      	str	r2, [r3, #48]	; 0x30
	magZ = rawMagZ * ICM20948_UT_PER_LSB;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7ef fcde 	bl	8000424 <__aeabi_i2d>
 8010a68:	a309      	add	r3, pc, #36	; (adr r3, 8010a90 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	f7ef fd43 	bl	80004f8 <__aeabi_dmul>
 8010a72:	4602      	mov	r2, r0
 8010a74:	460b      	mov	r3, r1
 8010a76:	4610      	mov	r0, r2
 8010a78:	4619      	mov	r1, r3
 8010a7a:	f7ef ff4f 	bl	800091c <__aeabi_d2f>
 8010a7e:	4602      	mov	r2, r0
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8010a84:	bf00      	nop
 8010a86:	3718      	adds	r7, #24
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	f3af 8000 	nop.w
 8010a90:	33333333 	.word	0x33333333
 8010a94:	3fc33333 	.word	0x3fc33333
 8010a98:	43030000 	.word	0x43030000
 8010a9c:	42830000 	.word	0x42830000
 8010aa0:	42033333 	.word	0x42033333
 8010aa4:	41833333 	.word	0x41833333

08010aa8 <_ZN15Adafruit_SensorC1Ev>:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	4a04      	ldr	r2, [pc, #16]	; (8010ac4 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr
 8010ac4:	080179bc 	.word	0x080179bc

08010ac8 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	4a04      	ldr	r2, [pc, #16]	; (8010ae4 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr
 8010ae4:	080179bc 	.word	0x080179bc

08010ae8 <_ZN15Adafruit_SensorD0Ev>:
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff ffe9 	bl	8010ac8 <_ZN15Adafruit_SensorD1Ev>
 8010af6:	2108      	movs	r1, #8
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f005 ff17 	bl	801692c <_ZdlPvj>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
 8010b08:	b480      	push	{r7}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	460b      	mov	r3, r1
 8010b12:	70fb      	strb	r3, [r7, #3]
    (void)enabled; /* suppress unused warning */
  };
 8010b14:	bf00      	nop
 8010b16:	370c      	adds	r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr

08010b20 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X>:
class Adafruit_ICM20X_Accelerometer: public Adafruit_Sensor {
public:
	/** @brief Create an Adafruit_Sensor compatible object for the accelerometer
	 sensor
	 @param parent A pointer to the ICM20X class */
	Adafruit_ICM20X_Accelerometer(Adafruit_ICM20X *parent) {
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7ff ffbb 	bl	8010aa8 <_ZN15Adafruit_SensorC1Ev>
 8010b32:	4a09      	ldr	r2, [pc, #36]	; (8010b58 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X+0x38>)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	601a      	str	r2, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f240 220a 	movw	r2, #522	; 0x20a
 8010b3e:	609a      	str	r2, [r3, #8]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	60da      	str	r2, [r3, #12]
		_theICM20X = parent;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	683a      	ldr	r2, [r7, #0]
 8010b4a:	60da      	str	r2, [r3, #12]
	}
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	080179a0 	.word	0x080179a0

08010b5c <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X>:
/** Adafruit Unified Sensor interface for gyro component of ICM20X */
class Adafruit_ICM20X_Gyro: public Adafruit_Sensor {
public:
	/** @brief Create an Adafruit_Sensor compatible object for the gyro sensor
	 @param parent A pointer to the ICM20X class */
	Adafruit_ICM20X_Gyro(Adafruit_ICM20X *parent) {
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff ff9d 	bl	8010aa8 <_ZN15Adafruit_SensorC1Ev>
 8010b6e:	4a09      	ldr	r2, [pc, #36]	; (8010b94 <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X+0x38>)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	601a      	str	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f240 220b 	movw	r2, #523	; 0x20b
 8010b7a:	609a      	str	r2, [r3, #8]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	60da      	str	r2, [r3, #12]
		_theICM20X = parent;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	60da      	str	r2, [r3, #12]
	}
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	08017984 	.word	0x08017984

08010b98 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X>:
class Adafruit_ICM20X_Magnetometer: public Adafruit_Sensor {
public:
	/** @brief Create an Adafruit_Sensor compatible object for the magnetometer
	 sensor
	 @param parent A pointer to the ICM20X class */
	Adafruit_ICM20X_Magnetometer(Adafruit_ICM20X *parent) {
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff ff7f 	bl	8010aa8 <_ZN15Adafruit_SensorC1Ev>
 8010baa:	4a09      	ldr	r2, [pc, #36]	; (8010bd0 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X+0x38>)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	601a      	str	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8010bb6:	609a      	str	r2, [r3, #8]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	60da      	str	r2, [r3, #12]
		_theICM20X = parent;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	60da      	str	r2, [r3, #12]
	}
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	08017968 	.word	0x08017968

08010bd4 <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X>:
/** Adafruit Unified Sensor interface for temperature component of ICM20X */
class Adafruit_ICM20X_Temp: public Adafruit_Sensor {
public:
	/** @brief Create an Adafruit_Sensor compatible object for the temp sensor
	 @param parent A pointer to the ICM20X class */
	Adafruit_ICM20X_Temp(Adafruit_ICM20X *parent) {
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff ff61 	bl	8010aa8 <_ZN15Adafruit_SensorC1Ev>
 8010be6:	4a09      	ldr	r2, [pc, #36]	; (8010c0c <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X+0x38>)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f240 220d 	movw	r2, #525	; 0x20d
 8010bf2:	609a      	str	r2, [r3, #8]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	60da      	str	r2, [r3, #12]
		_theICM20X = parent;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	683a      	ldr	r2, [r7, #0]
 8010bfe:	60da      	str	r2, [r3, #12]
	}
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4618      	mov	r0, r3
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	0801794c 	.word	0x0801794c

08010c10 <_ZN15Adafruit_ICM20XC1Ev>:
#include "Adafruit_ICM20X.h"
#include "string.h"
/*!
 *    @brief  Instantiates a new ICM20X class!
 */
Adafruit_ICM20X::Adafruit_ICM20X(void) {
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	4a0e      	ldr	r2, [pc, #56]	; (8010c54 <_ZN15Adafruit_ICM20XC1Ev+0x44>)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2200      	movs	r2, #0
 8010c22:	639a      	str	r2, [r3, #56]	; 0x38
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	641a      	str	r2, [r3, #64]	; 0x40
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2200      	movs	r2, #0
 8010c36:	645a      	str	r2, [r3, #68]	; 0x44
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	649a      	str	r2, [r3, #72]	; 0x48
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2200      	movs	r2, #0
 8010c42:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	0801793c 	.word	0x0801793c

08010c58 <_ZN15Adafruit_ICM20XD1Ev>:

/*!
 *    @brief  Cleans up the ICM20X
 */
Adafruit_ICM20X::~Adafruit_ICM20X(void) {
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	4a1d      	ldr	r2, [pc, #116]	; (8010cd8 <_ZN15Adafruit_ICM20XD1Ev+0x80>)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	601a      	str	r2, [r3, #0]
	if (accel_sensor)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d008      	beq.n	8010c80 <_ZN15Adafruit_ICM20XD1Ev+0x28>
		delete accel_sensor;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d004      	beq.n	8010c80 <_ZN15Adafruit_ICM20XD1Ev+0x28>
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	3204      	adds	r2, #4
 8010c7a:	6812      	ldr	r2, [r2, #0]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	4790      	blx	r2
	if (gyro_sensor)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d008      	beq.n	8010c9a <_ZN15Adafruit_ICM20XD1Ev+0x42>
		delete gyro_sensor;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d004      	beq.n	8010c9a <_ZN15Adafruit_ICM20XD1Ev+0x42>
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	3204      	adds	r2, #4
 8010c94:	6812      	ldr	r2, [r2, #0]
 8010c96:	4618      	mov	r0, r3
 8010c98:	4790      	blx	r2
	if (mag_sensor)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d008      	beq.n	8010cb4 <_ZN15Adafruit_ICM20XD1Ev+0x5c>
		delete mag_sensor;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d004      	beq.n	8010cb4 <_ZN15Adafruit_ICM20XD1Ev+0x5c>
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	3204      	adds	r2, #4
 8010cae:	6812      	ldr	r2, [r2, #0]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	4790      	blx	r2
	if (temp_sensor)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d008      	beq.n	8010cce <_ZN15Adafruit_ICM20XD1Ev+0x76>
		delete temp_sensor;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <_ZN15Adafruit_ICM20XD1Ev+0x76>
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	3204      	adds	r2, #4
 8010cc8:	6812      	ldr	r2, [r2, #0]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	4790      	blx	r2
}
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	0801793c 	.word	0x0801793c

08010cdc <_ZN15Adafruit_ICM20X9begin_I2CEhP19__I2C_HandleTypeDefl>:
 * similar sensors The passed value is assigned to the accelerometer, the gyro
 * gets +1, the magnetometer +2, and the temperature sensor +3.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_ICM20X::begin_I2C(uint8_t i2c_addr, I2C_HandleTypeDef *i2c_handle,
		int32_t sensor_id) {
 8010cdc:	b480      	push	{r7}
 8010cde:	b085      	sub	sp, #20
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	607a      	str	r2, [r7, #4]
 8010ce6:	603b      	str	r3, [r7, #0]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	72fb      	strb	r3, [r7, #11]
	(void) i2c_addr;
	(void) i2c_handle;
	(void) sensor_id;
	return false;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>:
	enableSPI(true);

	return _init(sensor_id);
}

void Adafruit_ICM20X::cs_active(bool state) {
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	460b      	mov	r3, r1
 8010d04:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8010d06:	78fb      	ldrb	r3, [r7, #3]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d008      	beq.n	8010d1e <_ZN15Adafruit_ICM20X9cs_activeEb+0x24>
		HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6898      	ldr	r0, [r3, #8]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	899b      	ldrh	r3, [r3, #12]
 8010d14:	2200      	movs	r2, #0
 8010d16:	4619      	mov	r1, r3
 8010d18:	f7f3 fdba 	bl	8004890 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);

	}
}
 8010d1c:	e007      	b.n	8010d2e <_ZN15Adafruit_ICM20X9cs_activeEb+0x34>
		HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6898      	ldr	r0, [r3, #8]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	899b      	ldrh	r3, [r3, #12]
 8010d26:	2201      	movs	r2, #1
 8010d28:	4619      	mov	r1, r3
 8010d2a:	f7f3 fdb1 	bl	8004890 <HAL_GPIO_WritePin>
}
 8010d2e:	bf00      	nop
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <_ZN15Adafruit_ICM20X5resetEv>:

/*!
 * @brief Reset the internal registers and restores the default settings
 *
 */
void Adafruit_ICM20X::reset(void) {
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b082      	sub	sp, #8
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
	_setBank(0);
 8010d3e:	2100      	movs	r1, #0
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 fa2c 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	modifyRegisterBit(ICM20X_B0_PWR_MGMT_1, 1, 7);
 8010d46:	2307      	movs	r3, #7
 8010d48:	2201      	movs	r2, #1
 8010d4a:	2106      	movs	r1, #6
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 fd0a 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>

	HAL_Delay(20);
 8010d52:	2014      	movs	r0, #20
 8010d54:	f7f0 f860 	bl	8000e18 <HAL_Delay>

	while (checkRegisterBit(ICM20X_B0_PWR_MGMT_1, 7)) {
 8010d58:	2207      	movs	r2, #7
 8010d5a:	2106      	movs	r1, #6
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 fce8 	bl	8011732 <_ZN15Adafruit_ICM20X16checkRegisterBitEth>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	bf14      	ite	ne
 8010d68:	2301      	movne	r3, #1
 8010d6a:	2300      	moveq	r3, #0
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <_ZN15Adafruit_ICM20X5resetEv+0x44>
		HAL_Delay(10);
 8010d72:	200a      	movs	r0, #10
 8010d74:	f7f0 f850 	bl	8000e18 <HAL_Delay>
	while (checkRegisterBit(ICM20X_B0_PWR_MGMT_1, 7)) {
 8010d78:	e7ee      	b.n	8010d58 <_ZN15Adafruit_ICM20X5resetEv+0x22>
	};
	HAL_Delay(50);
 8010d7a:	2032      	movs	r0, #50	; 0x32
 8010d7c:	f7f0 f84c 	bl	8000e18 <HAL_Delay>
}
 8010d80:	bf00      	nop
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <_ZN15Adafruit_ICM20X5_initEl>:

/*!  @brief Initilizes the sensor
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_ICM20X::_init(int32_t sensor_id) {
 8010d88:	b590      	push	{r4, r7, lr}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
	_setBank(0);
 8010d92:	2100      	movs	r1, #0
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fa02 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	uint8_t chip_id_ = readRegisterByte(ICM20X_B0_WHOAMI);
 8010d9a:	2100      	movs	r1, #0
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fbd9 	bl	8011554 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
 8010da2:	4603      	mov	r3, r0
 8010da4:	73fb      	strb	r3, [r7, #15]
	// This returns true when using a 649 lib with a 948
	if ((chip_id_ != ICM20649_CHIP_ID) && (chip_id_ != ICM20948_CHIP_ID)) {
 8010da6:	7bfb      	ldrb	r3, [r7, #15]
 8010da8:	2be1      	cmp	r3, #225	; 0xe1
 8010daa:	d004      	beq.n	8010db6 <_ZN15Adafruit_ICM20X5_initEl+0x2e>
 8010dac:	7bfb      	ldrb	r3, [r7, #15]
 8010dae:	2bea      	cmp	r3, #234	; 0xea
 8010db0:	d001      	beq.n	8010db6 <_ZN15Adafruit_ICM20X5_initEl+0x2e>
		return false;
 8010db2:	2300      	movs	r3, #0
 8010db4:	e078      	b.n	8010ea8 <_ZN15Adafruit_ICM20X5_initEl+0x120>
	}

	_sensorid_accel = sensor_id;
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	_sensorid_gyro = sensor_id + 1;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	_sensorid_mag = sensor_id + 2;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	3302      	adds	r3, #2
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	_sensorid_temp = sensor_id + 3;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	3303      	adds	r3, #3
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	reset();
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff ffa3 	bl	8010d36 <_ZN15Adafruit_ICM20X5resetEv>

	modifyRegisterBit(ICM20X_B0_PWR_MGMT_1, 0, 6); // take out of default sleep state
 8010df0:	2306      	movs	r3, #6
 8010df2:	2200      	movs	r2, #0
 8010df4:	2106      	movs	r1, #6
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 fcb5 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>

	// 3 will be the largest range for either sensor
	enableGyrolDLPF(true, ICM20X_GYRO_FREQ_196_6_HZ);
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	2101      	movs	r1, #1
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 fa89 	bl	8011318 <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t>
	writeGyroRange(3);
 8010e06:	2103      	movs	r1, #3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f9fb 	bl	8011204 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>
	enableAccelDLPF(true, ICM20X_ACCEL_FREQ_246_0_HZ);
 8010e0e:	2201      	movs	r2, #1
 8010e10:	2101      	movs	r1, #1
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 fa49 	bl	80112aa <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t>
	writeAccelRange(3);
 8010e18:	2103      	movs	r1, #3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 f9d4 	bl	80111c8 <_ZN15Adafruit_ICM20X15writeAccelRangeEh>

	// 1.1 kHz/(1+GYRO_SMPLRT_DIV[7:0])
	setGyroRateDivisor(10); //100hz
 8010e20:	210a      	movs	r1, #10
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa29 	bl	801127a <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>

	// 1.125 kHz/(1+ACCEL_SMPLRT_DIV[11:0])
	setAccelRateDivisor(13); // 75hz
 8010e28:	210d      	movs	r1, #13
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 fa08 	bl	8011240 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>

	temp_sensor = new Adafruit_ICM20X_Temp(this);
 8010e30:	2010      	movs	r0, #16
 8010e32:	f005 fd7d 	bl	8016930 <_Znwj>
 8010e36:	4603      	mov	r3, r0
 8010e38:	461c      	mov	r4, r3
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	f7ff fec9 	bl	8010bd4 <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	64dc      	str	r4, [r3, #76]	; 0x4c
	accel_sensor = new Adafruit_ICM20X_Accelerometer(this);
 8010e46:	2010      	movs	r0, #16
 8010e48:	f005 fd72 	bl	8016930 <_Znwj>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461c      	mov	r4, r3
 8010e50:	6879      	ldr	r1, [r7, #4]
 8010e52:	4620      	mov	r0, r4
 8010e54:	f7ff fe64 	bl	8010b20 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	641c      	str	r4, [r3, #64]	; 0x40
	gyro_sensor = new Adafruit_ICM20X_Gyro(this);
 8010e5c:	2010      	movs	r0, #16
 8010e5e:	f005 fd67 	bl	8016930 <_Znwj>
 8010e62:	4603      	mov	r3, r0
 8010e64:	461c      	mov	r4, r3
 8010e66:	6879      	ldr	r1, [r7, #4]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f7ff fe77 	bl	8010b5c <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	645c      	str	r4, [r3, #68]	; 0x44
	mag_sensor = new Adafruit_ICM20X_Magnetometer(this);
 8010e72:	2010      	movs	r0, #16
 8010e74:	f005 fd5c 	bl	8016930 <_Znwj>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	461c      	mov	r4, r3
 8010e7c:	6879      	ldr	r1, [r7, #4]
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f7ff fe8a 	bl	8010b98 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	649c      	str	r4, [r3, #72]	; 0x48

	setInt1ActiveLow(true);
 8010e88:	2101      	movs	r1, #1
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fa7b 	bl	8011386 <_ZN15Adafruit_ICM20X16setInt1ActiveLowEb>
	setInt1Latch(false);
 8010e90:	2100      	movs	r1, #0
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 fa91 	bl	80113ba <_ZN15Adafruit_ICM20X12setInt1LatchEb>
	enableInt1(true);
 8010e98:	2101      	movs	r1, #1
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 faa1 	bl	80113e2 <_ZN15Adafruit_ICM20X10enableInt1Eb>

	HAL_Delay(20);
 8010ea0:	2014      	movs	r0, #20
 8010ea2:	f7ef ffb9 	bl	8000e18 <HAL_Delay>

	return true;
 8010ea6:	2301      	movs	r3, #1
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd90      	pop	{r4, r7, pc}

08010eb0 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>:

	return true;
}

void Adafruit_ICM20X::fillAccelEvent(sensors_event_t *accel,
		uint32_t timestamp) {
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
	memset(accel, 0, sizeof(sensors_event_t));
 8010ebc:	2224      	movs	r2, #36	; 0x24
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	68b8      	ldr	r0, [r7, #8]
 8010ec2:	f006 f9fb 	bl	80172bc <memset>
	accel->version = 1;
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	2201      	movs	r2, #1
 8010eca:	601a      	str	r2, [r3, #0]
	accel->sensor_id = _sensorid_accel;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	605a      	str	r2, [r3, #4]
	accel->type = SENSOR_TYPE_ACCELEROMETER;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2201      	movs	r2, #1
 8010edc:	609a      	str	r2, [r3, #8]
	accel->timestamp = timestamp;
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	611a      	str	r2, [r3, #16]

	accel->acceleration.x = accX * SENSORS_GRAVITY_EARTH;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	edd3 7a05 	vldr	s15, [r3, #20]
 8010eea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8010f28 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x78>
 8010eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	edc3 7a05 	vstr	s15, [r3, #20]
	accel->acceleration.y = accY * SENSORS_GRAVITY_EARTH;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	edd3 7a06 	vldr	s15, [r3, #24]
 8010efe:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8010f28 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x78>
 8010f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	edc3 7a06 	vstr	s15, [r3, #24]
	accel->acceleration.z = accZ * SENSORS_GRAVITY_EARTH;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f12:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8010f28 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x78>
 8010f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8010f20:	bf00      	nop
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	411ce80a 	.word	0x411ce80a

08010f2c <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillGyroEvent(sensors_event_t *gyro, uint32_t timestamp) {
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
	memset(gyro, 0, sizeof(sensors_event_t));
 8010f38:	2224      	movs	r2, #36	; 0x24
 8010f3a:	2100      	movs	r1, #0
 8010f3c:	68b8      	ldr	r0, [r7, #8]
 8010f3e:	f006 f9bd 	bl	80172bc <memset>
	gyro->version = 1;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2201      	movs	r2, #1
 8010f46:	601a      	str	r2, [r3, #0]
	gyro->sensor_id = _sensorid_gyro;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010f4e:	461a      	mov	r2, r3
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	605a      	str	r2, [r3, #4]
	gyro->type = SENSOR_TYPE_GYROSCOPE;
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	2204      	movs	r2, #4
 8010f58:	609a      	str	r2, [r3, #8]
	gyro->timestamp = timestamp;
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	611a      	str	r2, [r3, #16]
	gyro->gyro.x = gyroX * SENSORS_DPS_TO_RADS;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	edd3 7a08 	vldr	s15, [r3, #32]
 8010f66:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8010fa4 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x78>
 8010f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro->gyro.y = gyroY * SENSORS_DPS_TO_RADS;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010f7a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8010fa4 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x78>
 8010f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	edc3 7a06 	vstr	s15, [r3, #24]
	gyro->gyro.z = gyroZ * SENSORS_DPS_TO_RADS;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010f8e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8010fa4 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x78>
 8010f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8010f9c:	bf00      	nop
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	3c8efa35 	.word	0x3c8efa35

08010fa8 <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillMagEvent(sensors_event_t *mag, uint32_t timestamp) {
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	607a      	str	r2, [r7, #4]
	memset(mag, 0, sizeof(sensors_event_t));
 8010fb4:	2224      	movs	r2, #36	; 0x24
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	68b8      	ldr	r0, [r7, #8]
 8010fba:	f006 f97f 	bl	80172bc <memset>
	mag->version = 1;
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	601a      	str	r2, [r3, #0]
	mag->sensor_id = _sensorid_mag;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8010fca:	461a      	mov	r2, r3
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	605a      	str	r2, [r3, #4]
	mag->type = SENSOR_TYPE_MAGNETIC_FIELD;
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	609a      	str	r2, [r3, #8]
	mag->timestamp = timestamp;
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	611a      	str	r2, [r3, #16]
	mag->magnetic.x = magX; // magic number!
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	615a      	str	r2, [r3, #20]
	mag->magnetic.y = magY;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	619a      	str	r2, [r3, #24]
	mag->magnetic.z = magZ;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	61da      	str	r2, [r3, #28]
}
 8010ff4:	bf00      	nop
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	0000      	movs	r0, r0
	...

08011000 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillTempEvent(sensors_event_t *temp, uint32_t timestamp) {
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	607a      	str	r2, [r7, #4]

	memset(temp, 0, sizeof(sensors_event_t));
 801100c:	2224      	movs	r2, #36	; 0x24
 801100e:	2100      	movs	r1, #0
 8011010:	68b8      	ldr	r0, [r7, #8]
 8011012:	f006 f953 	bl	80172bc <memset>
	temp->version = sizeof(sensors_event_t);
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	2224      	movs	r2, #36	; 0x24
 801101a:	601a      	str	r2, [r3, #0]
	temp->sensor_id = _sensorid_temp;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011022:	461a      	mov	r2, r3
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	605a      	str	r2, [r3, #4]
	temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	220d      	movs	r2, #13
 801102c:	609a      	str	r2, [r3, #8]
	temp->timestamp = timestamp;
 801102e:	687a      	ldr	r2, [r7, #4]
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	611a      	str	r2, [r3, #16]
	temp->temperature = (temperature / 333.87) + 21.0;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	691b      	ldr	r3, [r3, #16]
 8011038:	4618      	mov	r0, r3
 801103a:	f7ef fa05 	bl	8000448 <__aeabi_f2d>
 801103e:	a30f      	add	r3, pc, #60	; (adr r3, 801107c <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm+0x7c>)
 8011040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011044:	f7ef fb82 	bl	800074c <__aeabi_ddiv>
 8011048:	4602      	mov	r2, r0
 801104a:	460b      	mov	r3, r1
 801104c:	4610      	mov	r0, r2
 801104e:	4619      	mov	r1, r3
 8011050:	f04f 0200 	mov.w	r2, #0
 8011054:	4b08      	ldr	r3, [pc, #32]	; (8011078 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm+0x78>)
 8011056:	f7ef f899 	bl	800018c <__adddf3>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	4610      	mov	r0, r2
 8011060:	4619      	mov	r1, r3
 8011062:	f7ef fc5b 	bl	800091c <__aeabi_d2f>
 8011066:	4602      	mov	r2, r0
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	615a      	str	r2, [r3, #20]
}
 801106c:	bf00      	nop
 801106e:	3710      	adds	r7, #16
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	f3af 8000 	nop.w
 8011078:	40350000 	.word	0x40350000
 801107c:	851eb852 	.word	0x851eb852
 8011080:	4074ddeb 	.word	0x4074ddeb

08011084 <_ZN15Adafruit_ICM20X5_readEv>:
/******************* Adafruit_Sensor functions *****************/
/*!
 *     @brief  Updates the measurement data for all sensors simultaneously
 */
/**************************************************************************/
void Adafruit_ICM20X::_read(void) {
 8011084:	b580      	push	{r7, lr}
 8011086:	b088      	sub	sp, #32
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]

	_setBank(0);
 801108c:	2100      	movs	r1, #0
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 f885 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	// reading 9 bytes of mag data to fetch the register that tells the mag we've
	// read all the data
	const uint8_t numbytes = 14 + 9; // Read Accel, gyro, temp, and 9 bytes of mag
 8011094:	2317      	movs	r3, #23
 8011096:	77fb      	strb	r3, [r7, #31]
//      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_ACCEL_XOUT_H, numbytes);

	uint8_t buffer[numbytes];
//  data_reg.read(buffer, numbytes);

	readRegister(ICM20X_B0_ACCEL_XOUT_H, buffer, numbytes);
 8011098:	f107 0208 	add.w	r2, r7, #8
 801109c:	2317      	movs	r3, #23
 801109e:	212d      	movs	r1, #45	; 0x2d
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f9b2 	bl	801140a <_ZN15Adafruit_ICM20X12readRegisterEtPht>

	rawAccX = buffer[0] << 8 | buffer[1];
 80110a6:	7a3b      	ldrb	r3, [r7, #8]
 80110a8:	021b      	lsls	r3, r3, #8
 80110aa:	b21a      	sxth	r2, r3
 80110ac:	7a7b      	ldrb	r3, [r7, #9]
 80110ae:	b21b      	sxth	r3, r3
 80110b0:	4313      	orrs	r3, r2
 80110b2:	b21a      	sxth	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rawAccY = buffer[2] << 8 | buffer[3];
 80110ba:	7abb      	ldrb	r3, [r7, #10]
 80110bc:	021b      	lsls	r3, r3, #8
 80110be:	b21a      	sxth	r2, r3
 80110c0:	7afb      	ldrb	r3, [r7, #11]
 80110c2:	b21b      	sxth	r3, r3
 80110c4:	4313      	orrs	r3, r2
 80110c6:	b21a      	sxth	r2, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rawAccZ = buffer[4] << 8 | buffer[5];
 80110ce:	7b3b      	ldrb	r3, [r7, #12]
 80110d0:	021b      	lsls	r3, r3, #8
 80110d2:	b21a      	sxth	r2, r3
 80110d4:	7b7b      	ldrb	r3, [r7, #13]
 80110d6:	b21b      	sxth	r3, r3
 80110d8:	4313      	orrs	r3, r2
 80110da:	b21a      	sxth	r2, r3
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	rawGyroX = buffer[6] << 8 | buffer[7];
 80110e2:	7bbb      	ldrb	r3, [r7, #14]
 80110e4:	021b      	lsls	r3, r3, #8
 80110e6:	b21a      	sxth	r2, r3
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	b21b      	sxth	r3, r3
 80110ec:	4313      	orrs	r3, r2
 80110ee:	b21a      	sxth	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	rawGyroY = buffer[8] << 8 | buffer[9];
 80110f6:	7c3b      	ldrb	r3, [r7, #16]
 80110f8:	021b      	lsls	r3, r3, #8
 80110fa:	b21a      	sxth	r2, r3
 80110fc:	7c7b      	ldrb	r3, [r7, #17]
 80110fe:	b21b      	sxth	r3, r3
 8011100:	4313      	orrs	r3, r2
 8011102:	b21a      	sxth	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	rawGyroZ = buffer[10] << 8 | buffer[11];
 801110a:	7cbb      	ldrb	r3, [r7, #18]
 801110c:	021b      	lsls	r3, r3, #8
 801110e:	b21a      	sxth	r2, r3
 8011110:	7cfb      	ldrb	r3, [r7, #19]
 8011112:	b21b      	sxth	r3, r3
 8011114:	4313      	orrs	r3, r2
 8011116:	b21a      	sxth	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	temperature = buffer[12] << 8 | buffer[13];
 801111e:	7d3b      	ldrb	r3, [r7, #20]
 8011120:	021b      	lsls	r3, r3, #8
 8011122:	7d7a      	ldrb	r2, [r7, #21]
 8011124:	4313      	orrs	r3, r2
 8011126:	ee07 3a90 	vmov	s15, r3
 801112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	edc3 7a04 	vstr	s15, [r3, #16]

	rawMagX = ((buffer[16] << 8) | (buffer[15] & 0xFF)); // Mag data is read little endian
 8011134:	7e3b      	ldrb	r3, [r7, #24]
 8011136:	021b      	lsls	r3, r3, #8
 8011138:	b21a      	sxth	r2, r3
 801113a:	7dfb      	ldrb	r3, [r7, #23]
 801113c:	b21b      	sxth	r3, r3
 801113e:	4313      	orrs	r3, r2
 8011140:	b21a      	sxth	r2, r3
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rawMagY = ((buffer[18] << 8) | (buffer[17] & 0xFF));
 8011148:	7ebb      	ldrb	r3, [r7, #26]
 801114a:	021b      	lsls	r3, r3, #8
 801114c:	b21a      	sxth	r2, r3
 801114e:	7e7b      	ldrb	r3, [r7, #25]
 8011150:	b21b      	sxth	r3, r3
 8011152:	4313      	orrs	r3, r2
 8011154:	b21a      	sxth	r2, r3
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rawMagZ = ((buffer[20] << 8) | (buffer[19] & 0xFF));
 801115c:	7f3b      	ldrb	r3, [r7, #28]
 801115e:	021b      	lsls	r3, r3, #8
 8011160:	b21a      	sxth	r2, r3
 8011162:	7efb      	ldrb	r3, [r7, #27]
 8011164:	b21b      	sxth	r3, r3
 8011166:	4313      	orrs	r3, r2
 8011168:	b21a      	sxth	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	scaleValues();
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	4798      	blx	r3
	_setBank(0);
 801117a:	2100      	movs	r1, #0
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 f80e 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8011182:	bf00      	nop
 8011184:	3720      	adds	r7, #32
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <_ZN15Adafruit_ICM20X11scaleValuesEv>:
/*!
 * @brief Scales the raw variables based on the current measurement range
 *
 */
void Adafruit_ICM20X::scaleValues(void) {
 801118a:	b480      	push	{r7}
 801118c:	b083      	sub	sp, #12
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
}
 8011192:	bf00      	nop
 8011194:	370c      	adds	r7, #12
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <_ZN15Adafruit_ICM20X8_setBankEh>:
/*!
 @brief Sets register bank.
 @param  bank_number
 The bank to set to active
 */
void Adafruit_ICM20X::_setBank(uint8_t bank_number) {
 801119e:	b580      	push	{r7, lr}
 80111a0:	b082      	sub	sp, #8
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	460b      	mov	r3, r1
 80111a8:	70fb      	strb	r3, [r7, #3]
	writeRegisterByte(ICM20X_B0_REG_BANK_SEL, (bank_number << 4) & 0x30);
 80111aa:	78fb      	ldrb	r3, [r7, #3]
 80111ac:	011b      	lsls	r3, r3, #4
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	461a      	mov	r2, r3
 80111b8:	217f      	movs	r1, #127	; 0x7f
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 fa5f 	bl	801167e <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <_ZN15Adafruit_ICM20X15writeAccelRangeEh>:
 @brief Sets the accelerometer's measurement range.
 @param  new_accel_range
 Measurement range to be set. Must be an
 `icm20x_accel_range_t`.
 */
void Adafruit_ICM20X::writeAccelRange(uint8_t new_accel_range) {
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af02      	add	r7, sp, #8
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	70fb      	strb	r3, [r7, #3]
	_setBank(2);
 80111d4:	2102      	movs	r1, #2
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff ffe1 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	modifyRegisterMultipleBit(ICM20X_B2_ACCEL_CONFIG_1, new_accel_range, 1, 2);
 80111dc:	78fa      	ldrb	r2, [r7, #3]
 80111de:	2302      	movs	r3, #2
 80111e0:	9300      	str	r3, [sp, #0]
 80111e2:	2301      	movs	r3, #1
 80111e4:	2114      	movs	r1, #20
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fae5 	bl	80117b6 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
	current_accel_range = new_accel_range;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	78fa      	ldrb	r2, [r7, #3]
 80111f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	_setBank(0);
 80111f4:	2100      	movs	r1, #0
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f7ff ffd1 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>
}
 80111fc:	bf00      	nop
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>:
 @brief Sets the gyro's measurement range.
 @param  new_gyro_range
 Measurement range to be set. Must be an
 `icm20x_gyro_range_t`.
 */
void Adafruit_ICM20X::writeGyroRange(uint8_t new_gyro_range) {
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af02      	add	r7, sp, #8
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	460b      	mov	r3, r1
 801120e:	70fb      	strb	r3, [r7, #3]
	_setBank(2);
 8011210:	2102      	movs	r1, #2
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7ff ffc3 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	modifyRegisterMultipleBit(ICM20X_B2_GYRO_CONFIG_1, new_gyro_range, 1, 2);
 8011218:	78fa      	ldrb	r2, [r7, #3]
 801121a:	2302      	movs	r3, #2
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	2301      	movs	r3, #1
 8011220:	2101      	movs	r1, #1
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f000 fac7 	bl	80117b6 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
	current_gyro_range = new_gyro_range;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	78fa      	ldrb	r2, [r7, #3]
 801122c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	_setBank(0);
 8011230:	2100      	movs	r1, #0
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f7ff ffb3 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8011238:	bf00      	nop
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>:
 @brief Sets the accelerometer's data rate divisor.
 @param  new_accel_divisor
 The accelerometer's data rate divisor (`uint16_t`). This 12-bit
 value must be <= 4095
 */
void Adafruit_ICM20X::setAccelRateDivisor(uint16_t new_accel_divisor) {
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	460b      	mov	r3, r1
 801124a:	807b      	strh	r3, [r7, #2]
	_setBank(2);
 801124c:	2102      	movs	r1, #2
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7ff ffa5 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	new_accel_divisor = new_accel_divisor & 0x07FF;
 8011254:	887b      	ldrh	r3, [r7, #2]
 8011256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801125a:	b29b      	uxth	r3, r3
 801125c:	807b      	strh	r3, [r7, #2]
	writeRegister(ICM20X_B2_ACCEL_SMPLRT_DIV_1, (uint8_t*) &new_accel_divisor,
 801125e:	1cba      	adds	r2, r7, #2
 8011260:	2302      	movs	r3, #2
 8011262:	2110      	movs	r1, #16
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f000 f9a6 	bl	80115b6 <_ZN15Adafruit_ICM20X13writeRegisterEhPht>
			2);
	_setBank(0);
 801126a:	2100      	movs	r1, #0
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7ff ff96 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>:

 @brief Sets the gyro's data rate divisor.
 @param  new_gyro_divisor
 The gyro's data rate divisor (`uint8_t`).
 */
void Adafruit_ICM20X::setGyroRateDivisor(uint8_t new_gyro_divisor) {
 801127a:	b580      	push	{r7, lr}
 801127c:	b082      	sub	sp, #8
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	460b      	mov	r3, r1
 8011284:	70fb      	strb	r3, [r7, #3]
	_setBank(2);
 8011286:	2102      	movs	r1, #2
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff ff88 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	writeRegisterByte(ICM20X_B2_GYRO_SMPLRT_DIV, new_gyro_divisor);
 801128e:	78fb      	ldrb	r3, [r7, #3]
 8011290:	461a      	mov	r2, r3
 8011292:	2100      	movs	r1, #0
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 f9f2 	bl	801167e <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
	_setBank(0);
 801129a:	2100      	movs	r1, #0
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ff7e 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>
}
 80112a2:	bf00      	nop
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}

080112aa <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t>:
 * @param cutoff_freq Signals changing at a rate higher than the given cutoff
 * frequency will be filtered out
 * @return true: success false: failure
 */
bool Adafruit_ICM20X::enableAccelDLPF(bool enable,
		icm20x_accel_cutoff_t cutoff_freq) {
 80112aa:	b580      	push	{r7, lr}
 80112ac:	b084      	sub	sp, #16
 80112ae:	af02      	add	r7, sp, #8
 80112b0:	6078      	str	r0, [r7, #4]
 80112b2:	460b      	mov	r3, r1
 80112b4:	70fb      	strb	r3, [r7, #3]
 80112b6:	4613      	mov	r3, r2
 80112b8:	70bb      	strb	r3, [r7, #2]
	_setBank(2);
 80112ba:	2102      	movs	r1, #2
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7ff ff6e 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	if (!modifyRegisterBit(ICM20X_B2_ACCEL_CONFIG_1, enable, 0)) {
 80112c2:	78fa      	ldrb	r2, [r7, #3]
 80112c4:	2300      	movs	r3, #0
 80112c6:	2114      	movs	r1, #20
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 fa4c 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
 80112ce:	4603      	mov	r3, r0
 80112d0:	f083 0301 	eor.w	r3, r3, #1
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x34>
		return false;
 80112da:	2300      	movs	r3, #0
 80112dc:	e018      	b.n	8011310 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x66>
	}

	if (!enable) {
 80112de:	78fb      	ldrb	r3, [r7, #3]
 80112e0:	f083 0301 	eor.w	r3, r3, #1
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x44>
		return true;
 80112ea:	2301      	movs	r3, #1
 80112ec:	e010      	b.n	8011310 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x66>
	}

	if (!modifyRegisterMultipleBit(ICM20X_B2_ACCEL_CONFIG_1, cutoff_freq, 3,
 80112ee:	78ba      	ldrb	r2, [r7, #2]
 80112f0:	2303      	movs	r3, #3
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	2303      	movs	r3, #3
 80112f6:	2114      	movs	r1, #20
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fa5c 	bl	80117b6 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
 80112fe:	4603      	mov	r3, r0
 8011300:	f083 0301 	eor.w	r3, r3, #1
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d001      	beq.n	801130e <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x64>
			3)) {
		return false;
 801130a:	2300      	movs	r3, #0
 801130c:	e000      	b.n	8011310 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x66>
	}
	return true;
 801130e:	2301      	movs	r3, #1
}
 8011310:	4618      	mov	r0, r3
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t>:
 * @param cutoff_freq Signals changing at a rate higher than the given cutoff
 * frequency will be filtered out
 * @return true: success false: failure
 */
bool Adafruit_ICM20X::enableGyrolDLPF(bool enable,
		icm20x_gyro_cutoff_t cutoff_freq) {
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af02      	add	r7, sp, #8
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	70fb      	strb	r3, [r7, #3]
 8011324:	4613      	mov	r3, r2
 8011326:	70bb      	strb	r3, [r7, #2]
	_setBank(2);
 8011328:	2102      	movs	r1, #2
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7ff ff37 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	if (!modifyRegisterBit(ICM20X_B2_ACCEL_CONFIG_1, enable, 0)) {
 8011330:	78fa      	ldrb	r2, [r7, #3]
 8011332:	2300      	movs	r3, #0
 8011334:	2114      	movs	r1, #20
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 fa15 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
 801133c:	4603      	mov	r3, r0
 801133e:	f083 0301 	eor.w	r3, r3, #1
 8011342:	b2db      	uxtb	r3, r3
 8011344:	2b00      	cmp	r3, #0
 8011346:	d001      	beq.n	801134c <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x34>
		return false;
 8011348:	2300      	movs	r3, #0
 801134a:	e018      	b.n	801137e <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x66>
	}

	if (!enable) {
 801134c:	78fb      	ldrb	r3, [r7, #3]
 801134e:	f083 0301 	eor.w	r3, r3, #1
 8011352:	b2db      	uxtb	r3, r3
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x44>
		return true;
 8011358:	2301      	movs	r3, #1
 801135a:	e010      	b.n	801137e <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x66>
	}

	if (!modifyRegisterMultipleBit(ICM20X_B2_ACCEL_CONFIG_1, cutoff_freq, 3,
 801135c:	78ba      	ldrb	r2, [r7, #2]
 801135e:	2303      	movs	r3, #3
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	2303      	movs	r3, #3
 8011364:	2114      	movs	r1, #20
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 fa25 	bl	80117b6 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
 801136c:	4603      	mov	r3, r0
 801136e:	f083 0301 	eor.w	r3, r3, #1
 8011372:	b2db      	uxtb	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	d001      	beq.n	801137c <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x64>
			3)) {
		return false;
 8011378:	2300      	movs	r3, #0
 801137a:	e000      	b.n	801137e <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x66>
	}
	return true;
 801137c:	2301      	movs	r3, #1
}
 801137e:	4618      	mov	r0, r3
 8011380:	3708      	adds	r7, #8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <_ZN15Adafruit_ICM20X16setInt1ActiveLowEb>:
 * @brief Sets the polarity of the int1 pin
 *
 * @param active_low Set to true to make INT1 active low, false to make it
 * active high
 */
void Adafruit_ICM20X::setInt1ActiveLow(bool active_low) {
 8011386:	b580      	push	{r7, lr}
 8011388:	b082      	sub	sp, #8
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	460b      	mov	r3, r1
 8011390:	70fb      	strb	r3, [r7, #3]

	_setBank(0);
 8011392:	2100      	movs	r1, #0
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f7ff ff02 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, true, 6); //open drain
 801139a:	2306      	movs	r3, #6
 801139c:	2201      	movs	r2, #1
 801139e:	210f      	movs	r1, #15
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 f9e0 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, active_low, 7); //active low
 80113a6:	78fa      	ldrb	r2, [r7, #3]
 80113a8:	2307      	movs	r3, #7
 80113aa:	210f      	movs	r1, #15
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f000 f9da 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
}
 80113b2:	bf00      	nop
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <_ZN15Adafruit_ICM20X12setInt1LatchEb>:
 * @brief Sets the latch logic
 *
 * @param active_low Set to true to make INT1 active low, false to make it
 * active high
 */
void Adafruit_ICM20X::setInt1Latch(bool latch) {
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	460b      	mov	r3, r1
 80113c4:	70fb      	strb	r3, [r7, #3]

	_setBank(0);
 80113c6:	2100      	movs	r1, #0
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff fee8 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, latch, 7); //active low
 80113ce:	78fa      	ldrb	r2, [r7, #3]
 80113d0:	2307      	movs	r3, #7
 80113d2:	210f      	movs	r1, #15
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 f9c6 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
}
 80113da:	bf00      	nop
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <_ZN15Adafruit_ICM20X10enableInt1Eb>:
 * @brief Sets the polarity of the INT2 pin
 *
 * @param active_low Set to true to make INT1 active low, false to make it
 * active high
 */
void Adafruit_ICM20X::enableInt1(bool enable) {
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	460b      	mov	r3, r1
 80113ec:	70fb      	strb	r3, [r7, #3]

	_setBank(0);
 80113ee:	2100      	movs	r1, #0
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f7ff fed4 	bl	801119e <_ZN15Adafruit_ICM20X8_setBankEh>

	modifyRegisterBit(ICM20X_B0_REG_INT_ENABLE_1, enable, 0);
 80113f6:	78fa      	ldrb	r2, [r7, #3]
 80113f8:	2300      	movs	r3, #0
 80113fa:	2111      	movs	r1, #17
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f000 f9b2 	bl	8011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
}
 8011402:	bf00      	nop
 8011404:	3708      	adds	r7, #8
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}

0801140a <_ZN15Adafruit_ICM20X12readRegisterEtPht>:
//	uint8_t mask = 1 << pos;
//	return ((var & ~mask) | (value << pos));
//}
//
bool Adafruit_ICM20X::readRegister(uint16_t mem_addr, uint8_t *dest,
		uint16_t size) {
 801140a:	b5b0      	push	{r4, r5, r7, lr}
 801140c:	b08a      	sub	sp, #40	; 0x28
 801140e:	af02      	add	r7, sp, #8
 8011410:	60f8      	str	r0, [r7, #12]
 8011412:	607a      	str	r2, [r7, #4]
 8011414:	461a      	mov	r2, r3
 8011416:	460b      	mov	r3, r1
 8011418:	817b      	strh	r3, [r7, #10]
 801141a:	4613      	mov	r3, r2
 801141c:	813b      	strh	r3, [r7, #8]
		memcpy(dest, &rx_data[1], size);
		return true;
	} else {
		cs_active(false);
		return false;
	}
 801141e:	466b      	mov	r3, sp
 8011420:	461d      	mov	r5, r3
	uint8_t tx_data[size + 1] = {0};
 8011422:	893c      	ldrh	r4, [r7, #8]
 8011424:	61fc      	str	r4, [r7, #28]
 8011426:	4623      	mov	r3, r4
 8011428:	3301      	adds	r3, #1
 801142a:	4618      	mov	r0, r3
 801142c:	f04f 0100 	mov.w	r1, #0
 8011430:	f04f 0200 	mov.w	r2, #0
 8011434:	f04f 0300 	mov.w	r3, #0
 8011438:	00cb      	lsls	r3, r1, #3
 801143a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801143e:	00c2      	lsls	r2, r0, #3
 8011440:	4623      	mov	r3, r4
 8011442:	3301      	adds	r3, #1
 8011444:	4618      	mov	r0, r3
 8011446:	f04f 0100 	mov.w	r1, #0
 801144a:	f04f 0200 	mov.w	r2, #0
 801144e:	f04f 0300 	mov.w	r3, #0
 8011452:	00cb      	lsls	r3, r1, #3
 8011454:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011458:	00c2      	lsls	r2, r0, #3
 801145a:	4623      	mov	r3, r4
 801145c:	3301      	adds	r3, #1
 801145e:	3307      	adds	r3, #7
 8011460:	08db      	lsrs	r3, r3, #3
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	ebad 0d03 	sub.w	sp, sp, r3
 8011468:	ab02      	add	r3, sp, #8
 801146a:	3300      	adds	r3, #0
 801146c:	61bb      	str	r3, [r7, #24]
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	2200      	movs	r2, #0
 8011472:	701a      	strb	r2, [r3, #0]
 8011474:	1c5a      	adds	r2, r3, #1
 8011476:	1e63      	subs	r3, r4, #1
 8011478:	2b00      	cmp	r3, #0
 801147a:	db04      	blt.n	8011486 <_ZN15Adafruit_ICM20X12readRegisterEtPht+0x7c>
 801147c:	2100      	movs	r1, #0
 801147e:	7011      	strb	r1, [r2, #0]
 8011480:	3201      	adds	r2, #1
 8011482:	3b01      	subs	r3, #1
 8011484:	e7f8      	b.n	8011478 <_ZN15Adafruit_ICM20X12readRegisterEtPht+0x6e>
	uint8_t rx_data[size + 1] = {0};
 8011486:	893c      	ldrh	r4, [r7, #8]
 8011488:	617c      	str	r4, [r7, #20]
 801148a:	4623      	mov	r3, r4
 801148c:	3301      	adds	r3, #1
 801148e:	4618      	mov	r0, r3
 8011490:	f04f 0100 	mov.w	r1, #0
 8011494:	f04f 0200 	mov.w	r2, #0
 8011498:	f04f 0300 	mov.w	r3, #0
 801149c:	00cb      	lsls	r3, r1, #3
 801149e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80114a2:	00c2      	lsls	r2, r0, #3
 80114a4:	4623      	mov	r3, r4
 80114a6:	3301      	adds	r3, #1
 80114a8:	4618      	mov	r0, r3
 80114aa:	f04f 0100 	mov.w	r1, #0
 80114ae:	f04f 0200 	mov.w	r2, #0
 80114b2:	f04f 0300 	mov.w	r3, #0
 80114b6:	00cb      	lsls	r3, r1, #3
 80114b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80114bc:	00c2      	lsls	r2, r0, #3
 80114be:	4623      	mov	r3, r4
 80114c0:	3301      	adds	r3, #1
 80114c2:	3307      	adds	r3, #7
 80114c4:	08db      	lsrs	r3, r3, #3
 80114c6:	00db      	lsls	r3, r3, #3
 80114c8:	ebad 0d03 	sub.w	sp, sp, r3
 80114cc:	ab02      	add	r3, sp, #8
 80114ce:	3300      	adds	r3, #0
 80114d0:	613b      	str	r3, [r7, #16]
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	2200      	movs	r2, #0
 80114d6:	701a      	strb	r2, [r3, #0]
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	1e63      	subs	r3, r4, #1
 80114dc:	2b00      	cmp	r3, #0
 80114de:	db04      	blt.n	80114ea <_ZN15Adafruit_ICM20X12readRegisterEtPht+0xe0>
 80114e0:	2100      	movs	r1, #0
 80114e2:	7011      	strb	r1, [r2, #0]
 80114e4:	3201      	adds	r2, #1
 80114e6:	3b01      	subs	r3, #1
 80114e8:	e7f8      	b.n	80114dc <_ZN15Adafruit_ICM20X12readRegisterEtPht+0xd2>
	tx_data[0] = (mem_addr & 0x7F) | 0x80;
 80114ea:	897b      	ldrh	r3, [r7, #10]
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80114f2:	b2da      	uxtb	r2, r3
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	701a      	strb	r2, [r3, #0]
	cs_active(true);
 80114f8:	2101      	movs	r1, #1
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f7ff fbfd 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
			== HAL_SPI_TransmitReceive(spi_han, tx_data, rx_data, size + 1,
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6858      	ldr	r0, [r3, #4]
 8011504:	69b9      	ldr	r1, [r7, #24]
 8011506:	693a      	ldr	r2, [r7, #16]
 8011508:	893b      	ldrh	r3, [r7, #8]
 801150a:	3301      	adds	r3, #1
 801150c:	b29b      	uxth	r3, r3
 801150e:	2464      	movs	r4, #100	; 0x64
 8011510:	9400      	str	r4, [sp, #0]
 8011512:	f7f9 f9ca 	bl	800a8aa <HAL_SPI_TransmitReceive>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	bf0c      	ite	eq
 801151c:	2301      	moveq	r3, #1
 801151e:	2300      	movne	r3, #0
 8011520:	b2db      	uxtb	r3, r3
	if (HAL_OK
 8011522:	2b00      	cmp	r3, #0
 8011524:	d00c      	beq.n	8011540 <_ZN15Adafruit_ICM20X12readRegisterEtPht+0x136>
		cs_active(false);
 8011526:	2100      	movs	r1, #0
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f7ff fbe6 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		memcpy(dest, &rx_data[1], size);
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	3301      	adds	r3, #1
 8011532:	893a      	ldrh	r2, [r7, #8]
 8011534:	4619      	mov	r1, r3
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f005 feb2 	bl	80172a0 <memcpy>
		return true;
 801153c:	2301      	movs	r3, #1
 801153e:	e004      	b.n	801154a <_ZN15Adafruit_ICM20X12readRegisterEtPht+0x140>
		cs_active(false);
 8011540:	2100      	movs	r1, #0
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7ff fbd9 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return false;
 8011548:	2300      	movs	r3, #0
 801154a:	46ad      	mov	sp, r5

}
 801154c:	4618      	mov	r0, r3
 801154e:	3720      	adds	r7, #32
 8011550:	46bd      	mov	sp, r7
 8011552:	bdb0      	pop	{r4, r5, r7, pc}

08011554 <_ZN15Adafruit_ICM20X16readRegisterByteEt>:

uint8_t Adafruit_ICM20X::readRegisterByte(uint16_t mem_addr) {
 8011554:	b580      	push	{r7, lr}
 8011556:	b086      	sub	sp, #24
 8011558:	af02      	add	r7, sp, #8
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	807b      	strh	r3, [r7, #2]
	uint8_t tx_data[2];
	uint8_t rx_data[2];
	tx_data[0] = (mem_addr & 0x7F) | 0x80;
 8011560:	887b      	ldrh	r3, [r7, #2]
 8011562:	b2db      	uxtb	r3, r3
 8011564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011568:	b2db      	uxtb	r3, r3
 801156a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef test;
	cs_active(true);
 8011570:	2101      	movs	r1, #1
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7ff fbc1 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>

	test = HAL_SPI_TransmitReceive(spi_han, tx_data, rx_data, 2, 100);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6858      	ldr	r0, [r3, #4]
 801157c:	f107 0208 	add.w	r2, r7, #8
 8011580:	f107 010c 	add.w	r1, r7, #12
 8011584:	2364      	movs	r3, #100	; 0x64
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	2302      	movs	r3, #2
 801158a:	f7f9 f98e 	bl	800a8aa <HAL_SPI_TransmitReceive>
 801158e:	4603      	mov	r3, r0
 8011590:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK == test) {
 8011592:	7bfb      	ldrb	r3, [r7, #15]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d105      	bne.n	80115a4 <_ZN15Adafruit_ICM20X16readRegisterByteEt+0x50>
		cs_active(false);
 8011598:	2100      	movs	r1, #0
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7ff fbad 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return rx_data[1];
 80115a0:	7a7b      	ldrb	r3, [r7, #9]
 80115a2:	e004      	b.n	80115ae <_ZN15Adafruit_ICM20X16readRegisterByteEt+0x5a>
	} else {
		cs_active(false);
 80115a4:	2100      	movs	r1, #0
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f7ff fba7 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return 0;
 80115ac:	2300      	movs	r3, #0
	}
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <_ZN15Adafruit_ICM20X13writeRegisterEhPht>:

bool Adafruit_ICM20X::writeRegister(uint8_t mem_addr, uint8_t *val,
		uint16_t size) {
 80115b6:	b5b0      	push	{r4, r5, r7, lr}
 80115b8:	b086      	sub	sp, #24
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	60f8      	str	r0, [r7, #12]
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	461a      	mov	r2, r3
 80115c2:	460b      	mov	r3, r1
 80115c4:	72fb      	strb	r3, [r7, #11]
 80115c6:	4613      	mov	r3, r2
 80115c8:	813b      	strh	r3, [r7, #8]
		cs_active(false);
		return true;
	} else {
		cs_active(false);
		return false;
	}
 80115ca:	466b      	mov	r3, sp
 80115cc:	461d      	mov	r5, r3
	uint8_t data[1 + size];
 80115ce:	893c      	ldrh	r4, [r7, #8]
 80115d0:	617c      	str	r4, [r7, #20]
 80115d2:	4623      	mov	r3, r4
 80115d4:	3301      	adds	r3, #1
 80115d6:	4618      	mov	r0, r3
 80115d8:	f04f 0100 	mov.w	r1, #0
 80115dc:	f04f 0200 	mov.w	r2, #0
 80115e0:	f04f 0300 	mov.w	r3, #0
 80115e4:	00cb      	lsls	r3, r1, #3
 80115e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80115ea:	00c2      	lsls	r2, r0, #3
 80115ec:	4623      	mov	r3, r4
 80115ee:	3301      	adds	r3, #1
 80115f0:	4618      	mov	r0, r3
 80115f2:	f04f 0100 	mov.w	r1, #0
 80115f6:	f04f 0200 	mov.w	r2, #0
 80115fa:	f04f 0300 	mov.w	r3, #0
 80115fe:	00cb      	lsls	r3, r1, #3
 8011600:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8011604:	00c2      	lsls	r2, r0, #3
 8011606:	4623      	mov	r3, r4
 8011608:	3301      	adds	r3, #1
 801160a:	3307      	adds	r3, #7
 801160c:	08db      	lsrs	r3, r3, #3
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	ebad 0d03 	sub.w	sp, sp, r3
 8011614:	466b      	mov	r3, sp
 8011616:	3300      	adds	r3, #0
 8011618:	613b      	str	r3, [r7, #16]
	data[0] = (mem_addr & 0x7F) | 0x00;
 801161a:	7afb      	ldrb	r3, [r7, #11]
 801161c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011620:	b2da      	uxtb	r2, r3
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	701a      	strb	r2, [r3, #0]
	memcpy(&data[1], val, size);
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	3301      	adds	r3, #1
 801162a:	893a      	ldrh	r2, [r7, #8]
 801162c:	6879      	ldr	r1, [r7, #4]
 801162e:	4618      	mov	r0, r3
 8011630:	f005 fe36 	bl	80172a0 <memcpy>
	cs_active(true);
 8011634:	2101      	movs	r1, #1
 8011636:	68f8      	ldr	r0, [r7, #12]
 8011638:	f7ff fb5f 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
	if (HAL_OK == HAL_SPI_Transmit(spi_han, data, 1 + size, 10)) {
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	6858      	ldr	r0, [r3, #4]
 8011640:	6939      	ldr	r1, [r7, #16]
 8011642:	893b      	ldrh	r3, [r7, #8]
 8011644:	3301      	adds	r3, #1
 8011646:	b29a      	uxth	r2, r3
 8011648:	230a      	movs	r3, #10
 801164a:	f7f8 ffc0 	bl	800a5ce <HAL_SPI_Transmit>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	bf0c      	ite	eq
 8011654:	2301      	moveq	r3, #1
 8011656:	2300      	movne	r3, #0
 8011658:	b2db      	uxtb	r3, r3
 801165a:	2b00      	cmp	r3, #0
 801165c:	d005      	beq.n	801166a <_ZN15Adafruit_ICM20X13writeRegisterEhPht+0xb4>
		cs_active(false);
 801165e:	2100      	movs	r1, #0
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f7ff fb4a 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return true;
 8011666:	2301      	movs	r3, #1
 8011668:	e004      	b.n	8011674 <_ZN15Adafruit_ICM20X13writeRegisterEhPht+0xbe>
		cs_active(false);
 801166a:	2100      	movs	r1, #0
 801166c:	68f8      	ldr	r0, [r7, #12]
 801166e:	f7ff fb44 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return false;
 8011672:	2300      	movs	r3, #0
 8011674:	46ad      	mov	sp, r5
}
 8011676:	4618      	mov	r0, r3
 8011678:	3718      	adds	r7, #24
 801167a:	46bd      	mov	sp, r7
 801167c:	bdb0      	pop	{r4, r5, r7, pc}

0801167e <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>:

bool Adafruit_ICM20X::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 801167e:	b580      	push	{r7, lr}
 8011680:	b084      	sub	sp, #16
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
 8011686:	460b      	mov	r3, r1
 8011688:	70fb      	strb	r3, [r7, #3]
 801168a:	4613      	mov	r3, r2
 801168c:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = (mem_addr & 0x7F) | 0x00;
 801168e:	78fb      	ldrb	r3, [r7, #3]
 8011690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011694:	b2db      	uxtb	r3, r3
 8011696:	733b      	strb	r3, [r7, #12]
	data[1] = val;
 8011698:	78bb      	ldrb	r3, [r7, #2]
 801169a:	737b      	strb	r3, [r7, #13]

	cs_active(true);
 801169c:	2101      	movs	r1, #1
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f7ff fb2b 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
	if (HAL_OK == HAL_SPI_Transmit(spi_han, data, 2, 10)) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6858      	ldr	r0, [r3, #4]
 80116a8:	f107 010c 	add.w	r1, r7, #12
 80116ac:	230a      	movs	r3, #10
 80116ae:	2202      	movs	r2, #2
 80116b0:	f7f8 ff8d 	bl	800a5ce <HAL_SPI_Transmit>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	bf0c      	ite	eq
 80116ba:	2301      	moveq	r3, #1
 80116bc:	2300      	movne	r3, #0
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d005      	beq.n	80116d0 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh+0x52>
		cs_active(false);
 80116c4:	2100      	movs	r1, #0
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff fb17 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return true;
 80116cc:	2301      	movs	r3, #1
 80116ce:	e004      	b.n	80116da <_ZN15Adafruit_ICM20X17writeRegisterByteEhh+0x5c>
	} else {
		cs_active(false);
 80116d0:	2100      	movs	r1, #0
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7ff fb11 	bl	8010cfa <_ZN15Adafruit_ICM20X9cs_activeEb>
		return false;
 80116d8:	2300      	movs	r3, #0
	}
}
 80116da:	4618      	mov	r0, r3
 80116dc:	3710      	adds	r7, #16
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <_ZN15Adafruit_ICM20X15modifyBitInByteEhhh>:

uint8_t Adafruit_ICM20X::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
 80116e2:	b480      	push	{r7}
 80116e4:	b085      	sub	sp, #20
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
 80116ea:	4608      	mov	r0, r1
 80116ec:	4611      	mov	r1, r2
 80116ee:	461a      	mov	r2, r3
 80116f0:	4603      	mov	r3, r0
 80116f2:	70fb      	strb	r3, [r7, #3]
 80116f4:	460b      	mov	r3, r1
 80116f6:	70bb      	strb	r3, [r7, #2]
 80116f8:	4613      	mov	r3, r2
 80116fa:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 1 << pos;
 80116fc:	787b      	ldrb	r3, [r7, #1]
 80116fe:	2201      	movs	r2, #1
 8011700:	fa02 f303 	lsl.w	r3, r2, r3
 8011704:	73fb      	strb	r3, [r7, #15]
	return ((var & ~mask) | (value << pos));
 8011706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801170a:	43db      	mvns	r3, r3
 801170c:	b25a      	sxtb	r2, r3
 801170e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011712:	4013      	ands	r3, r2
 8011714:	b25a      	sxtb	r2, r3
 8011716:	78b9      	ldrb	r1, [r7, #2]
 8011718:	787b      	ldrb	r3, [r7, #1]
 801171a:	fa01 f303 	lsl.w	r3, r1, r3
 801171e:	b25b      	sxtb	r3, r3
 8011720:	4313      	orrs	r3, r2
 8011722:	b25b      	sxtb	r3, r3
 8011724:	b2db      	uxtb	r3, r3
}
 8011726:	4618      	mov	r0, r3
 8011728:	3714      	adds	r7, #20
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr

08011732 <_ZN15Adafruit_ICM20X16checkRegisterBitEth>:
//	uint8_t data;
//	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
//	return data;
//}

uint8_t Adafruit_ICM20X::checkRegisterBit(uint16_t reg, uint8_t pos) {
 8011732:	b580      	push	{r7, lr}
 8011734:	b082      	sub	sp, #8
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
 801173a:	460b      	mov	r3, r1
 801173c:	807b      	strh	r3, [r7, #2]
 801173e:	4613      	mov	r3, r2
 8011740:	707b      	strb	r3, [r7, #1]
	return (uint8_t) ((readRegisterByte(reg) >> pos) & 0x01);
 8011742:	887b      	ldrh	r3, [r7, #2]
 8011744:	4619      	mov	r1, r3
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff ff04 	bl	8011554 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
 801174c:	4603      	mov	r3, r0
 801174e:	461a      	mov	r2, r3
 8011750:	787b      	ldrb	r3, [r7, #1]
 8011752:	fa42 f303 	asr.w	r3, r2, r3
 8011756:	b2db      	uxtb	r3, r3
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	b2db      	uxtb	r3, r3
}
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>:

bool Adafruit_ICM20X::modifyRegisterBit(uint16_t reg, bool value, uint8_t pos) {
 8011766:	b580      	push	{r7, lr}
 8011768:	b084      	sub	sp, #16
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
 801176e:	4608      	mov	r0, r1
 8011770:	4611      	mov	r1, r2
 8011772:	461a      	mov	r2, r3
 8011774:	4603      	mov	r3, r0
 8011776:	807b      	strh	r3, [r7, #2]
 8011778:	460b      	mov	r3, r1
 801177a:	707b      	strb	r3, [r7, #1]
 801177c:	4613      	mov	r3, r2
 801177e:	703b      	strb	r3, [r7, #0]
	uint8_t register_value = readRegisterByte(reg);
 8011780:	887b      	ldrh	r3, [r7, #2]
 8011782:	4619      	mov	r1, r3
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7ff fee5 	bl	8011554 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
 801178a:	4603      	mov	r3, r0
 801178c:	73fb      	strb	r3, [r7, #15]
	register_value = modifyBitInByte(register_value, (uint8_t) value, pos);
 801178e:	787a      	ldrb	r2, [r7, #1]
 8011790:	783b      	ldrb	r3, [r7, #0]
 8011792:	7bf9      	ldrb	r1, [r7, #15]
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7ff ffa4 	bl	80116e2 <_ZN15Adafruit_ICM20X15modifyBitInByteEhhh>
 801179a:	4603      	mov	r3, r0
 801179c:	73fb      	strb	r3, [r7, #15]

	return writeRegisterByte(reg, register_value);
 801179e:	887b      	ldrh	r3, [r7, #2]
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	7bfa      	ldrb	r2, [r7, #15]
 80117a4:	4619      	mov	r1, r3
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff ff69 	bl	801167e <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
 80117ac:	4603      	mov	r3, r0
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3710      	adds	r7, #16
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>:

bool Adafruit_ICM20X::modifyRegisterMultipleBit(uint16_t reg, uint8_t value,
		uint8_t pos, uint8_t bits) {
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
 80117be:	4608      	mov	r0, r1
 80117c0:	4611      	mov	r1, r2
 80117c2:	461a      	mov	r2, r3
 80117c4:	4603      	mov	r3, r0
 80117c6:	807b      	strh	r3, [r7, #2]
 80117c8:	460b      	mov	r3, r1
 80117ca:	707b      	strb	r3, [r7, #1]
 80117cc:	4613      	mov	r3, r2
 80117ce:	703b      	strb	r3, [r7, #0]

	uint8_t register_value = readRegisterByte(reg);
 80117d0:	887b      	ldrh	r3, [r7, #2]
 80117d2:	4619      	mov	r1, r3
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f7ff febd 	bl	8011554 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
 80117da:	4603      	mov	r3, r0
 80117dc:	73fb      	strb	r3, [r7, #15]

	uint8_t mask = (1 << (bits)) - 1;
 80117de:	7e3b      	ldrb	r3, [r7, #24]
 80117e0:	2201      	movs	r2, #1
 80117e2:	fa02 f303 	lsl.w	r3, r2, r3
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	3b01      	subs	r3, #1
 80117ea:	73bb      	strb	r3, [r7, #14]
	value &= mask;
 80117ec:	787a      	ldrb	r2, [r7, #1]
 80117ee:	7bbb      	ldrb	r3, [r7, #14]
 80117f0:	4013      	ands	r3, r2
 80117f2:	707b      	strb	r3, [r7, #1]

	mask <<= pos;
 80117f4:	7bba      	ldrb	r2, [r7, #14]
 80117f6:	783b      	ldrb	r3, [r7, #0]
 80117f8:	fa02 f303 	lsl.w	r3, r2, r3
 80117fc:	73bb      	strb	r3, [r7, #14]
	register_value &= ~mask;          // remove the current data at that spot
 80117fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011802:	43db      	mvns	r3, r3
 8011804:	b25a      	sxtb	r2, r3
 8011806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801180a:	4013      	ands	r3, r2
 801180c:	b25b      	sxtb	r3, r3
 801180e:	73fb      	strb	r3, [r7, #15]
	register_value |= value << pos; // and add in the new data
 8011810:	787a      	ldrb	r2, [r7, #1]
 8011812:	783b      	ldrb	r3, [r7, #0]
 8011814:	fa02 f303 	lsl.w	r3, r2, r3
 8011818:	b25a      	sxtb	r2, r3
 801181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801181e:	4313      	orrs	r3, r2
 8011820:	b25b      	sxtb	r3, r3
 8011822:	73fb      	strb	r3, [r7, #15]

	return writeRegisterByte(reg, register_value);
 8011824:	887b      	ldrh	r3, [r7, #2]
 8011826:	b2db      	uxtb	r3, r3
 8011828:	7bfa      	ldrb	r2, [r7, #15]
 801182a:	4619      	mov	r1, r3
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7ff ff26 	bl	801167e <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
 8011832:	4603      	mov	r3, r0
}
 8011834:	4618      	mov	r0, r3
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
 @brief  Gets the sensor_t data for the ICM20X's accelerometer
 */
/**************************************************************************/
void Adafruit_ICM20X_Accelerometer::getSensor(sensor_t *sensor) {
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6039      	str	r1, [r7, #0]
	/* Clear the sensor_t object */
	memset(sensor, 0, sizeof(sensor_t));
 8011846:	2228      	movs	r2, #40	; 0x28
 8011848:	2100      	movs	r1, #0
 801184a:	6838      	ldr	r0, [r7, #0]
 801184c:	f005 fd36 	bl	80172bc <memset>

	/* Insert the sensor name in the fixed length char array */
	strncpy(sensor->name, "ICM20X_A", sizeof(sensor->name) - 1);
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	220b      	movs	r2, #11
 8011854:	4910      	ldr	r1, [pc, #64]	; (8011898 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x5c>)
 8011856:	4618      	mov	r0, r3
 8011858:	f005 fea0 	bl	801759c <strncpy>
	sensor->name[sizeof(sensor->name) - 1] = 0;
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2200      	movs	r2, #0
 8011860:	72da      	strb	r2, [r3, #11]
	sensor->version = 1;
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	2201      	movs	r2, #1
 8011866:	60da      	str	r2, [r3, #12]
	sensor->sensor_id = _sensorID;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	689a      	ldr	r2, [r3, #8]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	611a      	str	r2, [r3, #16]
	sensor->type = SENSOR_TYPE_ACCELEROMETER;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	2201      	movs	r2, #1
 8011874:	615a      	str	r2, [r3, #20]
	sensor->min_delay = 0;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	2200      	movs	r2, #0
 801187a:	625a      	str	r2, [r3, #36]	; 0x24
	sensor->min_value = -294.1995F; /*  -30g = 294.1995 m/s^2  */
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	4a07      	ldr	r2, [pc, #28]	; (801189c <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x60>)
 8011880:	61da      	str	r2, [r3, #28]
	sensor->max_value = 294.1995F; /* 30g = 294.1995 m/s^2  */
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	4a06      	ldr	r2, [pc, #24]	; (80118a0 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x64>)
 8011886:	619a      	str	r2, [r3, #24]
	sensor->resolution = 0.122; /* 8192LSB/1000 mG -> 8.192 LSB/ mG => 0.122 mG/LSB at +-4g */
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	4a06      	ldr	r2, [pc, #24]	; (80118a4 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x68>)
 801188c:	621a      	str	r2, [r3, #32]
}
 801188e:	bf00      	nop
 8011890:	3708      	adds	r7, #8
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	080176b0 	.word	0x080176b0
 801189c:	c3931989 	.word	0xc3931989
 80118a0:	43931989 	.word	0x43931989
 80118a4:	3df9db23 	.word	0x3df9db23

080118a8 <_ZN29Adafruit_ICM20X_Accelerometer8getEventEP15sensors_event_t>:
 @brief  Gets the accelerometer as a standard sensor event
 @param  event Sensor event object that will be populated
 @returns True
 */
/**************************************************************************/
bool Adafruit_ICM20X_Accelerometer::getEvent(sensors_event_t *event) {
 80118a8:	b590      	push	{r4, r7, lr}
 80118aa:	b083      	sub	sp, #12
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
	_theICM20X->_read();
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7ff fbe4 	bl	8011084 <_ZN15Adafruit_ICM20X5_readEv>
	_theICM20X->fillAccelEvent(event, HAL_GetTick());
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	68dc      	ldr	r4, [r3, #12]
 80118c0:	f7f1 fa88 	bl	8002dd4 <HAL_GetTick>
 80118c4:	4603      	mov	r3, r0
 80118c6:	461a      	mov	r2, r3
 80118c8:	6839      	ldr	r1, [r7, #0]
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7ff faf0 	bl	8010eb0 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>

	return true;
 80118d0:	2301      	movs	r3, #1
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	370c      	adds	r7, #12
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd90      	pop	{r4, r7, pc}
	...

080118dc <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
 @brief  Gets the sensor_t data for the ICM20X's gyroscope sensor
 */
/**************************************************************************/
void Adafruit_ICM20X_Gyro::getSensor(sensor_t *sensor) {
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
	/* Clear the sensor_t object */
	memset(sensor, 0, sizeof(sensor_t));
 80118e6:	2228      	movs	r2, #40	; 0x28
 80118e8:	2100      	movs	r1, #0
 80118ea:	6838      	ldr	r0, [r7, #0]
 80118ec:	f005 fce6 	bl	80172bc <memset>

	/* Insert the sensor name in the fixed length char array */
	strncpy(sensor->name, "ICM20X_G", sizeof(sensor->name) - 1);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	220b      	movs	r2, #11
 80118f4:	4910      	ldr	r1, [pc, #64]	; (8011938 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x5c>)
 80118f6:	4618      	mov	r0, r3
 80118f8:	f005 fe50 	bl	801759c <strncpy>
	sensor->name[sizeof(sensor->name) - 1] = 0;
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	2200      	movs	r2, #0
 8011900:	72da      	strb	r2, [r3, #11]
	sensor->version = 1;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	2201      	movs	r2, #1
 8011906:	60da      	str	r2, [r3, #12]
	sensor->sensor_id = _sensorID;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	689a      	ldr	r2, [r3, #8]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	611a      	str	r2, [r3, #16]
	sensor->type = SENSOR_TYPE_GYROSCOPE;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	2204      	movs	r2, #4
 8011914:	615a      	str	r2, [r3, #20]
	sensor->min_delay = 0;
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	2200      	movs	r2, #0
 801191a:	625a      	str	r2, [r3, #36]	; 0x24
	sensor->min_value = -69.81; /* -4000 dps -> rad/s (radians per second) */
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	4a07      	ldr	r2, [pc, #28]	; (801193c <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x60>)
 8011920:	61da      	str	r2, [r3, #28]
	sensor->max_value = +69.81;
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	4a06      	ldr	r2, [pc, #24]	; (8011940 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x64>)
 8011926:	619a      	str	r2, [r3, #24]
	sensor->resolution = 2.665e-7; /* 65.5 LSB/DPS */
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	4a06      	ldr	r2, [pc, #24]	; (8011944 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x68>)
 801192c:	621a      	str	r2, [r3, #32]
}
 801192e:	bf00      	nop
 8011930:	3708      	adds	r7, #8
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	080176bc 	.word	0x080176bc
 801193c:	c28b9eb8 	.word	0xc28b9eb8
 8011940:	428b9eb8 	.word	0x428b9eb8
 8011944:	348f137b 	.word	0x348f137b

08011948 <_ZN20Adafruit_ICM20X_Gyro8getEventEP15sensors_event_t>:
 @brief  Gets the gyroscope as a standard sensor event
 @param  event Sensor event object that will be populated
 @returns True
 */
/**************************************************************************/
bool Adafruit_ICM20X_Gyro::getEvent(sensors_event_t *event) {
 8011948:	b590      	push	{r4, r7, lr}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
	_theICM20X->_read();
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fb94 	bl	8011084 <_ZN15Adafruit_ICM20X5_readEv>
	_theICM20X->fillGyroEvent(event, HAL_GetTick());
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	68dc      	ldr	r4, [r3, #12]
 8011960:	f7f1 fa38 	bl	8002dd4 <HAL_GetTick>
 8011964:	4603      	mov	r3, r0
 8011966:	461a      	mov	r2, r3
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	4620      	mov	r0, r4
 801196c:	f7ff fade 	bl	8010f2c <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>

	return true;
 8011970:	2301      	movs	r3, #1
}
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	bd90      	pop	{r4, r7, pc}
	...

0801197c <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
 @brief  Gets the sensor_t data for the ICM20X's magnetometer sensor
 */
/**************************************************************************/
void Adafruit_ICM20X_Magnetometer::getSensor(sensor_t *sensor) {
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
	/* Clear the sensor_t object */
	memset(sensor, 0, sizeof(sensor_t));
 8011986:	2228      	movs	r2, #40	; 0x28
 8011988:	2100      	movs	r1, #0
 801198a:	6838      	ldr	r0, [r7, #0]
 801198c:	f005 fc96 	bl	80172bc <memset>

	/* Insert the sensor name in the fixed length char array */
	strncpy(sensor->name, "ICM20X_M", sizeof(sensor->name) - 1);
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	220b      	movs	r2, #11
 8011994:	4910      	ldr	r1, [pc, #64]	; (80119d8 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x5c>)
 8011996:	4618      	mov	r0, r3
 8011998:	f005 fe00 	bl	801759c <strncpy>
	sensor->name[sizeof(sensor->name) - 1] = 0;
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	2200      	movs	r2, #0
 80119a0:	72da      	strb	r2, [r3, #11]
	sensor->version = 1;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	2201      	movs	r2, #1
 80119a6:	60da      	str	r2, [r3, #12]
	sensor->sensor_id = _sensorID;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	611a      	str	r2, [r3, #16]
	sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2202      	movs	r2, #2
 80119b4:	615a      	str	r2, [r3, #20]
	sensor->min_delay = 0;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	2200      	movs	r2, #0
 80119ba:	625a      	str	r2, [r3, #36]	; 0x24
	sensor->min_value = -4900;
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	4a07      	ldr	r2, [pc, #28]	; (80119dc <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x60>)
 80119c0:	61da      	str	r2, [r3, #28]
	sensor->max_value = 4900;
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	4a06      	ldr	r2, [pc, #24]	; (80119e0 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x64>)
 80119c6:	619a      	str	r2, [r3, #24]
	sensor->resolution = 0.6667;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	4a06      	ldr	r2, [pc, #24]	; (80119e4 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x68>)
 80119cc:	621a      	str	r2, [r3, #32]
}
 80119ce:	bf00      	nop
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	080176c8 	.word	0x080176c8
 80119dc:	c5992000 	.word	0xc5992000
 80119e0:	45992000 	.word	0x45992000
 80119e4:	3f2aacda 	.word	0x3f2aacda

080119e8 <_ZN28Adafruit_ICM20X_Magnetometer8getEventEP15sensors_event_t>:
 @brief  Gets the magnetometer as a standard sensor event
 @param  event Sensor event object that will be populated
 @returns True
 */
/**************************************************************************/
bool Adafruit_ICM20X_Magnetometer::getEvent(sensors_event_t *event) {
 80119e8:	b590      	push	{r4, r7, lr}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	6039      	str	r1, [r7, #0]
	_theICM20X->_read();
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fb44 	bl	8011084 <_ZN15Adafruit_ICM20X5_readEv>
	_theICM20X->fillMagEvent(event, HAL_GetTick());
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	68dc      	ldr	r4, [r3, #12]
 8011a00:	f7f1 f9e8 	bl	8002dd4 <HAL_GetTick>
 8011a04:	4603      	mov	r3, r0
 8011a06:	461a      	mov	r2, r3
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	f7ff facc 	bl	8010fa8 <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>

	return true;
 8011a10:	2301      	movs	r3, #1
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd90      	pop	{r4, r7, pc}
	...

08011a1c <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
 @brief  Gets the sensor_t data for the ICM20X's tenperature
 */
/**************************************************************************/
void Adafruit_ICM20X_Temp::getSensor(sensor_t *sensor) {
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
	/* Clear the sensor_t object */
	memset(sensor, 0, sizeof(sensor_t));
 8011a26:	2228      	movs	r2, #40	; 0x28
 8011a28:	2100      	movs	r1, #0
 8011a2a:	6838      	ldr	r0, [r7, #0]
 8011a2c:	f005 fc46 	bl	80172bc <memset>

	/* Insert the sensor name in the fixed length char array */
	strncpy(sensor->name, "ICM20X_T", sizeof(sensor->name) - 1);
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	220b      	movs	r2, #11
 8011a34:	4910      	ldr	r1, [pc, #64]	; (8011a78 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x5c>)
 8011a36:	4618      	mov	r0, r3
 8011a38:	f005 fdb0 	bl	801759c <strncpy>
	sensor->name[sizeof(sensor->name) - 1] = 0;
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	72da      	strb	r2, [r3, #11]
	sensor->version = 1;
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	2201      	movs	r2, #1
 8011a46:	60da      	str	r2, [r3, #12]
	sensor->sensor_id = _sensorID;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	689a      	ldr	r2, [r3, #8]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	611a      	str	r2, [r3, #16]
	sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	220d      	movs	r2, #13
 8011a54:	615a      	str	r2, [r3, #20]
	sensor->min_delay = 0;
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	625a      	str	r2, [r3, #36]	; 0x24
	sensor->min_value = -40;
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	4a07      	ldr	r2, [pc, #28]	; (8011a7c <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x60>)
 8011a60:	61da      	str	r2, [r3, #28]
	sensor->max_value = 85;
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	4a06      	ldr	r2, [pc, #24]	; (8011a80 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x64>)
 8011a66:	619a      	str	r2, [r3, #24]
	sensor->resolution = 0.0029952; /* 333.87 LSB/C => 1/333.87 C/LSB */
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	4a06      	ldr	r2, [pc, #24]	; (8011a84 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x68>)
 8011a6c:	621a      	str	r2, [r3, #32]
}
 8011a6e:	bf00      	nop
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	080176d4 	.word	0x080176d4
 8011a7c:	c2200000 	.word	0xc2200000
 8011a80:	42aa0000 	.word	0x42aa0000
 8011a84:	3b444b1e 	.word	0x3b444b1e

08011a88 <_ZN20Adafruit_ICM20X_Temp8getEventEP15sensors_event_t>:
 @brief  Gets the temperature as a standard sensor event
 @param  event Sensor event object that will be populated
 @returns True
 */
/**************************************************************************/
bool Adafruit_ICM20X_Temp::getEvent(sensors_event_t *event) {
 8011a88:	b590      	push	{r4, r7, lr}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
	_theICM20X->_read();
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff faf4 	bl	8011084 <_ZN15Adafruit_ICM20X5_readEv>
	_theICM20X->fillTempEvent(event, HAL_GetTick());
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	68dc      	ldr	r4, [r3, #12]
 8011aa0:	f7f1 f998 	bl	8002dd4 <HAL_GetTick>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f7ff faa8 	bl	8011000 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>

	return true;
 8011ab0:	2301      	movs	r3, #1
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	370c      	adds	r7, #12
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd90      	pop	{r4, r7, pc}
	...

08011abc <_ZN20Adafruit_ICM20X_TempD1Ev>:
class Adafruit_ICM20X_Temp: public Adafruit_Sensor {
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	4a05      	ldr	r2, [pc, #20]	; (8011adc <_ZN20Adafruit_ICM20X_TempD1Ev+0x20>)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7fe fffb 	bl	8010ac8 <_ZN15Adafruit_SensorD1Ev>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	0801794c 	.word	0x0801794c

08011ae0 <_ZN20Adafruit_ICM20X_TempD0Ev>:
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7ff ffe7 	bl	8011abc <_ZN20Adafruit_ICM20X_TempD1Ev>
 8011aee:	2110      	movs	r1, #16
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f004 ff1b 	bl	801692c <_ZdlPvj>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <_ZN28Adafruit_ICM20X_MagnetometerD1Ev>:
class Adafruit_ICM20X_Magnetometer: public Adafruit_Sensor {
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	4a05      	ldr	r2, [pc, #20]	; (8011b20 <_ZN28Adafruit_ICM20X_MagnetometerD1Ev+0x20>)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fe ffd9 	bl	8010ac8 <_ZN15Adafruit_SensorD1Ev>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	08017968 	.word	0x08017968

08011b24 <_ZN28Adafruit_ICM20X_MagnetometerD0Ev>:
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7ff ffe7 	bl	8011b00 <_ZN28Adafruit_ICM20X_MagnetometerD1Ev>
 8011b32:	2110      	movs	r1, #16
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f004 fef9 	bl	801692c <_ZdlPvj>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <_ZN20Adafruit_ICM20X_GyroD1Ev>:
class Adafruit_ICM20X_Gyro: public Adafruit_Sensor {
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	4a05      	ldr	r2, [pc, #20]	; (8011b64 <_ZN20Adafruit_ICM20X_GyroD1Ev+0x20>)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7fe ffb7 	bl	8010ac8 <_ZN15Adafruit_SensorD1Ev>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	08017984 	.word	0x08017984

08011b68 <_ZN20Adafruit_ICM20X_GyroD0Ev>:
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7ff ffe7 	bl	8011b44 <_ZN20Adafruit_ICM20X_GyroD1Ev>
 8011b76:	2110      	movs	r1, #16
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f004 fed7 	bl	801692c <_ZdlPvj>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <_ZN29Adafruit_ICM20X_AccelerometerD1Ev>:
class Adafruit_ICM20X_Accelerometer: public Adafruit_Sensor {
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	4a05      	ldr	r2, [pc, #20]	; (8011ba8 <_ZN29Adafruit_ICM20X_AccelerometerD1Ev+0x20>)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	601a      	str	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7fe ff95 	bl	8010ac8 <_ZN15Adafruit_SensorD1Ev>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	080179a0 	.word	0x080179a0

08011bac <_ZN29Adafruit_ICM20X_AccelerometerD0Ev>:
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff ffe7 	bl	8011b88 <_ZN29Adafruit_ICM20X_AccelerometerD1Ev>
 8011bba:	2110      	movs	r1, #16
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f004 feb5 	bl	801692c <_ZdlPvj>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <_ZN7TSL2772C1Ev>:

/**
 * @brief Construct a new TSL2772::TSL2772 object
 *
 */
TSL2772::TSL2772(void) {
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	601a      	str	r2, [r3, #0]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	711a      	strb	r2, [r3, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2200      	movs	r2, #0
 8011be4:	729a      	strb	r2, [r3, #10]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011bec:	60da      	str	r2, [r3, #12]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a05      	ldr	r2, [pc, #20]	; (8011c08 <_ZN7TSL2772C1Ev+0x3c>)
 8011bf2:	611a      	str	r2, [r3, #16]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	615a      	str	r2, [r3, #20]
}
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr
 8011c08:	402eb852 	.word	0x402eb852

08011c0c <_ZN7TSL2772D1Ev>:

/**
 * @brief Destroy the TSL2772::TSL2772 object
 *
 */
TSL2772::~TSL2772(void) {
 8011c0c:	b480      	push	{r7}
 8011c0e:	b083      	sub	sp, #12
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
}
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4618      	mov	r0, r3
 8011c18:	370c      	adds	r7, #12
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr
	...

08011c24 <__NVIC_SetPriority>:
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	6039      	str	r1, [r7, #0]
 8011c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	db0a      	blt.n	8011c4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	b2da      	uxtb	r2, r3
 8011c3c:	490c      	ldr	r1, [pc, #48]	; (8011c70 <__NVIC_SetPriority+0x4c>)
 8011c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c42:	0112      	lsls	r2, r2, #4
 8011c44:	b2d2      	uxtb	r2, r2
 8011c46:	440b      	add	r3, r1
 8011c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011c4c:	e00a      	b.n	8011c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	4908      	ldr	r1, [pc, #32]	; (8011c74 <__NVIC_SetPriority+0x50>)
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	f003 030f 	and.w	r3, r3, #15
 8011c5a:	3b04      	subs	r3, #4
 8011c5c:	0112      	lsls	r2, r2, #4
 8011c5e:	b2d2      	uxtb	r2, r2
 8011c60:	440b      	add	r3, r1
 8011c62:	761a      	strb	r2, [r3, #24]
}
 8011c64:	bf00      	nop
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6e:	4770      	bx	lr
 8011c70:	e000e100 	.word	0xe000e100
 8011c74:	e000ed00 	.word	0xe000ed00

08011c78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011c7c:	4b05      	ldr	r3, [pc, #20]	; (8011c94 <SysTick_Handler+0x1c>)
 8011c7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011c80:	f002 fbee 	bl	8014460 <xTaskGetSchedulerState>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d001      	beq.n	8011c8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011c8a:	f003 fd8d 	bl	80157a8 <xPortSysTickHandler>
  }
}
 8011c8e:	bf00      	nop
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	e000e010 	.word	0xe000e010

08011c98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	f06f 0004 	mvn.w	r0, #4
 8011ca2:	f7ff ffbf 	bl	8011c24 <__NVIC_SetPriority>
#endif
}
 8011ca6:	bf00      	nop
 8011ca8:	bd80      	pop	{r7, pc}
	...

08011cac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cb2:	f3ef 8305 	mrs	r3, IPSR
 8011cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8011cb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d003      	beq.n	8011cc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011cbe:	f06f 0305 	mvn.w	r3, #5
 8011cc2:	607b      	str	r3, [r7, #4]
 8011cc4:	e00c      	b.n	8011ce0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011cc6:	4b0a      	ldr	r3, [pc, #40]	; (8011cf0 <osKernelInitialize+0x44>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d105      	bne.n	8011cda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011cce:	4b08      	ldr	r3, [pc, #32]	; (8011cf0 <osKernelInitialize+0x44>)
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	607b      	str	r3, [r7, #4]
 8011cd8:	e002      	b.n	8011ce0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011ce0:	687b      	ldr	r3, [r7, #4]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr
 8011cee:	bf00      	nop
 8011cf0:	20000e50 	.word	0x20000e50

08011cf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cfa:	f3ef 8305 	mrs	r3, IPSR
 8011cfe:	603b      	str	r3, [r7, #0]
  return(result);
 8011d00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d003      	beq.n	8011d0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8011d06:	f06f 0305 	mvn.w	r3, #5
 8011d0a:	607b      	str	r3, [r7, #4]
 8011d0c:	e010      	b.n	8011d30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011d0e:	4b0b      	ldr	r3, [pc, #44]	; (8011d3c <osKernelStart+0x48>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d109      	bne.n	8011d2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011d16:	f7ff ffbf 	bl	8011c98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011d1a:	4b08      	ldr	r3, [pc, #32]	; (8011d3c <osKernelStart+0x48>)
 8011d1c:	2202      	movs	r2, #2
 8011d1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011d20:	f001 ff42 	bl	8013ba8 <vTaskStartScheduler>
      stat = osOK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	607b      	str	r3, [r7, #4]
 8011d28:	e002      	b.n	8011d30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011d30:	687b      	ldr	r3, [r7, #4]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
 8011d3a:	bf00      	nop
 8011d3c:	20000e50 	.word	0x20000e50

08011d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b08e      	sub	sp, #56	; 0x38
 8011d44:	af04      	add	r7, sp, #16
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d50:	f3ef 8305 	mrs	r3, IPSR
 8011d54:	617b      	str	r3, [r7, #20]
  return(result);
 8011d56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d17e      	bne.n	8011e5a <osThreadNew+0x11a>
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d07b      	beq.n	8011e5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011d62:	2380      	movs	r3, #128	; 0x80
 8011d64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011d66:	2318      	movs	r3, #24
 8011d68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d045      	beq.n	8011e06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d002      	beq.n	8011d88 <osThreadNew+0x48>
        name = attr->name;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	699b      	ldr	r3, [r3, #24]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	699b      	ldr	r3, [r3, #24]
 8011d94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d008      	beq.n	8011dae <osThreadNew+0x6e>
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	2b38      	cmp	r3, #56	; 0x38
 8011da0:	d805      	bhi.n	8011dae <osThreadNew+0x6e>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	f003 0301 	and.w	r3, r3, #1
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d001      	beq.n	8011db2 <osThreadNew+0x72>
        return (NULL);
 8011dae:	2300      	movs	r3, #0
 8011db0:	e054      	b.n	8011e5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	695b      	ldr	r3, [r3, #20]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d003      	beq.n	8011dc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	695b      	ldr	r3, [r3, #20]
 8011dbe:	089b      	lsrs	r3, r3, #2
 8011dc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00e      	beq.n	8011de8 <osThreadNew+0xa8>
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	2bbb      	cmp	r3, #187	; 0xbb
 8011dd0:	d90a      	bls.n	8011de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d006      	beq.n	8011de8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	695b      	ldr	r3, [r3, #20]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d002      	beq.n	8011de8 <osThreadNew+0xa8>
        mem = 1;
 8011de2:	2301      	movs	r3, #1
 8011de4:	61bb      	str	r3, [r7, #24]
 8011de6:	e010      	b.n	8011e0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d10c      	bne.n	8011e0a <osThreadNew+0xca>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d108      	bne.n	8011e0a <osThreadNew+0xca>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	691b      	ldr	r3, [r3, #16]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d104      	bne.n	8011e0a <osThreadNew+0xca>
          mem = 0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	61bb      	str	r3, [r7, #24]
 8011e04:	e001      	b.n	8011e0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011e06:	2300      	movs	r3, #0
 8011e08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d110      	bne.n	8011e32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011e18:	9202      	str	r2, [sp, #8]
 8011e1a:	9301      	str	r3, [sp, #4]
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	6a3a      	ldr	r2, [r7, #32]
 8011e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f001 fcd2 	bl	80137d0 <xTaskCreateStatic>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	613b      	str	r3, [r7, #16]
 8011e30:	e013      	b.n	8011e5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d110      	bne.n	8011e5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011e38:	6a3b      	ldr	r3, [r7, #32]
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	f107 0310 	add.w	r3, r7, #16
 8011e40:	9301      	str	r3, [sp, #4]
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	9300      	str	r3, [sp, #0]
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f001 fd1d 	bl	801388a <xTaskCreate>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d001      	beq.n	8011e5a <osThreadNew+0x11a>
            hTask = NULL;
 8011e56:	2300      	movs	r3, #0
 8011e58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011e5a:	693b      	ldr	r3, [r7, #16]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3728      	adds	r7, #40	; 0x28
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b088      	sub	sp, #32
 8011e68:	af02      	add	r7, sp, #8
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d002      	beq.n	8011e7e <osThreadFlagsSet+0x1a>
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	da03      	bge.n	8011e86 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8011e7e:	f06f 0303 	mvn.w	r3, #3
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	e035      	b.n	8011ef2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8011e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e8c:	f3ef 8305 	mrs	r3, IPSR
 8011e90:	613b      	str	r3, [r7, #16]
  return(result);
 8011e92:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d01f      	beq.n	8011ed8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8011e9c:	f107 0308 	add.w	r3, r7, #8
 8011ea0:	9300      	str	r3, [sp, #0]
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	6839      	ldr	r1, [r7, #0]
 8011ea8:	6978      	ldr	r0, [r7, #20]
 8011eaa:	f002 fd81 	bl	80149b0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8011eae:	f107 030c 	add.w	r3, r7, #12
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	9200      	str	r2, [sp, #0]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	2100      	movs	r1, #0
 8011eba:	6978      	ldr	r0, [r7, #20]
 8011ebc:	f002 fd78 	bl	80149b0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d015      	beq.n	8011ef2 <osThreadFlagsSet+0x8e>
 8011ec6:	4b0d      	ldr	r3, [pc, #52]	; (8011efc <osThreadFlagsSet+0x98>)
 8011ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ecc:	601a      	str	r2, [r3, #0]
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	f3bf 8f6f 	isb	sy
 8011ed6:	e00c      	b.n	8011ef2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8011ed8:	2300      	movs	r3, #0
 8011eda:	2201      	movs	r2, #1
 8011edc:	6839      	ldr	r1, [r7, #0]
 8011ede:	6978      	ldr	r0, [r7, #20]
 8011ee0:	f002 fca8 	bl	8014834 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8011ee4:	f107 030c 	add.w	r3, r7, #12
 8011ee8:	2200      	movs	r2, #0
 8011eea:	2100      	movs	r1, #0
 8011eec:	6978      	ldr	r0, [r7, #20]
 8011eee:	f002 fca1 	bl	8014834 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	e000ed04 	.word	0xe000ed04

08011f00 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b08c      	sub	sp, #48	; 0x30
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f0c:	f3ef 8305 	mrs	r3, IPSR
 8011f10:	617b      	str	r3, [r7, #20]
  return(result);
 8011f12:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d003      	beq.n	8011f20 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8011f18:	f06f 0305 	mvn.w	r3, #5
 8011f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f1e:	e06b      	b.n	8011ff8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	da03      	bge.n	8011f2e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8011f26:	f06f 0303 	mvn.w	r3, #3
 8011f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f2c:	e064      	b.n	8011ff8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	f003 0302 	and.w	r3, r3, #2
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d002      	beq.n	8011f3e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f3c:	e001      	b.n	8011f42 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8011f42:	2300      	movs	r3, #0
 8011f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8011f4a:	f001 ff49 	bl	8013de0 <xTaskGetTickCount>
 8011f4e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8011f50:	f107 0210 	add.w	r2, r7, #16
 8011f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f58:	2000      	movs	r0, #0
 8011f5a:	f002 fc0b 	bl	8014774 <xTaskNotifyWait>
 8011f5e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d137      	bne.n	8011fd6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8011f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	4013      	ands	r3, r2
 8011f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f72:	4313      	orrs	r3, r2
 8011f74:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	f003 0301 	and.w	r3, r3, #1
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d00c      	beq.n	8011f9a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8011f80:	68fa      	ldr	r2, [r7, #12]
 8011f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f84:	4013      	ands	r3, r2
 8011f86:	68fa      	ldr	r2, [r7, #12]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d032      	beq.n	8011ff2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10f      	bne.n	8011fb2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8011f92:	f06f 0302 	mvn.w	r3, #2
 8011f96:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8011f98:	e02e      	b.n	8011ff8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9e:	4013      	ands	r3, r2
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d128      	bne.n	8011ff6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d103      	bne.n	8011fb2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8011faa:	f06f 0302 	mvn.w	r3, #2
 8011fae:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8011fb0:	e022      	b.n	8011ff8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8011fb2:	f001 ff15 	bl	8013de0 <xTaskGetTickCount>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8011fbe:	69ba      	ldr	r2, [r7, #24]
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d902      	bls.n	8011fcc <osThreadFlagsWait+0xcc>
          tout  = 0;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fca:	e00e      	b.n	8011fea <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8011fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	1ad3      	subs	r3, r2, r3
 8011fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8011fd4:	e009      	b.n	8011fea <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d103      	bne.n	8011fe4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8011fdc:	f06f 0302 	mvn.w	r3, #2
 8011fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fe2:	e002      	b.n	8011fea <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8011fe4:	f06f 0301 	mvn.w	r3, #1
 8011fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d1af      	bne.n	8011f50 <osThreadFlagsWait+0x50>
 8011ff0:	e002      	b.n	8011ff8 <osThreadFlagsWait+0xf8>
            break;
 8011ff2:	bf00      	nop
 8011ff4:	e000      	b.n	8011ff8 <osThreadFlagsWait+0xf8>
            break;
 8011ff6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3730      	adds	r7, #48	; 0x30
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012002:	b580      	push	{r7, lr}
 8012004:	b084      	sub	sp, #16
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801200a:	f3ef 8305 	mrs	r3, IPSR
 801200e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012010:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012012:	2b00      	cmp	r3, #0
 8012014:	d003      	beq.n	801201e <osDelay+0x1c>
    stat = osErrorISR;
 8012016:	f06f 0305 	mvn.w	r3, #5
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	e007      	b.n	801202e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801201e:	2300      	movs	r3, #0
 8012020:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d002      	beq.n	801202e <osDelay+0x2c>
      vTaskDelay(ticks);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f001 fd89 	bl	8013b40 <vTaskDelay>
    }
  }

  return (stat);
 801202e:	68fb      	ldr	r3, [r7, #12]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f003 f9d5 	bl	80153f0 <pvTimerGetTimerID>
 8012046:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d005      	beq.n	801205a <TimerCallback+0x22>
    callb->func (callb->arg);
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	68fa      	ldr	r2, [r7, #12]
 8012054:	6852      	ldr	r2, [r2, #4]
 8012056:	4610      	mov	r0, r2
 8012058:	4798      	blx	r3
  }
}
 801205a:	bf00      	nop
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8012064:	b580      	push	{r7, lr}
 8012066:	b08c      	sub	sp, #48	; 0x30
 8012068:	af02      	add	r7, sp, #8
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	607a      	str	r2, [r7, #4]
 801206e:	603b      	str	r3, [r7, #0]
 8012070:	460b      	mov	r3, r1
 8012072:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8012074:	2300      	movs	r3, #0
 8012076:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012078:	f3ef 8305 	mrs	r3, IPSR
 801207c:	613b      	str	r3, [r7, #16]
  return(result);
 801207e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8012080:	2b00      	cmp	r3, #0
 8012082:	d163      	bne.n	801214c <osTimerNew+0xe8>
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d060      	beq.n	801214c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 801208a:	2008      	movs	r0, #8
 801208c:	f003 fc1c 	bl	80158c8 <pvPortMalloc>
 8012090:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d059      	beq.n	801214c <osTimerNew+0xe8>
      callb->func = func;
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	68fa      	ldr	r2, [r7, #12]
 801209c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80120a4:	7afb      	ldrb	r3, [r7, #11]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d102      	bne.n	80120b0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80120aa:	2300      	movs	r3, #0
 80120ac:	61fb      	str	r3, [r7, #28]
 80120ae:	e001      	b.n	80120b4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80120b0:	2301      	movs	r3, #1
 80120b2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80120b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120b8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d01c      	beq.n	80120fe <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <osTimerNew+0x6e>
          name = attr->name;
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d006      	beq.n	80120e8 <osTimerNew+0x84>
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	2b2b      	cmp	r3, #43	; 0x2b
 80120e0:	d902      	bls.n	80120e8 <osTimerNew+0x84>
          mem = 1;
 80120e2:	2301      	movs	r3, #1
 80120e4:	61bb      	str	r3, [r7, #24]
 80120e6:	e00c      	b.n	8012102 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	689b      	ldr	r3, [r3, #8]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d108      	bne.n	8012102 <osTimerNew+0x9e>
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d104      	bne.n	8012102 <osTimerNew+0x9e>
            mem = 0;
 80120f8:	2300      	movs	r3, #0
 80120fa:	61bb      	str	r3, [r7, #24]
 80120fc:	e001      	b.n	8012102 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	2b01      	cmp	r3, #1
 8012106:	d10c      	bne.n	8012122 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	689b      	ldr	r3, [r3, #8]
 801210c:	9301      	str	r3, [sp, #4]
 801210e:	4b12      	ldr	r3, [pc, #72]	; (8012158 <osTimerNew+0xf4>)
 8012110:	9300      	str	r3, [sp, #0]
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	69fa      	ldr	r2, [r7, #28]
 8012116:	2101      	movs	r1, #1
 8012118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801211a:	f002 fdea 	bl	8014cf2 <xTimerCreateStatic>
 801211e:	6238      	str	r0, [r7, #32]
 8012120:	e00b      	b.n	801213a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d108      	bne.n	801213a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8012128:	4b0b      	ldr	r3, [pc, #44]	; (8012158 <osTimerNew+0xf4>)
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	69fa      	ldr	r2, [r7, #28]
 8012130:	2101      	movs	r1, #1
 8012132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012134:	f002 fdbc 	bl	8014cb0 <xTimerCreate>
 8012138:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 801213a:	6a3b      	ldr	r3, [r7, #32]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d105      	bne.n	801214c <osTimerNew+0xe8>
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d002      	beq.n	801214c <osTimerNew+0xe8>
        vPortFree (callb);
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	f003 fc8a 	bl	8015a60 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801214c:	6a3b      	ldr	r3, [r7, #32]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3728      	adds	r7, #40	; 0x28
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	08012039 	.word	0x08012039

0801215c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 801215c:	b580      	push	{r7, lr}
 801215e:	b088      	sub	sp, #32
 8012160:	af02      	add	r7, sp, #8
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801216a:	f3ef 8305 	mrs	r3, IPSR
 801216e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012170:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012172:	2b00      	cmp	r3, #0
 8012174:	d003      	beq.n	801217e <osTimerStart+0x22>
    stat = osErrorISR;
 8012176:	f06f 0305 	mvn.w	r3, #5
 801217a:	617b      	str	r3, [r7, #20]
 801217c:	e017      	b.n	80121ae <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d103      	bne.n	801218c <osTimerStart+0x30>
    stat = osErrorParameter;
 8012184:	f06f 0303 	mvn.w	r3, #3
 8012188:	617b      	str	r3, [r7, #20]
 801218a:	e010      	b.n	80121ae <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 801218c:	2300      	movs	r3, #0
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	2300      	movs	r3, #0
 8012192:	683a      	ldr	r2, [r7, #0]
 8012194:	2104      	movs	r1, #4
 8012196:	6938      	ldr	r0, [r7, #16]
 8012198:	f002 fe24 	bl	8014de4 <xTimerGenericCommand>
 801219c:	4603      	mov	r3, r0
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d102      	bne.n	80121a8 <osTimerStart+0x4c>
      stat = osOK;
 80121a2:	2300      	movs	r3, #0
 80121a4:	617b      	str	r3, [r7, #20]
 80121a6:	e002      	b.n	80121ae <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80121a8:	f06f 0302 	mvn.w	r3, #2
 80121ac:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80121ae:	697b      	ldr	r3, [r7, #20]
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3718      	adds	r7, #24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b088      	sub	sp, #32
 80121bc:	af02      	add	r7, sp, #8
 80121be:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121c4:	f3ef 8305 	mrs	r3, IPSR
 80121c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80121ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d003      	beq.n	80121d8 <osTimerDelete+0x20>
    stat = osErrorISR;
 80121d0:	f06f 0305 	mvn.w	r3, #5
 80121d4:	617b      	str	r3, [r7, #20]
 80121d6:	e01e      	b.n	8012216 <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d103      	bne.n	80121e6 <osTimerDelete+0x2e>
    stat = osErrorParameter;
 80121de:	f06f 0303 	mvn.w	r3, #3
 80121e2:	617b      	str	r3, [r7, #20]
 80121e4:	e017      	b.n	8012216 <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80121e6:	6938      	ldr	r0, [r7, #16]
 80121e8:	f003 f902 	bl	80153f0 <pvTimerGetTimerID>
 80121ec:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 80121ee:	2300      	movs	r3, #0
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	2300      	movs	r3, #0
 80121f4:	2200      	movs	r2, #0
 80121f6:	2105      	movs	r1, #5
 80121f8:	6938      	ldr	r0, [r7, #16]
 80121fa:	f002 fdf3 	bl	8014de4 <xTimerGenericCommand>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b01      	cmp	r3, #1
 8012202:	d105      	bne.n	8012210 <osTimerDelete+0x58>
      vPortFree (callb);
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f003 fc2b 	bl	8015a60 <vPortFree>
      stat = osOK;
 801220a:	2300      	movs	r3, #0
 801220c:	617b      	str	r3, [r7, #20]
 801220e:	e002      	b.n	8012216 <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 8012210:	f06f 0302 	mvn.w	r3, #2
 8012214:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8012216:	697b      	ldr	r3, [r7, #20]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3718      	adds	r7, #24
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8012220:	b580      	push	{r7, lr}
 8012222:	b088      	sub	sp, #32
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8012228:	2300      	movs	r3, #0
 801222a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801222c:	f3ef 8305 	mrs	r3, IPSR
 8012230:	60bb      	str	r3, [r7, #8]
  return(result);
 8012232:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8012234:	2b00      	cmp	r3, #0
 8012236:	d174      	bne.n	8012322 <osMutexNew+0x102>
    if (attr != NULL) {
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d003      	beq.n	8012246 <osMutexNew+0x26>
      type = attr->attr_bits;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	61bb      	str	r3, [r7, #24]
 8012244:	e001      	b.n	801224a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8012246:	2300      	movs	r3, #0
 8012248:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	f003 0301 	and.w	r3, r3, #1
 8012250:	2b00      	cmp	r3, #0
 8012252:	d002      	beq.n	801225a <osMutexNew+0x3a>
      rmtx = 1U;
 8012254:	2301      	movs	r3, #1
 8012256:	617b      	str	r3, [r7, #20]
 8012258:	e001      	b.n	801225e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801225a:	2300      	movs	r3, #0
 801225c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	f003 0308 	and.w	r3, r3, #8
 8012264:	2b00      	cmp	r3, #0
 8012266:	d15c      	bne.n	8012322 <osMutexNew+0x102>
      mem = -1;
 8012268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801226c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d015      	beq.n	80122a0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d006      	beq.n	801228a <osMutexNew+0x6a>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	2b4f      	cmp	r3, #79	; 0x4f
 8012282:	d902      	bls.n	801228a <osMutexNew+0x6a>
          mem = 1;
 8012284:	2301      	movs	r3, #1
 8012286:	613b      	str	r3, [r7, #16]
 8012288:	e00c      	b.n	80122a4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	689b      	ldr	r3, [r3, #8]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d108      	bne.n	80122a4 <osMutexNew+0x84>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d104      	bne.n	80122a4 <osMutexNew+0x84>
            mem = 0;
 801229a:	2300      	movs	r3, #0
 801229c:	613b      	str	r3, [r7, #16]
 801229e:	e001      	b.n	80122a4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80122a0:	2300      	movs	r3, #0
 80122a2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	2b01      	cmp	r3, #1
 80122a8:	d112      	bne.n	80122d0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d007      	beq.n	80122c0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	689b      	ldr	r3, [r3, #8]
 80122b4:	4619      	mov	r1, r3
 80122b6:	2004      	movs	r0, #4
 80122b8:	f000 fc57 	bl	8012b6a <xQueueCreateMutexStatic>
 80122bc:	61f8      	str	r0, [r7, #28]
 80122be:	e016      	b.n	80122ee <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	4619      	mov	r1, r3
 80122c6:	2001      	movs	r0, #1
 80122c8:	f000 fc4f 	bl	8012b6a <xQueueCreateMutexStatic>
 80122cc:	61f8      	str	r0, [r7, #28]
 80122ce:	e00e      	b.n	80122ee <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d10b      	bne.n	80122ee <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d004      	beq.n	80122e6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80122dc:	2004      	movs	r0, #4
 80122de:	f000 fc2c 	bl	8012b3a <xQueueCreateMutex>
 80122e2:	61f8      	str	r0, [r7, #28]
 80122e4:	e003      	b.n	80122ee <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80122e6:	2001      	movs	r0, #1
 80122e8:	f000 fc27 	bl	8012b3a <xQueueCreateMutex>
 80122ec:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d00c      	beq.n	801230e <osMutexNew+0xee>
        if (attr != NULL) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <osMutexNew+0xe2>
          name = attr->name;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	60fb      	str	r3, [r7, #12]
 8012300:	e001      	b.n	8012306 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8012302:	2300      	movs	r3, #0
 8012304:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8012306:	68f9      	ldr	r1, [r7, #12]
 8012308:	69f8      	ldr	r0, [r7, #28]
 801230a:	f001 fa03 	bl	8013714 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d006      	beq.n	8012322 <osMutexNew+0x102>
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d003      	beq.n	8012322 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	f043 0301 	orr.w	r3, r3, #1
 8012320:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8012322:	69fb      	ldr	r3, [r7, #28]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801233a:	2300      	movs	r3, #0
 801233c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d103      	bne.n	801234c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012344:	f06f 0303 	mvn.w	r3, #3
 8012348:	617b      	str	r3, [r7, #20]
 801234a:	e039      	b.n	80123c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801234c:	f3ef 8305 	mrs	r3, IPSR
 8012350:	60fb      	str	r3, [r7, #12]
  return(result);
 8012352:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012354:	2b00      	cmp	r3, #0
 8012356:	d022      	beq.n	801239e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d003      	beq.n	8012366 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801235e:	f06f 0303 	mvn.w	r3, #3
 8012362:	617b      	str	r3, [r7, #20]
 8012364:	e02c      	b.n	80123c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8012366:	2300      	movs	r3, #0
 8012368:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801236a:	f107 0308 	add.w	r3, r7, #8
 801236e:	461a      	mov	r2, r3
 8012370:	2100      	movs	r1, #0
 8012372:	6938      	ldr	r0, [r7, #16]
 8012374:	f001 f826 	bl	80133c4 <xQueueReceiveFromISR>
 8012378:	4603      	mov	r3, r0
 801237a:	2b01      	cmp	r3, #1
 801237c:	d003      	beq.n	8012386 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801237e:	f06f 0302 	mvn.w	r3, #2
 8012382:	617b      	str	r3, [r7, #20]
 8012384:	e01c      	b.n	80123c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d019      	beq.n	80123c0 <osSemaphoreAcquire+0x94>
 801238c:	4b0f      	ldr	r3, [pc, #60]	; (80123cc <osSemaphoreAcquire+0xa0>)
 801238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	f3bf 8f6f 	isb	sy
 801239c:	e010      	b.n	80123c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801239e:	6839      	ldr	r1, [r7, #0]
 80123a0:	6938      	ldr	r0, [r7, #16]
 80123a2:	f000 ff03 	bl	80131ac <xQueueSemaphoreTake>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d009      	beq.n	80123c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d003      	beq.n	80123ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80123b2:	f06f 0301 	mvn.w	r3, #1
 80123b6:	617b      	str	r3, [r7, #20]
 80123b8:	e002      	b.n	80123c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80123ba:	f06f 0302 	mvn.w	r3, #2
 80123be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80123c0:	697b      	ldr	r3, [r7, #20]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3718      	adds	r7, #24
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	e000ed04 	.word	0xe000ed04

080123d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b086      	sub	sp, #24
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80123dc:	2300      	movs	r3, #0
 80123de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d103      	bne.n	80123ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80123e6:	f06f 0303 	mvn.w	r3, #3
 80123ea:	617b      	str	r3, [r7, #20]
 80123ec:	e02c      	b.n	8012448 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123ee:	f3ef 8305 	mrs	r3, IPSR
 80123f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80123f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d01a      	beq.n	8012430 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80123fa:	2300      	movs	r3, #0
 80123fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80123fe:	f107 0308 	add.w	r3, r7, #8
 8012402:	4619      	mov	r1, r3
 8012404:	6938      	ldr	r0, [r7, #16]
 8012406:	f000 fd64 	bl	8012ed2 <xQueueGiveFromISR>
 801240a:	4603      	mov	r3, r0
 801240c:	2b01      	cmp	r3, #1
 801240e:	d003      	beq.n	8012418 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012410:	f06f 0302 	mvn.w	r3, #2
 8012414:	617b      	str	r3, [r7, #20]
 8012416:	e017      	b.n	8012448 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d014      	beq.n	8012448 <osSemaphoreRelease+0x78>
 801241e:	4b0d      	ldr	r3, [pc, #52]	; (8012454 <osSemaphoreRelease+0x84>)
 8012420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012424:	601a      	str	r2, [r3, #0]
 8012426:	f3bf 8f4f 	dsb	sy
 801242a:	f3bf 8f6f 	isb	sy
 801242e:	e00b      	b.n	8012448 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012430:	2300      	movs	r3, #0
 8012432:	2200      	movs	r2, #0
 8012434:	2100      	movs	r1, #0
 8012436:	6938      	ldr	r0, [r7, #16]
 8012438:	f000 fbb2 	bl	8012ba0 <xQueueGenericSend>
 801243c:	4603      	mov	r3, r0
 801243e:	2b01      	cmp	r3, #1
 8012440:	d002      	beq.n	8012448 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012442:	f06f 0302 	mvn.w	r3, #2
 8012446:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012448:	697b      	ldr	r3, [r7, #20]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3718      	adds	r7, #24
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	e000ed04 	.word	0xe000ed04

08012458 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012458:	b580      	push	{r7, lr}
 801245a:	b08a      	sub	sp, #40	; 0x28
 801245c:	af02      	add	r7, sp, #8
 801245e:	60f8      	str	r0, [r7, #12]
 8012460:	60b9      	str	r1, [r7, #8]
 8012462:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012464:	2300      	movs	r3, #0
 8012466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012468:	f3ef 8305 	mrs	r3, IPSR
 801246c:	613b      	str	r3, [r7, #16]
  return(result);
 801246e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012470:	2b00      	cmp	r3, #0
 8012472:	d15f      	bne.n	8012534 <osMessageQueueNew+0xdc>
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d05c      	beq.n	8012534 <osMessageQueueNew+0xdc>
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d059      	beq.n	8012534 <osMessageQueueNew+0xdc>
    mem = -1;
 8012480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012484:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d029      	beq.n	80124e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	689b      	ldr	r3, [r3, #8]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d012      	beq.n	80124ba <osMessageQueueNew+0x62>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	2b4f      	cmp	r3, #79	; 0x4f
 801249a:	d90e      	bls.n	80124ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00a      	beq.n	80124ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	695a      	ldr	r2, [r3, #20]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	68b9      	ldr	r1, [r7, #8]
 80124ac:	fb01 f303 	mul.w	r3, r1, r3
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d302      	bcc.n	80124ba <osMessageQueueNew+0x62>
        mem = 1;
 80124b4:	2301      	movs	r3, #1
 80124b6:	61bb      	str	r3, [r7, #24]
 80124b8:	e014      	b.n	80124e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d110      	bne.n	80124e4 <osMessageQueueNew+0x8c>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d10c      	bne.n	80124e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d108      	bne.n	80124e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	695b      	ldr	r3, [r3, #20]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d104      	bne.n	80124e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	61bb      	str	r3, [r7, #24]
 80124de:	e001      	b.n	80124e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80124e0:	2300      	movs	r3, #0
 80124e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d10b      	bne.n	8012502 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	691a      	ldr	r2, [r3, #16]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	2100      	movs	r1, #0
 80124f4:	9100      	str	r1, [sp, #0]
 80124f6:	68b9      	ldr	r1, [r7, #8]
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	f000 fa2f 	bl	801295c <xQueueGenericCreateStatic>
 80124fe:	61f8      	str	r0, [r7, #28]
 8012500:	e008      	b.n	8012514 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d105      	bne.n	8012514 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012508:	2200      	movs	r2, #0
 801250a:	68b9      	ldr	r1, [r7, #8]
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f000 fa9d 	bl	8012a4c <xQueueGenericCreate>
 8012512:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d00c      	beq.n	8012534 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d003      	beq.n	8012528 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	617b      	str	r3, [r7, #20]
 8012526:	e001      	b.n	801252c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012528:	2300      	movs	r3, #0
 801252a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801252c:	6979      	ldr	r1, [r7, #20]
 801252e:	69f8      	ldr	r0, [r7, #28]
 8012530:	f001 f8f0 	bl	8013714 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012534:	69fb      	ldr	r3, [r7, #28]
}
 8012536:	4618      	mov	r0, r3
 8012538:	3720      	adds	r7, #32
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
	...

08012540 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012540:	b580      	push	{r7, lr}
 8012542:	b088      	sub	sp, #32
 8012544:	af00      	add	r7, sp, #0
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	603b      	str	r3, [r7, #0]
 801254c:	4613      	mov	r3, r2
 801254e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012554:	2300      	movs	r3, #0
 8012556:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012558:	f3ef 8305 	mrs	r3, IPSR
 801255c:	617b      	str	r3, [r7, #20]
  return(result);
 801255e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012560:	2b00      	cmp	r3, #0
 8012562:	d028      	beq.n	80125b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d005      	beq.n	8012576 <osMessageQueuePut+0x36>
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d002      	beq.n	8012576 <osMessageQueuePut+0x36>
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d003      	beq.n	801257e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012576:	f06f 0303 	mvn.w	r3, #3
 801257a:	61fb      	str	r3, [r7, #28]
 801257c:	e038      	b.n	80125f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801257e:	2300      	movs	r3, #0
 8012580:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012582:	f107 0210 	add.w	r2, r7, #16
 8012586:	2300      	movs	r3, #0
 8012588:	68b9      	ldr	r1, [r7, #8]
 801258a:	69b8      	ldr	r0, [r7, #24]
 801258c:	f000 fc06 	bl	8012d9c <xQueueGenericSendFromISR>
 8012590:	4603      	mov	r3, r0
 8012592:	2b01      	cmp	r3, #1
 8012594:	d003      	beq.n	801259e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012596:	f06f 0302 	mvn.w	r3, #2
 801259a:	61fb      	str	r3, [r7, #28]
 801259c:	e028      	b.n	80125f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d025      	beq.n	80125f0 <osMessageQueuePut+0xb0>
 80125a4:	4b15      	ldr	r3, [pc, #84]	; (80125fc <osMessageQueuePut+0xbc>)
 80125a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	f3bf 8f6f 	isb	sy
 80125b4:	e01c      	b.n	80125f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80125b6:	69bb      	ldr	r3, [r7, #24]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d002      	beq.n	80125c2 <osMessageQueuePut+0x82>
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d103      	bne.n	80125ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80125c2:	f06f 0303 	mvn.w	r3, #3
 80125c6:	61fb      	str	r3, [r7, #28]
 80125c8:	e012      	b.n	80125f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80125ca:	2300      	movs	r3, #0
 80125cc:	683a      	ldr	r2, [r7, #0]
 80125ce:	68b9      	ldr	r1, [r7, #8]
 80125d0:	69b8      	ldr	r0, [r7, #24]
 80125d2:	f000 fae5 	bl	8012ba0 <xQueueGenericSend>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d009      	beq.n	80125f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d003      	beq.n	80125ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80125e2:	f06f 0301 	mvn.w	r3, #1
 80125e6:	61fb      	str	r3, [r7, #28]
 80125e8:	e002      	b.n	80125f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80125ea:	f06f 0302 	mvn.w	r3, #2
 80125ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80125f0:	69fb      	ldr	r3, [r7, #28]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3720      	adds	r7, #32
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	e000ed04 	.word	0xe000ed04

08012600 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012600:	b580      	push	{r7, lr}
 8012602:	b088      	sub	sp, #32
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012612:	2300      	movs	r3, #0
 8012614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012616:	f3ef 8305 	mrs	r3, IPSR
 801261a:	617b      	str	r3, [r7, #20]
  return(result);
 801261c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801261e:	2b00      	cmp	r3, #0
 8012620:	d028      	beq.n	8012674 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d005      	beq.n	8012634 <osMessageQueueGet+0x34>
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d002      	beq.n	8012634 <osMessageQueueGet+0x34>
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d003      	beq.n	801263c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012634:	f06f 0303 	mvn.w	r3, #3
 8012638:	61fb      	str	r3, [r7, #28]
 801263a:	e037      	b.n	80126ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801263c:	2300      	movs	r3, #0
 801263e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012640:	f107 0310 	add.w	r3, r7, #16
 8012644:	461a      	mov	r2, r3
 8012646:	68b9      	ldr	r1, [r7, #8]
 8012648:	69b8      	ldr	r0, [r7, #24]
 801264a:	f000 febb 	bl	80133c4 <xQueueReceiveFromISR>
 801264e:	4603      	mov	r3, r0
 8012650:	2b01      	cmp	r3, #1
 8012652:	d003      	beq.n	801265c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012654:	f06f 0302 	mvn.w	r3, #2
 8012658:	61fb      	str	r3, [r7, #28]
 801265a:	e027      	b.n	80126ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d024      	beq.n	80126ac <osMessageQueueGet+0xac>
 8012662:	4b15      	ldr	r3, [pc, #84]	; (80126b8 <osMessageQueueGet+0xb8>)
 8012664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012668:	601a      	str	r2, [r3, #0]
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	e01b      	b.n	80126ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d002      	beq.n	8012680 <osMessageQueueGet+0x80>
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d103      	bne.n	8012688 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012680:	f06f 0303 	mvn.w	r3, #3
 8012684:	61fb      	str	r3, [r7, #28]
 8012686:	e011      	b.n	80126ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012688:	683a      	ldr	r2, [r7, #0]
 801268a:	68b9      	ldr	r1, [r7, #8]
 801268c:	69b8      	ldr	r0, [r7, #24]
 801268e:	f000 fcad 	bl	8012fec <xQueueReceive>
 8012692:	4603      	mov	r3, r0
 8012694:	2b01      	cmp	r3, #1
 8012696:	d009      	beq.n	80126ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d003      	beq.n	80126a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801269e:	f06f 0301 	mvn.w	r3, #1
 80126a2:	61fb      	str	r3, [r7, #28]
 80126a4:	e002      	b.n	80126ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80126a6:	f06f 0302 	mvn.w	r3, #2
 80126aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80126ac:	69fb      	ldr	r3, [r7, #28]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3720      	adds	r7, #32
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	e000ed04 	.word	0xe000ed04

080126bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	4a07      	ldr	r2, [pc, #28]	; (80126e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80126cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	4a06      	ldr	r2, [pc, #24]	; (80126ec <vApplicationGetIdleTaskMemory+0x30>)
 80126d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2280      	movs	r2, #128	; 0x80
 80126d8:	601a      	str	r2, [r3, #0]
}
 80126da:	bf00      	nop
 80126dc:	3714      	adds	r7, #20
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr
 80126e6:	bf00      	nop
 80126e8:	20000e54 	.word	0x20000e54
 80126ec:	20000f10 	.word	0x20000f10

080126f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80126f0:	b480      	push	{r7}
 80126f2:	b085      	sub	sp, #20
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	4a07      	ldr	r2, [pc, #28]	; (801271c <vApplicationGetTimerTaskMemory+0x2c>)
 8012700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	4a06      	ldr	r2, [pc, #24]	; (8012720 <vApplicationGetTimerTaskMemory+0x30>)
 8012706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801270e:	601a      	str	r2, [r3, #0]
}
 8012710:	bf00      	nop
 8012712:	3714      	adds	r7, #20
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr
 801271c:	20001110 	.word	0x20001110
 8012720:	200011cc 	.word	0x200011cc

08012724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f103 0208 	add.w	r2, r3, #8
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801273c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f103 0208 	add.w	r2, r3, #8
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f103 0208 	add.w	r2, r3, #8
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2200      	movs	r2, #0
 8012756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012758:	bf00      	nop
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2200      	movs	r2, #0
 8012770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012772:	bf00      	nop
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr

0801277e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801277e:	b480      	push	{r7}
 8012780:	b085      	sub	sp, #20
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	689a      	ldr	r2, [r3, #8]
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	683a      	ldr	r2, [r7, #0]
 80127a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	683a      	ldr	r2, [r7, #0]
 80127a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	1c5a      	adds	r2, r3, #1
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	601a      	str	r2, [r3, #0]
}
 80127ba:	bf00      	nop
 80127bc:	3714      	adds	r7, #20
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr

080127c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80127c6:	b480      	push	{r7}
 80127c8:	b085      	sub	sp, #20
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
 80127ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127dc:	d103      	bne.n	80127e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	691b      	ldr	r3, [r3, #16]
 80127e2:	60fb      	str	r3, [r7, #12]
 80127e4:	e00c      	b.n	8012800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	3308      	adds	r3, #8
 80127ea:	60fb      	str	r3, [r7, #12]
 80127ec:	e002      	b.n	80127f4 <vListInsert+0x2e>
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	60fb      	str	r3, [r7, #12]
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d2f6      	bcs.n	80127ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	683a      	ldr	r2, [r7, #0]
 801280e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	68fa      	ldr	r2, [r7, #12]
 8012814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	683a      	ldr	r2, [r7, #0]
 801281a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	1c5a      	adds	r2, r3, #1
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	601a      	str	r2, [r3, #0]
}
 801282c:	bf00      	nop
 801282e:	3714      	adds	r7, #20
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012838:	b480      	push	{r7}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	691b      	ldr	r3, [r3, #16]
 8012844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	6892      	ldr	r2, [r2, #8]
 801284e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	689b      	ldr	r3, [r3, #8]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	6852      	ldr	r2, [r2, #4]
 8012858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	429a      	cmp	r2, r3
 8012862:	d103      	bne.n	801286c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	689a      	ldr	r2, [r3, #8]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2200      	movs	r2, #0
 8012870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	1e5a      	subs	r2, r3, #1
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
}
 8012880:	4618      	mov	r0, r3
 8012882:	3714      	adds	r7, #20
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d10a      	bne.n	80128b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80128a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a4:	f383 8811 	msr	BASEPRI, r3
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	f3bf 8f4f 	dsb	sy
 80128b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80128b2:	bf00      	nop
 80128b4:	e7fe      	b.n	80128b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80128b6:	f002 fee5 	bl	8015684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128c2:	68f9      	ldr	r1, [r7, #12]
 80128c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80128c6:	fb01 f303 	mul.w	r3, r1, r3
 80128ca:	441a      	add	r2, r3
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2200      	movs	r2, #0
 80128d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128e6:	3b01      	subs	r3, #1
 80128e8:	68f9      	ldr	r1, [r7, #12]
 80128ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80128ec:	fb01 f303 	mul.w	r3, r1, r3
 80128f0:	441a      	add	r2, r3
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	22ff      	movs	r2, #255	; 0xff
 80128fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	22ff      	movs	r2, #255	; 0xff
 8012902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d114      	bne.n	8012936 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	691b      	ldr	r3, [r3, #16]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d01a      	beq.n	801294a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	3310      	adds	r3, #16
 8012918:	4618      	mov	r0, r3
 801291a:	f001 fbdf 	bl	80140dc <xTaskRemoveFromEventList>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d012      	beq.n	801294a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012924:	4b0c      	ldr	r3, [pc, #48]	; (8012958 <xQueueGenericReset+0xcc>)
 8012926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801292a:	601a      	str	r2, [r3, #0]
 801292c:	f3bf 8f4f 	dsb	sy
 8012930:	f3bf 8f6f 	isb	sy
 8012934:	e009      	b.n	801294a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	3310      	adds	r3, #16
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff fef2 	bl	8012724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	3324      	adds	r3, #36	; 0x24
 8012944:	4618      	mov	r0, r3
 8012946:	f7ff feed 	bl	8012724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801294a:	f002 fecb 	bl	80156e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801294e:	2301      	movs	r3, #1
}
 8012950:	4618      	mov	r0, r3
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	e000ed04 	.word	0xe000ed04

0801295c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801295c:	b580      	push	{r7, lr}
 801295e:	b08e      	sub	sp, #56	; 0x38
 8012960:	af02      	add	r7, sp, #8
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	607a      	str	r2, [r7, #4]
 8012968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10a      	bne.n	8012986 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012974:	f383 8811 	msr	BASEPRI, r3
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	f3bf 8f4f 	dsb	sy
 8012980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012982:	bf00      	nop
 8012984:	e7fe      	b.n	8012984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d10a      	bne.n	80129a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012990:	f383 8811 	msr	BASEPRI, r3
 8012994:	f3bf 8f6f 	isb	sy
 8012998:	f3bf 8f4f 	dsb	sy
 801299c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801299e:	bf00      	nop
 80129a0:	e7fe      	b.n	80129a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d002      	beq.n	80129ae <xQueueGenericCreateStatic+0x52>
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d001      	beq.n	80129b2 <xQueueGenericCreateStatic+0x56>
 80129ae:	2301      	movs	r3, #1
 80129b0:	e000      	b.n	80129b4 <xQueueGenericCreateStatic+0x58>
 80129b2:	2300      	movs	r3, #0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d10a      	bne.n	80129ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80129b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129bc:	f383 8811 	msr	BASEPRI, r3
 80129c0:	f3bf 8f6f 	isb	sy
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	623b      	str	r3, [r7, #32]
}
 80129ca:	bf00      	nop
 80129cc:	e7fe      	b.n	80129cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d102      	bne.n	80129da <xQueueGenericCreateStatic+0x7e>
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <xQueueGenericCreateStatic+0x82>
 80129da:	2301      	movs	r3, #1
 80129dc:	e000      	b.n	80129e0 <xQueueGenericCreateStatic+0x84>
 80129de:	2300      	movs	r3, #0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d10a      	bne.n	80129fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80129e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e8:	f383 8811 	msr	BASEPRI, r3
 80129ec:	f3bf 8f6f 	isb	sy
 80129f0:	f3bf 8f4f 	dsb	sy
 80129f4:	61fb      	str	r3, [r7, #28]
}
 80129f6:	bf00      	nop
 80129f8:	e7fe      	b.n	80129f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80129fa:	2350      	movs	r3, #80	; 0x50
 80129fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	2b50      	cmp	r3, #80	; 0x50
 8012a02:	d00a      	beq.n	8012a1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a08:	f383 8811 	msr	BASEPRI, r3
 8012a0c:	f3bf 8f6f 	isb	sy
 8012a10:	f3bf 8f4f 	dsb	sy
 8012a14:	61bb      	str	r3, [r7, #24]
}
 8012a16:	bf00      	nop
 8012a18:	e7fe      	b.n	8012a18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012a1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d00d      	beq.n	8012a42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	4613      	mov	r3, r2
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	68b9      	ldr	r1, [r7, #8]
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f000 f83f 	bl	8012ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3730      	adds	r7, #48	; 0x30
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b08a      	sub	sp, #40	; 0x28
 8012a50:	af02      	add	r7, sp, #8
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	4613      	mov	r3, r2
 8012a58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d10a      	bne.n	8012a76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a64:	f383 8811 	msr	BASEPRI, r3
 8012a68:	f3bf 8f6f 	isb	sy
 8012a6c:	f3bf 8f4f 	dsb	sy
 8012a70:	613b      	str	r3, [r7, #16]
}
 8012a72:	bf00      	nop
 8012a74:	e7fe      	b.n	8012a74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	fb02 f303 	mul.w	r3, r2, r3
 8012a7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	3350      	adds	r3, #80	; 0x50
 8012a84:	4618      	mov	r0, r3
 8012a86:	f002 ff1f 	bl	80158c8 <pvPortMalloc>
 8012a8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012a8c:	69bb      	ldr	r3, [r7, #24]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d011      	beq.n	8012ab6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	3350      	adds	r3, #80	; 0x50
 8012a9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012a9c:	69bb      	ldr	r3, [r7, #24]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012aa4:	79fa      	ldrb	r2, [r7, #7]
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	9300      	str	r3, [sp, #0]
 8012aaa:	4613      	mov	r3, r2
 8012aac:	697a      	ldr	r2, [r7, #20]
 8012aae:	68b9      	ldr	r1, [r7, #8]
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f000 f805 	bl	8012ac0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3720      	adds	r7, #32
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
 8012acc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d103      	bne.n	8012adc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012ad4:	69bb      	ldr	r3, [r7, #24]
 8012ad6:	69ba      	ldr	r2, [r7, #24]
 8012ad8:	601a      	str	r2, [r3, #0]
 8012ada:	e002      	b.n	8012ae2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012adc:	69bb      	ldr	r3, [r7, #24]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	68fa      	ldr	r2, [r7, #12]
 8012ae6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	68ba      	ldr	r2, [r7, #8]
 8012aec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012aee:	2101      	movs	r1, #1
 8012af0:	69b8      	ldr	r0, [r7, #24]
 8012af2:	f7ff fecb 	bl	801288c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	78fa      	ldrb	r2, [r7, #3]
 8012afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012afe:	bf00      	nop
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012b06:	b580      	push	{r7, lr}
 8012b08:	b082      	sub	sp, #8
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00e      	beq.n	8012b32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2200      	movs	r2, #0
 8012b18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2200      	movs	r2, #0
 8012b24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012b26:	2300      	movs	r3, #0
 8012b28:	2200      	movs	r2, #0
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f000 f837 	bl	8012ba0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012b32:	bf00      	nop
 8012b34:	3708      	adds	r7, #8
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}

08012b3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b086      	sub	sp, #24
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	4603      	mov	r3, r0
 8012b42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012b44:	2301      	movs	r3, #1
 8012b46:	617b      	str	r3, [r7, #20]
 8012b48:	2300      	movs	r3, #0
 8012b4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012b4c:	79fb      	ldrb	r3, [r7, #7]
 8012b4e:	461a      	mov	r2, r3
 8012b50:	6939      	ldr	r1, [r7, #16]
 8012b52:	6978      	ldr	r0, [r7, #20]
 8012b54:	f7ff ff7a 	bl	8012a4c <xQueueGenericCreate>
 8012b58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f7ff ffd3 	bl	8012b06 <prvInitialiseMutex>

		return xNewQueue;
 8012b60:	68fb      	ldr	r3, [r7, #12]
	}
 8012b62:	4618      	mov	r0, r3
 8012b64:	3718      	adds	r7, #24
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b088      	sub	sp, #32
 8012b6e:	af02      	add	r7, sp, #8
 8012b70:	4603      	mov	r3, r0
 8012b72:	6039      	str	r1, [r7, #0]
 8012b74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012b76:	2301      	movs	r3, #1
 8012b78:	617b      	str	r3, [r7, #20]
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012b7e:	79fb      	ldrb	r3, [r7, #7]
 8012b80:	9300      	str	r3, [sp, #0]
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	2200      	movs	r2, #0
 8012b86:	6939      	ldr	r1, [r7, #16]
 8012b88:	6978      	ldr	r0, [r7, #20]
 8012b8a:	f7ff fee7 	bl	801295c <xQueueGenericCreateStatic>
 8012b8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f7ff ffb8 	bl	8012b06 <prvInitialiseMutex>

		return xNewQueue;
 8012b96:	68fb      	ldr	r3, [r7, #12]
	}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3718      	adds	r7, #24
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b08e      	sub	sp, #56	; 0x38
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
 8012bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d10a      	bne.n	8012bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8012bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc0:	f383 8811 	msr	BASEPRI, r3
 8012bc4:	f3bf 8f6f 	isb	sy
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012bce:	bf00      	nop
 8012bd0:	e7fe      	b.n	8012bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d103      	bne.n	8012be0 <xQueueGenericSend+0x40>
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d101      	bne.n	8012be4 <xQueueGenericSend+0x44>
 8012be0:	2301      	movs	r3, #1
 8012be2:	e000      	b.n	8012be6 <xQueueGenericSend+0x46>
 8012be4:	2300      	movs	r3, #0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d10a      	bne.n	8012c00 <xQueueGenericSend+0x60>
	__asm volatile
 8012bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bee:	f383 8811 	msr	BASEPRI, r3
 8012bf2:	f3bf 8f6f 	isb	sy
 8012bf6:	f3bf 8f4f 	dsb	sy
 8012bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012bfc:	bf00      	nop
 8012bfe:	e7fe      	b.n	8012bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b02      	cmp	r3, #2
 8012c04:	d103      	bne.n	8012c0e <xQueueGenericSend+0x6e>
 8012c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d101      	bne.n	8012c12 <xQueueGenericSend+0x72>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e000      	b.n	8012c14 <xQueueGenericSend+0x74>
 8012c12:	2300      	movs	r3, #0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10a      	bne.n	8012c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8012c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1c:	f383 8811 	msr	BASEPRI, r3
 8012c20:	f3bf 8f6f 	isb	sy
 8012c24:	f3bf 8f4f 	dsb	sy
 8012c28:	623b      	str	r3, [r7, #32]
}
 8012c2a:	bf00      	nop
 8012c2c:	e7fe      	b.n	8012c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c2e:	f001 fc17 	bl	8014460 <xTaskGetSchedulerState>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d102      	bne.n	8012c3e <xQueueGenericSend+0x9e>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d101      	bne.n	8012c42 <xQueueGenericSend+0xa2>
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e000      	b.n	8012c44 <xQueueGenericSend+0xa4>
 8012c42:	2300      	movs	r3, #0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d10a      	bne.n	8012c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8012c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4c:	f383 8811 	msr	BASEPRI, r3
 8012c50:	f3bf 8f6f 	isb	sy
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	61fb      	str	r3, [r7, #28]
}
 8012c5a:	bf00      	nop
 8012c5c:	e7fe      	b.n	8012c5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c5e:	f002 fd11 	bl	8015684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d302      	bcc.n	8012c74 <xQueueGenericSend+0xd4>
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2b02      	cmp	r3, #2
 8012c72:	d129      	bne.n	8012cc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012c74:	683a      	ldr	r2, [r7, #0]
 8012c76:	68b9      	ldr	r1, [r7, #8]
 8012c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c7a:	f000 fc3b 	bl	80134f4 <prvCopyDataToQueue>
 8012c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d010      	beq.n	8012caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8a:	3324      	adds	r3, #36	; 0x24
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f001 fa25 	bl	80140dc <xTaskRemoveFromEventList>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d013      	beq.n	8012cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012c98:	4b3f      	ldr	r3, [pc, #252]	; (8012d98 <xQueueGenericSend+0x1f8>)
 8012c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c9e:	601a      	str	r2, [r3, #0]
 8012ca0:	f3bf 8f4f 	dsb	sy
 8012ca4:	f3bf 8f6f 	isb	sy
 8012ca8:	e00a      	b.n	8012cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d007      	beq.n	8012cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012cb0:	4b39      	ldr	r3, [pc, #228]	; (8012d98 <xQueueGenericSend+0x1f8>)
 8012cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cb6:	601a      	str	r2, [r3, #0]
 8012cb8:	f3bf 8f4f 	dsb	sy
 8012cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012cc0:	f002 fd10 	bl	80156e4 <vPortExitCritical>
				return pdPASS;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e063      	b.n	8012d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d103      	bne.n	8012cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012cce:	f002 fd09 	bl	80156e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	e05c      	b.n	8012d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d106      	bne.n	8012cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012cdc:	f107 0314 	add.w	r3, r7, #20
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f001 fa5f 	bl	80141a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012cea:	f002 fcfb 	bl	80156e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012cee:	f000 ffcb 	bl	8013c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012cf2:	f002 fcc7 	bl	8015684 <vPortEnterCritical>
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012cfc:	b25b      	sxtb	r3, r3
 8012cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d02:	d103      	bne.n	8012d0c <xQueueGenericSend+0x16c>
 8012d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d12:	b25b      	sxtb	r3, r3
 8012d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d18:	d103      	bne.n	8012d22 <xQueueGenericSend+0x182>
 8012d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d22:	f002 fcdf 	bl	80156e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d26:	1d3a      	adds	r2, r7, #4
 8012d28:	f107 0314 	add.w	r3, r7, #20
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f001 fa4e 	bl	80141d0 <xTaskCheckForTimeOut>
 8012d34:	4603      	mov	r3, r0
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d124      	bne.n	8012d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d3c:	f000 fcd2 	bl	80136e4 <prvIsQueueFull>
 8012d40:	4603      	mov	r3, r0
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d018      	beq.n	8012d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d48:	3310      	adds	r3, #16
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	4611      	mov	r1, r2
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f001 f974 	bl	801403c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d56:	f000 fc5d 	bl	8013614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012d5a:	f000 ffa3 	bl	8013ca4 <xTaskResumeAll>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	f47f af7c 	bne.w	8012c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012d66:	4b0c      	ldr	r3, [pc, #48]	; (8012d98 <xQueueGenericSend+0x1f8>)
 8012d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	f3bf 8f4f 	dsb	sy
 8012d72:	f3bf 8f6f 	isb	sy
 8012d76:	e772      	b.n	8012c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d7a:	f000 fc4b 	bl	8013614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d7e:	f000 ff91 	bl	8013ca4 <xTaskResumeAll>
 8012d82:	e76c      	b.n	8012c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d86:	f000 fc45 	bl	8013614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d8a:	f000 ff8b 	bl	8013ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3738      	adds	r7, #56	; 0x38
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	e000ed04 	.word	0xe000ed04

08012d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b090      	sub	sp, #64	; 0x40
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	60f8      	str	r0, [r7, #12]
 8012da4:	60b9      	str	r1, [r7, #8]
 8012da6:	607a      	str	r2, [r7, #4]
 8012da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d10a      	bne.n	8012dca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db8:	f383 8811 	msr	BASEPRI, r3
 8012dbc:	f3bf 8f6f 	isb	sy
 8012dc0:	f3bf 8f4f 	dsb	sy
 8012dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012dc6:	bf00      	nop
 8012dc8:	e7fe      	b.n	8012dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d103      	bne.n	8012dd8 <xQueueGenericSendFromISR+0x3c>
 8012dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d101      	bne.n	8012ddc <xQueueGenericSendFromISR+0x40>
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e000      	b.n	8012dde <xQueueGenericSendFromISR+0x42>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d10a      	bne.n	8012df8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de6:	f383 8811 	msr	BASEPRI, r3
 8012dea:	f3bf 8f6f 	isb	sy
 8012dee:	f3bf 8f4f 	dsb	sy
 8012df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012df4:	bf00      	nop
 8012df6:	e7fe      	b.n	8012df6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2b02      	cmp	r3, #2
 8012dfc:	d103      	bne.n	8012e06 <xQueueGenericSendFromISR+0x6a>
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d101      	bne.n	8012e0a <xQueueGenericSendFromISR+0x6e>
 8012e06:	2301      	movs	r3, #1
 8012e08:	e000      	b.n	8012e0c <xQueueGenericSendFromISR+0x70>
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d10a      	bne.n	8012e26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e14:	f383 8811 	msr	BASEPRI, r3
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	623b      	str	r3, [r7, #32]
}
 8012e22:	bf00      	nop
 8012e24:	e7fe      	b.n	8012e24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e26:	f002 fd0f 	bl	8015848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8012e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e32:	f383 8811 	msr	BASEPRI, r3
 8012e36:	f3bf 8f6f 	isb	sy
 8012e3a:	f3bf 8f4f 	dsb	sy
 8012e3e:	61fa      	str	r2, [r7, #28]
 8012e40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012e42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d302      	bcc.n	8012e58 <xQueueGenericSendFromISR+0xbc>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b02      	cmp	r3, #2
 8012e56:	d12f      	bne.n	8012eb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012e68:	683a      	ldr	r2, [r7, #0]
 8012e6a:	68b9      	ldr	r1, [r7, #8]
 8012e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e6e:	f000 fb41 	bl	80134f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012e72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e7a:	d112      	bne.n	8012ea2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d016      	beq.n	8012eb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e86:	3324      	adds	r3, #36	; 0x24
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f001 f927 	bl	80140dc <xTaskRemoveFromEventList>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00e      	beq.n	8012eb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d00b      	beq.n	8012eb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2201      	movs	r2, #1
 8012e9e:	601a      	str	r2, [r3, #0]
 8012ea0:	e007      	b.n	8012eb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	b25a      	sxtb	r2, r3
 8012eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012eb6:	e001      	b.n	8012ebc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ebe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012ec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3740      	adds	r7, #64	; 0x40
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b08e      	sub	sp, #56	; 0x38
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
 8012eda:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d10a      	bne.n	8012efc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eea:	f383 8811 	msr	BASEPRI, r3
 8012eee:	f3bf 8f6f 	isb	sy
 8012ef2:	f3bf 8f4f 	dsb	sy
 8012ef6:	623b      	str	r3, [r7, #32]
}
 8012ef8:	bf00      	nop
 8012efa:	e7fe      	b.n	8012efa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d00a      	beq.n	8012f1a <xQueueGiveFromISR+0x48>
	__asm volatile
 8012f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f08:	f383 8811 	msr	BASEPRI, r3
 8012f0c:	f3bf 8f6f 	isb	sy
 8012f10:	f3bf 8f4f 	dsb	sy
 8012f14:	61fb      	str	r3, [r7, #28]
}
 8012f16:	bf00      	nop
 8012f18:	e7fe      	b.n	8012f18 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d103      	bne.n	8012f2a <xQueueGiveFromISR+0x58>
 8012f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f24:	689b      	ldr	r3, [r3, #8]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d101      	bne.n	8012f2e <xQueueGiveFromISR+0x5c>
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	e000      	b.n	8012f30 <xQueueGiveFromISR+0x5e>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d10a      	bne.n	8012f4a <xQueueGiveFromISR+0x78>
	__asm volatile
 8012f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f38:	f383 8811 	msr	BASEPRI, r3
 8012f3c:	f3bf 8f6f 	isb	sy
 8012f40:	f3bf 8f4f 	dsb	sy
 8012f44:	61bb      	str	r3, [r7, #24]
}
 8012f46:	bf00      	nop
 8012f48:	e7fe      	b.n	8012f48 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012f4a:	f002 fc7d 	bl	8015848 <vPortValidateInterruptPriority>
	__asm volatile
 8012f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8012f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f56:	f383 8811 	msr	BASEPRI, r3
 8012f5a:	f3bf 8f6f 	isb	sy
 8012f5e:	f3bf 8f4f 	dsb	sy
 8012f62:	617a      	str	r2, [r7, #20]
 8012f64:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012f66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d22b      	bcs.n	8012fd2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f86:	1c5a      	adds	r2, r3, #1
 8012f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f94:	d112      	bne.n	8012fbc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d016      	beq.n	8012fcc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	3324      	adds	r3, #36	; 0x24
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f001 f89a 	bl	80140dc <xTaskRemoveFromEventList>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d00e      	beq.n	8012fcc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00b      	beq.n	8012fcc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	601a      	str	r2, [r3, #0]
 8012fba:	e007      	b.n	8012fcc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	b2db      	uxtb	r3, r3
 8012fc4:	b25a      	sxtb	r2, r3
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	637b      	str	r3, [r7, #52]	; 0x34
 8012fd0:	e001      	b.n	8012fd6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8012fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f383 8811 	msr	BASEPRI, r3
}
 8012fe0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3738      	adds	r7, #56	; 0x38
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b08c      	sub	sp, #48	; 0x30
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	60b9      	str	r1, [r7, #8]
 8012ff6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10a      	bne.n	801301c <xQueueReceive+0x30>
	__asm volatile
 8013006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801300a:	f383 8811 	msr	BASEPRI, r3
 801300e:	f3bf 8f6f 	isb	sy
 8013012:	f3bf 8f4f 	dsb	sy
 8013016:	623b      	str	r3, [r7, #32]
}
 8013018:	bf00      	nop
 801301a:	e7fe      	b.n	801301a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d103      	bne.n	801302a <xQueueReceive+0x3e>
 8013022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013026:	2b00      	cmp	r3, #0
 8013028:	d101      	bne.n	801302e <xQueueReceive+0x42>
 801302a:	2301      	movs	r3, #1
 801302c:	e000      	b.n	8013030 <xQueueReceive+0x44>
 801302e:	2300      	movs	r3, #0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d10a      	bne.n	801304a <xQueueReceive+0x5e>
	__asm volatile
 8013034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	61fb      	str	r3, [r7, #28]
}
 8013046:	bf00      	nop
 8013048:	e7fe      	b.n	8013048 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801304a:	f001 fa09 	bl	8014460 <xTaskGetSchedulerState>
 801304e:	4603      	mov	r3, r0
 8013050:	2b00      	cmp	r3, #0
 8013052:	d102      	bne.n	801305a <xQueueReceive+0x6e>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <xQueueReceive+0x72>
 801305a:	2301      	movs	r3, #1
 801305c:	e000      	b.n	8013060 <xQueueReceive+0x74>
 801305e:	2300      	movs	r3, #0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d10a      	bne.n	801307a <xQueueReceive+0x8e>
	__asm volatile
 8013064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	61bb      	str	r3, [r7, #24]
}
 8013076:	bf00      	nop
 8013078:	e7fe      	b.n	8013078 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801307a:	f002 fb03 	bl	8015684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013082:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013086:	2b00      	cmp	r3, #0
 8013088:	d01f      	beq.n	80130ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801308a:	68b9      	ldr	r1, [r7, #8]
 801308c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801308e:	f000 fa9b 	bl	80135c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013094:	1e5a      	subs	r2, r3, #1
 8013096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013098:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309c:	691b      	ldr	r3, [r3, #16]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d00f      	beq.n	80130c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a4:	3310      	adds	r3, #16
 80130a6:	4618      	mov	r0, r3
 80130a8:	f001 f818 	bl	80140dc <xTaskRemoveFromEventList>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d007      	beq.n	80130c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80130b2:	4b3d      	ldr	r3, [pc, #244]	; (80131a8 <xQueueReceive+0x1bc>)
 80130b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	f3bf 8f4f 	dsb	sy
 80130be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80130c2:	f002 fb0f 	bl	80156e4 <vPortExitCritical>
				return pdPASS;
 80130c6:	2301      	movs	r3, #1
 80130c8:	e069      	b.n	801319e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d103      	bne.n	80130d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80130d0:	f002 fb08 	bl	80156e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80130d4:	2300      	movs	r3, #0
 80130d6:	e062      	b.n	801319e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80130d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d106      	bne.n	80130ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80130de:	f107 0310 	add.w	r3, r7, #16
 80130e2:	4618      	mov	r0, r3
 80130e4:	f001 f85e 	bl	80141a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80130e8:	2301      	movs	r3, #1
 80130ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80130ec:	f002 fafa 	bl	80156e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80130f0:	f000 fdca 	bl	8013c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80130f4:	f002 fac6 	bl	8015684 <vPortEnterCritical>
 80130f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130fe:	b25b      	sxtb	r3, r3
 8013100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013104:	d103      	bne.n	801310e <xQueueReceive+0x122>
 8013106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013108:	2200      	movs	r2, #0
 801310a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013114:	b25b      	sxtb	r3, r3
 8013116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801311a:	d103      	bne.n	8013124 <xQueueReceive+0x138>
 801311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311e:	2200      	movs	r2, #0
 8013120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013124:	f002 fade 	bl	80156e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013128:	1d3a      	adds	r2, r7, #4
 801312a:	f107 0310 	add.w	r3, r7, #16
 801312e:	4611      	mov	r1, r2
 8013130:	4618      	mov	r0, r3
 8013132:	f001 f84d 	bl	80141d0 <xTaskCheckForTimeOut>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d123      	bne.n	8013184 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801313c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801313e:	f000 fabb 	bl	80136b8 <prvIsQueueEmpty>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d017      	beq.n	8013178 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314a:	3324      	adds	r3, #36	; 0x24
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	4611      	mov	r1, r2
 8013150:	4618      	mov	r0, r3
 8013152:	f000 ff73 	bl	801403c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013158:	f000 fa5c 	bl	8013614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801315c:	f000 fda2 	bl	8013ca4 <xTaskResumeAll>
 8013160:	4603      	mov	r3, r0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d189      	bne.n	801307a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013166:	4b10      	ldr	r3, [pc, #64]	; (80131a8 <xQueueReceive+0x1bc>)
 8013168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801316c:	601a      	str	r2, [r3, #0]
 801316e:	f3bf 8f4f 	dsb	sy
 8013172:	f3bf 8f6f 	isb	sy
 8013176:	e780      	b.n	801307a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801317a:	f000 fa4b 	bl	8013614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801317e:	f000 fd91 	bl	8013ca4 <xTaskResumeAll>
 8013182:	e77a      	b.n	801307a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013186:	f000 fa45 	bl	8013614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801318a:	f000 fd8b 	bl	8013ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801318e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013190:	f000 fa92 	bl	80136b8 <prvIsQueueEmpty>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	f43f af6f 	beq.w	801307a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801319c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3730      	adds	r7, #48	; 0x30
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}
 80131a6:	bf00      	nop
 80131a8:	e000ed04 	.word	0xe000ed04

080131ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b08e      	sub	sp, #56	; 0x38
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80131b6:	2300      	movs	r3, #0
 80131b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80131be:	2300      	movs	r3, #0
 80131c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80131c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d10a      	bne.n	80131de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80131c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131cc:	f383 8811 	msr	BASEPRI, r3
 80131d0:	f3bf 8f6f 	isb	sy
 80131d4:	f3bf 8f4f 	dsb	sy
 80131d8:	623b      	str	r3, [r7, #32]
}
 80131da:	bf00      	nop
 80131dc:	e7fe      	b.n	80131dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80131de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d00a      	beq.n	80131fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80131e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ea:	f383 8811 	msr	BASEPRI, r3
 80131ee:	f3bf 8f6f 	isb	sy
 80131f2:	f3bf 8f4f 	dsb	sy
 80131f6:	61fb      	str	r3, [r7, #28]
}
 80131f8:	bf00      	nop
 80131fa:	e7fe      	b.n	80131fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131fc:	f001 f930 	bl	8014460 <xTaskGetSchedulerState>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d102      	bne.n	801320c <xQueueSemaphoreTake+0x60>
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d101      	bne.n	8013210 <xQueueSemaphoreTake+0x64>
 801320c:	2301      	movs	r3, #1
 801320e:	e000      	b.n	8013212 <xQueueSemaphoreTake+0x66>
 8013210:	2300      	movs	r3, #0
 8013212:	2b00      	cmp	r3, #0
 8013214:	d10a      	bne.n	801322c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321a:	f383 8811 	msr	BASEPRI, r3
 801321e:	f3bf 8f6f 	isb	sy
 8013222:	f3bf 8f4f 	dsb	sy
 8013226:	61bb      	str	r3, [r7, #24]
}
 8013228:	bf00      	nop
 801322a:	e7fe      	b.n	801322a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801322c:	f002 fa2a 	bl	8015684 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013234:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013238:	2b00      	cmp	r3, #0
 801323a:	d024      	beq.n	8013286 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323e:	1e5a      	subs	r2, r3, #1
 8013240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013242:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d104      	bne.n	8013256 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801324c:	f001 fa7e 	bl	801474c <pvTaskIncrementMutexHeldCount>
 8013250:	4602      	mov	r2, r0
 8013252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013254:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	691b      	ldr	r3, [r3, #16]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d00f      	beq.n	801327e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013260:	3310      	adds	r3, #16
 8013262:	4618      	mov	r0, r3
 8013264:	f000 ff3a 	bl	80140dc <xTaskRemoveFromEventList>
 8013268:	4603      	mov	r3, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	d007      	beq.n	801327e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801326e:	4b54      	ldr	r3, [pc, #336]	; (80133c0 <xQueueSemaphoreTake+0x214>)
 8013270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013274:	601a      	str	r2, [r3, #0]
 8013276:	f3bf 8f4f 	dsb	sy
 801327a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801327e:	f002 fa31 	bl	80156e4 <vPortExitCritical>
				return pdPASS;
 8013282:	2301      	movs	r3, #1
 8013284:	e097      	b.n	80133b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d111      	bne.n	80132b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328e:	2b00      	cmp	r3, #0
 8013290:	d00a      	beq.n	80132a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013296:	f383 8811 	msr	BASEPRI, r3
 801329a:	f3bf 8f6f 	isb	sy
 801329e:	f3bf 8f4f 	dsb	sy
 80132a2:	617b      	str	r3, [r7, #20]
}
 80132a4:	bf00      	nop
 80132a6:	e7fe      	b.n	80132a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80132a8:	f002 fa1c 	bl	80156e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80132ac:	2300      	movs	r3, #0
 80132ae:	e082      	b.n	80133b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80132b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d106      	bne.n	80132c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80132b6:	f107 030c 	add.w	r3, r7, #12
 80132ba:	4618      	mov	r0, r3
 80132bc:	f000 ff72 	bl	80141a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80132c0:	2301      	movs	r3, #1
 80132c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80132c4:	f002 fa0e 	bl	80156e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80132c8:	f000 fcde 	bl	8013c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80132cc:	f002 f9da 	bl	8015684 <vPortEnterCritical>
 80132d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80132d6:	b25b      	sxtb	r3, r3
 80132d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132dc:	d103      	bne.n	80132e6 <xQueueSemaphoreTake+0x13a>
 80132de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e0:	2200      	movs	r2, #0
 80132e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80132e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132ec:	b25b      	sxtb	r3, r3
 80132ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132f2:	d103      	bne.n	80132fc <xQueueSemaphoreTake+0x150>
 80132f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f6:	2200      	movs	r2, #0
 80132f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80132fc:	f002 f9f2 	bl	80156e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013300:	463a      	mov	r2, r7
 8013302:	f107 030c 	add.w	r3, r7, #12
 8013306:	4611      	mov	r1, r2
 8013308:	4618      	mov	r0, r3
 801330a:	f000 ff61 	bl	80141d0 <xTaskCheckForTimeOut>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d132      	bne.n	801337a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013316:	f000 f9cf 	bl	80136b8 <prvIsQueueEmpty>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d026      	beq.n	801336e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d109      	bne.n	801333c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013328:	f002 f9ac 	bl	8015684 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	4618      	mov	r0, r3
 8013332:	f001 f8b3 	bl	801449c <xTaskPriorityInherit>
 8013336:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013338:	f002 f9d4 	bl	80156e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333e:	3324      	adds	r3, #36	; 0x24
 8013340:	683a      	ldr	r2, [r7, #0]
 8013342:	4611      	mov	r1, r2
 8013344:	4618      	mov	r0, r3
 8013346:	f000 fe79 	bl	801403c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801334a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801334c:	f000 f962 	bl	8013614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013350:	f000 fca8 	bl	8013ca4 <xTaskResumeAll>
 8013354:	4603      	mov	r3, r0
 8013356:	2b00      	cmp	r3, #0
 8013358:	f47f af68 	bne.w	801322c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801335c:	4b18      	ldr	r3, [pc, #96]	; (80133c0 <xQueueSemaphoreTake+0x214>)
 801335e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013362:	601a      	str	r2, [r3, #0]
 8013364:	f3bf 8f4f 	dsb	sy
 8013368:	f3bf 8f6f 	isb	sy
 801336c:	e75e      	b.n	801322c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801336e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013370:	f000 f950 	bl	8013614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013374:	f000 fc96 	bl	8013ca4 <xTaskResumeAll>
 8013378:	e758      	b.n	801322c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801337a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801337c:	f000 f94a 	bl	8013614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013380:	f000 fc90 	bl	8013ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013386:	f000 f997 	bl	80136b8 <prvIsQueueEmpty>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	f43f af4d 	beq.w	801322c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013394:	2b00      	cmp	r3, #0
 8013396:	d00d      	beq.n	80133b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013398:	f002 f974 	bl	8015684 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801339c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801339e:	f000 f891 	bl	80134c4 <prvGetDisinheritPriorityAfterTimeout>
 80133a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80133a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a6:	689b      	ldr	r3, [r3, #8]
 80133a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133aa:	4618      	mov	r0, r3
 80133ac:	f001 f94c 	bl	8014648 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80133b0:	f002 f998 	bl	80156e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80133b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3738      	adds	r7, #56	; 0x38
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	e000ed04 	.word	0xe000ed04

080133c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b08e      	sub	sp, #56	; 0x38
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d10a      	bne.n	80133f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80133da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133de:	f383 8811 	msr	BASEPRI, r3
 80133e2:	f3bf 8f6f 	isb	sy
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	623b      	str	r3, [r7, #32]
}
 80133ec:	bf00      	nop
 80133ee:	e7fe      	b.n	80133ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d103      	bne.n	80133fe <xQueueReceiveFromISR+0x3a>
 80133f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <xQueueReceiveFromISR+0x3e>
 80133fe:	2301      	movs	r3, #1
 8013400:	e000      	b.n	8013404 <xQueueReceiveFromISR+0x40>
 8013402:	2300      	movs	r3, #0
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10a      	bne.n	801341e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801340c:	f383 8811 	msr	BASEPRI, r3
 8013410:	f3bf 8f6f 	isb	sy
 8013414:	f3bf 8f4f 	dsb	sy
 8013418:	61fb      	str	r3, [r7, #28]
}
 801341a:	bf00      	nop
 801341c:	e7fe      	b.n	801341c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801341e:	f002 fa13 	bl	8015848 <vPortValidateInterruptPriority>
	__asm volatile
 8013422:	f3ef 8211 	mrs	r2, BASEPRI
 8013426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342a:	f383 8811 	msr	BASEPRI, r3
 801342e:	f3bf 8f6f 	isb	sy
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	61ba      	str	r2, [r7, #24]
 8013438:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801343a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801343c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013442:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013446:	2b00      	cmp	r3, #0
 8013448:	d02f      	beq.n	80134aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013454:	68b9      	ldr	r1, [r7, #8]
 8013456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013458:	f000 f8b6 	bl	80135c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345e:	1e5a      	subs	r2, r3, #1
 8013460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013462:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801346c:	d112      	bne.n	8013494 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013470:	691b      	ldr	r3, [r3, #16]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d016      	beq.n	80134a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013478:	3310      	adds	r3, #16
 801347a:	4618      	mov	r0, r3
 801347c:	f000 fe2e 	bl	80140dc <xTaskRemoveFromEventList>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00e      	beq.n	80134a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00b      	beq.n	80134a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2201      	movs	r2, #1
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	e007      	b.n	80134a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013498:	3301      	adds	r3, #1
 801349a:	b2db      	uxtb	r3, r3
 801349c:	b25a      	sxtb	r2, r3
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80134a4:	2301      	movs	r3, #1
 80134a6:	637b      	str	r3, [r7, #52]	; 0x34
 80134a8:	e001      	b.n	80134ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80134aa:	2300      	movs	r3, #0
 80134ac:	637b      	str	r3, [r7, #52]	; 0x34
 80134ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	f383 8811 	msr	BASEPRI, r3
}
 80134b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80134ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3738      	adds	r7, #56	; 0x38
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80134c4:	b480      	push	{r7}
 80134c6:	b085      	sub	sp, #20
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d006      	beq.n	80134e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80134de:	60fb      	str	r3, [r7, #12]
 80134e0:	e001      	b.n	80134e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80134e2:	2300      	movs	r3, #0
 80134e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80134e6:	68fb      	ldr	r3, [r7, #12]
	}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3714      	adds	r7, #20
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b086      	sub	sp, #24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013500:	2300      	movs	r3, #0
 8013502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801350e:	2b00      	cmp	r3, #0
 8013510:	d10d      	bne.n	801352e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d14d      	bne.n	80135b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	4618      	mov	r0, r3
 8013520:	f001 f824 	bl	801456c <xTaskPriorityDisinherit>
 8013524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	609a      	str	r2, [r3, #8]
 801352c:	e043      	b.n	80135b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d119      	bne.n	8013568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6858      	ldr	r0, [r3, #4]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801353c:	461a      	mov	r2, r3
 801353e:	68b9      	ldr	r1, [r7, #8]
 8013540:	f003 feae 	bl	80172a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801354c:	441a      	add	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	685a      	ldr	r2, [r3, #4]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	429a      	cmp	r2, r3
 801355c:	d32b      	bcc.n	80135b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681a      	ldr	r2, [r3, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	605a      	str	r2, [r3, #4]
 8013566:	e026      	b.n	80135b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	68d8      	ldr	r0, [r3, #12]
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013570:	461a      	mov	r2, r3
 8013572:	68b9      	ldr	r1, [r7, #8]
 8013574:	f003 fe94 	bl	80172a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	68da      	ldr	r2, [r3, #12]
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013580:	425b      	negs	r3, r3
 8013582:	441a      	add	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	68da      	ldr	r2, [r3, #12]
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d207      	bcs.n	80135a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	689a      	ldr	r2, [r3, #8]
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801359c:	425b      	negs	r3, r3
 801359e:	441a      	add	r2, r3
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b02      	cmp	r3, #2
 80135a8:	d105      	bne.n	80135b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d002      	beq.n	80135b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	3b01      	subs	r3, #1
 80135b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	1c5a      	adds	r2, r3, #1
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80135be:	697b      	ldr	r3, [r7, #20]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3718      	adds	r7, #24
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d018      	beq.n	801360c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	68da      	ldr	r2, [r3, #12]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135e2:	441a      	add	r2, r3
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	68da      	ldr	r2, [r3, #12]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d303      	bcc.n	80135fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	68d9      	ldr	r1, [r3, #12]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013604:	461a      	mov	r2, r3
 8013606:	6838      	ldr	r0, [r7, #0]
 8013608:	f003 fe4a 	bl	80172a0 <memcpy>
	}
}
 801360c:	bf00      	nop
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801361c:	f002 f832 	bl	8015684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013628:	e011      	b.n	801364e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801362e:	2b00      	cmp	r3, #0
 8013630:	d012      	beq.n	8013658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	3324      	adds	r3, #36	; 0x24
 8013636:	4618      	mov	r0, r3
 8013638:	f000 fd50 	bl	80140dc <xTaskRemoveFromEventList>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d001      	beq.n	8013646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013642:	f000 fe27 	bl	8014294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013646:	7bfb      	ldrb	r3, [r7, #15]
 8013648:	3b01      	subs	r3, #1
 801364a:	b2db      	uxtb	r3, r3
 801364c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013652:	2b00      	cmp	r3, #0
 8013654:	dce9      	bgt.n	801362a <prvUnlockQueue+0x16>
 8013656:	e000      	b.n	801365a <prvUnlockQueue+0x46>
					break;
 8013658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	22ff      	movs	r2, #255	; 0xff
 801365e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013662:	f002 f83f 	bl	80156e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013666:	f002 f80d 	bl	8015684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013672:	e011      	b.n	8013698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	691b      	ldr	r3, [r3, #16]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d012      	beq.n	80136a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	3310      	adds	r3, #16
 8013680:	4618      	mov	r0, r3
 8013682:	f000 fd2b 	bl	80140dc <xTaskRemoveFromEventList>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801368c:	f000 fe02 	bl	8014294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013690:	7bbb      	ldrb	r3, [r7, #14]
 8013692:	3b01      	subs	r3, #1
 8013694:	b2db      	uxtb	r3, r3
 8013696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801369c:	2b00      	cmp	r3, #0
 801369e:	dce9      	bgt.n	8013674 <prvUnlockQueue+0x60>
 80136a0:	e000      	b.n	80136a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80136a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	22ff      	movs	r2, #255	; 0xff
 80136a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80136ac:	f002 f81a 	bl	80156e4 <vPortExitCritical>
}
 80136b0:	bf00      	nop
 80136b2:	3710      	adds	r7, #16
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136c0:	f001 ffe0 	bl	8015684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d102      	bne.n	80136d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80136cc:	2301      	movs	r3, #1
 80136ce:	60fb      	str	r3, [r7, #12]
 80136d0:	e001      	b.n	80136d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136d2:	2300      	movs	r3, #0
 80136d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136d6:	f002 f805 	bl	80156e4 <vPortExitCritical>

	return xReturn;
 80136da:	68fb      	ldr	r3, [r7, #12]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136ec:	f001 ffca 	bl	8015684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d102      	bne.n	8013702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136fc:	2301      	movs	r3, #1
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	e001      	b.n	8013706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013702:	2300      	movs	r3, #0
 8013704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013706:	f001 ffed 	bl	80156e4 <vPortExitCritical>

	return xReturn;
 801370a:	68fb      	ldr	r3, [r7, #12]
}
 801370c:	4618      	mov	r0, r3
 801370e:	3710      	adds	r7, #16
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013714:	b480      	push	{r7}
 8013716:	b085      	sub	sp, #20
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801371e:	2300      	movs	r3, #0
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	e014      	b.n	801374e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013724:	4a0f      	ldr	r2, [pc, #60]	; (8013764 <vQueueAddToRegistry+0x50>)
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10b      	bne.n	8013748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013730:	490c      	ldr	r1, [pc, #48]	; (8013764 <vQueueAddToRegistry+0x50>)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	683a      	ldr	r2, [r7, #0]
 8013736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801373a:	4a0a      	ldr	r2, [pc, #40]	; (8013764 <vQueueAddToRegistry+0x50>)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	4413      	add	r3, r2
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013746:	e006      	b.n	8013756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	3301      	adds	r3, #1
 801374c:	60fb      	str	r3, [r7, #12]
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2b07      	cmp	r3, #7
 8013752:	d9e7      	bls.n	8013724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013754:	bf00      	nop
 8013756:	bf00      	nop
 8013758:	3714      	adds	r7, #20
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop
 8013764:	200049b0 	.word	0x200049b0

08013768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013768:	b580      	push	{r7, lr}
 801376a:	b086      	sub	sp, #24
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013778:	f001 ff84 	bl	8015684 <vPortEnterCritical>
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013782:	b25b      	sxtb	r3, r3
 8013784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013788:	d103      	bne.n	8013792 <vQueueWaitForMessageRestricted+0x2a>
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	2200      	movs	r2, #0
 801378e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013798:	b25b      	sxtb	r3, r3
 801379a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801379e:	d103      	bne.n	80137a8 <vQueueWaitForMessageRestricted+0x40>
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137a8:	f001 ff9c 	bl	80156e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d106      	bne.n	80137c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	3324      	adds	r3, #36	; 0x24
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	68b9      	ldr	r1, [r7, #8]
 80137bc:	4618      	mov	r0, r3
 80137be:	f000 fc61 	bl	8014084 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80137c2:	6978      	ldr	r0, [r7, #20]
 80137c4:	f7ff ff26 	bl	8013614 <prvUnlockQueue>
	}
 80137c8:	bf00      	nop
 80137ca:	3718      	adds	r7, #24
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b08e      	sub	sp, #56	; 0x38
 80137d4:	af04      	add	r7, sp, #16
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
 80137dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10a      	bne.n	80137fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80137e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e8:	f383 8811 	msr	BASEPRI, r3
 80137ec:	f3bf 8f6f 	isb	sy
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	623b      	str	r3, [r7, #32]
}
 80137f6:	bf00      	nop
 80137f8:	e7fe      	b.n	80137f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80137fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d10a      	bne.n	8013816 <xTaskCreateStatic+0x46>
	__asm volatile
 8013800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013804:	f383 8811 	msr	BASEPRI, r3
 8013808:	f3bf 8f6f 	isb	sy
 801380c:	f3bf 8f4f 	dsb	sy
 8013810:	61fb      	str	r3, [r7, #28]
}
 8013812:	bf00      	nop
 8013814:	e7fe      	b.n	8013814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013816:	23bc      	movs	r3, #188	; 0xbc
 8013818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	2bbc      	cmp	r3, #188	; 0xbc
 801381e:	d00a      	beq.n	8013836 <xTaskCreateStatic+0x66>
	__asm volatile
 8013820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013824:	f383 8811 	msr	BASEPRI, r3
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	61bb      	str	r3, [r7, #24]
}
 8013832:	bf00      	nop
 8013834:	e7fe      	b.n	8013834 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383a:	2b00      	cmp	r3, #0
 801383c:	d01e      	beq.n	801387c <xTaskCreateStatic+0xac>
 801383e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013840:	2b00      	cmp	r3, #0
 8013842:	d01b      	beq.n	801387c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801384c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013850:	2202      	movs	r2, #2
 8013852:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013856:	2300      	movs	r3, #0
 8013858:	9303      	str	r3, [sp, #12]
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	9302      	str	r3, [sp, #8]
 801385e:	f107 0314 	add.w	r3, r7, #20
 8013862:	9301      	str	r3, [sp, #4]
 8013864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013866:	9300      	str	r3, [sp, #0]
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	68b9      	ldr	r1, [r7, #8]
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f000 f850 	bl	8013914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013876:	f000 f8f3 	bl	8013a60 <prvAddNewTaskToReadyList>
 801387a:	e001      	b.n	8013880 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801387c:	2300      	movs	r3, #0
 801387e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013880:	697b      	ldr	r3, [r7, #20]
	}
 8013882:	4618      	mov	r0, r3
 8013884:	3728      	adds	r7, #40	; 0x28
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}

0801388a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801388a:	b580      	push	{r7, lr}
 801388c:	b08c      	sub	sp, #48	; 0x30
 801388e:	af04      	add	r7, sp, #16
 8013890:	60f8      	str	r0, [r7, #12]
 8013892:	60b9      	str	r1, [r7, #8]
 8013894:	603b      	str	r3, [r7, #0]
 8013896:	4613      	mov	r3, r2
 8013898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801389a:	88fb      	ldrh	r3, [r7, #6]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	4618      	mov	r0, r3
 80138a0:	f002 f812 	bl	80158c8 <pvPortMalloc>
 80138a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d00e      	beq.n	80138ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138ac:	20bc      	movs	r0, #188	; 0xbc
 80138ae:	f002 f80b 	bl	80158c8 <pvPortMalloc>
 80138b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d003      	beq.n	80138c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	697a      	ldr	r2, [r7, #20]
 80138be:	631a      	str	r2, [r3, #48]	; 0x30
 80138c0:	e005      	b.n	80138ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80138c2:	6978      	ldr	r0, [r7, #20]
 80138c4:	f002 f8cc 	bl	8015a60 <vPortFree>
 80138c8:	e001      	b.n	80138ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80138ca:	2300      	movs	r3, #0
 80138cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d017      	beq.n	8013904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	2200      	movs	r2, #0
 80138d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138dc:	88fa      	ldrh	r2, [r7, #6]
 80138de:	2300      	movs	r3, #0
 80138e0:	9303      	str	r3, [sp, #12]
 80138e2:	69fb      	ldr	r3, [r7, #28]
 80138e4:	9302      	str	r3, [sp, #8]
 80138e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e8:	9301      	str	r3, [sp, #4]
 80138ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	68b9      	ldr	r1, [r7, #8]
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f000 f80e 	bl	8013914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138f8:	69f8      	ldr	r0, [r7, #28]
 80138fa:	f000 f8b1 	bl	8013a60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80138fe:	2301      	movs	r3, #1
 8013900:	61bb      	str	r3, [r7, #24]
 8013902:	e002      	b.n	801390a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801390a:	69bb      	ldr	r3, [r7, #24]
	}
 801390c:	4618      	mov	r0, r3
 801390e:	3720      	adds	r7, #32
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b088      	sub	sp, #32
 8013918:	af00      	add	r7, sp, #0
 801391a:	60f8      	str	r0, [r7, #12]
 801391c:	60b9      	str	r1, [r7, #8]
 801391e:	607a      	str	r2, [r7, #4]
 8013920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	009b      	lsls	r3, r3, #2
 801392a:	461a      	mov	r2, r3
 801392c:	21a5      	movs	r1, #165	; 0xa5
 801392e:	f003 fcc5 	bl	80172bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801393c:	3b01      	subs	r3, #1
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	4413      	add	r3, r2
 8013942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	f023 0307 	bic.w	r3, r3, #7
 801394a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801394c:	69bb      	ldr	r3, [r7, #24]
 801394e:	f003 0307 	and.w	r3, r3, #7
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00a      	beq.n	801396c <prvInitialiseNewTask+0x58>
	__asm volatile
 8013956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395a:	f383 8811 	msr	BASEPRI, r3
 801395e:	f3bf 8f6f 	isb	sy
 8013962:	f3bf 8f4f 	dsb	sy
 8013966:	617b      	str	r3, [r7, #20]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d01f      	beq.n	80139b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013972:	2300      	movs	r3, #0
 8013974:	61fb      	str	r3, [r7, #28]
 8013976:	e012      	b.n	801399e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	4413      	add	r3, r2
 801397e:	7819      	ldrb	r1, [r3, #0]
 8013980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	4413      	add	r3, r2
 8013986:	3334      	adds	r3, #52	; 0x34
 8013988:	460a      	mov	r2, r1
 801398a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	4413      	add	r3, r2
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d006      	beq.n	80139a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	3301      	adds	r3, #1
 801399c:	61fb      	str	r3, [r7, #28]
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	2b0f      	cmp	r3, #15
 80139a2:	d9e9      	bls.n	8013978 <prvInitialiseNewTask+0x64>
 80139a4:	e000      	b.n	80139a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80139a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139b0:	e003      	b.n	80139ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80139b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b4:	2200      	movs	r2, #0
 80139b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80139ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139bc:	2b37      	cmp	r3, #55	; 0x37
 80139be:	d901      	bls.n	80139c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80139c0:	2337      	movs	r3, #55	; 0x37
 80139c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80139c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d2:	2200      	movs	r2, #0
 80139d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	3304      	adds	r3, #4
 80139da:	4618      	mov	r0, r3
 80139dc:	f7fe fec2 	bl	8012764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e2:	3318      	adds	r3, #24
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fe febd 	bl	8012764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a02:	2200      	movs	r2, #0
 8013a04:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a12:	3354      	adds	r3, #84	; 0x54
 8013a14:	2260      	movs	r2, #96	; 0x60
 8013a16:	2100      	movs	r1, #0
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f003 fc4f 	bl	80172bc <memset>
 8013a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a20:	4a0c      	ldr	r2, [pc, #48]	; (8013a54 <prvInitialiseNewTask+0x140>)
 8013a22:	659a      	str	r2, [r3, #88]	; 0x58
 8013a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a26:	4a0c      	ldr	r2, [pc, #48]	; (8013a58 <prvInitialiseNewTask+0x144>)
 8013a28:	65da      	str	r2, [r3, #92]	; 0x5c
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2c:	4a0b      	ldr	r2, [pc, #44]	; (8013a5c <prvInitialiseNewTask+0x148>)
 8013a2e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a30:	683a      	ldr	r2, [r7, #0]
 8013a32:	68f9      	ldr	r1, [r7, #12]
 8013a34:	69b8      	ldr	r0, [r7, #24]
 8013a36:	f001 fcfb 	bl	8015430 <pxPortInitialiseStack>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d002      	beq.n	8013a4c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a4c:	bf00      	nop
 8013a4e:	3720      	adds	r7, #32
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	08017a14 	.word	0x08017a14
 8013a58:	08017a34 	.word	0x08017a34
 8013a5c:	080179f4 	.word	0x080179f4

08013a60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a68:	f001 fe0c 	bl	8015684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a6c:	4b2d      	ldr	r3, [pc, #180]	; (8013b24 <prvAddNewTaskToReadyList+0xc4>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	3301      	adds	r3, #1
 8013a72:	4a2c      	ldr	r2, [pc, #176]	; (8013b24 <prvAddNewTaskToReadyList+0xc4>)
 8013a74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a76:	4b2c      	ldr	r3, [pc, #176]	; (8013b28 <prvAddNewTaskToReadyList+0xc8>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d109      	bne.n	8013a92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a7e:	4a2a      	ldr	r2, [pc, #168]	; (8013b28 <prvAddNewTaskToReadyList+0xc8>)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a84:	4b27      	ldr	r3, [pc, #156]	; (8013b24 <prvAddNewTaskToReadyList+0xc4>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d110      	bne.n	8013aae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a8c:	f000 fc26 	bl	80142dc <prvInitialiseTaskLists>
 8013a90:	e00d      	b.n	8013aae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a92:	4b26      	ldr	r3, [pc, #152]	; (8013b2c <prvAddNewTaskToReadyList+0xcc>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d109      	bne.n	8013aae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a9a:	4b23      	ldr	r3, [pc, #140]	; (8013b28 <prvAddNewTaskToReadyList+0xc8>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d802      	bhi.n	8013aae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013aa8:	4a1f      	ldr	r2, [pc, #124]	; (8013b28 <prvAddNewTaskToReadyList+0xc8>)
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013aae:	4b20      	ldr	r3, [pc, #128]	; (8013b30 <prvAddNewTaskToReadyList+0xd0>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	4a1e      	ldr	r2, [pc, #120]	; (8013b30 <prvAddNewTaskToReadyList+0xd0>)
 8013ab6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013ab8:	4b1d      	ldr	r3, [pc, #116]	; (8013b30 <prvAddNewTaskToReadyList+0xd0>)
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ac4:	4b1b      	ldr	r3, [pc, #108]	; (8013b34 <prvAddNewTaskToReadyList+0xd4>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d903      	bls.n	8013ad4 <prvAddNewTaskToReadyList+0x74>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad0:	4a18      	ldr	r2, [pc, #96]	; (8013b34 <prvAddNewTaskToReadyList+0xd4>)
 8013ad2:	6013      	str	r3, [r2, #0]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad8:	4613      	mov	r3, r2
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	4413      	add	r3, r2
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	4a15      	ldr	r2, [pc, #84]	; (8013b38 <prvAddNewTaskToReadyList+0xd8>)
 8013ae2:	441a      	add	r2, r3
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4610      	mov	r0, r2
 8013aec:	f7fe fe47 	bl	801277e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013af0:	f001 fdf8 	bl	80156e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013af4:	4b0d      	ldr	r3, [pc, #52]	; (8013b2c <prvAddNewTaskToReadyList+0xcc>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00e      	beq.n	8013b1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013afc:	4b0a      	ldr	r3, [pc, #40]	; (8013b28 <prvAddNewTaskToReadyList+0xc8>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d207      	bcs.n	8013b1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b0a:	4b0c      	ldr	r3, [pc, #48]	; (8013b3c <prvAddNewTaskToReadyList+0xdc>)
 8013b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b10:	601a      	str	r2, [r3, #0]
 8013b12:	f3bf 8f4f 	dsb	sy
 8013b16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b1a:	bf00      	nop
 8013b1c:	3708      	adds	r7, #8
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	20001aa0 	.word	0x20001aa0
 8013b28:	200015cc 	.word	0x200015cc
 8013b2c:	20001aac 	.word	0x20001aac
 8013b30:	20001abc 	.word	0x20001abc
 8013b34:	20001aa8 	.word	0x20001aa8
 8013b38:	200015d0 	.word	0x200015d0
 8013b3c:	e000ed04 	.word	0xe000ed04

08013b40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d017      	beq.n	8013b82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013b52:	4b13      	ldr	r3, [pc, #76]	; (8013ba0 <vTaskDelay+0x60>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00a      	beq.n	8013b70 <vTaskDelay+0x30>
	__asm volatile
 8013b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5e:	f383 8811 	msr	BASEPRI, r3
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	60bb      	str	r3, [r7, #8]
}
 8013b6c:	bf00      	nop
 8013b6e:	e7fe      	b.n	8013b6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b70:	f000 f88a 	bl	8013c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b74:	2100      	movs	r1, #0
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f000 fffe 	bl	8014b78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b7c:	f000 f892 	bl	8013ca4 <xTaskResumeAll>
 8013b80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d107      	bne.n	8013b98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b88:	4b06      	ldr	r3, [pc, #24]	; (8013ba4 <vTaskDelay+0x64>)
 8013b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b8e:	601a      	str	r2, [r3, #0]
 8013b90:	f3bf 8f4f 	dsb	sy
 8013b94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b98:	bf00      	nop
 8013b9a:	3710      	adds	r7, #16
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	20001ac8 	.word	0x20001ac8
 8013ba4:	e000ed04 	.word	0xe000ed04

08013ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b08a      	sub	sp, #40	; 0x28
 8013bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013bb6:	463a      	mov	r2, r7
 8013bb8:	1d39      	adds	r1, r7, #4
 8013bba:	f107 0308 	add.w	r3, r7, #8
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7fe fd7c 	bl	80126bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013bc4:	6839      	ldr	r1, [r7, #0]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	68ba      	ldr	r2, [r7, #8]
 8013bca:	9202      	str	r2, [sp, #8]
 8013bcc:	9301      	str	r3, [sp, #4]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	460a      	mov	r2, r1
 8013bd6:	4924      	ldr	r1, [pc, #144]	; (8013c68 <vTaskStartScheduler+0xc0>)
 8013bd8:	4824      	ldr	r0, [pc, #144]	; (8013c6c <vTaskStartScheduler+0xc4>)
 8013bda:	f7ff fdf9 	bl	80137d0 <xTaskCreateStatic>
 8013bde:	4603      	mov	r3, r0
 8013be0:	4a23      	ldr	r2, [pc, #140]	; (8013c70 <vTaskStartScheduler+0xc8>)
 8013be2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013be4:	4b22      	ldr	r3, [pc, #136]	; (8013c70 <vTaskStartScheduler+0xc8>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d002      	beq.n	8013bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013bec:	2301      	movs	r3, #1
 8013bee:	617b      	str	r3, [r7, #20]
 8013bf0:	e001      	b.n	8013bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d102      	bne.n	8013c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013bfc:	f001 f810 	bl	8014c20 <xTimerCreateTimerTask>
 8013c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d11b      	bne.n	8013c40 <vTaskStartScheduler+0x98>
	__asm volatile
 8013c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	613b      	str	r3, [r7, #16]
}
 8013c1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013c1c:	4b15      	ldr	r3, [pc, #84]	; (8013c74 <vTaskStartScheduler+0xcc>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	3354      	adds	r3, #84	; 0x54
 8013c22:	4a15      	ldr	r2, [pc, #84]	; (8013c78 <vTaskStartScheduler+0xd0>)
 8013c24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c26:	4b15      	ldr	r3, [pc, #84]	; (8013c7c <vTaskStartScheduler+0xd4>)
 8013c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c2e:	4b14      	ldr	r3, [pc, #80]	; (8013c80 <vTaskStartScheduler+0xd8>)
 8013c30:	2201      	movs	r2, #1
 8013c32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c34:	4b13      	ldr	r3, [pc, #76]	; (8013c84 <vTaskStartScheduler+0xdc>)
 8013c36:	2200      	movs	r2, #0
 8013c38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c3a:	f001 fc81 	bl	8015540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013c3e:	e00e      	b.n	8013c5e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c46:	d10a      	bne.n	8013c5e <vTaskStartScheduler+0xb6>
	__asm volatile
 8013c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4c:	f383 8811 	msr	BASEPRI, r3
 8013c50:	f3bf 8f6f 	isb	sy
 8013c54:	f3bf 8f4f 	dsb	sy
 8013c58:	60fb      	str	r3, [r7, #12]
}
 8013c5a:	bf00      	nop
 8013c5c:	e7fe      	b.n	8013c5c <vTaskStartScheduler+0xb4>
}
 8013c5e:	bf00      	nop
 8013c60:	3718      	adds	r7, #24
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	080176e0 	.word	0x080176e0
 8013c6c:	080142ad 	.word	0x080142ad
 8013c70:	20001ac4 	.word	0x20001ac4
 8013c74:	200015cc 	.word	0x200015cc
 8013c78:	200001a0 	.word	0x200001a0
 8013c7c:	20001ac0 	.word	0x20001ac0
 8013c80:	20001aac 	.word	0x20001aac
 8013c84:	20001aa4 	.word	0x20001aa4

08013c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013c88:	b480      	push	{r7}
 8013c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013c8c:	4b04      	ldr	r3, [pc, #16]	; (8013ca0 <vTaskSuspendAll+0x18>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	3301      	adds	r3, #1
 8013c92:	4a03      	ldr	r2, [pc, #12]	; (8013ca0 <vTaskSuspendAll+0x18>)
 8013c94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013c96:	bf00      	nop
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr
 8013ca0:	20001ac8 	.word	0x20001ac8

08013ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b084      	sub	sp, #16
 8013ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013caa:	2300      	movs	r3, #0
 8013cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013cb2:	4b42      	ldr	r3, [pc, #264]	; (8013dbc <xTaskResumeAll+0x118>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d10a      	bne.n	8013cd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8013cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cbe:	f383 8811 	msr	BASEPRI, r3
 8013cc2:	f3bf 8f6f 	isb	sy
 8013cc6:	f3bf 8f4f 	dsb	sy
 8013cca:	603b      	str	r3, [r7, #0]
}
 8013ccc:	bf00      	nop
 8013cce:	e7fe      	b.n	8013cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013cd0:	f001 fcd8 	bl	8015684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013cd4:	4b39      	ldr	r3, [pc, #228]	; (8013dbc <xTaskResumeAll+0x118>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	3b01      	subs	r3, #1
 8013cda:	4a38      	ldr	r2, [pc, #224]	; (8013dbc <xTaskResumeAll+0x118>)
 8013cdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cde:	4b37      	ldr	r3, [pc, #220]	; (8013dbc <xTaskResumeAll+0x118>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d162      	bne.n	8013dac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ce6:	4b36      	ldr	r3, [pc, #216]	; (8013dc0 <xTaskResumeAll+0x11c>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d05e      	beq.n	8013dac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cee:	e02f      	b.n	8013d50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cf0:	4b34      	ldr	r3, [pc, #208]	; (8013dc4 <xTaskResumeAll+0x120>)
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	3318      	adds	r3, #24
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fe fd9b 	bl	8012838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	3304      	adds	r3, #4
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fe fd96 	bl	8012838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d10:	4b2d      	ldr	r3, [pc, #180]	; (8013dc8 <xTaskResumeAll+0x124>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d903      	bls.n	8013d20 <xTaskResumeAll+0x7c>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1c:	4a2a      	ldr	r2, [pc, #168]	; (8013dc8 <xTaskResumeAll+0x124>)
 8013d1e:	6013      	str	r3, [r2, #0]
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d24:	4613      	mov	r3, r2
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	4413      	add	r3, r2
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4a27      	ldr	r2, [pc, #156]	; (8013dcc <xTaskResumeAll+0x128>)
 8013d2e:	441a      	add	r2, r3
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	3304      	adds	r3, #4
 8013d34:	4619      	mov	r1, r3
 8013d36:	4610      	mov	r0, r2
 8013d38:	f7fe fd21 	bl	801277e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d40:	4b23      	ldr	r3, [pc, #140]	; (8013dd0 <xTaskResumeAll+0x12c>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d302      	bcc.n	8013d50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013d4a:	4b22      	ldr	r3, [pc, #136]	; (8013dd4 <xTaskResumeAll+0x130>)
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d50:	4b1c      	ldr	r3, [pc, #112]	; (8013dc4 <xTaskResumeAll+0x120>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d1cb      	bne.n	8013cf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d001      	beq.n	8013d62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013d5e:	f000 fb5f 	bl	8014420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013d62:	4b1d      	ldr	r3, [pc, #116]	; (8013dd8 <xTaskResumeAll+0x134>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d010      	beq.n	8013d90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013d6e:	f000 f847 	bl	8013e00 <xTaskIncrementTick>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d002      	beq.n	8013d7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013d78:	4b16      	ldr	r3, [pc, #88]	; (8013dd4 <xTaskResumeAll+0x130>)
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	3b01      	subs	r3, #1
 8013d82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d1f1      	bne.n	8013d6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013d8a:	4b13      	ldr	r3, [pc, #76]	; (8013dd8 <xTaskResumeAll+0x134>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013d90:	4b10      	ldr	r3, [pc, #64]	; (8013dd4 <xTaskResumeAll+0x130>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d009      	beq.n	8013dac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d9c:	4b0f      	ldr	r3, [pc, #60]	; (8013ddc <xTaskResumeAll+0x138>)
 8013d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013da2:	601a      	str	r2, [r3, #0]
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013dac:	f001 fc9a 	bl	80156e4 <vPortExitCritical>

	return xAlreadyYielded;
 8013db0:	68bb      	ldr	r3, [r7, #8]
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3710      	adds	r7, #16
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	20001ac8 	.word	0x20001ac8
 8013dc0:	20001aa0 	.word	0x20001aa0
 8013dc4:	20001a60 	.word	0x20001a60
 8013dc8:	20001aa8 	.word	0x20001aa8
 8013dcc:	200015d0 	.word	0x200015d0
 8013dd0:	200015cc 	.word	0x200015cc
 8013dd4:	20001ab4 	.word	0x20001ab4
 8013dd8:	20001ab0 	.word	0x20001ab0
 8013ddc:	e000ed04 	.word	0xe000ed04

08013de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013de0:	b480      	push	{r7}
 8013de2:	b083      	sub	sp, #12
 8013de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013de6:	4b05      	ldr	r3, [pc, #20]	; (8013dfc <xTaskGetTickCount+0x1c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013dec:	687b      	ldr	r3, [r7, #4]
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	370c      	adds	r7, #12
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr
 8013dfa:	bf00      	nop
 8013dfc:	20001aa4 	.word	0x20001aa4

08013e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013e06:	2300      	movs	r3, #0
 8013e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e0a:	4b4f      	ldr	r3, [pc, #316]	; (8013f48 <xTaskIncrementTick+0x148>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	f040 808f 	bne.w	8013f32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e14:	4b4d      	ldr	r3, [pc, #308]	; (8013f4c <xTaskIncrementTick+0x14c>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013e1c:	4a4b      	ldr	r2, [pc, #300]	; (8013f4c <xTaskIncrementTick+0x14c>)
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d120      	bne.n	8013e6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e28:	4b49      	ldr	r3, [pc, #292]	; (8013f50 <xTaskIncrementTick+0x150>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d00a      	beq.n	8013e48 <xTaskIncrementTick+0x48>
	__asm volatile
 8013e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e36:	f383 8811 	msr	BASEPRI, r3
 8013e3a:	f3bf 8f6f 	isb	sy
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	603b      	str	r3, [r7, #0]
}
 8013e44:	bf00      	nop
 8013e46:	e7fe      	b.n	8013e46 <xTaskIncrementTick+0x46>
 8013e48:	4b41      	ldr	r3, [pc, #260]	; (8013f50 <xTaskIncrementTick+0x150>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	60fb      	str	r3, [r7, #12]
 8013e4e:	4b41      	ldr	r3, [pc, #260]	; (8013f54 <xTaskIncrementTick+0x154>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	4a3f      	ldr	r2, [pc, #252]	; (8013f50 <xTaskIncrementTick+0x150>)
 8013e54:	6013      	str	r3, [r2, #0]
 8013e56:	4a3f      	ldr	r2, [pc, #252]	; (8013f54 <xTaskIncrementTick+0x154>)
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	6013      	str	r3, [r2, #0]
 8013e5c:	4b3e      	ldr	r3, [pc, #248]	; (8013f58 <xTaskIncrementTick+0x158>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	3301      	adds	r3, #1
 8013e62:	4a3d      	ldr	r2, [pc, #244]	; (8013f58 <xTaskIncrementTick+0x158>)
 8013e64:	6013      	str	r3, [r2, #0]
 8013e66:	f000 fadb 	bl	8014420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013e6a:	4b3c      	ldr	r3, [pc, #240]	; (8013f5c <xTaskIncrementTick+0x15c>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	693a      	ldr	r2, [r7, #16]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d349      	bcc.n	8013f08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e74:	4b36      	ldr	r3, [pc, #216]	; (8013f50 <xTaskIncrementTick+0x150>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d104      	bne.n	8013e88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e7e:	4b37      	ldr	r3, [pc, #220]	; (8013f5c <xTaskIncrementTick+0x15c>)
 8013e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e84:	601a      	str	r2, [r3, #0]
					break;
 8013e86:	e03f      	b.n	8013f08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e88:	4b31      	ldr	r3, [pc, #196]	; (8013f50 <xTaskIncrementTick+0x150>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	68db      	ldr	r3, [r3, #12]
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	685b      	ldr	r3, [r3, #4]
 8013e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e98:	693a      	ldr	r2, [r7, #16]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d203      	bcs.n	8013ea8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013ea0:	4a2e      	ldr	r2, [pc, #184]	; (8013f5c <xTaskIncrementTick+0x15c>)
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013ea6:	e02f      	b.n	8013f08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	3304      	adds	r3, #4
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fe fcc3 	bl	8012838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d004      	beq.n	8013ec4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	3318      	adds	r3, #24
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fe fcba 	bl	8012838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec8:	4b25      	ldr	r3, [pc, #148]	; (8013f60 <xTaskIncrementTick+0x160>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d903      	bls.n	8013ed8 <xTaskIncrementTick+0xd8>
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed4:	4a22      	ldr	r2, [pc, #136]	; (8013f60 <xTaskIncrementTick+0x160>)
 8013ed6:	6013      	str	r3, [r2, #0]
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013edc:	4613      	mov	r3, r2
 8013ede:	009b      	lsls	r3, r3, #2
 8013ee0:	4413      	add	r3, r2
 8013ee2:	009b      	lsls	r3, r3, #2
 8013ee4:	4a1f      	ldr	r2, [pc, #124]	; (8013f64 <xTaskIncrementTick+0x164>)
 8013ee6:	441a      	add	r2, r3
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	3304      	adds	r3, #4
 8013eec:	4619      	mov	r1, r3
 8013eee:	4610      	mov	r0, r2
 8013ef0:	f7fe fc45 	bl	801277e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef8:	4b1b      	ldr	r3, [pc, #108]	; (8013f68 <xTaskIncrementTick+0x168>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d3b8      	bcc.n	8013e74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013f02:	2301      	movs	r3, #1
 8013f04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f06:	e7b5      	b.n	8013e74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f08:	4b17      	ldr	r3, [pc, #92]	; (8013f68 <xTaskIncrementTick+0x168>)
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f0e:	4915      	ldr	r1, [pc, #84]	; (8013f64 <xTaskIncrementTick+0x164>)
 8013f10:	4613      	mov	r3, r2
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	4413      	add	r3, r2
 8013f16:	009b      	lsls	r3, r3, #2
 8013f18:	440b      	add	r3, r1
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	d901      	bls.n	8013f24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013f20:	2301      	movs	r3, #1
 8013f22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013f24:	4b11      	ldr	r3, [pc, #68]	; (8013f6c <xTaskIncrementTick+0x16c>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d007      	beq.n	8013f3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	617b      	str	r3, [r7, #20]
 8013f30:	e004      	b.n	8013f3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013f32:	4b0f      	ldr	r3, [pc, #60]	; (8013f70 <xTaskIncrementTick+0x170>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	3301      	adds	r3, #1
 8013f38:	4a0d      	ldr	r2, [pc, #52]	; (8013f70 <xTaskIncrementTick+0x170>)
 8013f3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013f3c:	697b      	ldr	r3, [r7, #20]
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3718      	adds	r7, #24
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	20001ac8 	.word	0x20001ac8
 8013f4c:	20001aa4 	.word	0x20001aa4
 8013f50:	20001a58 	.word	0x20001a58
 8013f54:	20001a5c 	.word	0x20001a5c
 8013f58:	20001ab8 	.word	0x20001ab8
 8013f5c:	20001ac0 	.word	0x20001ac0
 8013f60:	20001aa8 	.word	0x20001aa8
 8013f64:	200015d0 	.word	0x200015d0
 8013f68:	200015cc 	.word	0x200015cc
 8013f6c:	20001ab4 	.word	0x20001ab4
 8013f70:	20001ab0 	.word	0x20001ab0

08013f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f7a:	4b2a      	ldr	r3, [pc, #168]	; (8014024 <vTaskSwitchContext+0xb0>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d003      	beq.n	8013f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f82:	4b29      	ldr	r3, [pc, #164]	; (8014028 <vTaskSwitchContext+0xb4>)
 8013f84:	2201      	movs	r2, #1
 8013f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f88:	e046      	b.n	8014018 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013f8a:	4b27      	ldr	r3, [pc, #156]	; (8014028 <vTaskSwitchContext+0xb4>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f90:	4b26      	ldr	r3, [pc, #152]	; (801402c <vTaskSwitchContext+0xb8>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	60fb      	str	r3, [r7, #12]
 8013f96:	e010      	b.n	8013fba <vTaskSwitchContext+0x46>
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d10a      	bne.n	8013fb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8013f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa2:	f383 8811 	msr	BASEPRI, r3
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	607b      	str	r3, [r7, #4]
}
 8013fb0:	bf00      	nop
 8013fb2:	e7fe      	b.n	8013fb2 <vTaskSwitchContext+0x3e>
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	60fb      	str	r3, [r7, #12]
 8013fba:	491d      	ldr	r1, [pc, #116]	; (8014030 <vTaskSwitchContext+0xbc>)
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4413      	add	r3, r2
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	440b      	add	r3, r1
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d0e4      	beq.n	8013f98 <vTaskSwitchContext+0x24>
 8013fce:	68fa      	ldr	r2, [r7, #12]
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	009b      	lsls	r3, r3, #2
 8013fd4:	4413      	add	r3, r2
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	4a15      	ldr	r2, [pc, #84]	; (8014030 <vTaskSwitchContext+0xbc>)
 8013fda:	4413      	add	r3, r2
 8013fdc:	60bb      	str	r3, [r7, #8]
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	685a      	ldr	r2, [r3, #4]
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	605a      	str	r2, [r3, #4]
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	685a      	ldr	r2, [r3, #4]
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	3308      	adds	r3, #8
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d104      	bne.n	8013ffe <vTaskSwitchContext+0x8a>
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	685a      	ldr	r2, [r3, #4]
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	605a      	str	r2, [r3, #4]
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	4a0b      	ldr	r2, [pc, #44]	; (8014034 <vTaskSwitchContext+0xc0>)
 8014006:	6013      	str	r3, [r2, #0]
 8014008:	4a08      	ldr	r2, [pc, #32]	; (801402c <vTaskSwitchContext+0xb8>)
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801400e:	4b09      	ldr	r3, [pc, #36]	; (8014034 <vTaskSwitchContext+0xc0>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	3354      	adds	r3, #84	; 0x54
 8014014:	4a08      	ldr	r2, [pc, #32]	; (8014038 <vTaskSwitchContext+0xc4>)
 8014016:	6013      	str	r3, [r2, #0]
}
 8014018:	bf00      	nop
 801401a:	3714      	adds	r7, #20
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr
 8014024:	20001ac8 	.word	0x20001ac8
 8014028:	20001ab4 	.word	0x20001ab4
 801402c:	20001aa8 	.word	0x20001aa8
 8014030:	200015d0 	.word	0x200015d0
 8014034:	200015cc 	.word	0x200015cc
 8014038:	200001a0 	.word	0x200001a0

0801403c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d10a      	bne.n	8014062 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014050:	f383 8811 	msr	BASEPRI, r3
 8014054:	f3bf 8f6f 	isb	sy
 8014058:	f3bf 8f4f 	dsb	sy
 801405c:	60fb      	str	r3, [r7, #12]
}
 801405e:	bf00      	nop
 8014060:	e7fe      	b.n	8014060 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014062:	4b07      	ldr	r3, [pc, #28]	; (8014080 <vTaskPlaceOnEventList+0x44>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	3318      	adds	r3, #24
 8014068:	4619      	mov	r1, r3
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f7fe fbab 	bl	80127c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014070:	2101      	movs	r1, #1
 8014072:	6838      	ldr	r0, [r7, #0]
 8014074:	f000 fd80 	bl	8014b78 <prvAddCurrentTaskToDelayedList>
}
 8014078:	bf00      	nop
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	200015cc 	.word	0x200015cc

08014084 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014084:	b580      	push	{r7, lr}
 8014086:	b086      	sub	sp, #24
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	60b9      	str	r1, [r7, #8]
 801408e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10a      	bne.n	80140ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801409a:	f383 8811 	msr	BASEPRI, r3
 801409e:	f3bf 8f6f 	isb	sy
 80140a2:	f3bf 8f4f 	dsb	sy
 80140a6:	617b      	str	r3, [r7, #20]
}
 80140a8:	bf00      	nop
 80140aa:	e7fe      	b.n	80140aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80140ac:	4b0a      	ldr	r3, [pc, #40]	; (80140d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	3318      	adds	r3, #24
 80140b2:	4619      	mov	r1, r3
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	f7fe fb62 	bl	801277e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80140c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80140c6:	6879      	ldr	r1, [r7, #4]
 80140c8:	68b8      	ldr	r0, [r7, #8]
 80140ca:	f000 fd55 	bl	8014b78 <prvAddCurrentTaskToDelayedList>
	}
 80140ce:	bf00      	nop
 80140d0:	3718      	adds	r7, #24
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	200015cc 	.word	0x200015cc

080140dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b086      	sub	sp, #24
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	68db      	ldr	r3, [r3, #12]
 80140ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d10a      	bne.n	8014108 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80140f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f6:	f383 8811 	msr	BASEPRI, r3
 80140fa:	f3bf 8f6f 	isb	sy
 80140fe:	f3bf 8f4f 	dsb	sy
 8014102:	60fb      	str	r3, [r7, #12]
}
 8014104:	bf00      	nop
 8014106:	e7fe      	b.n	8014106 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	3318      	adds	r3, #24
 801410c:	4618      	mov	r0, r3
 801410e:	f7fe fb93 	bl	8012838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014112:	4b1e      	ldr	r3, [pc, #120]	; (801418c <xTaskRemoveFromEventList+0xb0>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d11d      	bne.n	8014156 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	3304      	adds	r3, #4
 801411e:	4618      	mov	r0, r3
 8014120:	f7fe fb8a 	bl	8012838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014128:	4b19      	ldr	r3, [pc, #100]	; (8014190 <xTaskRemoveFromEventList+0xb4>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	429a      	cmp	r2, r3
 801412e:	d903      	bls.n	8014138 <xTaskRemoveFromEventList+0x5c>
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014134:	4a16      	ldr	r2, [pc, #88]	; (8014190 <xTaskRemoveFromEventList+0xb4>)
 8014136:	6013      	str	r3, [r2, #0]
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801413c:	4613      	mov	r3, r2
 801413e:	009b      	lsls	r3, r3, #2
 8014140:	4413      	add	r3, r2
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	4a13      	ldr	r2, [pc, #76]	; (8014194 <xTaskRemoveFromEventList+0xb8>)
 8014146:	441a      	add	r2, r3
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	3304      	adds	r3, #4
 801414c:	4619      	mov	r1, r3
 801414e:	4610      	mov	r0, r2
 8014150:	f7fe fb15 	bl	801277e <vListInsertEnd>
 8014154:	e005      	b.n	8014162 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	3318      	adds	r3, #24
 801415a:	4619      	mov	r1, r3
 801415c:	480e      	ldr	r0, [pc, #56]	; (8014198 <xTaskRemoveFromEventList+0xbc>)
 801415e:	f7fe fb0e 	bl	801277e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014166:	4b0d      	ldr	r3, [pc, #52]	; (801419c <xTaskRemoveFromEventList+0xc0>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416c:	429a      	cmp	r2, r3
 801416e:	d905      	bls.n	801417c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014174:	4b0a      	ldr	r3, [pc, #40]	; (80141a0 <xTaskRemoveFromEventList+0xc4>)
 8014176:	2201      	movs	r2, #1
 8014178:	601a      	str	r2, [r3, #0]
 801417a:	e001      	b.n	8014180 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801417c:	2300      	movs	r3, #0
 801417e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014180:	697b      	ldr	r3, [r7, #20]
}
 8014182:	4618      	mov	r0, r3
 8014184:	3718      	adds	r7, #24
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	20001ac8 	.word	0x20001ac8
 8014190:	20001aa8 	.word	0x20001aa8
 8014194:	200015d0 	.word	0x200015d0
 8014198:	20001a60 	.word	0x20001a60
 801419c:	200015cc 	.word	0x200015cc
 80141a0:	20001ab4 	.word	0x20001ab4

080141a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80141ac:	4b06      	ldr	r3, [pc, #24]	; (80141c8 <vTaskInternalSetTimeOutState+0x24>)
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80141b4:	4b05      	ldr	r3, [pc, #20]	; (80141cc <vTaskInternalSetTimeOutState+0x28>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	605a      	str	r2, [r3, #4]
}
 80141bc:	bf00      	nop
 80141be:	370c      	adds	r7, #12
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	20001ab8 	.word	0x20001ab8
 80141cc:	20001aa4 	.word	0x20001aa4

080141d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b088      	sub	sp, #32
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d10a      	bne.n	80141f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80141e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e4:	f383 8811 	msr	BASEPRI, r3
 80141e8:	f3bf 8f6f 	isb	sy
 80141ec:	f3bf 8f4f 	dsb	sy
 80141f0:	613b      	str	r3, [r7, #16]
}
 80141f2:	bf00      	nop
 80141f4:	e7fe      	b.n	80141f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d10a      	bne.n	8014212 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80141fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014200:	f383 8811 	msr	BASEPRI, r3
 8014204:	f3bf 8f6f 	isb	sy
 8014208:	f3bf 8f4f 	dsb	sy
 801420c:	60fb      	str	r3, [r7, #12]
}
 801420e:	bf00      	nop
 8014210:	e7fe      	b.n	8014210 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014212:	f001 fa37 	bl	8015684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014216:	4b1d      	ldr	r3, [pc, #116]	; (801428c <xTaskCheckForTimeOut+0xbc>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	69ba      	ldr	r2, [r7, #24]
 8014222:	1ad3      	subs	r3, r2, r3
 8014224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801422e:	d102      	bne.n	8014236 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014230:	2300      	movs	r3, #0
 8014232:	61fb      	str	r3, [r7, #28]
 8014234:	e023      	b.n	801427e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	4b15      	ldr	r3, [pc, #84]	; (8014290 <xTaskCheckForTimeOut+0xc0>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	429a      	cmp	r2, r3
 8014240:	d007      	beq.n	8014252 <xTaskCheckForTimeOut+0x82>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	69ba      	ldr	r2, [r7, #24]
 8014248:	429a      	cmp	r2, r3
 801424a:	d302      	bcc.n	8014252 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801424c:	2301      	movs	r3, #1
 801424e:	61fb      	str	r3, [r7, #28]
 8014250:	e015      	b.n	801427e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	697a      	ldr	r2, [r7, #20]
 8014258:	429a      	cmp	r2, r3
 801425a:	d20b      	bcs.n	8014274 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	1ad2      	subs	r2, r2, r3
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f7ff ff9b 	bl	80141a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801426e:	2300      	movs	r3, #0
 8014270:	61fb      	str	r3, [r7, #28]
 8014272:	e004      	b.n	801427e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	2200      	movs	r2, #0
 8014278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801427a:	2301      	movs	r3, #1
 801427c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801427e:	f001 fa31 	bl	80156e4 <vPortExitCritical>

	return xReturn;
 8014282:	69fb      	ldr	r3, [r7, #28]
}
 8014284:	4618      	mov	r0, r3
 8014286:	3720      	adds	r7, #32
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20001aa4 	.word	0x20001aa4
 8014290:	20001ab8 	.word	0x20001ab8

08014294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014294:	b480      	push	{r7}
 8014296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014298:	4b03      	ldr	r3, [pc, #12]	; (80142a8 <vTaskMissedYield+0x14>)
 801429a:	2201      	movs	r2, #1
 801429c:	601a      	str	r2, [r3, #0]
}
 801429e:	bf00      	nop
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr
 80142a8:	20001ab4 	.word	0x20001ab4

080142ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80142b4:	f000 f852 	bl	801435c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80142b8:	4b06      	ldr	r3, [pc, #24]	; (80142d4 <prvIdleTask+0x28>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d9f9      	bls.n	80142b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80142c0:	4b05      	ldr	r3, [pc, #20]	; (80142d8 <prvIdleTask+0x2c>)
 80142c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142c6:	601a      	str	r2, [r3, #0]
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80142d0:	e7f0      	b.n	80142b4 <prvIdleTask+0x8>
 80142d2:	bf00      	nop
 80142d4:	200015d0 	.word	0x200015d0
 80142d8:	e000ed04 	.word	0xe000ed04

080142dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142e2:	2300      	movs	r3, #0
 80142e4:	607b      	str	r3, [r7, #4]
 80142e6:	e00c      	b.n	8014302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	4613      	mov	r3, r2
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	4413      	add	r3, r2
 80142f0:	009b      	lsls	r3, r3, #2
 80142f2:	4a12      	ldr	r2, [pc, #72]	; (801433c <prvInitialiseTaskLists+0x60>)
 80142f4:	4413      	add	r3, r2
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7fe fa14 	bl	8012724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	3301      	adds	r3, #1
 8014300:	607b      	str	r3, [r7, #4]
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b37      	cmp	r3, #55	; 0x37
 8014306:	d9ef      	bls.n	80142e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014308:	480d      	ldr	r0, [pc, #52]	; (8014340 <prvInitialiseTaskLists+0x64>)
 801430a:	f7fe fa0b 	bl	8012724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801430e:	480d      	ldr	r0, [pc, #52]	; (8014344 <prvInitialiseTaskLists+0x68>)
 8014310:	f7fe fa08 	bl	8012724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014314:	480c      	ldr	r0, [pc, #48]	; (8014348 <prvInitialiseTaskLists+0x6c>)
 8014316:	f7fe fa05 	bl	8012724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801431a:	480c      	ldr	r0, [pc, #48]	; (801434c <prvInitialiseTaskLists+0x70>)
 801431c:	f7fe fa02 	bl	8012724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014320:	480b      	ldr	r0, [pc, #44]	; (8014350 <prvInitialiseTaskLists+0x74>)
 8014322:	f7fe f9ff 	bl	8012724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014326:	4b0b      	ldr	r3, [pc, #44]	; (8014354 <prvInitialiseTaskLists+0x78>)
 8014328:	4a05      	ldr	r2, [pc, #20]	; (8014340 <prvInitialiseTaskLists+0x64>)
 801432a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801432c:	4b0a      	ldr	r3, [pc, #40]	; (8014358 <prvInitialiseTaskLists+0x7c>)
 801432e:	4a05      	ldr	r2, [pc, #20]	; (8014344 <prvInitialiseTaskLists+0x68>)
 8014330:	601a      	str	r2, [r3, #0]
}
 8014332:	bf00      	nop
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	200015d0 	.word	0x200015d0
 8014340:	20001a30 	.word	0x20001a30
 8014344:	20001a44 	.word	0x20001a44
 8014348:	20001a60 	.word	0x20001a60
 801434c:	20001a74 	.word	0x20001a74
 8014350:	20001a8c 	.word	0x20001a8c
 8014354:	20001a58 	.word	0x20001a58
 8014358:	20001a5c 	.word	0x20001a5c

0801435c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014362:	e019      	b.n	8014398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014364:	f001 f98e 	bl	8015684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014368:	4b10      	ldr	r3, [pc, #64]	; (80143ac <prvCheckTasksWaitingTermination+0x50>)
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	68db      	ldr	r3, [r3, #12]
 801436e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	3304      	adds	r3, #4
 8014374:	4618      	mov	r0, r3
 8014376:	f7fe fa5f 	bl	8012838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801437a:	4b0d      	ldr	r3, [pc, #52]	; (80143b0 <prvCheckTasksWaitingTermination+0x54>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	3b01      	subs	r3, #1
 8014380:	4a0b      	ldr	r2, [pc, #44]	; (80143b0 <prvCheckTasksWaitingTermination+0x54>)
 8014382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014384:	4b0b      	ldr	r3, [pc, #44]	; (80143b4 <prvCheckTasksWaitingTermination+0x58>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	3b01      	subs	r3, #1
 801438a:	4a0a      	ldr	r2, [pc, #40]	; (80143b4 <prvCheckTasksWaitingTermination+0x58>)
 801438c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801438e:	f001 f9a9 	bl	80156e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 f810 	bl	80143b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014398:	4b06      	ldr	r3, [pc, #24]	; (80143b4 <prvCheckTasksWaitingTermination+0x58>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d1e1      	bne.n	8014364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80143a0:	bf00      	nop
 80143a2:	bf00      	nop
 80143a4:	3708      	adds	r7, #8
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	20001a74 	.word	0x20001a74
 80143b0:	20001aa0 	.word	0x20001aa0
 80143b4:	20001a88 	.word	0x20001a88

080143b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	3354      	adds	r3, #84	; 0x54
 80143c4:	4618      	mov	r0, r3
 80143c6:	f003 f839 	bl	801743c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d108      	bne.n	80143e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143d8:	4618      	mov	r0, r3
 80143da:	f001 fb41 	bl	8015a60 <vPortFree>
				vPortFree( pxTCB );
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f001 fb3e 	bl	8015a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80143e4:	e018      	b.n	8014418 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d103      	bne.n	80143f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f001 fb35 	bl	8015a60 <vPortFree>
	}
 80143f6:	e00f      	b.n	8014418 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80143fe:	2b02      	cmp	r3, #2
 8014400:	d00a      	beq.n	8014418 <prvDeleteTCB+0x60>
	__asm volatile
 8014402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014406:	f383 8811 	msr	BASEPRI, r3
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	60fb      	str	r3, [r7, #12]
}
 8014414:	bf00      	nop
 8014416:	e7fe      	b.n	8014416 <prvDeleteTCB+0x5e>
	}
 8014418:	bf00      	nop
 801441a:	3710      	adds	r7, #16
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014426:	4b0c      	ldr	r3, [pc, #48]	; (8014458 <prvResetNextTaskUnblockTime+0x38>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d104      	bne.n	801443a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014430:	4b0a      	ldr	r3, [pc, #40]	; (801445c <prvResetNextTaskUnblockTime+0x3c>)
 8014432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014438:	e008      	b.n	801444c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801443a:	4b07      	ldr	r3, [pc, #28]	; (8014458 <prvResetNextTaskUnblockTime+0x38>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	68db      	ldr	r3, [r3, #12]
 8014440:	68db      	ldr	r3, [r3, #12]
 8014442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	4a04      	ldr	r2, [pc, #16]	; (801445c <prvResetNextTaskUnblockTime+0x3c>)
 801444a:	6013      	str	r3, [r2, #0]
}
 801444c:	bf00      	nop
 801444e:	370c      	adds	r7, #12
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr
 8014458:	20001a58 	.word	0x20001a58
 801445c:	20001ac0 	.word	0x20001ac0

08014460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014460:	b480      	push	{r7}
 8014462:	b083      	sub	sp, #12
 8014464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014466:	4b0b      	ldr	r3, [pc, #44]	; (8014494 <xTaskGetSchedulerState+0x34>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d102      	bne.n	8014474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801446e:	2301      	movs	r3, #1
 8014470:	607b      	str	r3, [r7, #4]
 8014472:	e008      	b.n	8014486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014474:	4b08      	ldr	r3, [pc, #32]	; (8014498 <xTaskGetSchedulerState+0x38>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d102      	bne.n	8014482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801447c:	2302      	movs	r3, #2
 801447e:	607b      	str	r3, [r7, #4]
 8014480:	e001      	b.n	8014486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014482:	2300      	movs	r3, #0
 8014484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014486:	687b      	ldr	r3, [r7, #4]
	}
 8014488:	4618      	mov	r0, r3
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr
 8014494:	20001aac 	.word	0x20001aac
 8014498:	20001ac8 	.word	0x20001ac8

0801449c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801449c:	b580      	push	{r7, lr}
 801449e:	b084      	sub	sp, #16
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80144a8:	2300      	movs	r3, #0
 80144aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d051      	beq.n	8014556 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b6:	4b2a      	ldr	r3, [pc, #168]	; (8014560 <xTaskPriorityInherit+0xc4>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144bc:	429a      	cmp	r2, r3
 80144be:	d241      	bcs.n	8014544 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	699b      	ldr	r3, [r3, #24]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	db06      	blt.n	80144d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144c8:	4b25      	ldr	r3, [pc, #148]	; (8014560 <xTaskPriorityInherit+0xc4>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	6959      	ldr	r1, [r3, #20]
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144de:	4613      	mov	r3, r2
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	4413      	add	r3, r2
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	4a1f      	ldr	r2, [pc, #124]	; (8014564 <xTaskPriorityInherit+0xc8>)
 80144e8:	4413      	add	r3, r2
 80144ea:	4299      	cmp	r1, r3
 80144ec:	d122      	bne.n	8014534 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	3304      	adds	r3, #4
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7fe f9a0 	bl	8012838 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80144f8:	4b19      	ldr	r3, [pc, #100]	; (8014560 <xTaskPriorityInherit+0xc4>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014506:	4b18      	ldr	r3, [pc, #96]	; (8014568 <xTaskPriorityInherit+0xcc>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	429a      	cmp	r2, r3
 801450c:	d903      	bls.n	8014516 <xTaskPriorityInherit+0x7a>
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014512:	4a15      	ldr	r2, [pc, #84]	; (8014568 <xTaskPriorityInherit+0xcc>)
 8014514:	6013      	str	r3, [r2, #0]
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801451a:	4613      	mov	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4413      	add	r3, r2
 8014520:	009b      	lsls	r3, r3, #2
 8014522:	4a10      	ldr	r2, [pc, #64]	; (8014564 <xTaskPriorityInherit+0xc8>)
 8014524:	441a      	add	r2, r3
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	3304      	adds	r3, #4
 801452a:	4619      	mov	r1, r3
 801452c:	4610      	mov	r0, r2
 801452e:	f7fe f926 	bl	801277e <vListInsertEnd>
 8014532:	e004      	b.n	801453e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014534:	4b0a      	ldr	r3, [pc, #40]	; (8014560 <xTaskPriorityInherit+0xc4>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801453e:	2301      	movs	r3, #1
 8014540:	60fb      	str	r3, [r7, #12]
 8014542:	e008      	b.n	8014556 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014548:	4b05      	ldr	r3, [pc, #20]	; (8014560 <xTaskPriorityInherit+0xc4>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801454e:	429a      	cmp	r2, r3
 8014550:	d201      	bcs.n	8014556 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014552:	2301      	movs	r3, #1
 8014554:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014556:	68fb      	ldr	r3, [r7, #12]
	}
 8014558:	4618      	mov	r0, r3
 801455a:	3710      	adds	r7, #16
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	200015cc 	.word	0x200015cc
 8014564:	200015d0 	.word	0x200015d0
 8014568:	20001aa8 	.word	0x20001aa8

0801456c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014578:	2300      	movs	r3, #0
 801457a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d056      	beq.n	8014630 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014582:	4b2e      	ldr	r3, [pc, #184]	; (801463c <xTaskPriorityDisinherit+0xd0>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	693a      	ldr	r2, [r7, #16]
 8014588:	429a      	cmp	r2, r3
 801458a:	d00a      	beq.n	80145a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014590:	f383 8811 	msr	BASEPRI, r3
 8014594:	f3bf 8f6f 	isb	sy
 8014598:	f3bf 8f4f 	dsb	sy
 801459c:	60fb      	str	r3, [r7, #12]
}
 801459e:	bf00      	nop
 80145a0:	e7fe      	b.n	80145a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80145a2:	693b      	ldr	r3, [r7, #16]
 80145a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d10a      	bne.n	80145c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80145aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ae:	f383 8811 	msr	BASEPRI, r3
 80145b2:	f3bf 8f6f 	isb	sy
 80145b6:	f3bf 8f4f 	dsb	sy
 80145ba:	60bb      	str	r3, [r7, #8]
}
 80145bc:	bf00      	nop
 80145be:	e7fe      	b.n	80145be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145c4:	1e5a      	subs	r2, r3, #1
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d02c      	beq.n	8014630 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d128      	bne.n	8014630 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	3304      	adds	r3, #4
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe f928 	bl	8012838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014600:	4b0f      	ldr	r3, [pc, #60]	; (8014640 <xTaskPriorityDisinherit+0xd4>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	429a      	cmp	r2, r3
 8014606:	d903      	bls.n	8014610 <xTaskPriorityDisinherit+0xa4>
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801460c:	4a0c      	ldr	r2, [pc, #48]	; (8014640 <xTaskPriorityDisinherit+0xd4>)
 801460e:	6013      	str	r3, [r2, #0]
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014614:	4613      	mov	r3, r2
 8014616:	009b      	lsls	r3, r3, #2
 8014618:	4413      	add	r3, r2
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	4a09      	ldr	r2, [pc, #36]	; (8014644 <xTaskPriorityDisinherit+0xd8>)
 801461e:	441a      	add	r2, r3
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	3304      	adds	r3, #4
 8014624:	4619      	mov	r1, r3
 8014626:	4610      	mov	r0, r2
 8014628:	f7fe f8a9 	bl	801277e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801462c:	2301      	movs	r3, #1
 801462e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014630:	697b      	ldr	r3, [r7, #20]
	}
 8014632:	4618      	mov	r0, r3
 8014634:	3718      	adds	r7, #24
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	200015cc 	.word	0x200015cc
 8014640:	20001aa8 	.word	0x20001aa8
 8014644:	200015d0 	.word	0x200015d0

08014648 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014648:	b580      	push	{r7, lr}
 801464a:	b088      	sub	sp, #32
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014656:	2301      	movs	r3, #1
 8014658:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d06a      	beq.n	8014736 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014660:	69bb      	ldr	r3, [r7, #24]
 8014662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014664:	2b00      	cmp	r3, #0
 8014666:	d10a      	bne.n	801467e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801466c:	f383 8811 	msr	BASEPRI, r3
 8014670:	f3bf 8f6f 	isb	sy
 8014674:	f3bf 8f4f 	dsb	sy
 8014678:	60fb      	str	r3, [r7, #12]
}
 801467a:	bf00      	nop
 801467c:	e7fe      	b.n	801467c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014682:	683a      	ldr	r2, [r7, #0]
 8014684:	429a      	cmp	r2, r3
 8014686:	d902      	bls.n	801468e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	61fb      	str	r3, [r7, #28]
 801468c:	e002      	b.n	8014694 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801468e:	69bb      	ldr	r3, [r7, #24]
 8014690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014692:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014694:	69bb      	ldr	r3, [r7, #24]
 8014696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014698:	69fa      	ldr	r2, [r7, #28]
 801469a:	429a      	cmp	r2, r3
 801469c:	d04b      	beq.n	8014736 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801469e:	69bb      	ldr	r3, [r7, #24]
 80146a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146a2:	697a      	ldr	r2, [r7, #20]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d146      	bne.n	8014736 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80146a8:	4b25      	ldr	r3, [pc, #148]	; (8014740 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	69ba      	ldr	r2, [r7, #24]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d10a      	bne.n	80146c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80146b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b6:	f383 8811 	msr	BASEPRI, r3
 80146ba:	f3bf 8f6f 	isb	sy
 80146be:	f3bf 8f4f 	dsb	sy
 80146c2:	60bb      	str	r3, [r7, #8]
}
 80146c4:	bf00      	nop
 80146c6:	e7fe      	b.n	80146c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80146ce:	69bb      	ldr	r3, [r7, #24]
 80146d0:	69fa      	ldr	r2, [r7, #28]
 80146d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	699b      	ldr	r3, [r3, #24]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	db04      	blt.n	80146e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80146e2:	69bb      	ldr	r3, [r7, #24]
 80146e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	6959      	ldr	r1, [r3, #20]
 80146ea:	693a      	ldr	r2, [r7, #16]
 80146ec:	4613      	mov	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	4a13      	ldr	r2, [pc, #76]	; (8014744 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80146f6:	4413      	add	r3, r2
 80146f8:	4299      	cmp	r1, r3
 80146fa:	d11c      	bne.n	8014736 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	3304      	adds	r3, #4
 8014700:	4618      	mov	r0, r3
 8014702:	f7fe f899 	bl	8012838 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801470a:	4b0f      	ldr	r3, [pc, #60]	; (8014748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	429a      	cmp	r2, r3
 8014710:	d903      	bls.n	801471a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014716:	4a0c      	ldr	r2, [pc, #48]	; (8014748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014718:	6013      	str	r3, [r2, #0]
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801471e:	4613      	mov	r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	4413      	add	r3, r2
 8014724:	009b      	lsls	r3, r3, #2
 8014726:	4a07      	ldr	r2, [pc, #28]	; (8014744 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014728:	441a      	add	r2, r3
 801472a:	69bb      	ldr	r3, [r7, #24]
 801472c:	3304      	adds	r3, #4
 801472e:	4619      	mov	r1, r3
 8014730:	4610      	mov	r0, r2
 8014732:	f7fe f824 	bl	801277e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014736:	bf00      	nop
 8014738:	3720      	adds	r7, #32
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	200015cc 	.word	0x200015cc
 8014744:	200015d0 	.word	0x200015d0
 8014748:	20001aa8 	.word	0x20001aa8

0801474c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801474c:	b480      	push	{r7}
 801474e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014750:	4b07      	ldr	r3, [pc, #28]	; (8014770 <pvTaskIncrementMutexHeldCount+0x24>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d004      	beq.n	8014762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014758:	4b05      	ldr	r3, [pc, #20]	; (8014770 <pvTaskIncrementMutexHeldCount+0x24>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801475e:	3201      	adds	r2, #1
 8014760:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014762:	4b03      	ldr	r3, [pc, #12]	; (8014770 <pvTaskIncrementMutexHeldCount+0x24>)
 8014764:	681b      	ldr	r3, [r3, #0]
	}
 8014766:	4618      	mov	r0, r3
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr
 8014770:	200015cc 	.word	0x200015cc

08014774 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
 8014780:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8014782:	f000 ff7f 	bl	8015684 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014786:	4b29      	ldr	r3, [pc, #164]	; (801482c <xTaskNotifyWait+0xb8>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801478e:	b2db      	uxtb	r3, r3
 8014790:	2b02      	cmp	r3, #2
 8014792:	d01c      	beq.n	80147ce <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8014794:	4b25      	ldr	r3, [pc, #148]	; (801482c <xTaskNotifyWait+0xb8>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 801479c:	68fa      	ldr	r2, [r7, #12]
 801479e:	43d2      	mvns	r2, r2
 80147a0:	400a      	ands	r2, r1
 80147a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80147a6:	4b21      	ldr	r3, [pc, #132]	; (801482c <xTaskNotifyWait+0xb8>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2201      	movs	r2, #1
 80147ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d00b      	beq.n	80147ce <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147b6:	2101      	movs	r1, #1
 80147b8:	6838      	ldr	r0, [r7, #0]
 80147ba:	f000 f9dd 	bl	8014b78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80147be:	4b1c      	ldr	r3, [pc, #112]	; (8014830 <xTaskNotifyWait+0xbc>)
 80147c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147c4:	601a      	str	r2, [r3, #0]
 80147c6:	f3bf 8f4f 	dsb	sy
 80147ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80147ce:	f000 ff89 	bl	80156e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80147d2:	f000 ff57 	bl	8015684 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d005      	beq.n	80147e8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80147dc:	4b13      	ldr	r3, [pc, #76]	; (801482c <xTaskNotifyWait+0xb8>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80147e8:	4b10      	ldr	r3, [pc, #64]	; (801482c <xTaskNotifyWait+0xb8>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	2b02      	cmp	r3, #2
 80147f4:	d002      	beq.n	80147fc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80147f6:	2300      	movs	r3, #0
 80147f8:	617b      	str	r3, [r7, #20]
 80147fa:	e00a      	b.n	8014812 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80147fc:	4b0b      	ldr	r3, [pc, #44]	; (801482c <xTaskNotifyWait+0xb8>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8014804:	68ba      	ldr	r2, [r7, #8]
 8014806:	43d2      	mvns	r2, r2
 8014808:	400a      	ands	r2, r1
 801480a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 801480e:	2301      	movs	r3, #1
 8014810:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014812:	4b06      	ldr	r3, [pc, #24]	; (801482c <xTaskNotifyWait+0xb8>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2200      	movs	r2, #0
 8014818:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 801481c:	f000 ff62 	bl	80156e4 <vPortExitCritical>

		return xReturn;
 8014820:	697b      	ldr	r3, [r7, #20]
	}
 8014822:	4618      	mov	r0, r3
 8014824:	3718      	adds	r7, #24
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	200015cc 	.word	0x200015cc
 8014830:	e000ed04 	.word	0xe000ed04

08014834 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014834:	b580      	push	{r7, lr}
 8014836:	b08a      	sub	sp, #40	; 0x28
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	603b      	str	r3, [r7, #0]
 8014840:	4613      	mov	r3, r2
 8014842:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014844:	2301      	movs	r3, #1
 8014846:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d10a      	bne.n	8014864 <xTaskGenericNotify+0x30>
	__asm volatile
 801484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014852:	f383 8811 	msr	BASEPRI, r3
 8014856:	f3bf 8f6f 	isb	sy
 801485a:	f3bf 8f4f 	dsb	sy
 801485e:	61bb      	str	r3, [r7, #24]
}
 8014860:	bf00      	nop
 8014862:	e7fe      	b.n	8014862 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014868:	f000 ff0c 	bl	8015684 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d004      	beq.n	801487c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014872:	6a3b      	ldr	r3, [r7, #32]
 8014874:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801487c:	6a3b      	ldr	r3, [r7, #32]
 801487e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8014882:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014884:	6a3b      	ldr	r3, [r7, #32]
 8014886:	2202      	movs	r2, #2
 8014888:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 801488c:	79fb      	ldrb	r3, [r7, #7]
 801488e:	2b04      	cmp	r3, #4
 8014890:	d82d      	bhi.n	80148ee <xTaskGenericNotify+0xba>
 8014892:	a201      	add	r2, pc, #4	; (adr r2, 8014898 <xTaskGenericNotify+0x64>)
 8014894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014898:	08014911 	.word	0x08014911
 801489c:	080148ad 	.word	0x080148ad
 80148a0:	080148bf 	.word	0x080148bf
 80148a4:	080148cf 	.word	0x080148cf
 80148a8:	080148d9 	.word	0x080148d9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80148ac:	6a3b      	ldr	r3, [r7, #32]
 80148ae:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	431a      	orrs	r2, r3
 80148b6:	6a3b      	ldr	r3, [r7, #32]
 80148b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80148bc:	e02b      	b.n	8014916 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80148be:	6a3b      	ldr	r3, [r7, #32]
 80148c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148c4:	1c5a      	adds	r2, r3, #1
 80148c6:	6a3b      	ldr	r3, [r7, #32]
 80148c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80148cc:	e023      	b.n	8014916 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	68ba      	ldr	r2, [r7, #8]
 80148d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80148d6:	e01e      	b.n	8014916 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80148d8:	7ffb      	ldrb	r3, [r7, #31]
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d004      	beq.n	80148e8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80148de:	6a3b      	ldr	r3, [r7, #32]
 80148e0:	68ba      	ldr	r2, [r7, #8]
 80148e2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80148e6:	e016      	b.n	8014916 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80148e8:	2300      	movs	r3, #0
 80148ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80148ec:	e013      	b.n	8014916 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80148ee:	6a3b      	ldr	r3, [r7, #32]
 80148f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148f8:	d00c      	beq.n	8014914 <xTaskGenericNotify+0xe0>
	__asm volatile
 80148fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fe:	f383 8811 	msr	BASEPRI, r3
 8014902:	f3bf 8f6f 	isb	sy
 8014906:	f3bf 8f4f 	dsb	sy
 801490a:	617b      	str	r3, [r7, #20]
}
 801490c:	bf00      	nop
 801490e:	e7fe      	b.n	801490e <xTaskGenericNotify+0xda>
					break;
 8014910:	bf00      	nop
 8014912:	e000      	b.n	8014916 <xTaskGenericNotify+0xe2>

					break;
 8014914:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014916:	7ffb      	ldrb	r3, [r7, #31]
 8014918:	2b01      	cmp	r3, #1
 801491a:	d13a      	bne.n	8014992 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801491c:	6a3b      	ldr	r3, [r7, #32]
 801491e:	3304      	adds	r3, #4
 8014920:	4618      	mov	r0, r3
 8014922:	f7fd ff89 	bl	8012838 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014926:	6a3b      	ldr	r3, [r7, #32]
 8014928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801492a:	4b1d      	ldr	r3, [pc, #116]	; (80149a0 <xTaskGenericNotify+0x16c>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	429a      	cmp	r2, r3
 8014930:	d903      	bls.n	801493a <xTaskGenericNotify+0x106>
 8014932:	6a3b      	ldr	r3, [r7, #32]
 8014934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014936:	4a1a      	ldr	r2, [pc, #104]	; (80149a0 <xTaskGenericNotify+0x16c>)
 8014938:	6013      	str	r3, [r2, #0]
 801493a:	6a3b      	ldr	r3, [r7, #32]
 801493c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801493e:	4613      	mov	r3, r2
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	4413      	add	r3, r2
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	4a17      	ldr	r2, [pc, #92]	; (80149a4 <xTaskGenericNotify+0x170>)
 8014948:	441a      	add	r2, r3
 801494a:	6a3b      	ldr	r3, [r7, #32]
 801494c:	3304      	adds	r3, #4
 801494e:	4619      	mov	r1, r3
 8014950:	4610      	mov	r0, r2
 8014952:	f7fd ff14 	bl	801277e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014956:	6a3b      	ldr	r3, [r7, #32]
 8014958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00a      	beq.n	8014974 <xTaskGenericNotify+0x140>
	__asm volatile
 801495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014962:	f383 8811 	msr	BASEPRI, r3
 8014966:	f3bf 8f6f 	isb	sy
 801496a:	f3bf 8f4f 	dsb	sy
 801496e:	613b      	str	r3, [r7, #16]
}
 8014970:	bf00      	nop
 8014972:	e7fe      	b.n	8014972 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014974:	6a3b      	ldr	r3, [r7, #32]
 8014976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014978:	4b0b      	ldr	r3, [pc, #44]	; (80149a8 <xTaskGenericNotify+0x174>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801497e:	429a      	cmp	r2, r3
 8014980:	d907      	bls.n	8014992 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014982:	4b0a      	ldr	r3, [pc, #40]	; (80149ac <xTaskGenericNotify+0x178>)
 8014984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014988:	601a      	str	r2, [r3, #0]
 801498a:	f3bf 8f4f 	dsb	sy
 801498e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014992:	f000 fea7 	bl	80156e4 <vPortExitCritical>

		return xReturn;
 8014996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014998:	4618      	mov	r0, r3
 801499a:	3728      	adds	r7, #40	; 0x28
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	20001aa8 	.word	0x20001aa8
 80149a4:	200015d0 	.word	0x200015d0
 80149a8:	200015cc 	.word	0x200015cc
 80149ac:	e000ed04 	.word	0xe000ed04

080149b0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b08e      	sub	sp, #56	; 0x38
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	60b9      	str	r1, [r7, #8]
 80149ba:	603b      	str	r3, [r7, #0]
 80149bc:	4613      	mov	r3, r2
 80149be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80149c0:	2301      	movs	r3, #1
 80149c2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d10a      	bne.n	80149e0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80149ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ce:	f383 8811 	msr	BASEPRI, r3
 80149d2:	f3bf 8f6f 	isb	sy
 80149d6:	f3bf 8f4f 	dsb	sy
 80149da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80149dc:	bf00      	nop
 80149de:	e7fe      	b.n	80149de <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149e0:	f000 ff32 	bl	8015848 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80149e8:	f3ef 8211 	mrs	r2, BASEPRI
 80149ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f0:	f383 8811 	msr	BASEPRI, r3
 80149f4:	f3bf 8f6f 	isb	sy
 80149f8:	f3bf 8f4f 	dsb	sy
 80149fc:	623a      	str	r2, [r7, #32]
 80149fe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014a00:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014a02:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d004      	beq.n	8014a14 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a16:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8014a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a20:	2202      	movs	r2, #2
 8014a22:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8014a26:	79fb      	ldrb	r3, [r7, #7]
 8014a28:	2b04      	cmp	r3, #4
 8014a2a:	d82f      	bhi.n	8014a8c <xTaskGenericNotifyFromISR+0xdc>
 8014a2c:	a201      	add	r2, pc, #4	; (adr r2, 8014a34 <xTaskGenericNotifyFromISR+0x84>)
 8014a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a32:	bf00      	nop
 8014a34:	08014aaf 	.word	0x08014aaf
 8014a38:	08014a49 	.word	0x08014a49
 8014a3c:	08014a5b 	.word	0x08014a5b
 8014a40:	08014a6b 	.word	0x08014a6b
 8014a44:	08014a75 	.word	0x08014a75
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a4a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	431a      	orrs	r2, r3
 8014a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8014a58:	e02c      	b.n	8014ab4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014a60:	1c5a      	adds	r2, r3, #1
 8014a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8014a68:	e024      	b.n	8014ab4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6c:	68ba      	ldr	r2, [r7, #8]
 8014a6e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8014a72:	e01f      	b.n	8014ab4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014a74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014a78:	2b02      	cmp	r3, #2
 8014a7a:	d004      	beq.n	8014a86 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a7e:	68ba      	ldr	r2, [r7, #8]
 8014a80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014a84:	e016      	b.n	8014ab4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8014a86:	2300      	movs	r3, #0
 8014a88:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014a8a:	e013      	b.n	8014ab4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a96:	d00c      	beq.n	8014ab2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8014a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9c:	f383 8811 	msr	BASEPRI, r3
 8014aa0:	f3bf 8f6f 	isb	sy
 8014aa4:	f3bf 8f4f 	dsb	sy
 8014aa8:	61bb      	str	r3, [r7, #24]
}
 8014aaa:	bf00      	nop
 8014aac:	e7fe      	b.n	8014aac <xTaskGenericNotifyFromISR+0xfc>
					break;
 8014aae:	bf00      	nop
 8014ab0:	e000      	b.n	8014ab4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8014ab2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014ab8:	2b01      	cmp	r3, #1
 8014aba:	d146      	bne.n	8014b4a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00a      	beq.n	8014ada <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8014ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac8:	f383 8811 	msr	BASEPRI, r3
 8014acc:	f3bf 8f6f 	isb	sy
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	617b      	str	r3, [r7, #20]
}
 8014ad6:	bf00      	nop
 8014ad8:	e7fe      	b.n	8014ad8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ada:	4b21      	ldr	r3, [pc, #132]	; (8014b60 <xTaskGenericNotifyFromISR+0x1b0>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d11d      	bne.n	8014b1e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fd fea6 	bl	8012838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014af0:	4b1c      	ldr	r3, [pc, #112]	; (8014b64 <xTaskGenericNotifyFromISR+0x1b4>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d903      	bls.n	8014b00 <xTaskGenericNotifyFromISR+0x150>
 8014af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014afc:	4a19      	ldr	r2, [pc, #100]	; (8014b64 <xTaskGenericNotifyFromISR+0x1b4>)
 8014afe:	6013      	str	r3, [r2, #0]
 8014b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b04:	4613      	mov	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	4a16      	ldr	r2, [pc, #88]	; (8014b68 <xTaskGenericNotifyFromISR+0x1b8>)
 8014b0e:	441a      	add	r2, r3
 8014b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b12:	3304      	adds	r3, #4
 8014b14:	4619      	mov	r1, r3
 8014b16:	4610      	mov	r0, r2
 8014b18:	f7fd fe31 	bl	801277e <vListInsertEnd>
 8014b1c:	e005      	b.n	8014b2a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b20:	3318      	adds	r3, #24
 8014b22:	4619      	mov	r1, r3
 8014b24:	4811      	ldr	r0, [pc, #68]	; (8014b6c <xTaskGenericNotifyFromISR+0x1bc>)
 8014b26:	f7fd fe2a 	bl	801277e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b2e:	4b10      	ldr	r3, [pc, #64]	; (8014b70 <xTaskGenericNotifyFromISR+0x1c0>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d908      	bls.n	8014b4a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d002      	beq.n	8014b44 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b40:	2201      	movs	r2, #1
 8014b42:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014b44:	4b0b      	ldr	r3, [pc, #44]	; (8014b74 <xTaskGenericNotifyFromISR+0x1c4>)
 8014b46:	2201      	movs	r2, #1
 8014b48:	601a      	str	r2, [r3, #0]
 8014b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	f383 8811 	msr	BASEPRI, r3
}
 8014b54:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3738      	adds	r7, #56	; 0x38
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	20001ac8 	.word	0x20001ac8
 8014b64:	20001aa8 	.word	0x20001aa8
 8014b68:	200015d0 	.word	0x200015d0
 8014b6c:	20001a60 	.word	0x20001a60
 8014b70:	200015cc 	.word	0x200015cc
 8014b74:	20001ab4 	.word	0x20001ab4

08014b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014b82:	4b21      	ldr	r3, [pc, #132]	; (8014c08 <prvAddCurrentTaskToDelayedList+0x90>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b88:	4b20      	ldr	r3, [pc, #128]	; (8014c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	3304      	adds	r3, #4
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7fd fe52 	bl	8012838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b9a:	d10a      	bne.n	8014bb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d007      	beq.n	8014bb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ba2:	4b1a      	ldr	r3, [pc, #104]	; (8014c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	3304      	adds	r3, #4
 8014ba8:	4619      	mov	r1, r3
 8014baa:	4819      	ldr	r0, [pc, #100]	; (8014c10 <prvAddCurrentTaskToDelayedList+0x98>)
 8014bac:	f7fd fde7 	bl	801277e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014bb0:	e026      	b.n	8014c00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014bb2:	68fa      	ldr	r2, [r7, #12]
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014bba:	4b14      	ldr	r3, [pc, #80]	; (8014c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	68ba      	ldr	r2, [r7, #8]
 8014bc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014bc2:	68ba      	ldr	r2, [r7, #8]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d209      	bcs.n	8014bde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bca:	4b12      	ldr	r3, [pc, #72]	; (8014c14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	4b0f      	ldr	r3, [pc, #60]	; (8014c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	3304      	adds	r3, #4
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	4610      	mov	r0, r2
 8014bd8:	f7fd fdf5 	bl	80127c6 <vListInsert>
}
 8014bdc:	e010      	b.n	8014c00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014bde:	4b0e      	ldr	r3, [pc, #56]	; (8014c18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	4b0a      	ldr	r3, [pc, #40]	; (8014c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	3304      	adds	r3, #4
 8014be8:	4619      	mov	r1, r3
 8014bea:	4610      	mov	r0, r2
 8014bec:	f7fd fdeb 	bl	80127c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014bf0:	4b0a      	ldr	r3, [pc, #40]	; (8014c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	68ba      	ldr	r2, [r7, #8]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d202      	bcs.n	8014c00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014bfa:	4a08      	ldr	r2, [pc, #32]	; (8014c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	6013      	str	r3, [r2, #0]
}
 8014c00:	bf00      	nop
 8014c02:	3710      	adds	r7, #16
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	20001aa4 	.word	0x20001aa4
 8014c0c:	200015cc 	.word	0x200015cc
 8014c10:	20001a8c 	.word	0x20001a8c
 8014c14:	20001a5c 	.word	0x20001a5c
 8014c18:	20001a58 	.word	0x20001a58
 8014c1c:	20001ac0 	.word	0x20001ac0

08014c20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b08a      	sub	sp, #40	; 0x28
 8014c24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014c26:	2300      	movs	r3, #0
 8014c28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014c2a:	f000 fba1 	bl	8015370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014c2e:	4b1c      	ldr	r3, [pc, #112]	; (8014ca0 <xTimerCreateTimerTask+0x80>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d021      	beq.n	8014c7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014c36:	2300      	movs	r3, #0
 8014c38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014c3e:	1d3a      	adds	r2, r7, #4
 8014c40:	f107 0108 	add.w	r1, r7, #8
 8014c44:	f107 030c 	add.w	r3, r7, #12
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7fd fd51 	bl	80126f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014c4e:	6879      	ldr	r1, [r7, #4]
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	68fa      	ldr	r2, [r7, #12]
 8014c54:	9202      	str	r2, [sp, #8]
 8014c56:	9301      	str	r3, [sp, #4]
 8014c58:	2302      	movs	r3, #2
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	460a      	mov	r2, r1
 8014c60:	4910      	ldr	r1, [pc, #64]	; (8014ca4 <xTimerCreateTimerTask+0x84>)
 8014c62:	4811      	ldr	r0, [pc, #68]	; (8014ca8 <xTimerCreateTimerTask+0x88>)
 8014c64:	f7fe fdb4 	bl	80137d0 <xTaskCreateStatic>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	4a10      	ldr	r2, [pc, #64]	; (8014cac <xTimerCreateTimerTask+0x8c>)
 8014c6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014c6e:	4b0f      	ldr	r3, [pc, #60]	; (8014cac <xTimerCreateTimerTask+0x8c>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d001      	beq.n	8014c7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014c76:	2301      	movs	r3, #1
 8014c78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d10a      	bne.n	8014c96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c84:	f383 8811 	msr	BASEPRI, r3
 8014c88:	f3bf 8f6f 	isb	sy
 8014c8c:	f3bf 8f4f 	dsb	sy
 8014c90:	613b      	str	r3, [r7, #16]
}
 8014c92:	bf00      	nop
 8014c94:	e7fe      	b.n	8014c94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014c96:	697b      	ldr	r3, [r7, #20]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3718      	adds	r7, #24
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	20001afc 	.word	0x20001afc
 8014ca4:	080176e8 	.word	0x080176e8
 8014ca8:	08014f19 	.word	0x08014f19
 8014cac:	20001b00 	.word	0x20001b00

08014cb0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b088      	sub	sp, #32
 8014cb4:	af02      	add	r7, sp, #8
 8014cb6:	60f8      	str	r0, [r7, #12]
 8014cb8:	60b9      	str	r1, [r7, #8]
 8014cba:	607a      	str	r2, [r7, #4]
 8014cbc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014cbe:	202c      	movs	r0, #44	; 0x2c
 8014cc0:	f000 fe02 	bl	80158c8 <pvPortMalloc>
 8014cc4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014cc6:	697b      	ldr	r3, [r7, #20]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00d      	beq.n	8014ce8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	9301      	str	r3, [sp, #4]
 8014cd8:	6a3b      	ldr	r3, [r7, #32]
 8014cda:	9300      	str	r3, [sp, #0]
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	68b9      	ldr	r1, [r7, #8]
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f000 f843 	bl	8014d6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014ce8:	697b      	ldr	r3, [r7, #20]
	}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3718      	adds	r7, #24
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}

08014cf2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8014cf2:	b580      	push	{r7, lr}
 8014cf4:	b08a      	sub	sp, #40	; 0x28
 8014cf6:	af02      	add	r7, sp, #8
 8014cf8:	60f8      	str	r0, [r7, #12]
 8014cfa:	60b9      	str	r1, [r7, #8]
 8014cfc:	607a      	str	r2, [r7, #4]
 8014cfe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8014d00:	232c      	movs	r3, #44	; 0x2c
 8014d02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	2b2c      	cmp	r3, #44	; 0x2c
 8014d08:	d00a      	beq.n	8014d20 <xTimerCreateStatic+0x2e>
	__asm volatile
 8014d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	61bb      	str	r3, [r7, #24]
}
 8014d1c:	bf00      	nop
 8014d1e:	e7fe      	b.n	8014d1e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014d20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8014d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d10a      	bne.n	8014d3e <xTimerCreateStatic+0x4c>
	__asm volatile
 8014d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2c:	f383 8811 	msr	BASEPRI, r3
 8014d30:	f3bf 8f6f 	isb	sy
 8014d34:	f3bf 8f4f 	dsb	sy
 8014d38:	617b      	str	r3, [r7, #20]
}
 8014d3a:	bf00      	nop
 8014d3c:	e7fe      	b.n	8014d3c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d40:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8014d42:	69fb      	ldr	r3, [r7, #28]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d00d      	beq.n	8014d64 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	2202      	movs	r2, #2
 8014d4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	9301      	str	r3, [sp, #4]
 8014d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d56:	9300      	str	r3, [sp, #0]
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	68b9      	ldr	r1, [r7, #8]
 8014d5e:	68f8      	ldr	r0, [r7, #12]
 8014d60:	f000 f805 	bl	8014d6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014d64:	69fb      	ldr	r3, [r7, #28]
	}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3720      	adds	r7, #32
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}

08014d6e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8014d6e:	b580      	push	{r7, lr}
 8014d70:	b086      	sub	sp, #24
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	60f8      	str	r0, [r7, #12]
 8014d76:	60b9      	str	r1, [r7, #8]
 8014d78:	607a      	str	r2, [r7, #4]
 8014d7a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d10a      	bne.n	8014d98 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8014d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d86:	f383 8811 	msr	BASEPRI, r3
 8014d8a:	f3bf 8f6f 	isb	sy
 8014d8e:	f3bf 8f4f 	dsb	sy
 8014d92:	617b      	str	r3, [r7, #20]
}
 8014d94:	bf00      	nop
 8014d96:	e7fe      	b.n	8014d96 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8014d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d01e      	beq.n	8014ddc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8014d9e:	f000 fae7 	bl	8015370 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8014da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da4:	68fa      	ldr	r2, [r7, #12]
 8014da6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014daa:	68ba      	ldr	r2, [r7, #8]
 8014dac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8014dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db0:	683a      	ldr	r2, [r7, #0]
 8014db2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db6:	6a3a      	ldr	r2, [r7, #32]
 8014db8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbc:	3304      	adds	r3, #4
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7fd fcd0 	bl	8012764 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d008      	beq.n	8014ddc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dd0:	f043 0304 	orr.w	r3, r3, #4
 8014dd4:	b2da      	uxtb	r2, r3
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014ddc:	bf00      	nop
 8014dde:	3718      	adds	r7, #24
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b08a      	sub	sp, #40	; 0x28
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	607a      	str	r2, [r7, #4]
 8014df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014df2:	2300      	movs	r3, #0
 8014df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d10a      	bne.n	8014e12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e00:	f383 8811 	msr	BASEPRI, r3
 8014e04:	f3bf 8f6f 	isb	sy
 8014e08:	f3bf 8f4f 	dsb	sy
 8014e0c:	623b      	str	r3, [r7, #32]
}
 8014e0e:	bf00      	nop
 8014e10:	e7fe      	b.n	8014e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014e12:	4b1a      	ldr	r3, [pc, #104]	; (8014e7c <xTimerGenericCommand+0x98>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d02a      	beq.n	8014e70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	2b05      	cmp	r3, #5
 8014e2a:	dc18      	bgt.n	8014e5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014e2c:	f7ff fb18 	bl	8014460 <xTaskGetSchedulerState>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	d109      	bne.n	8014e4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014e36:	4b11      	ldr	r3, [pc, #68]	; (8014e7c <xTimerGenericCommand+0x98>)
 8014e38:	6818      	ldr	r0, [r3, #0]
 8014e3a:	f107 0110 	add.w	r1, r7, #16
 8014e3e:	2300      	movs	r3, #0
 8014e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e42:	f7fd fead 	bl	8012ba0 <xQueueGenericSend>
 8014e46:	6278      	str	r0, [r7, #36]	; 0x24
 8014e48:	e012      	b.n	8014e70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014e4a:	4b0c      	ldr	r3, [pc, #48]	; (8014e7c <xTimerGenericCommand+0x98>)
 8014e4c:	6818      	ldr	r0, [r3, #0]
 8014e4e:	f107 0110 	add.w	r1, r7, #16
 8014e52:	2300      	movs	r3, #0
 8014e54:	2200      	movs	r2, #0
 8014e56:	f7fd fea3 	bl	8012ba0 <xQueueGenericSend>
 8014e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8014e5c:	e008      	b.n	8014e70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014e5e:	4b07      	ldr	r3, [pc, #28]	; (8014e7c <xTimerGenericCommand+0x98>)
 8014e60:	6818      	ldr	r0, [r3, #0]
 8014e62:	f107 0110 	add.w	r1, r7, #16
 8014e66:	2300      	movs	r3, #0
 8014e68:	683a      	ldr	r2, [r7, #0]
 8014e6a:	f7fd ff97 	bl	8012d9c <xQueueGenericSendFromISR>
 8014e6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3728      	adds	r7, #40	; 0x28
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	20001afc 	.word	0x20001afc

08014e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b088      	sub	sp, #32
 8014e84:	af02      	add	r7, sp, #8
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e8a:	4b22      	ldr	r3, [pc, #136]	; (8014f14 <prvProcessExpiredTimer+0x94>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	68db      	ldr	r3, [r3, #12]
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	3304      	adds	r3, #4
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7fd fccd 	bl	8012838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ea4:	f003 0304 	and.w	r3, r3, #4
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d022      	beq.n	8014ef2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	699a      	ldr	r2, [r3, #24]
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	18d1      	adds	r1, r2, r3
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	683a      	ldr	r2, [r7, #0]
 8014eb8:	6978      	ldr	r0, [r7, #20]
 8014eba:	f000 f8d1 	bl	8015060 <prvInsertTimerInActiveList>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d01f      	beq.n	8014f04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	2300      	movs	r3, #0
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	2100      	movs	r1, #0
 8014ece:	6978      	ldr	r0, [r7, #20]
 8014ed0:	f7ff ff88 	bl	8014de4 <xTimerGenericCommand>
 8014ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d113      	bne.n	8014f04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee0:	f383 8811 	msr	BASEPRI, r3
 8014ee4:	f3bf 8f6f 	isb	sy
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	60fb      	str	r3, [r7, #12]
}
 8014eee:	bf00      	nop
 8014ef0:	e7fe      	b.n	8014ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ef8:	f023 0301 	bic.w	r3, r3, #1
 8014efc:	b2da      	uxtb	r2, r3
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	6a1b      	ldr	r3, [r3, #32]
 8014f08:	6978      	ldr	r0, [r7, #20]
 8014f0a:	4798      	blx	r3
}
 8014f0c:	bf00      	nop
 8014f0e:	3718      	adds	r7, #24
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	20001af4 	.word	0x20001af4

08014f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b084      	sub	sp, #16
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014f20:	f107 0308 	add.w	r3, r7, #8
 8014f24:	4618      	mov	r0, r3
 8014f26:	f000 f857 	bl	8014fd8 <prvGetNextExpireTime>
 8014f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	4619      	mov	r1, r3
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f000 f803 	bl	8014f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014f36:	f000 f8d5 	bl	80150e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014f3a:	e7f1      	b.n	8014f20 <prvTimerTask+0x8>

08014f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014f46:	f7fe fe9f 	bl	8013c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014f4a:	f107 0308 	add.w	r3, r7, #8
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f000 f866 	bl	8015020 <prvSampleTimeNow>
 8014f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d130      	bne.n	8014fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d10a      	bne.n	8014f78 <prvProcessTimerOrBlockTask+0x3c>
 8014f62:	687a      	ldr	r2, [r7, #4]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d806      	bhi.n	8014f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014f6a:	f7fe fe9b 	bl	8013ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014f6e:	68f9      	ldr	r1, [r7, #12]
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7ff ff85 	bl	8014e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014f76:	e024      	b.n	8014fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d008      	beq.n	8014f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014f7e:	4b13      	ldr	r3, [pc, #76]	; (8014fcc <prvProcessTimerOrBlockTask+0x90>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d101      	bne.n	8014f8c <prvProcessTimerOrBlockTask+0x50>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e000      	b.n	8014f8e <prvProcessTimerOrBlockTask+0x52>
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014f90:	4b0f      	ldr	r3, [pc, #60]	; (8014fd0 <prvProcessTimerOrBlockTask+0x94>)
 8014f92:	6818      	ldr	r0, [r3, #0]
 8014f94:	687a      	ldr	r2, [r7, #4]
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	683a      	ldr	r2, [r7, #0]
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	f7fe fbe3 	bl	8013768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014fa2:	f7fe fe7f 	bl	8013ca4 <xTaskResumeAll>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d10a      	bne.n	8014fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014fac:	4b09      	ldr	r3, [pc, #36]	; (8014fd4 <prvProcessTimerOrBlockTask+0x98>)
 8014fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fb2:	601a      	str	r2, [r3, #0]
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	f3bf 8f6f 	isb	sy
}
 8014fbc:	e001      	b.n	8014fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014fbe:	f7fe fe71 	bl	8013ca4 <xTaskResumeAll>
}
 8014fc2:	bf00      	nop
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	20001af8 	.word	0x20001af8
 8014fd0:	20001afc 	.word	0x20001afc
 8014fd4:	e000ed04 	.word	0xe000ed04

08014fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014fd8:	b480      	push	{r7}
 8014fda:	b085      	sub	sp, #20
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014fe0:	4b0e      	ldr	r3, [pc, #56]	; (801501c <prvGetNextExpireTime+0x44>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d101      	bne.n	8014fee <prvGetNextExpireTime+0x16>
 8014fea:	2201      	movs	r2, #1
 8014fec:	e000      	b.n	8014ff0 <prvGetNextExpireTime+0x18>
 8014fee:	2200      	movs	r2, #0
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d105      	bne.n	8015008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014ffc:	4b07      	ldr	r3, [pc, #28]	; (801501c <prvGetNextExpireTime+0x44>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	60fb      	str	r3, [r7, #12]
 8015006:	e001      	b.n	801500c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015008:	2300      	movs	r3, #0
 801500a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801500c:	68fb      	ldr	r3, [r7, #12]
}
 801500e:	4618      	mov	r0, r3
 8015010:	3714      	adds	r7, #20
 8015012:	46bd      	mov	sp, r7
 8015014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015018:	4770      	bx	lr
 801501a:	bf00      	nop
 801501c:	20001af4 	.word	0x20001af4

08015020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015028:	f7fe feda 	bl	8013de0 <xTaskGetTickCount>
 801502c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801502e:	4b0b      	ldr	r3, [pc, #44]	; (801505c <prvSampleTimeNow+0x3c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	68fa      	ldr	r2, [r7, #12]
 8015034:	429a      	cmp	r2, r3
 8015036:	d205      	bcs.n	8015044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015038:	f000 f936 	bl	80152a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2201      	movs	r2, #1
 8015040:	601a      	str	r2, [r3, #0]
 8015042:	e002      	b.n	801504a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2200      	movs	r2, #0
 8015048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801504a:	4a04      	ldr	r2, [pc, #16]	; (801505c <prvSampleTimeNow+0x3c>)
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015050:	68fb      	ldr	r3, [r7, #12]
}
 8015052:	4618      	mov	r0, r3
 8015054:	3710      	adds	r7, #16
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	20001b04 	.word	0x20001b04

08015060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b086      	sub	sp, #24
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
 801506c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801506e:	2300      	movs	r3, #0
 8015070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	68ba      	ldr	r2, [r7, #8]
 8015076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	68fa      	ldr	r2, [r7, #12]
 801507c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801507e:	68ba      	ldr	r2, [r7, #8]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	429a      	cmp	r2, r3
 8015084:	d812      	bhi.n	80150ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	1ad2      	subs	r2, r2, r3
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	699b      	ldr	r3, [r3, #24]
 8015090:	429a      	cmp	r2, r3
 8015092:	d302      	bcc.n	801509a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015094:	2301      	movs	r3, #1
 8015096:	617b      	str	r3, [r7, #20]
 8015098:	e01b      	b.n	80150d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801509a:	4b10      	ldr	r3, [pc, #64]	; (80150dc <prvInsertTimerInActiveList+0x7c>)
 801509c:	681a      	ldr	r2, [r3, #0]
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	3304      	adds	r3, #4
 80150a2:	4619      	mov	r1, r3
 80150a4:	4610      	mov	r0, r2
 80150a6:	f7fd fb8e 	bl	80127c6 <vListInsert>
 80150aa:	e012      	b.n	80150d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80150ac:	687a      	ldr	r2, [r7, #4]
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d206      	bcs.n	80150c2 <prvInsertTimerInActiveList+0x62>
 80150b4:	68ba      	ldr	r2, [r7, #8]
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d302      	bcc.n	80150c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80150bc:	2301      	movs	r3, #1
 80150be:	617b      	str	r3, [r7, #20]
 80150c0:	e007      	b.n	80150d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80150c2:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <prvInsertTimerInActiveList+0x80>)
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	3304      	adds	r3, #4
 80150ca:	4619      	mov	r1, r3
 80150cc:	4610      	mov	r0, r2
 80150ce:	f7fd fb7a 	bl	80127c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80150d2:	697b      	ldr	r3, [r7, #20]
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3718      	adds	r7, #24
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	20001af8 	.word	0x20001af8
 80150e0:	20001af4 	.word	0x20001af4

080150e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b08e      	sub	sp, #56	; 0x38
 80150e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80150ea:	e0ca      	b.n	8015282 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	da18      	bge.n	8015124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80150f2:	1d3b      	adds	r3, r7, #4
 80150f4:	3304      	adds	r3, #4
 80150f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80150f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d10a      	bne.n	8015114 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80150fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015102:	f383 8811 	msr	BASEPRI, r3
 8015106:	f3bf 8f6f 	isb	sy
 801510a:	f3bf 8f4f 	dsb	sy
 801510e:	61fb      	str	r3, [r7, #28]
}
 8015110:	bf00      	nop
 8015112:	e7fe      	b.n	8015112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801511a:	6850      	ldr	r0, [r2, #4]
 801511c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801511e:	6892      	ldr	r2, [r2, #8]
 8015120:	4611      	mov	r1, r2
 8015122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	f2c0 80aa 	blt.w	8015280 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015132:	695b      	ldr	r3, [r3, #20]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d004      	beq.n	8015142 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513a:	3304      	adds	r3, #4
 801513c:	4618      	mov	r0, r3
 801513e:	f7fd fb7b 	bl	8012838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015142:	463b      	mov	r3, r7
 8015144:	4618      	mov	r0, r3
 8015146:	f7ff ff6b 	bl	8015020 <prvSampleTimeNow>
 801514a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b09      	cmp	r3, #9
 8015150:	f200 8097 	bhi.w	8015282 <prvProcessReceivedCommands+0x19e>
 8015154:	a201      	add	r2, pc, #4	; (adr r2, 801515c <prvProcessReceivedCommands+0x78>)
 8015156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801515a:	bf00      	nop
 801515c:	08015185 	.word	0x08015185
 8015160:	08015185 	.word	0x08015185
 8015164:	08015185 	.word	0x08015185
 8015168:	080151f9 	.word	0x080151f9
 801516c:	0801520d 	.word	0x0801520d
 8015170:	08015257 	.word	0x08015257
 8015174:	08015185 	.word	0x08015185
 8015178:	08015185 	.word	0x08015185
 801517c:	080151f9 	.word	0x080151f9
 8015180:	0801520d 	.word	0x0801520d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801518a:	f043 0301 	orr.w	r3, r3, #1
 801518e:	b2da      	uxtb	r2, r3
 8015190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015196:	68ba      	ldr	r2, [r7, #8]
 8015198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519a:	699b      	ldr	r3, [r3, #24]
 801519c:	18d1      	adds	r1, r2, r3
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151a4:	f7ff ff5c 	bl	8015060 <prvInsertTimerInActiveList>
 80151a8:	4603      	mov	r3, r0
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d069      	beq.n	8015282 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80151ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b0:	6a1b      	ldr	r3, [r3, #32]
 80151b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80151b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151bc:	f003 0304 	and.w	r3, r3, #4
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d05e      	beq.n	8015282 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80151c4:	68ba      	ldr	r2, [r7, #8]
 80151c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c8:	699b      	ldr	r3, [r3, #24]
 80151ca:	441a      	add	r2, r3
 80151cc:	2300      	movs	r3, #0
 80151ce:	9300      	str	r3, [sp, #0]
 80151d0:	2300      	movs	r3, #0
 80151d2:	2100      	movs	r1, #0
 80151d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151d6:	f7ff fe05 	bl	8014de4 <xTimerGenericCommand>
 80151da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d14f      	bne.n	8015282 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80151e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e6:	f383 8811 	msr	BASEPRI, r3
 80151ea:	f3bf 8f6f 	isb	sy
 80151ee:	f3bf 8f4f 	dsb	sy
 80151f2:	61bb      	str	r3, [r7, #24]
}
 80151f4:	bf00      	nop
 80151f6:	e7fe      	b.n	80151f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80151f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80151fe:	f023 0301 	bic.w	r3, r3, #1
 8015202:	b2da      	uxtb	r2, r3
 8015204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801520a:	e03a      	b.n	8015282 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015212:	f043 0301 	orr.w	r3, r3, #1
 8015216:	b2da      	uxtb	r2, r3
 8015218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015222:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015226:	699b      	ldr	r3, [r3, #24]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d10a      	bne.n	8015242 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015230:	f383 8811 	msr	BASEPRI, r3
 8015234:	f3bf 8f6f 	isb	sy
 8015238:	f3bf 8f4f 	dsb	sy
 801523c:	617b      	str	r3, [r7, #20]
}
 801523e:	bf00      	nop
 8015240:	e7fe      	b.n	8015240 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015244:	699a      	ldr	r2, [r3, #24]
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015248:	18d1      	adds	r1, r2, r3
 801524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801524e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015250:	f7ff ff06 	bl	8015060 <prvInsertTimerInActiveList>
					break;
 8015254:	e015      	b.n	8015282 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801525c:	f003 0302 	and.w	r3, r3, #2
 8015260:	2b00      	cmp	r3, #0
 8015262:	d103      	bne.n	801526c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015266:	f000 fbfb 	bl	8015a60 <vPortFree>
 801526a:	e00a      	b.n	8015282 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801526e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015272:	f023 0301 	bic.w	r3, r3, #1
 8015276:	b2da      	uxtb	r2, r3
 8015278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801527a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801527e:	e000      	b.n	8015282 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015282:	4b08      	ldr	r3, [pc, #32]	; (80152a4 <prvProcessReceivedCommands+0x1c0>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	1d39      	adds	r1, r7, #4
 8015288:	2200      	movs	r2, #0
 801528a:	4618      	mov	r0, r3
 801528c:	f7fd feae 	bl	8012fec <xQueueReceive>
 8015290:	4603      	mov	r3, r0
 8015292:	2b00      	cmp	r3, #0
 8015294:	f47f af2a 	bne.w	80150ec <prvProcessReceivedCommands+0x8>
	}
}
 8015298:	bf00      	nop
 801529a:	bf00      	nop
 801529c:	3730      	adds	r7, #48	; 0x30
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	20001afc 	.word	0x20001afc

080152a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b088      	sub	sp, #32
 80152ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80152ae:	e048      	b.n	8015342 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80152b0:	4b2d      	ldr	r3, [pc, #180]	; (8015368 <prvSwitchTimerLists+0xc0>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152ba:	4b2b      	ldr	r3, [pc, #172]	; (8015368 <prvSwitchTimerLists+0xc0>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	68db      	ldr	r3, [r3, #12]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	3304      	adds	r3, #4
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7fd fab5 	bl	8012838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	6a1b      	ldr	r3, [r3, #32]
 80152d2:	68f8      	ldr	r0, [r7, #12]
 80152d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152dc:	f003 0304 	and.w	r3, r3, #4
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d02e      	beq.n	8015342 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	699b      	ldr	r3, [r3, #24]
 80152e8:	693a      	ldr	r2, [r7, #16]
 80152ea:	4413      	add	r3, r2
 80152ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	429a      	cmp	r2, r3
 80152f4:	d90e      	bls.n	8015314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	68ba      	ldr	r2, [r7, #8]
 80152fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015302:	4b19      	ldr	r3, [pc, #100]	; (8015368 <prvSwitchTimerLists+0xc0>)
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	3304      	adds	r3, #4
 801530a:	4619      	mov	r1, r3
 801530c:	4610      	mov	r0, r2
 801530e:	f7fd fa5a 	bl	80127c6 <vListInsert>
 8015312:	e016      	b.n	8015342 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015314:	2300      	movs	r3, #0
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	2300      	movs	r3, #0
 801531a:	693a      	ldr	r2, [r7, #16]
 801531c:	2100      	movs	r1, #0
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f7ff fd60 	bl	8014de4 <xTimerGenericCommand>
 8015324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d10a      	bne.n	8015342 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015330:	f383 8811 	msr	BASEPRI, r3
 8015334:	f3bf 8f6f 	isb	sy
 8015338:	f3bf 8f4f 	dsb	sy
 801533c:	603b      	str	r3, [r7, #0]
}
 801533e:	bf00      	nop
 8015340:	e7fe      	b.n	8015340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015342:	4b09      	ldr	r3, [pc, #36]	; (8015368 <prvSwitchTimerLists+0xc0>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1b1      	bne.n	80152b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801534c:	4b06      	ldr	r3, [pc, #24]	; (8015368 <prvSwitchTimerLists+0xc0>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015352:	4b06      	ldr	r3, [pc, #24]	; (801536c <prvSwitchTimerLists+0xc4>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	4a04      	ldr	r2, [pc, #16]	; (8015368 <prvSwitchTimerLists+0xc0>)
 8015358:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801535a:	4a04      	ldr	r2, [pc, #16]	; (801536c <prvSwitchTimerLists+0xc4>)
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	6013      	str	r3, [r2, #0]
}
 8015360:	bf00      	nop
 8015362:	3718      	adds	r7, #24
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	20001af4 	.word	0x20001af4
 801536c:	20001af8 	.word	0x20001af8

08015370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015376:	f000 f985 	bl	8015684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801537a:	4b15      	ldr	r3, [pc, #84]	; (80153d0 <prvCheckForValidListAndQueue+0x60>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d120      	bne.n	80153c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015382:	4814      	ldr	r0, [pc, #80]	; (80153d4 <prvCheckForValidListAndQueue+0x64>)
 8015384:	f7fd f9ce 	bl	8012724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015388:	4813      	ldr	r0, [pc, #76]	; (80153d8 <prvCheckForValidListAndQueue+0x68>)
 801538a:	f7fd f9cb 	bl	8012724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801538e:	4b13      	ldr	r3, [pc, #76]	; (80153dc <prvCheckForValidListAndQueue+0x6c>)
 8015390:	4a10      	ldr	r2, [pc, #64]	; (80153d4 <prvCheckForValidListAndQueue+0x64>)
 8015392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015394:	4b12      	ldr	r3, [pc, #72]	; (80153e0 <prvCheckForValidListAndQueue+0x70>)
 8015396:	4a10      	ldr	r2, [pc, #64]	; (80153d8 <prvCheckForValidListAndQueue+0x68>)
 8015398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801539a:	2300      	movs	r3, #0
 801539c:	9300      	str	r3, [sp, #0]
 801539e:	4b11      	ldr	r3, [pc, #68]	; (80153e4 <prvCheckForValidListAndQueue+0x74>)
 80153a0:	4a11      	ldr	r2, [pc, #68]	; (80153e8 <prvCheckForValidListAndQueue+0x78>)
 80153a2:	2110      	movs	r1, #16
 80153a4:	200a      	movs	r0, #10
 80153a6:	f7fd fad9 	bl	801295c <xQueueGenericCreateStatic>
 80153aa:	4603      	mov	r3, r0
 80153ac:	4a08      	ldr	r2, [pc, #32]	; (80153d0 <prvCheckForValidListAndQueue+0x60>)
 80153ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80153b0:	4b07      	ldr	r3, [pc, #28]	; (80153d0 <prvCheckForValidListAndQueue+0x60>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d005      	beq.n	80153c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80153b8:	4b05      	ldr	r3, [pc, #20]	; (80153d0 <prvCheckForValidListAndQueue+0x60>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	490b      	ldr	r1, [pc, #44]	; (80153ec <prvCheckForValidListAndQueue+0x7c>)
 80153be:	4618      	mov	r0, r3
 80153c0:	f7fe f9a8 	bl	8013714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80153c4:	f000 f98e 	bl	80156e4 <vPortExitCritical>
}
 80153c8:	bf00      	nop
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	20001afc 	.word	0x20001afc
 80153d4:	20001acc 	.word	0x20001acc
 80153d8:	20001ae0 	.word	0x20001ae0
 80153dc:	20001af4 	.word	0x20001af4
 80153e0:	20001af8 	.word	0x20001af8
 80153e4:	20001ba8 	.word	0x20001ba8
 80153e8:	20001b08 	.word	0x20001b08
 80153ec:	080176f0 	.word	0x080176f0

080153f0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b086      	sub	sp, #24
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d10a      	bne.n	8015418 <pvTimerGetTimerID+0x28>
	__asm volatile
 8015402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015406:	f383 8811 	msr	BASEPRI, r3
 801540a:	f3bf 8f6f 	isb	sy
 801540e:	f3bf 8f4f 	dsb	sy
 8015412:	60fb      	str	r3, [r7, #12]
}
 8015414:	bf00      	nop
 8015416:	e7fe      	b.n	8015416 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8015418:	f000 f934 	bl	8015684 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	69db      	ldr	r3, [r3, #28]
 8015420:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8015422:	f000 f95f 	bl	80156e4 <vPortExitCritical>

	return pvReturn;
 8015426:	693b      	ldr	r3, [r7, #16]
}
 8015428:	4618      	mov	r0, r3
 801542a:	3718      	adds	r7, #24
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015430:	b480      	push	{r7}
 8015432:	b085      	sub	sp, #20
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	3b04      	subs	r3, #4
 8015440:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	3b04      	subs	r3, #4
 801544e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	f023 0201 	bic.w	r2, r3, #1
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	3b04      	subs	r3, #4
 801545e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015460:	4a0c      	ldr	r2, [pc, #48]	; (8015494 <pxPortInitialiseStack+0x64>)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	3b14      	subs	r3, #20
 801546a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801546c:	687a      	ldr	r2, [r7, #4]
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	3b04      	subs	r3, #4
 8015476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f06f 0202 	mvn.w	r2, #2
 801547e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	3b20      	subs	r3, #32
 8015484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015486:	68fb      	ldr	r3, [r7, #12]
}
 8015488:	4618      	mov	r0, r3
 801548a:	3714      	adds	r7, #20
 801548c:	46bd      	mov	sp, r7
 801548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015492:	4770      	bx	lr
 8015494:	08015499 	.word	0x08015499

08015498 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015498:	b480      	push	{r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801549e:	2300      	movs	r3, #0
 80154a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80154a2:	4b12      	ldr	r3, [pc, #72]	; (80154ec <prvTaskExitError+0x54>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154aa:	d00a      	beq.n	80154c2 <prvTaskExitError+0x2a>
	__asm volatile
 80154ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b0:	f383 8811 	msr	BASEPRI, r3
 80154b4:	f3bf 8f6f 	isb	sy
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	60fb      	str	r3, [r7, #12]
}
 80154be:	bf00      	nop
 80154c0:	e7fe      	b.n	80154c0 <prvTaskExitError+0x28>
	__asm volatile
 80154c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c6:	f383 8811 	msr	BASEPRI, r3
 80154ca:	f3bf 8f6f 	isb	sy
 80154ce:	f3bf 8f4f 	dsb	sy
 80154d2:	60bb      	str	r3, [r7, #8]
}
 80154d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80154d6:	bf00      	nop
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d0fc      	beq.n	80154d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80154de:	bf00      	nop
 80154e0:	bf00      	nop
 80154e2:	3714      	adds	r7, #20
 80154e4:	46bd      	mov	sp, r7
 80154e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ea:	4770      	bx	lr
 80154ec:	2000012c 	.word	0x2000012c

080154f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80154f0:	4b07      	ldr	r3, [pc, #28]	; (8015510 <pxCurrentTCBConst2>)
 80154f2:	6819      	ldr	r1, [r3, #0]
 80154f4:	6808      	ldr	r0, [r1, #0]
 80154f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154fa:	f380 8809 	msr	PSP, r0
 80154fe:	f3bf 8f6f 	isb	sy
 8015502:	f04f 0000 	mov.w	r0, #0
 8015506:	f380 8811 	msr	BASEPRI, r0
 801550a:	4770      	bx	lr
 801550c:	f3af 8000 	nop.w

08015510 <pxCurrentTCBConst2>:
 8015510:	200015cc 	.word	0x200015cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015514:	bf00      	nop
 8015516:	bf00      	nop

08015518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015518:	4808      	ldr	r0, [pc, #32]	; (801553c <prvPortStartFirstTask+0x24>)
 801551a:	6800      	ldr	r0, [r0, #0]
 801551c:	6800      	ldr	r0, [r0, #0]
 801551e:	f380 8808 	msr	MSP, r0
 8015522:	f04f 0000 	mov.w	r0, #0
 8015526:	f380 8814 	msr	CONTROL, r0
 801552a:	b662      	cpsie	i
 801552c:	b661      	cpsie	f
 801552e:	f3bf 8f4f 	dsb	sy
 8015532:	f3bf 8f6f 	isb	sy
 8015536:	df00      	svc	0
 8015538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801553a:	bf00      	nop
 801553c:	e000ed08 	.word	0xe000ed08

08015540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b086      	sub	sp, #24
 8015544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015546:	4b46      	ldr	r3, [pc, #280]	; (8015660 <xPortStartScheduler+0x120>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	4a46      	ldr	r2, [pc, #280]	; (8015664 <xPortStartScheduler+0x124>)
 801554c:	4293      	cmp	r3, r2
 801554e:	d10a      	bne.n	8015566 <xPortStartScheduler+0x26>
	__asm volatile
 8015550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015554:	f383 8811 	msr	BASEPRI, r3
 8015558:	f3bf 8f6f 	isb	sy
 801555c:	f3bf 8f4f 	dsb	sy
 8015560:	613b      	str	r3, [r7, #16]
}
 8015562:	bf00      	nop
 8015564:	e7fe      	b.n	8015564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015566:	4b3e      	ldr	r3, [pc, #248]	; (8015660 <xPortStartScheduler+0x120>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	4a3f      	ldr	r2, [pc, #252]	; (8015668 <xPortStartScheduler+0x128>)
 801556c:	4293      	cmp	r3, r2
 801556e:	d10a      	bne.n	8015586 <xPortStartScheduler+0x46>
	__asm volatile
 8015570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015574:	f383 8811 	msr	BASEPRI, r3
 8015578:	f3bf 8f6f 	isb	sy
 801557c:	f3bf 8f4f 	dsb	sy
 8015580:	60fb      	str	r3, [r7, #12]
}
 8015582:	bf00      	nop
 8015584:	e7fe      	b.n	8015584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015586:	4b39      	ldr	r3, [pc, #228]	; (801566c <xPortStartScheduler+0x12c>)
 8015588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	b2db      	uxtb	r3, r3
 8015590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	22ff      	movs	r2, #255	; 0xff
 8015596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	b2db      	uxtb	r3, r3
 801559e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80155a0:	78fb      	ldrb	r3, [r7, #3]
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80155a8:	b2da      	uxtb	r2, r3
 80155aa:	4b31      	ldr	r3, [pc, #196]	; (8015670 <xPortStartScheduler+0x130>)
 80155ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80155ae:	4b31      	ldr	r3, [pc, #196]	; (8015674 <xPortStartScheduler+0x134>)
 80155b0:	2207      	movs	r2, #7
 80155b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80155b4:	e009      	b.n	80155ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80155b6:	4b2f      	ldr	r3, [pc, #188]	; (8015674 <xPortStartScheduler+0x134>)
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	3b01      	subs	r3, #1
 80155bc:	4a2d      	ldr	r2, [pc, #180]	; (8015674 <xPortStartScheduler+0x134>)
 80155be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80155c0:	78fb      	ldrb	r3, [r7, #3]
 80155c2:	b2db      	uxtb	r3, r3
 80155c4:	005b      	lsls	r3, r3, #1
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80155ca:	78fb      	ldrb	r3, [r7, #3]
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80155d2:	2b80      	cmp	r3, #128	; 0x80
 80155d4:	d0ef      	beq.n	80155b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80155d6:	4b27      	ldr	r3, [pc, #156]	; (8015674 <xPortStartScheduler+0x134>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	f1c3 0307 	rsb	r3, r3, #7
 80155de:	2b04      	cmp	r3, #4
 80155e0:	d00a      	beq.n	80155f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80155e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e6:	f383 8811 	msr	BASEPRI, r3
 80155ea:	f3bf 8f6f 	isb	sy
 80155ee:	f3bf 8f4f 	dsb	sy
 80155f2:	60bb      	str	r3, [r7, #8]
}
 80155f4:	bf00      	nop
 80155f6:	e7fe      	b.n	80155f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80155f8:	4b1e      	ldr	r3, [pc, #120]	; (8015674 <xPortStartScheduler+0x134>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	021b      	lsls	r3, r3, #8
 80155fe:	4a1d      	ldr	r2, [pc, #116]	; (8015674 <xPortStartScheduler+0x134>)
 8015600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015602:	4b1c      	ldr	r3, [pc, #112]	; (8015674 <xPortStartScheduler+0x134>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801560a:	4a1a      	ldr	r2, [pc, #104]	; (8015674 <xPortStartScheduler+0x134>)
 801560c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	b2da      	uxtb	r2, r3
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015616:	4b18      	ldr	r3, [pc, #96]	; (8015678 <xPortStartScheduler+0x138>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	4a17      	ldr	r2, [pc, #92]	; (8015678 <xPortStartScheduler+0x138>)
 801561c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015622:	4b15      	ldr	r3, [pc, #84]	; (8015678 <xPortStartScheduler+0x138>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	4a14      	ldr	r2, [pc, #80]	; (8015678 <xPortStartScheduler+0x138>)
 8015628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801562c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801562e:	f000 f8dd 	bl	80157ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015632:	4b12      	ldr	r3, [pc, #72]	; (801567c <xPortStartScheduler+0x13c>)
 8015634:	2200      	movs	r2, #0
 8015636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015638:	f000 f8fc 	bl	8015834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801563c:	4b10      	ldr	r3, [pc, #64]	; (8015680 <xPortStartScheduler+0x140>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	4a0f      	ldr	r2, [pc, #60]	; (8015680 <xPortStartScheduler+0x140>)
 8015642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015648:	f7ff ff66 	bl	8015518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801564c:	f7fe fc92 	bl	8013f74 <vTaskSwitchContext>
	prvTaskExitError();
 8015650:	f7ff ff22 	bl	8015498 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015654:	2300      	movs	r3, #0
}
 8015656:	4618      	mov	r0, r3
 8015658:	3718      	adds	r7, #24
 801565a:	46bd      	mov	sp, r7
 801565c:	bd80      	pop	{r7, pc}
 801565e:	bf00      	nop
 8015660:	e000ed00 	.word	0xe000ed00
 8015664:	410fc271 	.word	0x410fc271
 8015668:	410fc270 	.word	0x410fc270
 801566c:	e000e400 	.word	0xe000e400
 8015670:	20001bf8 	.word	0x20001bf8
 8015674:	20001bfc 	.word	0x20001bfc
 8015678:	e000ed20 	.word	0xe000ed20
 801567c:	2000012c 	.word	0x2000012c
 8015680:	e000ef34 	.word	0xe000ef34

08015684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015684:	b480      	push	{r7}
 8015686:	b083      	sub	sp, #12
 8015688:	af00      	add	r7, sp, #0
	__asm volatile
 801568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801568e:	f383 8811 	msr	BASEPRI, r3
 8015692:	f3bf 8f6f 	isb	sy
 8015696:	f3bf 8f4f 	dsb	sy
 801569a:	607b      	str	r3, [r7, #4]
}
 801569c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801569e:	4b0f      	ldr	r3, [pc, #60]	; (80156dc <vPortEnterCritical+0x58>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	3301      	adds	r3, #1
 80156a4:	4a0d      	ldr	r2, [pc, #52]	; (80156dc <vPortEnterCritical+0x58>)
 80156a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80156a8:	4b0c      	ldr	r3, [pc, #48]	; (80156dc <vPortEnterCritical+0x58>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2b01      	cmp	r3, #1
 80156ae:	d10f      	bne.n	80156d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80156b0:	4b0b      	ldr	r3, [pc, #44]	; (80156e0 <vPortEnterCritical+0x5c>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d00a      	beq.n	80156d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80156ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156be:	f383 8811 	msr	BASEPRI, r3
 80156c2:	f3bf 8f6f 	isb	sy
 80156c6:	f3bf 8f4f 	dsb	sy
 80156ca:	603b      	str	r3, [r7, #0]
}
 80156cc:	bf00      	nop
 80156ce:	e7fe      	b.n	80156ce <vPortEnterCritical+0x4a>
	}
}
 80156d0:	bf00      	nop
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr
 80156dc:	2000012c 	.word	0x2000012c
 80156e0:	e000ed04 	.word	0xe000ed04

080156e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80156ea:	4b12      	ldr	r3, [pc, #72]	; (8015734 <vPortExitCritical+0x50>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d10a      	bne.n	8015708 <vPortExitCritical+0x24>
	__asm volatile
 80156f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f6:	f383 8811 	msr	BASEPRI, r3
 80156fa:	f3bf 8f6f 	isb	sy
 80156fe:	f3bf 8f4f 	dsb	sy
 8015702:	607b      	str	r3, [r7, #4]
}
 8015704:	bf00      	nop
 8015706:	e7fe      	b.n	8015706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015708:	4b0a      	ldr	r3, [pc, #40]	; (8015734 <vPortExitCritical+0x50>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	3b01      	subs	r3, #1
 801570e:	4a09      	ldr	r2, [pc, #36]	; (8015734 <vPortExitCritical+0x50>)
 8015710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015712:	4b08      	ldr	r3, [pc, #32]	; (8015734 <vPortExitCritical+0x50>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d105      	bne.n	8015726 <vPortExitCritical+0x42>
 801571a:	2300      	movs	r3, #0
 801571c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	f383 8811 	msr	BASEPRI, r3
}
 8015724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015726:	bf00      	nop
 8015728:	370c      	adds	r7, #12
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr
 8015732:	bf00      	nop
 8015734:	2000012c 	.word	0x2000012c
	...

08015740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015740:	f3ef 8009 	mrs	r0, PSP
 8015744:	f3bf 8f6f 	isb	sy
 8015748:	4b15      	ldr	r3, [pc, #84]	; (80157a0 <pxCurrentTCBConst>)
 801574a:	681a      	ldr	r2, [r3, #0]
 801574c:	f01e 0f10 	tst.w	lr, #16
 8015750:	bf08      	it	eq
 8015752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801575a:	6010      	str	r0, [r2, #0]
 801575c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015764:	f380 8811 	msr	BASEPRI, r0
 8015768:	f3bf 8f4f 	dsb	sy
 801576c:	f3bf 8f6f 	isb	sy
 8015770:	f7fe fc00 	bl	8013f74 <vTaskSwitchContext>
 8015774:	f04f 0000 	mov.w	r0, #0
 8015778:	f380 8811 	msr	BASEPRI, r0
 801577c:	bc09      	pop	{r0, r3}
 801577e:	6819      	ldr	r1, [r3, #0]
 8015780:	6808      	ldr	r0, [r1, #0]
 8015782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015786:	f01e 0f10 	tst.w	lr, #16
 801578a:	bf08      	it	eq
 801578c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015790:	f380 8809 	msr	PSP, r0
 8015794:	f3bf 8f6f 	isb	sy
 8015798:	4770      	bx	lr
 801579a:	bf00      	nop
 801579c:	f3af 8000 	nop.w

080157a0 <pxCurrentTCBConst>:
 80157a0:	200015cc 	.word	0x200015cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80157a4:	bf00      	nop
 80157a6:	bf00      	nop

080157a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
	__asm volatile
 80157ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157b2:	f383 8811 	msr	BASEPRI, r3
 80157b6:	f3bf 8f6f 	isb	sy
 80157ba:	f3bf 8f4f 	dsb	sy
 80157be:	607b      	str	r3, [r7, #4]
}
 80157c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80157c2:	f7fe fb1d 	bl	8013e00 <xTaskIncrementTick>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d003      	beq.n	80157d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80157cc:	4b06      	ldr	r3, [pc, #24]	; (80157e8 <xPortSysTickHandler+0x40>)
 80157ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	2300      	movs	r3, #0
 80157d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	f383 8811 	msr	BASEPRI, r3
}
 80157de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80157e0:	bf00      	nop
 80157e2:	3708      	adds	r7, #8
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	e000ed04 	.word	0xe000ed04

080157ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80157ec:	b480      	push	{r7}
 80157ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80157f0:	4b0b      	ldr	r3, [pc, #44]	; (8015820 <vPortSetupTimerInterrupt+0x34>)
 80157f2:	2200      	movs	r2, #0
 80157f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80157f6:	4b0b      	ldr	r3, [pc, #44]	; (8015824 <vPortSetupTimerInterrupt+0x38>)
 80157f8:	2200      	movs	r2, #0
 80157fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80157fc:	4b0a      	ldr	r3, [pc, #40]	; (8015828 <vPortSetupTimerInterrupt+0x3c>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4a0a      	ldr	r2, [pc, #40]	; (801582c <vPortSetupTimerInterrupt+0x40>)
 8015802:	fba2 2303 	umull	r2, r3, r2, r3
 8015806:	099b      	lsrs	r3, r3, #6
 8015808:	4a09      	ldr	r2, [pc, #36]	; (8015830 <vPortSetupTimerInterrupt+0x44>)
 801580a:	3b01      	subs	r3, #1
 801580c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801580e:	4b04      	ldr	r3, [pc, #16]	; (8015820 <vPortSetupTimerInterrupt+0x34>)
 8015810:	2207      	movs	r2, #7
 8015812:	601a      	str	r2, [r3, #0]
}
 8015814:	bf00      	nop
 8015816:	46bd      	mov	sp, r7
 8015818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	e000e010 	.word	0xe000e010
 8015824:	e000e018 	.word	0xe000e018
 8015828:	20000010 	.word	0x20000010
 801582c:	10624dd3 	.word	0x10624dd3
 8015830:	e000e014 	.word	0xe000e014

08015834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015844 <vPortEnableVFP+0x10>
 8015838:	6801      	ldr	r1, [r0, #0]
 801583a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801583e:	6001      	str	r1, [r0, #0]
 8015840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015842:	bf00      	nop
 8015844:	e000ed88 	.word	0xe000ed88

08015848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015848:	b480      	push	{r7}
 801584a:	b085      	sub	sp, #20
 801584c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801584e:	f3ef 8305 	mrs	r3, IPSR
 8015852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	2b0f      	cmp	r3, #15
 8015858:	d914      	bls.n	8015884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801585a:	4a17      	ldr	r2, [pc, #92]	; (80158b8 <vPortValidateInterruptPriority+0x70>)
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	4413      	add	r3, r2
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015864:	4b15      	ldr	r3, [pc, #84]	; (80158bc <vPortValidateInterruptPriority+0x74>)
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	7afa      	ldrb	r2, [r7, #11]
 801586a:	429a      	cmp	r2, r3
 801586c:	d20a      	bcs.n	8015884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015872:	f383 8811 	msr	BASEPRI, r3
 8015876:	f3bf 8f6f 	isb	sy
 801587a:	f3bf 8f4f 	dsb	sy
 801587e:	607b      	str	r3, [r7, #4]
}
 8015880:	bf00      	nop
 8015882:	e7fe      	b.n	8015882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015884:	4b0e      	ldr	r3, [pc, #56]	; (80158c0 <vPortValidateInterruptPriority+0x78>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801588c:	4b0d      	ldr	r3, [pc, #52]	; (80158c4 <vPortValidateInterruptPriority+0x7c>)
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	429a      	cmp	r2, r3
 8015892:	d90a      	bls.n	80158aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015898:	f383 8811 	msr	BASEPRI, r3
 801589c:	f3bf 8f6f 	isb	sy
 80158a0:	f3bf 8f4f 	dsb	sy
 80158a4:	603b      	str	r3, [r7, #0]
}
 80158a6:	bf00      	nop
 80158a8:	e7fe      	b.n	80158a8 <vPortValidateInterruptPriority+0x60>
	}
 80158aa:	bf00      	nop
 80158ac:	3714      	adds	r7, #20
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop
 80158b8:	e000e3f0 	.word	0xe000e3f0
 80158bc:	20001bf8 	.word	0x20001bf8
 80158c0:	e000ed0c 	.word	0xe000ed0c
 80158c4:	20001bfc 	.word	0x20001bfc

080158c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b08a      	sub	sp, #40	; 0x28
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80158d0:	2300      	movs	r3, #0
 80158d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80158d4:	f7fe f9d8 	bl	8013c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80158d8:	4b5b      	ldr	r3, [pc, #364]	; (8015a48 <pvPortMalloc+0x180>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d101      	bne.n	80158e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80158e0:	f000 f920 	bl	8015b24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80158e4:	4b59      	ldr	r3, [pc, #356]	; (8015a4c <pvPortMalloc+0x184>)
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	4013      	ands	r3, r2
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	f040 8093 	bne.w	8015a18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d01d      	beq.n	8015934 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80158f8:	2208      	movs	r2, #8
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	4413      	add	r3, r2
 80158fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f003 0307 	and.w	r3, r3, #7
 8015906:	2b00      	cmp	r3, #0
 8015908:	d014      	beq.n	8015934 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f023 0307 	bic.w	r3, r3, #7
 8015910:	3308      	adds	r3, #8
 8015912:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f003 0307 	and.w	r3, r3, #7
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00a      	beq.n	8015934 <pvPortMalloc+0x6c>
	__asm volatile
 801591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015922:	f383 8811 	msr	BASEPRI, r3
 8015926:	f3bf 8f6f 	isb	sy
 801592a:	f3bf 8f4f 	dsb	sy
 801592e:	617b      	str	r3, [r7, #20]
}
 8015930:	bf00      	nop
 8015932:	e7fe      	b.n	8015932 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d06e      	beq.n	8015a18 <pvPortMalloc+0x150>
 801593a:	4b45      	ldr	r3, [pc, #276]	; (8015a50 <pvPortMalloc+0x188>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	687a      	ldr	r2, [r7, #4]
 8015940:	429a      	cmp	r2, r3
 8015942:	d869      	bhi.n	8015a18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015944:	4b43      	ldr	r3, [pc, #268]	; (8015a54 <pvPortMalloc+0x18c>)
 8015946:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015948:	4b42      	ldr	r3, [pc, #264]	; (8015a54 <pvPortMalloc+0x18c>)
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801594e:	e004      	b.n	801595a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015952:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	429a      	cmp	r2, r3
 8015962:	d903      	bls.n	801596c <pvPortMalloc+0xa4>
 8015964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d1f1      	bne.n	8015950 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801596c:	4b36      	ldr	r3, [pc, #216]	; (8015a48 <pvPortMalloc+0x180>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015972:	429a      	cmp	r2, r3
 8015974:	d050      	beq.n	8015a18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2208      	movs	r2, #8
 801597c:	4413      	add	r3, r2
 801597e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015982:	681a      	ldr	r2, [r3, #0]
 8015984:	6a3b      	ldr	r3, [r7, #32]
 8015986:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598a:	685a      	ldr	r2, [r3, #4]
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	1ad2      	subs	r2, r2, r3
 8015990:	2308      	movs	r3, #8
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	429a      	cmp	r2, r3
 8015996:	d91f      	bls.n	80159d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	4413      	add	r3, r2
 801599e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80159a0:	69bb      	ldr	r3, [r7, #24]
 80159a2:	f003 0307 	and.w	r3, r3, #7
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d00a      	beq.n	80159c0 <pvPortMalloc+0xf8>
	__asm volatile
 80159aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ae:	f383 8811 	msr	BASEPRI, r3
 80159b2:	f3bf 8f6f 	isb	sy
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	613b      	str	r3, [r7, #16]
}
 80159bc:	bf00      	nop
 80159be:	e7fe      	b.n	80159be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80159c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c2:	685a      	ldr	r2, [r3, #4]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	1ad2      	subs	r2, r2, r3
 80159c8:	69bb      	ldr	r3, [r7, #24]
 80159ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80159cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80159d2:	69b8      	ldr	r0, [r7, #24]
 80159d4:	f000 f908 	bl	8015be8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80159d8:	4b1d      	ldr	r3, [pc, #116]	; (8015a50 <pvPortMalloc+0x188>)
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159de:	685b      	ldr	r3, [r3, #4]
 80159e0:	1ad3      	subs	r3, r2, r3
 80159e2:	4a1b      	ldr	r2, [pc, #108]	; (8015a50 <pvPortMalloc+0x188>)
 80159e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80159e6:	4b1a      	ldr	r3, [pc, #104]	; (8015a50 <pvPortMalloc+0x188>)
 80159e8:	681a      	ldr	r2, [r3, #0]
 80159ea:	4b1b      	ldr	r3, [pc, #108]	; (8015a58 <pvPortMalloc+0x190>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d203      	bcs.n	80159fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80159f2:	4b17      	ldr	r3, [pc, #92]	; (8015a50 <pvPortMalloc+0x188>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	4a18      	ldr	r2, [pc, #96]	; (8015a58 <pvPortMalloc+0x190>)
 80159f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80159fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fc:	685a      	ldr	r2, [r3, #4]
 80159fe:	4b13      	ldr	r3, [pc, #76]	; (8015a4c <pvPortMalloc+0x184>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	431a      	orrs	r2, r3
 8015a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015a0e:	4b13      	ldr	r3, [pc, #76]	; (8015a5c <pvPortMalloc+0x194>)
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	3301      	adds	r3, #1
 8015a14:	4a11      	ldr	r2, [pc, #68]	; (8015a5c <pvPortMalloc+0x194>)
 8015a16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015a18:	f7fe f944 	bl	8013ca4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	f003 0307 	and.w	r3, r3, #7
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d00a      	beq.n	8015a3c <pvPortMalloc+0x174>
	__asm volatile
 8015a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2a:	f383 8811 	msr	BASEPRI, r3
 8015a2e:	f3bf 8f6f 	isb	sy
 8015a32:	f3bf 8f4f 	dsb	sy
 8015a36:	60fb      	str	r3, [r7, #12]
}
 8015a38:	bf00      	nop
 8015a3a:	e7fe      	b.n	8015a3a <pvPortMalloc+0x172>
	return pvReturn;
 8015a3c:	69fb      	ldr	r3, [r7, #28]
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3728      	adds	r7, #40	; 0x28
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	20004318 	.word	0x20004318
 8015a4c:	2000432c 	.word	0x2000432c
 8015a50:	2000431c 	.word	0x2000431c
 8015a54:	20004310 	.word	0x20004310
 8015a58:	20004320 	.word	0x20004320
 8015a5c:	20004324 	.word	0x20004324

08015a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d04d      	beq.n	8015b0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015a72:	2308      	movs	r3, #8
 8015a74:	425b      	negs	r3, r3
 8015a76:	697a      	ldr	r2, [r7, #20]
 8015a78:	4413      	add	r3, r2
 8015a7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	685a      	ldr	r2, [r3, #4]
 8015a84:	4b24      	ldr	r3, [pc, #144]	; (8015b18 <vPortFree+0xb8>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	4013      	ands	r3, r2
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d10a      	bne.n	8015aa4 <vPortFree+0x44>
	__asm volatile
 8015a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a92:	f383 8811 	msr	BASEPRI, r3
 8015a96:	f3bf 8f6f 	isb	sy
 8015a9a:	f3bf 8f4f 	dsb	sy
 8015a9e:	60fb      	str	r3, [r7, #12]
}
 8015aa0:	bf00      	nop
 8015aa2:	e7fe      	b.n	8015aa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d00a      	beq.n	8015ac2 <vPortFree+0x62>
	__asm volatile
 8015aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab0:	f383 8811 	msr	BASEPRI, r3
 8015ab4:	f3bf 8f6f 	isb	sy
 8015ab8:	f3bf 8f4f 	dsb	sy
 8015abc:	60bb      	str	r3, [r7, #8]
}
 8015abe:	bf00      	nop
 8015ac0:	e7fe      	b.n	8015ac0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	685a      	ldr	r2, [r3, #4]
 8015ac6:	4b14      	ldr	r3, [pc, #80]	; (8015b18 <vPortFree+0xb8>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	4013      	ands	r3, r2
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d01e      	beq.n	8015b0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d11a      	bne.n	8015b0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	685a      	ldr	r2, [r3, #4]
 8015adc:	4b0e      	ldr	r3, [pc, #56]	; (8015b18 <vPortFree+0xb8>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	43db      	mvns	r3, r3
 8015ae2:	401a      	ands	r2, r3
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015ae8:	f7fe f8ce 	bl	8013c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	685a      	ldr	r2, [r3, #4]
 8015af0:	4b0a      	ldr	r3, [pc, #40]	; (8015b1c <vPortFree+0xbc>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	4413      	add	r3, r2
 8015af6:	4a09      	ldr	r2, [pc, #36]	; (8015b1c <vPortFree+0xbc>)
 8015af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015afa:	6938      	ldr	r0, [r7, #16]
 8015afc:	f000 f874 	bl	8015be8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015b00:	4b07      	ldr	r3, [pc, #28]	; (8015b20 <vPortFree+0xc0>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	3301      	adds	r3, #1
 8015b06:	4a06      	ldr	r2, [pc, #24]	; (8015b20 <vPortFree+0xc0>)
 8015b08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015b0a:	f7fe f8cb 	bl	8013ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015b0e:	bf00      	nop
 8015b10:	3718      	adds	r7, #24
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	2000432c 	.word	0x2000432c
 8015b1c:	2000431c 	.word	0x2000431c
 8015b20:	20004328 	.word	0x20004328

08015b24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015b24:	b480      	push	{r7}
 8015b26:	b085      	sub	sp, #20
 8015b28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015b2a:	f242 7310 	movw	r3, #10000	; 0x2710
 8015b2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015b30:	4b27      	ldr	r3, [pc, #156]	; (8015bd0 <prvHeapInit+0xac>)
 8015b32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f003 0307 	and.w	r3, r3, #7
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d00c      	beq.n	8015b58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	3307      	adds	r3, #7
 8015b42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	f023 0307 	bic.w	r3, r3, #7
 8015b4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015b4c:	68ba      	ldr	r2, [r7, #8]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	1ad3      	subs	r3, r2, r3
 8015b52:	4a1f      	ldr	r2, [pc, #124]	; (8015bd0 <prvHeapInit+0xac>)
 8015b54:	4413      	add	r3, r2
 8015b56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015b5c:	4a1d      	ldr	r2, [pc, #116]	; (8015bd4 <prvHeapInit+0xb0>)
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015b62:	4b1c      	ldr	r3, [pc, #112]	; (8015bd4 <prvHeapInit+0xb0>)
 8015b64:	2200      	movs	r2, #0
 8015b66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	68ba      	ldr	r2, [r7, #8]
 8015b6c:	4413      	add	r3, r2
 8015b6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015b70:	2208      	movs	r2, #8
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	1a9b      	subs	r3, r3, r2
 8015b76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f023 0307 	bic.w	r3, r3, #7
 8015b7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	4a15      	ldr	r2, [pc, #84]	; (8015bd8 <prvHeapInit+0xb4>)
 8015b84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015b86:	4b14      	ldr	r3, [pc, #80]	; (8015bd8 <prvHeapInit+0xb4>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015b8e:	4b12      	ldr	r3, [pc, #72]	; (8015bd8 <prvHeapInit+0xb4>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2200      	movs	r2, #0
 8015b94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	68fa      	ldr	r2, [r7, #12]
 8015b9e:	1ad2      	subs	r2, r2, r3
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ba4:	4b0c      	ldr	r3, [pc, #48]	; (8015bd8 <prvHeapInit+0xb4>)
 8015ba6:	681a      	ldr	r2, [r3, #0]
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015bac:	683b      	ldr	r3, [r7, #0]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	4a0a      	ldr	r2, [pc, #40]	; (8015bdc <prvHeapInit+0xb8>)
 8015bb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	4a09      	ldr	r2, [pc, #36]	; (8015be0 <prvHeapInit+0xbc>)
 8015bba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015bbc:	4b09      	ldr	r3, [pc, #36]	; (8015be4 <prvHeapInit+0xc0>)
 8015bbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015bc2:	601a      	str	r2, [r3, #0]
}
 8015bc4:	bf00      	nop
 8015bc6:	3714      	adds	r7, #20
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr
 8015bd0:	20001c00 	.word	0x20001c00
 8015bd4:	20004310 	.word	0x20004310
 8015bd8:	20004318 	.word	0x20004318
 8015bdc:	20004320 	.word	0x20004320
 8015be0:	2000431c 	.word	0x2000431c
 8015be4:	2000432c 	.word	0x2000432c

08015be8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015be8:	b480      	push	{r7}
 8015bea:	b085      	sub	sp, #20
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015bf0:	4b28      	ldr	r3, [pc, #160]	; (8015c94 <prvInsertBlockIntoFreeList+0xac>)
 8015bf2:	60fb      	str	r3, [r7, #12]
 8015bf4:	e002      	b.n	8015bfc <prvInsertBlockIntoFreeList+0x14>
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	60fb      	str	r3, [r7, #12]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d8f7      	bhi.n	8015bf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	68ba      	ldr	r2, [r7, #8]
 8015c10:	4413      	add	r3, r2
 8015c12:	687a      	ldr	r2, [r7, #4]
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d108      	bne.n	8015c2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	685a      	ldr	r2, [r3, #4]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	441a      	add	r2, r3
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	68ba      	ldr	r2, [r7, #8]
 8015c34:	441a      	add	r2, r3
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d118      	bne.n	8015c70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	4b15      	ldr	r3, [pc, #84]	; (8015c98 <prvInsertBlockIntoFreeList+0xb0>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d00d      	beq.n	8015c66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	441a      	add	r2, r3
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	681a      	ldr	r2, [r3, #0]
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	601a      	str	r2, [r3, #0]
 8015c64:	e008      	b.n	8015c78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015c66:	4b0c      	ldr	r3, [pc, #48]	; (8015c98 <prvInsertBlockIntoFreeList+0xb0>)
 8015c68:	681a      	ldr	r2, [r3, #0]
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	601a      	str	r2, [r3, #0]
 8015c6e:	e003      	b.n	8015c78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015c78:	68fa      	ldr	r2, [r7, #12]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d002      	beq.n	8015c86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015c86:	bf00      	nop
 8015c88:	3714      	adds	r7, #20
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop
 8015c94:	20004310 	.word	0x20004310
 8015c98:	20004318 	.word	0x20004318

08015c9c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	685a      	ldr	r2, [r3, #4]
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	041b      	lsls	r3, r3, #16
 8015cae:	431a      	orrs	r2, r3
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	605a      	str	r2, [r3, #4]
}
 8015cb4:	bf00      	nop
 8015cb6:	370c      	adds	r7, #12
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbe:	4770      	bx	lr

08015cc0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b083      	sub	sp, #12
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	683a      	ldr	r2, [r7, #0]
 8015cce:	609a      	str	r2, [r3, #8]
}
 8015cd0:	bf00      	nop
 8015cd2:	370c      	adds	r7, #12
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr

08015cdc <LL_C1_IPCC_SetFlag_CHx>:
{
 8015cdc:	b480      	push	{r7}
 8015cde:	b083      	sub	sp, #12
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
 8015ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	041a      	lsls	r2, r3, #16
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	609a      	str	r2, [r3, #8]
}
 8015cee:	bf00      	nop
 8015cf0:	370c      	adds	r7, #12
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf8:	4770      	bx	lr

08015cfa <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8015cfa:	b480      	push	{r7}
 8015cfc:	b083      	sub	sp, #12
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	68da      	ldr	r2, [r3, #12]
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	4013      	ands	r3, r2
 8015d0c:	683a      	ldr	r2, [r7, #0]
 8015d0e:	429a      	cmp	r2, r3
 8015d10:	d101      	bne.n	8015d16 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8015d12:	2301      	movs	r3, #1
 8015d14:	e000      	b.n	8015d18 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8015d16:	2300      	movs	r3, #0
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	370c      	adds	r7, #12
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d22:	4770      	bx	lr

08015d24 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8015d24:	b480      	push	{r7}
 8015d26:	b083      	sub	sp, #12
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	69da      	ldr	r2, [r3, #28]
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	4013      	ands	r3, r2
 8015d36:	683a      	ldr	r2, [r7, #0]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d101      	bne.n	8015d40 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	e000      	b.n	8015d42 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8015d40:	2300      	movs	r3, #0
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	370c      	adds	r7, #12
 8015d46:	46bd      	mov	sp, r7
 8015d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4c:	4770      	bx	lr
	...

08015d50 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8015d54:	2102      	movs	r1, #2
 8015d56:	4819      	ldr	r0, [pc, #100]	; (8015dbc <HW_IPCC_Rx_Handler+0x6c>)
 8015d58:	f7ff ffe4 	bl	8015d24 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d009      	beq.n	8015d76 <HW_IPCC_Rx_Handler+0x26>
 8015d62:	4b16      	ldr	r3, [pc, #88]	; (8015dbc <HW_IPCC_Rx_Handler+0x6c>)
 8015d64:	685b      	ldr	r3, [r3, #4]
 8015d66:	43db      	mvns	r3, r3
 8015d68:	f003 0302 	and.w	r3, r3, #2
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d002      	beq.n	8015d76 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8015d70:	f000 f884 	bl	8015e7c <HW_IPCC_SYS_EvtHandler>
 8015d74:	e01f      	b.n	8015db6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8015d76:	2101      	movs	r1, #1
 8015d78:	4810      	ldr	r0, [pc, #64]	; (8015dbc <HW_IPCC_Rx_Handler+0x6c>)
 8015d7a:	f7ff ffd3 	bl	8015d24 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d008      	beq.n	8015d96 <HW_IPCC_Rx_Handler+0x46>
 8015d84:	4b0d      	ldr	r3, [pc, #52]	; (8015dbc <HW_IPCC_Rx_Handler+0x6c>)
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	f003 0301 	and.w	r3, r3, #1
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d102      	bne.n	8015d96 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8015d90:	f000 f850 	bl	8015e34 <HW_IPCC_BLE_EvtHandler>
 8015d94:	e00f      	b.n	8015db6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8015d96:	2108      	movs	r1, #8
 8015d98:	4808      	ldr	r0, [pc, #32]	; (8015dbc <HW_IPCC_Rx_Handler+0x6c>)
 8015d9a:	f7ff ffc3 	bl	8015d24 <LL_C2_IPCC_IsActiveFlag_CHx>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d009      	beq.n	8015db8 <HW_IPCC_Rx_Handler+0x68>
 8015da4:	4b05      	ldr	r3, [pc, #20]	; (8015dbc <HW_IPCC_Rx_Handler+0x6c>)
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	43db      	mvns	r3, r3
 8015daa:	f003 0308 	and.w	r3, r3, #8
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d002      	beq.n	8015db8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015db2:	f000 f883 	bl	8015ebc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015db6:	bf00      	nop
 8015db8:	bf00      	nop
}
 8015dba:	bd80      	pop	{r7, pc}
 8015dbc:	58000c00 	.word	0x58000c00

08015dc0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015dc4:	2102      	movs	r1, #2
 8015dc6:	481a      	ldr	r0, [pc, #104]	; (8015e30 <HW_IPCC_Tx_Handler+0x70>)
 8015dc8:	f7ff ff97 	bl	8015cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d109      	bne.n	8015de6 <HW_IPCC_Tx_Handler+0x26>
 8015dd2:	4b17      	ldr	r3, [pc, #92]	; (8015e30 <HW_IPCC_Tx_Handler+0x70>)
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	43db      	mvns	r3, r3
 8015dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d002      	beq.n	8015de6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8015de0:	f000 f840 	bl	8015e64 <HW_IPCC_SYS_CmdEvtHandler>
 8015de4:	e020      	b.n	8015e28 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8015de6:	2108      	movs	r1, #8
 8015de8:	4811      	ldr	r0, [pc, #68]	; (8015e30 <HW_IPCC_Tx_Handler+0x70>)
 8015dea:	f7ff ff86 	bl	8015cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d109      	bne.n	8015e08 <HW_IPCC_Tx_Handler+0x48>
 8015df4:	4b0e      	ldr	r3, [pc, #56]	; (8015e30 <HW_IPCC_Tx_Handler+0x70>)
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	43db      	mvns	r3, r3
 8015dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d002      	beq.n	8015e08 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8015e02:	f000 f847 	bl	8015e94 <HW_IPCC_MM_FreeBufHandler>
 8015e06:	e00f      	b.n	8015e28 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015e08:	2120      	movs	r1, #32
 8015e0a:	4809      	ldr	r0, [pc, #36]	; (8015e30 <HW_IPCC_Tx_Handler+0x70>)
 8015e0c:	f7ff ff75 	bl	8015cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8015e10:	4603      	mov	r3, r0
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d109      	bne.n	8015e2a <HW_IPCC_Tx_Handler+0x6a>
 8015e16:	4b06      	ldr	r3, [pc, #24]	; (8015e30 <HW_IPCC_Tx_Handler+0x70>)
 8015e18:	685b      	ldr	r3, [r3, #4]
 8015e1a:	43db      	mvns	r3, r3
 8015e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d002      	beq.n	8015e2a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8015e24:	f000 f812 	bl	8015e4c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8015e28:	bf00      	nop
 8015e2a:	bf00      	nop
}
 8015e2c:	bd80      	pop	{r7, pc}
 8015e2e:	bf00      	nop
 8015e30:	58000c00 	.word	0x58000c00

08015e34 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8015e38:	f7fa f802 	bl	800fe40 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015e3c:	2101      	movs	r1, #1
 8015e3e:	4802      	ldr	r0, [pc, #8]	; (8015e48 <HW_IPCC_BLE_EvtHandler+0x14>)
 8015e40:	f7ff ff3e 	bl	8015cc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015e44:	bf00      	nop
}
 8015e46:	bd80      	pop	{r7, pc}
 8015e48:	58000c00 	.word	0x58000c00

08015e4c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015e50:	2120      	movs	r1, #32
 8015e52:	4803      	ldr	r0, [pc, #12]	; (8015e60 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015e54:	f7ff ff22 	bl	8015c9c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8015e58:	f7fa f822 	bl	800fea0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015e5c:	bf00      	nop
}
 8015e5e:	bd80      	pop	{r7, pc}
 8015e60:	58000c00 	.word	0x58000c00

08015e64 <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015e68:	2102      	movs	r1, #2
 8015e6a:	4803      	ldr	r0, [pc, #12]	; (8015e78 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015e6c:	f7ff ff16 	bl	8015c9c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015e70:	f7fa f820 	bl	800feb4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015e74:	bf00      	nop
}
 8015e76:	bd80      	pop	{r7, pc}
 8015e78:	58000c00 	.word	0x58000c00

08015e7c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015e80:	f7fa f82e 	bl	800fee0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015e84:	2102      	movs	r1, #2
 8015e86:	4802      	ldr	r0, [pc, #8]	; (8015e90 <HW_IPCC_SYS_EvtHandler+0x14>)
 8015e88:	f7ff ff1a 	bl	8015cc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015e8c:	bf00      	nop
}
 8015e8e:	bd80      	pop	{r7, pc}
 8015e90:	58000c00 	.word	0x58000c00

08015e94 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015e98:	2108      	movs	r1, #8
 8015e9a:	4806      	ldr	r0, [pc, #24]	; (8015eb4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015e9c:	f7ff fefe 	bl	8015c9c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8015ea0:	4b05      	ldr	r3, [pc, #20]	; (8015eb8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8015ea6:	2108      	movs	r1, #8
 8015ea8:	4802      	ldr	r0, [pc, #8]	; (8015eb4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8015eaa:	f7ff ff17 	bl	8015cdc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8015eae:	bf00      	nop
}
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	58000c00 	.word	0x58000c00
 8015eb8:	20004330 	.word	0x20004330

08015ebc <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8015ec0:	f7fa f830 	bl	800ff24 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015ec4:	2108      	movs	r1, #8
 8015ec6:	4802      	ldr	r0, [pc, #8]	; (8015ed0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8015ec8:	f7ff fefa 	bl	8015cc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015ecc:	bf00      	nop
}
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	58000c00 	.word	0x58000c00

08015ed4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015ed8:	2200      	movs	r2, #0
 8015eda:	4912      	ldr	r1, [pc, #72]	; (8015f24 <MX_USB_Device_Init+0x50>)
 8015edc:	4812      	ldr	r0, [pc, #72]	; (8015f28 <MX_USB_Device_Init+0x54>)
 8015ede:	f7f8 fe8f 	bl	800ec00 <USBD_Init>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d001      	beq.n	8015eec <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015ee8:	f7eb ffa8 	bl	8001e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015eec:	490f      	ldr	r1, [pc, #60]	; (8015f2c <MX_USB_Device_Init+0x58>)
 8015eee:	480e      	ldr	r0, [pc, #56]	; (8015f28 <MX_USB_Device_Init+0x54>)
 8015ef0:	f7f8 feb6 	bl	800ec60 <USBD_RegisterClass>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d001      	beq.n	8015efe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8015efa:	f7eb ff9f 	bl	8001e3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015efe:	490c      	ldr	r1, [pc, #48]	; (8015f30 <MX_USB_Device_Init+0x5c>)
 8015f00:	4809      	ldr	r0, [pc, #36]	; (8015f28 <MX_USB_Device_Init+0x54>)
 8015f02:	f7f8 fe07 	bl	800eb14 <USBD_CDC_RegisterInterface>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d001      	beq.n	8015f10 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015f0c:	f7eb ff96 	bl	8001e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015f10:	4805      	ldr	r0, [pc, #20]	; (8015f28 <MX_USB_Device_Init+0x54>)
 8015f12:	f7f8 fecc 	bl	800ecae <USBD_Start>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d001      	beq.n	8015f20 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015f1c:	f7eb ff8e 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015f20:	bf00      	nop
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	20000144 	.word	0x20000144
 8015f28:	200049f0 	.word	0x200049f0
 8015f2c:	20000028 	.word	0x20000028
 8015f30:	20000130 	.word	0x20000130

08015f34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015f38:	2200      	movs	r2, #0
 8015f3a:	4905      	ldr	r1, [pc, #20]	; (8015f50 <CDC_Init_FS+0x1c>)
 8015f3c:	4805      	ldr	r0, [pc, #20]	; (8015f54 <CDC_Init_FS+0x20>)
 8015f3e:	f7f8 fdfe 	bl	800eb3e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015f42:	4905      	ldr	r1, [pc, #20]	; (8015f58 <CDC_Init_FS+0x24>)
 8015f44:	4803      	ldr	r0, [pc, #12]	; (8015f54 <CDC_Init_FS+0x20>)
 8015f46:	f7f8 fe18 	bl	800eb7a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015f4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	200054c0 	.word	0x200054c0
 8015f54:	200049f0 	.word	0x200049f0
 8015f58:	20004cc0 	.word	0x20004cc0

08015f5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015f60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	46bd      	mov	sp, r7
 8015f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6a:	4770      	bx	lr

08015f6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015f6c:	b480      	push	{r7}
 8015f6e:	b083      	sub	sp, #12
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	4603      	mov	r3, r0
 8015f74:	6039      	str	r1, [r7, #0]
 8015f76:	71fb      	strb	r3, [r7, #7]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015f7c:	79fb      	ldrb	r3, [r7, #7]
 8015f7e:	2b23      	cmp	r3, #35	; 0x23
 8015f80:	d84a      	bhi.n	8016018 <CDC_Control_FS+0xac>
 8015f82:	a201      	add	r2, pc, #4	; (adr r2, 8015f88 <CDC_Control_FS+0x1c>)
 8015f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f88:	08016019 	.word	0x08016019
 8015f8c:	08016019 	.word	0x08016019
 8015f90:	08016019 	.word	0x08016019
 8015f94:	08016019 	.word	0x08016019
 8015f98:	08016019 	.word	0x08016019
 8015f9c:	08016019 	.word	0x08016019
 8015fa0:	08016019 	.word	0x08016019
 8015fa4:	08016019 	.word	0x08016019
 8015fa8:	08016019 	.word	0x08016019
 8015fac:	08016019 	.word	0x08016019
 8015fb0:	08016019 	.word	0x08016019
 8015fb4:	08016019 	.word	0x08016019
 8015fb8:	08016019 	.word	0x08016019
 8015fbc:	08016019 	.word	0x08016019
 8015fc0:	08016019 	.word	0x08016019
 8015fc4:	08016019 	.word	0x08016019
 8015fc8:	08016019 	.word	0x08016019
 8015fcc:	08016019 	.word	0x08016019
 8015fd0:	08016019 	.word	0x08016019
 8015fd4:	08016019 	.word	0x08016019
 8015fd8:	08016019 	.word	0x08016019
 8015fdc:	08016019 	.word	0x08016019
 8015fe0:	08016019 	.word	0x08016019
 8015fe4:	08016019 	.word	0x08016019
 8015fe8:	08016019 	.word	0x08016019
 8015fec:	08016019 	.word	0x08016019
 8015ff0:	08016019 	.word	0x08016019
 8015ff4:	08016019 	.word	0x08016019
 8015ff8:	08016019 	.word	0x08016019
 8015ffc:	08016019 	.word	0x08016019
 8016000:	08016019 	.word	0x08016019
 8016004:	08016019 	.word	0x08016019
 8016008:	08016019 	.word	0x08016019
 801600c:	08016019 	.word	0x08016019
 8016010:	08016019 	.word	0x08016019
 8016014:	08016019 	.word	0x08016019
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016018:	bf00      	nop
  }

  return (USBD_OK);
 801601a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801601c:	4618      	mov	r0, r3
 801601e:	370c      	adds	r7, #12
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr

08016028 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016032:	6879      	ldr	r1, [r7, #4]
 8016034:	4805      	ldr	r0, [pc, #20]	; (801604c <CDC_Receive_FS+0x24>)
 8016036:	f7f8 fda0 	bl	800eb7a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801603a:	4804      	ldr	r0, [pc, #16]	; (801604c <CDC_Receive_FS+0x24>)
 801603c:	f7f8 fdb6 	bl	800ebac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016040:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016042:	4618      	mov	r0, r3
 8016044:	3708      	adds	r7, #8
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}
 801604a:	bf00      	nop
 801604c:	200049f0 	.word	0x200049f0

08016050 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016050:	b480      	push	{r7}
 8016052:	b087      	sub	sp, #28
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	4613      	mov	r3, r2
 801605c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801605e:	2300      	movs	r3, #0
 8016060:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016066:	4618      	mov	r0, r3
 8016068:	371c      	adds	r7, #28
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr
	...

08016074 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016074:	b480      	push	{r7}
 8016076:	b083      	sub	sp, #12
 8016078:	af00      	add	r7, sp, #0
 801607a:	4603      	mov	r3, r0
 801607c:	6039      	str	r1, [r7, #0]
 801607e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	2212      	movs	r2, #18
 8016084:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8016086:	4b03      	ldr	r3, [pc, #12]	; (8016094 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8016088:	4618      	mov	r0, r3
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr
 8016094:	20000164 	.word	0x20000164

08016098 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
 801609e:	4603      	mov	r3, r0
 80160a0:	6039      	str	r1, [r7, #0]
 80160a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	2204      	movs	r2, #4
 80160a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80160aa:	4b03      	ldr	r3, [pc, #12]	; (80160b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr
 80160b8:	20000178 	.word	0x20000178

080160bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	6039      	str	r1, [r7, #0]
 80160c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80160c8:	79fb      	ldrb	r3, [r7, #7]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d105      	bne.n	80160da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80160ce:	683a      	ldr	r2, [r7, #0]
 80160d0:	4907      	ldr	r1, [pc, #28]	; (80160f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80160d2:	4808      	ldr	r0, [pc, #32]	; (80160f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80160d4:	f7f9 fdd3 	bl	800fc7e <USBD_GetString>
 80160d8:	e004      	b.n	80160e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80160da:	683a      	ldr	r2, [r7, #0]
 80160dc:	4904      	ldr	r1, [pc, #16]	; (80160f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80160de:	4805      	ldr	r0, [pc, #20]	; (80160f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80160e0:	f7f9 fdcd 	bl	800fc7e <USBD_GetString>
  }
  return USBD_StrDesc;
 80160e4:	4b02      	ldr	r3, [pc, #8]	; (80160f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3708      	adds	r7, #8
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	20005cc0 	.word	0x20005cc0
 80160f4:	080176f8 	.word	0x080176f8

080160f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	6039      	str	r1, [r7, #0]
 8016102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016104:	683a      	ldr	r2, [r7, #0]
 8016106:	4904      	ldr	r1, [pc, #16]	; (8016118 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8016108:	4804      	ldr	r0, [pc, #16]	; (801611c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801610a:	f7f9 fdb8 	bl	800fc7e <USBD_GetString>
  return USBD_StrDesc;
 801610e:	4b02      	ldr	r3, [pc, #8]	; (8016118 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8016110:	4618      	mov	r0, r3
 8016112:	3708      	adds	r7, #8
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}
 8016118:	20005cc0 	.word	0x20005cc0
 801611c:	08017710 	.word	0x08017710

08016120 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	4603      	mov	r3, r0
 8016128:	6039      	str	r1, [r7, #0]
 801612a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	221a      	movs	r2, #26
 8016130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016132:	f000 f843 	bl	80161bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016136:	4b02      	ldr	r3, [pc, #8]	; (8016140 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8016138:	4618      	mov	r0, r3
 801613a:	3708      	adds	r7, #8
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	2000017c 	.word	0x2000017c

08016144 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
 801614a:	4603      	mov	r3, r0
 801614c:	6039      	str	r1, [r7, #0]
 801614e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016150:	79fb      	ldrb	r3, [r7, #7]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d105      	bne.n	8016162 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016156:	683a      	ldr	r2, [r7, #0]
 8016158:	4907      	ldr	r1, [pc, #28]	; (8016178 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801615a:	4808      	ldr	r0, [pc, #32]	; (801617c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801615c:	f7f9 fd8f 	bl	800fc7e <USBD_GetString>
 8016160:	e004      	b.n	801616c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016162:	683a      	ldr	r2, [r7, #0]
 8016164:	4904      	ldr	r1, [pc, #16]	; (8016178 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8016166:	4805      	ldr	r0, [pc, #20]	; (801617c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8016168:	f7f9 fd89 	bl	800fc7e <USBD_GetString>
  }
  return USBD_StrDesc;
 801616c:	4b02      	ldr	r3, [pc, #8]	; (8016178 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801616e:	4618      	mov	r0, r3
 8016170:	3708      	adds	r7, #8
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	20005cc0 	.word	0x20005cc0
 801617c:	08017724 	.word	0x08017724

08016180 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	4603      	mov	r3, r0
 8016188:	6039      	str	r1, [r7, #0]
 801618a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801618c:	79fb      	ldrb	r3, [r7, #7]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d105      	bne.n	801619e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8016192:	683a      	ldr	r2, [r7, #0]
 8016194:	4907      	ldr	r1, [pc, #28]	; (80161b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016196:	4808      	ldr	r0, [pc, #32]	; (80161b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016198:	f7f9 fd71 	bl	800fc7e <USBD_GetString>
 801619c:	e004      	b.n	80161a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801619e:	683a      	ldr	r2, [r7, #0]
 80161a0:	4904      	ldr	r1, [pc, #16]	; (80161b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80161a2:	4805      	ldr	r0, [pc, #20]	; (80161b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80161a4:	f7f9 fd6b 	bl	800fc7e <USBD_GetString>
  }
  return USBD_StrDesc;
 80161a8:	4b02      	ldr	r3, [pc, #8]	; (80161b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	bf00      	nop
 80161b4:	20005cc0 	.word	0x20005cc0
 80161b8:	08017730 	.word	0x08017730

080161bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80161c2:	4b0f      	ldr	r3, [pc, #60]	; (8016200 <Get_SerialNum+0x44>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80161c8:	4b0e      	ldr	r3, [pc, #56]	; (8016204 <Get_SerialNum+0x48>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80161ce:	4b0e      	ldr	r3, [pc, #56]	; (8016208 <Get_SerialNum+0x4c>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80161d4:	68fa      	ldr	r2, [r7, #12]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	4413      	add	r3, r2
 80161da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d009      	beq.n	80161f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80161e2:	2208      	movs	r2, #8
 80161e4:	4909      	ldr	r1, [pc, #36]	; (801620c <Get_SerialNum+0x50>)
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f000 f814 	bl	8016214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80161ec:	2204      	movs	r2, #4
 80161ee:	4908      	ldr	r1, [pc, #32]	; (8016210 <Get_SerialNum+0x54>)
 80161f0:	68b8      	ldr	r0, [r7, #8]
 80161f2:	f000 f80f 	bl	8016214 <IntToUnicode>
  }
}
 80161f6:	bf00      	nop
 80161f8:	3710      	adds	r7, #16
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	1fff7590 	.word	0x1fff7590
 8016204:	1fff7594 	.word	0x1fff7594
 8016208:	1fff7598 	.word	0x1fff7598
 801620c:	2000017e 	.word	0x2000017e
 8016210:	2000018e 	.word	0x2000018e

08016214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016214:	b480      	push	{r7}
 8016216:	b087      	sub	sp, #28
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	4613      	mov	r3, r2
 8016220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016222:	2300      	movs	r3, #0
 8016224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016226:	2300      	movs	r3, #0
 8016228:	75fb      	strb	r3, [r7, #23]
 801622a:	e027      	b.n	801627c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	0f1b      	lsrs	r3, r3, #28
 8016230:	2b09      	cmp	r3, #9
 8016232:	d80b      	bhi.n	801624c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	0f1b      	lsrs	r3, r3, #28
 8016238:	b2da      	uxtb	r2, r3
 801623a:	7dfb      	ldrb	r3, [r7, #23]
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	4619      	mov	r1, r3
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	440b      	add	r3, r1
 8016244:	3230      	adds	r2, #48	; 0x30
 8016246:	b2d2      	uxtb	r2, r2
 8016248:	701a      	strb	r2, [r3, #0]
 801624a:	e00a      	b.n	8016262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	0f1b      	lsrs	r3, r3, #28
 8016250:	b2da      	uxtb	r2, r3
 8016252:	7dfb      	ldrb	r3, [r7, #23]
 8016254:	005b      	lsls	r3, r3, #1
 8016256:	4619      	mov	r1, r3
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	440b      	add	r3, r1
 801625c:	3237      	adds	r2, #55	; 0x37
 801625e:	b2d2      	uxtb	r2, r2
 8016260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	011b      	lsls	r3, r3, #4
 8016266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016268:	7dfb      	ldrb	r3, [r7, #23]
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	3301      	adds	r3, #1
 801626e:	68ba      	ldr	r2, [r7, #8]
 8016270:	4413      	add	r3, r2
 8016272:	2200      	movs	r2, #0
 8016274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016276:	7dfb      	ldrb	r3, [r7, #23]
 8016278:	3301      	adds	r3, #1
 801627a:	75fb      	strb	r3, [r7, #23]
 801627c:	7dfa      	ldrb	r2, [r7, #23]
 801627e:	79fb      	ldrb	r3, [r7, #7]
 8016280:	429a      	cmp	r2, r3
 8016282:	d3d3      	bcc.n	801622c <IntToUnicode+0x18>
  }
}
 8016284:	bf00      	nop
 8016286:	bf00      	nop
 8016288:	371c      	adds	r7, #28
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr

08016292 <LL_AHB2_GRP1_EnableClock>:
{
 8016292:	b480      	push	{r7}
 8016294:	b085      	sub	sp, #20
 8016296:	af00      	add	r7, sp, #0
 8016298:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801629a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801629e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80162a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	4313      	orrs	r3, r2
 80162a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80162aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80162ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	4013      	ands	r3, r2
 80162b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80162b6:	68fb      	ldr	r3, [r7, #12]
}
 80162b8:	bf00      	nop
 80162ba:	3714      	adds	r7, #20
 80162bc:	46bd      	mov	sp, r7
 80162be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c2:	4770      	bx	lr

080162c4 <LL_APB1_GRP1_EnableClock>:
{
 80162c4:	b480      	push	{r7}
 80162c6:	b085      	sub	sp, #20
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80162cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80162d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80162d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	4313      	orrs	r3, r2
 80162da:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80162dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80162e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	4013      	ands	r3, r2
 80162e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80162e8:	68fb      	ldr	r3, [r7, #12]
}
 80162ea:	bf00      	nop
 80162ec:	3714      	adds	r7, #20
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr
	...

080162f8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b088      	sub	sp, #32
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016300:	f107 030c 	add.w	r3, r7, #12
 8016304:	2200      	movs	r2, #0
 8016306:	601a      	str	r2, [r3, #0]
 8016308:	605a      	str	r2, [r3, #4]
 801630a:	609a      	str	r2, [r3, #8]
 801630c:	60da      	str	r2, [r3, #12]
 801630e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	4a1d      	ldr	r2, [pc, #116]	; (801638c <HAL_PCD_MspInit+0x94>)
 8016316:	4293      	cmp	r3, r2
 8016318:	d134      	bne.n	8016384 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801631a:	2001      	movs	r0, #1
 801631c:	f7ff ffb9 	bl	8016292 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016320:	2004      	movs	r0, #4
 8016322:	f7ff ffb6 	bl	8016292 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8016326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801632a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801632c:	2302      	movs	r3, #2
 801632e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016330:	2300      	movs	r3, #0
 8016332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016334:	2300      	movs	r3, #0
 8016336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8016338:	230a      	movs	r3, #10
 801633a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801633c:	f107 030c 	add.w	r3, r7, #12
 8016340:	4619      	mov	r1, r3
 8016342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016346:	f7ee f933 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801634a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801634e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016350:	2302      	movs	r3, #2
 8016352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016354:	2300      	movs	r3, #0
 8016356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016358:	2300      	movs	r3, #0
 801635a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 801635c:	230a      	movs	r3, #10
 801635e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016360:	f107 030c 	add.w	r3, r7, #12
 8016364:	4619      	mov	r1, r3
 8016366:	480a      	ldr	r0, [pc, #40]	; (8016390 <HAL_PCD_MspInit+0x98>)
 8016368:	f7ee f922 	bl	80045b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801636c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8016370:	f7ff ffa8 	bl	80162c4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8016374:	2200      	movs	r2, #0
 8016376:	2105      	movs	r1, #5
 8016378:	2014      	movs	r0, #20
 801637a:	f7ed fe7d 	bl	8004078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801637e:	2014      	movs	r0, #20
 8016380:	f7ed fe94 	bl	80040ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016384:	bf00      	nop
 8016386:	3720      	adds	r7, #32
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	40006800 	.word	0x40006800
 8016390:	48000800 	.word	0x48000800

08016394 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80163a8:	4619      	mov	r1, r3
 80163aa:	4610      	mov	r0, r2
 80163ac:	f7f8 fcca 	bl	800ed44 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80163b0:	bf00      	nop
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	460b      	mov	r3, r1
 80163c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80163ca:	78fa      	ldrb	r2, [r7, #3]
 80163cc:	6879      	ldr	r1, [r7, #4]
 80163ce:	4613      	mov	r3, r2
 80163d0:	009b      	lsls	r3, r3, #2
 80163d2:	4413      	add	r3, r2
 80163d4:	00db      	lsls	r3, r3, #3
 80163d6:	440b      	add	r3, r1
 80163d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80163dc:	681a      	ldr	r2, [r3, #0]
 80163de:	78fb      	ldrb	r3, [r7, #3]
 80163e0:	4619      	mov	r1, r3
 80163e2:	f7f8 fd04 	bl	800edee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80163e6:	bf00      	nop
 80163e8:	3708      	adds	r7, #8
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}

080163ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163ee:	b580      	push	{r7, lr}
 80163f0:	b082      	sub	sp, #8
 80163f2:	af00      	add	r7, sp, #0
 80163f4:	6078      	str	r0, [r7, #4]
 80163f6:	460b      	mov	r3, r1
 80163f8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8016400:	78fa      	ldrb	r2, [r7, #3]
 8016402:	6879      	ldr	r1, [r7, #4]
 8016404:	4613      	mov	r3, r2
 8016406:	009b      	lsls	r3, r3, #2
 8016408:	4413      	add	r3, r2
 801640a:	00db      	lsls	r3, r3, #3
 801640c:	440b      	add	r3, r1
 801640e:	333c      	adds	r3, #60	; 0x3c
 8016410:	681a      	ldr	r2, [r3, #0]
 8016412:	78fb      	ldrb	r3, [r7, #3]
 8016414:	4619      	mov	r1, r3
 8016416:	f7f8 fd4d 	bl	800eeb4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801641a:	bf00      	nop
 801641c:	3708      	adds	r7, #8
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}

08016422 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016422:	b580      	push	{r7, lr}
 8016424:	b082      	sub	sp, #8
 8016426:	af00      	add	r7, sp, #0
 8016428:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016430:	4618      	mov	r0, r3
 8016432:	f7f8 fe61 	bl	800f0f8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8016436:	bf00      	nop
 8016438:	3708      	adds	r7, #8
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}

0801643e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b084      	sub	sp, #16
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016446:	2301      	movs	r3, #1
 8016448:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	689b      	ldr	r3, [r3, #8]
 801644e:	2b02      	cmp	r3, #2
 8016450:	d001      	beq.n	8016456 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016452:	f7eb fcf3 	bl	8001e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801645c:	7bfa      	ldrb	r2, [r7, #15]
 801645e:	4611      	mov	r1, r2
 8016460:	4618      	mov	r0, r3
 8016462:	f7f8 fe0b 	bl	800f07c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801646c:	4618      	mov	r0, r3
 801646e:	f7f8 fdb7 	bl	800efe0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8016472:	bf00      	nop
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
	...

0801647c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801648a:	4618      	mov	r0, r3
 801648c:	f7f8 fe06 	bl	800f09c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	699b      	ldr	r3, [r3, #24]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d005      	beq.n	80164a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016498:	4b04      	ldr	r3, [pc, #16]	; (80164ac <HAL_PCD_SuspendCallback+0x30>)
 801649a:	691b      	ldr	r3, [r3, #16]
 801649c:	4a03      	ldr	r2, [pc, #12]	; (80164ac <HAL_PCD_SuspendCallback+0x30>)
 801649e:	f043 0306 	orr.w	r3, r3, #6
 80164a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80164a4:	bf00      	nop
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	e000ed00 	.word	0xe000ed00

080164b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	699b      	ldr	r3, [r3, #24]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d007      	beq.n	80164d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80164c0:	4b08      	ldr	r3, [pc, #32]	; (80164e4 <HAL_PCD_ResumeCallback+0x34>)
 80164c2:	691b      	ldr	r3, [r3, #16]
 80164c4:	4a07      	ldr	r2, [pc, #28]	; (80164e4 <HAL_PCD_ResumeCallback+0x34>)
 80164c6:	f023 0306 	bic.w	r3, r3, #6
 80164ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80164cc:	f000 f9fc 	bl	80168c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80164d6:	4618      	mov	r0, r3
 80164d8:	f7f8 fdf6 	bl	800f0c8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80164dc:	bf00      	nop
 80164de:	3708      	adds	r7, #8
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	e000ed00 	.word	0xe000ed00

080164e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b082      	sub	sp, #8
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80164f0:	4a2c      	ldr	r2, [pc, #176]	; (80165a4 <USBD_LL_Init+0xbc>)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	4a2a      	ldr	r2, [pc, #168]	; (80165a4 <USBD_LL_Init+0xbc>)
 80164fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8016500:	f7f0 fdd8 	bl	80070b4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8016504:	4b27      	ldr	r3, [pc, #156]	; (80165a4 <USBD_LL_Init+0xbc>)
 8016506:	4a28      	ldr	r2, [pc, #160]	; (80165a8 <USBD_LL_Init+0xc0>)
 8016508:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801650a:	4b26      	ldr	r3, [pc, #152]	; (80165a4 <USBD_LL_Init+0xbc>)
 801650c:	2208      	movs	r2, #8
 801650e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016510:	4b24      	ldr	r3, [pc, #144]	; (80165a4 <USBD_LL_Init+0xbc>)
 8016512:	2202      	movs	r2, #2
 8016514:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016516:	4b23      	ldr	r3, [pc, #140]	; (80165a4 <USBD_LL_Init+0xbc>)
 8016518:	2202      	movs	r2, #2
 801651a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801651c:	4b21      	ldr	r3, [pc, #132]	; (80165a4 <USBD_LL_Init+0xbc>)
 801651e:	2200      	movs	r2, #0
 8016520:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016522:	4b20      	ldr	r3, [pc, #128]	; (80165a4 <USBD_LL_Init+0xbc>)
 8016524:	2200      	movs	r2, #0
 8016526:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016528:	4b1e      	ldr	r3, [pc, #120]	; (80165a4 <USBD_LL_Init+0xbc>)
 801652a:	2200      	movs	r2, #0
 801652c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801652e:	4b1d      	ldr	r3, [pc, #116]	; (80165a4 <USBD_LL_Init+0xbc>)
 8016530:	2200      	movs	r2, #0
 8016532:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016534:	481b      	ldr	r0, [pc, #108]	; (80165a4 <USBD_LL_Init+0xbc>)
 8016536:	f7ef f86b 	bl	8005610 <HAL_PCD_Init>
 801653a:	4603      	mov	r3, r0
 801653c:	2b00      	cmp	r3, #0
 801653e:	d001      	beq.n	8016544 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8016540:	f7eb fc7c 	bl	8001e3c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801654a:	2318      	movs	r3, #24
 801654c:	2200      	movs	r2, #0
 801654e:	2100      	movs	r1, #0
 8016550:	f7f0 fd24 	bl	8006f9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801655a:	2358      	movs	r3, #88	; 0x58
 801655c:	2200      	movs	r2, #0
 801655e:	2180      	movs	r1, #128	; 0x80
 8016560:	f7f0 fd1c 	bl	8006f9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801656a:	23c0      	movs	r3, #192	; 0xc0
 801656c:	2200      	movs	r2, #0
 801656e:	2181      	movs	r1, #129	; 0x81
 8016570:	f7f0 fd14 	bl	8006f9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801657a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801657e:	2200      	movs	r2, #0
 8016580:	2101      	movs	r1, #1
 8016582:	f7f0 fd0b 	bl	8006f9c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801658c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016590:	2200      	movs	r2, #0
 8016592:	2182      	movs	r1, #130	; 0x82
 8016594:	f7f0 fd02 	bl	8006f9c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016598:	2300      	movs	r3, #0
}
 801659a:	4618      	mov	r0, r3
 801659c:	3708      	adds	r7, #8
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	20005ec0 	.word	0x20005ec0
 80165a8:	40006800 	.word	0x40006800

080165ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b084      	sub	sp, #16
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165b4:	2300      	movs	r3, #0
 80165b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165b8:	2300      	movs	r3, #0
 80165ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7ef f909 	bl	80057da <HAL_PCD_Start>
 80165c8:	4603      	mov	r3, r0
 80165ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165cc:	7bfb      	ldrb	r3, [r7, #15]
 80165ce:	4618      	mov	r0, r3
 80165d0:	f000 f980 	bl	80168d4 <USBD_Get_USB_Status>
 80165d4:	4603      	mov	r3, r0
 80165d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3710      	adds	r7, #16
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}

080165e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80165e2:	b580      	push	{r7, lr}
 80165e4:	b084      	sub	sp, #16
 80165e6:	af00      	add	r7, sp, #0
 80165e8:	6078      	str	r0, [r7, #4]
 80165ea:	4608      	mov	r0, r1
 80165ec:	4611      	mov	r1, r2
 80165ee:	461a      	mov	r2, r3
 80165f0:	4603      	mov	r3, r0
 80165f2:	70fb      	strb	r3, [r7, #3]
 80165f4:	460b      	mov	r3, r1
 80165f6:	70bb      	strb	r3, [r7, #2]
 80165f8:	4613      	mov	r3, r2
 80165fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165fc:	2300      	movs	r3, #0
 80165fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016600:	2300      	movs	r3, #0
 8016602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801660a:	78bb      	ldrb	r3, [r7, #2]
 801660c:	883a      	ldrh	r2, [r7, #0]
 801660e:	78f9      	ldrb	r1, [r7, #3]
 8016610:	f7ef fa51 	bl	8005ab6 <HAL_PCD_EP_Open>
 8016614:	4603      	mov	r3, r0
 8016616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016618:	7bfb      	ldrb	r3, [r7, #15]
 801661a:	4618      	mov	r0, r3
 801661c:	f000 f95a 	bl	80168d4 <USBD_Get_USB_Status>
 8016620:	4603      	mov	r3, r0
 8016622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016624:	7bbb      	ldrb	r3, [r7, #14]
}
 8016626:	4618      	mov	r0, r3
 8016628:	3710      	adds	r7, #16
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b084      	sub	sp, #16
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
 8016636:	460b      	mov	r3, r1
 8016638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801663a:	2300      	movs	r3, #0
 801663c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801663e:	2300      	movs	r3, #0
 8016640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016648:	78fa      	ldrb	r2, [r7, #3]
 801664a:	4611      	mov	r1, r2
 801664c:	4618      	mov	r0, r3
 801664e:	f7ef fa98 	bl	8005b82 <HAL_PCD_EP_Close>
 8016652:	4603      	mov	r3, r0
 8016654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016656:	7bfb      	ldrb	r3, [r7, #15]
 8016658:	4618      	mov	r0, r3
 801665a:	f000 f93b 	bl	80168d4 <USBD_Get_USB_Status>
 801665e:	4603      	mov	r3, r0
 8016660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016662:	7bbb      	ldrb	r3, [r7, #14]
}
 8016664:	4618      	mov	r0, r3
 8016666:	3710      	adds	r7, #16
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b084      	sub	sp, #16
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
 8016674:	460b      	mov	r3, r1
 8016676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016678:	2300      	movs	r3, #0
 801667a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801667c:	2300      	movs	r3, #0
 801667e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016686:	78fa      	ldrb	r2, [r7, #3]
 8016688:	4611      	mov	r1, r2
 801668a:	4618      	mov	r0, r3
 801668c:	f7ef fb59 	bl	8005d42 <HAL_PCD_EP_SetStall>
 8016690:	4603      	mov	r3, r0
 8016692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016694:	7bfb      	ldrb	r3, [r7, #15]
 8016696:	4618      	mov	r0, r3
 8016698:	f000 f91c 	bl	80168d4 <USBD_Get_USB_Status>
 801669c:	4603      	mov	r3, r0
 801669e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}

080166aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80166aa:	b580      	push	{r7, lr}
 80166ac:	b084      	sub	sp, #16
 80166ae:	af00      	add	r7, sp, #0
 80166b0:	6078      	str	r0, [r7, #4]
 80166b2:	460b      	mov	r3, r1
 80166b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166b6:	2300      	movs	r3, #0
 80166b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166ba:	2300      	movs	r3, #0
 80166bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80166c4:	78fa      	ldrb	r2, [r7, #3]
 80166c6:	4611      	mov	r1, r2
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ef fb8c 	bl	8005de6 <HAL_PCD_EP_ClrStall>
 80166ce:	4603      	mov	r3, r0
 80166d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166d2:	7bfb      	ldrb	r3, [r7, #15]
 80166d4:	4618      	mov	r0, r3
 80166d6:	f000 f8fd 	bl	80168d4 <USBD_Get_USB_Status>
 80166da:	4603      	mov	r3, r0
 80166dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166de:	7bbb      	ldrb	r3, [r7, #14]
}
 80166e0:	4618      	mov	r0, r3
 80166e2:	3710      	adds	r7, #16
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80166e8:	b480      	push	{r7}
 80166ea:	b085      	sub	sp, #20
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	460b      	mov	r3, r1
 80166f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80166fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80166fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016700:	2b00      	cmp	r3, #0
 8016702:	da0c      	bge.n	801671e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016704:	78fb      	ldrb	r3, [r7, #3]
 8016706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801670a:	68f9      	ldr	r1, [r7, #12]
 801670c:	1c5a      	adds	r2, r3, #1
 801670e:	4613      	mov	r3, r2
 8016710:	009b      	lsls	r3, r3, #2
 8016712:	4413      	add	r3, r2
 8016714:	00db      	lsls	r3, r3, #3
 8016716:	440b      	add	r3, r1
 8016718:	3302      	adds	r3, #2
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	e00b      	b.n	8016736 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801671e:	78fb      	ldrb	r3, [r7, #3]
 8016720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016724:	68f9      	ldr	r1, [r7, #12]
 8016726:	4613      	mov	r3, r2
 8016728:	009b      	lsls	r3, r3, #2
 801672a:	4413      	add	r3, r2
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	440b      	add	r3, r1
 8016730:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8016734:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016736:	4618      	mov	r0, r3
 8016738:	3714      	adds	r7, #20
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr

08016742 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016742:	b580      	push	{r7, lr}
 8016744:	b084      	sub	sp, #16
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]
 801674a:	460b      	mov	r3, r1
 801674c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801674e:	2300      	movs	r3, #0
 8016750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016752:	2300      	movs	r3, #0
 8016754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801675c:	78fa      	ldrb	r2, [r7, #3]
 801675e:	4611      	mov	r1, r2
 8016760:	4618      	mov	r0, r3
 8016762:	f7ef f983 	bl	8005a6c <HAL_PCD_SetAddress>
 8016766:	4603      	mov	r3, r0
 8016768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801676a:	7bfb      	ldrb	r3, [r7, #15]
 801676c:	4618      	mov	r0, r3
 801676e:	f000 f8b1 	bl	80168d4 <USBD_Get_USB_Status>
 8016772:	4603      	mov	r3, r0
 8016774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016776:	7bbb      	ldrb	r3, [r7, #14]
}
 8016778:	4618      	mov	r0, r3
 801677a:	3710      	adds	r7, #16
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b086      	sub	sp, #24
 8016784:	af00      	add	r7, sp, #0
 8016786:	60f8      	str	r0, [r7, #12]
 8016788:	607a      	str	r2, [r7, #4]
 801678a:	603b      	str	r3, [r7, #0]
 801678c:	460b      	mov	r3, r1
 801678e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016790:	2300      	movs	r3, #0
 8016792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016794:	2300      	movs	r3, #0
 8016796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801679e:	7af9      	ldrb	r1, [r7, #11]
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	f7ef fa8a 	bl	8005cbc <HAL_PCD_EP_Transmit>
 80167a8:	4603      	mov	r3, r0
 80167aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167ac:	7dfb      	ldrb	r3, [r7, #23]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 f890 	bl	80168d4 <USBD_Get_USB_Status>
 80167b4:	4603      	mov	r3, r0
 80167b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80167b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3718      	adds	r7, #24
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b086      	sub	sp, #24
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	60f8      	str	r0, [r7, #12]
 80167ca:	607a      	str	r2, [r7, #4]
 80167cc:	603b      	str	r3, [r7, #0]
 80167ce:	460b      	mov	r3, r1
 80167d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167d2:	2300      	movs	r3, #0
 80167d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167d6:	2300      	movs	r3, #0
 80167d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80167e0:	7af9      	ldrb	r1, [r7, #11]
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	f7ef fa14 	bl	8005c12 <HAL_PCD_EP_Receive>
 80167ea:	4603      	mov	r3, r0
 80167ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167ee:	7dfb      	ldrb	r3, [r7, #23]
 80167f0:	4618      	mov	r0, r3
 80167f2:	f000 f86f 	bl	80168d4 <USBD_Get_USB_Status>
 80167f6:	4603      	mov	r3, r0
 80167f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80167fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3718      	adds	r7, #24
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	460b      	mov	r3, r1
 801680e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016816:	78fa      	ldrb	r2, [r7, #3]
 8016818:	4611      	mov	r1, r2
 801681a:	4618      	mov	r0, r3
 801681c:	f7ef fa36 	bl	8005c8c <HAL_PCD_EP_GetRxCount>
 8016820:	4603      	mov	r3, r0
}
 8016822:	4618      	mov	r0, r3
 8016824:	3708      	adds	r7, #8
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
	...

0801682c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	460b      	mov	r3, r1
 8016836:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016838:	78fb      	ldrb	r3, [r7, #3]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d002      	beq.n	8016844 <HAL_PCDEx_LPM_Callback+0x18>
 801683e:	2b01      	cmp	r3, #1
 8016840:	d013      	beq.n	801686a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016842:	e023      	b.n	801688c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	699b      	ldr	r3, [r3, #24]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d007      	beq.n	801685c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801684c:	f000 f83c 	bl	80168c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016850:	4b10      	ldr	r3, [pc, #64]	; (8016894 <HAL_PCDEx_LPM_Callback+0x68>)
 8016852:	691b      	ldr	r3, [r3, #16]
 8016854:	4a0f      	ldr	r2, [pc, #60]	; (8016894 <HAL_PCDEx_LPM_Callback+0x68>)
 8016856:	f023 0306 	bic.w	r3, r3, #6
 801685a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016862:	4618      	mov	r0, r3
 8016864:	f7f8 fc30 	bl	800f0c8 <USBD_LL_Resume>
    break;
 8016868:	e010      	b.n	801688c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016870:	4618      	mov	r0, r3
 8016872:	f7f8 fc13 	bl	800f09c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	699b      	ldr	r3, [r3, #24]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d005      	beq.n	801688a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801687e:	4b05      	ldr	r3, [pc, #20]	; (8016894 <HAL_PCDEx_LPM_Callback+0x68>)
 8016880:	691b      	ldr	r3, [r3, #16]
 8016882:	4a04      	ldr	r2, [pc, #16]	; (8016894 <HAL_PCDEx_LPM_Callback+0x68>)
 8016884:	f043 0306 	orr.w	r3, r3, #6
 8016888:	6113      	str	r3, [r2, #16]
    break;
 801688a:	bf00      	nop
}
 801688c:	bf00      	nop
 801688e:	3708      	adds	r7, #8
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	e000ed00 	.word	0xe000ed00

08016898 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80168a0:	4b03      	ldr	r3, [pc, #12]	; (80168b0 <USBD_static_malloc+0x18>)
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop
 80168b0:	20004334 	.word	0x20004334

080168b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80168b4:	b480      	push	{r7}
 80168b6:	b083      	sub	sp, #12
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]

}
 80168bc:	bf00      	nop
 80168be:	370c      	adds	r7, #12
 80168c0:	46bd      	mov	sp, r7
 80168c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c6:	4770      	bx	lr

080168c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80168cc:	f7eb f9ea 	bl	8001ca4 <SystemClock_Config>
}
 80168d0:	bf00      	nop
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80168d4:	b480      	push	{r7}
 80168d6:	b085      	sub	sp, #20
 80168d8:	af00      	add	r7, sp, #0
 80168da:	4603      	mov	r3, r0
 80168dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168de:	2300      	movs	r3, #0
 80168e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80168e2:	79fb      	ldrb	r3, [r7, #7]
 80168e4:	2b03      	cmp	r3, #3
 80168e6:	d817      	bhi.n	8016918 <USBD_Get_USB_Status+0x44>
 80168e8:	a201      	add	r2, pc, #4	; (adr r2, 80168f0 <USBD_Get_USB_Status+0x1c>)
 80168ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ee:	bf00      	nop
 80168f0:	08016901 	.word	0x08016901
 80168f4:	08016907 	.word	0x08016907
 80168f8:	0801690d 	.word	0x0801690d
 80168fc:	08016913 	.word	0x08016913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016900:	2300      	movs	r3, #0
 8016902:	73fb      	strb	r3, [r7, #15]
    break;
 8016904:	e00b      	b.n	801691e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016906:	2303      	movs	r3, #3
 8016908:	73fb      	strb	r3, [r7, #15]
    break;
 801690a:	e008      	b.n	801691e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801690c:	2301      	movs	r3, #1
 801690e:	73fb      	strb	r3, [r7, #15]
    break;
 8016910:	e005      	b.n	801691e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016912:	2303      	movs	r3, #3
 8016914:	73fb      	strb	r3, [r7, #15]
    break;
 8016916:	e002      	b.n	801691e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016918:	2303      	movs	r3, #3
 801691a:	73fb      	strb	r3, [r7, #15]
    break;
 801691c:	bf00      	nop
  }
  return usb_status;
 801691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016920:	4618      	mov	r0, r3
 8016922:	3714      	adds	r7, #20
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr

0801692c <_ZdlPvj>:
 801692c:	f000 b814 	b.w	8016958 <_ZdlPv>

08016930 <_Znwj>:
 8016930:	2801      	cmp	r0, #1
 8016932:	bf38      	it	cc
 8016934:	2001      	movcc	r0, #1
 8016936:	b510      	push	{r4, lr}
 8016938:	4604      	mov	r4, r0
 801693a:	4620      	mov	r0, r4
 801693c:	f000 fca0 	bl	8017280 <malloc>
 8016940:	b930      	cbnz	r0, 8016950 <_Znwj+0x20>
 8016942:	f000 f81d 	bl	8016980 <_ZSt15get_new_handlerv>
 8016946:	b908      	cbnz	r0, 801694c <_Znwj+0x1c>
 8016948:	f000 fc66 	bl	8017218 <abort>
 801694c:	4780      	blx	r0
 801694e:	e7f4      	b.n	801693a <_Znwj+0xa>
 8016950:	bd10      	pop	{r4, pc}

08016952 <__cxa_pure_virtual>:
 8016952:	b508      	push	{r3, lr}
 8016954:	f000 f80e 	bl	8016974 <_ZSt9terminatev>

08016958 <_ZdlPv>:
 8016958:	f000 bc9a 	b.w	8017290 <free>

0801695c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801695c:	b508      	push	{r3, lr}
 801695e:	4780      	blx	r0
 8016960:	f000 fc5a 	bl	8017218 <abort>

08016964 <_ZSt13get_terminatev>:
 8016964:	4b02      	ldr	r3, [pc, #8]	; (8016970 <_ZSt13get_terminatev+0xc>)
 8016966:	6818      	ldr	r0, [r3, #0]
 8016968:	f3bf 8f5b 	dmb	ish
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop
 8016970:	20000198 	.word	0x20000198

08016974 <_ZSt9terminatev>:
 8016974:	b508      	push	{r3, lr}
 8016976:	f7ff fff5 	bl	8016964 <_ZSt13get_terminatev>
 801697a:	f7ff ffef 	bl	801695c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08016980 <_ZSt15get_new_handlerv>:
 8016980:	4b02      	ldr	r3, [pc, #8]	; (801698c <_ZSt15get_new_handlerv+0xc>)
 8016982:	6818      	ldr	r0, [r3, #0]
 8016984:	f3bf 8f5b 	dmb	ish
 8016988:	4770      	bx	lr
 801698a:	bf00      	nop
 801698c:	20004554 	.word	0x20004554

08016990 <powf>:
 8016990:	b508      	push	{r3, lr}
 8016992:	ed2d 8b04 	vpush	{d8-d9}
 8016996:	eeb0 9a40 	vmov.f32	s18, s0
 801699a:	eef0 8a60 	vmov.f32	s17, s1
 801699e:	f000 f88f 	bl	8016ac0 <__ieee754_powf>
 80169a2:	4b43      	ldr	r3, [pc, #268]	; (8016ab0 <powf+0x120>)
 80169a4:	f993 3000 	ldrsb.w	r3, [r3]
 80169a8:	3301      	adds	r3, #1
 80169aa:	eeb0 8a40 	vmov.f32	s16, s0
 80169ae:	d012      	beq.n	80169d6 <powf+0x46>
 80169b0:	eef4 8a68 	vcmp.f32	s17, s17
 80169b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b8:	d60d      	bvs.n	80169d6 <powf+0x46>
 80169ba:	eeb4 9a49 	vcmp.f32	s18, s18
 80169be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c2:	d70d      	bvc.n	80169e0 <powf+0x50>
 80169c4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80169c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80169d0:	bf08      	it	eq
 80169d2:	eeb0 8a67 	vmoveq.f32	s16, s15
 80169d6:	eeb0 0a48 	vmov.f32	s0, s16
 80169da:	ecbd 8b04 	vpop	{d8-d9}
 80169de:	bd08      	pop	{r3, pc}
 80169e0:	eddf 9a34 	vldr	s19, [pc, #208]	; 8016ab4 <powf+0x124>
 80169e4:	eeb4 9a69 	vcmp.f32	s18, s19
 80169e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ec:	d116      	bne.n	8016a1c <powf+0x8c>
 80169ee:	eef4 8a69 	vcmp.f32	s17, s19
 80169f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f6:	d057      	beq.n	8016aa8 <powf+0x118>
 80169f8:	eeb0 0a68 	vmov.f32	s0, s17
 80169fc:	f000 fb2a 	bl	8017054 <finitef>
 8016a00:	2800      	cmp	r0, #0
 8016a02:	d0e8      	beq.n	80169d6 <powf+0x46>
 8016a04:	eef4 8ae9 	vcmpe.f32	s17, s19
 8016a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0c:	d5e3      	bpl.n	80169d6 <powf+0x46>
 8016a0e:	f000 fc0b 	bl	8017228 <__errno>
 8016a12:	2321      	movs	r3, #33	; 0x21
 8016a14:	6003      	str	r3, [r0, #0]
 8016a16:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8016ab8 <powf+0x128>
 8016a1a:	e7dc      	b.n	80169d6 <powf+0x46>
 8016a1c:	f000 fb1a 	bl	8017054 <finitef>
 8016a20:	bb50      	cbnz	r0, 8016a78 <powf+0xe8>
 8016a22:	eeb0 0a49 	vmov.f32	s0, s18
 8016a26:	f000 fb15 	bl	8017054 <finitef>
 8016a2a:	b328      	cbz	r0, 8016a78 <powf+0xe8>
 8016a2c:	eeb0 0a68 	vmov.f32	s0, s17
 8016a30:	f000 fb10 	bl	8017054 <finitef>
 8016a34:	b300      	cbz	r0, 8016a78 <powf+0xe8>
 8016a36:	eeb4 8a48 	vcmp.f32	s16, s16
 8016a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a3e:	d706      	bvc.n	8016a4e <powf+0xbe>
 8016a40:	f000 fbf2 	bl	8017228 <__errno>
 8016a44:	2321      	movs	r3, #33	; 0x21
 8016a46:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8016a4a:	6003      	str	r3, [r0, #0]
 8016a4c:	e7c3      	b.n	80169d6 <powf+0x46>
 8016a4e:	f000 fbeb 	bl	8017228 <__errno>
 8016a52:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8016a56:	2322      	movs	r3, #34	; 0x22
 8016a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a5c:	6003      	str	r3, [r0, #0]
 8016a5e:	d508      	bpl.n	8016a72 <powf+0xe2>
 8016a60:	eeb0 0a68 	vmov.f32	s0, s17
 8016a64:	f000 fb0a 	bl	801707c <rintf>
 8016a68:	eeb4 0a68 	vcmp.f32	s0, s17
 8016a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a70:	d1d1      	bne.n	8016a16 <powf+0x86>
 8016a72:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8016abc <powf+0x12c>
 8016a76:	e7ae      	b.n	80169d6 <powf+0x46>
 8016a78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a80:	d1a9      	bne.n	80169d6 <powf+0x46>
 8016a82:	eeb0 0a49 	vmov.f32	s0, s18
 8016a86:	f000 fae5 	bl	8017054 <finitef>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	d0a3      	beq.n	80169d6 <powf+0x46>
 8016a8e:	eeb0 0a68 	vmov.f32	s0, s17
 8016a92:	f000 fadf 	bl	8017054 <finitef>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d09d      	beq.n	80169d6 <powf+0x46>
 8016a9a:	f000 fbc5 	bl	8017228 <__errno>
 8016a9e:	2322      	movs	r3, #34	; 0x22
 8016aa0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8016ab4 <powf+0x124>
 8016aa4:	6003      	str	r3, [r0, #0]
 8016aa6:	e796      	b.n	80169d6 <powf+0x46>
 8016aa8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016aac:	e793      	b.n	80169d6 <powf+0x46>
 8016aae:	bf00      	nop
 8016ab0:	2000019c 	.word	0x2000019c
 8016ab4:	00000000 	.word	0x00000000
 8016ab8:	ff800000 	.word	0xff800000
 8016abc:	7f800000 	.word	0x7f800000

08016ac0 <__ieee754_powf>:
 8016ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac4:	ee10 5a90 	vmov	r5, s1
 8016ac8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8016acc:	ed2d 8b02 	vpush	{d8}
 8016ad0:	eeb0 8a40 	vmov.f32	s16, s0
 8016ad4:	eef0 8a60 	vmov.f32	s17, s1
 8016ad8:	f000 8291 	beq.w	8016ffe <__ieee754_powf+0x53e>
 8016adc:	ee10 8a10 	vmov	r8, s0
 8016ae0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8016ae4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016ae8:	dc06      	bgt.n	8016af8 <__ieee754_powf+0x38>
 8016aea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016aee:	dd0a      	ble.n	8016b06 <__ieee754_powf+0x46>
 8016af0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016af4:	f000 8283 	beq.w	8016ffe <__ieee754_powf+0x53e>
 8016af8:	ecbd 8b02 	vpop	{d8}
 8016afc:	48d8      	ldr	r0, [pc, #864]	; (8016e60 <__ieee754_powf+0x3a0>)
 8016afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b02:	f000 bab5 	b.w	8017070 <nanf>
 8016b06:	f1b8 0f00 	cmp.w	r8, #0
 8016b0a:	da1f      	bge.n	8016b4c <__ieee754_powf+0x8c>
 8016b0c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8016b10:	da2e      	bge.n	8016b70 <__ieee754_powf+0xb0>
 8016b12:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016b16:	f2c0 827b 	blt.w	8017010 <__ieee754_powf+0x550>
 8016b1a:	15fb      	asrs	r3, r7, #23
 8016b1c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016b20:	fa47 f603 	asr.w	r6, r7, r3
 8016b24:	fa06 f303 	lsl.w	r3, r6, r3
 8016b28:	42bb      	cmp	r3, r7
 8016b2a:	f040 8271 	bne.w	8017010 <__ieee754_powf+0x550>
 8016b2e:	f006 0601 	and.w	r6, r6, #1
 8016b32:	f1c6 0602 	rsb	r6, r6, #2
 8016b36:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016b3a:	d120      	bne.n	8016b7e <__ieee754_powf+0xbe>
 8016b3c:	2d00      	cmp	r5, #0
 8016b3e:	f280 8264 	bge.w	801700a <__ieee754_powf+0x54a>
 8016b42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b46:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8016b4a:	e00d      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016b4c:	2600      	movs	r6, #0
 8016b4e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016b52:	d1f0      	bne.n	8016b36 <__ieee754_powf+0x76>
 8016b54:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016b58:	f000 8251 	beq.w	8016ffe <__ieee754_powf+0x53e>
 8016b5c:	dd0a      	ble.n	8016b74 <__ieee754_powf+0xb4>
 8016b5e:	2d00      	cmp	r5, #0
 8016b60:	f280 8250 	bge.w	8017004 <__ieee754_powf+0x544>
 8016b64:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8016e64 <__ieee754_powf+0x3a4>
 8016b68:	ecbd 8b02 	vpop	{d8}
 8016b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b70:	2602      	movs	r6, #2
 8016b72:	e7ec      	b.n	8016b4e <__ieee754_powf+0x8e>
 8016b74:	2d00      	cmp	r5, #0
 8016b76:	daf5      	bge.n	8016b64 <__ieee754_powf+0xa4>
 8016b78:	eeb1 0a68 	vneg.f32	s0, s17
 8016b7c:	e7f4      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016b7e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8016b82:	d102      	bne.n	8016b8a <__ieee754_powf+0xca>
 8016b84:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016b88:	e7ee      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016b8a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8016b8e:	eeb0 0a48 	vmov.f32	s0, s16
 8016b92:	d108      	bne.n	8016ba6 <__ieee754_powf+0xe6>
 8016b94:	f1b8 0f00 	cmp.w	r8, #0
 8016b98:	db05      	blt.n	8016ba6 <__ieee754_powf+0xe6>
 8016b9a:	ecbd 8b02 	vpop	{d8}
 8016b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba2:	f000 ba4d 	b.w	8017040 <__ieee754_sqrtf>
 8016ba6:	f000 fa4e 	bl	8017046 <fabsf>
 8016baa:	b124      	cbz	r4, 8016bb6 <__ieee754_powf+0xf6>
 8016bac:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8016bb0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016bb4:	d117      	bne.n	8016be6 <__ieee754_powf+0x126>
 8016bb6:	2d00      	cmp	r5, #0
 8016bb8:	bfbc      	itt	lt
 8016bba:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8016bbe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016bc2:	f1b8 0f00 	cmp.w	r8, #0
 8016bc6:	dacf      	bge.n	8016b68 <__ieee754_powf+0xa8>
 8016bc8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8016bcc:	ea54 0306 	orrs.w	r3, r4, r6
 8016bd0:	d104      	bne.n	8016bdc <__ieee754_powf+0x11c>
 8016bd2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016bd6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016bda:	e7c5      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016bdc:	2e01      	cmp	r6, #1
 8016bde:	d1c3      	bne.n	8016b68 <__ieee754_powf+0xa8>
 8016be0:	eeb1 0a40 	vneg.f32	s0, s0
 8016be4:	e7c0      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016be6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8016bea:	3801      	subs	r0, #1
 8016bec:	ea56 0300 	orrs.w	r3, r6, r0
 8016bf0:	d104      	bne.n	8016bfc <__ieee754_powf+0x13c>
 8016bf2:	ee38 8a48 	vsub.f32	s16, s16, s16
 8016bf6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016bfa:	e7b5      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016bfc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8016c00:	dd6b      	ble.n	8016cda <__ieee754_powf+0x21a>
 8016c02:	4b99      	ldr	r3, [pc, #612]	; (8016e68 <__ieee754_powf+0x3a8>)
 8016c04:	429c      	cmp	r4, r3
 8016c06:	dc06      	bgt.n	8016c16 <__ieee754_powf+0x156>
 8016c08:	2d00      	cmp	r5, #0
 8016c0a:	daab      	bge.n	8016b64 <__ieee754_powf+0xa4>
 8016c0c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8016e6c <__ieee754_powf+0x3ac>
 8016c10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016c14:	e7a8      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016c16:	4b96      	ldr	r3, [pc, #600]	; (8016e70 <__ieee754_powf+0x3b0>)
 8016c18:	429c      	cmp	r4, r3
 8016c1a:	dd02      	ble.n	8016c22 <__ieee754_powf+0x162>
 8016c1c:	2d00      	cmp	r5, #0
 8016c1e:	dcf5      	bgt.n	8016c0c <__ieee754_powf+0x14c>
 8016c20:	e7a0      	b.n	8016b64 <__ieee754_powf+0xa4>
 8016c22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016c26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016c2a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8016e74 <__ieee754_powf+0x3b4>
 8016c2e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016c32:	eee0 6a67 	vfms.f32	s13, s0, s15
 8016c36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c3a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8016c3e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c46:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8016e78 <__ieee754_powf+0x3b8>
 8016c4a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8016c4e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8016e7c <__ieee754_powf+0x3bc>
 8016c52:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016c56:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016e80 <__ieee754_powf+0x3c0>
 8016c5a:	eef0 6a67 	vmov.f32	s13, s15
 8016c5e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8016c62:	ee16 3a90 	vmov	r3, s13
 8016c66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016c6a:	f023 030f 	bic.w	r3, r3, #15
 8016c6e:	ee00 3a90 	vmov	s1, r3
 8016c72:	eee0 0a47 	vfms.f32	s1, s0, s14
 8016c76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016c7a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8016c7e:	f025 050f 	bic.w	r5, r5, #15
 8016c82:	ee07 5a10 	vmov	s14, r5
 8016c86:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8016c8a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016c8e:	ee07 3a90 	vmov	s15, r3
 8016c92:	eee7 0a27 	vfma.f32	s1, s14, s15
 8016c96:	3e01      	subs	r6, #1
 8016c98:	ea56 0200 	orrs.w	r2, r6, r0
 8016c9c:	ee07 5a10 	vmov	s14, r5
 8016ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ca4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016ca8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8016cac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016cb0:	ee17 4a10 	vmov	r4, s14
 8016cb4:	bf08      	it	eq
 8016cb6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8016cba:	2c00      	cmp	r4, #0
 8016cbc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016cc0:	f340 8184 	ble.w	8016fcc <__ieee754_powf+0x50c>
 8016cc4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016cc8:	f340 80fc 	ble.w	8016ec4 <__ieee754_powf+0x404>
 8016ccc:	eddf 7a67 	vldr	s15, [pc, #412]	; 8016e6c <__ieee754_powf+0x3ac>
 8016cd0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8016cd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016cd8:	e746      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016cda:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8016cde:	bf01      	itttt	eq
 8016ce0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8016e84 <__ieee754_powf+0x3c4>
 8016ce4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8016ce8:	f06f 0217 	mvneq.w	r2, #23
 8016cec:	ee17 4a90 	vmoveq	r4, s15
 8016cf0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8016cf4:	bf18      	it	ne
 8016cf6:	2200      	movne	r2, #0
 8016cf8:	3b7f      	subs	r3, #127	; 0x7f
 8016cfa:	4413      	add	r3, r2
 8016cfc:	4a62      	ldr	r2, [pc, #392]	; (8016e88 <__ieee754_powf+0x3c8>)
 8016cfe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8016d02:	4294      	cmp	r4, r2
 8016d04:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8016d08:	dd06      	ble.n	8016d18 <__ieee754_powf+0x258>
 8016d0a:	4a60      	ldr	r2, [pc, #384]	; (8016e8c <__ieee754_powf+0x3cc>)
 8016d0c:	4294      	cmp	r4, r2
 8016d0e:	f340 80a4 	ble.w	8016e5a <__ieee754_powf+0x39a>
 8016d12:	3301      	adds	r3, #1
 8016d14:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8016d18:	2400      	movs	r4, #0
 8016d1a:	4a5d      	ldr	r2, [pc, #372]	; (8016e90 <__ieee754_powf+0x3d0>)
 8016d1c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8016d20:	ee07 1a90 	vmov	s15, r1
 8016d24:	ed92 7a00 	vldr	s14, [r2]
 8016d28:	4a5a      	ldr	r2, [pc, #360]	; (8016e94 <__ieee754_powf+0x3d4>)
 8016d2a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016d2e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016d32:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8016d36:	1049      	asrs	r1, r1, #1
 8016d38:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016d3c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016d40:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8016d44:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8016d48:	ee06 1a10 	vmov	s12, r1
 8016d4c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8016d50:	ee36 7a47 	vsub.f32	s14, s12, s14
 8016d54:	ee14 7a90 	vmov	r7, s9
 8016d58:	4017      	ands	r7, r2
 8016d5a:	ee05 7a90 	vmov	s11, r7
 8016d5e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8016d62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d66:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8016e98 <__ieee754_powf+0x3d8>
 8016d6a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8016d6e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8016d72:	ee25 6a26 	vmul.f32	s12, s10, s13
 8016d76:	eddf 6a49 	vldr	s13, [pc, #292]	; 8016e9c <__ieee754_powf+0x3dc>
 8016d7a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016d7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8016ea0 <__ieee754_powf+0x3e0>
 8016d82:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016d86:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8016e74 <__ieee754_powf+0x3b4>
 8016d8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016d8e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8016ea4 <__ieee754_powf+0x3e4>
 8016d92:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016d96:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016ea8 <__ieee754_powf+0x3e8>
 8016d9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016d9e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8016da2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8016da6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016daa:	eee5 6a07 	vfma.f32	s13, s10, s14
 8016dae:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8016db2:	eef0 7a45 	vmov.f32	s15, s10
 8016db6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8016dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016dbe:	ee17 1a90 	vmov	r1, s15
 8016dc2:	4011      	ands	r1, r2
 8016dc4:	ee07 1a90 	vmov	s15, r1
 8016dc8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8016dcc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8016dd0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016dd4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016dd8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016ddc:	eeb0 6a47 	vmov.f32	s12, s14
 8016de0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016de4:	ee16 1a10 	vmov	r1, s12
 8016de8:	4011      	ands	r1, r2
 8016dea:	ee06 1a90 	vmov	s13, r1
 8016dee:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8016df2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8016eac <__ieee754_powf+0x3ec>
 8016df6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8016eb0 <__ieee754_powf+0x3f0>
 8016dfa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016dfe:	ee06 1a10 	vmov	s12, r1
 8016e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016e06:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016eb4 <__ieee754_powf+0x3f4>
 8016e0a:	492b      	ldr	r1, [pc, #172]	; (8016eb8 <__ieee754_powf+0x3f8>)
 8016e0c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016e10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016e14:	edd1 7a00 	vldr	s15, [r1]
 8016e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e1c:	ee07 3a90 	vmov	s15, r3
 8016e20:	4b26      	ldr	r3, [pc, #152]	; (8016ebc <__ieee754_powf+0x3fc>)
 8016e22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016e26:	eef0 7a47 	vmov.f32	s15, s14
 8016e2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016e2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016e32:	edd4 0a00 	vldr	s1, [r4]
 8016e36:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e3e:	ee17 3a90 	vmov	r3, s15
 8016e42:	4013      	ands	r3, r2
 8016e44:	ee07 3a90 	vmov	s15, r3
 8016e48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016e4c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8016e50:	eee6 6a65 	vfms.f32	s13, s12, s11
 8016e54:	ee77 7a66 	vsub.f32	s15, s14, s13
 8016e58:	e70f      	b.n	8016c7a <__ieee754_powf+0x1ba>
 8016e5a:	2401      	movs	r4, #1
 8016e5c:	e75d      	b.n	8016d1a <__ieee754_powf+0x25a>
 8016e5e:	bf00      	nop
 8016e60:	080179d0 	.word	0x080179d0
 8016e64:	00000000 	.word	0x00000000
 8016e68:	3f7ffff7 	.word	0x3f7ffff7
 8016e6c:	7149f2ca 	.word	0x7149f2ca
 8016e70:	3f800007 	.word	0x3f800007
 8016e74:	3eaaaaab 	.word	0x3eaaaaab
 8016e78:	3fb8aa3b 	.word	0x3fb8aa3b
 8016e7c:	36eca570 	.word	0x36eca570
 8016e80:	3fb8aa00 	.word	0x3fb8aa00
 8016e84:	4b800000 	.word	0x4b800000
 8016e88:	001cc471 	.word	0x001cc471
 8016e8c:	005db3d6 	.word	0x005db3d6
 8016e90:	080179d4 	.word	0x080179d4
 8016e94:	fffff000 	.word	0xfffff000
 8016e98:	3e6c3255 	.word	0x3e6c3255
 8016e9c:	3e53f142 	.word	0x3e53f142
 8016ea0:	3e8ba305 	.word	0x3e8ba305
 8016ea4:	3edb6db7 	.word	0x3edb6db7
 8016ea8:	3f19999a 	.word	0x3f19999a
 8016eac:	3f76384f 	.word	0x3f76384f
 8016eb0:	3f763800 	.word	0x3f763800
 8016eb4:	369dc3a0 	.word	0x369dc3a0
 8016eb8:	080179e4 	.word	0x080179e4
 8016ebc:	080179dc 	.word	0x080179dc
 8016ec0:	3338aa3c 	.word	0x3338aa3c
 8016ec4:	f040 8092 	bne.w	8016fec <__ieee754_powf+0x52c>
 8016ec8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016ec0 <__ieee754_powf+0x400>
 8016ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016ed0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8016ed4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016edc:	f73f aef6 	bgt.w	8016ccc <__ieee754_powf+0x20c>
 8016ee0:	15db      	asrs	r3, r3, #23
 8016ee2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8016ee6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016eea:	4103      	asrs	r3, r0
 8016eec:	4423      	add	r3, r4
 8016eee:	4949      	ldr	r1, [pc, #292]	; (8017014 <__ieee754_powf+0x554>)
 8016ef0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016ef4:	3a7f      	subs	r2, #127	; 0x7f
 8016ef6:	4111      	asrs	r1, r2
 8016ef8:	ea23 0101 	bic.w	r1, r3, r1
 8016efc:	ee07 1a10 	vmov	s14, r1
 8016f00:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8016f04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8016f08:	f1c2 0217 	rsb	r2, r2, #23
 8016f0c:	4110      	asrs	r0, r2
 8016f0e:	2c00      	cmp	r4, #0
 8016f10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f14:	bfb8      	it	lt
 8016f16:	4240      	neglt	r0, r0
 8016f18:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016f1c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8017018 <__ieee754_powf+0x558>
 8016f20:	ee17 3a10 	vmov	r3, s14
 8016f24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016f28:	f023 030f 	bic.w	r3, r3, #15
 8016f2c:	ee07 3a10 	vmov	s14, r3
 8016f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f34:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016f38:	eddf 7a38 	vldr	s15, [pc, #224]	; 801701c <__ieee754_powf+0x55c>
 8016f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f40:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8016f44:	eddf 6a36 	vldr	s13, [pc, #216]	; 8017020 <__ieee754_powf+0x560>
 8016f48:	eeb0 0a67 	vmov.f32	s0, s15
 8016f4c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016f50:	eeb0 6a40 	vmov.f32	s12, s0
 8016f54:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016f58:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016f5c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016f60:	eddf 6a30 	vldr	s13, [pc, #192]	; 8017024 <__ieee754_powf+0x564>
 8016f64:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8017028 <__ieee754_powf+0x568>
 8016f68:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016f6c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801702c <__ieee754_powf+0x56c>
 8016f70:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016f74:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8017030 <__ieee754_powf+0x570>
 8016f78:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016f7c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8017034 <__ieee754_powf+0x574>
 8016f80:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016f84:	eeb0 6a40 	vmov.f32	s12, s0
 8016f88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8016f8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016f90:	eeb0 7a46 	vmov.f32	s14, s12
 8016f94:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016f98:	ee20 6a06 	vmul.f32	s12, s0, s12
 8016f9c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8016fa0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016fa8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016fac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016fb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016fb4:	ee10 3a10 	vmov	r3, s0
 8016fb8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8016fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016fc0:	da1a      	bge.n	8016ff8 <__ieee754_powf+0x538>
 8016fc2:	f000 f8b7 	bl	8017134 <scalbnf>
 8016fc6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016fca:	e5cd      	b.n	8016b68 <__ieee754_powf+0xa8>
 8016fcc:	4a1a      	ldr	r2, [pc, #104]	; (8017038 <__ieee754_powf+0x578>)
 8016fce:	4293      	cmp	r3, r2
 8016fd0:	dd02      	ble.n	8016fd8 <__ieee754_powf+0x518>
 8016fd2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801703c <__ieee754_powf+0x57c>
 8016fd6:	e67b      	b.n	8016cd0 <__ieee754_powf+0x210>
 8016fd8:	d108      	bne.n	8016fec <__ieee754_powf+0x52c>
 8016fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016fde:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8016fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe6:	f6ff af7b 	blt.w	8016ee0 <__ieee754_powf+0x420>
 8016fea:	e7f2      	b.n	8016fd2 <__ieee754_powf+0x512>
 8016fec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8016ff0:	f73f af76 	bgt.w	8016ee0 <__ieee754_powf+0x420>
 8016ff4:	2000      	movs	r0, #0
 8016ff6:	e78f      	b.n	8016f18 <__ieee754_powf+0x458>
 8016ff8:	ee00 3a10 	vmov	s0, r3
 8016ffc:	e7e3      	b.n	8016fc6 <__ieee754_powf+0x506>
 8016ffe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017002:	e5b1      	b.n	8016b68 <__ieee754_powf+0xa8>
 8017004:	eeb0 0a68 	vmov.f32	s0, s17
 8017008:	e5ae      	b.n	8016b68 <__ieee754_powf+0xa8>
 801700a:	eeb0 0a48 	vmov.f32	s0, s16
 801700e:	e5ab      	b.n	8016b68 <__ieee754_powf+0xa8>
 8017010:	2600      	movs	r6, #0
 8017012:	e590      	b.n	8016b36 <__ieee754_powf+0x76>
 8017014:	007fffff 	.word	0x007fffff
 8017018:	3f317218 	.word	0x3f317218
 801701c:	35bfbe8c 	.word	0x35bfbe8c
 8017020:	3f317200 	.word	0x3f317200
 8017024:	3331bb4c 	.word	0x3331bb4c
 8017028:	b5ddea0e 	.word	0xb5ddea0e
 801702c:	388ab355 	.word	0x388ab355
 8017030:	bb360b61 	.word	0xbb360b61
 8017034:	3e2aaaab 	.word	0x3e2aaaab
 8017038:	43160000 	.word	0x43160000
 801703c:	0da24260 	.word	0x0da24260

08017040 <__ieee754_sqrtf>:
 8017040:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017044:	4770      	bx	lr

08017046 <fabsf>:
 8017046:	ee10 3a10 	vmov	r3, s0
 801704a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801704e:	ee00 3a10 	vmov	s0, r3
 8017052:	4770      	bx	lr

08017054 <finitef>:
 8017054:	b082      	sub	sp, #8
 8017056:	ed8d 0a01 	vstr	s0, [sp, #4]
 801705a:	9801      	ldr	r0, [sp, #4]
 801705c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017060:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017064:	bfac      	ite	ge
 8017066:	2000      	movge	r0, #0
 8017068:	2001      	movlt	r0, #1
 801706a:	b002      	add	sp, #8
 801706c:	4770      	bx	lr
	...

08017070 <nanf>:
 8017070:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017078 <nanf+0x8>
 8017074:	4770      	bx	lr
 8017076:	bf00      	nop
 8017078:	7fc00000 	.word	0x7fc00000

0801707c <rintf>:
 801707c:	ee10 2a10 	vmov	r2, s0
 8017080:	b513      	push	{r0, r1, r4, lr}
 8017082:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017086:	397f      	subs	r1, #127	; 0x7f
 8017088:	2916      	cmp	r1, #22
 801708a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801708e:	dc47      	bgt.n	8017120 <rintf+0xa4>
 8017090:	b32b      	cbz	r3, 80170de <rintf+0x62>
 8017092:	2900      	cmp	r1, #0
 8017094:	ee10 3a10 	vmov	r3, s0
 8017098:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801709c:	da21      	bge.n	80170e2 <rintf+0x66>
 801709e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80170a2:	425b      	negs	r3, r3
 80170a4:	4921      	ldr	r1, [pc, #132]	; (801712c <rintf+0xb0>)
 80170a6:	0a5b      	lsrs	r3, r3, #9
 80170a8:	0d12      	lsrs	r2, r2, #20
 80170aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80170ae:	0512      	lsls	r2, r2, #20
 80170b0:	4313      	orrs	r3, r2
 80170b2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80170b6:	ee07 3a90 	vmov	s15, r3
 80170ba:	edd1 6a00 	vldr	s13, [r1]
 80170be:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80170c2:	ed8d 7a01 	vstr	s14, [sp, #4]
 80170c6:	eddd 7a01 	vldr	s15, [sp, #4]
 80170ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80170ce:	ee17 3a90 	vmov	r3, s15
 80170d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80170d6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80170da:	ee00 3a10 	vmov	s0, r3
 80170de:	b002      	add	sp, #8
 80170e0:	bd10      	pop	{r4, pc}
 80170e2:	4a13      	ldr	r2, [pc, #76]	; (8017130 <rintf+0xb4>)
 80170e4:	410a      	asrs	r2, r1
 80170e6:	4213      	tst	r3, r2
 80170e8:	d0f9      	beq.n	80170de <rintf+0x62>
 80170ea:	0854      	lsrs	r4, r2, #1
 80170ec:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80170f0:	d006      	beq.n	8017100 <rintf+0x84>
 80170f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80170f6:	ea23 0304 	bic.w	r3, r3, r4
 80170fa:	fa42 f101 	asr.w	r1, r2, r1
 80170fe:	430b      	orrs	r3, r1
 8017100:	4a0a      	ldr	r2, [pc, #40]	; (801712c <rintf+0xb0>)
 8017102:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8017106:	ed90 7a00 	vldr	s14, [r0]
 801710a:	ee07 3a90 	vmov	s15, r3
 801710e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017112:	edcd 7a01 	vstr	s15, [sp, #4]
 8017116:	ed9d 0a01 	vldr	s0, [sp, #4]
 801711a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801711e:	e7de      	b.n	80170de <rintf+0x62>
 8017120:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017124:	d3db      	bcc.n	80170de <rintf+0x62>
 8017126:	ee30 0a00 	vadd.f32	s0, s0, s0
 801712a:	e7d8      	b.n	80170de <rintf+0x62>
 801712c:	080179ec 	.word	0x080179ec
 8017130:	007fffff 	.word	0x007fffff

08017134 <scalbnf>:
 8017134:	ee10 3a10 	vmov	r3, s0
 8017138:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801713c:	d025      	beq.n	801718a <scalbnf+0x56>
 801713e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017142:	d302      	bcc.n	801714a <scalbnf+0x16>
 8017144:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017148:	4770      	bx	lr
 801714a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801714e:	d122      	bne.n	8017196 <scalbnf+0x62>
 8017150:	4b2a      	ldr	r3, [pc, #168]	; (80171fc <scalbnf+0xc8>)
 8017152:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017200 <scalbnf+0xcc>
 8017156:	4298      	cmp	r0, r3
 8017158:	ee20 0a27 	vmul.f32	s0, s0, s15
 801715c:	db16      	blt.n	801718c <scalbnf+0x58>
 801715e:	ee10 3a10 	vmov	r3, s0
 8017162:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017166:	3a19      	subs	r2, #25
 8017168:	4402      	add	r2, r0
 801716a:	2afe      	cmp	r2, #254	; 0xfe
 801716c:	dd15      	ble.n	801719a <scalbnf+0x66>
 801716e:	ee10 3a10 	vmov	r3, s0
 8017172:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017204 <scalbnf+0xd0>
 8017176:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017208 <scalbnf+0xd4>
 801717a:	2b00      	cmp	r3, #0
 801717c:	eeb0 7a67 	vmov.f32	s14, s15
 8017180:	bfb8      	it	lt
 8017182:	eef0 7a66 	vmovlt.f32	s15, s13
 8017186:	ee27 0a27 	vmul.f32	s0, s14, s15
 801718a:	4770      	bx	lr
 801718c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801720c <scalbnf+0xd8>
 8017190:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017194:	4770      	bx	lr
 8017196:	0dd2      	lsrs	r2, r2, #23
 8017198:	e7e6      	b.n	8017168 <scalbnf+0x34>
 801719a:	2a00      	cmp	r2, #0
 801719c:	dd06      	ble.n	80171ac <scalbnf+0x78>
 801719e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80171a6:	ee00 3a10 	vmov	s0, r3
 80171aa:	4770      	bx	lr
 80171ac:	f112 0f16 	cmn.w	r2, #22
 80171b0:	da1a      	bge.n	80171e8 <scalbnf+0xb4>
 80171b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80171b6:	4298      	cmp	r0, r3
 80171b8:	ee10 3a10 	vmov	r3, s0
 80171bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80171c0:	dd0a      	ble.n	80171d8 <scalbnf+0xa4>
 80171c2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017204 <scalbnf+0xd0>
 80171c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017208 <scalbnf+0xd4>
 80171ca:	eef0 7a40 	vmov.f32	s15, s0
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	bf18      	it	ne
 80171d2:	eeb0 0a47 	vmovne.f32	s0, s14
 80171d6:	e7db      	b.n	8017190 <scalbnf+0x5c>
 80171d8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801720c <scalbnf+0xd8>
 80171dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017210 <scalbnf+0xdc>
 80171e0:	eef0 7a40 	vmov.f32	s15, s0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	e7f3      	b.n	80171d0 <scalbnf+0x9c>
 80171e8:	3219      	adds	r2, #25
 80171ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171ee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80171f2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017214 <scalbnf+0xe0>
 80171f6:	ee07 3a10 	vmov	s14, r3
 80171fa:	e7c4      	b.n	8017186 <scalbnf+0x52>
 80171fc:	ffff3cb0 	.word	0xffff3cb0
 8017200:	4c000000 	.word	0x4c000000
 8017204:	7149f2ca 	.word	0x7149f2ca
 8017208:	f149f2ca 	.word	0xf149f2ca
 801720c:	0da24260 	.word	0x0da24260
 8017210:	8da24260 	.word	0x8da24260
 8017214:	33000000 	.word	0x33000000

08017218 <abort>:
 8017218:	b508      	push	{r3, lr}
 801721a:	2006      	movs	r0, #6
 801721c:	f000 f9a2 	bl	8017564 <raise>
 8017220:	2001      	movs	r0, #1
 8017222:	f7eb f9bf 	bl	80025a4 <_exit>
	...

08017228 <__errno>:
 8017228:	4b01      	ldr	r3, [pc, #4]	; (8017230 <__errno+0x8>)
 801722a:	6818      	ldr	r0, [r3, #0]
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop
 8017230:	200001a0 	.word	0x200001a0

08017234 <__libc_init_array>:
 8017234:	b570      	push	{r4, r5, r6, lr}
 8017236:	4d0d      	ldr	r5, [pc, #52]	; (801726c <__libc_init_array+0x38>)
 8017238:	4c0d      	ldr	r4, [pc, #52]	; (8017270 <__libc_init_array+0x3c>)
 801723a:	1b64      	subs	r4, r4, r5
 801723c:	10a4      	asrs	r4, r4, #2
 801723e:	2600      	movs	r6, #0
 8017240:	42a6      	cmp	r6, r4
 8017242:	d109      	bne.n	8017258 <__libc_init_array+0x24>
 8017244:	4d0b      	ldr	r5, [pc, #44]	; (8017274 <__libc_init_array+0x40>)
 8017246:	4c0c      	ldr	r4, [pc, #48]	; (8017278 <__libc_init_array+0x44>)
 8017248:	f000 f9c8 	bl	80175dc <_init>
 801724c:	1b64      	subs	r4, r4, r5
 801724e:	10a4      	asrs	r4, r4, #2
 8017250:	2600      	movs	r6, #0
 8017252:	42a6      	cmp	r6, r4
 8017254:	d105      	bne.n	8017262 <__libc_init_array+0x2e>
 8017256:	bd70      	pop	{r4, r5, r6, pc}
 8017258:	f855 3b04 	ldr.w	r3, [r5], #4
 801725c:	4798      	blx	r3
 801725e:	3601      	adds	r6, #1
 8017260:	e7ee      	b.n	8017240 <__libc_init_array+0xc>
 8017262:	f855 3b04 	ldr.w	r3, [r5], #4
 8017266:	4798      	blx	r3
 8017268:	3601      	adds	r6, #1
 801726a:	e7f2      	b.n	8017252 <__libc_init_array+0x1e>
 801726c:	08017a54 	.word	0x08017a54
 8017270:	08017a54 	.word	0x08017a54
 8017274:	08017a54 	.word	0x08017a54
 8017278:	08017a6c 	.word	0x08017a6c

0801727c <__retarget_lock_acquire_recursive>:
 801727c:	4770      	bx	lr

0801727e <__retarget_lock_release_recursive>:
 801727e:	4770      	bx	lr

08017280 <malloc>:
 8017280:	4b02      	ldr	r3, [pc, #8]	; (801728c <malloc+0xc>)
 8017282:	4601      	mov	r1, r0
 8017284:	6818      	ldr	r0, [r3, #0]
 8017286:	f000 b871 	b.w	801736c <_malloc_r>
 801728a:	bf00      	nop
 801728c:	200001a0 	.word	0x200001a0

08017290 <free>:
 8017290:	4b02      	ldr	r3, [pc, #8]	; (801729c <free+0xc>)
 8017292:	4601      	mov	r1, r0
 8017294:	6818      	ldr	r0, [r3, #0]
 8017296:	f000 b819 	b.w	80172cc <_free_r>
 801729a:	bf00      	nop
 801729c:	200001a0 	.word	0x200001a0

080172a0 <memcpy>:
 80172a0:	440a      	add	r2, r1
 80172a2:	4291      	cmp	r1, r2
 80172a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80172a8:	d100      	bne.n	80172ac <memcpy+0xc>
 80172aa:	4770      	bx	lr
 80172ac:	b510      	push	{r4, lr}
 80172ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172b6:	4291      	cmp	r1, r2
 80172b8:	d1f9      	bne.n	80172ae <memcpy+0xe>
 80172ba:	bd10      	pop	{r4, pc}

080172bc <memset>:
 80172bc:	4402      	add	r2, r0
 80172be:	4603      	mov	r3, r0
 80172c0:	4293      	cmp	r3, r2
 80172c2:	d100      	bne.n	80172c6 <memset+0xa>
 80172c4:	4770      	bx	lr
 80172c6:	f803 1b01 	strb.w	r1, [r3], #1
 80172ca:	e7f9      	b.n	80172c0 <memset+0x4>

080172cc <_free_r>:
 80172cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172ce:	2900      	cmp	r1, #0
 80172d0:	d048      	beq.n	8017364 <_free_r+0x98>
 80172d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172d6:	9001      	str	r0, [sp, #4]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	f1a1 0404 	sub.w	r4, r1, #4
 80172de:	bfb8      	it	lt
 80172e0:	18e4      	addlt	r4, r4, r3
 80172e2:	f000 f96f 	bl	80175c4 <__malloc_lock>
 80172e6:	4a20      	ldr	r2, [pc, #128]	; (8017368 <_free_r+0x9c>)
 80172e8:	9801      	ldr	r0, [sp, #4]
 80172ea:	6813      	ldr	r3, [r2, #0]
 80172ec:	4615      	mov	r5, r2
 80172ee:	b933      	cbnz	r3, 80172fe <_free_r+0x32>
 80172f0:	6063      	str	r3, [r4, #4]
 80172f2:	6014      	str	r4, [r2, #0]
 80172f4:	b003      	add	sp, #12
 80172f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80172fa:	f000 b969 	b.w	80175d0 <__malloc_unlock>
 80172fe:	42a3      	cmp	r3, r4
 8017300:	d90b      	bls.n	801731a <_free_r+0x4e>
 8017302:	6821      	ldr	r1, [r4, #0]
 8017304:	1862      	adds	r2, r4, r1
 8017306:	4293      	cmp	r3, r2
 8017308:	bf04      	itt	eq
 801730a:	681a      	ldreq	r2, [r3, #0]
 801730c:	685b      	ldreq	r3, [r3, #4]
 801730e:	6063      	str	r3, [r4, #4]
 8017310:	bf04      	itt	eq
 8017312:	1852      	addeq	r2, r2, r1
 8017314:	6022      	streq	r2, [r4, #0]
 8017316:	602c      	str	r4, [r5, #0]
 8017318:	e7ec      	b.n	80172f4 <_free_r+0x28>
 801731a:	461a      	mov	r2, r3
 801731c:	685b      	ldr	r3, [r3, #4]
 801731e:	b10b      	cbz	r3, 8017324 <_free_r+0x58>
 8017320:	42a3      	cmp	r3, r4
 8017322:	d9fa      	bls.n	801731a <_free_r+0x4e>
 8017324:	6811      	ldr	r1, [r2, #0]
 8017326:	1855      	adds	r5, r2, r1
 8017328:	42a5      	cmp	r5, r4
 801732a:	d10b      	bne.n	8017344 <_free_r+0x78>
 801732c:	6824      	ldr	r4, [r4, #0]
 801732e:	4421      	add	r1, r4
 8017330:	1854      	adds	r4, r2, r1
 8017332:	42a3      	cmp	r3, r4
 8017334:	6011      	str	r1, [r2, #0]
 8017336:	d1dd      	bne.n	80172f4 <_free_r+0x28>
 8017338:	681c      	ldr	r4, [r3, #0]
 801733a:	685b      	ldr	r3, [r3, #4]
 801733c:	6053      	str	r3, [r2, #4]
 801733e:	4421      	add	r1, r4
 8017340:	6011      	str	r1, [r2, #0]
 8017342:	e7d7      	b.n	80172f4 <_free_r+0x28>
 8017344:	d902      	bls.n	801734c <_free_r+0x80>
 8017346:	230c      	movs	r3, #12
 8017348:	6003      	str	r3, [r0, #0]
 801734a:	e7d3      	b.n	80172f4 <_free_r+0x28>
 801734c:	6825      	ldr	r5, [r4, #0]
 801734e:	1961      	adds	r1, r4, r5
 8017350:	428b      	cmp	r3, r1
 8017352:	bf04      	itt	eq
 8017354:	6819      	ldreq	r1, [r3, #0]
 8017356:	685b      	ldreq	r3, [r3, #4]
 8017358:	6063      	str	r3, [r4, #4]
 801735a:	bf04      	itt	eq
 801735c:	1949      	addeq	r1, r1, r5
 801735e:	6021      	streq	r1, [r4, #0]
 8017360:	6054      	str	r4, [r2, #4]
 8017362:	e7c7      	b.n	80172f4 <_free_r+0x28>
 8017364:	b003      	add	sp, #12
 8017366:	bd30      	pop	{r4, r5, pc}
 8017368:	20004558 	.word	0x20004558

0801736c <_malloc_r>:
 801736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801736e:	1ccd      	adds	r5, r1, #3
 8017370:	f025 0503 	bic.w	r5, r5, #3
 8017374:	3508      	adds	r5, #8
 8017376:	2d0c      	cmp	r5, #12
 8017378:	bf38      	it	cc
 801737a:	250c      	movcc	r5, #12
 801737c:	2d00      	cmp	r5, #0
 801737e:	4606      	mov	r6, r0
 8017380:	db01      	blt.n	8017386 <_malloc_r+0x1a>
 8017382:	42a9      	cmp	r1, r5
 8017384:	d903      	bls.n	801738e <_malloc_r+0x22>
 8017386:	230c      	movs	r3, #12
 8017388:	6033      	str	r3, [r6, #0]
 801738a:	2000      	movs	r0, #0
 801738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801738e:	f000 f919 	bl	80175c4 <__malloc_lock>
 8017392:	4921      	ldr	r1, [pc, #132]	; (8017418 <_malloc_r+0xac>)
 8017394:	680a      	ldr	r2, [r1, #0]
 8017396:	4614      	mov	r4, r2
 8017398:	b99c      	cbnz	r4, 80173c2 <_malloc_r+0x56>
 801739a:	4f20      	ldr	r7, [pc, #128]	; (801741c <_malloc_r+0xb0>)
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	b923      	cbnz	r3, 80173aa <_malloc_r+0x3e>
 80173a0:	4621      	mov	r1, r4
 80173a2:	4630      	mov	r0, r6
 80173a4:	f000 f8a6 	bl	80174f4 <_sbrk_r>
 80173a8:	6038      	str	r0, [r7, #0]
 80173aa:	4629      	mov	r1, r5
 80173ac:	4630      	mov	r0, r6
 80173ae:	f000 f8a1 	bl	80174f4 <_sbrk_r>
 80173b2:	1c43      	adds	r3, r0, #1
 80173b4:	d123      	bne.n	80173fe <_malloc_r+0x92>
 80173b6:	230c      	movs	r3, #12
 80173b8:	6033      	str	r3, [r6, #0]
 80173ba:	4630      	mov	r0, r6
 80173bc:	f000 f908 	bl	80175d0 <__malloc_unlock>
 80173c0:	e7e3      	b.n	801738a <_malloc_r+0x1e>
 80173c2:	6823      	ldr	r3, [r4, #0]
 80173c4:	1b5b      	subs	r3, r3, r5
 80173c6:	d417      	bmi.n	80173f8 <_malloc_r+0x8c>
 80173c8:	2b0b      	cmp	r3, #11
 80173ca:	d903      	bls.n	80173d4 <_malloc_r+0x68>
 80173cc:	6023      	str	r3, [r4, #0]
 80173ce:	441c      	add	r4, r3
 80173d0:	6025      	str	r5, [r4, #0]
 80173d2:	e004      	b.n	80173de <_malloc_r+0x72>
 80173d4:	6863      	ldr	r3, [r4, #4]
 80173d6:	42a2      	cmp	r2, r4
 80173d8:	bf0c      	ite	eq
 80173da:	600b      	streq	r3, [r1, #0]
 80173dc:	6053      	strne	r3, [r2, #4]
 80173de:	4630      	mov	r0, r6
 80173e0:	f000 f8f6 	bl	80175d0 <__malloc_unlock>
 80173e4:	f104 000b 	add.w	r0, r4, #11
 80173e8:	1d23      	adds	r3, r4, #4
 80173ea:	f020 0007 	bic.w	r0, r0, #7
 80173ee:	1ac2      	subs	r2, r0, r3
 80173f0:	d0cc      	beq.n	801738c <_malloc_r+0x20>
 80173f2:	1a1b      	subs	r3, r3, r0
 80173f4:	50a3      	str	r3, [r4, r2]
 80173f6:	e7c9      	b.n	801738c <_malloc_r+0x20>
 80173f8:	4622      	mov	r2, r4
 80173fa:	6864      	ldr	r4, [r4, #4]
 80173fc:	e7cc      	b.n	8017398 <_malloc_r+0x2c>
 80173fe:	1cc4      	adds	r4, r0, #3
 8017400:	f024 0403 	bic.w	r4, r4, #3
 8017404:	42a0      	cmp	r0, r4
 8017406:	d0e3      	beq.n	80173d0 <_malloc_r+0x64>
 8017408:	1a21      	subs	r1, r4, r0
 801740a:	4630      	mov	r0, r6
 801740c:	f000 f872 	bl	80174f4 <_sbrk_r>
 8017410:	3001      	adds	r0, #1
 8017412:	d1dd      	bne.n	80173d0 <_malloc_r+0x64>
 8017414:	e7cf      	b.n	80173b6 <_malloc_r+0x4a>
 8017416:	bf00      	nop
 8017418:	20004558 	.word	0x20004558
 801741c:	2000455c 	.word	0x2000455c

08017420 <cleanup_glue>:
 8017420:	b538      	push	{r3, r4, r5, lr}
 8017422:	460c      	mov	r4, r1
 8017424:	6809      	ldr	r1, [r1, #0]
 8017426:	4605      	mov	r5, r0
 8017428:	b109      	cbz	r1, 801742e <cleanup_glue+0xe>
 801742a:	f7ff fff9 	bl	8017420 <cleanup_glue>
 801742e:	4621      	mov	r1, r4
 8017430:	4628      	mov	r0, r5
 8017432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017436:	f7ff bf49 	b.w	80172cc <_free_r>
	...

0801743c <_reclaim_reent>:
 801743c:	4b2c      	ldr	r3, [pc, #176]	; (80174f0 <_reclaim_reent+0xb4>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	4283      	cmp	r3, r0
 8017442:	b570      	push	{r4, r5, r6, lr}
 8017444:	4604      	mov	r4, r0
 8017446:	d051      	beq.n	80174ec <_reclaim_reent+0xb0>
 8017448:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801744a:	b143      	cbz	r3, 801745e <_reclaim_reent+0x22>
 801744c:	68db      	ldr	r3, [r3, #12]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d14a      	bne.n	80174e8 <_reclaim_reent+0xac>
 8017452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017454:	6819      	ldr	r1, [r3, #0]
 8017456:	b111      	cbz	r1, 801745e <_reclaim_reent+0x22>
 8017458:	4620      	mov	r0, r4
 801745a:	f7ff ff37 	bl	80172cc <_free_r>
 801745e:	6961      	ldr	r1, [r4, #20]
 8017460:	b111      	cbz	r1, 8017468 <_reclaim_reent+0x2c>
 8017462:	4620      	mov	r0, r4
 8017464:	f7ff ff32 	bl	80172cc <_free_r>
 8017468:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801746a:	b111      	cbz	r1, 8017472 <_reclaim_reent+0x36>
 801746c:	4620      	mov	r0, r4
 801746e:	f7ff ff2d 	bl	80172cc <_free_r>
 8017472:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017474:	b111      	cbz	r1, 801747c <_reclaim_reent+0x40>
 8017476:	4620      	mov	r0, r4
 8017478:	f7ff ff28 	bl	80172cc <_free_r>
 801747c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801747e:	b111      	cbz	r1, 8017486 <_reclaim_reent+0x4a>
 8017480:	4620      	mov	r0, r4
 8017482:	f7ff ff23 	bl	80172cc <_free_r>
 8017486:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017488:	b111      	cbz	r1, 8017490 <_reclaim_reent+0x54>
 801748a:	4620      	mov	r0, r4
 801748c:	f7ff ff1e 	bl	80172cc <_free_r>
 8017490:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017492:	b111      	cbz	r1, 801749a <_reclaim_reent+0x5e>
 8017494:	4620      	mov	r0, r4
 8017496:	f7ff ff19 	bl	80172cc <_free_r>
 801749a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801749c:	b111      	cbz	r1, 80174a4 <_reclaim_reent+0x68>
 801749e:	4620      	mov	r0, r4
 80174a0:	f7ff ff14 	bl	80172cc <_free_r>
 80174a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80174a6:	b111      	cbz	r1, 80174ae <_reclaim_reent+0x72>
 80174a8:	4620      	mov	r0, r4
 80174aa:	f7ff ff0f 	bl	80172cc <_free_r>
 80174ae:	69a3      	ldr	r3, [r4, #24]
 80174b0:	b1e3      	cbz	r3, 80174ec <_reclaim_reent+0xb0>
 80174b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80174b4:	4620      	mov	r0, r4
 80174b6:	4798      	blx	r3
 80174b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80174ba:	b1b9      	cbz	r1, 80174ec <_reclaim_reent+0xb0>
 80174bc:	4620      	mov	r0, r4
 80174be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174c2:	f7ff bfad 	b.w	8017420 <cleanup_glue>
 80174c6:	5949      	ldr	r1, [r1, r5]
 80174c8:	b941      	cbnz	r1, 80174dc <_reclaim_reent+0xa0>
 80174ca:	3504      	adds	r5, #4
 80174cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174ce:	2d80      	cmp	r5, #128	; 0x80
 80174d0:	68d9      	ldr	r1, [r3, #12]
 80174d2:	d1f8      	bne.n	80174c6 <_reclaim_reent+0x8a>
 80174d4:	4620      	mov	r0, r4
 80174d6:	f7ff fef9 	bl	80172cc <_free_r>
 80174da:	e7ba      	b.n	8017452 <_reclaim_reent+0x16>
 80174dc:	680e      	ldr	r6, [r1, #0]
 80174de:	4620      	mov	r0, r4
 80174e0:	f7ff fef4 	bl	80172cc <_free_r>
 80174e4:	4631      	mov	r1, r6
 80174e6:	e7ef      	b.n	80174c8 <_reclaim_reent+0x8c>
 80174e8:	2500      	movs	r5, #0
 80174ea:	e7ef      	b.n	80174cc <_reclaim_reent+0x90>
 80174ec:	bd70      	pop	{r4, r5, r6, pc}
 80174ee:	bf00      	nop
 80174f0:	200001a0 	.word	0x200001a0

080174f4 <_sbrk_r>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	4d06      	ldr	r5, [pc, #24]	; (8017510 <_sbrk_r+0x1c>)
 80174f8:	2300      	movs	r3, #0
 80174fa:	4604      	mov	r4, r0
 80174fc:	4608      	mov	r0, r1
 80174fe:	602b      	str	r3, [r5, #0]
 8017500:	f7eb f85a 	bl	80025b8 <_sbrk>
 8017504:	1c43      	adds	r3, r0, #1
 8017506:	d102      	bne.n	801750e <_sbrk_r+0x1a>
 8017508:	682b      	ldr	r3, [r5, #0]
 801750a:	b103      	cbz	r3, 801750e <_sbrk_r+0x1a>
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	bd38      	pop	{r3, r4, r5, pc}
 8017510:	200061c0 	.word	0x200061c0

08017514 <_raise_r>:
 8017514:	291f      	cmp	r1, #31
 8017516:	b538      	push	{r3, r4, r5, lr}
 8017518:	4604      	mov	r4, r0
 801751a:	460d      	mov	r5, r1
 801751c:	d904      	bls.n	8017528 <_raise_r+0x14>
 801751e:	2316      	movs	r3, #22
 8017520:	6003      	str	r3, [r0, #0]
 8017522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017526:	bd38      	pop	{r3, r4, r5, pc}
 8017528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801752a:	b112      	cbz	r2, 8017532 <_raise_r+0x1e>
 801752c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017530:	b94b      	cbnz	r3, 8017546 <_raise_r+0x32>
 8017532:	4620      	mov	r0, r4
 8017534:	f000 f830 	bl	8017598 <_getpid_r>
 8017538:	462a      	mov	r2, r5
 801753a:	4601      	mov	r1, r0
 801753c:	4620      	mov	r0, r4
 801753e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017542:	f000 b817 	b.w	8017574 <_kill_r>
 8017546:	2b01      	cmp	r3, #1
 8017548:	d00a      	beq.n	8017560 <_raise_r+0x4c>
 801754a:	1c59      	adds	r1, r3, #1
 801754c:	d103      	bne.n	8017556 <_raise_r+0x42>
 801754e:	2316      	movs	r3, #22
 8017550:	6003      	str	r3, [r0, #0]
 8017552:	2001      	movs	r0, #1
 8017554:	e7e7      	b.n	8017526 <_raise_r+0x12>
 8017556:	2400      	movs	r4, #0
 8017558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801755c:	4628      	mov	r0, r5
 801755e:	4798      	blx	r3
 8017560:	2000      	movs	r0, #0
 8017562:	e7e0      	b.n	8017526 <_raise_r+0x12>

08017564 <raise>:
 8017564:	4b02      	ldr	r3, [pc, #8]	; (8017570 <raise+0xc>)
 8017566:	4601      	mov	r1, r0
 8017568:	6818      	ldr	r0, [r3, #0]
 801756a:	f7ff bfd3 	b.w	8017514 <_raise_r>
 801756e:	bf00      	nop
 8017570:	200001a0 	.word	0x200001a0

08017574 <_kill_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d07      	ldr	r5, [pc, #28]	; (8017594 <_kill_r+0x20>)
 8017578:	2300      	movs	r3, #0
 801757a:	4604      	mov	r4, r0
 801757c:	4608      	mov	r0, r1
 801757e:	4611      	mov	r1, r2
 8017580:	602b      	str	r3, [r5, #0]
 8017582:	f7ea ffff 	bl	8002584 <_kill>
 8017586:	1c43      	adds	r3, r0, #1
 8017588:	d102      	bne.n	8017590 <_kill_r+0x1c>
 801758a:	682b      	ldr	r3, [r5, #0]
 801758c:	b103      	cbz	r3, 8017590 <_kill_r+0x1c>
 801758e:	6023      	str	r3, [r4, #0]
 8017590:	bd38      	pop	{r3, r4, r5, pc}
 8017592:	bf00      	nop
 8017594:	200061c0 	.word	0x200061c0

08017598 <_getpid_r>:
 8017598:	f7ea bfec 	b.w	8002574 <_getpid>

0801759c <strncpy>:
 801759c:	b510      	push	{r4, lr}
 801759e:	3901      	subs	r1, #1
 80175a0:	4603      	mov	r3, r0
 80175a2:	b132      	cbz	r2, 80175b2 <strncpy+0x16>
 80175a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80175a8:	f803 4b01 	strb.w	r4, [r3], #1
 80175ac:	3a01      	subs	r2, #1
 80175ae:	2c00      	cmp	r4, #0
 80175b0:	d1f7      	bne.n	80175a2 <strncpy+0x6>
 80175b2:	441a      	add	r2, r3
 80175b4:	2100      	movs	r1, #0
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d100      	bne.n	80175bc <strncpy+0x20>
 80175ba:	bd10      	pop	{r4, pc}
 80175bc:	f803 1b01 	strb.w	r1, [r3], #1
 80175c0:	e7f9      	b.n	80175b6 <strncpy+0x1a>
	...

080175c4 <__malloc_lock>:
 80175c4:	4801      	ldr	r0, [pc, #4]	; (80175cc <__malloc_lock+0x8>)
 80175c6:	f7ff be59 	b.w	801727c <__retarget_lock_acquire_recursive>
 80175ca:	bf00      	nop
 80175cc:	200061b8 	.word	0x200061b8

080175d0 <__malloc_unlock>:
 80175d0:	4801      	ldr	r0, [pc, #4]	; (80175d8 <__malloc_unlock+0x8>)
 80175d2:	f7ff be54 	b.w	801727e <__retarget_lock_release_recursive>
 80175d6:	bf00      	nop
 80175d8:	200061b8 	.word	0x200061b8

080175dc <_init>:
 80175dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175de:	bf00      	nop
 80175e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175e2:	bc08      	pop	{r3}
 80175e4:	469e      	mov	lr, r3
 80175e6:	4770      	bx	lr

080175e8 <_fini>:
 80175e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ea:	bf00      	nop
 80175ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175ee:	bc08      	pop	{r3}
 80175f0:	469e      	mov	lr, r3
 80175f2:	4770      	bx	lr
