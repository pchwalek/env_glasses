
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014094  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080141d4  080141d4  000241d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000010  0801453c  0801453c  0002453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   0000000c  0801454c  0801454c  0002454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000004  08014558  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00005620  200001fc  08014750  000301fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000581c  08014750  0003581c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0005cb95  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000a06f  00000000  00000000  0008cdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000035d8  00000000  00000000  00096e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003250  00000000  00000000  0009a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039196  00000000  00000000  0009d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00043688  00000000  00000000  000d67ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00120260  00000000  00000000  00119e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0023a0d6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000e608  00000000  00000000  0023a12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001fc 	.word	0x200001fc
 800015c:	00000000 	.word	0x00000000
 8000160:	080141bc 	.word	0x080141bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000200 	.word	0x20000200
 800017c:	080141bc 	.word	0x080141bc

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a08:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <MX_ADC1_Init+0xc0>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a0c:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a68:	f002 f852 	bl	8002b10 <HAL_ADC_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a72:	f000 ffeb 	bl	8001a4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_ADC1_Init+0xc4>)
 8000a78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a82:	237f      	movs	r3, #127	; 0x7f
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a86:	2304      	movs	r3, #4
 8000a88:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_ADC1_Init+0xbc>)
 8000a94:	f002 f988 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a9e:	f000 ffd5 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20003c74 	.word	0x20003c74
 8000ab0:	50040000 	.word	0x50040000
 8000ab4:	19200040 	.word	0x19200040

08000ab8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_ADC_MspInit+0x54>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d113      	bne.n	8000b02 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ada:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ade:	f7ff ff6d 	bl	80009bc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff6a 	bl	80009bc <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aec:	2303      	movs	r3, #3
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f002 fdf9 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	50040000 	.word	0x50040000

08000b10 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000b1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b2a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b36:	4313      	orrs	r3, r2
 8000b38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	cafecafe 	.word	0xcafecafe

08000b4c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ba4:	d101      	bne.n	8000baa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000bca:	d101      	bne.n	8000bd0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	041b      	lsls	r3, r3, #16
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	605a      	str	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	605a      	str	r2, [r3, #4]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	041b      	lsls	r3, r3, #16
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	615a      	str	r2, [r3, #20]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	609a      	str	r2, [r3, #8]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	619a      	str	r2, [r3, #24]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <LL_LPM_EnableSleep+0x1c>)
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <LL_LPM_EnableSleep+0x1c>)
 8000cde:	f023 0304 	bic.w	r3, r3, #4
 8000ce2:	6113      	str	r3, [r2, #16]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <MX_APPE_Config+0x18>)
 8000cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cfe:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000d00:	f000 f806 	bl	8000d10 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d04:	f000 f846 	bl	8000d94 <Config_HSE>

  return;
 8000d08:	bf00      	nop
}
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58004000 	.word	0x58004000

08000d10 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000d14:	f000 f804 	bl	8000d20 <Reset_BackupDomain>

  Reset_IPCC();
 8000d18:	f000 f81a 	bl	8000d50 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000d1c:	bf00      	nop
}
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000d24:	f7ff ff34 	bl	8000b90 <LL_RCC_IsActiveFlag_PINRST>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00d      	beq.n	8000d4a <Reset_BackupDomain+0x2a>
 8000d2e:	f7ff ff42 	bl	8000bb6 <LL_RCC_IsActiveFlag_SFTRST>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d108      	bne.n	8000d4a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000d38:	f005 fb10 	bl	800635c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000d3c:	f005 fb0e 	bl	800635c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000d40:	f7ff ff04 	bl	8000b4c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000d44:	f7ff ff13 	bl	8000b6e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
}
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000d54:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d58:	f7ff ff40 	bl	8000bdc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000d5c:	213f      	movs	r1, #63	; 0x3f
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <Reset_IPCC+0x40>)
 8000d60:	f7ff ff9b 	bl	8000c9a <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000d64:	213f      	movs	r1, #63	; 0x3f
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <Reset_IPCC+0x40>)
 8000d68:	f7ff ffa5 	bl	8000cb6 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000d6c:	213f      	movs	r1, #63	; 0x3f
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <Reset_IPCC+0x40>)
 8000d70:	f7ff ff4d 	bl	8000c0e <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000d74:	213f      	movs	r1, #63	; 0x3f
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <Reset_IPCC+0x40>)
 8000d78:	f7ff ff6c 	bl	8000c54 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000d7c:	213f      	movs	r1, #63	; 0x3f
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <Reset_IPCC+0x40>)
 8000d80:	f7ff ff57 	bl	8000c32 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000d84:	213f      	movs	r1, #63	; 0x3f
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <Reset_IPCC+0x40>)
 8000d88:	f7ff ff76 	bl	8000c78 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000d8c:	bf00      	nop
}
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58000c00 	.word	0x58000c00

08000d94 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f00d f8fe 	bl	800df9c <OTP_Read>
 8000da0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	799b      	ldrb	r3, [r3, #6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff feaf 	bl	8000b10 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
}
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f001 fcf4 	bl	80027b0 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd4:	d00a      	beq.n	8000dec <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000dd6:	f001 fd03 	bl	80027e0 <HAL_GetTickFreq>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de4:	e002      	b.n	8000dec <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000de6:	f7ff ff75 	bl	8000cd4 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000dea:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000dec:	f001 fce0 	bl	80027b0 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f4      	bhi.n	8000de6 <HAL_Delay+0x2a>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C_Lock */
  messageI2C1_LockHandle = osMutexNew(&messageI2C1_Lock_attributes);
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <_Z16MX_FREERTOS_Initv+0x64>)
 8000e0e:	f00e fa19 	bl	800f244 <osMutexNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <_Z16MX_FREERTOS_Initv+0x68>)
 8000e16:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 8000e18:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <_Z16MX_FREERTOS_Initv+0x6c>)
 8000e1a:	2112      	movs	r1, #18
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f00e fb2d 	bl	800f47c <osMessageQueueNew>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_Z16MX_FREERTOS_Initv+0x70>)
 8000e26:	6013      	str	r3, [r2, #0]
			&lightsComplexQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_Z16MX_FREERTOS_Initv+0x74>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4814      	ldr	r0, [pc, #80]	; (8000e80 <_Z16MX_FREERTOS_Initv+0x78>)
 8000e2e:	f00d ff99 	bl	800ed64 <osThreadNew>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <_Z16MX_FREERTOS_Initv+0x7c>)
 8000e36:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
  frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL, &frontLightsThre_attributes);
 8000e38:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <_Z16MX_FREERTOS_Initv+0x80>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <_Z16MX_FREERTOS_Initv+0x84>)
 8000e3e:	f00d ff91 	bl	800ed64 <osThreadNew>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_Z16MX_FREERTOS_Initv+0x88>)
 8000e46:	6013      	str	r3, [r2, #0]

  /* creation of thermopileTask */
  thermopileTaskHandle = osThreadNew(Thermopile_Task, NULL, &thermopileTask_attributes);
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_Z16MX_FREERTOS_Initv+0x8c>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <_Z16MX_FREERTOS_Initv+0x90>)
 8000e4e:	f00d ff89 	bl	800ed64 <osThreadNew>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <_Z16MX_FREERTOS_Initv+0x94>)
 8000e56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  specTaskHandle = osThreadNew(Spec_Task, NULL, &specTask_attributes);
  luxTaskHandle = osThreadNew(LuxTask, NULL, &luxTask_attributes);
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <_Z16MX_FREERTOS_Initv+0x98>)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <_Z16MX_FREERTOS_Initv+0x9c>)
 8000e5e:	f00d ff81 	bl	800ed64 <osThreadNew>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <_Z16MX_FREERTOS_Initv+0xa0>)
 8000e66:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0801437c 	.word	0x0801437c
 8000e70:	2000022c 	.word	0x2000022c
 8000e74:	080142d4 	.word	0x080142d4
 8000e78:	20000218 	.word	0x20000218
 8000e7c:	08014310 	.word	0x08014310
 8000e80:	08000ead 	.word	0x08000ead
 8000e84:	20000220 	.word	0x20000220
 8000e88:	08014334 	.word	0x08014334
 8000e8c:	080013b5 	.word	0x080013b5
 8000e90:	20000224 	.word	0x20000224
 8000e94:	08014358 	.word	0x08014358
 8000e98:	080021fd 	.word	0x080021fd
 8000e9c:	20000228 	.word	0x20000228
 8000ea0:	080142ec 	.word	0x080142ec
 8000ea4:	08001675 	.word	0x08001675
 8000ea8:	2000021c 	.word	0x2000021c

08000eac <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	f00e f8b5 	bl	800f026 <osDelay>

	while(1){
		ledStartupSequence();
 8000ebc:	f000 fad2 	bl	8001464 <ledStartupSequence>
		osDelay(1500);
 8000ec0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ec4:	f00e f8af 	bl	800f026 <osDelay>
		ledStartupSequence();
 8000ec8:	e7f8      	b.n	8000ebc <_Z16StartDefaultTaskPv+0x10>

08000eca <LL_AHB2_GRP1_EnableClock>:
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4013      	ands	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff ffda 	bl	8000eca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2004      	movs	r0, #4
 8000f18:	f7ff ffd7 	bl	8000eca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff ffd4 	bl	8000eca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	2008      	movs	r0, #8
 8000f24:	f7ff ffd1 	bl	8000eca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2e:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <MX_GPIO_Init+0xa8>)
 8000f30:	f002 fd50 	bl	80039d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000f34:	2302      	movs	r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f002 fbd4 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <MX_GPIO_Init+0xa8>)
 8000f64:	f002 fbc6 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 8000f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f002 fbb9 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 8000f82:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000f86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_GPIO_Init+0xac>)
 8000f96:	f002 fbad 	bl	80036f4 <HAL_GPIO_Init>

}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000c00 	.word	0x48000c00

08000fac <LL_AHB2_GRP1_EnableClock>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_I2C1_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_I2C1_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_I2C1_Init+0x74>)
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <MX_I2C1_Init+0x7c>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001020:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_I2C1_Init+0x74>)
 8001028:	2201      	movs	r2, #1
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_I2C1_Init+0x74>)
 800104c:	f002 fcfe 	bl	8003a4c <HAL_I2C_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001056:	f000 fcf9 	bl	8001a4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <MX_I2C1_Init+0x74>)
 800105e:	f003 fb2b 	bl	80046b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001068:	f000 fcf0 	bl	8001a4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_I2C1_Init+0x74>)
 8001070:	f003 fb6d 	bl	800474e <HAL_I2CEx_ConfigDigitalFilter>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 fce7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20003d24 	.word	0x20003d24
 8001088:	40005400 	.word	0x40005400
 800108c:	10707dbc 	.word	0x10707dbc

08001090 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_I2C3_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_I2C3_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_I2C3_Init+0x74>)
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_I2C3_Init+0x7c>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_I2C3_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_I2C3_Init+0x74>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_I2C3_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_I2C3_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C3_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_I2C3_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C3_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <MX_I2C3_Init+0x74>)
 80010cc:	f002 fcbe 	bl	8003a4c <HAL_I2C_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fcb9 	bl	8001a4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <MX_I2C3_Init+0x74>)
 80010de:	f003 faeb 	bl	80046b8 <HAL_I2CEx_ConfigAnalogFilter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010e8:	f000 fcb0 	bl	8001a4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_I2C3_Init+0x74>)
 80010f0:	f003 fb2d 	bl	800474e <HAL_I2CEx_ConfigDigitalFilter>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fca7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20003cd8 	.word	0x20003cd8
 8001108:	40005c00 	.word	0x40005c00
 800110c:	10707dbc 	.word	0x10707dbc

08001110 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09c      	sub	sp, #112	; 0x70
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2250      	movs	r2, #80	; 0x50
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f012 ff75 	bl	8014020 <memset>
  if(i2cHandle->Instance==I2C1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <HAL_I2C_MspInit+0x128>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d12f      	bne.n	80011a0 <HAL_I2C_MspInit+0x90>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001140:	2304      	movs	r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001144:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4618      	mov	r0, r3
 8001150:	f006 fe9a 	bl	8007e88 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800115a:	f000 fc77 	bl	8001a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2002      	movs	r0, #2
 8001160:	f7ff ff24 	bl	8000fac <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001164:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001168:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116a:	2312      	movs	r3, #18
 800116c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2302      	movs	r3, #2
 8001174:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001176:	2304      	movs	r3, #4
 8001178:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800117e:	4619      	mov	r1, r3
 8001180:	482e      	ldr	r0, [pc, #184]	; (800123c <HAL_I2C_MspInit+0x12c>)
 8001182:	f002 fab7 	bl	80036f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001186:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800118a:	f7ff ff28 	bl	8000fde <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	201e      	movs	r0, #30
 8001194:	f002 fa86 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001198:	201e      	movs	r0, #30
 800119a:	f002 fa9d 	bl	80036d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800119e:	e046      	b.n	800122e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_I2C_MspInit+0x130>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d141      	bne.n	800122e <HAL_I2C_MspInit+0x11e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011aa:	2308      	movs	r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011ae:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 fe65 	bl	8007e88 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2C_MspInit+0xb8>
      Error_Handler();
 80011c4:	f000 fc42 	bl	8001a4c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff feef 	bl	8000fac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff feec 	bl	8000fac <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d4:	2302      	movs	r3, #2
 80011d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d8:	2312      	movs	r3, #18
 80011da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2302      	movs	r3, #2
 80011e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011e4:	2304      	movs	r3, #4
 80011e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ec:	4619      	mov	r1, r3
 80011ee:	4815      	ldr	r0, [pc, #84]	; (8001244 <HAL_I2C_MspInit+0x134>)
 80011f0:	f002 fa80 	bl	80036f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001200:	2302      	movs	r3, #2
 8001202:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001204:	2304      	movs	r3, #4
 8001206:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f002 fa6f 	bl	80036f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001216:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800121a:	f7ff fee0 	bl	8000fde <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2105      	movs	r1, #5
 8001222:	2020      	movs	r0, #32
 8001224:	f002 fa3e 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001228:	2020      	movs	r0, #32
 800122a:	f002 fa55 	bl	80036d8 <HAL_NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3770      	adds	r7, #112	; 0x70
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005400 	.word	0x40005400
 800123c:	48000400 	.word	0x48000400
 8001240:	40005c00 	.word	0x40005c00
 8001244:	48000800 	.word	0x48000800

08001248 <LL_AHB3_GRP1_EnableClock>:
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4313      	orrs	r3, r2
 800125e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_IPCC_Init+0x20>)
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <MX_IPCC_Init+0x24>)
 8001284:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_IPCC_Init+0x20>)
 8001288:	f003 faae 	bl	80047e8 <HAL_IPCC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001292:	f000 fbdb 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20003d70 	.word	0x20003d70
 80012a0:	58000c00 	.word	0x58000c00

080012a4 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_IPCC_MspInit+0x24>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d103      	bne.n	80012be <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80012b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012ba:	f7ff ffc5 	bl	8001248 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	58000c00 	.word	0x58000c00

080012cc <setup_LP5523>:
		LOG_EN, LOG_EN, LOG_EN, LOG_EN };
uint8_t deviceAddress;
uint8_t led_PWM[9] = { 0 };
uint8_t packet;

void setup_LP5523(uint8_t ADDR) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <setup_LP5523+0xcc>)
 80012de:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <setup_LP5523+0xd0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00e f831 	bl	800f350 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <setup_LP5523+0xd4>)
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG,
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <setup_LP5523+0xcc>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b299      	uxth	r1, r3
 80012fa:	230a      	movs	r3, #10
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <setup_LP5523+0xd4>)
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2200      	movs	r2, #0
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <setup_LP5523+0xd8>)
 800130c:	f002 fd22 	bl	8003d54 <HAL_I2C_Mem_Write>
			1, &packet, 1, I2C_TIMEOUT);

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <setup_LP5523+0xd4>)
 8001312:	224f      	movs	r2, #79	; 0x4f
 8001314:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1,
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <setup_LP5523+0xcc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b299      	uxth	r1, r3
 800131c:	230a      	movs	r3, #10
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2301      	movs	r3, #1
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <setup_LP5523+0xd4>)
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2236      	movs	r2, #54	; 0x36
 800132c:	481d      	ldr	r0, [pc, #116]	; (80013a4 <setup_LP5523+0xd8>)
 800132e:	f002 fd11 	bl	8003d54 <HAL_I2C_Mem_Write>
			&packet, 1, I2C_TIMEOUT);

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1,
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <setup_LP5523+0xcc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b299      	uxth	r1, r3
 8001338:	230a      	movs	r3, #10
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2309      	movs	r3, #9
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <setup_LP5523+0xdc>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2216      	movs	r2, #22
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <setup_LP5523+0xd8>)
 800134a:	f002 fd03 	bl	8003d54 <HAL_I2C_Mem_Write>
			led_PWM, 9, I2C_TIMEOUT);

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress,
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <setup_LP5523+0xcc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b299      	uxth	r1, r3
 8001354:	230a      	movs	r3, #10
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2309      	movs	r3, #9
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <setup_LP5523+0xe0>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	2226      	movs	r2, #38	; 0x26
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <setup_LP5523+0xd8>)
 8001366:	f002 fcf5 	bl	8003d54 <HAL_I2C_Mem_Write>
			LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1,
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <setup_LP5523+0xcc>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b299      	uxth	r1, r3
 8001370:	230a      	movs	r3, #10
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2309      	movs	r3, #9
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <setup_LP5523+0xe4>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	2206      	movs	r2, #6
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <setup_LP5523+0xd8>)
 8001382:	f002 fce7 	bl	8003d54 <HAL_I2C_Mem_Write>
			packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C1_LockHandle);
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <setup_LP5523+0xd0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f00e f832 	bl	800f3f4 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20003dc2 	.word	0x20003dc2
 800139c:	2000022c 	.word	0x2000022c
 80013a0:	20003dac 	.word	0x20003dac
 80013a4:	20003d24 	.word	0x20003d24
 80013a8:	20000248 	.word	0x20000248
 80013ac:	20000004 	.word	0x20000004
 80013b0:	080143a0 	.word	0x080143a0

080013b4 <ThreadFrontLightsComplexTask>:
	    	}
#endif
}

union ColorComplex receivedColors;
void ThreadFrontLightsComplexTask(void *argument){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	6078      	str	r0, [r7, #4]

	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 80013bc:	2034      	movs	r0, #52	; 0x34
 80013be:	f7ff ff85 	bl	80012cc <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 80013c2:	2035      	movs	r0, #53	; 0x35
 80013c4:	f7ff ff82 	bl	80012cc <setup_LP5523>

	HAL_StatusTypeDef state = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]



	while (1) {
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <ThreadFrontLightsComplexTask+0x98>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d4:	2200      	movs	r2, #0
 80013d6:	491e      	ldr	r1, [pc, #120]	; (8001450 <ThreadFrontLightsComplexTask+0x9c>)
 80013d8:	f00e f924 	bl	800f624 <osMessageQueueGet>
						0U, osWaitForever);
		memcpy(led_left_PWM, &receivedColors, 9);
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <ThreadFrontLightsComplexTask+0xa0>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <ThreadFrontLightsComplexTask+0x9c>)
 80013e0:	6810      	ldr	r0, [r2, #0]
 80013e2:	6851      	ldr	r1, [r2, #4]
 80013e4:	c303      	stmia	r3!, {r0, r1}
 80013e6:	7a12      	ldrb	r2, [r2, #8]
 80013e8:	701a      	strb	r2, [r3, #0]
		memcpy(led_right_PWM, &(receivedColors.color[9]), 9);
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <ThreadFrontLightsComplexTask+0xa4>)
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <ThreadFrontLightsComplexTask+0x9c>)
 80013ee:	3209      	adds	r2, #9
 80013f0:	6810      	ldr	r0, [r2, #0]
 80013f2:	6851      	ldr	r1, [r2, #4]
 80013f4:	c303      	stmia	r3!, {r0, r1}
 80013f6:	7a12      	ldrb	r2, [r2, #8]
 80013f8:	701a      	strb	r2, [r3, #0]
	#ifndef DONGLE_CODE
		osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <ThreadFrontLightsComplexTask+0xa8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001402:	4618      	mov	r0, r3
 8001404:	f00d ffa4 	bl	800f350 <osSemaphoreAcquire>

//		HAL_I2C_Mem_Write_DMA(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
//				LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9);
		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 8001408:	2305      	movs	r3, #5
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2309      	movs	r3, #9
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <ThreadFrontLightsComplexTask+0xa0>)
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2216      	movs	r2, #22
 8001418:	2168      	movs	r1, #104	; 0x68
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <ThreadFrontLightsComplexTask+0xac>)
 800141c:	f002 fc9a 	bl	8003d54 <HAL_I2C_Mem_Write>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
////			if(counter > 1000){
////				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
////			}
//		}

		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 8001424:	2305      	movs	r3, #5
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	2309      	movs	r3, #9
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <ThreadFrontLightsComplexTask+0xa4>)
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	2216      	movs	r2, #22
 8001434:	216a      	movs	r1, #106	; 0x6a
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <ThreadFrontLightsComplexTask+0xac>)
 8001438:	f002 fc8c 	bl	8003d54 <HAL_I2C_Mem_Write>
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
//			if(counter > 1000){
//				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
//			}
//		}

		osSemaphoreRelease(messageI2C1_LockHandle);
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <ThreadFrontLightsComplexTask+0xa8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f00d ffd5 	bl	800f3f4 <osSemaphoreRelease>
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 800144a:	e7bf      	b.n	80013cc <ThreadFrontLightsComplexTask+0x18>
 800144c:	20000218 	.word	0x20000218
 8001450:	20003db0 	.word	0x20003db0
 8001454:	20000230 	.word	0x20000230
 8001458:	2000023c 	.word	0x2000023c
 800145c:	2000022c 	.word	0x2000022c
 8001460:	20003d24 	.word	0x20003d24

08001464 <ledStartupSequence>:
{
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
}
#endif

void ledStartupSequence(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8001468:	4864      	ldr	r0, [pc, #400]	; (80015fc <ledStartupSequence+0x198>)
 800146a:	f000 f8ed 	bl	8001648 <resetColor>

	receivedColor.colors_indiv.left_front_b = 255;
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <ledStartupSequence+0x198>)
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	705a      	strb	r2, [r3, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001474:	4b62      	ldr	r3, [pc, #392]	; (8001600 <ledStartupSequence+0x19c>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	2200      	movs	r2, #0
 800147c:	495f      	ldr	r1, [pc, #380]	; (80015fc <ledStartupSequence+0x198>)
 800147e:	f00e f871 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor););
	osDelay(LED_START_SEQ_INTERVAL);
 8001482:	20c8      	movs	r0, #200	; 0xc8
 8001484:	f00d fdcf 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.left_front_b = 0;
 8001488:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <ledStartupSequence+0x198>)
 800148a:	2200      	movs	r2, #0
 800148c:	705a      	strb	r2, [r3, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 800148e:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <ledStartupSequence+0x198>)
 8001490:	22ff      	movs	r2, #255	; 0xff
 8001492:	701a      	strb	r2, [r3, #0]

	receivedColor.colors_indiv.left_top_b = 255;
 8001494:	4b59      	ldr	r3, [pc, #356]	; (80015fc <ledStartupSequence+0x198>)
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	709a      	strb	r2, [r3, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 800149a:	4b59      	ldr	r3, [pc, #356]	; (8001600 <ledStartupSequence+0x19c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	4956      	ldr	r1, [pc, #344]	; (80015fc <ledStartupSequence+0x198>)
 80014a4:	f00e f85e 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 80014a8:	20c8      	movs	r0, #200	; 0xc8
 80014aa:	f00d fdbc 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.left_front_g = 0;
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <ledStartupSequence+0x198>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 80014b4:	4b51      	ldr	r3, [pc, #324]	; (80015fc <ledStartupSequence+0x198>)
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_b = 0;
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <ledStartupSequence+0x198>)
 80014bc:	2200      	movs	r2, #0
 80014be:	709a      	strb	r2, [r3, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 80014c0:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <ledStartupSequence+0x198>)
 80014c2:	22ff      	movs	r2, #255	; 0xff
 80014c4:	70da      	strb	r2, [r3, #3]

	receivedColor.colors_indiv.left_side_b = 255;
 80014c6:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <ledStartupSequence+0x198>)
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	711a      	strb	r2, [r3, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <ledStartupSequence+0x19c>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	2200      	movs	r2, #0
 80014d4:	4949      	ldr	r1, [pc, #292]	; (80015fc <ledStartupSequence+0x198>)
 80014d6:	f00e f845 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 80014da:	20c8      	movs	r0, #200	; 0xc8
 80014dc:	f00d fda3 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.left_front_r = 0;
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <ledStartupSequence+0x198>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_g = 0;
 80014e6:	4b45      	ldr	r3, [pc, #276]	; (80015fc <ledStartupSequence+0x198>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	70da      	strb	r2, [r3, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <ledStartupSequence+0x198>)
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_b = 0;
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <ledStartupSequence+0x198>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <ledStartupSequence+0x198>)
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	715a      	strb	r2, [r3, #5]

	receivedColor.colors_indiv.right_side_b = 255;
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <ledStartupSequence+0x198>)
 8001500:	22ff      	movs	r2, #255	; 0xff
 8001502:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001504:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <ledStartupSequence+0x19c>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	2200      	movs	r2, #0
 800150c:	493b      	ldr	r1, [pc, #236]	; (80015fc <ledStartupSequence+0x198>)
 800150e:	f00e f829 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001512:	20c8      	movs	r0, #200	; 0xc8
 8001514:	f00d fd87 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.left_top_r = 0;
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <ledStartupSequence+0x198>)
 800151a:	2200      	movs	r2, #0
 800151c:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_g = 0;
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <ledStartupSequence+0x198>)
 8001520:	2200      	movs	r2, #0
 8001522:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <ledStartupSequence+0x198>)
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_b = 0;
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <ledStartupSequence+0x198>)
 800152c:	2200      	movs	r2, #0
 800152e:	735a      	strb	r2, [r3, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <ledStartupSequence+0x198>)
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	739a      	strb	r2, [r3, #14]

	receivedColor.colors_indiv.right_top_b = 255;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <ledStartupSequence+0x198>)
 8001538:	22ff      	movs	r2, #255	; 0xff
 800153a:	72da      	strb	r2, [r3, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <ledStartupSequence+0x19c>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	2200      	movs	r2, #0
 8001544:	492d      	ldr	r1, [pc, #180]	; (80015fc <ledStartupSequence+0x198>)
 8001546:	f00e f80d 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 800154a:	20c8      	movs	r0, #200	; 0xc8
 800154c:	f00d fd6b 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.left_side_r = 0;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <ledStartupSequence+0x198>)
 8001552:	2200      	movs	r2, #0
 8001554:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_g = 0;
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <ledStartupSequence+0x198>)
 8001558:	2200      	movs	r2, #0
 800155a:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <ledStartupSequence+0x198>)
 800155e:	22ff      	movs	r2, #255	; 0xff
 8001560:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_b = 0;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <ledStartupSequence+0x198>)
 8001564:	2200      	movs	r2, #0
 8001566:	72da      	strb	r2, [r3, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <ledStartupSequence+0x198>)
 800156a:	22ff      	movs	r2, #255	; 0xff
 800156c:	731a      	strb	r2, [r3, #12]

	receivedColor.colors_indiv.right_front_b = 255;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <ledStartupSequence+0x198>)
 8001570:	22ff      	movs	r2, #255	; 0xff
 8001572:	729a      	strb	r2, [r3, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <ledStartupSequence+0x19c>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	491f      	ldr	r1, [pc, #124]	; (80015fc <ledStartupSequence+0x198>)
 800157e:	f00d fff1 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8001582:	20c8      	movs	r0, #200	; 0xc8
 8001584:	f00d fd4f 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.right_side_r = 0;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <ledStartupSequence+0x198>)
 800158a:	2200      	movs	r2, #0
 800158c:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_g = 0;
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <ledStartupSequence+0x198>)
 8001590:	2200      	movs	r2, #0
 8001592:	731a      	strb	r2, [r3, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <ledStartupSequence+0x198>)
 8001596:	22ff      	movs	r2, #255	; 0xff
 8001598:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_b = 0;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <ledStartupSequence+0x198>)
 800159c:	2200      	movs	r2, #0
 800159e:	729a      	strb	r2, [r3, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <ledStartupSequence+0x198>)
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	725a      	strb	r2, [r3, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <ledStartupSequence+0x19c>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	2200      	movs	r2, #0
 80015ae:	4913      	ldr	r1, [pc, #76]	; (80015fc <ledStartupSequence+0x198>)
 80015b0:	f00d ffd8 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 80015b4:	20c8      	movs	r0, #200	; 0xc8
 80015b6:	f00d fd36 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.right_top_r = 0;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <ledStartupSequence+0x198>)
 80015bc:	2200      	movs	r2, #0
 80015be:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_g = 0;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <ledStartupSequence+0x198>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	725a      	strb	r2, [r3, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <ledStartupSequence+0x198>)
 80015c8:	22ff      	movs	r2, #255	; 0xff
 80015ca:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <ledStartupSequence+0x19c>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	2200      	movs	r2, #0
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <ledStartupSequence+0x198>)
 80015d6:	f00d ffc5 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 80015da:	20c8      	movs	r0, #200	; 0xc8
 80015dc:	f00d fd23 	bl	800f026 <osDelay>

	receivedColor.colors_indiv.right_front_r = 0;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <ledStartupSequence+0x198>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <ledStartupSequence+0x19c>)
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	2200      	movs	r2, #0
 80015ee:	4903      	ldr	r1, [pc, #12]	; (80015fc <ledStartupSequence+0x198>)
 80015f0:	f00d ffb8 	bl	800f564 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);

	ledDisconnectNotification();
 80015f4:	f000 f806 	bl	8001604 <ledDisconnectNotification>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20003dc4 	.word	0x20003dc4
 8001600:	20000218 	.word	0x20000218

08001604 <ledDisconnectNotification>:

void ledDisconnectNotification(void){
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <ledDisconnectNotification+0x3c>)
 800160a:	f000 f81d 	bl	8001648 <resetColor>

	receivedColor.colors_indiv.left_side_g = 0;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <ledDisconnectNotification+0x3c>)
 8001610:	2200      	movs	r2, #0
 8001612:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <ledDisconnectNotification+0x3c>)
 8001616:	2200      	movs	r2, #0
 8001618:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <ledDisconnectNotification+0x3c>)
 800161c:	2232      	movs	r2, #50	; 0x32
 800161e:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <ledDisconnectNotification+0x3c>)
 8001622:	2232      	movs	r2, #50	; 0x32
 8001624:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <ledDisconnectNotification+0x40>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	2300      	movs	r3, #0
 800162c:	2200      	movs	r2, #0
 800162e:	4904      	ldr	r1, [pc, #16]	; (8001640 <ledDisconnectNotification+0x3c>)
 8001630:	f00d ff98 	bl	800f564 <osMessageQueuePut>
	osDelay(10);
 8001634:	200a      	movs	r0, #10
 8001636:	f00d fcf6 	bl	800f026 <osDelay>
//	FrontLightsSet(&receivedColor);
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20003dc4 	.word	0x20003dc4
 8001644:	20000218 	.word	0x20000218

08001648 <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 8001648:	b4b0      	push	{r4, r5, r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <resetColor+0x28>)
 8001654:	461d      	mov	r5, r3
 8001656:	4614      	mov	r4, r2
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	6028      	str	r0, [r5, #0]
 800165c:	6069      	str	r1, [r5, #4]
 800165e:	60aa      	str	r2, [r5, #8]
 8001660:	60eb      	str	r3, [r5, #12]
 8001662:	8823      	ldrh	r3, [r4, #0]
 8001664:	822b      	strh	r3, [r5, #16]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bcb0      	pop	{r4, r5, r7}
 800166e:	4770      	bx	lr
 8001670:	0801438c 	.word	0x0801438c

08001674 <LuxTask>:
//osThreadId_t specTaskHandle;
osTimerId_t periodicLuxTimer_id;

TSL2772 luxSensor;

void LuxTask(void *argument) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
	uint32_t flags;
	uint32_t timeLeftForSample = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]

	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <LuxTask+0x120>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800168c:	4618      	mov	r0, r3
 800168e:	f00d fe5f 	bl	800f350 <osSemaphoreAcquire>
	if (!luxSensor.begin(TSL2772_I2CADDR, &hi2c1)) {
 8001692:	4a41      	ldr	r2, [pc, #260]	; (8001798 <LuxTask+0x124>)
 8001694:	2139      	movs	r1, #57	; 0x39
 8001696:	4841      	ldr	r0, [pc, #260]	; (800179c <LuxTask+0x128>)
 8001698:	f00d f869 	bl	800e76e <_ZN7TSL27725beginEhP19__I2C_HandleTypeDef>
 800169c:	4603      	mov	r3, r0
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <LuxTask+0x3a>
		osDelay(100);
 80016a8:	2064      	movs	r0, #100	; 0x64
 80016aa:	f00d fcbc 	bl	800f026 <osDelay>
	}
	luxSensor.powerOn(true);
 80016ae:	2101      	movs	r1, #1
 80016b0:	483a      	ldr	r0, [pc, #232]	; (800179c <LuxTask+0x128>)
 80016b2:	f00d f8b5 	bl	800e820 <_ZN7TSL27727powerOnEb>

	luxSensor.setATIME(TSL2722_INTEGRATIONTIME_101MS);
 80016b6:	21db      	movs	r1, #219	; 0xdb
 80016b8:	4838      	ldr	r0, [pc, #224]	; (800179c <LuxTask+0x128>)
 80016ba:	f00d f8d3 	bl	800e864 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t>
	luxSensor.setAGAIN(TSL2722_GAIN_8X);
 80016be:	2101      	movs	r1, #1
 80016c0:	4836      	ldr	r0, [pc, #216]	; (800179c <LuxTask+0x128>)
 80016c2:	f00d f919 	bl	800e8f8 <_ZN7TSL27728setAGAINE13tsl2591Gain_t>

	luxSensor.enableALS(true);
 80016c6:	2101      	movs	r1, #1
 80016c8:	4834      	ldr	r0, [pc, #208]	; (800179c <LuxTask+0x128>)
 80016ca:	f00d f888 	bl	800e7de <_ZN7TSL27729enableALSEb>

	luxSensor.enableALS(true);
 80016ce:	2101      	movs	r1, #1
 80016d0:	4832      	ldr	r0, [pc, #200]	; (800179c <LuxTask+0x128>)
 80016d2:	f00d f884 	bl	800e7de <_ZN7TSL27729enableALSEb>


	header.payloadLength = MAX_LUX_SAMPLES_PACKET * sizeof(luxSample);
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <LuxTask+0x12c>)
 80016d8:	2218      	movs	r2, #24
 80016da:	60da      	str	r2, [r3, #12]
	header.reserved[0] = (uint8_t) TSL2722_INTEGRATIONTIME_101MS;
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <LuxTask+0x12c>)
 80016de:	22db      	movs	r2, #219	; 0xdb
 80016e0:	611a      	str	r2, [r3, #16]
	header.reserved[1] = (uint8_t) TSL2722_GAIN_8X;
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <LuxTask+0x12c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	615a      	str	r2, [r3, #20]

	uint16_t luxIdx = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	82fb      	strh	r3, [r7, #22]
	uint32_t luxID = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]

	uint32_t luxSample;

	osSemaphoreRelease(messageI2C1_LockHandle);
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <LuxTask+0x120>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00d fe7d 	bl	800f3f4 <osSemaphoreRelease>
	periodicLuxTimer_id = osTimerNew(triggerLuxSample, osTimerPeriodic,
 80016fa:	2300      	movs	r3, #0
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	4828      	ldr	r0, [pc, #160]	; (80017a4 <LuxTask+0x130>)
 8001702:	f00d fcc1 	bl	800f088 <osTimerNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <LuxTask+0x134>)
 800170a:	6013      	str	r3, [r2, #0]
			NULL, NULL);
	osTimerStart(periodicLuxTimer_id, LUX_SAMPLE_SYS_PERIOD_MS);
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <LuxTask+0x134>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f241 3188 	movw	r1, #5000	; 0x1388
 8001714:	4618      	mov	r0, r3
 8001716:	f00d fd33 	bl	800f180 <osTimerStart>

	while (1) {
		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 800171a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171e:	2100      	movs	r1, #0
 8001720:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001724:	f00d fbfe 	bl	800ef24 <osThreadFlagsWait>
 8001728:	60f8      	str	r0, [r7, #12]
		osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <LuxTask+0x102>

			timeLeftForSample = HAL_GetTick() - timeLeftForSample;
 8001734:	f001 f83c 	bl	80027b0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	61fb      	str	r3, [r7, #28]
			if(timeLeftForSample < LUX_SAMPLE_SYS_PERIOD_MS){
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f241 3287 	movw	r2, #4999	; 0x1387
 8001746:	4293      	cmp	r3, r2
 8001748:	d802      	bhi.n	8001750 <LuxTask+0xdc>
				osDelay(timeLeftForSample);
 800174a:	69f8      	ldr	r0, [r7, #28]
 800174c:	f00d fc6b 	bl	800f026 <osDelay>
			}

			osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <LuxTask+0x120>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001758:	4618      	mov	r0, r3
 800175a:	f00d fdf9 	bl	800f350 <osSemaphoreAcquire>
			luxSample = luxSensor.getLux();
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <LuxTask+0x128>)
 8001760:	f00d f92e 	bl	800e9c0 <_ZN7TSL27726getLuxEv>
 8001764:	60b8      	str	r0, [r7, #8]
			osSemaphoreRelease(messageI2C1_LockHandle);
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <LuxTask+0x120>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f00d fe42 	bl	800f3f4 <osSemaphoreRelease>
//				}
//				specID++;
//				specIdx = 0;
//			}

			timeLeftForSample = HAL_GetTick();
 8001770:	f001 f81e 	bl	80027b0 <HAL_GetTick>
 8001774:	61f8      	str	r0, [r7, #28]
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0cc      	beq.n	800171a <LuxTask+0xa6>
			osTimerDelete(periodicLuxTimer_id);
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <LuxTask+0x134>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f00d fd29 	bl	800f1dc <osTimerDelete>
			break;
 800178a:	bf00      	nop
		}
	}
}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000022c 	.word	0x2000022c
 8001798:	20003d24 	.word	0x20003d24
 800179c:	2000027c 	.word	0x2000027c
 80017a0:	20000254 	.word	0x20000254
 80017a4:	080017ad 	.word	0x080017ad
 80017a8:	20000278 	.word	0x20000278

080017ac <_ZL16triggerLuxSamplePv>:

static void triggerLuxSample(void *argument) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(luxTaskHandle, GRAB_SAMPLE_BIT);
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <_ZL16triggerLuxSamplePv+0x20>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017bc:	4618      	mov	r0, r3
 80017be:	f00d fb63 	bl	800ee88 <osThreadFlagsSet>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000021c 	.word	0x2000021c

080017d0 <_Z41__static_initialization_and_destruction_0ii>:
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d102      	bne.n	80017f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
TSL2772 luxSensor;
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80017ec:	f00c ff94 	bl	800e718 <_ZN7TSL2772C1Ev>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d102      	bne.n	8001806 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001800:	4803      	ldr	r0, [pc, #12]	; (8001810 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001802:	f00c ffa9 	bl	800e758 <_ZN7TSL2772D1Ev>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000027c 	.word	0x2000027c

08001814 <_GLOBAL__sub_I_periodicLuxTimer_id>:
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
 8001818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff ffd7 	bl	80017d0 <_Z41__static_initialization_and_destruction_0ii>
 8001822:	bd80      	pop	{r7, pc}

08001824 <_GLOBAL__sub_D_periodicLuxTimer_id>:
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
 8001828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff ffcf 	bl	80017d0 <_Z41__static_initialization_and_destruction_0ii>
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_RCC_LSE_SetDriveCapability>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	f023 0218 	bic.w	r2, r3, #24
 8001848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f000 ff70 	bl	8002748 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001868:	f7ff fa44 	bl	8000cf4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186c:	f000 f822 	bl	80018b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001870:	f000 f89e 	bl	80019b0 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001874:	f7ff fd02 	bl	800127c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001878:	f7ff fb40 	bl	8000efc <MX_GPIO_Init>
  MX_ADC1_Init();
 800187c:	f7ff f8b8 	bl	80009f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001880:	f7ff fbc6 	bl	8001010 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001884:	f7ff fc04 	bl	8001090 <MX_I2C3_Init>
  MX_RF_Init();
 8001888:	f000 f8e5 	bl	8001a56 <MX_RF_Init>
  MX_RTC_Init();
 800188c:	f000 f914 	bl	8001ab8 <MX_RTC_Init>
  MX_SAI1_Init();
 8001890:	f000 f982 	bl	8001b98 <MX_SAI1_Init>
  MX_SPI1_Init();
 8001894:	f000 fa7c 	bl	8001d90 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001898:	f000 fab8 	bl	8001e0c <MX_SPI2_Init>
  MX_TIM16_Init();
 800189c:	f000 fe58 	bl	8002550 <MX_TIM16_Init>
  MX_USB_Device_Init();
 80018a0:	f011 fa14 	bl	8012ccc <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80018a4:	f00d fa14 	bl	800ecd0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80018a8:	f7ff faae 	bl	8000e08 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80018ac:	f00d fa34 	bl	800ed18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80018b0:	e7fe      	b.n	80018b0 <main+0x50>
	...

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09a      	sub	sp, #104	; 0x68
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	2248      	movs	r2, #72	; 0x48
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f012 fbac 	bl	8014020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018da:	f004 fd3f 	bl	800635c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ffa8 	bl	8001834 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <SystemClock_Config+0xf8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ec:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <SystemClock_Config+0xf8>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <SystemClock_Config+0xf8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001900:	2327      	movs	r3, #39	; 0x27
 8001902:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800190a:	2301      	movs	r3, #1
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001914:	2301      	movs	r3, #1
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001924:	2302      	movs	r3, #2
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001928:	2301      	movs	r3, #1
 800192a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800192c:	2310      	movs	r3, #16
 800192e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001930:	2320      	movs	r3, #32
 8001932:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001938:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800193a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001944:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	4618      	mov	r0, r3
 800194c:	f005 f8b6 	bl	8006abc <HAL_RCC_OscConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001960:	f000 f874 	bl	8001a4c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001964:	236f      	movs	r3, #111	; 0x6f
 8001966:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2303      	movs	r3, #3
 800196a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2103      	movs	r1, #3
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fc25 	bl	80071d4 <HAL_RCC_ClockConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800199a:	f000 f857 	bl	8001a4c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800199e:	f007 f800 	bl	80089a2 <HAL_RCCEx_EnableMSIPLLMode>
}
 80019a2:	bf00      	nop
 80019a4:	3768      	adds	r7, #104	; 0x68
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	58000400 	.word	0x58000400

080019b0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b094      	sub	sp, #80	; 0x50
 80019b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2250      	movs	r2, #80	; 0x50
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f012 fb2f 	bl	8014020 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80019c2:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 80019c6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 12;
 80019c8:	230c      	movs	r3, #12
 80019ca:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80019cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80019d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80019d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_Z24PeriphCommonClock_Configv+0x74>)
 80019e0:	617b      	str	r3, [r7, #20]
                              |RCC_PLLSAI1_ADCCLK;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019ea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80019f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80019f8:	2300      	movs	r3, #0
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80019fc:	2310      	movs	r3, #16
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fa40 	bl	8007e88 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <_Z24PeriphCommonClock_Configv+0x6c>
  {
    Error_Handler();
 8001a18:	f000 f818 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001a1c:	bf00      	nop
 8001a1e:	3750      	adds	r7, #80	; 0x50
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	11010000 	.word	0x11010000

08001a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a3a:	f000 fea5 	bl	8002788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012c00 	.word	0x40012c00

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a54:	e7fe      	b.n	8001a54 <Error_Handler+0x8>

08001a56 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_EnableRTC>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_APB1_GRP1_EnableClock>:
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <MX_RTC_Init+0x50>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001aca:	220f      	movs	r2, #15
 8001acc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001ad0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ad4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_RTC_Init+0x4c>)
 8001af0:	f007 fa1c 	bl	8008f2c <HAL_RTC_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001afa:	f7ff ffa7 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20003dec 	.word	0x20003dec
 8001b08:	40002800 	.word	0x40002800

08001b0c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b096      	sub	sp, #88	; 0x58
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	2250      	movs	r2, #80	; 0x50
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f012 fa7f 	bl	8014020 <memset>
  if(rtcHandle->Instance==RTC)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_RTC_MspInit+0x54>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d115      	bne.n	8001b58 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b30:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f006 f9a3 	bl	8007e88 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b48:	f7ff ff80 	bl	8001a4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b4c:	f7ff ff8a 	bl	8001a64 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b54:	f7ff ff97 	bl	8001a86 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3758      	adds	r7, #88	; 0x58
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40002800 	.word	0x40002800

08001b64 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001b9e:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <MX_SAI1_Init+0x6c>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <MX_SAI1_Init+0x70>)
 8001bca:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001be6:	2302      	movs	r3, #2
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_SAI1_Init+0x68>)
 8001bee:	f007 fa8b 	bl	8009108 <HAL_SAI_InitProtocol>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8001bf8:	f7ff ff28 	bl	8001a4c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20003e10 	.word	0x20003e10
 8001c04:	40015404 	.word	0x40015404
 8001c08:	0002ee00 	.word	0x0002ee00

08001c0c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <HAL_SAI_MspInit+0x78>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12d      	bne.n	8001c7a <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_SAI_MspInit+0x7c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c26:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c2a:	f7ff ff9b 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_SAI_MspInit+0x7c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_SAI_MspInit+0x7c>)
 8001c36:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c48:	230d      	movs	r3, #13
 8001c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	480e      	ldr	r0, [pc, #56]	; (8001c8c <HAL_SAI_MspInit+0x80>)
 8001c54:	f001 fd4e 	bl	80036f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001c58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c6a:	230d      	movs	r3, #13
 8001c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <HAL_SAI_MspInit+0x84>)
 8001c76:	f001 fd3d 	bl	80036f4 <HAL_GPIO_Init>

    }
}
 8001c7a:	bf00      	nop
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40015404 	.word	0x40015404
 8001c88:	20000294 	.word	0x20000294
 8001c8c:	48000800 	.word	0x48000800
 8001c90:	48000400 	.word	0x48000400

08001c94 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerSpectrometerSample(void *argument) {
	osThreadFlagsSet(specTaskHandle, GRAB_SAMPLE_BIT);
}
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d107      	bne.n	8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d102      	bne.n	8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_AS7341 specSensor;
 8001cae:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001cb0:	f00c f99c 	bl	800dfec <_ZN15Adafruit_AS7341C1Ev>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d107      	bne.n	8001cca <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001cc6:	f00c f9ab 	bl	800e020 <_ZN15Adafruit_AS7341D1Ev>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000298 	.word	0x20000298

08001cd8 <_GLOBAL__sub_I_periodicSpecTimer_id>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff ffd7 	bl	8001c94 <_Z41__static_initialization_and_destruction_0ii>
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_GLOBAL__sub_D_periodicSpecTimer_id>:
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff ffcf 	bl	8001c94 <_Z41__static_initialization_and_destruction_0ii>
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_APB1_GRP1_EnableClock>:
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_APB2_GRP1_EnableClock>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <MX_SPI1_Init+0x78>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001daa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dde:	2207      	movs	r2, #7
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001dea:	2208      	movs	r2, #8
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_SPI1_Init+0x74>)
 8001df0:	f007 fcbc 	bl	800976c <HAL_SPI_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dfa:	f7ff fe27 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20003f0c 	.word	0x20003f0c
 8001e08:	40013000 	.word	0x40013000

08001e0c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <MX_SPI2_Init+0x78>)
 8001e14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e66:	2208      	movs	r2, #8
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e6c:	f007 fc7e 	bl	800976c <HAL_SPI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e76:	f7ff fde9 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20003ea8 	.word	0x20003ea8
 8001e84:	40003800 	.word	0x40003800

08001e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <HAL_SPI_MspInit+0xe4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d12c      	bne.n	8001f04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eaa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001eae:	f7ff ff55 	bl	8001d5c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff ff20 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff ff1d 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 8001ebe:	2338      	movs	r3, #56	; 0x38
 8001ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4825      	ldr	r0, [pc, #148]	; (8001f70 <HAL_SPI_MspInit+0xe8>)
 8001eda:	f001 fc0b 	bl	80036f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f001 fbf9 	bl	80036f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f02:	e02f      	b.n	8001f64 <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_SPI_MspInit+0xec>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12a      	bne.n	8001f64 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f12:	f7ff ff0a 	bl	8001d2a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f16:	2008      	movs	r0, #8
 8001f18:	f7ff feee 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7ff feeb 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f22:	2303      	movs	r3, #3
 8001f24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f32:	2305      	movs	r3, #5
 8001f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480e      	ldr	r0, [pc, #56]	; (8001f78 <HAL_SPI_MspInit+0xf0>)
 8001f3e:	f001 fbd9 	bl	80036f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f54:	2305      	movs	r3, #5
 8001f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4804      	ldr	r0, [pc, #16]	; (8001f70 <HAL_SPI_MspInit+0xe8>)
 8001f60:	f001 fbc8 	bl	80036f4 <HAL_GPIO_Init>
}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40013000 	.word	0x40013000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	40003800 	.word	0x40003800
 8001f78:	48000c00 	.word	0x48000c00

08001f7c <LL_AHB3_GRP1_EnableClock>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001fb2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fb6:	f7ff ffe1 	bl	8001f7c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	210f      	movs	r1, #15
 8001fbe:	f06f 0001 	mvn.w	r0, #1
 8001fc2:	f001 fb6f 	bl	80036a4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	202e      	movs	r0, #46	; 0x2e
 8001fcc:	f001 fb6a 	bl	80036a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001fd0:	202e      	movs	r0, #46	; 0x2e
 8001fd2:	f001 fb81 	bl	80036d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <LL_APB2_GRP1_EnableClock>:
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	2019      	movs	r0, #25
 8002022:	f001 fb3f 	bl	80036a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002026:	2019      	movs	r0, #25
 8002028:	f001 fb56 	bl	80036d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800202c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002030:	f7ff ffd3 	bl	8001fda <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002034:	f107 0208 	add.w	r2, r7, #8
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f005 fa9e 	bl	8007580 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002044:	f005 fa86 	bl	8007554 <HAL_RCC_GetPCLK2Freq>
 8002048:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_InitTick+0x8c>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9b      	lsrs	r3, r3, #18
 8002054:	3b01      	subs	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_InitTick+0x90>)
 800205a:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_InitTick+0x94>)
 800205c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_InitTick+0x90>)
 8002060:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002064:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_InitTick+0x90>)
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_InitTick+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_InitTick+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <HAL_InitTick+0x90>)
 800207a:	f007 fc1a 	bl	80098b2 <HAL_TIM_Base_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d104      	bne.n	800208e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_InitTick+0x90>)
 8002086:	f007 fc6b 	bl	8009960 <HAL_TIM_Base_Start_IT>
 800208a:	4603      	mov	r3, r0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3730      	adds	r7, #48	; 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	431bde83 	.word	0x431bde83
 800209c:	20003f70 	.word	0x20003f70
 80020a0:	40012c00 	.word	0x40012c00

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USB_LP_IRQHandler+0x10>)
 80020d6:	f002 fd14 	bl	8004b02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000551c 	.word	0x2000551c

080020e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80020ea:	f007 fce8 	bl	8009abe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80020f0:	f007 fce5 	bl	8009abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20003f70 	.word	0x20003f70
 80020fc:	20003fbc 	.word	0x20003fbc

08002100 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <I2C1_EV_IRQHandler+0x10>)
 8002106:	f002 f853 	bl	80041b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20003d24 	.word	0x20003d24

08002114 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <I2C3_EV_IRQHandler+0x10>)
 800211a:	f002 f849 	bl	80041b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20003cd8 	.word	0x20003cd8

08002128 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800212c:	f001 fc6a 	bl	8003a04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <SystemInit+0x98>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <SystemInit+0x98>)
 8002140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002160:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <SystemInit+0x9c>)
 800216e:	4013      	ands	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800217e:	f023 0305 	bic.w	r3, r3, #5
 8002182:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <SystemInit+0xa0>)
 80021a0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <SystemInit+0xa0>)
 80021a8:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	faf6fefb 	.word	0xfaf6fefb
 80021d4:	22041000 	.word	0x22041000

080021d8 <_ZN8CALIPILEC1Ev>:
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	721a      	strb	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <Thermopile_Task>:
void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp);

uint16_t thermIdx;
uint32_t thermID;

void Thermopile_Task(void *argument) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
//	tp_nose_bridge.setup((uint8_t) THERMOPLE_NOSE_BRIDGE_ADDR, &hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
//	tp_nose_bridge.wake(); 		// wakeup thermopile sensors on i2c1 bus
//	tp_temple_front.setup((uint8_t) THERMOPLE_TEMPLE_FRONT_ADDR, &hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
//	tp_temple_front.wake(); 	// wakeup thermopile sensors on i2c3 bus

	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8002208:	4b59      	ldr	r3, [pc, #356]	; (8002370 <Thermopile_Task+0x174>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002210:	4618      	mov	r0, r3
 8002212:	f00d f89d 	bl	800f350 <osSemaphoreAcquire>
	initThermopiles(&tp_nose_tip,		THERMOPLE_NOSE_TIP_ADDR,	&hi2c1,	THERMOPLE_NOSE_TIP_ID);
 8002216:	2301      	movs	r3, #1
 8002218:	4a56      	ldr	r2, [pc, #344]	; (8002374 <Thermopile_Task+0x178>)
 800221a:	210c      	movs	r1, #12
 800221c:	4856      	ldr	r0, [pc, #344]	; (8002378 <Thermopile_Task+0x17c>)
 800221e:	f000 f8c3 	bl	80023a8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_nose_bridge,	THERMOPLE_NOSE_BRIDGE_ADDR,	&hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
 8002222:	2302      	movs	r3, #2
 8002224:	4a53      	ldr	r2, [pc, #332]	; (8002374 <Thermopile_Task+0x178>)
 8002226:	210d      	movs	r1, #13
 8002228:	4854      	ldr	r0, [pc, #336]	; (800237c <Thermopile_Task+0x180>)
 800222a:	f000 f8bd 	bl	80023a8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_front,	THERMOPLE_TEMPLE_FRONT_ADDR,&hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
 800222e:	2303      	movs	r3, #3
 8002230:	4a53      	ldr	r2, [pc, #332]	; (8002380 <Thermopile_Task+0x184>)
 8002232:	210f      	movs	r1, #15
 8002234:	4853      	ldr	r0, [pc, #332]	; (8002384 <Thermopile_Task+0x188>)
 8002236:	f000 f8b7 	bl	80023a8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_mid,		THERMOPLE_TEMPLE_MID_ADDR,	&hi2c3, THERMOPLE_TEMPLE_MID_ADDR_ID);
 800223a:	2304      	movs	r3, #4
 800223c:	4a50      	ldr	r2, [pc, #320]	; (8002380 <Thermopile_Task+0x184>)
 800223e:	210e      	movs	r1, #14
 8002240:	4851      	ldr	r0, [pc, #324]	; (8002388 <Thermopile_Task+0x18c>)
 8002242:	f000 f8b1 	bl	80023a8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_back,	THERMOPLE_TEMPLE_BACK_ADDR,	&hi2c3, THERMOPLE_TEMPLE_BACK_ADDR_ID);
 8002246:	2305      	movs	r3, #5
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <Thermopile_Task+0x184>)
 800224a:	210c      	movs	r1, #12
 800224c:	484f      	ldr	r0, [pc, #316]	; (800238c <Thermopile_Task+0x190>)
 800224e:	f000 f8ab 	bl	80023a8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	osSemaphoreRelease(messageI2C1_LockHandle);
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <Thermopile_Task+0x174>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f00d f8cc 	bl	800f3f4 <osSemaphoreRelease>

	header.payloadLength = MAX_THERMOPILE_SAMPLES_PACKET
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <Thermopile_Task+0x194>)
 800225e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8002262:	60da      	str	r2, [r3, #12]
			* sizeof(thermopile_packet);
	header.reserved[0] = THERMOPILE_SAMPLE_PERIOD_MS;
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <Thermopile_Task+0x194>)
 8002266:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800226a:	611a      	str	r2, [r3, #16]
	header.reserved[1] = THERMOPILE_CNT;
 800226c:	4b48      	ldr	r3, [pc, #288]	; (8002390 <Thermopile_Task+0x194>)
 800226e:	2202      	movs	r2, #2
 8002270:	615a      	str	r2, [r3, #20]

	thermIdx = 0;
 8002272:	4b48      	ldr	r3, [pc, #288]	; (8002394 <Thermopile_Task+0x198>)
 8002274:	2200      	movs	r2, #0
 8002276:	801a      	strh	r2, [r3, #0]
	thermID = 0;
 8002278:	4b47      	ldr	r3, [pc, #284]	; (8002398 <Thermopile_Task+0x19c>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

	periodicThermopileTimer_id = osTimerNew(triggerThermopileSample,
 800227e:	2300      	movs	r3, #0
 8002280:	2200      	movs	r2, #0
 8002282:	2101      	movs	r1, #1
 8002284:	4845      	ldr	r0, [pc, #276]	; (800239c <Thermopile_Task+0x1a0>)
 8002286:	f00c feff 	bl	800f088 <osTimerNew>
 800228a:	4603      	mov	r3, r0
 800228c:	4a44      	ldr	r2, [pc, #272]	; (80023a0 <Thermopile_Task+0x1a4>)
 800228e:	6013      	str	r3, [r2, #0]
			osTimerPeriodic, NULL, NULL);
	osTimerStart(periodicThermopileTimer_id, THERMOPILE_SAMPLE_PERIOD_MS);
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <Thermopile_Task+0x1a4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002298:	4618      	mov	r0, r3
 800229a:	f00c ff71 	bl	800f180 <osTimerStart>

	while (1) {

		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 800229e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a2:	2100      	movs	r1, #0
 80022a4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80022a8:	f00c fe3c 	bl	800ef24 <osThreadFlagsWait>
 80022ac:	60b8      	str	r0, [r7, #8]
				osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04c      	beq.n	8002352 <Thermopile_Task+0x156>

			osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <Thermopile_Task+0x174>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c0:	4618      	mov	r0, r3
 80022c2:	f00d f845 	bl	800f350 <osSemaphoreAcquire>

			// sample nose
			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_tip);
 80022c6:	4b33      	ldr	r3, [pc, #204]	; (8002394 <Thermopile_Task+0x198>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <Thermopile_Task+0x1a8>)
 80022d6:	4413      	add	r3, r2
 80022d8:	4927      	ldr	r1, [pc, #156]	; (8002378 <Thermopile_Task+0x17c>)
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f887 	bl	80023ee <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_bridge);
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <Thermopile_Task+0x198>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <Thermopile_Task+0x1a8>)
 80022f0:	4413      	add	r3, r2
 80022f2:	4922      	ldr	r1, [pc, #136]	; (800237c <Thermopile_Task+0x180>)
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f87a 	bl	80023ee <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
//
//			// sample temple
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_front);
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <Thermopile_Task+0x198>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <Thermopile_Task+0x1a8>)
 800230a:	4413      	add	r3, r2
 800230c:	491d      	ldr	r1, [pc, #116]	; (8002384 <Thermopile_Task+0x188>)
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f86d 	bl	80023ee <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_mid);
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <Thermopile_Task+0x198>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <Thermopile_Task+0x1a8>)
 8002324:	4413      	add	r3, r2
 8002326:	4918      	ldr	r1, [pc, #96]	; (8002388 <Thermopile_Task+0x18c>)
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f860 	bl	80023ee <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
////			queueThermopilePkt(&thermopileData[thermIdx]);
////
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_back);
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <Thermopile_Task+0x198>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <Thermopile_Task+0x1a8>)
 800233e:	4413      	add	r3, r2
 8002340:	4912      	ldr	r1, [pc, #72]	; (800238c <Thermopile_Task+0x190>)
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f853 	bl	80023ee <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			osSemaphoreRelease(messageI2C1_LockHandle);
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <Thermopile_Task+0x174>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f00d f851 	bl	800f3f4 <osSemaphoreRelease>
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0a0      	beq.n	800229e <Thermopile_Task+0xa2>
			osTimerDelete(periodicThermopileTimer_id);
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <Thermopile_Task+0x1a4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f00c ff3b 	bl	800f1dc <osTimerDelete>
			break;
 8002366:	bf00      	nop
		}
	}

}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000022c 	.word	0x2000022c
 8002374:	20003d24 	.word	0x20003d24
 8002378:	200004b0 	.word	0x200004b0
 800237c:	200004d4 	.word	0x200004d4
 8002380:	20003cd8 	.word	0x20003cd8
 8002384:	200004f8 	.word	0x200004f8
 8002388:	2000051c 	.word	0x2000051c
 800238c:	20000540 	.word	0x20000540
 8002390:	20000488 	.word	0x20000488
 8002394:	20000564 	.word	0x20000564
 8002398:	20000568 	.word	0x20000568
 800239c:	08002465 	.word	0x08002465
 80023a0:	200004ac 	.word	0x200004ac
 80023a4:	200002c0 	.word	0x200002c0

080023a8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>:

void initThermopiles(CALIPILE *tp, uint8_t address, I2C_HandleTypeDef* i2c_handle, uint8_t descriptor){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	460b      	mov	r3, r1
 80023b6:	72fb      	strb	r3, [r7, #11]
 80023b8:	4613      	mov	r3, r2
 80023ba:	72bb      	strb	r3, [r7, #10]

	uint16_t Tcounts = 0x83; // set threshold for over temperature interrupt, 0x83 == 67072 counts
 80023bc:	2383      	movs	r3, #131	; 0x83
 80023be:	82fb      	strh	r3, [r7, #22]
	uint32_t flags = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
	//	uint8_t intStatus;


	tp->setup((uint8_t) address, i2c_handle, descriptor);
 80023c4:	7abb      	ldrb	r3, [r7, #10]
 80023c6:	7af9      	ldrb	r1, [r7, #11]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f00b fede 	bl	800e18c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>

//	if(wakeupFlag==0){
//		tp->wake();
//		wakeupFlag=1;
//	}
	tp->wake();
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f00b fef6 	bl	800e1c2 <_ZN8CALIPILE4wakeEv>
	tp->readEEPROM(); // Verify protocol number and checksum and get calibration constants
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f00b ff0e 	bl	800e1f8 <_ZN8CALIPILE10readEEPROMEv>
	//  tp_outer.initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
	tp->initTempThr(Tcounts);  // choose something ~5% above TPAMB
 80023dc:	8afb      	ldrh	r3, [r7, #22]
 80023de:	4619      	mov	r1, r3
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f00c f807 	bl	800e3f4 <_ZN8CALIPILE11initTempThrEt>
	// read interrupt status register(s) to unlatch interrupt before entering main loop
//	intStatus  = tp.checkIntStatus(); //dont do if not using interrupts

}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>:
		thermID++;
		thermIdx = 0;
	}
}

void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp) {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
	data->descriptor = tp->descriptor;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	701a      	strb	r2, [r3, #0]
	data->timestamp = HAL_GetTick();
 8002400:	f000 f9d6 	bl	80027b0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	605a      	str	r2, [r3, #4]
	data->ambientRaw = tp->getTPAMB();
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	f00c f832 	bl	800e474 <_ZN8CALIPILE8getTPAMBEv>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	811a      	strh	r2, [r3, #8]
	data->objectRaw = tp->getTPOBJ();
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f00c f84b 	bl	800e4b4 <_ZN8CALIPILE8getTPOBJEv>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
	data->ambientTemp = tp->getTamb(data->ambientRaw);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	891b      	ldrh	r3, [r3, #8]
 8002428:	4619      	mov	r1, r3
 800242a:	6838      	ldr	r0, [r7, #0]
 800242c:	f00c f86a 	bl	800e504 <_ZN8CALIPILE7getTambEt>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edc3 7a04 	vstr	s15, [r3, #16]
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	edd3 7a04 	vldr	s15, [r3, #16]
 8002444:	eeb0 0a67 	vmov.f32	s0, s15
 8002448:	4611      	mov	r1, r2
 800244a:	6838      	ldr	r0, [r7, #0]
 800244c:	f00c f88c 	bl	800e568 <_ZN8CALIPILE7getTobjEmf>
 8002450:	eef0 7a40 	vmov.f32	s15, s0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <triggerThermopileSample>:

static void triggerThermopileSample(void *argument) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <triggerThermopileSample+0x20>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002474:	4618      	mov	r0, r3
 8002476:	f00c fd07 	bl	800ee88 <osThreadFlagsSet>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000228 	.word	0x20000228

08002488 <_Z41__static_initialization_and_destruction_0ii>:
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d113      	bne.n	80024c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10e      	bne.n	80024c0 <_Z41__static_initialization_and_destruction_0ii+0x38>
CALIPILE tp_nose_tip;
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024a4:	f7ff fe98 	bl	80021d8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_nose_bridge;
 80024a8:	4808      	ldr	r0, [pc, #32]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80024aa:	f7ff fe95 	bl	80021d8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_front;
 80024ae:	4808      	ldr	r0, [pc, #32]	; (80024d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80024b0:	f7ff fe92 	bl	80021d8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_mid;
 80024b4:	4807      	ldr	r0, [pc, #28]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80024b6:	f7ff fe8f 	bl	80021d8 <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_back;
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80024bc:	f7ff fe8c 	bl	80021d8 <_ZN8CALIPILEC1Ev>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200004b0 	.word	0x200004b0
 80024cc:	200004d4 	.word	0x200004d4
 80024d0:	200004f8 	.word	0x200004f8
 80024d4:	2000051c 	.word	0x2000051c
 80024d8:	20000540 	.word	0x20000540

080024dc <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
 80024e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff ffcf 	bl	8002488 <_Z41__static_initialization_and_destruction_0ii>
 80024ea:	bd80      	pop	{r7, pc}

080024ec <LL_AHB2_GRP1_EnableClock>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_APB2_GRP1_EnableClock>:
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800252c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4313      	orrs	r3, r2
 8002534:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b094      	sub	sp, #80	; 0x50
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002556:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800256a:	463b      	mov	r3, r7
 800256c:	2234      	movs	r2, #52	; 0x34
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f011 fd55 	bl	8014020 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <MX_TIM16_Init+0xec>)
 8002578:	4a31      	ldr	r2, [pc, #196]	; (8002640 <MX_TIM16_Init+0xf0>)
 800257a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <MX_TIM16_Init+0xec>)
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <MX_TIM16_Init+0xec>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <MX_TIM16_Init+0xec>)
 800258a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <MX_TIM16_Init+0xec>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <MX_TIM16_Init+0xec>)
 8002598:	2200      	movs	r2, #0
 800259a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <MX_TIM16_Init+0xec>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025a2:	4826      	ldr	r0, [pc, #152]	; (800263c <MX_TIM16_Init+0xec>)
 80025a4:	f007 f985 	bl	80098b2 <HAL_TIM_Base_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80025ae:	f7ff fa4d 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80025b2:	4822      	ldr	r0, [pc, #136]	; (800263c <MX_TIM16_Init+0xec>)
 80025b4:	f007 fa22 	bl	80099fc <HAL_TIM_PWM_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80025be:	f7ff fa45 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c2:	2360      	movs	r3, #96	; 0x60
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ca:	2300      	movs	r3, #0
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e2:	2200      	movs	r2, #0
 80025e4:	4619      	mov	r1, r3
 80025e6:	4815      	ldr	r0, [pc, #84]	; (800263c <MX_TIM16_Init+0xec>)
 80025e8:	f007 fb88 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80025f2:	f7ff fa2b 	bl	8001a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800260a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	4807      	ldr	r0, [pc, #28]	; (800263c <MX_TIM16_Init+0xec>)
 800261e:	f007 ff8b 	bl	800a538 <HAL_TIMEx_ConfigBreakDeadTime>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002628:	f7ff fa10 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <MX_TIM16_Init+0xec>)
 800262e:	f000 f825 	bl	800267c <HAL_TIM_MspPostInit>

}
 8002632:	bf00      	nop
 8002634:	3750      	adds	r7, #80	; 0x50
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20003fbc 	.word	0x20003fbc
 8002640:	40014400 	.word	0x40014400

08002644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_TIM_Base_MspInit+0x34>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10b      	bne.n	800266e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002656:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800265a:	f7ff ff60 	bl	800251e <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	210f      	movs	r1, #15
 8002662:	2019      	movs	r0, #25
 8002664:	f001 f81e 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002668:	2019      	movs	r0, #25
 800266a:	f001 f835 	bl	80036d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40014400 	.word	0x40014400

0800267c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_TIM_MspPostInit+0x54>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d113      	bne.n	80026c6 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2002      	movs	r0, #2
 80026a0:	f7ff ff24 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 80026a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80026b6:	230e      	movs	r3, #14
 80026b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4619      	mov	r1, r3
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <HAL_TIM_MspPostInit+0x58>)
 80026c2:	f001 f817 	bl	80036f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40014400 	.word	0x40014400
 80026d4:	48000400 	.word	0x48000400

080026d8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80026d8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026da:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026dc:	3304      	adds	r3, #4

080026de <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026de:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80026e2:	d3f9      	bcc.n	80026d8 <CopyDataInit>
  bx lr
 80026e4:	4770      	bx	lr

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80026e6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80026e8:	3004      	adds	r0, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80026ea:	4288      	cmp	r0, r1
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>
  bx lr
 80026ee:	4770      	bx	lr

080026f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80026f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026f4:	f7ff fd1e 	bl	8002134 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026f8:	480b      	ldr	r0, [pc, #44]	; (8002728 <LoopForever+0x8>)
 80026fa:	490c      	ldr	r1, [pc, #48]	; (800272c <LoopForever+0xc>)
 80026fc:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <LoopForever+0x10>)
 80026fe:	2300      	movs	r3, #0
 8002700:	f7ff ffed 	bl	80026de <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <LoopForever+0x14>)
 8002706:	490c      	ldr	r1, [pc, #48]	; (8002738 <LoopForever+0x18>)
 8002708:	2300      	movs	r3, #0
 800270a:	f7ff ffee 	bl	80026ea <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800270e:	480b      	ldr	r0, [pc, #44]	; (800273c <LoopForever+0x1c>)
 8002710:	490b      	ldr	r1, [pc, #44]	; (8002740 <LoopForever+0x20>)
 8002712:	2300      	movs	r3, #0
 8002714:	f7ff ffe9 	bl	80026ea <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002718:	f011 fc4e 	bl	8013fb8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800271c:	f7ff f8a0 	bl	8001860 <main>

08002720 <LoopForever>:

LoopForever:
  b LoopForever
 8002720:	e7fe      	b.n	8002720 <LoopForever>
 8002722:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002724:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002728:	20000004 	.word	0x20000004
 800272c:	200001fc 	.word	0x200001fc
 8002730:	08014558 	.word	0x08014558
  INIT_BSS _sbss, _ebss
 8002734:	200001fc 	.word	0x200001fc
 8002738:	2000581c 	.word	0x2000581c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800273c:	20030000 	.word	0x20030000
 8002740:	20030000 	.word	0x20030000

08002744 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC1_IRQHandler>
	...

08002748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_Init+0x3c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_Init+0x3c>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275e:	2003      	movs	r0, #3
 8002760:	f000 ff95 	bl	800368e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002764:	200f      	movs	r0, #15
 8002766:	f7ff fc51 	bl	800200c <HAL_InitTick>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	e001      	b.n	800277a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002776:	f7ff fc1a 	bl	8001fae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800277a:	79fb      	ldrb	r3, [r7, #7]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58004000 	.word	0x58004000

08002788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x20>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x24>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_IncTick+0x24>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000018 	.word	0x20000018
 80027ac:	20004008 	.word	0x20004008

080027b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return uwTick;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_GetTick+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20004008 	.word	0x20004008

080027c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_GetTickPrio+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000014 	.word	0x20000014

080027e0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_GetTickFreq+0x14>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000018 	.word	0x20000018

080027f8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3360      	adds	r3, #96	; 0x60
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LL_ADC_SetOffset+0x44>)
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	4313      	orrs	r3, r2
 8002890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002898:	bf00      	nop
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	03fff000 	.word	0x03fff000

080028a8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3360      	adds	r3, #96	; 0x60
 80028b6:	461a      	mov	r2, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3360      	adds	r3, #96	; 0x60
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800290a:	b480      	push	{r7}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3330      	adds	r3, #48	; 0x30
 800291a:	461a      	mov	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	4413      	add	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	211f      	movs	r1, #31
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	401a      	ands	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	f003 011f 	and.w	r1, r3, #31
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002962:	b480      	push	{r7}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3314      	adds	r3, #20
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	0e5b      	lsrs	r3, r3, #25
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	0d1b      	lsrs	r3, r3, #20
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2107      	movs	r1, #7
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	0d1b      	lsrs	r3, r3, #20
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	431a      	orrs	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0318 	and.w	r3, r3, #24
 80029da:	4908      	ldr	r1, [pc, #32]	; (80029fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80029dc:	40d9      	lsrs	r1, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	400b      	ands	r3, r1
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	431a      	orrs	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	0007ffff 	.word	0x0007ffff

08002a00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6093      	str	r3, [r2, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a38:	d101      	bne.n	8002a3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <LL_ADC_IsEnabled+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <LL_ADC_IsEnabled+0x1a>
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d101      	bne.n	8002ada <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e12e      	b.n	8002d8c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7fd ffbb 	bl	8000ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff65 	bl	8002a24 <LL_ADC_IsDeepPowerDownEnabled>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff4b 	bl	8002a00 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff80 	bl	8002a74 <LL_ADC_IsInternalRegulatorEnabled>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff64 	bl	8002a4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b84:	4b83      	ldr	r3, [pc, #524]	; (8002d94 <HAL_ADC_Init+0x284>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	4a83      	ldr	r2, [pc, #524]	; (8002d98 <HAL_ADC_Init+0x288>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	3301      	adds	r3, #1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b98:	e002      	b.n	8002ba0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f9      	bne.n	8002b9a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ff62 	bl	8002a74 <LL_ADC_IsInternalRegulatorEnabled>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10d      	bne.n	8002bd2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f043 0210 	orr.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff73 	bl	8002ac2 <LL_ADC_REG_IsConversionOngoing>
 8002bdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 80c7 	bne.w	8002d7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 80c3 	bne.w	8002d7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bfc:	f043 0202 	orr.w	r2, r3, #2
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff47 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c14:	4861      	ldr	r0, [pc, #388]	; (8002d9c <HAL_ADC_Init+0x28c>)
 8002c16:	f7ff ff41 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4619      	mov	r1, r3
 8002c26:	485e      	ldr	r0, [pc, #376]	; (8002da0 <HAL_ADC_Init+0x290>)
 8002c28:	f7ff fde6 	bl	80027f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e5b      	ldrb	r3, [r3, #25]
 8002c30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002c4c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	3b01      	subs	r3, #1
 8002c64:	045b      	lsls	r3, r3, #17
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	4b45      	ldr	r3, [pc, #276]	; (8002da4 <HAL_ADC_Init+0x294>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	69b9      	ldr	r1, [r7, #24]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff0e 	bl	8002ac2 <LL_ADC_REG_IsConversionOngoing>
 8002ca6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff1b 	bl	8002ae8 <LL_ADC_INJ_IsConversionOngoing>
 8002cb2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d13d      	bne.n	8002d36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d13a      	bne.n	8002d36 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cc4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ccc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	69b9      	ldr	r1, [r7, #24]
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d118      	bne.n	8002d26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d10:	4311      	orrs	r1, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d16:	430a      	orrs	r2, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	611a      	str	r2, [r3, #16]
 8002d24:	e007      	b.n	8002d36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10c      	bne.n	8002d58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f023 010f 	bic.w	r1, r3, #15
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
 8002d56:	e007      	b.n	8002d68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 020f 	bic.w	r2, r2, #15
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f023 0303 	bic.w	r3, r3, #3
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
 8002d78:	e007      	b.n	8002d8a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000010 	.word	0x20000010
 8002d98:	053e2d63 	.word	0x053e2d63
 8002d9c:	50040000 	.word	0x50040000
 8002da0:	50040300 	.word	0x50040300
 8002da4:	fff0c007 	.word	0xfff0c007

08002da8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0b6      	sub	sp, #216	; 0xd8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x22>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e39f      	b.n	800350a <HAL_ADC_ConfigChannel+0x762>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fe73 	bl	8002ac2 <LL_ADC_REG_IsConversionOngoing>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f040 8384 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f7ff fd8a 	bl	800290a <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fe61 	bl	8002ac2 <LL_ADC_REG_IsConversionOngoing>
 8002e00:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fe6d 	bl	8002ae8 <LL_ADC_INJ_IsConversionOngoing>
 8002e0e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 81a6 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 81a1 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f7ff fd95 	bl	8002962 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d00a      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e6a:	f7ff fcf9 	bl	8002860 <LL_ADC_SetOffset>
 8002e6e:	e17b      	b.n	8003168 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fd16 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0xf4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fd0b 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	e01e      	b.n	8002eda <HAL_ADC_ConfigChannel+0x132>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fd00 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e004      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x14a>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	e018      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x17c>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e004      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fccf 	bl	80028d4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fcb3 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x1ba>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fca8 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	0e9b      	lsrs	r3, r3, #26
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	e01e      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x1f8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fc9d 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e004      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x210>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	e018      	b.n	8002fea <HAL_ADC_ConfigChannel+0x242>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002fcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e004      	b.n	8002fea <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fc6c 	bl	80028d4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2102      	movs	r1, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fc50 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x280>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fc45 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	f003 021f 	and.w	r2, r3, #31
 8003026:	e01e      	b.n	8003066 <HAL_ADC_ConfigChannel+0x2be>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fc3a 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800304a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800304e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e004      	b.n	8003064 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800305a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <HAL_ADC_ConfigChannel+0x2d6>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	e016      	b.n	80030ac <HAL_ADC_ConfigChannel+0x304>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800309e:	2320      	movs	r3, #32
 80030a0:	e004      	b.n	80030ac <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80030a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fc0b 	bl	80028d4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2103      	movs	r1, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fbef 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x342>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2103      	movs	r1, #3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fbe4 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	0e9b      	lsrs	r3, r3, #26
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	e017      	b.n	800311a <HAL_ADC_ConfigChannel+0x372>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2103      	movs	r1, #3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fbd9 	bl	80028a8 <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003104:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800310c:	2320      	movs	r3, #32
 800310e:	e003      	b.n	8003118 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8003110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x38a>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e9b      	lsrs	r3, r3, #26
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	e011      	b.n	8003156 <HAL_ADC_ConfigChannel+0x3ae>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800314e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	429a      	cmp	r2, r3
 8003158:	d106      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	2103      	movs	r1, #3
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fbb6 	bl	80028d4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fc95 	bl	8002a9c <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 81c2 	bne.w	80034fe <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f7ff fc16 	bl	80029b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a8e      	ldr	r2, [pc, #568]	; (80033cc <HAL_ADC_ConfigChannel+0x624>)
 8003192:	4293      	cmp	r3, r2
 8003194:	f040 8130 	bne.w	80033f8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x418>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0e9b      	lsrs	r3, r3, #26
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e019      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x44c>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80031ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80031d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80031d8:	2320      	movs	r3, #32
 80031da:	e003      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80031dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	bf94      	ite	ls
 80031ee:	2301      	movls	r3, #1
 80031f0:	2300      	movhi	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d079      	beq.n	80032ec <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x46c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	3301      	adds	r3, #1
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003212:	e015      	b.n	8003240 <HAL_ADC_ConfigChannel+0x498>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003224:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x4b8>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	e017      	b.n	8003290 <HAL_ADC_ConfigChannel+0x4e8>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800326e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800327c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x50e>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	051b      	lsls	r3, r3, #20
 80032b4:	e018      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x540>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80032c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e8:	430b      	orrs	r3, r1
 80032ea:	e080      	b.n	80033ee <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x560>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	069b      	lsls	r3, r3, #26
 8003302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003306:	e015      	b.n	8003334 <HAL_ADC_ConfigChannel+0x58c>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e003      	b.n	800332c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3301      	adds	r3, #1
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x5ac>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0e9b      	lsrs	r3, r3, #26
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	e017      	b.n	8003384 <HAL_ADC_ConfigChannel+0x5dc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	61fb      	str	r3, [r7, #28]
  return result;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	ea42 0103 	orr.w	r1, r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x608>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	3b1e      	subs	r3, #30
 80033a8:	051b      	lsls	r3, r3, #20
 80033aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ae:	e01d      	b.n	80033ec <HAL_ADC_ConfigChannel+0x644>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	613b      	str	r3, [r7, #16]
  return result;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e005      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x630>
 80033cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	3b1e      	subs	r3, #30
 80033e6:	051b      	lsls	r3, r3, #20
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ec:	430b      	orrs	r3, r1
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	6892      	ldr	r2, [r2, #8]
 80033f2:	4619      	mov	r1, r3
 80033f4:	f7ff fab5 	bl	8002962 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b45      	ldr	r3, [pc, #276]	; (8003514 <HAL_ADC_ConfigChannel+0x76c>)
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d07c      	beq.n	80034fe <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003404:	4844      	ldr	r0, [pc, #272]	; (8003518 <HAL_ADC_ConfigChannel+0x770>)
 8003406:	f7ff fa1d 	bl	8002844 <LL_ADC_GetCommonPathInternalCh>
 800340a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800340e:	4843      	ldr	r0, [pc, #268]	; (800351c <HAL_ADC_ConfigChannel+0x774>)
 8003410:	f7ff fb44 	bl	8002a9c <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d15e      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <HAL_ADC_ConfigChannel+0x778>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d127      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x6cc>
 8003424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d121      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a39      	ldr	r2, [pc, #228]	; (800351c <HAL_ADC_ConfigChannel+0x774>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d161      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800343a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800343e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003442:	4619      	mov	r1, r3
 8003444:	4834      	ldr	r0, [pc, #208]	; (8003518 <HAL_ADC_ConfigChannel+0x770>)
 8003446:	f7ff f9ea 	bl	800281e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_ADC_ConfigChannel+0x77c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	4a35      	ldr	r2, [pc, #212]	; (8003528 <HAL_ADC_ConfigChannel+0x780>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003464:	e002      	b.n	800346c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003472:	e044      	b.n	80034fe <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_ADC_ConfigChannel+0x784>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x6fe>
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_ADC_ConfigChannel+0x774>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d134      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349c:	4619      	mov	r1, r3
 800349e:	481e      	ldr	r0, [pc, #120]	; (8003518 <HAL_ADC_ConfigChannel+0x770>)
 80034a0:	f7ff f9bd 	bl	800281e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a4:	e02b      	b.n	80034fe <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a21      	ldr	r2, [pc, #132]	; (8003530 <HAL_ADC_ConfigChannel+0x788>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d126      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x756>
 80034b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d120      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_ADC_ConfigChannel+0x774>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11b      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ce:	4619      	mov	r1, r3
 80034d0:	4811      	ldr	r0, [pc, #68]	; (8003518 <HAL_ADC_ConfigChannel+0x770>)
 80034d2:	f7ff f9a4 	bl	800281e <LL_ADC_SetCommonPathInternalCh>
 80034d6:	e012      	b.n	80034fe <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034ea:	e008      	b.n	80034fe <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003506:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800350a:	4618      	mov	r0, r3
 800350c:	37d8      	adds	r7, #216	; 0xd8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	80080000 	.word	0x80080000
 8003518:	50040300 	.word	0x50040300
 800351c:	50040000 	.word	0x50040000
 8003520:	c7520000 	.word	0xc7520000
 8003524:	20000010 	.word	0x20000010
 8003528:	053e2d63 	.word	0x053e2d63
 800352c:	cb840000 	.word	0xcb840000
 8003530:	80000001 	.word	0x80000001

08003534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003550:	4013      	ands	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800355c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <__NVIC_SetPriorityGrouping+0x44>)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	60d3      	str	r3, [r2, #12]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <__NVIC_GetPriorityGrouping+0x18>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 0307 	and.w	r3, r3, #7
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db0b      	blt.n	80035c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	f003 021f 	and.w	r2, r3, #31
 80035b0:	4907      	ldr	r1, [pc, #28]	; (80035d0 <__NVIC_EnableIRQ+0x38>)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	2001      	movs	r0, #1
 80035ba:	fa00 f202 	lsl.w	r2, r0, r2
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff4c 	bl	8003534 <__NVIC_SetPriorityGrouping>
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036b2:	f7ff ff63 	bl	800357c <__NVIC_GetPriorityGrouping>
 80036b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	6978      	ldr	r0, [r7, #20]
 80036be:	f7ff ffb3 	bl	8003628 <NVIC_EncodePriority>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ff82 	bl	80035d4 <__NVIC_SetPriority>
}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff56 	bl	8003598 <__NVIC_EnableIRQ>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003702:	e14c      	b.n	800399e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 813e 	beq.w	8003998 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d005      	beq.n	8003734 <HAL_GPIO_Init+0x40>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d130      	bne.n	8003796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800376a:	2201      	movs	r2, #1
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0201 	and.w	r2, r3, #1
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d017      	beq.n	80037d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	2203      	movs	r2, #3
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d123      	bne.n	8003826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	08da      	lsrs	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3208      	adds	r2, #8
 8003820:	6939      	ldr	r1, [r7, #16]
 8003822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8098 	beq.w	8003998 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003868:	4a54      	ldr	r2, [pc, #336]	; (80039bc <HAL_GPIO_Init+0x2c8>)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003892:	d019      	beq.n	80038c8 <HAL_GPIO_Init+0x1d4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <HAL_GPIO_Init+0x2cc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_GPIO_Init+0x1d0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a49      	ldr	r2, [pc, #292]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x1cc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_GPIO_Init+0x2d4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x1c8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a47      	ldr	r2, [pc, #284]	; (80039cc <HAL_GPIO_Init+0x2d8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x1c4>
 80038b4:	2304      	movs	r3, #4
 80038b6:	e008      	b.n	80038ca <HAL_GPIO_Init+0x1d6>
 80038b8:	2307      	movs	r3, #7
 80038ba:	e006      	b.n	80038ca <HAL_GPIO_Init+0x1d6>
 80038bc:	2303      	movs	r3, #3
 80038be:	e004      	b.n	80038ca <HAL_GPIO_Init+0x1d6>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e002      	b.n	80038ca <HAL_GPIO_Init+0x1d6>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_GPIO_Init+0x1d6>
 80038c8:	2300      	movs	r3, #0
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	f002 0203 	and.w	r2, r2, #3
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	4093      	lsls	r3, r2
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038da:	4938      	ldr	r1, [pc, #224]	; (80039bc <HAL_GPIO_Init+0x2c8>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800390c:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003912:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003936:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 800396c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f47f aeab 	bne.w	8003704 <HAL_GPIO_Init+0x10>
  }
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40010000 	.word	0x40010000
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48000c00 	.word	0x48000c00
 80039cc:	48001000 	.word	0x48001000
 80039d0:	58000800 	.word	0x58000800

080039d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
 80039e0:	4613      	mov	r3, r2
 80039e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039e4:	787b      	ldrb	r3, [r7, #1]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4906      	ldr	r1, [pc, #24]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <HAL_HSEM_IRQHandler+0x30>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f807 	bl	8003a38 <HAL_HSEM_FreeCallback>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	58001500 	.word	0x58001500

08003a38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e081      	b.n	8003b62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fb4c 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	e006      	b.n	8003ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d104      	bne.n	8003ae6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f040 80da 	bne.w	8003d42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x30>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0d3      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fe04 	bl	80027b0 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2319      	movs	r3, #25
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fbe0 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0be      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	893a      	ldrh	r2, [r7, #8]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2bff      	cmp	r3, #255	; 0xff
 8003bf6:	d90e      	bls.n	8003c16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	22ff      	movs	r2, #255	; 0xff
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fd20 	bl	8004654 <I2C_TransferConfig>
 8003c14:	e06c      	b.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	8979      	ldrh	r1, [r7, #10]
 8003c28:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fd0f 	bl	8004654 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c36:	e05b      	b.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	6a39      	ldr	r1, [r7, #32]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fbdd 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e07b      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d034      	beq.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d130      	bne.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fb6f 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04d      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2bff      	cmp	r3, #255	; 0xff
 8003cb0:	d90e      	bls.n	8003cd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fcc3 	bl	8004654 <I2C_TransferConfig>
 8003cce:	e00f      	b.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fcb2 	bl	8004654 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d19e      	bne.n	8003c38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fbbc 	bl	800447c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01a      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2220      	movs	r2, #32
 8003d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d22:	400b      	ands	r3, r1
 8003d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	80002000 	.word	0x80002000
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	f040 80f9 	bne.w	8003f6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x34>
 8003d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0ed      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2C_Mem_Write+0x4e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0e6      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003daa:	f7fe fd01 	bl	80027b0 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2319      	movs	r3, #25
 8003db6:	2201      	movs	r2, #1
 8003db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fadd 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d1      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2221      	movs	r2, #33	; 0x21
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df4:	88f8      	ldrh	r0, [r7, #6]
 8003df6:	893a      	ldrh	r2, [r7, #8]
 8003df8:	8979      	ldrh	r1, [r7, #10]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4603      	mov	r3, r0
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f9ed 	bl	80041e4 <I2C_RequestMemoryWrite>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0a9      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2bff      	cmp	r3, #255	; 0xff
 8003e24:	d90e      	bls.n	8003e44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fc09 	bl	8004654 <I2C_TransferConfig>
 8003e42:	e00f      	b.n	8003e64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	8979      	ldrh	r1, [r7, #10]
 8003e56:	2300      	movs	r3, #0
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fbf8 	bl	8004654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fac7 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e07b      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d034      	beq.n	8003f1c <HAL_I2C_Mem_Write+0x1c8>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d130      	bne.n	8003f1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fa59 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e04d      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d90e      	bls.n	8003efc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	8979      	ldrh	r1, [r7, #10]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fbad 	bl	8004654 <I2C_TransferConfig>
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fb9c 	bl	8004654 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d19e      	bne.n	8003e64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 faa6 	bl	800447c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e01a      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6859      	ldr	r1, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_I2C_Mem_Write+0x224>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	fe00e800 	.word	0xfe00e800

08003f7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	813b      	strh	r3, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	f040 80fd 	bne.w	800419e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2C_Mem_Read+0x34>
 8003faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0f1      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_Mem_Read+0x4e>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e0ea      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fe fbed 	bl	80027b0 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2319      	movs	r3, #25
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f9c9 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0d5      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2222      	movs	r2, #34	; 0x22
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800401c:	88f8      	ldrh	r0, [r7, #6]
 800401e:	893a      	ldrh	r2, [r7, #8]
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	4603      	mov	r3, r0
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f92d 	bl	800428c <I2C_RequestMemoryRead>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0ad      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2bff      	cmp	r3, #255	; 0xff
 800404c:	d90e      	bls.n	800406c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	22ff      	movs	r2, #255	; 0xff
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	b2da      	uxtb	r2, r3
 800405a:	8979      	ldrh	r1, [r7, #10]
 800405c:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <HAL_I2C_Mem_Read+0x22c>)
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 faf5 	bl	8004654 <I2C_TransferConfig>
 800406a:	e00f      	b.n	800408c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	b2da      	uxtb	r2, r3
 800407c:	8979      	ldrh	r1, [r7, #10]
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_I2C_Mem_Read+0x22c>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fae4 	bl	8004654 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	2200      	movs	r2, #0
 8004094:	2104      	movs	r1, #4
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f970 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07c      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d034      	beq.n	800414c <HAL_I2C_Mem_Read+0x1d0>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d130      	bne.n	800414c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2200      	movs	r2, #0
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f941 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04d      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2bff      	cmp	r3, #255	; 0xff
 800410c:	d90e      	bls.n	800412c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	b2da      	uxtb	r2, r3
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fa95 	bl	8004654 <I2C_TransferConfig>
 800412a:	e00f      	b.n	800414c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	b2da      	uxtb	r2, r3
 800413c:	8979      	ldrh	r1, [r7, #10]
 800413e:	2300      	movs	r3, #0
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fa84 	bl	8004654 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d19a      	bne.n	800408c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f98e 	bl	800447c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e01a      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2220      	movs	r2, #32
 8004170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_I2C_Mem_Read+0x230>)
 800417e:	400b      	ands	r3, r1
 8004180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	80002400 	.word	0x80002400
 80041ac:	fe00e800 	.word	0xfe00e800

080041b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
  }
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	4b20      	ldr	r3, [pc, #128]	; (8004288 <I2C_RequestMemoryWrite+0xa4>)
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fa21 	bl	8004654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	69b9      	ldr	r1, [r7, #24]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8f0 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e02c      	b.n	8004280 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	629a      	str	r2, [r3, #40]	; 0x28
 8004236:	e015      	b.n	8004264 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004238:	893b      	ldrh	r3, [r7, #8]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	b29b      	uxth	r3, r3
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8d6 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e012      	b.n	8004280 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2200      	movs	r2, #0
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f884 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	80002000 	.word	0x80002000

0800428c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	817b      	strh	r3, [r7, #10]
 800429e:	460b      	mov	r3, r1
 80042a0:	813b      	strh	r3, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	8979      	ldrh	r1, [r7, #10]
 80042ac:	4b20      	ldr	r3, [pc, #128]	; (8004330 <I2C_RequestMemoryRead+0xa4>)
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f9ce 	bl	8004654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	69b9      	ldr	r1, [r7, #24]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f89d 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e02c      	b.n	8004326 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d105      	bne.n	80042de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042d2:	893b      	ldrh	r3, [r7, #8]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
 80042dc:	e015      	b.n	800430a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f883 	bl	80043fc <I2C_WaitOnTXISFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e012      	b.n	8004326 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004300:	893b      	ldrh	r3, [r7, #8]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2200      	movs	r2, #0
 8004312:	2140      	movs	r1, #64	; 0x40
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f831 	bl	800437c <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	80002000 	.word	0x80002000

08004334 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d103      	bne.n	8004352 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d007      	beq.n	8004370 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	619a      	str	r2, [r3, #24]
  }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438c:	e022      	b.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004394:	d01e      	beq.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fe fa0b 	bl	80027b0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d113      	bne.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00f      	b.n	80043f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d0cd      	beq.n	800438e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004408:	e02c      	b.n	8004464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f870 	bl	80044f4 <I2C_IsErrorOccurred>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02a      	b.n	8004474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004424:	d01e      	beq.n	8004464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe f9c3 	bl	80027b0 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d113      	bne.n	8004464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e007      	b.n	8004474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d1cb      	bne.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004488:	e028      	b.n	80044dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f830 	bl	80044f4 <I2C_IsErrorOccurred>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e026      	b.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fe f987 	bl	80027b0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d113      	bne.n	80044dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e007      	b.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d1cf      	bne.n	800448a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d040      	beq.n	800459c <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004528:	d01d      	beq.n	8004566 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004538:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800453a:	e014      	b.n	8004566 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004542:	d010      	beq.n	8004566 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004544:	f7fe f934 	bl	80027b0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <I2C_IsErrorOccurred+0x66>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f043 0320 	orr.w	r3, r3, #32
 8004560:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b20      	cmp	r3, #32
 8004572:	d002      	beq.n	800457a <I2C_IsErrorOccurred+0x86>
 8004574:	7ffb      	ldrb	r3, [r7, #31]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0e0      	beq.n	800453c <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2220      	movs	r2, #32
 8004586:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2210      	movs	r2, #16
 800458e:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f043 0308 	orr.w	r3, r3, #8
 80045d4:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f043 0302 	orr.w	r3, r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8004604:	7ffb      	ldrb	r3, [r7, #31]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01c      	beq.n	8004644 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff fe92 	bl	8004334 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <I2C_IsErrorOccurred+0x15c>)
 800461c:	400b      	ands	r3, r1
 800461e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	431a      	orrs	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004644:	7ffb      	ldrb	r3, [r7, #31]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	fe00e800 	.word	0xfe00e800

08004654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	4613      	mov	r3, r2
 8004664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004666:	897b      	ldrh	r3, [r7, #10]
 8004668:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800466c:	7a7b      	ldrb	r3, [r7, #9]
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004674:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	4313      	orrs	r3, r2
 800467e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004682:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	0d5b      	lsrs	r3, r3, #21
 800468e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <I2C_TransferConfig+0x60>)
 8004694:	430b      	orrs	r3, r1
 8004696:	43db      	mvns	r3, r3
 8004698:	ea02 0103 	and.w	r1, r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	03ff63ff 	.word	0x03ff63ff

080046b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d138      	bne.n	8004740 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046d8:	2302      	movs	r3, #2
 80046da:	e032      	b.n	8004742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2224      	movs	r2, #36	; 0x24
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800470a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b20      	cmp	r3, #32
 8004762:	d139      	bne.n	80047d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800476e:	2302      	movs	r3, #2
 8004770:	e033      	b.n	80047da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2224      	movs	r2, #36	; 0x24
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d01e      	beq.n	8004838 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_IPCC_Init+0x60>)
 80047fc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fd4a 	bl	80012a4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004810:	68b8      	ldr	r0, [r7, #8]
 8004812:	f000 f85b 	bl	80048cc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f82c 	bl	8004880 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004836:	e001      	b.n	800483c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	58000c00 	.word	0x58000c00

0800484c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	4613      	mov	r3, r2
 8004872:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e00f      	b.n	80048ae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	4a0b      	ldr	r2, [pc, #44]	; (80048c4 <IPCC_SetDefaultCallbacks+0x44>)
 8004898:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3306      	adds	r3, #6
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <IPCC_SetDefaultCallbacks+0x48>)
 80048a6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d9ec      	bls.n	800488e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	0800484d 	.word	0x0800484d
 80048c8:	08004867 	.word	0x08004867

080048cc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80048e0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	223f      	movs	r2, #63	; 0x3f
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	b08b      	sub	sp, #44	; 0x2c
 80048f8:	af06      	add	r7, sp, #24
 80048fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0d7      	b.n	8004ab6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f00e fbe8 	bl	80130f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2203      	movs	r2, #3
 8004924:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f005 fec8 	bl	800a6c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e04c      	b.n	80049d2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	3301      	adds	r3, #1
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	440b      	add	r3, r1
 800495e:	7bfa      	ldrb	r2, [r7, #15]
 8004960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	b298      	uxth	r0, r3
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	3336      	adds	r3, #54	; 0x36
 8004976:	4602      	mov	r2, r0
 8004978:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	3303      	adds	r3, #3
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	440b      	add	r3, r1
 800499e:	3338      	adds	r3, #56	; 0x38
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	440b      	add	r3, r1
 80049b2:	333c      	adds	r3, #60	; 0x3c
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	3340      	adds	r3, #64	; 0x40
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	3301      	adds	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d3ad      	bcc.n	8004938 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e044      	b.n	8004a6c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	440b      	add	r3, r1
 80049f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	7bfa      	ldrb	r2, [r7, #15]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d3b5      	bcc.n	80049e2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	687e      	ldr	r6, [r7, #4]
 8004a7e:	466d      	mov	r5, sp
 8004a80:	f106 0410 	add.w	r4, r6, #16
 8004a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	1d33      	adds	r3, r6, #4
 8004a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a90:	6838      	ldr	r0, [r7, #0]
 8004a92:	f005 fe31 	bl	800a6f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d102      	bne.n	8004ab4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f001 fc29 	bl	8006306 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004abe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_PCD_Start+0x16>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e012      	b.n	8004afa <HAL_PCD_Start+0x3c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f005 fdd7 	bl	800a694 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f007 fd8c 	bl	800c608 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f007 fd91 	bl	800c636 <USB_ReadInterrupts>
 8004b14:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fb26 	bl	8005172 <PCD_EP_ISR_Handler>

    return;
 8004b26:	e110      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d013      	beq.n	8004b5a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b44:	b292      	uxth	r2, r2
 8004b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f00e fb73 	bl	8013236 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b50:	2100      	movs	r1, #0
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8fc 	bl	8004d50 <HAL_PCD_SetAddress>

    return;
 8004b58:	e0f7      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00c      	beq.n	8004b7e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b76:	b292      	uxth	r2, r2
 8004b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b7c:	e0e5      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00c      	beq.n	8004ba2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ba0:	e0d3      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d034      	beq.n	8004c16 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0204 	bic.w	r2, r2, #4
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0208 	bic.w	r2, r2, #8
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d107      	bne.n	8004bf6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f00e fd17 	bl	8013624 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f00e fb56 	bl	80132a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004c14:	e099      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d027      	beq.n	8004c70 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0208 	orr.w	r2, r2, #8
 8004c32:	b292      	uxth	r2, r2
 8004c34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0204 	orr.w	r2, r2, #4
 8004c62:	b292      	uxth	r2, r2
 8004c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f00e fb03 	bl	8013274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c6e:	e06c      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d040      	beq.n	8004cfc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d12b      	bne.n	8004cf4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0204 	orr.w	r2, r2, #4
 8004cae:	b292      	uxth	r2, r2
 8004cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0208 	orr.w	r2, r2, #8
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cea:	2101      	movs	r1, #1
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f00e fc99 	bl	8013624 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cf2:	e02a      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f00e fabd 	bl	8013274 <HAL_PCD_SuspendCallback>
    return;
 8004cfa:	e026      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00f      	beq.n	8004d26 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d18:	b292      	uxth	r2, r2
 8004d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f00e fa7b 	bl	801321a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d24:	e011      	b.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d42:	b292      	uxth	r2, r2
 8004d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d48:	bf00      	nop
  }
}
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_SetAddress+0x1a>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e013      	b.n	8004d92 <HAL_PCD_SetAddress+0x42>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f007 fc2c 	bl	800c5e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	70fb      	strb	r3, [r7, #3]
 8004dac:	460b      	mov	r3, r1
 8004dae:	803b      	strh	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0e      	bge.n	8004dde <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	705a      	strb	r2, [r3, #1]
 8004ddc:	e00e      	b.n	8004dfc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 0207 	and.w	r2, r3, #7
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e08:	883a      	ldrh	r2, [r7, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	78ba      	ldrb	r2, [r7, #2]
 8004e12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e26:	78bb      	ldrb	r3, [r7, #2]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d102      	bne.n	8004e32 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_PCD_EP_Open+0xa6>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e00e      	b.n	8004e5e <HAL_PCD_EP_Open+0xc4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f005 fc74 	bl	800a73c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da0e      	bge.n	8004e98 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	705a      	strb	r2, [r3, #1]
 8004e96:	e00e      	b.n	8004eb6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	f003 0207 	and.w	r2, r3, #7
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_PCD_EP_Close+0x6a>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e00e      	b.n	8004eee <HAL_PCD_EP_Close+0x88>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68f9      	ldr	r1, [r7, #12]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f005 ffc0 	bl	800ae64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	460b      	mov	r3, r1
 8004f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	7afb      	ldrb	r3, [r7, #11]
 8004f08:	f003 0207 	and.w	r2, r3, #7
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f42:	7afb      	ldrb	r3, [r7, #11]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6979      	ldr	r1, [r7, #20]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f006 f973 	bl	800b23e <USB_EPStartXfer>
 8004f58:	e005      	b.n	8004f66 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f006 f96c 	bl	800b23e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	460b      	mov	r3, r1
 8004fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb0:	7afb      	ldrb	r3, [r7, #11]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fec:	7afb      	ldrb	r3, [r7, #11]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6979      	ldr	r1, [r7, #20]
 8005008:	4618      	mov	r0, r3
 800500a:	f006 f918 	bl	800b23e <USB_EPStartXfer>
 800500e:	e005      	b.n	800501c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6979      	ldr	r1, [r7, #20]
 8005016:	4618      	mov	r0, r3
 8005018:	f006 f911 	bl	800b23e <USB_EPStartXfer>
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	f003 0207 	and.w	r2, r3, #7
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	d901      	bls.n	8005044 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e03e      	b.n	80050c2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da0e      	bge.n	800506a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4413      	add	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	705a      	strb	r2, [r3, #1]
 8005068:	e00c      	b.n	8005084 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_PCD_EP_SetStall+0x7e>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e00e      	b.n	80050c2 <HAL_PCD_EP_SetStall+0x9c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68f9      	ldr	r1, [r7, #12]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f007 f995 	bl	800c3e2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d901      	bls.n	80050e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e040      	b.n	800516a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da0e      	bge.n	800510e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	705a      	strb	r2, [r3, #1]
 800510c:	e00e      	b.n	800512c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	f003 0207 	and.w	r2, r3, #7
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_PCD_EP_ClrStall+0x82>
 8005148:	2302      	movs	r3, #2
 800514a:	e00e      	b.n	800516a <HAL_PCD_EP_ClrStall+0xa0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68f9      	ldr	r1, [r7, #12]
 800515a:	4618      	mov	r0, r3
 800515c:	f007 f992 	bl	800c484 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b096      	sub	sp, #88	; 0x58
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800517a:	e39c      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005184:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005188:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005196:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800519a:	2b00      	cmp	r3, #0
 800519c:	f040 815e 	bne.w	800545c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d150      	bne.n	800524e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	81fb      	strh	r3, [r7, #14]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3328      	adds	r3, #40	; 0x28
 80051d4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	4413      	add	r3, r2
 80051f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	441a      	add	r2, r3
 8005208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800520c:	2100      	movs	r1, #0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f00d ffe9 	bl	80131e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 834a 	beq.w	80058b6 <PCD_EP_ISR_Handler+0x744>
 8005222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f040 8345 	bne.w	80058b6 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005238:	b2da      	uxtb	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b292      	uxth	r2, r2
 8005240:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800524c:	e333      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005254:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005260:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005268:	2b00      	cmp	r3, #0
 800526a:	d032      	beq.n	80052d2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	4413      	add	r3, r2
 8005286:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800529e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f007 fa17 	bl	800c6da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052b8:	4013      	ands	r3, r2
 80052ba:	823b      	strh	r3, [r7, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	8a3a      	ldrh	r2, [r7, #16]
 80052c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052c6:	b292      	uxth	r2, r2
 80052c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f00d ff5e 	bl	801318c <HAL_PCD_SetupStageCallback>
 80052d0:	e2f1      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052d2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f280 82ed 	bge.w	80058b6 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052e8:	4013      	ands	r3, r2
 80052ea:	83fb      	strh	r3, [r7, #30]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	8bfa      	ldrh	r2, [r7, #30]
 80052f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f6:	b292      	uxth	r2, r2
 80052f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	4413      	add	r3, r2
 8005314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800531e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005320:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d019      	beq.n	800535e <PCD_EP_ISR_Handler+0x1ec>
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	6959      	ldr	r1, [r3, #20]
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800533e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005340:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005342:	b29b      	uxth	r3, r3
 8005344:	f007 f9c9 	bl	800c6da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	441a      	add	r2, r3
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005356:	2100      	movs	r1, #0
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f00d ff29 	bl	80131b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 82a3 	bne.w	80058b6 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537e:	b29b      	uxth	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	4413      	add	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b3e      	cmp	r3, #62	; 0x3e
 8005396:	d918      	bls.n	80053ca <PCD_EP_ISR_Handler+0x258>
 8005398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	647b      	str	r3, [r7, #68]	; 0x44
 80053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <PCD_EP_ISR_Handler+0x240>
 80053ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ae:	3b01      	subs	r3, #1
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	029b      	lsls	r3, r3, #10
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e029      	b.n	800541e <PCD_EP_ISR_Handler+0x2ac>
 80053ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d112      	bne.n	80053f8 <PCD_EP_ISR_Handler+0x286>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053dc:	b29a      	uxth	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	e012      	b.n	800541e <PCD_EP_ISR_Handler+0x2ac>
 80053f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	085b      	lsrs	r3, r3, #1
 80053fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <PCD_EP_ISR_Handler+0x2a0>
 800540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540e:	3301      	adds	r3, #1
 8005410:	647b      	str	r3, [r7, #68]	; 0x44
 8005412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005414:	b29b      	uxth	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	b29a      	uxth	r2, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	827b      	strh	r3, [r7, #18]
 8005430:	8a7b      	ldrh	r3, [r7, #18]
 8005432:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005436:	827b      	strh	r3, [r7, #18]
 8005438:	8a7b      	ldrh	r3, [r7, #18]
 800543a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800543e:	827b      	strh	r3, [r7, #18]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	8a7b      	ldrh	r3, [r7, #18]
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
 800545a:	e22c      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005470:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005474:	2b00      	cmp	r3, #0
 8005476:	f280 80f6 	bge.w	8005666 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29a      	uxth	r2, r3
 800548c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005490:	4013      	ands	r3, r2
 8005492:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80054a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ac:	b292      	uxth	r2, r2
 80054ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054b0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	7b1b      	ldrb	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d123      	bne.n	8005516 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4413      	add	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	4413      	add	r3, r2
 80054e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80054f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 808e 	beq.w	800561c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	6959      	ldr	r1, [r3, #20]
 8005508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550a:	88da      	ldrh	r2, [r3, #6]
 800550c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005510:	f007 f8e3 	bl	800c6da <USB_ReadPMA>
 8005514:	e082      	b.n	800561c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	78db      	ldrb	r3, [r3, #3]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d10a      	bne.n	8005534 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800551e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005522:	461a      	mov	r2, r3
 8005524:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9d3 	bl	80058d2 <HAL_PCD_EP_DB_Receive>
 800552c:	4603      	mov	r3, r0
 800552e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005532:	e073      	b.n	800561c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d022      	beq.n	80055d8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	4413      	add	r3, r2
 80055ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80055ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d02c      	beq.n	800561c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c8:	6959      	ldr	r1, [r3, #20]
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	891a      	ldrh	r2, [r3, #8]
 80055ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055d2:	f007 f882 	bl	800c6da <USB_ReadPMA>
 80055d6:	e021      	b.n	800561c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005600:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560e:	6959      	ldr	r1, [r3, #20]
 8005610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005612:	895a      	ldrh	r2, [r3, #10]
 8005614:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005618:	f007 f85f 	bl	800c6da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005624:	441a      	add	r2, r3
 8005626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005628:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005632:	441a      	add	r2, r3
 8005634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005636:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <PCD_EP_ISR_Handler+0x4da>
 8005640:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	429a      	cmp	r2, r3
 800564a:	d206      	bcs.n	800565a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800564c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f00d fdac 	bl	80131b0 <HAL_PCD_DataOutStageCallback>
 8005658:	e005      	b.n	8005666 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005660:	4618      	mov	r0, r3
 8005662:	f005 fdec 	bl	800b23e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005666:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8121 	beq.w	80058b6 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8005674:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80056c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	f000 80a2 	beq.w	8005812 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80056ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d0:	2200      	movs	r2, #0
 80056d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80056d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d6:	7b1b      	ldrb	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8093 	beq.w	8005804 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d046      	beq.n	8005778 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d126      	bne.n	8005740 <PCD_EP_ISR_Handler+0x5ce>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	4413      	add	r3, r2
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	00da      	lsls	r2, r3, #3
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	4413      	add	r3, r2
 8005714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005724:	b29a      	uxth	r2, r3
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005738:	b29a      	uxth	r2, r3
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e061      	b.n	8005804 <PCD_EP_ISR_Handler+0x692>
 8005740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d15d      	bne.n	8005804 <PCD_EP_ISR_Handler+0x692>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005756:	b29b      	uxth	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	4413      	add	r3, r2
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	00da      	lsls	r2, r3, #3
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	4413      	add	r3, r2
 800576a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2200      	movs	r2, #0
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	e045      	b.n	8005804 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800577e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d126      	bne.n	80057d4 <PCD_EP_ISR_Handler+0x662>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	4413      	add	r3, r2
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	00da      	lsls	r2, r3, #3
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	4413      	add	r3, r2
 80057a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e017      	b.n	8005804 <PCD_EP_ISR_Handler+0x692>
 80057d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d113      	bne.n	8005804 <PCD_EP_ISR_Handler+0x692>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ea:	4413      	add	r3, r2
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	00da      	lsls	r2, r3, #3
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2200      	movs	r2, #0
 8005802:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f00d fceb 	bl	80131e6 <HAL_PCD_DataInStageCallback>
 8005810:	e051      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005812:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d144      	bne.n	80058a8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	4413      	add	r3, r2
 8005838:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005842:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800584e:	429a      	cmp	r2, r3
 8005850:	d907      	bls.n	8005862 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8005852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	619a      	str	r2, [r3, #24]
 8005860:	e002      	b.n	8005868 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	2200      	movs	r2, #0
 8005866:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f00d fcb5 	bl	80131e6 <HAL_PCD_DataInStageCallback>
 800587c:	e01b      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005886:	441a      	add	r2, r3
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005894:	441a      	add	r2, r3
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058a0:	4618      	mov	r0, r3
 80058a2:	f005 fccc 	bl	800b23e <USB_EPStartXfer>
 80058a6:	e006      	b.n	80058b6 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80058a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80058ac:	461a      	mov	r2, r3
 80058ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f917 	bl	8005ae4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058be:	b29b      	uxth	r3, r3
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f6ff ac5a 	blt.w	800517c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3758      	adds	r7, #88	; 0x58
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b088      	sub	sp, #32
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d07c      	beq.n	80059e4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	4413      	add	r3, r2
 8005904:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	8b7b      	ldrh	r3, [r7, #26]
 8005916:	429a      	cmp	r2, r3
 8005918:	d306      	bcc.n	8005928 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	8b7b      	ldrh	r3, [r7, #26]
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	619a      	str	r2, [r3, #24]
 8005926:	e002      	b.n	800592e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2200      	movs	r2, #0
 800592c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d123      	bne.n	800597e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005950:	833b      	strh	r3, [r7, #24]
 8005952:	8b3b      	ldrh	r3, [r7, #24]
 8005954:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005958:	833b      	strh	r3, [r7, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	441a      	add	r2, r3
 8005968:	8b3b      	ldrh	r3, [r7, #24]
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01f      	beq.n	80059c8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	82fb      	strh	r3, [r7, #22]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	8afb      	ldrh	r3, [r7, #22]
 80059b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059c8:	8b7b      	ldrh	r3, [r7, #26]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8085 	beq.w	8005ada <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6959      	ldr	r1, [r3, #20]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	891a      	ldrh	r2, [r3, #8]
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	f006 fe7c 	bl	800c6da <USB_ReadPMA>
 80059e2:	e07a      	b.n	8005ada <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	8b7b      	ldrh	r3, [r7, #26]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d306      	bcc.n	8005a22 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	8b7b      	ldrh	r3, [r7, #26]
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	619a      	str	r2, [r3, #24]
 8005a20:	e002      	b.n	8005a28 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d123      	bne.n	8005a78 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	83fb      	strh	r3, [r7, #30]
 8005a4c:	8bfb      	ldrh	r3, [r7, #30]
 8005a4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a52:	83fb      	strh	r3, [r7, #30]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	441a      	add	r2, r3
 8005a62:	8bfb      	ldrh	r3, [r7, #30]
 8005a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11f      	bne.n	8005ac2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	83bb      	strh	r3, [r7, #28]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	8bbb      	ldrh	r3, [r7, #28]
 8005aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ac2:	8b7b      	ldrh	r3, [r7, #26]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6959      	ldr	r1, [r3, #20]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	895a      	ldrh	r2, [r3, #10]
 8005ad4:	8b7b      	ldrh	r3, [r7, #26]
 8005ad6:	f006 fe00 	bl	800c6da <USB_ReadPMA>
    }
  }

  return count;
 8005ada:	8b7b      	ldrh	r3, [r7, #26]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b0a2      	sub	sp, #136	; 0x88
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 81c5 	beq.w	8005e88 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d907      	bls.n	8005b42 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	619a      	str	r2, [r3, #24]
 8005b40:	e002      	b.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 80b9 	bne.w	8005cc4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d126      	bne.n	8005ba8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	4413      	add	r3, r2
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	00da      	lsls	r2, r3, #3
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e01a      	b.n	8005bde <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d116      	bne.n	8005bde <HAL_PCD_EP_DB_Transmit+0xfa>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	4413      	add	r3, r2
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	00da      	lsls	r2, r3, #3
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	2200      	movs	r2, #0
 8005bdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d126      	bne.n	8005c3a <HAL_PCD_EP_DB_Transmit+0x156>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4413      	add	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	00da      	lsls	r2, r3, #3
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e017      	b.n	8005c6a <HAL_PCD_EP_DB_Transmit+0x186>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d113      	bne.n	8005c6a <HAL_PCD_EP_DB_Transmit+0x186>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	4413      	add	r3, r2
 8005c52:	623b      	str	r3, [r7, #32]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	00da      	lsls	r2, r3, #3
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2200      	movs	r2, #0
 8005c68:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f00d fab8 	bl	80131e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 82d2 	beq.w	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	827b      	strh	r3, [r7, #18]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	8a7b      	ldrh	r3, [r7, #18]
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
 8005cc2:	e2b0      	b.n	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cc4:	88fb      	ldrh	r3, [r7, #6]
 8005cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d021      	beq.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	f040 8284 	bne.w	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d26:	441a      	add	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d34:	441a      	add	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6a1a      	ldr	r2, [r3, #32]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d309      	bcc.n	8005d5a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	621a      	str	r2, [r3, #32]
 8005d58:	e015      	b.n	8005d86 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d107      	bne.n	8005d72 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005d62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d70:	e009      	b.n	8005d86 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d155      	bne.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x356>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	4413      	add	r3, r2
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	00da      	lsls	r2, r3, #3
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	4413      	add	r3, r2
 8005db0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dba:	d916      	bls.n	8005dea <HAL_PCD_EP_DB_Transmit+0x306>
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	e043      	b.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d112      	bne.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x332>
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e02d      	b.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x348>
 8005e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e28:	3301      	adds	r3, #1
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e01b      	b.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d117      	bne.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	643b      	str	r3, [r7, #64]	; 0x40
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e56:	4413      	add	r3, r2
 8005e58:	643b      	str	r3, [r7, #64]	; 0x40
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	891a      	ldrh	r2, [r3, #8]
 8005e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f006 fbe8 	bl	800c656 <USB_WritePMA>
 8005e86:	e1ce      	b.n	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d307      	bcc.n	8005ecc <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ec4:	1ad2      	subs	r2, r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	619a      	str	r2, [r3, #24]
 8005eca:	e002      	b.n	8005ed2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 80c4 	bne.w	8006064 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d126      	bne.n	8005f32 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ef8:	4413      	add	r3, r2
 8005efa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	00da      	lsls	r2, r3, #3
 8005f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8005f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e01a      	b.n	8005f68 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d116      	bne.n	8005f68 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f4e:	4413      	add	r3, r2
 8005f50:	673b      	str	r3, [r7, #112]	; 0x70
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	00da      	lsls	r2, r3, #3
 8005f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	2200      	movs	r2, #0
 8005f66:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d12f      	bne.n	8005fd6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f8e:	4413      	add	r3, r2
 8005f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00da      	lsls	r2, r3, #3
 8005f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	e017      	b.n	8006006 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d113      	bne.n	8006006 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fec:	4413      	add	r3, r2
 8005fee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	00da      	lsls	r2, r3, #3
 8005ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ffe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006002:	2200      	movs	r2, #0
 8006004:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f00d f8ea 	bl	80131e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 8104 	bne.w	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]
 8006062:	e0e0      	b.n	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d121      	bne.n	80060b2 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f040 80b4 	bne.w	8006226 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060c6:	441a      	add	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060d4:	441a      	add	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6a1a      	ldr	r2, [r3, #32]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d309      	bcc.n	80060fa <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	621a      	str	r2, [r3, #32]
 80060f8:	e015      	b.n	8006126 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006106:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006110:	e009      	b.n	8006126 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	663b      	str	r3, [r7, #96]	; 0x60
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d155      	bne.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	65bb      	str	r3, [r7, #88]	; 0x58
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006148:	4413      	add	r3, r2
 800614a:	65bb      	str	r3, [r7, #88]	; 0x58
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	00da      	lsls	r2, r3, #3
 8006152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006154:	4413      	add	r3, r2
 8006156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800615a:	657b      	str	r3, [r7, #84]	; 0x54
 800615c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615e:	2b3e      	cmp	r3, #62	; 0x3e
 8006160:	d916      	bls.n	8006190 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	677b      	str	r3, [r7, #116]	; 0x74
 8006168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_PCD_EP_DB_Transmit+0x694>
 8006172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006174:	3b01      	subs	r3, #1
 8006176:	677b      	str	r3, [r7, #116]	; 0x74
 8006178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e040      	b.n	8006212 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006192:	2b00      	cmp	r3, #0
 8006194:	d112      	bne.n	80061bc <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	e02a      	b.n	8006212 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	085b      	lsrs	r3, r3, #1
 80061c0:	677b      	str	r3, [r7, #116]	; 0x74
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80061cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ce:	3301      	adds	r3, #1
 80061d0:	677b      	str	r3, [r7, #116]	; 0x74
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e018      	b.n	8006212 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d114      	bne.n	8006212 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	461a      	mov	r2, r3
 80061f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f6:	4413      	add	r3, r2
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	00da      	lsls	r2, r3, #3
 8006200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006202:	4413      	add	r3, r2
 8006204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800620a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620c:	b29a      	uxth	r2, r3
 800620e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006210:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6959      	ldr	r1, [r3, #20]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	895a      	ldrh	r2, [r3, #10]
 800621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006220:	b29b      	uxth	r3, r3
 8006222:	f006 fa18 	bl	800c656 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006240:	823b      	strh	r3, [r7, #16]
 8006242:	8a3b      	ldrh	r3, [r7, #16]
 8006244:	f083 0310 	eor.w	r3, r3, #16
 8006248:	823b      	strh	r3, [r7, #16]
 800624a:	8a3b      	ldrh	r3, [r7, #16]
 800624c:	f083 0320 	eor.w	r3, r3, #32
 8006250:	823b      	strh	r3, [r7, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8a3b      	ldrh	r3, [r7, #16]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3788      	adds	r7, #136	; 0x88
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	817b      	strh	r3, [r7, #10]
 800628e:	4613      	mov	r3, r2
 8006290:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006292:	897b      	ldrh	r3, [r7, #10]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800629e:	897b      	ldrh	r3, [r7, #10]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e009      	b.n	80062ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b6:	897a      	ldrh	r2, [r7, #10]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062ca:	893b      	ldrh	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d107      	bne.n	80062e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2200      	movs	r2, #0
 80062d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	80da      	strh	r2, [r3, #6]
 80062de:	e00b      	b.n	80062f8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2201      	movs	r2, #1
 80062e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800632a:	b29b      	uxth	r3, r3
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800633e:	b29b      	uxth	r3, r3
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a04      	ldr	r2, [pc, #16]	; (8006378 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636a:	6013      	str	r3, [r2, #0]
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	58000400 	.word	0x58000400

0800637c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006380:	4b04      	ldr	r3, [pc, #16]	; (8006394 <HAL_PWREx_GetVoltageRange+0x18>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	58000400 	.word	0x58000400

08006398 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800639c:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a04      	ldr	r2, [pc, #16]	; (80063b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80063a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063a6:	6053      	str	r3, [r2, #4]
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	58000400 	.word	0x58000400

080063b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80063bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ca:	d101      	bne.n	80063d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_RCC_HSE_Enable>:
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80063e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <LL_RCC_HSE_Disable>:
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80063fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640c:	6013      	str	r3, [r2, #0]
}
 800640e:	bf00      	nop
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <LL_RCC_HSE_IsReady>:
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800641c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800642a:	d101      	bne.n	8006430 <LL_RCC_HSE_IsReady+0x18>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <LL_RCC_HSE_IsReady+0x1a>
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <LL_RCC_HSI_Enable>:
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800644a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <LL_RCC_HSI_Disable>:
{
 800645a:	b480      	push	{r7}
 800645c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800645e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800646c:	6013      	str	r3, [r2, #0]
}
 800646e:	bf00      	nop
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LL_RCC_HSI_IsReady>:
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800647c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800648a:	d101      	bne.n	8006490 <LL_RCC_HSI_IsReady+0x18>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <LL_RCC_HSI_IsReady+0x1a>
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_RCC_HSI_SetCalibTrimming>:
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b6:	4313      	orrs	r3, r2
 80064b8:	604b      	str	r3, [r1, #4]
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <LL_RCC_HSI48_Enable>:
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80064ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80064de:	bf00      	nop
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_RCC_HSI48_Disable>:
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80064ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_RCC_HSI48_IsReady>:
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800650e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b02      	cmp	r3, #2
 800651c:	d101      	bne.n	8006522 <LL_RCC_HSI48_IsReady+0x18>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <LL_RCC_HSI48_IsReady+0x1a>
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <LL_RCC_LSE_Enable>:
{
 800652e:	b480      	push	{r7}
 8006530:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006546:	bf00      	nop
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <LL_RCC_LSE_Disable>:
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006568:	bf00      	nop
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <LL_RCC_LSE_EnableBypass>:
{
 8006572:	b480      	push	{r7}
 8006574:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006582:	f043 0304 	orr.w	r3, r3, #4
 8006586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <LL_RCC_LSE_DisableBypass>:
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a4:	f023 0304 	bic.w	r3, r3, #4
 80065a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <LL_RCC_LSE_IsReady>:
{
 80065b6:	b480      	push	{r7}
 80065b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80065ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d101      	bne.n	80065ce <LL_RCC_LSE_IsReady+0x18>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <LL_RCC_LSE_IsReady+0x1a>
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <LL_RCC_LSI1_Enable>:
{
 80065da:	b480      	push	{r7}
 80065dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80065de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <LL_RCC_LSI1_Disable>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <LL_RCC_LSI1_IsReady>:
{
 800661e:	b480      	push	{r7}
 8006620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d101      	bne.n	8006636 <LL_RCC_LSI1_IsReady+0x18>
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <LL_RCC_LSI1_IsReady+0x1a>
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_RCC_LSI2_Enable>:
{
 8006642:	b480      	push	{r7}
 8006644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006652:	f043 0304 	orr.w	r3, r3, #4
 8006656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <LL_RCC_LSI2_Disable>:
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <LL_RCC_LSI2_IsReady>:
{
 8006686:	b480      	push	{r7}
 8006688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800668a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b08      	cmp	r3, #8
 8006698:	d101      	bne.n	800669e <LL_RCC_LSI2_IsReady+0x18>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <LL_RCC_LSI2_IsReady+0x1a>
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <LL_RCC_LSI2_SetTrimming>:
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <LL_RCC_MSI_Enable>:
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80066dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <LL_RCC_MSI_Disable>:
{
 80066f6:	b480      	push	{r7}
 80066f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80066fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	6013      	str	r3, [r2, #0]
}
 800670a:	bf00      	nop
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <LL_RCC_MSI_IsReady>:
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d101      	bne.n	800672a <LL_RCC_MSI_IsReady+0x16>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <LL_RCC_MSI_IsReady+0x18>
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <LL_RCC_MSI_SetRange>:
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <LL_RCC_MSI_GetRange>:
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800676e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2bb0      	cmp	r3, #176	; 0xb0
 8006774:	d901      	bls.n	800677a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006776:	23b0      	movs	r3, #176	; 0xb0
 8006778:	607b      	str	r3, [r7, #4]
  return msiRange;
 800677a:	687b      	ldr	r3, [r7, #4]
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067a2:	4313      	orrs	r3, r2
 80067a4:	604b      	str	r3, [r1, #4]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <LL_RCC_SetSysClkSource>:
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80067ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f023 0203 	bic.w	r2, r3, #3
 80067c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	608b      	str	r3, [r1, #8]
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <LL_RCC_GetSysClkSource>:
{
 80067da:	b480      	push	{r7}
 80067dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 030c 	and.w	r3, r3, #12
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <LL_RCC_SetAHBPrescaler>:
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80067fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4313      	orrs	r3, r2
 800680c:	608b      	str	r3, [r1, #8]
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <LL_C2_RCC_SetAHBPrescaler>:
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006826:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800682a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800682e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4313      	orrs	r3, r2
 8006836:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <LL_RCC_SetAHB4Prescaler>:
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006852:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006856:	f023 020f 	bic.w	r2, r3, #15
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <LL_RCC_SetAPB1Prescaler>:
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4313      	orrs	r3, r2
 800688e:	608b      	str	r3, [r1, #8]
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <LL_RCC_SetAPB2Prescaler>:
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80068a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_RCC_GetAHBPrescaler>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80068c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <LL_C2_RCC_GetAHBPrescaler>:
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80068e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80068e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <LL_RCC_GetAHB4Prescaler>:
{
 80068f6:	b480      	push	{r7}
 80068f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80068fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006908:	4618      	mov	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <LL_RCC_GetAPB1Prescaler>:
{
 8006912:	b480      	push	{r7}
 8006914:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <LL_RCC_GetAPB2Prescaler>:
{
 800692a:	b480      	push	{r7}
 800692c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800692e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006938:	4618      	mov	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <LL_RCC_PLL_Enable>:
{
 8006942:	b480      	push	{r7}
 8006944:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006954:	6013      	str	r3, [r2, #0]
}
 8006956:	bf00      	nop
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <LL_RCC_PLL_Disable>:
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006972:	6013      	str	r3, [r2, #0]
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <LL_RCC_PLL_IsReady>:
{
 800697e:	b480      	push	{r7}
 8006980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006990:	d101      	bne.n	8006996 <LL_RCC_PLL_IsReady+0x18>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <LL_RCC_PLL_IsReady+0x1a>
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <LL_RCC_PLL_GetN>:
{
 80069a2:	b480      	push	{r7}
 80069a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80069a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	0a1b      	lsrs	r3, r3, #8
 80069ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_PLL_GetR>:
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80069c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <LL_RCC_PLL_GetDivider>:
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_RCC_PLL_GetMainSource>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0303 	and.w	r3, r3, #3
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <LL_RCC_IsActiveFlag_HPRE>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a16:	d101      	bne.n	8006a1c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3c:	d101      	bne.n	8006a42 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006a4e:	b480      	push	{r7}
 8006a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a62:	d101      	bne.n	8006a68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a86:	d101      	bne.n	8006a8c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aaa:	d101      	bne.n	8006ab0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b08d      	sub	sp, #52	; 0x34
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e37e      	b.n	80071cc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8092 	beq.w	8006c00 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006adc:	f7ff fe7d 	bl	80067da <LL_RCC_GetSysClkSource>
 8006ae0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae2:	f7ff ff83 	bl	80069ec <LL_RCC_PLL_GetMainSource>
 8006ae6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_RCC_OscConfig+0x3e>
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	2b0c      	cmp	r3, #12
 8006af2:	d14c      	bne.n	8006b8e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d149      	bne.n	8006b8e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006afa:	f7ff fe0b 	bl	8006714 <LL_RCC_MSI_IsReady>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <HAL_RCC_OscConfig+0x54>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e35d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006b14:	f7ff fe23 	bl	800675e <LL_RCC_MSI_GetRange>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d914      	bls.n	8006b48 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fd5e 	bl	80075e4 <RCC_SetFlashLatencyFromMSIRange>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e34c      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fdfd 	bl	8006736 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff fe21 	bl	8006788 <LL_RCC_MSI_SetCalibTrimming>
 8006b46:	e013      	b.n	8006b70 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fdf2 	bl	8006736 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fe16 	bl	8006788 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fd3f 	bl	80075e4 <RCC_SetFlashLatencyFromMSIRange>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e32d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006b70:	f000 fcdc 	bl	800752c <HAL_RCC_GetHCLKFreq>
 8006b74:	4603      	mov	r3, r0
 8006b76:	4ab3      	ldr	r2, [pc, #716]	; (8006e44 <HAL_RCC_OscConfig+0x388>)
 8006b78:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b7a:	4bb3      	ldr	r3, [pc, #716]	; (8006e48 <HAL_RCC_OscConfig+0x38c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fb fa44 	bl	800200c <HAL_InitTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d039      	beq.n	8006bfe <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e31e      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01e      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b96:	f7ff fd9f 	bl	80066d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b9a:	f7fb fe09 	bl	80027b0 <HAL_GetTick>
 8006b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ba2:	f7fb fe05 	bl	80027b0 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e30b      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006bb4:	f7ff fdae 	bl	8006714 <LL_RCC_MSI_IsReady>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f1      	beq.n	8006ba2 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fdb7 	bl	8006736 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fddb 	bl	8006788 <LL_RCC_MSI_SetCalibTrimming>
 8006bd2:	e015      	b.n	8006c00 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006bd4:	f7ff fd8f 	bl	80066f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bd8:	f7fb fdea 	bl	80027b0 <HAL_GetTick>
 8006bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006be0:	f7fb fde6 	bl	80027b0 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e2ec      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006bf2:	f7ff fd8f 	bl	8006714 <LL_RCC_MSI_IsReady>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f1      	bne.n	8006be0 <HAL_RCC_OscConfig+0x124>
 8006bfc:	e000      	b.n	8006c00 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bfe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d04e      	beq.n	8006caa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c0c:	f7ff fde5 	bl	80067da <LL_RCC_GetSysClkSource>
 8006c10:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c12:	f7ff feeb 	bl	80069ec <LL_RCC_PLL_GetMainSource>
 8006c16:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d005      	beq.n	8006c2a <HAL_RCC_OscConfig+0x16e>
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	d10d      	bne.n	8006c40 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c2a:	f7ff fbf5 	bl	8006418 <LL_RCC_HSE_IsReady>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d039      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x1ec>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d135      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e2c5      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c48:	d102      	bne.n	8006c50 <HAL_RCC_OscConfig+0x194>
 8006c4a:	f7ff fbc7 	bl	80063dc <LL_RCC_HSE_Enable>
 8006c4e:	e001      	b.n	8006c54 <HAL_RCC_OscConfig+0x198>
 8006c50:	f7ff fbd3 	bl	80063fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d012      	beq.n	8006c82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fb fda8 	bl	80027b0 <HAL_GetTick>
 8006c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fb fda4 	bl	80027b0 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	; 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e2aa      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006c76:	f7ff fbcf 	bl	8006418 <LL_RCC_HSE_IsReady>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0f1      	beq.n	8006c64 <HAL_RCC_OscConfig+0x1a8>
 8006c80:	e013      	b.n	8006caa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c82:	f7fb fd95 	bl	80027b0 <HAL_GetTick>
 8006c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006c88:	e008      	b.n	8006c9c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c8a:	f7fb fd91 	bl	80027b0 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b64      	cmp	r3, #100	; 0x64
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e297      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006c9c:	f7ff fbbc 	bl	8006418 <LL_RCC_HSE_IsReady>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f1      	bne.n	8006c8a <HAL_RCC_OscConfig+0x1ce>
 8006ca6:	e000      	b.n	8006caa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d051      	beq.n	8006d5a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cb6:	f7ff fd90 	bl	80067da <LL_RCC_GetSysClkSource>
 8006cba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cbc:	f7ff fe96 	bl	80069ec <LL_RCC_PLL_GetMainSource>
 8006cc0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x218>
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	2b0c      	cmp	r3, #12
 8006ccc:	d113      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d110      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd4:	f7ff fbd0 	bl	8006478 <LL_RCC_HSI_IsReady>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_RCC_OscConfig+0x22e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e270      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fbd4 	bl	800649c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cf4:	e031      	b.n	8006d5a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d019      	beq.n	8006d32 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cfe:	f7ff fb9d 	bl	800643c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d02:	f7fb fd55 	bl	80027b0 <HAL_GetTick>
 8006d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d0a:	f7fb fd51 	bl	80027b0 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e257      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006d1c:	f7ff fbac 	bl	8006478 <LL_RCC_HSI_IsReady>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f1      	beq.n	8006d0a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff fbb6 	bl	800649c <LL_RCC_HSI_SetCalibTrimming>
 8006d30:	e013      	b.n	8006d5a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d32:	f7ff fb92 	bl	800645a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d36:	f7fb fd3b 	bl	80027b0 <HAL_GetTick>
 8006d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006d3c:	e008      	b.n	8006d50 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d3e:	f7fb fd37 	bl	80027b0 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e23d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006d50:	f7ff fb92 	bl	8006478 <LL_RCC_HSI_IsReady>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f1      	bne.n	8006d3e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80a3 	beq.w	8006eba <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d076      	beq.n	8006e6a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d046      	beq.n	8006e16 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006d88:	f7ff fc49 	bl	800661e <LL_RCC_LSI1_IsReady>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d113      	bne.n	8006dba <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006d92:	f7ff fc22 	bl	80065da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d96:	f7fb fd0b 	bl	80027b0 <HAL_GetTick>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d9e:	f7fb fd07 	bl	80027b0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e20d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006db0:	f7ff fc35 	bl	800661e <LL_RCC_LSI1_IsReady>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0f1      	beq.n	8006d9e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006dba:	f7ff fc42 	bl	8006642 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbe:	f7fb fcf7 	bl	80027b0 <HAL_GetTick>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006dc6:	f7fb fcf3 	bl	80027b0 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e1f9      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006dd8:	f7ff fc55 	bl	8006686 <LL_RCC_LSI2_IsReady>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0f1      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fc5f 	bl	80066aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006dec:	f7ff fc06 	bl	80065fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fb fcde 	bl	80027b0 <HAL_GetTick>
 8006df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006df8:	f7fb fcda 	bl	80027b0 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e1e0      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006e0a:	f7ff fc08 	bl	800661e <LL_RCC_LSI1_IsReady>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f1      	bne.n	8006df8 <HAL_RCC_OscConfig+0x33c>
 8006e14:	e051      	b.n	8006eba <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006e16:	f7ff fbe0 	bl	80065da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1a:	f7fb fcc9 	bl	80027b0 <HAL_GetTick>
 8006e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e22:	f7fb fcc5 	bl	80027b0 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e1cb      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006e34:	f7ff fbf3 	bl	800661e <LL_RCC_LSI1_IsReady>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f1      	beq.n	8006e22 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006e3e:	f7ff fc11 	bl	8006664 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006e42:	e00c      	b.n	8006e5e <HAL_RCC_OscConfig+0x3a2>
 8006e44:	20000010 	.word	0x20000010
 8006e48:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e4c:	f7fb fcb0 	bl	80027b0 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e1b6      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006e5e:	f7ff fc12 	bl	8006686 <LL_RCC_LSI2_IsReady>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f1      	bne.n	8006e4c <HAL_RCC_OscConfig+0x390>
 8006e68:	e027      	b.n	8006eba <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006e6a:	f7ff fbfb 	bl	8006664 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6e:	f7fb fc9f 	bl	80027b0 <HAL_GetTick>
 8006e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e76:	f7fb fc9b 	bl	80027b0 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e1a1      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006e88:	f7ff fbfd 	bl	8006686 <LL_RCC_LSI2_IsReady>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f1      	bne.n	8006e76 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006e92:	f7ff fbb3 	bl	80065fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e96:	f7fb fc8b 	bl	80027b0 <HAL_GetTick>
 8006e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006e9c:	e008      	b.n	8006eb0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e9e:	f7fb fc87 	bl	80027b0 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e18d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006eb0:	f7ff fbb5 	bl	800661e <LL_RCC_LSI1_IsReady>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f1      	bne.n	8006e9e <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0304 	and.w	r3, r3, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d05b      	beq.n	8006f7e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ec6:	4bb5      	ldr	r3, [pc, #724]	; (800719c <HAL_RCC_OscConfig+0x6e0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d114      	bne.n	8006efc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ed2:	f7ff fa43 	bl	800635c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ed6:	f7fb fc6b 	bl	80027b0 <HAL_GetTick>
 8006eda:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ede:	f7fb fc67 	bl	80027b0 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e16d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ef0:	4baa      	ldr	r3, [pc, #680]	; (800719c <HAL_RCC_OscConfig+0x6e0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f0      	beq.n	8006ede <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <HAL_RCC_OscConfig+0x44e>
 8006f04:	f7ff fb13 	bl	800652e <LL_RCC_LSE_Enable>
 8006f08:	e00c      	b.n	8006f24 <HAL_RCC_OscConfig+0x468>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2b05      	cmp	r3, #5
 8006f10:	d104      	bne.n	8006f1c <HAL_RCC_OscConfig+0x460>
 8006f12:	f7ff fb2e 	bl	8006572 <LL_RCC_LSE_EnableBypass>
 8006f16:	f7ff fb0a 	bl	800652e <LL_RCC_LSE_Enable>
 8006f1a:	e003      	b.n	8006f24 <HAL_RCC_OscConfig+0x468>
 8006f1c:	f7ff fb18 	bl	8006550 <LL_RCC_LSE_Disable>
 8006f20:	f7ff fb38 	bl	8006594 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d014      	beq.n	8006f56 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2c:	f7fb fc40 	bl	80027b0 <HAL_GetTick>
 8006f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006f32:	e00a      	b.n	8006f4a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f34:	f7fb fc3c 	bl	80027b0 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e140      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006f4a:	f7ff fb34 	bl	80065b6 <LL_RCC_LSE_IsReady>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0ef      	beq.n	8006f34 <HAL_RCC_OscConfig+0x478>
 8006f54:	e013      	b.n	8006f7e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f56:	f7fb fc2b 	bl	80027b0 <HAL_GetTick>
 8006f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f5e:	f7fb fc27 	bl	80027b0 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e12b      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006f74:	f7ff fb1f 	bl	80065b6 <LL_RCC_LSE_IsReady>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1ef      	bne.n	8006f5e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d02c      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d014      	beq.n	8006fbc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f92:	f7ff fa98 	bl	80064c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f96:	f7fb fc0b 	bl	80027b0 <HAL_GetTick>
 8006f9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f9e:	f7fb fc07 	bl	80027b0 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e10d      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006fb0:	f7ff faab 	bl	800650a <LL_RCC_HSI48_IsReady>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0f1      	beq.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
 8006fba:	e013      	b.n	8006fe4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fbc:	f7ff fa94 	bl	80064e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc0:	f7fb fbf6 	bl	80027b0 <HAL_GetTick>
 8006fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fc8:	f7fb fbf2 	bl	80027b0 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e0f8      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006fda:	f7ff fa96 	bl	800650a <LL_RCC_HSI48_IsReady>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f1      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80ee 	beq.w	80071ca <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fee:	f7ff fbf4 	bl	80067da <LL_RCC_GetSysClkSource>
 8006ff2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	2b02      	cmp	r3, #2
 8007002:	f040 80af 	bne.w	8007164 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0203 	and.w	r2, r3, #3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	429a      	cmp	r2, r3
 8007012:	d123      	bne.n	800705c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701e:	429a      	cmp	r2, r3
 8007020:	d11c      	bne.n	800705c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	0a1b      	lsrs	r3, r3, #8
 8007026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800702e:	429a      	cmp	r2, r3
 8007030:	d114      	bne.n	800705c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d10d      	bne.n	800705c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800704a:	429a      	cmp	r2, r3
 800704c:	d106      	bne.n	800705c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007058:	429a      	cmp	r2, r3
 800705a:	d05d      	beq.n	8007118 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d058      	beq.n	8007114 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0ab      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007074:	f7ff fc74 	bl	8006960 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007078:	f7fb fb9a 	bl	80027b0 <HAL_GetTick>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007080:	f7fb fb96 	bl	80027b0 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e09c      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1ef      	bne.n	8007080 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	4b3e      	ldr	r3, [pc, #248]	; (80071a0 <HAL_RCC_OscConfig+0x6e4>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070b2:	4311      	orrs	r1, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070b8:	0212      	lsls	r2, r2, #8
 80070ba:	4311      	orrs	r1, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070c0:	4311      	orrs	r1, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070c6:	4311      	orrs	r1, r2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070cc:	430a      	orrs	r2, r1
 80070ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070d6:	f7ff fc34 	bl	8006942 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070ea:	f7fb fb61 	bl	80027b0 <HAL_GetTick>
 80070ee:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f2:	f7fb fb5d 	bl	80027b0 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e063      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0ef      	beq.n	80070f2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007112:	e05a      	b.n	80071ca <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e059      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d151      	bne.n	80071ca <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007126:	f7ff fc0c 	bl	8006942 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800712a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007138:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800713a:	f7fb fb39 	bl	80027b0 <HAL_GetTick>
 800713e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007142:	f7fb fb35 	bl	80027b0 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e03b      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0ef      	beq.n	8007142 <HAL_RCC_OscConfig+0x686>
 8007162:	e032      	b.n	80071ca <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b0c      	cmp	r3, #12
 8007168:	d02d      	beq.n	80071c6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716a:	f7ff fbf9 	bl	8006960 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800717e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007188:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800718c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007190:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007192:	f7fb fb0d 	bl	80027b0 <HAL_GetTick>
 8007196:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007198:	e00d      	b.n	80071b6 <HAL_RCC_OscConfig+0x6fa>
 800719a:	bf00      	nop
 800719c:	58000400 	.word	0x58000400
 80071a0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a4:	f7fb fb04 	bl	80027b0 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e00a      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1ef      	bne.n	80071a4 <HAL_RCC_OscConfig+0x6e8>
 80071c4:	e001      	b.n	80071ca <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3734      	adds	r7, #52	; 0x34
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd90      	pop	{r4, r7, pc}

080071d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e12d      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071e8:	4b98      	ldr	r3, [pc, #608]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d91b      	bls.n	800722e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f6:	4b95      	ldr	r3, [pc, #596]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 0207 	bic.w	r2, r3, #7
 80071fe:	4993      	ldr	r1, [pc, #588]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	4313      	orrs	r3, r2
 8007204:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007206:	f7fb fad3 	bl	80027b0 <HAL_GetTick>
 800720a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720c:	e008      	b.n	8007220 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800720e:	f7fb facf 	bl	80027b0 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e111      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007220:	4b8a      	ldr	r3, [pc, #552]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d1ef      	bne.n	800720e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d016      	beq.n	8007268 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fad7 	bl	80067f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007244:	f7fb fab4 	bl	80027b0 <HAL_GetTick>
 8007248:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800724c:	f7fb fab0 	bl	80027b0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e0f2      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800725e:	f7ff fbd1 	bl	8006a04 <LL_RCC_IsActiveFlag_HPRE>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f1      	beq.n	800724c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0320 	and.w	r3, r3, #32
 8007270:	2b00      	cmp	r3, #0
 8007272:	d016      	beq.n	80072a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff face 	bl	800681a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800727e:	f7fb fa97 	bl	80027b0 <HAL_GetTick>
 8007282:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007284:	e008      	b.n	8007298 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007286:	f7fb fa93 	bl	80027b0 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e0d5      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007298:	f7ff fbc6 	bl	8006a28 <LL_RCC_IsActiveFlag_C2HPRE>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f1      	beq.n	8007286 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d016      	beq.n	80072dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fac7 	bl	8006846 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072b8:	f7fb fa7a 	bl	80027b0 <HAL_GetTick>
 80072bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072c0:	f7fb fa76 	bl	80027b0 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e0b8      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80072d2:	f7ff fbbc 	bl	8006a4e <LL_RCC_IsActiveFlag_SHDHPRE>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0f1      	beq.n	80072c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d016      	beq.n	8007316 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff fac1 	bl	8006874 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072f2:	f7fb fa5d 	bl	80027b0 <HAL_GetTick>
 80072f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80072f8:	e008      	b.n	800730c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072fa:	f7fb fa59 	bl	80027b0 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d901      	bls.n	800730c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e09b      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800730c:	f7ff fbb2 	bl	8006a74 <LL_RCC_IsActiveFlag_PPRE1>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0f1      	beq.n	80072fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d017      	beq.n	8007352 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff fab7 	bl	800689c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800732e:	f7fb fa3f 	bl	80027b0 <HAL_GetTick>
 8007332:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007336:	f7fb fa3b 	bl	80027b0 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e07d      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007348:	f7ff fba6 	bl	8006a98 <LL_RCC_IsActiveFlag_PPRE2>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f1      	beq.n	8007336 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d043      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d106      	bne.n	8007374 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007366:	f7ff f857 	bl	8006418 <LL_RCC_HSE_IsReady>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11e      	bne.n	80073ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e067      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d106      	bne.n	800738a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800737c:	f7ff faff 	bl	800697e <LL_RCC_PLL_IsReady>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d113      	bne.n	80073ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e05c      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007392:	f7ff f9bf 	bl	8006714 <LL_RCC_MSI_IsReady>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d108      	bne.n	80073ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e051      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80073a0:	f7ff f86a 	bl	8006478 <LL_RCC_HSI_IsReady>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e04a      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff f9fd 	bl	80067b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073b8:	f7fb f9fa 	bl	80027b0 <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073be:	e00a      	b.n	80073d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c0:	f7fb f9f6 	bl	80027b0 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e036      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d6:	f7ff fa00 	bl	80067da <LL_RCC_GetSysClkSource>
 80073da:	4602      	mov	r2, r0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d1ec      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d21b      	bcs.n	800742c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f4:	4b15      	ldr	r3, [pc, #84]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f023 0207 	bic.w	r2, r3, #7
 80073fc:	4913      	ldr	r1, [pc, #76]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	4313      	orrs	r3, r2
 8007402:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007404:	f7fb f9d4 	bl	80027b0 <HAL_GetTick>
 8007408:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800740a:	e008      	b.n	800741e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800740c:	f7fb f9d0 	bl	80027b0 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d901      	bls.n	800741e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e012      	b.n	8007444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <HAL_RCC_ClockConfig+0x278>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d1ef      	bne.n	800740c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800742c:	f000 f87e 	bl	800752c <HAL_RCC_GetHCLKFreq>
 8007430:	4603      	mov	r3, r0
 8007432:	4a07      	ldr	r2, [pc, #28]	; (8007450 <HAL_RCC_ClockConfig+0x27c>)
 8007434:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007436:	f7fb f9c7 	bl	80027c8 <HAL_GetTickPrio>
 800743a:	4603      	mov	r3, r0
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa fde5 	bl	800200c <HAL_InitTick>
 8007442:	4603      	mov	r3, r0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	58004000 	.word	0x58004000
 8007450:	20000010 	.word	0x20000010

08007454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007454:	b590      	push	{r4, r7, lr}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800745a:	f7ff f9be 	bl	80067da <LL_RCC_GetSysClkSource>
 800745e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007466:	f7ff f97a 	bl	800675e <LL_RCC_MSI_GetRange>
 800746a:	4603      	mov	r3, r0
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	4a2b      	ldr	r2, [pc, #172]	; (8007520 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	e04b      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b04      	cmp	r3, #4
 8007480:	d102      	bne.n	8007488 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007482:	4b28      	ldr	r3, [pc, #160]	; (8007524 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	e045      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b08      	cmp	r3, #8
 800748c:	d10a      	bne.n	80074a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800748e:	f7fe ff93 	bl	80063b8 <LL_RCC_HSE_IsEnabledDiv2>
 8007492:	4603      	mov	r3, r0
 8007494:	2b01      	cmp	r3, #1
 8007496:	d102      	bne.n	800749e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007498:	4b22      	ldr	r3, [pc, #136]	; (8007524 <HAL_RCC_GetSysClockFreq+0xd0>)
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e03a      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800749e:	4b22      	ldr	r3, [pc, #136]	; (8007528 <HAL_RCC_GetSysClockFreq+0xd4>)
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e037      	b.n	8007514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80074a4:	f7ff faa2 	bl	80069ec <LL_RCC_PLL_GetMainSource>
 80074a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d003      	beq.n	80074b8 <HAL_RCC_GetSysClockFreq+0x64>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d003      	beq.n	80074be <HAL_RCC_GetSysClockFreq+0x6a>
 80074b6:	e00d      	b.n	80074d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80074b8:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074ba:	60bb      	str	r3, [r7, #8]
        break;
 80074bc:	e015      	b.n	80074ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80074be:	f7fe ff7b 	bl	80063b8 <LL_RCC_HSE_IsEnabledDiv2>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d102      	bne.n	80074ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80074c8:	4b16      	ldr	r3, [pc, #88]	; (8007524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80074cc:	e00d      	b.n	80074ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <HAL_RCC_GetSysClockFreq+0xd4>)
 80074d0:	60bb      	str	r3, [r7, #8]
        break;
 80074d2:	e00a      	b.n	80074ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80074d4:	f7ff f943 	bl	800675e <LL_RCC_MSI_GetRange>
 80074d8:	4603      	mov	r3, r0
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	4a0f      	ldr	r2, [pc, #60]	; (8007520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80074e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e6:	60bb      	str	r3, [r7, #8]
        break;
 80074e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80074ea:	f7ff fa5a 	bl	80069a2 <LL_RCC_PLL_GetN>
 80074ee:	4602      	mov	r2, r0
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	fb03 f402 	mul.w	r4, r3, r2
 80074f6:	f7ff fa6d 	bl	80069d4 <LL_RCC_PLL_GetDivider>
 80074fa:	4603      	mov	r3, r0
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	3301      	adds	r3, #1
 8007500:	fbb4 f4f3 	udiv	r4, r4, r3
 8007504:	f7ff fa5a 	bl	80069bc <LL_RCC_PLL_GetR>
 8007508:	4603      	mov	r3, r0
 800750a:	0f5b      	lsrs	r3, r3, #29
 800750c:	3301      	adds	r3, #1
 800750e:	fbb4 f3f3 	udiv	r3, r4, r3
 8007512:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007514:	68fb      	ldr	r3, [r7, #12]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	bd90      	pop	{r4, r7, pc}
 800751e:	bf00      	nop
 8007520:	0801440c 	.word	0x0801440c
 8007524:	00f42400 	.word	0x00f42400
 8007528:	01e84800 	.word	0x01e84800

0800752c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800752c:	b598      	push	{r3, r4, r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007530:	f7ff ff90 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8007534:	4604      	mov	r4, r0
 8007536:	f7ff f9c5 	bl	80068c4 <LL_RCC_GetAHBPrescaler>
 800753a:	4603      	mov	r3, r0
 800753c:	091b      	lsrs	r3, r3, #4
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	4a03      	ldr	r2, [pc, #12]	; (8007550 <HAL_RCC_GetHCLKFreq+0x24>)
 8007544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007548:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800754c:	4618      	mov	r0, r3
 800754e:	bd98      	pop	{r3, r4, r7, pc}
 8007550:	080143ac 	.word	0x080143ac

08007554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007554:	b598      	push	{r3, r4, r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007558:	f7ff ffe8 	bl	800752c <HAL_RCC_GetHCLKFreq>
 800755c:	4604      	mov	r4, r0
 800755e:	f7ff f9e4 	bl	800692a <LL_RCC_GetAPB2Prescaler>
 8007562:	4603      	mov	r3, r0
 8007564:	0adb      	lsrs	r3, r3, #11
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	4a04      	ldr	r2, [pc, #16]	; (800757c <HAL_RCC_GetPCLK2Freq+0x28>)
 800756c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007578:	4618      	mov	r0, r3
 800757a:	bd98      	pop	{r3, r4, r7, pc}
 800757c:	080143ec 	.word	0x080143ec

08007580 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	226f      	movs	r2, #111	; 0x6f
 800758e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8007590:	f7ff f923 	bl	80067da <LL_RCC_GetSysClkSource>
 8007594:	4602      	mov	r2, r0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800759a:	f7ff f993 	bl	80068c4 <LL_RCC_GetAHBPrescaler>
 800759e:	4602      	mov	r2, r0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80075a4:	f7ff f9b5 	bl	8006912 <LL_RCC_GetAPB1Prescaler>
 80075a8:	4602      	mov	r2, r0
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80075ae:	f7ff f9bc 	bl	800692a <LL_RCC_GetAPB2Prescaler>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80075b8:	f7ff f990 	bl	80068dc <LL_C2_RCC_GetAHBPrescaler>
 80075bc:	4602      	mov	r2, r0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80075c2:	f7ff f998 	bl	80068f6 <LL_RCC_GetAHB4Prescaler>
 80075c6:	4602      	mov	r2, r0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80075cc:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <HAL_RCC_GetClockConfig+0x60>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0207 	and.w	r2, r3, #7
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	601a      	str	r2, [r3, #0]
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	58004000 	.word	0x58004000

080075e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2bb0      	cmp	r3, #176	; 0xb0
 80075f0:	d903      	bls.n	80075fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80075f2:	4b15      	ldr	r3, [pc, #84]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e007      	b.n	800760a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	091b      	lsrs	r3, r3, #4
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	4a11      	ldr	r2, [pc, #68]	; (8007648 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007608:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800760a:	f7ff f974 	bl	80068f6 <LL_RCC_GetAHB4Prescaler>
 800760e:	4603      	mov	r3, r0
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	4a0d      	ldr	r2, [pc, #52]	; (800764c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	0c9c      	lsrs	r4, r3, #18
 800762e:	f7fe fea5 	bl	800637c <HAL_PWREx_GetVoltageRange>
 8007632:	4603      	mov	r3, r0
 8007634:	4619      	mov	r1, r3
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f80c 	bl	8007654 <RCC_SetFlashLatency>
 800763c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	bd90      	pop	{r4, r7, pc}
 8007646:	bf00      	nop
 8007648:	0801440c 	.word	0x0801440c
 800764c:	080143ac 	.word	0x080143ac
 8007650:	431bde83 	.word	0x431bde83

08007654 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b093      	sub	sp, #76	; 0x4c
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800765e:	4b39      	ldr	r3, [pc, #228]	; (8007744 <RCC_SetFlashLatency+0xf0>)
 8007660:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800766a:	4a37      	ldr	r2, [pc, #220]	; (8007748 <RCC_SetFlashLatency+0xf4>)
 800766c:	f107 031c 	add.w	r3, r7, #28
 8007670:	ca07      	ldmia	r2, {r0, r1, r2}
 8007672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007676:	4b35      	ldr	r3, [pc, #212]	; (800774c <RCC_SetFlashLatency+0xf8>)
 8007678:	f107 040c 	add.w	r4, r7, #12
 800767c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800767e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007682:	2300      	movs	r3, #0
 8007684:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800768c:	d11c      	bne.n	80076c8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800768e:	2300      	movs	r3, #0
 8007690:	643b      	str	r3, [r7, #64]	; 0x40
 8007692:	e015      	b.n	80076c0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800769c:	4413      	add	r3, r2
 800769e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d808      	bhi.n	80076ba <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80076a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80076b0:	4413      	add	r3, r2
 80076b2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80076b6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80076b8:	e022      	b.n	8007700 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	3301      	adds	r3, #1
 80076be:	643b      	str	r3, [r7, #64]	; 0x40
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d9e6      	bls.n	8007694 <RCC_SetFlashLatency+0x40>
 80076c6:	e01b      	b.n	8007700 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80076c8:	2300      	movs	r3, #0
 80076ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076cc:	e015      	b.n	80076fa <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80076ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80076d6:	4413      	add	r3, r2
 80076d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d808      	bhi.n	80076f4 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80076e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80076ea:	4413      	add	r3, r2
 80076ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80076f0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80076f2:	e005      	b.n	8007700 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80076f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f6:	3301      	adds	r3, #1
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d9e6      	bls.n	80076ce <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <RCC_SetFlashLatency+0xfc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f023 0207 	bic.w	r2, r3, #7
 8007708:	4911      	ldr	r1, [pc, #68]	; (8007750 <RCC_SetFlashLatency+0xfc>)
 800770a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800770c:	4313      	orrs	r3, r2
 800770e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007710:	f7fb f84e 	bl	80027b0 <HAL_GetTick>
 8007714:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007716:	e008      	b.n	800772a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007718:	f7fb f84a 	bl	80027b0 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e007      	b.n	800773a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <RCC_SetFlashLatency+0xfc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007734:	429a      	cmp	r2, r3
 8007736:	d1ef      	bne.n	8007718 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	374c      	adds	r7, #76	; 0x4c
 800773e:	46bd      	mov	sp, r7
 8007740:	bd90      	pop	{r4, r7, pc}
 8007742:	bf00      	nop
 8007744:	08014244 	.word	0x08014244
 8007748:	08014254 	.word	0x08014254
 800774c:	08014260 	.word	0x08014260
 8007750:	58004000 	.word	0x58004000

08007754 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007766:	d101      	bne.n	800776c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <LL_RCC_HSE_IsReady>:
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800777c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800778a:	d101      	bne.n	8007790 <LL_RCC_HSE_IsReady+0x18>
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <LL_RCC_HSE_IsReady+0x1a>
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <LL_RCC_HSI_IsReady>:
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80077a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ae:	d101      	bne.n	80077b4 <LL_RCC_HSI_IsReady+0x18>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <LL_RCC_HSI_IsReady+0x1a>
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <LL_RCC_HSI48_IsReady>:
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80077c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d101      	bne.n	80077d8 <LL_RCC_HSI48_IsReady+0x18>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <LL_RCC_HSI48_IsReady+0x1a>
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <LL_RCC_LSE_IsEnabled>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80077e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <LL_RCC_LSE_IsEnabled+0x18>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <LL_RCC_LSE_IsEnabled+0x1a>
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <LL_RCC_LSE_IsReady>:
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800780c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	d101      	bne.n	8007820 <LL_RCC_LSE_IsReady+0x18>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <LL_RCC_LSE_IsReady+0x1a>
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <LL_RCC_LSI1_IsReady>:
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d101      	bne.n	8007844 <LL_RCC_LSI1_IsReady+0x18>
 8007840:	2301      	movs	r3, #1
 8007842:	e000      	b.n	8007846 <LL_RCC_LSI1_IsReady+0x1a>
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <LL_RCC_LSI2_IsReady>:
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d101      	bne.n	8007868 <LL_RCC_LSI2_IsReady+0x18>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <LL_RCC_LSI2_IsReady+0x1a>
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <LL_RCC_MSI_IsReady>:
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d101      	bne.n	800788a <LL_RCC_MSI_IsReady+0x16>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <LL_RCC_MSI_IsReady+0x18>
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <LL_RCC_MSI_EnablePLLMode>:
{
 8007896:	b480      	push	{r7}
 8007898:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800789a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078a4:	f043 0304 	orr.w	r3, r3, #4
 80078a8:	6013      	str	r3, [r2, #0]
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <LL_RCC_MSI_GetRange>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80078ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078c4:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2bb0      	cmp	r3, #176	; 0xb0
 80078ca:	d901      	bls.n	80078d0 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80078cc:	23b0      	movs	r3, #176	; 0xb0
 80078ce:	607b      	str	r3, [r7, #4]
  return msiRange;
 80078d0:	687b      	ldr	r3, [r7, #4]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_RCC_SetRFWKPClockSource>:
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80078e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80078f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <LL_RCC_GetRFWKPClockSource>:
{
 800790a:	b480      	push	{r7}
 800790c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800790e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <LL_RCC_GetAHBPrescaler>:
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007932:	4618      	mov	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <LL_RCC_GetAPB1Prescaler>:
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800794a:	4618      	mov	r0, r3
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <LL_RCC_GetAPB2Prescaler>:
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007962:	4618      	mov	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <LL_RCC_SetSMPSClockSource>:
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	f023 0203 	bic.w	r2, r3, #3
 800797e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4313      	orrs	r3, r2
 8007986:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <LL_RCC_GetSMPSClockSource>:
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8007998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <LL_RCC_SetSMPSPrescaler>:
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80079b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <LL_RCC_GetSMPSPrescaler>:
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80079d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <LL_RCC_SetUSARTClockSource>:
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80079f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f023 0203 	bic.w	r2, r3, #3
 8007a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <LL_RCC_SetLPUARTClockSource>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <LL_RCC_SetI2CClockSource>:
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	401a      	ands	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <LL_RCC_SetLPTIMClockSource>:
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	43db      	mvns	r3, r3
 8007a96:	401a      	ands	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	041b      	lsls	r3, r3, #16
 8007a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <LL_RCC_SetSAIClockSource>:
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <LL_RCC_SetRNGClockSource>:
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <LL_RCC_SetCLK48ClockSource>:
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <LL_RCC_SetUSBClockSource>:
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff ffe3 	bl	8007b0a <LL_RCC_SetCLK48ClockSource>
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <LL_RCC_SetADCClockSource>:
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <LL_RCC_GetUSARTClockSource>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4013      	ands	r3, r2
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <LL_RCC_GetLPUARTClockSource>:
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4013      	ands	r3, r2
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <LL_RCC_GetI2CClockSource>:
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8007bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	091a      	lsrs	r2, r3, #4
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	4313      	orrs	r3, r2
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <LL_RCC_GetLPTIMClockSource>:
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8007be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	0c1a      	lsrs	r2, r3, #16
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4313      	orrs	r3, r2
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <LL_RCC_GetSAIClockSource>:
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8007c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4013      	ands	r3, r2
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_RCC_GetRNGClockSource>:
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8007c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4013      	ands	r3, r2
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <LL_RCC_GetCLK48ClockSource>:
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8007c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4013      	ands	r3, r2
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <LL_RCC_GetUSBClockSource>:
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff ffe9 	bl	8007c46 <LL_RCC_GetCLK48ClockSource>
 8007c74:	4603      	mov	r3, r0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <LL_RCC_GetADCClockSource>:
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8007c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4013      	ands	r3, r2
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <LL_RCC_SetRTCClockSource>:
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <LL_RCC_GetRTCClockSource>:
{
 8007cca:	b480      	push	{r7}
 8007ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <LL_RCC_ForceBackupDomainReset>:
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007cfc:	bf00      	nop
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007d06:	b480      	push	{r7}
 8007d08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d1e:	bf00      	nop
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <LL_RCC_PLL_IsReady>:
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d3a:	d101      	bne.n	8007d40 <LL_RCC_PLL_IsReady+0x18>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <LL_RCC_PLL_IsReady+0x1a>
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <LL_RCC_PLL_GetN>:
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <LL_RCC_PLL_GetP>:
{
 8007d66:	b480      	push	{r7}
 8007d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <LL_RCC_PLL_GetQ>:
{
 8007d7e:	b480      	push	{r7}
 8007d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8007d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <LL_RCC_PLL_GetDivider>:
{
 8007d96:	b480      	push	{r7}
 8007d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <LL_RCC_PLLSAI1_Enable>:
{
 8007dae:	b480      	push	{r7}
 8007db0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dc0:	6013      	str	r3, [r2, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <LL_RCC_PLLSAI1_Disable>:
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dde:	6013      	str	r3, [r2, #0]
}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <LL_RCC_PLLSAI1_IsReady>:
{
 8007dea:	b480      	push	{r7}
 8007dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dfc:	d101      	bne.n	8007e02 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <LL_RCC_PLLSAI1_GetN>:
{
 8007e0e:	b480      	push	{r7}
 8007e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8007e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	0a1b      	lsrs	r3, r3, #8
 8007e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <LL_RCC_PLLSAI1_GetP>:
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8007e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <LL_RCC_PLLSAI1_GetQ>:
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8007e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_RCC_PLLSAI1_GetR>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <LL_RCC_PLL_GetMainSource>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007e90:	2300      	movs	r3, #0
 8007e92:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007e94:	2300      	movs	r3, #0
 8007e96:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d034      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007eac:	d021      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007eae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007eb2:	d81b      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eb8:	d01d      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007eba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ebe:	d815      	bhi.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ec8:	d110      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007eda:	e00d      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fd64 	bl	80089ae <RCCEx_PLLSAI1_ConfigNP>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007eea:	e005      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	77fb      	strb	r3, [r7, #31]
        break;
 8007ef0:	e002      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef8:	7ffb      	ldrb	r3, [r7, #31]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fdd5 	bl	8007ab2 <LL_RCC_SetSAIClockSource>
 8007f08:	e001      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
 8007f0c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d046      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007f1a:	f7ff fed6 	bl	8007cca <LL_RCC_GetRTCClockSource>
 8007f1e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d03c      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007f2a:	f7fe fa17 	bl	800635c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff feb0 	bl	8007c9e <LL_RCC_SetRTCClockSource>
 8007f3e:	e02e      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f48:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007f4a:	f7ff fecb 	bl	8007ce4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007f4e:	f7ff feda 	bl	8007d06 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007f6a:	f7ff fc3b 	bl	80077e4 <LL_RCC_LSE_IsEnabled>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d114      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f74:	f7fa fc1c 	bl	80027b0 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007f7a:	e00b      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f7c:	f7fa fc18 	bl	80027b0 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d902      	bls.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	77fb      	strb	r3, [r7, #31]
              break;
 8007f92:	e004      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007f94:	f7ff fc38 	bl	8007808 <LL_RCC_LSE_IsReady>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d1ee      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007f9e:	7ffb      	ldrb	r3, [r7, #31]
 8007fa0:	77bb      	strb	r3, [r7, #30]
 8007fa2:	e001      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	7ffb      	ldrb	r3, [r7, #31]
 8007fa6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7ff fd17 	bl	80079ec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d004      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fd22 	bl	8007a18 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff fd4a 	bl	8007a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d004      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fd3f 	bl	8007a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d004      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fd17 	bl	8007a44 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fd0c 	bl	8007a44 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d022      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fd7a 	bl	8007b36 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800804a:	d107      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800804c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800805a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008064:	d10b      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3304      	adds	r3, #4
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fcfa 	bl	8008a64 <RCCEx_PLLSAI1_ConfigNQ>
 8008070:	4603      	mov	r3, r0
 8008072:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8008074:	7ffb      	ldrb	r3, [r7, #31]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008086:	2b00      	cmp	r3, #0
 8008088:	d02b      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008092:	d008      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800809c:	d003      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d105      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fd17 	bl	8007ade <LL_RCC_SetRNGClockSource>
 80080b0:	e00a      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	2000      	movs	r0, #0
 80080be:	f7ff fd0e 	bl	8007ade <LL_RCC_SetRNGClockSource>
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7ff fd21 	bl	8007b0a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80080d0:	d107      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d022      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fd2a 	bl	8007b4c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008100:	d107      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800811a:	d10b      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fcfa 	bl	8008b1a <RCCEx_PLLSAI1_ConfigNR>
 8008126:	4603      	mov	r3, r0
 8008128:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800812a:	7ffb      	ldrb	r3, [r7, #31]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8008130:	7ffb      	ldrb	r3, [r7, #31]
 8008132:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff fbca 	bl	80078de <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fc26 	bl	80079ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff fc01 	bl	800796c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800816a:	7fbb      	ldrb	r3, [r7, #30]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008174:	b590      	push	{r4, r7, lr}
 8008176:	b093      	sub	sp, #76	; 0x4c
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8008180:	f7ff fc28 	bl	80079d4 <LL_RCC_GetSMPSPrescaler>
 8008184:	4603      	mov	r3, r0
 8008186:	091b      	lsrs	r3, r3, #4
 8008188:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008190:	d12d      	bne.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8008192:	f7ff fd9a 	bl	8007cca <LL_RCC_GetRTCClockSource>
 8008196:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d109      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80081a0:	f7ff fb32 	bl	8007808 <LL_RCC_LSE_IsReady>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	f040 83d8 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80081ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b0:	647b      	str	r3, [r7, #68]	; 0x44
 80081b2:	e3d3      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ba:	d110      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80081bc:	f7ff fb36 	bl	800782c <LL_RCC_LSI1_IsReady>
 80081c0:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80081c2:	f7ff fb45 	bl	8007850 <LL_RCC_LSI2_IsReady>
 80081c6:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d003      	beq.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	f040 83c3 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80081d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80081da:	647b      	str	r3, [r7, #68]	; 0x44
 80081dc:	e3be      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081e4:	f040 83ba 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 80081e8:	4bba      	ldr	r3, [pc, #744]	; (80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80081ea:	647b      	str	r3, [r7, #68]	; 0x44
 80081ec:	e3b6      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d130      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80081f4:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80081f8:	f7ff fd05 	bl	8007c06 <LL_RCC_GetSAIClockSource>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008202:	d008      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008208:	d822      	bhi.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800820e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008212:	d013      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8008214:	e01c      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 8008216:	f7ff fac1 	bl	800779c <LL_RCC_HSI_IsReady>
 800821a:	4603      	mov	r3, r0
 800821c:	2b01      	cmp	r3, #1
 800821e:	f040 837e 	bne.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8008222:	4bad      	ldr	r3, [pc, #692]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8008224:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008226:	e37a      	b.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8008228:	f7ff fddf 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 800822c:	4603      	mov	r3, r0
 800822e:	2b01      	cmp	r3, #1
 8008230:	f040 8377 	bne.w	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8008234:	f000 fdce 	bl	8008dd4 <RCC_PLLSAI1_GetFreqDomain_P>
 8008238:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800823a:	e372      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 800823c:	f7ff fd74 	bl	8007d28 <LL_RCC_PLL_IsReady>
 8008240:	4603      	mov	r3, r0
 8008242:	2b01      	cmp	r3, #1
 8008244:	f040 836f 	bne.w	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 8008248:	f000 fcc2 	bl	8008bd0 <RCC_PLL_GetFreqDomain_P>
 800824c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800824e:	e36a      	b.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008250:	4ba2      	ldr	r3, [pc, #648]	; (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8008252:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8008254:	e382      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825c:	d168      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800825e:	f000 fb87 	bl	8008970 <HAL_RCCEx_GetRngCLKSource>
 8008262:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d110      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800826c:	f7ff fade 	bl	800782c <LL_RCC_LSI1_IsReady>
 8008270:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8008272:	f7ff faed 	bl	8007850 <LL_RCC_LSI2_IsReady>
 8008276:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d003      	beq.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 836b 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8008286:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800828a:	647b      	str	r3, [r7, #68]	; 0x44
 800828c:	e366      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008294:	d109      	bne.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8008296:	f7ff fab7 	bl	8007808 <LL_RCC_LSE_IsReady>
 800829a:	4603      	mov	r3, r0
 800829c:	2b01      	cmp	r3, #1
 800829e:	f040 835d 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80082a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a6:	647b      	str	r3, [r7, #68]	; 0x44
 80082a8:	e358      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80082b0:	d10e      	bne.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80082b2:	f7ff fd39 	bl	8007d28 <LL_RCC_PLL_IsReady>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	f040 834f 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80082be:	f000 fcdd 	bl	8008c7c <RCC_PLL_GetFreqDomain_Q>
 80082c2:	4603      	mov	r3, r0
 80082c4:	4a86      	ldr	r2, [pc, #536]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	647b      	str	r3, [r7, #68]	; 0x44
 80082ce:	e345      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80082d6:	d114      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80082d8:	f7ff facc 	bl	8007874 <LL_RCC_MSI_IsReady>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b01      	cmp	r3, #1
 80082e0:	f040 833c 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80082e4:	f7ff fae6 	bl	80078b4 <LL_RCC_MSI_GetRange>
 80082e8:	4603      	mov	r3, r0
 80082ea:	091b      	lsrs	r3, r3, #4
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	4a7c      	ldr	r2, [pc, #496]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80082f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f6:	4a7a      	ldr	r2, [pc, #488]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008300:	e32c      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 8008308:	d109      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800830a:	f7ff fd6e 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 800830e:	4603      	mov	r3, r0
 8008310:	2b01      	cmp	r3, #1
 8008312:	f040 8323 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8008316:	f000 fdb3 	bl	8008e80 <RCC_PLLSAI1_GetFreqDomain_Q>
 800831a:	6478      	str	r0, [r7, #68]	; 0x44
 800831c:	e31e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 800831e:	f7ff fa4f 	bl	80077c0 <LL_RCC_HSI48_IsReady>
 8008322:	4603      	mov	r3, r0
 8008324:	2b01      	cmp	r3, #1
 8008326:	f040 8319 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 800832a:	4b6b      	ldr	r3, [pc, #428]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800832c:	647b      	str	r3, [r7, #68]	; 0x44
 800832e:	e315      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008336:	d13f      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8008338:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800833c:	f7ff fc93 	bl	8007c66 <LL_RCC_GetUSBClockSource>
 8008340:	4603      	mov	r3, r0
 8008342:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008346:	d01d      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8008348:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800834c:	d82b      	bhi.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800834e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008352:	d003      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8008354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008358:	d00a      	beq.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800835a:	e024      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800835c:	f7ff fd45 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	f040 82e1 	bne.w	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8008368:	f000 fd8a 	bl	8008e80 <RCC_PLLSAI1_GetFreqDomain_Q>
 800836c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800836e:	e2dc      	b.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8008370:	f7ff fcda 	bl	8007d28 <LL_RCC_PLL_IsReady>
 8008374:	4603      	mov	r3, r0
 8008376:	2b01      	cmp	r3, #1
 8008378:	f040 82d9 	bne.w	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 800837c:	f000 fc7e 	bl	8008c7c <RCC_PLL_GetFreqDomain_Q>
 8008380:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008382:	e2d4      	b.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8008384:	f7ff fa76 	bl	8007874 <LL_RCC_MSI_IsReady>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	f040 82d1 	bne.w	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008390:	f7ff fa90 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008394:	4603      	mov	r3, r0
 8008396:	091b      	lsrs	r3, r3, #4
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	4a51      	ldr	r2, [pc, #324]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80083a4:	e2c5      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 80083a6:	f7ff fa0b 	bl	80077c0 <LL_RCC_HSI48_IsReady>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	f040 82c2 	bne.w	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 80083b2:	4b4d      	ldr	r3, [pc, #308]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80083b6:	e2be      	b.n	8008936 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d140      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80083be:	2003      	movs	r0, #3
 80083c0:	f7ff fbda 	bl	8007b78 <LL_RCC_GetUSARTClockSource>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d013      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d81b      	bhi.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d002      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d004      	beq.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80083d6:	e016      	b.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80083d8:	f7ff f83c 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 80083dc:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80083de:	e2bd      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80083e0:	f7ff f9dc 	bl	800779c <LL_RCC_HSI_IsReady>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	f040 82a7 	bne.w	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 80083ec:	4b3a      	ldr	r3, [pc, #232]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80083ee:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80083f0:	e2a3      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 80083f2:	f7ff fa09 	bl	8007808 <LL_RCC_LSE_IsReady>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	f040 82a0 	bne.w	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 80083fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008402:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008404:	e29b      	b.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8008406:	f7ff f825 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800840a:	4604      	mov	r4, r0
 800840c:	f7ff fa8a 	bl	8007924 <LL_RCC_GetAHBPrescaler>
 8008410:	4603      	mov	r3, r0
 8008412:	091b      	lsrs	r3, r3, #4
 8008414:	f003 030f 	and.w	r3, r3, #15
 8008418:	4a34      	ldr	r2, [pc, #208]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800841a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841e:	fbb4 f4f3 	udiv	r4, r4, r3
 8008422:	f7ff fa97 	bl	8007954 <LL_RCC_GetAPB2Prescaler>
 8008426:	4603      	mov	r3, r0
 8008428:	0adb      	lsrs	r3, r3, #11
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	4a30      	ldr	r2, [pc, #192]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8008430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008434:	f003 031f 	and.w	r3, r3, #31
 8008438:	fa24 f303 	lsr.w	r3, r4, r3
 800843c:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800843e:	e28d      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d156      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8008446:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800844a:	f7ff fba5 	bl	8007b98 <LL_RCC_GetLPUARTClockSource>
 800844e:	4603      	mov	r3, r0
 8008450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008454:	d016      	beq.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8008456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800845a:	d81d      	bhi.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800845c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008460:	d003      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8008462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008466:	d004      	beq.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008468:	e016      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800846a:	f7fe fff3 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800846e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8008470:	e274      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8008472:	f7ff f993 	bl	800779c <LL_RCC_HSI_IsReady>
 8008476:	4603      	mov	r3, r0
 8008478:	2b01      	cmp	r3, #1
 800847a:	f040 8262 	bne.w	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800847e:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8008480:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008482:	e25e      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8008484:	f7ff f9c0 	bl	8007808 <LL_RCC_LSE_IsReady>
 8008488:	4603      	mov	r3, r0
 800848a:	2b01      	cmp	r3, #1
 800848c:	f040 825b 	bne.w	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 8008490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008494:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008496:	e256      	b.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8008498:	f7fe ffdc 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800849c:	4604      	mov	r4, r0
 800849e:	f7ff fa41 	bl	8007924 <LL_RCC_GetAHBPrescaler>
 80084a2:	4603      	mov	r3, r0
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	f003 030f 	and.w	r3, r3, #15
 80084aa:	4a10      	ldr	r2, [pc, #64]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80084ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80084b4:	f7ff fa42 	bl	800793c <LL_RCC_GetAPB1Prescaler>
 80084b8:	4603      	mov	r3, r0
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	f003 0307 	and.w	r3, r3, #7
 80084c0:	4a0b      	ldr	r2, [pc, #44]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80084c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	fa24 f303 	lsr.w	r3, r4, r3
 80084ce:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80084d0:	e244      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80084d2:	bf00      	nop
 80084d4:	000f4240 	.word	0x000f4240
 80084d8:	00f42400 	.word	0x00f42400
 80084dc:	001fff68 	.word	0x001fff68
 80084e0:	aaaaaaab 	.word	0xaaaaaaab
 80084e4:	0801440c 	.word	0x0801440c
 80084e8:	02dc6c00 	.word	0x02dc6c00
 80084ec:	080143ac 	.word	0x080143ac
 80084f0:	080143ec 	.word	0x080143ec
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084fa:	d12a      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 80084fc:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8008500:	f7ff fbbd 	bl	8007c7e <LL_RCC_GetADCClockSource>
 8008504:	4603      	mov	r3, r0
 8008506:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800850a:	d014      	beq.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800850c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008510:	f200 821b 	bhi.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8008514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008518:	d003      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800851a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800851e:	d00e      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 8008520:	e213      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8008522:	f7ff fc62 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008526:	4603      	mov	r3, r0
 8008528:	2b01      	cmp	r3, #1
 800852a:	f040 8210 	bne.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800852e:	f000 fbfb 	bl	8008d28 <RCC_PLLSAI1_GetFreqDomain_R>
 8008532:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8008534:	e20b      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 8008536:	f7fe ff8d 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800853a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800853c:	e20e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800853e:	f7ff fbf3 	bl	8007d28 <LL_RCC_PLL_IsReady>
 8008542:	4603      	mov	r3, r0
 8008544:	2b01      	cmp	r3, #1
 8008546:	f040 8204 	bne.w	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800854a:	f000 fb41 	bl	8008bd0 <RCC_PLL_GetFreqDomain_P>
 800854e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8008550:	e1ff      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d135      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8008558:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800855c:	f7ff fb2c 	bl	8007bb8 <LL_RCC_GetI2CClockSource>
 8008560:	4603      	mov	r3, r0
 8008562:	4ab7      	ldr	r2, [pc, #732]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008568:	4ab6      	ldr	r2, [pc, #728]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800856e:	e00c      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8008570:	f7fe ff70 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8008574:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8008576:	e1f1      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8008578:	f7ff f910 	bl	800779c <LL_RCC_HSI_IsReady>
 800857c:	4603      	mov	r3, r0
 800857e:	2b01      	cmp	r3, #1
 8008580:	f040 81e9 	bne.w	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8008584:	4bb0      	ldr	r3, [pc, #704]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8008588:	e1e5      	b.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800858a:	f7fe ff63 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800858e:	4604      	mov	r4, r0
 8008590:	f7ff f9c8 	bl	8007924 <LL_RCC_GetAHBPrescaler>
 8008594:	4603      	mov	r3, r0
 8008596:	091b      	lsrs	r3, r3, #4
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	4aab      	ldr	r2, [pc, #684]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800859e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80085a6:	f7ff f9c9 	bl	800793c <LL_RCC_GetAPB1Prescaler>
 80085aa:	4603      	mov	r3, r0
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	4aa7      	ldr	r2, [pc, #668]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80085b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b8:	f003 031f 	and.w	r3, r3, #31
 80085bc:	fa24 f303 	lsr.w	r3, r4, r3
 80085c0:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80085c2:	e1cb      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d135      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80085ca:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80085ce:	f7ff faf3 	bl	8007bb8 <LL_RCC_GetI2CClockSource>
 80085d2:	4603      	mov	r3, r0
 80085d4:	4a9f      	ldr	r2, [pc, #636]	; (8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d003      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80085da:	4a9f      	ldr	r2, [pc, #636]	; (8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80085e0:	e00c      	b.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80085e2:	f7fe ff37 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 80085e6:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80085e8:	e1b8      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80085ea:	f7ff f8d7 	bl	800779c <LL_RCC_HSI_IsReady>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	f040 81b2 	bne.w	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 80085f6:	4b94      	ldr	r3, [pc, #592]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80085f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80085fa:	e1ae      	b.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80085fc:	f7fe ff2a 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8008600:	4604      	mov	r4, r0
 8008602:	f7ff f98f 	bl	8007924 <LL_RCC_GetAHBPrescaler>
 8008606:	4603      	mov	r3, r0
 8008608:	091b      	lsrs	r3, r3, #4
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	4a8f      	ldr	r2, [pc, #572]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8008610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008614:	fbb4 f4f3 	udiv	r4, r4, r3
 8008618:	f7ff f990 	bl	800793c <LL_RCC_GetAPB1Prescaler>
 800861c:	4603      	mov	r3, r0
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	4a8a      	ldr	r2, [pc, #552]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	fa24 f303 	lsr.w	r3, r4, r3
 8008632:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8008634:	e192      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b10      	cmp	r3, #16
 800863a:	d151      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 800863c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8008640:	f7ff face 	bl	8007be0 <LL_RCC_GetLPTIMClockSource>
 8008644:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	4a84      	ldr	r2, [pc, #528]	; (800885c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d110      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800864e:	f7ff f8ed 	bl	800782c <LL_RCC_LSI1_IsReady>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8008654:	f7ff f8fc 	bl	8007850 <LL_RCC_LSI2_IsReady>
 8008658:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	2b01      	cmp	r3, #1
 800865e:	d003      	beq.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	2b01      	cmp	r3, #1
 8008664:	f040 817a 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8008668:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800866c:	647b      	str	r3, [r7, #68]	; 0x44
 800866e:	e175      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	4a7b      	ldr	r2, [pc, #492]	; (8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d108      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8008678:	f7ff f890 	bl	800779c <LL_RCC_HSI_IsReady>
 800867c:	4603      	mov	r3, r0
 800867e:	2b01      	cmp	r3, #1
 8008680:	f040 816c 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8008684:	4b70      	ldr	r3, [pc, #448]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8008686:	647b      	str	r3, [r7, #68]	; 0x44
 8008688:	e168      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8008690:	d109      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8008692:	f7ff f8b9 	bl	8007808 <LL_RCC_LSE_IsReady>
 8008696:	4603      	mov	r3, r0
 8008698:	2b01      	cmp	r3, #1
 800869a:	f040 815f 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a2:	647b      	str	r3, [r7, #68]	; 0x44
 80086a4:	e15a      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80086a6:	f7fe fed5 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 80086aa:	4604      	mov	r4, r0
 80086ac:	f7ff f93a 	bl	8007924 <LL_RCC_GetAHBPrescaler>
 80086b0:	4603      	mov	r3, r0
 80086b2:	091b      	lsrs	r3, r3, #4
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	4a64      	ldr	r2, [pc, #400]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80086ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086be:	fbb4 f4f3 	udiv	r4, r4, r3
 80086c2:	f7ff f93b 	bl	800793c <LL_RCC_GetAPB1Prescaler>
 80086c6:	4603      	mov	r3, r0
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	4a60      	ldr	r2, [pc, #384]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80086d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	fa24 f303 	lsr.w	r3, r4, r3
 80086dc:	647b      	str	r3, [r7, #68]	; 0x44
 80086de:	e13d      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d151      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 80086e6:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80086ea:	f7ff fa79 	bl	8007be0 <LL_RCC_GetLPTIMClockSource>
 80086ee:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	4a5c      	ldr	r2, [pc, #368]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d110      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80086f8:	f7ff f898 	bl	800782c <LL_RCC_LSI1_IsReady>
 80086fc:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80086fe:	f7ff f8a7 	bl	8007850 <LL_RCC_LSI2_IsReady>
 8008702:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	2b01      	cmp	r3, #1
 8008708:	d003      	beq.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b01      	cmp	r3, #1
 800870e:	f040 8125 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8008712:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008716:	647b      	str	r3, [r7, #68]	; 0x44
 8008718:	e120      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	4a52      	ldr	r2, [pc, #328]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8008722:	f7ff f83b 	bl	800779c <LL_RCC_HSI_IsReady>
 8008726:	4603      	mov	r3, r0
 8008728:	2b01      	cmp	r3, #1
 800872a:	f040 8117 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 800872e:	4b46      	ldr	r3, [pc, #280]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8008730:	647b      	str	r3, [r7, #68]	; 0x44
 8008732:	e113      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800873a:	d109      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800873c:	f7ff f864 	bl	8007808 <LL_RCC_LSE_IsReady>
 8008740:	4603      	mov	r3, r0
 8008742:	2b01      	cmp	r3, #1
 8008744:	f040 810a 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 8008748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
 800874e:	e105      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8008750:	f7fe fe80 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8008754:	4604      	mov	r4, r0
 8008756:	f7ff f8e5 	bl	8007924 <LL_RCC_GetAHBPrescaler>
 800875a:	4603      	mov	r3, r0
 800875c:	091b      	lsrs	r3, r3, #4
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	4a3a      	ldr	r2, [pc, #232]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8008764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008768:	fbb4 f4f3 	udiv	r4, r4, r3
 800876c:	f7ff f8e6 	bl	800793c <LL_RCC_GetAPB1Prescaler>
 8008770:	4603      	mov	r3, r0
 8008772:	0a1b      	lsrs	r3, r3, #8
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	4a35      	ldr	r2, [pc, #212]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800877a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	fa24 f303 	lsr.w	r3, r4, r3
 8008786:	647b      	str	r3, [r7, #68]	; 0x44
 8008788:	e0e8      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008790:	d119      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8008792:	f7ff f8ba 	bl	800790a <LL_RCC_GetRFWKPClockSource>
 8008796:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800879e:	d109      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80087a0:	f7ff f832 	bl	8007808 <LL_RCC_LSE_IsReady>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	f040 80d8 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80087ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b0:	647b      	str	r3, [r7, #68]	; 0x44
 80087b2:	e0d3      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087ba:	f040 80cf 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 80087be:	f647 2312 	movw	r3, #31250	; 0x7a12
 80087c2:	647b      	str	r3, [r7, #68]	; 0x44
 80087c4:	e0ca      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087cc:	f040 80c6 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 80087d0:	f7ff f8e0 	bl	8007994 <LL_RCC_GetSMPSClockSource>
 80087d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 80087d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d115      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80087dc:	f7fe ffde 	bl	800779c <LL_RCC_HSI_IsReady>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	f040 80ba 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 80087e8:	4920      	ldr	r1, [pc, #128]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80087ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ec:	4613      	mov	r3, r2
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	440b      	add	r3, r1
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a13      	ldr	r2, [pc, #76]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80087fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fe:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	647b      	str	r3, [r7, #68]	; 0x44
 8008806:	e0a9      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8008808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800880e:	d131      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8008810:	f7fe ffb2 	bl	8007778 <LL_RCC_HSE_IsReady>
 8008814:	4603      	mov	r3, r0
 8008816:	2b01      	cmp	r3, #1
 8008818:	f040 80a0 	bne.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 800881c:	4913      	ldr	r1, [pc, #76]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800881e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008820:	4613      	mov	r3, r2
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	4413      	add	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	440b      	add	r3, r1
 800882a:	3314      	adds	r3, #20
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a10      	ldr	r2, [pc, #64]	; (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8008830:	fbb2 f3f3 	udiv	r3, r2, r3
 8008834:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8008836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
 800883c:	e08e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800883e:	bf00      	nop
 8008840:	00030100 	.word	0x00030100
 8008844:	00030200 	.word	0x00030200
 8008848:	00f42400 	.word	0x00f42400
 800884c:	080143ac 	.word	0x080143ac
 8008850:	080143ec 	.word	0x080143ec
 8008854:	00301000 	.word	0x00301000
 8008858:	00302000 	.word	0x00302000
 800885c:	000c0004 	.word	0x000c0004
 8008860:	000c0008 	.word	0x000c0008
 8008864:	00300010 	.word	0x00300010
 8008868:	00300020 	.word	0x00300020
 800886c:	0801444c 	.word	0x0801444c
 8008870:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8008874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800887a:	d16f      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 800887c:	f7ff f81a 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008880:	4603      	mov	r3, r0
 8008882:	2bb0      	cmp	r3, #176	; 0xb0
 8008884:	d037      	beq.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008886:	2bb0      	cmp	r3, #176	; 0xb0
 8008888:	d844      	bhi.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800888a:	2ba0      	cmp	r3, #160	; 0xa0
 800888c:	d024      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 800888e:	2ba0      	cmp	r3, #160	; 0xa0
 8008890:	d840      	bhi.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008892:	2b80      	cmp	r3, #128	; 0x80
 8008894:	d002      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008896:	2b90      	cmp	r3, #144	; 0x90
 8008898:	d00f      	beq.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 800889a:	e03b      	b.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 800889c:	4b32      	ldr	r3, [pc, #200]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800889e:	6a19      	ldr	r1, [r3, #32]
 80088a0:	4832      	ldr	r0, [pc, #200]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80088a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088a4:	4613      	mov	r3, r2
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	4413      	add	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4403      	add	r3, r0
 80088ae:	3310      	adds	r3, #16
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80088b6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80088b8:	e02d      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 80088ba:	4b2b      	ldr	r3, [pc, #172]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80088bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80088be:	482b      	ldr	r0, [pc, #172]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80088c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088c2:	4613      	mov	r3, r2
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	4403      	add	r3, r0
 80088cc:	330c      	adds	r3, #12
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80088d4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80088d6:	e01e      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80088d8:	4b23      	ldr	r3, [pc, #140]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80088da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80088dc:	4823      	ldr	r0, [pc, #140]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80088de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e0:	4613      	mov	r3, r2
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	4413      	add	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	4403      	add	r3, r0
 80088ea:	3308      	adds	r3, #8
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80088f2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80088f4:	e00f      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 80088f6:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80088f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80088fa:	481c      	ldr	r0, [pc, #112]	; (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80088fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088fe:	4613      	mov	r3, r2
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4413      	add	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	4403      	add	r3, r0
 8008908:	3304      	adds	r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008910:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008912:	e000      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8008914:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	085b      	lsrs	r3, r3, #1
 800891a:	647b      	str	r3, [r7, #68]	; 0x44
 800891c:	e01e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800891e:	bf00      	nop
 8008920:	e01c      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008922:	bf00      	nop
 8008924:	e01a      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008926:	bf00      	nop
 8008928:	e018      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800892a:	bf00      	nop
 800892c:	e016      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800892e:	bf00      	nop
 8008930:	e014      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008932:	bf00      	nop
 8008934:	e012      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008936:	bf00      	nop
 8008938:	e010      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800893a:	bf00      	nop
 800893c:	e00e      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800893e:	bf00      	nop
 8008940:	e00c      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008942:	bf00      	nop
 8008944:	e00a      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008946:	bf00      	nop
 8008948:	e008      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800894a:	bf00      	nop
 800894c:	e006      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800894e:	bf00      	nop
 8008950:	e004      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800895a:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 800895c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800895e:	4618      	mov	r0, r3
 8008960:	374c      	adds	r7, #76	; 0x4c
 8008962:	46bd      	mov	sp, r7
 8008964:	bd90      	pop	{r4, r7, pc}
 8008966:	bf00      	nop
 8008968:	0801440c 	.word	0x0801440c
 800896c:	0801444c 	.word	0x0801444c

08008970 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8008976:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800897a:	f7ff f954 	bl	8007c26 <LL_RCC_GetRNGClockSource>
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d108      	bne.n	8008998 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8008986:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800898a:	f7ff f95c 	bl	8007c46 <LL_RCC_GetCLK48ClockSource>
 800898e:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008996:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8008998:	687b      	ldr	r3, [r7, #4]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80089a6:	f7fe ff76 	bl	8007896 <LL_RCC_MSI_EnablePLLMode>
}
 80089aa:	bf00      	nop
 80089ac:	bd80      	pop	{r7, pc}

080089ae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80089ba:	f7ff fa07 	bl	8007dcc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089be:	f7f9 fef7 	bl	80027b0 <HAL_GetTick>
 80089c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80089c4:	e009      	b.n	80089da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80089c6:	f7f9 fef3 	bl	80027b0 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d902      	bls.n	80089da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	73fb      	strb	r3, [r7, #15]
      break;
 80089d8:	e004      	b.n	80089e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80089da:	f7ff fa06 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1f0      	bne.n	80089c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d137      	bne.n	8008a5a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80089ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089fe:	4313      	orrs	r3, r2
 8008a00:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a14:	4313      	orrs	r3, r2
 8008a16:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008a18:	f7ff f9c9 	bl	8007dae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1c:	f7f9 fec8 	bl	80027b0 <HAL_GetTick>
 8008a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a22:	e009      	b.n	8008a38 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a24:	f7f9 fec4 	bl	80027b0 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d902      	bls.n	8008a38 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	73fb      	strb	r3, [r7, #15]
        break;
 8008a36:	e004      	b.n	8008a42 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008a38:	f7ff f9d7 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d1f0      	bne.n	8008a24 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d108      	bne.n	8008a5a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4c:	691a      	ldr	r2, [r3, #16]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a56:	4313      	orrs	r3, r2
 8008a58:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008a70:	f7ff f9ac 	bl	8007dcc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a74:	f7f9 fe9c 	bl	80027b0 <HAL_GetTick>
 8008a78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a7a:	e009      	b.n	8008a90 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a7c:	f7f9 fe98 	bl	80027b0 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d902      	bls.n	8008a90 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8e:	e004      	b.n	8008a9a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008a90:	f7ff f9ab 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d137      	bne.n	8008b10 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008aca:	4313      	orrs	r3, r2
 8008acc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008ace:	f7ff f96e 	bl	8007dae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ad2:	f7f9 fe6d 	bl	80027b0 <HAL_GetTick>
 8008ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ad8:	e009      	b.n	8008aee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ada:	f7f9 fe69 	bl	80027b0 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d902      	bls.n	8008aee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	73fb      	strb	r3, [r7, #15]
        break;
 8008aec:	e004      	b.n	8008af8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008aee:	f7ff f97c 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d1f0      	bne.n	8008ada <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d108      	bne.n	8008b10 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008b26:	f7ff f951 	bl	8007dcc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b2a:	f7f9 fe41 	bl	80027b0 <HAL_GetTick>
 8008b2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008b30:	e009      	b.n	8008b46 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b32:	f7f9 fe3d 	bl	80027b0 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d902      	bls.n	8008b46 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	73fb      	strb	r3, [r7, #15]
      break;
 8008b44:	e004      	b.n	8008b50 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008b46:	f7ff f950 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1f0      	bne.n	8008b32 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d137      	bne.n	8008bc6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b80:	4313      	orrs	r3, r2
 8008b82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008b84:	f7ff f913 	bl	8007dae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b88:	f7f9 fe12 	bl	80027b0 <HAL_GetTick>
 8008b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008b8e:	e009      	b.n	8008ba4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b90:	f7f9 fe0e 	bl	80027b0 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d902      	bls.n	8008ba4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ba2:	e004      	b.n	8008bae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ba4:	f7ff f921 	bl	8007dea <LL_RCC_PLLSAI1_IsReady>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d1f0      	bne.n	8008b90 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d108      	bne.n	8008bc6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bb8:	691a      	ldr	r2, [r3, #16]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008bd6:	f7ff f94b 	bl	8007e70 <LL_RCC_PLL_GetMainSource>
 8008bda:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d017      	beq.n	8008c12 <RCC_PLL_GetFreqDomain_P+0x42>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d81f      	bhi.n	8008c28 <RCC_PLL_GetFreqDomain_P+0x58>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d003      	beq.n	8008bf6 <RCC_PLL_GetFreqDomain_P+0x26>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d00b      	beq.n	8008c0c <RCC_PLL_GetFreqDomain_P+0x3c>
 8008bf4:	e018      	b.n	8008c28 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008bf6:	f7fe fe5d 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	091b      	lsrs	r3, r3, #4
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8008c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c08:	607b      	str	r3, [r7, #4]
      break;
 8008c0a:	e018      	b.n	8008c3e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008c0c:	4b19      	ldr	r3, [pc, #100]	; (8008c74 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8008c0e:	607b      	str	r3, [r7, #4]
      break;
 8008c10:	e015      	b.n	8008c3e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008c12:	f7fe fd9f 	bl	8007754 <LL_RCC_HSE_IsEnabledDiv2>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d102      	bne.n	8008c22 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008c1c:	4b15      	ldr	r3, [pc, #84]	; (8008c74 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8008c1e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008c20:	e00d      	b.n	8008c3e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8008c22:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8008c24:	607b      	str	r3, [r7, #4]
      break;
 8008c26:	e00a      	b.n	8008c3e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008c28:	f7fe fe44 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	091b      	lsrs	r3, r3, #4
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	4a0e      	ldr	r2, [pc, #56]	; (8008c70 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8008c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c3a:	607b      	str	r3, [r7, #4]
      break;
 8008c3c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008c3e:	f7ff f885 	bl	8007d4c <LL_RCC_PLL_GetN>
 8008c42:	4602      	mov	r2, r0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	fb03 f402 	mul.w	r4, r3, r2
 8008c4a:	f7ff f8a4 	bl	8007d96 <LL_RCC_PLL_GetDivider>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	091b      	lsrs	r3, r3, #4
 8008c52:	3301      	adds	r3, #1
 8008c54:	fbb4 f4f3 	udiv	r4, r4, r3
 8008c58:	f7ff f885 	bl	8007d66 <LL_RCC_PLL_GetP>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	0c5b      	lsrs	r3, r3, #17
 8008c60:	3301      	adds	r3, #1
 8008c62:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd90      	pop	{r4, r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	0801440c 	.word	0x0801440c
 8008c74:	00f42400 	.word	0x00f42400
 8008c78:	01e84800 	.word	0x01e84800

08008c7c <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8008c7c:	b590      	push	{r4, r7, lr}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008c82:	f7ff f8f5 	bl	8007e70 <LL_RCC_PLL_GetMainSource>
 8008c86:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d017      	beq.n	8008cbe <RCC_PLL_GetFreqDomain_Q+0x42>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d81f      	bhi.n	8008cd4 <RCC_PLL_GetFreqDomain_Q+0x58>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d003      	beq.n	8008ca2 <RCC_PLL_GetFreqDomain_Q+0x26>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d00b      	beq.n	8008cb8 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8008ca0:	e018      	b.n	8008cd4 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ca2:	f7fe fe07 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8008cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb4:	607b      	str	r3, [r7, #4]
      break;
 8008cb6:	e018      	b.n	8008cea <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8008cb8:	4b19      	ldr	r3, [pc, #100]	; (8008d20 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8008cba:	607b      	str	r3, [r7, #4]
      break;
 8008cbc:	e015      	b.n	8008cea <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008cbe:	f7fe fd49 	bl	8007754 <LL_RCC_HSE_IsEnabledDiv2>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d102      	bne.n	8008cce <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008cc8:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8008cca:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8008ccc:	e00d      	b.n	8008cea <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8008cce:	4b15      	ldr	r3, [pc, #84]	; (8008d24 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8008cd0:	607b      	str	r3, [r7, #4]
      break;
 8008cd2:	e00a      	b.n	8008cea <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008cd4:	f7fe fdee 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	091b      	lsrs	r3, r3, #4
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	4a0e      	ldr	r2, [pc, #56]	; (8008d1c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8008ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ce6:	607b      	str	r3, [r7, #4]
      break;
 8008ce8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008cea:	f7ff f82f 	bl	8007d4c <LL_RCC_PLL_GetN>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	fb03 f402 	mul.w	r4, r3, r2
 8008cf6:	f7ff f84e 	bl	8007d96 <LL_RCC_PLL_GetDivider>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	091b      	lsrs	r3, r3, #4
 8008cfe:	3301      	adds	r3, #1
 8008d00:	fbb4 f4f3 	udiv	r4, r4, r3
 8008d04:	f7ff f83b 	bl	8007d7e <LL_RCC_PLL_GetQ>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	0e5b      	lsrs	r3, r3, #25
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd90      	pop	{r4, r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	0801440c 	.word	0x0801440c
 8008d20:	00f42400 	.word	0x00f42400
 8008d24:	01e84800 	.word	0x01e84800

08008d28 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008d2e:	f7ff f89f 	bl	8007e70 <LL_RCC_PLL_GetMainSource>
 8008d32:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d017      	beq.n	8008d6a <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d81f      	bhi.n	8008d80 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d003      	beq.n	8008d4e <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d00b      	beq.n	8008d64 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8008d4c:	e018      	b.n	8008d80 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008d4e:	f7fe fdb1 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008d52:	4603      	mov	r3, r0
 8008d54:	091b      	lsrs	r3, r3, #4
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8008d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d60:	607b      	str	r3, [r7, #4]
      break;
 8008d62:	e018      	b.n	8008d96 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008d64:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8008d66:	607b      	str	r3, [r7, #4]
      break;
 8008d68:	e015      	b.n	8008d96 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008d6a:	f7fe fcf3 	bl	8007754 <LL_RCC_HSE_IsEnabledDiv2>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d102      	bne.n	8008d7a <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008d74:	4b15      	ldr	r3, [pc, #84]	; (8008dcc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8008d76:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008d78:	e00d      	b.n	8008d96 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8008d7c:	607b      	str	r3, [r7, #4]
      break;
 8008d7e:	e00a      	b.n	8008d96 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008d80:	f7fe fd98 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008d84:	4603      	mov	r3, r0
 8008d86:	091b      	lsrs	r3, r3, #4
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	4a0e      	ldr	r2, [pc, #56]	; (8008dc8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8008d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d92:	607b      	str	r3, [r7, #4]
      break;
 8008d94:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008d96:	f7ff f83a 	bl	8007e0e <LL_RCC_PLLSAI1_GetN>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	fb03 f402 	mul.w	r4, r3, r2
 8008da2:	f7fe fff8 	bl	8007d96 <LL_RCC_PLL_GetDivider>
 8008da6:	4603      	mov	r3, r0
 8008da8:	091b      	lsrs	r3, r3, #4
 8008daa:	3301      	adds	r3, #1
 8008dac:	fbb4 f4f3 	udiv	r4, r4, r3
 8008db0:	f7ff f852 	bl	8007e58 <LL_RCC_PLLSAI1_GetR>
 8008db4:	4603      	mov	r3, r0
 8008db6:	0f5b      	lsrs	r3, r3, #29
 8008db8:	3301      	adds	r3, #1
 8008dba:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd90      	pop	{r4, r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	0801440c 	.word	0x0801440c
 8008dcc:	00f42400 	.word	0x00f42400
 8008dd0:	01e84800 	.word	0x01e84800

08008dd4 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8008dd4:	b590      	push	{r4, r7, lr}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008dda:	f7ff f849 	bl	8007e70 <LL_RCC_PLL_GetMainSource>
 8008dde:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d017      	beq.n	8008e16 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d81f      	bhi.n	8008e2c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d003      	beq.n	8008dfa <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d00b      	beq.n	8008e10 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8008df8:	e018      	b.n	8008e2c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008dfa:	f7fe fd5b 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	091b      	lsrs	r3, r3, #4
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	4a1b      	ldr	r2, [pc, #108]	; (8008e74 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8008e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e0c:	607b      	str	r3, [r7, #4]
      break;
 8008e0e:	e018      	b.n	8008e42 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008e10:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8008e12:	607b      	str	r3, [r7, #4]
      break;
 8008e14:	e015      	b.n	8008e42 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008e16:	f7fe fc9d 	bl	8007754 <LL_RCC_HSE_IsEnabledDiv2>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d102      	bne.n	8008e26 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8008e22:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008e24:	e00d      	b.n	8008e42 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8008e28:	607b      	str	r3, [r7, #4]
      break;
 8008e2a:	e00a      	b.n	8008e42 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008e2c:	f7fe fd42 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008e30:	4603      	mov	r3, r0
 8008e32:	091b      	lsrs	r3, r3, #4
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	4a0e      	ldr	r2, [pc, #56]	; (8008e74 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8008e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e3e:	607b      	str	r3, [r7, #4]
      break;
 8008e40:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008e42:	f7fe ffe4 	bl	8007e0e <LL_RCC_PLLSAI1_GetN>
 8008e46:	4602      	mov	r2, r0
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	fb03 f402 	mul.w	r4, r3, r2
 8008e4e:	f7fe ffa2 	bl	8007d96 <LL_RCC_PLL_GetDivider>
 8008e52:	4603      	mov	r3, r0
 8008e54:	091b      	lsrs	r3, r3, #4
 8008e56:	3301      	adds	r3, #1
 8008e58:	fbb4 f4f3 	udiv	r4, r4, r3
 8008e5c:	f7fe ffe4 	bl	8007e28 <LL_RCC_PLLSAI1_GetP>
 8008e60:	4603      	mov	r3, r0
 8008e62:	0c5b      	lsrs	r3, r3, #17
 8008e64:	3301      	adds	r3, #1
 8008e66:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd90      	pop	{r4, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0801440c 	.word	0x0801440c
 8008e78:	00f42400 	.word	0x00f42400
 8008e7c:	01e84800 	.word	0x01e84800

08008e80 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008e86:	f7fe fff3 	bl	8007e70 <LL_RCC_PLL_GetMainSource>
 8008e8a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d017      	beq.n	8008ec2 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d81f      	bhi.n	8008ed8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d003      	beq.n	8008ea6 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d00b      	beq.n	8008ebc <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8008ea4:	e018      	b.n	8008ed8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ea6:	f7fe fd05 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	091b      	lsrs	r3, r3, #4
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	4a1b      	ldr	r2, [pc, #108]	; (8008f20 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8008eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb8:	607b      	str	r3, [r7, #4]
      break;
 8008eba:	e018      	b.n	8008eee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008ebc:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8008ebe:	607b      	str	r3, [r7, #4]
      break;
 8008ec0:	e015      	b.n	8008eee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008ec2:	f7fe fc47 	bl	8007754 <LL_RCC_HSE_IsEnabledDiv2>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d102      	bne.n	8008ed2 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008ecc:	4b15      	ldr	r3, [pc, #84]	; (8008f24 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8008ece:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008ed0:	e00d      	b.n	8008eee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8008ed4:	607b      	str	r3, [r7, #4]
      break;
 8008ed6:	e00a      	b.n	8008eee <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ed8:	f7fe fcec 	bl	80078b4 <LL_RCC_MSI_GetRange>
 8008edc:	4603      	mov	r3, r0
 8008ede:	091b      	lsrs	r3, r3, #4
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	4a0e      	ldr	r2, [pc, #56]	; (8008f20 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8008ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eea:	607b      	str	r3, [r7, #4]
      break;
 8008eec:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008eee:	f7fe ff8e 	bl	8007e0e <LL_RCC_PLLSAI1_GetN>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	fb03 f402 	mul.w	r4, r3, r2
 8008efa:	f7fe ff4c 	bl	8007d96 <LL_RCC_PLL_GetDivider>
 8008efe:	4603      	mov	r3, r0
 8008f00:	091b      	lsrs	r3, r3, #4
 8008f02:	3301      	adds	r3, #1
 8008f04:	fbb4 f4f3 	udiv	r4, r4, r3
 8008f08:	f7fe ff9a 	bl	8007e40 <LL_RCC_PLLSAI1_GetQ>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	0e5b      	lsrs	r3, r3, #25
 8008f10:	3301      	adds	r3, #1
 8008f12:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd90      	pop	{r4, r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	0801440c 	.word	0x0801440c
 8008f24:	00f42400 	.word	0x00f42400
 8008f28:	01e84800 	.word	0x01e84800

08008f2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e090      	b.n	8009060 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7f8 fdda 	bl	8001b0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	22ca      	movs	r2, #202	; 0xca
 8008f66:	625a      	str	r2, [r3, #36]	; 0x24
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2253      	movs	r2, #83	; 0x53
 8008f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f89f 	bl	80090b4 <RTC_EnterInitMode>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2204      	movs	r2, #4
 8008f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e067      	b.n	8009060 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fa2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6899      	ldr	r1, [r3, #8]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	68d2      	ldr	r2, [r2, #12]
 8008fca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6919      	ldr	r1, [r3, #16]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	041a      	lsls	r2, r3, #16
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fee:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0203 	bic.w	r2, r2, #3
 8008ffe:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69da      	ldr	r2, [r3, #28]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d113      	bne.n	800904e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f81e 	bl	8009068 <HAL_RTC_WaitForSynchro>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	22ff      	movs	r2, #255	; 0xff
 8009038:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2204      	movs	r2, #4
 800903e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e008      	b.n	8009060 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	22ff      	movs	r2, #255	; 0xff
 8009054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800905e:	2300      	movs	r3, #0
  }
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800907e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009080:	f7f9 fb96 	bl	80027b0 <HAL_GetTick>
 8009084:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009086:	e009      	b.n	800909c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009088:	f7f9 fb92 	bl	80027b0 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009096:	d901      	bls.n	800909c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e007      	b.n	80090ac <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0ee      	beq.n	8009088 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d119      	bne.n	80090fe <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80090d4:	f7f9 fb6c 	bl	80027b0 <HAL_GetTick>
 80090d8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80090da:	e009      	b.n	80090f0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80090dc:	f7f9 fb68 	bl	80027b0 <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ea:	d901      	bls.n	80090f0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e007      	b.n	8009100 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ee      	beq.n	80090dc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d904      	bls.n	8009126 <HAL_SAI_InitProtocol+0x1e>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3b03      	subs	r3, #3
 8009120:	2b01      	cmp	r3, #1
 8009122:	d812      	bhi.n	800914a <HAL_SAI_InitProtocol+0x42>
 8009124:	e008      	b.n	8009138 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 f9af 	bl	8009490 <SAI_InitI2S>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]
      break;
 8009136:	e00b      	b.n	8009150 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 fa58 	bl	80095f4 <SAI_InitPCM>
 8009144:	4603      	mov	r3, r0
 8009146:	75fb      	strb	r3, [r7, #23]
      break;
 8009148:	e002      	b.n	8009150 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	75fb      	strb	r3, [r7, #23]
      break;
 800914e:	bf00      	nop
  }

  if (status == HAL_OK)
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f808 	bl	800916c <HAL_SAI_Init>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e17c      	b.n	8009478 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009184:	2b01      	cmp	r3, #1
 8009186:	d10e      	bne.n	80091a6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a5c      	ldr	r2, [pc, #368]	; (8009300 <HAL_SAI_Init+0x194>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d107      	bne.n	80091a2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009196:	2b01      	cmp	r3, #1
 8009198:	d103      	bne.n	80091a2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e168      	b.n	8009478 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d106      	bne.n	80091c0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7f8 fd26 	bl	8001c0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa99 	bl	80096f8 <SAI_Disable>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e153      	b.n	8009478 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <HAL_SAI_Init+0x7a>
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d003      	beq.n	80091ec <HAL_SAI_Init+0x80>
 80091e4:	e006      	b.n	80091f4 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	61bb      	str	r3, [r7, #24]
      break;
 80091ea:	e006      	b.n	80091fa <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80091ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f0:	61bb      	str	r3, [r7, #24]
      break;
 80091f2:	e002      	b.n	80091fa <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61bb      	str	r3, [r7, #24]
      break;
 80091f8:	bf00      	nop
  }

  SAI1->GCR = 0;
 80091fa:	4b42      	ldr	r3, [pc, #264]	; (8009304 <HAL_SAI_Init+0x198>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d062      	beq.n	80092ce <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009208:	2040      	movs	r0, #64	; 0x40
 800920a:	f7fe ffb3 	bl	8008174 <HAL_RCCEx_GetPeriphCLKFreq>
 800920e:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009218:	d120      	bne.n	800925c <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921e:	2b04      	cmp	r3, #4
 8009220:	d102      	bne.n	8009228 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009222:	2340      	movs	r3, #64	; 0x40
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	e00a      	b.n	800923e <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922c:	2b08      	cmp	r3, #8
 800922e:	d103      	bne.n	8009238 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	e002      	b.n	800923e <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	4619      	mov	r1, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	fb02 f303 	mul.w	r3, r2, r3
 8009254:	fbb1 f3f3 	udiv	r3, r1, r3
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e017      	b.n	800928c <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009264:	d101      	bne.n	800926a <HAL_SAI_Init+0xfe>
 8009266:	2302      	movs	r3, #2
 8009268:	e000      	b.n	800926c <HAL_SAI_Init+0x100>
 800926a:	2301      	movs	r3, #1
 800926c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	4619      	mov	r1, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	fb02 f303 	mul.w	r3, r2, r3
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	fbb1 f3f3 	udiv	r3, r1, r3
 800928a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <HAL_SAI_Init+0x19c>)
 8009290:	fba2 2303 	umull	r2, r3, r2, r3
 8009294:	08da      	lsrs	r2, r3, #3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800929a:	6979      	ldr	r1, [r7, #20]
 800929c:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <HAL_SAI_Init+0x19c>)
 800929e:	fba3 2301 	umull	r2, r3, r3, r1
 80092a2:	08da      	lsrs	r2, r3, #3
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	1aca      	subs	r2, r1, r3
 80092ae:	2a08      	cmp	r2, #8
 80092b0:	d904      	bls.n	80092bc <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d104      	bne.n	80092ce <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	085a      	lsrs	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <HAL_SAI_Init+0x172>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d109      	bne.n	80092f2 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_SAI_Init+0x17e>
 80092e6:	2300      	movs	r3, #0
 80092e8:	e001      	b.n	80092ee <HAL_SAI_Init+0x182>
 80092ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	e00e      	b.n	8009310 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d108      	bne.n	800930c <HAL_SAI_Init+0x1a0>
 80092fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092fe:	e006      	b.n	800930e <HAL_SAI_Init+0x1a2>
 8009300:	40015404 	.word	0x40015404
 8009304:	40015400 	.word	0x40015400
 8009308:	cccccccd 	.word	0xcccccccd
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6819      	ldr	r1, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b59      	ldr	r3, [pc, #356]	; (8009480 <HAL_SAI_Init+0x314>)
 800931c:	400b      	ands	r3, r1
 800931e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6819      	ldr	r1, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009334:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	431a      	orrs	r2, r3
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009348:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009354:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	051b      	lsls	r3, r3, #20
 800935c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009362:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6812      	ldr	r2, [r2, #0]
 800937c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009380:	f023 030f 	bic.w	r3, r3, #15
 8009384:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6859      	ldr	r1, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	431a      	orrs	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939a:	431a      	orrs	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	430a      	orrs	r2, r1
 80093a2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6899      	ldr	r1, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b35      	ldr	r3, [pc, #212]	; (8009484 <HAL_SAI_Init+0x318>)
 80093b0:	400b      	ands	r3, r1
 80093b2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6899      	ldr	r1, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093be:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80093c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80093ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80093d0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d6:	3b01      	subs	r3, #1
 80093d8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80093da:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68d9      	ldr	r1, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	f24f 0320 	movw	r3, #61472	; 0xf020
 80093f2:	400b      	ands	r3, r1
 80093f4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68d9      	ldr	r1, [r3, #12]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009404:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800940a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800940c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	3b01      	subs	r3, #1
 8009414:	021b      	lsls	r3, r3, #8
 8009416:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a18      	ldr	r2, [pc, #96]	; (8009488 <HAL_SAI_Init+0x31c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d119      	bne.n	800945e <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800942a:	4b18      	ldr	r3, [pc, #96]	; (800948c <HAL_SAI_Init+0x320>)
 800942c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942e:	4a17      	ldr	r2, [pc, #92]	; (800948c <HAL_SAI_Init+0x320>)
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800943c:	2b01      	cmp	r3, #1
 800943e:	d10e      	bne.n	800945e <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009448:	3b01      	subs	r3, #1
 800944a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800944c:	490f      	ldr	r1, [pc, #60]	; (800948c <HAL_SAI_Init+0x320>)
 800944e:	4313      	orrs	r3, r2
 8009450:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8009452:	4b0e      	ldr	r3, [pc, #56]	; (800948c <HAL_SAI_Init+0x320>)
 8009454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009456:	4a0d      	ldr	r2, [pc, #52]	; (800948c <HAL_SAI_Init+0x320>)
 8009458:	f043 0301 	orr.w	r3, r3, #1
 800945c:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3720      	adds	r7, #32
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	f005c010 	.word	0xf005c010
 8009484:	fff88000 	.word	0xfff88000
 8009488:	40015404 	.word	0x40015404
 800948c:	40015400 	.word	0x40015400

08009490 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <SAI_InitI2S+0x2e>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d103      	bne.n	80094c6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	651a      	str	r2, [r3, #80]	; 0x50
 80094c4:	e002      	b.n	80094cc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094da:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e077      	b.n	80095e6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d107      	bne.n	800950c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009508:	665a      	str	r2, [r3, #100]	; 0x64
 800950a:	e006      	b.n	800951a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009512:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	665a      	str	r2, [r3, #100]	; 0x64
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b03      	cmp	r3, #3
 800951e:	d84f      	bhi.n	80095c0 <SAI_InitI2S+0x130>
 8009520:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <SAI_InitI2S+0x98>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	08009539 	.word	0x08009539
 800952c:	0800955b 	.word	0x0800955b
 8009530:	0800957d 	.word	0x0800957d
 8009534:	0800959f 	.word	0x0800959f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2280      	movs	r2, #128	; 0x80
 800953c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	085b      	lsrs	r3, r3, #1
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	011a      	lsls	r2, r3, #4
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2240      	movs	r2, #64	; 0x40
 8009556:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8009558:	e035      	b.n	80095c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	019a      	lsls	r2, r3, #6
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	085b      	lsrs	r3, r3, #1
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2280      	movs	r2, #128	; 0x80
 8009578:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800957a:	e024      	b.n	80095c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	22c0      	movs	r2, #192	; 0xc0
 8009580:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	085b      	lsrs	r3, r3, #1
 8009586:	019a      	lsls	r2, r3, #6
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	085b      	lsrs	r3, r3, #1
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2280      	movs	r2, #128	; 0x80
 800959a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800959c:	e013      	b.n	80095c6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	22e0      	movs	r2, #224	; 0xe0
 80095a2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	019a      	lsls	r2, r3, #6
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	085b      	lsrs	r3, r3, #1
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2280      	movs	r2, #128	; 0x80
 80095bc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80095be:	e002      	b.n	80095c6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	75fb      	strb	r3, [r7, #23]
      break;
 80095c4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d10b      	bne.n	80095e4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d102      	bne.n	80095d8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2210      	movs	r2, #16
 80095d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d102      	bne.n	80095e4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2208      	movs	r2, #8
 80095e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop

080095f4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <SAI_InitPCM+0x2e>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	2b02      	cmp	r3, #2
 8009620:	d103      	bne.n	800962a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	651a      	str	r2, [r3, #80]	; 0x50
 8009628:	e002      	b.n	8009630 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800963c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009644:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009658:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2b04      	cmp	r3, #4
 800965e:	d103      	bne.n	8009668 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	659a      	str	r2, [r3, #88]	; 0x58
 8009666:	e002      	b.n	800966e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	220d      	movs	r2, #13
 800966c:	659a      	str	r2, [r3, #88]	; 0x58
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b03      	cmp	r3, #3
 8009672:	d837      	bhi.n	80096e4 <SAI_InitPCM+0xf0>
 8009674:	a201      	add	r2, pc, #4	; (adr r2, 800967c <SAI_InitPCM+0x88>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	0800968d 	.word	0x0800968d
 8009680:	080096a3 	.word	0x080096a3
 8009684:	080096b9 	.word	0x080096b9
 8009688:	080096cf 	.word	0x080096cf
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2280      	movs	r2, #128	; 0x80
 8009690:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	011a      	lsls	r2, r3, #4
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2240      	movs	r2, #64	; 0x40
 800969e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80096a0:	e023      	b.n	80096ea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2280      	movs	r2, #128	; 0x80
 80096a6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2280      	movs	r2, #128	; 0x80
 80096b4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80096b6:	e018      	b.n	80096ea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	22c0      	movs	r2, #192	; 0xc0
 80096bc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2280      	movs	r2, #128	; 0x80
 80096ca:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80096cc:	e00d      	b.n	80096ea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	22e0      	movs	r2, #224	; 0xe0
 80096d2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2280      	movs	r2, #128	; 0x80
 80096e0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80096e2:	e002      	b.n	80096ea <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	75fb      	strb	r3, [r7, #23]
      break;
 80096e8:	bf00      	nop
  }

  return status;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009700:	4b18      	ldr	r3, [pc, #96]	; (8009764 <SAI_Disable+0x6c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a18      	ldr	r2, [pc, #96]	; (8009768 <SAI_Disable+0x70>)
 8009706:	fba2 2303 	umull	r2, r3, r2, r3
 800970a:	0b1b      	lsrs	r3, r3, #12
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009722:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009730:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	72fb      	strb	r3, [r7, #11]
      break;
 800973e:	e009      	b.n	8009754 <SAI_Disable+0x5c>
    }
    count--;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3b01      	subs	r3, #1
 8009744:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e7      	bne.n	8009724 <SAI_Disable+0x2c>

  return status;
 8009754:	7afb      	ldrb	r3, [r7, #11]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20000010 	.word	0x20000010
 8009768:	95cbec1b 	.word	0x95cbec1b

0800976c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e095      	b.n	80098aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	d108      	bne.n	8009798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800978e:	d009      	beq.n	80097a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	61da      	str	r2, [r3, #28]
 8009796:	e005      	b.n	80097a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7f8 fb62 	bl	8001e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097e4:	d902      	bls.n	80097ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e002      	b.n	80097f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097fa:	d007      	beq.n	800980c <HAL_SPI_Init+0xa0>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009804:	d002      	beq.n	800980c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800984e:	ea42 0103 	orr.w	r1, r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009856:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	f003 0204 	and.w	r2, r3, #4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	431a      	orrs	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987a:	f003 0308 	and.w	r3, r3, #8
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009888:	ea42 0103 	orr.w	r1, r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	430a      	orrs	r2, r1
 8009898:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e049      	b.n	8009958 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7f8 feb3 	bl	8002644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2202      	movs	r2, #2
 80098e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3304      	adds	r3, #4
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f000 fb3f 	bl	8009f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b01      	cmp	r3, #1
 8009972:	d001      	beq.n	8009978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e036      	b.n	80099e6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0201 	orr.w	r2, r2, #1
 800998e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a17      	ldr	r2, [pc, #92]	; (80099f4 <HAL_TIM_Base_Start_IT+0x94>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d004      	beq.n	80099a4 <HAL_TIM_Base_Start_IT+0x44>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a2:	d115      	bne.n	80099d0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <HAL_TIM_Base_Start_IT+0x98>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b06      	cmp	r3, #6
 80099b4:	d015      	beq.n	80099e2 <HAL_TIM_Base_Start_IT+0x82>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099bc:	d011      	beq.n	80099e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ce:	e008      	b.n	80099e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	e000      	b.n	80099e4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	40012c00 	.word	0x40012c00
 80099f8:	00010007 	.word	0x00010007

080099fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e049      	b.n	8009aa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f841 	bl	8009aaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f000 fa9a 	bl	8009f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d122      	bne.n	8009b1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d11b      	bne.n	8009b1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f06f 0202 	mvn.w	r2, #2
 8009aea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	f003 0303 	and.w	r3, r3, #3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa19 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009b06:	e005      	b.n	8009b14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fa0b 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa1c 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d122      	bne.n	8009b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	f003 0304 	and.w	r3, r3, #4
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d11b      	bne.n	8009b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f06f 0204 	mvn.w	r2, #4
 8009b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f9ef 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009b5a:	e005      	b.n	8009b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9e1 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f9f2 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d122      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d11b      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f06f 0208 	mvn.w	r2, #8
 8009b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2204      	movs	r2, #4
 8009b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9c5 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009bae:	e005      	b.n	8009bbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9b7 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f9c8 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d122      	bne.n	8009c16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f003 0310 	and.w	r3, r3, #16
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d11b      	bne.n	8009c16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f06f 0210 	mvn.w	r2, #16
 8009be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2208      	movs	r2, #8
 8009bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f99b 	bl	8009f38 <HAL_TIM_IC_CaptureCallback>
 8009c02:	e005      	b.n	8009c10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f98d 	bl	8009f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f99e 	bl	8009f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d10e      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d107      	bne.n	8009c42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f06f 0201 	mvn.w	r2, #1
 8009c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7f7 fef3 	bl	8001a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4c:	2b80      	cmp	r3, #128	; 0x80
 8009c4e:	d10e      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5a:	2b80      	cmp	r3, #128	; 0x80
 8009c5c:	d107      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fcff 	bl	800a66c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7c:	d10e      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c88:	2b80      	cmp	r3, #128	; 0x80
 8009c8a:	d107      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fcf2 	bl	800a680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b40      	cmp	r3, #64	; 0x40
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb4:	2b40      	cmp	r3, #64	; 0x40
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f94c 	bl	8009f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d10e      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b20      	cmp	r3, #32
 8009ce2:	d107      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0220 	mvn.w	r2, #32
 8009cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fcb2 	bl	800a658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d16:	2302      	movs	r3, #2
 8009d18:	e0ff      	b.n	8009f1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b14      	cmp	r3, #20
 8009d26:	f200 80f0 	bhi.w	8009f0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d2a:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d85 	.word	0x08009d85
 8009d34:	08009f0b 	.word	0x08009f0b
 8009d38:	08009f0b 	.word	0x08009f0b
 8009d3c:	08009f0b 	.word	0x08009f0b
 8009d40:	08009dc5 	.word	0x08009dc5
 8009d44:	08009f0b 	.word	0x08009f0b
 8009d48:	08009f0b 	.word	0x08009f0b
 8009d4c:	08009f0b 	.word	0x08009f0b
 8009d50:	08009e07 	.word	0x08009e07
 8009d54:	08009f0b 	.word	0x08009f0b
 8009d58:	08009f0b 	.word	0x08009f0b
 8009d5c:	08009f0b 	.word	0x08009f0b
 8009d60:	08009e47 	.word	0x08009e47
 8009d64:	08009f0b 	.word	0x08009f0b
 8009d68:	08009f0b 	.word	0x08009f0b
 8009d6c:	08009f0b 	.word	0x08009f0b
 8009d70:	08009e89 	.word	0x08009e89
 8009d74:	08009f0b 	.word	0x08009f0b
 8009d78:	08009f0b 	.word	0x08009f0b
 8009d7c:	08009f0b 	.word	0x08009f0b
 8009d80:	08009ec9 	.word	0x08009ec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68b9      	ldr	r1, [r7, #8]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 f956 	bl	800a03c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0208 	orr.w	r2, r2, #8
 8009d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0204 	bic.w	r2, r2, #4
 8009dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6999      	ldr	r1, [r3, #24]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	691a      	ldr	r2, [r3, #16]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	619a      	str	r2, [r3, #24]
      break;
 8009dc2:	e0a5      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 f9b2 	bl	800a134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	699a      	ldr	r2, [r3, #24]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6999      	ldr	r1, [r3, #24]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	021a      	lsls	r2, r3, #8
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	619a      	str	r2, [r3, #24]
      break;
 8009e04:	e084      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fa0b 	bl	800a228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0208 	orr.w	r2, r2, #8
 8009e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69da      	ldr	r2, [r3, #28]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0204 	bic.w	r2, r2, #4
 8009e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69d9      	ldr	r1, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	61da      	str	r2, [r3, #28]
      break;
 8009e44:	e064      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fa63 	bl	800a318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69da      	ldr	r2, [r3, #28]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69da      	ldr	r2, [r3, #28]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69d9      	ldr	r1, [r3, #28]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	021a      	lsls	r2, r3, #8
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	61da      	str	r2, [r3, #28]
      break;
 8009e86:	e043      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 faa0 	bl	800a3d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0208 	orr.w	r2, r2, #8
 8009ea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 0204 	bic.w	r2, r2, #4
 8009eb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ec6:	e023      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fad8 	bl	800a484 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	021a      	lsls	r2, r3, #8
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f08:	e002      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop

08009f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a2a      	ldr	r2, [pc, #168]	; (800a030 <TIM_Base_SetConfig+0xbc>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d003      	beq.n	8009f94 <TIM_Base_SetConfig+0x20>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f92:	d108      	bne.n	8009fa6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a21      	ldr	r2, [pc, #132]	; (800a030 <TIM_Base_SetConfig+0xbc>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d00b      	beq.n	8009fc6 <TIM_Base_SetConfig+0x52>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb4:	d007      	beq.n	8009fc6 <TIM_Base_SetConfig+0x52>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a1e      	ldr	r2, [pc, #120]	; (800a034 <TIM_Base_SetConfig+0xc0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d003      	beq.n	8009fc6 <TIM_Base_SetConfig+0x52>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <TIM_Base_SetConfig+0xc4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d108      	bne.n	8009fd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a0c      	ldr	r2, [pc, #48]	; (800a030 <TIM_Base_SetConfig+0xbc>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d007      	beq.n	800a014 <TIM_Base_SetConfig+0xa0>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a0b      	ldr	r2, [pc, #44]	; (800a034 <TIM_Base_SetConfig+0xc0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_Base_SetConfig+0xa0>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a0a      	ldr	r2, [pc, #40]	; (800a038 <TIM_Base_SetConfig+0xc4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d103      	bne.n	800a01c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	615a      	str	r2, [r3, #20]
}
 800a022:	bf00      	nop
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40012c00 	.word	0x40012c00
 800a034:	40014400 	.word	0x40014400
 800a038:	40014800 	.word	0x40014800

0800a03c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	f023 0201 	bic.w	r2, r3, #1
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f023 0302 	bic.w	r3, r3, #2
 800a088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	4313      	orrs	r3, r2
 800a092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a24      	ldr	r2, [pc, #144]	; (800a128 <TIM_OC1_SetConfig+0xec>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d007      	beq.n	800a0ac <TIM_OC1_SetConfig+0x70>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a23      	ldr	r2, [pc, #140]	; (800a12c <TIM_OC1_SetConfig+0xf0>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d003      	beq.n	800a0ac <TIM_OC1_SetConfig+0x70>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a22      	ldr	r2, [pc, #136]	; (800a130 <TIM_OC1_SetConfig+0xf4>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d10c      	bne.n	800a0c6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f023 0308 	bic.w	r3, r3, #8
 800a0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f023 0304 	bic.w	r3, r3, #4
 800a0c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a17      	ldr	r2, [pc, #92]	; (800a128 <TIM_OC1_SetConfig+0xec>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d007      	beq.n	800a0de <TIM_OC1_SetConfig+0xa2>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a17      	ldr	r2, [pc, #92]	; (800a130 <TIM_OC1_SetConfig+0xf4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d003      	beq.n	800a0de <TIM_OC1_SetConfig+0xa2>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a14      	ldr	r2, [pc, #80]	; (800a12c <TIM_OC1_SetConfig+0xf0>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d111      	bne.n	800a102 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	621a      	str	r2, [r3, #32]
}
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	40012c00 	.word	0x40012c00
 800a12c:	40014800 	.word	0x40014800
 800a130:	40014400 	.word	0x40014400

0800a134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f023 0210 	bic.w	r2, r3, #16
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f023 0320 	bic.w	r3, r3, #32
 800a182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a22      	ldr	r2, [pc, #136]	; (800a21c <TIM_OC2_SetConfig+0xe8>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d10d      	bne.n	800a1b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	011b      	lsls	r3, r3, #4
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a19      	ldr	r2, [pc, #100]	; (800a21c <TIM_OC2_SetConfig+0xe8>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d007      	beq.n	800a1cc <TIM_OC2_SetConfig+0x98>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a18      	ldr	r2, [pc, #96]	; (800a220 <TIM_OC2_SetConfig+0xec>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d003      	beq.n	800a1cc <TIM_OC2_SetConfig+0x98>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a17      	ldr	r2, [pc, #92]	; (800a224 <TIM_OC2_SetConfig+0xf0>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d113      	bne.n	800a1f4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	621a      	str	r2, [r3, #32]
}
 800a20e:	bf00      	nop
 800a210:	371c      	adds	r7, #28
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	40012c00 	.word	0x40012c00
 800a220:	40014400 	.word	0x40014400
 800a224:	40014800 	.word	0x40014800

0800a228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a228:	b480      	push	{r7}
 800a22a:	b087      	sub	sp, #28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a21      	ldr	r2, [pc, #132]	; (800a30c <TIM_OC3_SetConfig+0xe4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d10d      	bne.n	800a2a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	021b      	lsls	r3, r3, #8
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a18      	ldr	r2, [pc, #96]	; (800a30c <TIM_OC3_SetConfig+0xe4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d007      	beq.n	800a2be <TIM_OC3_SetConfig+0x96>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a17      	ldr	r2, [pc, #92]	; (800a310 <TIM_OC3_SetConfig+0xe8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_OC3_SetConfig+0x96>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a16      	ldr	r2, [pc, #88]	; (800a314 <TIM_OC3_SetConfig+0xec>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d113      	bne.n	800a2e6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	621a      	str	r2, [r3, #32]
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	40012c00 	.word	0x40012c00
 800a310:	40014400 	.word	0x40014400
 800a314:	40014800 	.word	0x40014800

0800a318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	031b      	lsls	r3, r3, #12
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	4313      	orrs	r3, r2
 800a372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a14      	ldr	r2, [pc, #80]	; (800a3c8 <TIM_OC4_SetConfig+0xb0>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d007      	beq.n	800a38c <TIM_OC4_SetConfig+0x74>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a13      	ldr	r2, [pc, #76]	; (800a3cc <TIM_OC4_SetConfig+0xb4>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_OC4_SetConfig+0x74>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a12      	ldr	r2, [pc, #72]	; (800a3d0 <TIM_OC4_SetConfig+0xb8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d109      	bne.n	800a3a0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	019b      	lsls	r3, r3, #6
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	621a      	str	r2, [r3, #32]
}
 800a3ba:	bf00      	nop
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	40012c00 	.word	0x40012c00
 800a3cc:	40014400 	.word	0x40014400
 800a3d0:	40014800 	.word	0x40014800

0800a3d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a418:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a13      	ldr	r2, [pc, #76]	; (800a478 <TIM_OC5_SetConfig+0xa4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d007      	beq.n	800a43e <TIM_OC5_SetConfig+0x6a>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a12      	ldr	r2, [pc, #72]	; (800a47c <TIM_OC5_SetConfig+0xa8>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_OC5_SetConfig+0x6a>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a11      	ldr	r2, [pc, #68]	; (800a480 <TIM_OC5_SetConfig+0xac>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d109      	bne.n	800a452 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685a      	ldr	r2, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	621a      	str	r2, [r3, #32]
}
 800a46c:	bf00      	nop
 800a46e:	371c      	adds	r7, #28
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	40012c00 	.word	0x40012c00
 800a47c:	40014400 	.word	0x40014400
 800a480:	40014800 	.word	0x40014800

0800a484 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a1b      	ldr	r3, [r3, #32]
 800a49e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	021b      	lsls	r3, r3, #8
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a4ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	051b      	lsls	r3, r3, #20
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a14      	ldr	r2, [pc, #80]	; (800a52c <TIM_OC6_SetConfig+0xa8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d007      	beq.n	800a4f0 <TIM_OC6_SetConfig+0x6c>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a13      	ldr	r2, [pc, #76]	; (800a530 <TIM_OC6_SetConfig+0xac>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_OC6_SetConfig+0x6c>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a12      	ldr	r2, [pc, #72]	; (800a534 <TIM_OC6_SetConfig+0xb0>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d109      	bne.n	800a504 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	029b      	lsls	r3, r3, #10
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	621a      	str	r2, [r3, #32]
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40012c00 	.word	0x40012c00
 800a530:	40014400 	.word	0x40014400
 800a534:	40014800 	.word	0x40014800

0800a538 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a550:	2302      	movs	r3, #2
 800a552:	e078      	b.n	800a646 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	4313      	orrs	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4313      	orrs	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	041b      	lsls	r3, r3, #16
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a20      	ldr	r2, [pc, #128]	; (800a654 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d106      	bne.n	800a5e6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a1a      	ldr	r2, [pc, #104]	; (800a654 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d121      	bne.n	800a634 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fa:	051b      	lsls	r3, r3, #20
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	4313      	orrs	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a0c      	ldr	r2, [pc, #48]	; (800a654 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d106      	bne.n	800a634 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	4313      	orrs	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	40012c00 	.word	0x40012c00

0800a658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b085      	sub	sp, #20
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a6ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a6ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	43db      	mvns	r3, r3
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	b480      	push	{r7}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	f107 0014 	add.w	r0, r7, #20
 800a706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	b004      	add	sp, #16
 800a738:	4770      	bx	lr
	...

0800a73c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b09d      	sub	sp, #116	; 0x74
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a75e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a762:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	78db      	ldrb	r3, [r3, #3]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d81f      	bhi.n	800a7ae <USB_ActivateEndpoint+0x72>
 800a76e:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <USB_ActivateEndpoint+0x38>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a785 	.word	0x0800a785
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7b7 	.word	0x0800a7b7
 800a780:	0800a793 	.word	0x0800a793
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a784:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a78c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a790:	e012      	b.n	800a7b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a792:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a796:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a79a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a79e:	e00b      	b.n	800a7b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a7a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a7ac:	e004      	b.n	800a7b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a7b4:	e000      	b.n	800a7b8 <USB_ActivateEndpoint+0x7c>
      break;
 800a7b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	441a      	add	r2, r3
 800a7c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a7c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	b21b      	sxth	r3, r3
 800a7ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f2:	b21a      	sxth	r2, r3
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	b21b      	sxth	r3, r3
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	441a      	add	r2, r3
 800a80c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a820:	b29b      	uxth	r3, r3
 800a822:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	7b1b      	ldrb	r3, [r3, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f040 8149 	bne.w	800aac0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	785b      	ldrb	r3, [r3, #1]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 8084 	beq.w	800a940 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	61bb      	str	r3, [r7, #24]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a842:	b29b      	uxth	r3, r3
 800a844:	461a      	mov	r2, r3
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	4413      	add	r3, r2
 800a84a:	61bb      	str	r3, [r7, #24]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	00da      	lsls	r2, r3, #3
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	4413      	add	r3, r2
 800a856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	88db      	ldrh	r3, [r3, #6]
 800a860:	085b      	lsrs	r3, r3, #1
 800a862:	b29b      	uxth	r3, r3
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	b29a      	uxth	r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	827b      	strh	r3, [r7, #18]
 800a87a:	8a7b      	ldrh	r3, [r7, #18]
 800a87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01b      	beq.n	800a8bc <USB_ActivateEndpoint+0x180>
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a89a:	823b      	strh	r3, [r7, #16]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	441a      	add	r2, r3
 800a8a6:	8a3b      	ldrh	r3, [r7, #16]
 800a8a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	78db      	ldrb	r3, [r3, #3]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d020      	beq.n	800a906 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8da:	81bb      	strh	r3, [r7, #12]
 800a8dc:	89bb      	ldrh	r3, [r7, #12]
 800a8de:	f083 0320 	eor.w	r3, r3, #32
 800a8e2:	81bb      	strh	r3, [r7, #12]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	441a      	add	r2, r3
 800a8ee:	89bb      	ldrh	r3, [r7, #12]
 800a8f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a900:	b29b      	uxth	r3, r3
 800a902:	8013      	strh	r3, [r2, #0]
 800a904:	e2a6      	b.n	800ae54 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	b29b      	uxth	r3, r3
 800a914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a91c:	81fb      	strh	r3, [r7, #14]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	441a      	add	r2, r3
 800a928:	89fb      	ldrh	r3, [r7, #14]
 800a92a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a92e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	8013      	strh	r3, [r2, #0]
 800a93e:	e289      	b.n	800ae54 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	633b      	str	r3, [r7, #48]	; 0x30
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	4413      	add	r3, r2
 800a952:	633b      	str	r3, [r7, #48]	; 0x30
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	00da      	lsls	r2, r3, #3
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	4413      	add	r3, r2
 800a95e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	88db      	ldrh	r3, [r3, #6]
 800a968:	085b      	lsrs	r3, r3, #1
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	62bb      	str	r3, [r7, #40]	; 0x28
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97e:	b29b      	uxth	r3, r3
 800a980:	461a      	mov	r2, r3
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	4413      	add	r3, r2
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	00da      	lsls	r2, r3, #3
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	4413      	add	r3, r2
 800a992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	2b3e      	cmp	r3, #62	; 0x3e
 800a99e:	d918      	bls.n	800a9d2 <USB_ActivateEndpoint+0x296>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	f003 031f 	and.w	r3, r3, #31
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <USB_ActivateEndpoint+0x27e>
 800a9b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	029b      	lsls	r3, r3, #10
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	e029      	b.n	800aa26 <USB_ActivateEndpoint+0x2ea>
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d112      	bne.n	800aa00 <USB_ActivateEndpoint+0x2c4>
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	801a      	strh	r2, [r3, #0]
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	e012      	b.n	800aa26 <USB_ActivateEndpoint+0x2ea>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <USB_ActivateEndpoint+0x2de>
 800aa14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa16:	3301      	adds	r3, #1
 800aa18:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	029b      	lsls	r3, r3, #10
 800aa20:	b29a      	uxth	r2, r3
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	847b      	strh	r3, [r7, #34]	; 0x22
 800aa34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d01b      	beq.n	800aa76 <USB_ActivateEndpoint+0x33a>
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa54:	843b      	strh	r3, [r7, #32]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	441a      	add	r2, r3
 800aa60:	8c3b      	ldrh	r3, [r7, #32]
 800aa62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8c:	83fb      	strh	r3, [r7, #30]
 800aa8e:	8bfb      	ldrh	r3, [r7, #30]
 800aa90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa94:	83fb      	strh	r3, [r7, #30]
 800aa96:	8bfb      	ldrh	r3, [r7, #30]
 800aa98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa9c:	83fb      	strh	r3, [r7, #30]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	441a      	add	r2, r3
 800aaa8:	8bfb      	ldrh	r3, [r7, #30]
 800aaaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	8013      	strh	r3, [r2, #0]
 800aabe:	e1c9      	b.n	800ae54 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	78db      	ldrb	r3, [r3, #3]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d11e      	bne.n	800ab06 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aade:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	441a      	add	r2, r3
 800aaec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aaf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaf8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	8013      	strh	r3, [r2, #0]
 800ab04:	e01d      	b.n	800ab42 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ab18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	441a      	add	r2, r3
 800ab2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ab2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	461a      	mov	r2, r3
 800ab50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab52:	4413      	add	r3, r2
 800ab54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	00da      	lsls	r2, r3, #3
 800ab5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab64:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	891b      	ldrh	r3, [r3, #8]
 800ab6a:	085b      	lsrs	r3, r3, #1
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab74:	801a      	strh	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	657b      	str	r3, [r7, #84]	; 0x54
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab86:	4413      	add	r3, r2
 800ab88:	657b      	str	r3, [r7, #84]	; 0x54
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	00da      	lsls	r2, r3, #3
 800ab90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab92:	4413      	add	r3, r2
 800ab94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab98:	653b      	str	r3, [r7, #80]	; 0x50
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	895b      	ldrh	r3, [r3, #10]
 800ab9e:	085b      	lsrs	r3, r3, #1
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f040 8093 	bne.w	800acda <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800abc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800abc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01b      	beq.n	800ac08 <USB_ActivateEndpoint+0x4cc>
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	441a      	add	r2, r3
 800abf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800abf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ac16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ac18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01b      	beq.n	800ac58 <USB_ActivateEndpoint+0x51c>
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac36:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	441a      	add	r2, r3
 800ac42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ac44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6e:	873b      	strh	r3, [r7, #56]	; 0x38
 800ac70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac76:	873b      	strh	r3, [r7, #56]	; 0x38
 800ac78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac7e:	873b      	strh	r3, [r7, #56]	; 0x38
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	441a      	add	r2, r3
 800ac8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	b29b      	uxth	r3, r3
 800acae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acb6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	441a      	add	r2, r3
 800acc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
 800acd8:	e0bc      	b.n	800ae54 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800acea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800acee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01d      	beq.n	800ad32 <USB_ActivateEndpoint+0x5f6>
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	441a      	add	r2, r3
 800ad1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ad1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ad42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ad46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d01d      	beq.n	800ad8a <USB_ActivateEndpoint+0x64e>
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad64:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	441a      	add	r2, r3
 800ad72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ad76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	78db      	ldrb	r3, [r3, #3]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d024      	beq.n	800addc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ada4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800adac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800adb0:	f083 0320 	eor.w	r3, r3, #32
 800adb4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	441a      	add	r2, r3
 800adc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800adc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add6:	b29b      	uxth	r3, r3
 800add8:	8013      	strh	r3, [r2, #0]
 800adda:	e01d      	b.n	800ae18 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adf2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	441a      	add	r2, r3
 800ae00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ae04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	441a      	add	r2, r3
 800ae3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ae54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3774      	adds	r7, #116	; 0x74
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b08d      	sub	sp, #52	; 0x34
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	7b1b      	ldrb	r3, [r3, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f040 808e 	bne.w	800af94 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d044      	beq.n	800af0a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	81bb      	strh	r3, [r7, #12]
 800ae8e:	89bb      	ldrh	r3, [r7, #12]
 800ae90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d01b      	beq.n	800aed0 <USB_DeactivateEndpoint+0x6c>
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeae:	817b      	strh	r3, [r7, #10]
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	441a      	add	r2, r3
 800aeba:	897b      	ldrh	r3, [r7, #10]
 800aebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aecc:	b29b      	uxth	r3, r3
 800aece:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee6:	813b      	strh	r3, [r7, #8]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	441a      	add	r2, r3
 800aef2:	893b      	ldrh	r3, [r7, #8]
 800aef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aefc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af04:	b29b      	uxth	r3, r3
 800af06:	8013      	strh	r3, [r2, #0]
 800af08:	e192      	b.n	800b230 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	827b      	strh	r3, [r7, #18]
 800af18:	8a7b      	ldrh	r3, [r7, #18]
 800af1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d01b      	beq.n	800af5a <USB_DeactivateEndpoint+0xf6>
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af38:	823b      	strh	r3, [r7, #16]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	441a      	add	r2, r3
 800af44:	8a3b      	ldrh	r3, [r7, #16]
 800af46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af56:	b29b      	uxth	r3, r3
 800af58:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	b29b      	uxth	r3, r3
 800af68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af70:	81fb      	strh	r3, [r7, #14]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	441a      	add	r2, r3
 800af7c:	89fb      	ldrh	r3, [r7, #14]
 800af7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af8e:	b29b      	uxth	r3, r3
 800af90:	8013      	strh	r3, [r2, #0]
 800af92:	e14d      	b.n	800b230 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	785b      	ldrb	r3, [r3, #1]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f040 80a5 	bne.w	800b0e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	843b      	strh	r3, [r7, #32]
 800afac:	8c3b      	ldrh	r3, [r7, #32]
 800afae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d01b      	beq.n	800afee <USB_DeactivateEndpoint+0x18a>
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afcc:	83fb      	strh	r3, [r7, #30]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	441a      	add	r2, r3
 800afd8:	8bfb      	ldrh	r3, [r7, #30]
 800afda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afea:	b29b      	uxth	r3, r3
 800afec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	83bb      	strh	r3, [r7, #28]
 800affc:	8bbb      	ldrh	r3, [r7, #28]
 800affe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01b      	beq.n	800b03e <USB_DeactivateEndpoint+0x1da>
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01c:	837b      	strh	r3, [r7, #26]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	441a      	add	r2, r3
 800b028:	8b7b      	ldrh	r3, [r7, #26]
 800b02a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b02e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b054:	833b      	strh	r3, [r7, #24]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	441a      	add	r2, r3
 800b060:	8b3b      	ldrh	r3, [r7, #24]
 800b062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b06a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b06e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b072:	b29b      	uxth	r3, r3
 800b074:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	b29b      	uxth	r3, r3
 800b084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b08c:	82fb      	strh	r3, [r7, #22]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	441a      	add	r2, r3
 800b098:	8afb      	ldrh	r3, [r7, #22]
 800b09a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b09e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0c4:	82bb      	strh	r3, [r7, #20]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	441a      	add	r2, r3
 800b0d0:	8abb      	ldrh	r3, [r7, #20]
 800b0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	8013      	strh	r3, [r2, #0]
 800b0e6:	e0a3      	b.n	800b230 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b0f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01b      	beq.n	800b138 <USB_DeactivateEndpoint+0x2d4>
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4413      	add	r3, r2
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b116:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	441a      	add	r2, r3
 800b122:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b12c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b134:	b29b      	uxth	r3, r3
 800b136:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01b      	beq.n	800b188 <USB_DeactivateEndpoint+0x324>
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b166:	853b      	strh	r3, [r7, #40]	; 0x28
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	441a      	add	r2, r3
 800b172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b184:	b29b      	uxth	r3, r3
 800b186:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	b29b      	uxth	r3, r3
 800b196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b19e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	441a      	add	r2, r3
 800b1aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	441a      	add	r2, r3
 800b1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	b29b      	uxth	r3, r3
 800b206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b20a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b20e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	441a      	add	r2, r3
 800b21a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b21c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3734      	adds	r7, #52	; 0x34
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b0c2      	sub	sp, #264	; 0x108
 800b242:	af00      	add	r7, sp, #0
 800b244:	1d3b      	adds	r3, r7, #4
 800b246:	6018      	str	r0, [r3, #0]
 800b248:	463b      	mov	r3, r7
 800b24a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b24c:	463b      	mov	r3, r7
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	785b      	ldrb	r3, [r3, #1]
 800b252:	2b01      	cmp	r3, #1
 800b254:	f040 8509 	bne.w	800bc6a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b258:	463b      	mov	r3, r7
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	699a      	ldr	r2, [r3, #24]
 800b25e:	463b      	mov	r3, r7
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	429a      	cmp	r2, r3
 800b266:	d905      	bls.n	800b274 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800b268:	463b      	mov	r3, r7
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b272:	e004      	b.n	800b27e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800b274:	463b      	mov	r3, r7
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b27e:	463b      	mov	r3, r7
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	7b1b      	ldrb	r3, [r3, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d128      	bne.n	800b2da <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b288:	463b      	mov	r3, r7
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6959      	ldr	r1, [r3, #20]
 800b28e:	463b      	mov	r3, r7
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	88da      	ldrh	r2, [r3, #6]
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b298:	b29b      	uxth	r3, r3
 800b29a:	1d38      	adds	r0, r7, #4
 800b29c:	6800      	ldr	r0, [r0, #0]
 800b29e:	f001 f9da 	bl	800c656 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b2a2:	1d3b      	adds	r3, r7, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	613b      	str	r3, [r7, #16]
 800b2a8:	1d3b      	adds	r3, r7, #4
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	00da      	lsls	r2, r3, #3
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	801a      	strh	r2, [r3, #0]
 800b2d6:	f000 bc9f 	b.w	800bc18 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b2da:	463b      	mov	r3, r7
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	78db      	ldrb	r3, [r3, #3]
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	f040 8347 	bne.w	800b974 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b2e6:	463b      	mov	r3, r7
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6a1a      	ldr	r2, [r3, #32]
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	f240 82eb 	bls.w	800b8ce <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b2f8:	1d3b      	adds	r3, r7, #4
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	463b      	mov	r3, r7
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b312:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b316:	1d3b      	adds	r3, r7, #4
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	463b      	mov	r3, r7
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	441a      	add	r2, r3
 800b324:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b330:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	b29b      	uxth	r3, r3
 800b33a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b33c:	463b      	mov	r3, r7
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6a1a      	ldr	r2, [r3, #32]
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	1ad2      	subs	r2, r2, r3
 800b348:	463b      	mov	r3, r7
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b34e:	1d3b      	adds	r3, r7, #4
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	463b      	mov	r3, r7
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8159 	beq.w	800b61c <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b36a:	1d3b      	adds	r3, r7, #4
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	633b      	str	r3, [r7, #48]	; 0x30
 800b370:	463b      	mov	r3, r7
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	785b      	ldrb	r3, [r3, #1]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d164      	bne.n	800b444 <USB_EPStartXfer+0x206>
 800b37a:	1d3b      	adds	r3, r7, #4
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b380:	1d3b      	adds	r3, r7, #4
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b388:	b29b      	uxth	r3, r3
 800b38a:	461a      	mov	r2, r3
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	4413      	add	r3, r2
 800b390:	62bb      	str	r3, [r7, #40]	; 0x28
 800b392:	463b      	mov	r3, r7
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	00da      	lsls	r2, r3, #3
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	4413      	add	r3, r2
 800b39e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a8:	2b3e      	cmp	r3, #62	; 0x3e
 800b3aa:	d91c      	bls.n	800b3e6 <USB_EPStartXfer+0x1a8>
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b0:	095b      	lsrs	r3, r3, #5
 800b3b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d104      	bne.n	800b3cc <USB_EPStartXfer+0x18e>
 800b3c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	029b      	lsls	r3, r3, #10
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	801a      	strh	r2, [r3, #0]
 800b3e4:	e04a      	b.n	800b47c <USB_EPStartXfer+0x23e>
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d112      	bne.n	800b414 <USB_EPStartXfer+0x1d6>
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	801a      	strh	r2, [r3, #0]
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	e033      	b.n	800b47c <USB_EPStartXfer+0x23e>
 800b414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b418:	085b      	lsrs	r3, r3, #1
 800b41a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d004      	beq.n	800b434 <USB_EPStartXfer+0x1f6>
 800b42a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b42e:	3301      	adds	r3, #1
 800b430:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b434:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b438:	b29b      	uxth	r3, r3
 800b43a:	029b      	lsls	r3, r3, #10
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b440:	801a      	strh	r2, [r3, #0]
 800b442:	e01b      	b.n	800b47c <USB_EPStartXfer+0x23e>
 800b444:	463b      	mov	r3, r7
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	785b      	ldrb	r3, [r3, #1]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d116      	bne.n	800b47c <USB_EPStartXfer+0x23e>
 800b44e:	1d3b      	adds	r3, r7, #4
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b456:	b29b      	uxth	r3, r3
 800b458:	461a      	mov	r2, r3
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	4413      	add	r3, r2
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
 800b460:	463b      	mov	r3, r7
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	00da      	lsls	r2, r3, #3
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	4413      	add	r3, r2
 800b46c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b476:	b29a      	uxth	r2, r3
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b47c:	463b      	mov	r3, r7
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	895b      	ldrh	r3, [r3, #10]
 800b482:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b486:	463b      	mov	r3, r7
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6959      	ldr	r1, [r3, #20]
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b490:	b29b      	uxth	r3, r3
 800b492:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b496:	1d38      	adds	r0, r7, #4
 800b498:	6800      	ldr	r0, [r0, #0]
 800b49a:	f001 f8dc 	bl	800c656 <USB_WritePMA>
            ep->xfer_buff += len;
 800b49e:	463b      	mov	r3, r7
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a8:	441a      	add	r2, r3
 800b4aa:	463b      	mov	r3, r7
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b4b0:	463b      	mov	r3, r7
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6a1a      	ldr	r2, [r3, #32]
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d909      	bls.n	800b4d4 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6a1a      	ldr	r2, [r3, #32]
 800b4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ca:	1ad2      	subs	r2, r2, r3
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	621a      	str	r2, [r3, #32]
 800b4d2:	e008      	b.n	800b4e6 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800b4d4:	463b      	mov	r3, r7
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b4de:	463b      	mov	r3, r7
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	785b      	ldrb	r3, [r3, #1]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d164      	bne.n	800b5ba <USB_EPStartXfer+0x37c>
 800b4f0:	1d3b      	adds	r3, r7, #4
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	61bb      	str	r3, [r7, #24]
 800b4f6:	1d3b      	adds	r3, r7, #4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	461a      	mov	r2, r3
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	4413      	add	r3, r2
 800b506:	61bb      	str	r3, [r7, #24]
 800b508:	463b      	mov	r3, r7
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	00da      	lsls	r2, r3, #3
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	4413      	add	r3, r2
 800b514:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51e:	2b3e      	cmp	r3, #62	; 0x3e
 800b520:	d91c      	bls.n	800b55c <USB_EPStartXfer+0x31e>
 800b522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b526:	095b      	lsrs	r3, r3, #5
 800b528:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b530:	f003 031f 	and.w	r3, r3, #31
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <USB_EPStartXfer+0x304>
 800b538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b53c:	3b01      	subs	r3, #1
 800b53e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b546:	b29b      	uxth	r3, r3
 800b548:	029b      	lsls	r3, r3, #10
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b554:	b29a      	uxth	r2, r3
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	801a      	strh	r2, [r3, #0]
 800b55a:	e04d      	b.n	800b5f8 <USB_EPStartXfer+0x3ba>
 800b55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b560:	2b00      	cmp	r3, #0
 800b562:	d112      	bne.n	800b58a <USB_EPStartXfer+0x34c>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b56e:	b29a      	uxth	r2, r3
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	801a      	strh	r2, [r3, #0]
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b57e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b582:	b29a      	uxth	r2, r3
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	801a      	strh	r2, [r3, #0]
 800b588:	e036      	b.n	800b5f8 <USB_EPStartXfer+0x3ba>
 800b58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58e:	085b      	lsrs	r3, r3, #1
 800b590:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <USB_EPStartXfer+0x36c>
 800b5a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	029b      	lsls	r3, r3, #10
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	801a      	strh	r2, [r3, #0]
 800b5b8:	e01e      	b.n	800b5f8 <USB_EPStartXfer+0x3ba>
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	785b      	ldrb	r3, [r3, #1]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d119      	bne.n	800b5f8 <USB_EPStartXfer+0x3ba>
 800b5c4:	1d3b      	adds	r3, r7, #4
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	623b      	str	r3, [r7, #32]
 800b5ca:	1d3b      	adds	r3, r7, #4
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	4413      	add	r3, r2
 800b5da:	623b      	str	r3, [r7, #32]
 800b5dc:	463b      	mov	r3, r7
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	00da      	lsls	r2, r3, #3
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5ec:	61fb      	str	r3, [r7, #28]
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b5f8:	463b      	mov	r3, r7
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	891b      	ldrh	r3, [r3, #8]
 800b5fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b602:	463b      	mov	r3, r7
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6959      	ldr	r1, [r3, #20]
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b612:	1d38      	adds	r0, r7, #4
 800b614:	6800      	ldr	r0, [r0, #0]
 800b616:	f001 f81e 	bl	800c656 <USB_WritePMA>
 800b61a:	e2fd      	b.n	800bc18 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b61c:	463b      	mov	r3, r7
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	785b      	ldrb	r3, [r3, #1]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d164      	bne.n	800b6f0 <USB_EPStartXfer+0x4b2>
 800b626:	1d3b      	adds	r3, r7, #4
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b62c:	1d3b      	adds	r3, r7, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b634:	b29b      	uxth	r3, r3
 800b636:	461a      	mov	r2, r3
 800b638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b63a:	4413      	add	r3, r2
 800b63c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b63e:	463b      	mov	r3, r7
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	00da      	lsls	r2, r3, #3
 800b646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b648:	4413      	add	r3, r2
 800b64a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b64e:	647b      	str	r3, [r7, #68]	; 0x44
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b654:	2b3e      	cmp	r3, #62	; 0x3e
 800b656:	d91c      	bls.n	800b692 <USB_EPStartXfer+0x454>
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	095b      	lsrs	r3, r3, #5
 800b65e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b666:	f003 031f 	and.w	r3, r3, #31
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d104      	bne.n	800b678 <USB_EPStartXfer+0x43a>
 800b66e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b672:	3b01      	subs	r3, #1
 800b674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b678:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	029b      	lsls	r3, r3, #10
 800b680:	b29b      	uxth	r3, r3
 800b682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b68e:	801a      	strh	r2, [r3, #0]
 800b690:	e04d      	b.n	800b72e <USB_EPStartXfer+0x4f0>
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b696:	2b00      	cmp	r3, #0
 800b698:	d112      	bne.n	800b6c0 <USB_EPStartXfer+0x482>
 800b69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a8:	801a      	strh	r2, [r3, #0]
 800b6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6bc:	801a      	strh	r2, [r3, #0]
 800b6be:	e036      	b.n	800b72e <USB_EPStartXfer+0x4f0>
 800b6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c4:	085b      	lsrs	r3, r3, #1
 800b6c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <USB_EPStartXfer+0x4a2>
 800b6d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6da:	3301      	adds	r3, #1
 800b6dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	029b      	lsls	r3, r3, #10
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	e01e      	b.n	800b72e <USB_EPStartXfer+0x4f0>
 800b6f0:	463b      	mov	r3, r7
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d119      	bne.n	800b72e <USB_EPStartXfer+0x4f0>
 800b6fa:	1d3b      	adds	r3, r7, #4
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b700:	1d3b      	adds	r3, r7, #4
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b708:	b29b      	uxth	r3, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b70e:	4413      	add	r3, r2
 800b710:	653b      	str	r3, [r7, #80]	; 0x50
 800b712:	463b      	mov	r3, r7
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	00da      	lsls	r2, r3, #3
 800b71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b71c:	4413      	add	r3, r2
 800b71e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b722:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b728:	b29a      	uxth	r2, r3
 800b72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b72e:	463b      	mov	r3, r7
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	891b      	ldrh	r3, [r3, #8]
 800b734:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b738:	463b      	mov	r3, r7
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6959      	ldr	r1, [r3, #20]
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b742:	b29b      	uxth	r3, r3
 800b744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b748:	1d38      	adds	r0, r7, #4
 800b74a:	6800      	ldr	r0, [r0, #0]
 800b74c:	f000 ff83 	bl	800c656 <USB_WritePMA>
            ep->xfer_buff += len;
 800b750:	463b      	mov	r3, r7
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	695a      	ldr	r2, [r3, #20]
 800b756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75a:	441a      	add	r2, r3
 800b75c:	463b      	mov	r3, r7
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b762:	463b      	mov	r3, r7
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6a1a      	ldr	r2, [r3, #32]
 800b768:	463b      	mov	r3, r7
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d909      	bls.n	800b786 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800b772:	463b      	mov	r3, r7
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6a1a      	ldr	r2, [r3, #32]
 800b778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77c:	1ad2      	subs	r2, r2, r3
 800b77e:	463b      	mov	r3, r7
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	621a      	str	r2, [r3, #32]
 800b784:	e008      	b.n	800b798 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800b786:	463b      	mov	r3, r7
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b790:	463b      	mov	r3, r7
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2200      	movs	r2, #0
 800b796:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b798:	1d3b      	adds	r3, r7, #4
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	643b      	str	r3, [r7, #64]	; 0x40
 800b79e:	463b      	mov	r3, r7
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	785b      	ldrb	r3, [r3, #1]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d164      	bne.n	800b872 <USB_EPStartXfer+0x634>
 800b7a8:	1d3b      	adds	r3, r7, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7ae:	1d3b      	adds	r3, r7, #4
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	4413      	add	r3, r2
 800b7be:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	00da      	lsls	r2, r3, #3
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	4413      	add	r3, r2
 800b7cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d6:	2b3e      	cmp	r3, #62	; 0x3e
 800b7d8:	d91c      	bls.n	800b814 <USB_EPStartXfer+0x5d6>
 800b7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7de:	095b      	lsrs	r3, r3, #5
 800b7e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e8:	f003 031f 	and.w	r3, r3, #31
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d104      	bne.n	800b7fa <USB_EPStartXfer+0x5bc>
 800b7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	029b      	lsls	r3, r3, #10
 800b802:	b29b      	uxth	r3, r3
 800b804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b810:	801a      	strh	r2, [r3, #0]
 800b812:	e04a      	b.n	800b8aa <USB_EPStartXfer+0x66c>
 800b814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d112      	bne.n	800b842 <USB_EPStartXfer+0x604>
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	b29b      	uxth	r3, r3
 800b822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b826:	b29a      	uxth	r2, r3
 800b828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82a:	801a      	strh	r2, [r3, #0]
 800b82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82e:	881b      	ldrh	r3, [r3, #0]
 800b830:	b29b      	uxth	r3, r3
 800b832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83e:	801a      	strh	r2, [r3, #0]
 800b840:	e033      	b.n	800b8aa <USB_EPStartXfer+0x66c>
 800b842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b846:	085b      	lsrs	r3, r3, #1
 800b848:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <USB_EPStartXfer+0x624>
 800b858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b85c:	3301      	adds	r3, #1
 800b85e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b866:	b29b      	uxth	r3, r3
 800b868:	029b      	lsls	r3, r3, #10
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b86e:	801a      	strh	r2, [r3, #0]
 800b870:	e01b      	b.n	800b8aa <USB_EPStartXfer+0x66c>
 800b872:	463b      	mov	r3, r7
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d116      	bne.n	800b8aa <USB_EPStartXfer+0x66c>
 800b87c:	1d3b      	adds	r3, r7, #4
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b884:	b29b      	uxth	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b88a:	4413      	add	r3, r2
 800b88c:	643b      	str	r3, [r7, #64]	; 0x40
 800b88e:	463b      	mov	r3, r7
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	00da      	lsls	r2, r3, #3
 800b896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b898:	4413      	add	r3, r2
 800b89a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b8aa:	463b      	mov	r3, r7
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	895b      	ldrh	r3, [r3, #10]
 800b8b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6959      	ldr	r1, [r3, #20]
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8c4:	1d38      	adds	r0, r7, #4
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	f000 fec5 	bl	800c656 <USB_WritePMA>
 800b8cc:	e1a4      	b.n	800bc18 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6a1b      	ldr	r3, [r3, #32]
 800b8d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b8d8:	1d3b      	adds	r3, r7, #4
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	463b      	mov	r3, r7
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	881b      	ldrh	r3, [r3, #0]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8f2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b8f6:	1d3b      	adds	r3, r7, #4
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	441a      	add	r2, r3
 800b904:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b90c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	b29b      	uxth	r3, r3
 800b91a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b91c:	1d3b      	adds	r3, r7, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b922:	1d3b      	adds	r3, r7, #4
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	461a      	mov	r2, r3
 800b92e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b930:	4413      	add	r3, r2
 800b932:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b934:	463b      	mov	r3, r7
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	00da      	lsls	r2, r3, #3
 800b93c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b93e:	4413      	add	r3, r2
 800b940:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b944:	65bb      	str	r3, [r7, #88]	; 0x58
 800b946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b94e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b950:	463b      	mov	r3, r7
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	891b      	ldrh	r3, [r3, #8]
 800b956:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b95a:	463b      	mov	r3, r7
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6959      	ldr	r1, [r3, #20]
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b964:	b29b      	uxth	r3, r3
 800b966:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b96a:	1d38      	adds	r0, r7, #4
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f000 fe72 	bl	800c656 <USB_WritePMA>
 800b972:	e151      	b.n	800bc18 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b974:	463b      	mov	r3, r7
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	6a1a      	ldr	r2, [r3, #32]
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97e:	1ad2      	subs	r2, r2, r3
 800b980:	463b      	mov	r3, r7
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b986:	1d3b      	adds	r3, r7, #4
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	463b      	mov	r3, r7
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	b29b      	uxth	r3, r3
 800b998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 809b 	beq.w	800bad8 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9a2:	1d3b      	adds	r3, r7, #4
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	673b      	str	r3, [r7, #112]	; 0x70
 800b9a8:	463b      	mov	r3, r7
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	785b      	ldrb	r3, [r3, #1]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d164      	bne.n	800ba7c <USB_EPStartXfer+0x83e>
 800b9b2:	1d3b      	adds	r3, r7, #4
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9b8:	1d3b      	adds	r3, r7, #4
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9c6:	4413      	add	r3, r2
 800b9c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	00da      	lsls	r2, r3, #3
 800b9d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9da:	667b      	str	r3, [r7, #100]	; 0x64
 800b9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e0:	2b3e      	cmp	r3, #62	; 0x3e
 800b9e2:	d91c      	bls.n	800ba1e <USB_EPStartXfer+0x7e0>
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	095b      	lsrs	r3, r3, #5
 800b9ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f2:	f003 031f 	and.w	r3, r3, #31
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d104      	bne.n	800ba04 <USB_EPStartXfer+0x7c6>
 800b9fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	029b      	lsls	r3, r3, #10
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba1a:	801a      	strh	r2, [r3, #0]
 800ba1c:	e04a      	b.n	800bab4 <USB_EPStartXfer+0x876>
 800ba1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d112      	bne.n	800ba4c <USB_EPStartXfer+0x80e>
 800ba26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba34:	801a      	strh	r2, [r3, #0]
 800ba36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba48:	801a      	strh	r2, [r3, #0]
 800ba4a:	e033      	b.n	800bab4 <USB_EPStartXfer+0x876>
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	085b      	lsrs	r3, r3, #1
 800ba52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d004      	beq.n	800ba6c <USB_EPStartXfer+0x82e>
 800ba62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba66:	3301      	adds	r3, #1
 800ba68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	029b      	lsls	r3, r3, #10
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba78:	801a      	strh	r2, [r3, #0]
 800ba7a:	e01b      	b.n	800bab4 <USB_EPStartXfer+0x876>
 800ba7c:	463b      	mov	r3, r7
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d116      	bne.n	800bab4 <USB_EPStartXfer+0x876>
 800ba86:	1d3b      	adds	r3, r7, #4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	461a      	mov	r2, r3
 800ba92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba94:	4413      	add	r3, r2
 800ba96:	673b      	str	r3, [r7, #112]	; 0x70
 800ba98:	463b      	mov	r3, r7
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	00da      	lsls	r2, r3, #3
 800baa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baa2:	4413      	add	r3, r2
 800baa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800baa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800baaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baae:	b29a      	uxth	r2, r3
 800bab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bab2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bab4:	463b      	mov	r3, r7
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	895b      	ldrh	r3, [r3, #10]
 800baba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800babe:	463b      	mov	r3, r7
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6959      	ldr	r1, [r3, #20]
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac8:	b29b      	uxth	r3, r3
 800baca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bace:	1d38      	adds	r0, r7, #4
 800bad0:	6800      	ldr	r0, [r0, #0]
 800bad2:	f000 fdc0 	bl	800c656 <USB_WritePMA>
 800bad6:	e09f      	b.n	800bc18 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bad8:	463b      	mov	r3, r7
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	785b      	ldrb	r3, [r3, #1]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d164      	bne.n	800bbac <USB_EPStartXfer+0x96e>
 800bae2:	1d3b      	adds	r3, r7, #4
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bae8:	1d3b      	adds	r3, r7, #4
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800baf6:	4413      	add	r3, r2
 800baf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bafa:	463b      	mov	r3, r7
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	00da      	lsls	r2, r3, #3
 800bb02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb04:	4413      	add	r3, r2
 800bb06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	2b3e      	cmp	r3, #62	; 0x3e
 800bb12:	d91c      	bls.n	800bb4e <USB_EPStartXfer+0x910>
 800bb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb18:	095b      	lsrs	r3, r3, #5
 800bb1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb22:	f003 031f 	and.w	r3, r3, #31
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d104      	bne.n	800bb34 <USB_EPStartXfer+0x8f6>
 800bb2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	029b      	lsls	r3, r3, #10
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb4a:	801a      	strh	r2, [r3, #0]
 800bb4c:	e053      	b.n	800bbf6 <USB_EPStartXfer+0x9b8>
 800bb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d112      	bne.n	800bb7c <USB_EPStartXfer+0x93e>
 800bb56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb64:	801a      	strh	r2, [r3, #0]
 800bb66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb78:	801a      	strh	r2, [r3, #0]
 800bb7a:	e03c      	b.n	800bbf6 <USB_EPStartXfer+0x9b8>
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	085b      	lsrs	r3, r3, #1
 800bb82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d004      	beq.n	800bb9c <USB_EPStartXfer+0x95e>
 800bb92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb96:	3301      	adds	r3, #1
 800bb98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	029b      	lsls	r3, r3, #10
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bba8:	801a      	strh	r2, [r3, #0]
 800bbaa:	e024      	b.n	800bbf6 <USB_EPStartXfer+0x9b8>
 800bbac:	463b      	mov	r3, r7
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	785b      	ldrb	r3, [r3, #1]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d11f      	bne.n	800bbf6 <USB_EPStartXfer+0x9b8>
 800bbb6:	1d3b      	adds	r3, r7, #4
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbbe:	1d3b      	adds	r3, r7, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	461a      	mov	r2, r3
 800bbca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbce:	4413      	add	r3, r2
 800bbd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbd4:	463b      	mov	r3, r7
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	00da      	lsls	r2, r3, #3
 800bbdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbf4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bbf6:	463b      	mov	r3, r7
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	891b      	ldrh	r3, [r3, #8]
 800bbfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc00:	463b      	mov	r3, r7
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6959      	ldr	r1, [r3, #20]
 800bc06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bc10:	1d38      	adds	r0, r7, #4
 800bc12:	6800      	ldr	r0, [r0, #0]
 800bc14:	f000 fd1f 	bl	800c656 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bc18:	1d3b      	adds	r3, r7, #4
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc32:	817b      	strh	r3, [r7, #10]
 800bc34:	897b      	ldrh	r3, [r7, #10]
 800bc36:	f083 0310 	eor.w	r3, r3, #16
 800bc3a:	817b      	strh	r3, [r7, #10]
 800bc3c:	897b      	ldrh	r3, [r7, #10]
 800bc3e:	f083 0320 	eor.w	r3, r3, #32
 800bc42:	817b      	strh	r3, [r7, #10]
 800bc44:	1d3b      	adds	r3, r7, #4
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	463b      	mov	r3, r7
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	441a      	add	r2, r3
 800bc52:	897b      	ldrh	r3, [r7, #10]
 800bc54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	8013      	strh	r3, [r2, #0]
 800bc68:	e3b5      	b.n	800c3d6 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bc6a:	463b      	mov	r3, r7
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	7b1b      	ldrb	r3, [r3, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f040 8090 	bne.w	800bd96 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bc76:	463b      	mov	r3, r7
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	699a      	ldr	r2, [r3, #24]
 800bc7c:	463b      	mov	r3, r7
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d90e      	bls.n	800bca4 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800bc86:	463b      	mov	r3, r7
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bc90:	463b      	mov	r3, r7
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	699a      	ldr	r2, [r3, #24]
 800bc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9a:	1ad2      	subs	r2, r2, r3
 800bc9c:	463b      	mov	r3, r7
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	619a      	str	r2, [r3, #24]
 800bca2:	e008      	b.n	800bcb6 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800bca4:	463b      	mov	r3, r7
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bcae:	463b      	mov	r3, r7
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bcb6:	1d3b      	adds	r3, r7, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcbe:	1d3b      	adds	r3, r7, #4
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcce:	4413      	add	r3, r2
 800bcd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	00da      	lsls	r2, r3, #3
 800bcdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bce0:	4413      	add	r3, r2
 800bce2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bcea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcee:	2b3e      	cmp	r3, #62	; 0x3e
 800bcf0:	d91d      	bls.n	800bd2e <USB_EPStartXfer+0xaf0>
 800bcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf6:	095b      	lsrs	r3, r3, #5
 800bcf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bcfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd00:	f003 031f 	and.w	r3, r3, #31
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d104      	bne.n	800bd12 <USB_EPStartXfer+0xad4>
 800bd08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	029b      	lsls	r3, r3, #10
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd2a:	801a      	strh	r2, [r3, #0]
 800bd2c:	e325      	b.n	800c37a <USB_EPStartXfer+0x113c>
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d116      	bne.n	800bd64 <USB_EPStartXfer+0xb26>
 800bd36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd48:	801a      	strh	r2, [r3, #0]
 800bd4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd60:	801a      	strh	r2, [r3, #0]
 800bd62:	e30a      	b.n	800c37a <USB_EPStartXfer+0x113c>
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd68:	085b      	lsrs	r3, r3, #1
 800bd6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <USB_EPStartXfer+0xb46>
 800bd7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd7e:	3301      	adds	r3, #1
 800bd80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	029b      	lsls	r3, r3, #10
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd92:	801a      	strh	r2, [r3, #0]
 800bd94:	e2f1      	b.n	800c37a <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bd96:	463b      	mov	r3, r7
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	78db      	ldrb	r3, [r3, #3]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	f040 818f 	bne.w	800c0c0 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bda2:	463b      	mov	r3, r7
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d175      	bne.n	800be98 <USB_EPStartXfer+0xc5a>
 800bdac:	1d3b      	adds	r3, r7, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdb4:	1d3b      	adds	r3, r7, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdc4:	4413      	add	r3, r2
 800bdc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdca:	463b      	mov	r3, r7
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	00da      	lsls	r2, r3, #3
 800bdd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bde0:	463b      	mov	r3, r7
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	2b3e      	cmp	r3, #62	; 0x3e
 800bde8:	d91f      	bls.n	800be2a <USB_EPStartXfer+0xbec>
 800bdea:	463b      	mov	r3, r7
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	095b      	lsrs	r3, r3, #5
 800bdf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	f003 031f 	and.w	r3, r3, #31
 800be00:	2b00      	cmp	r3, #0
 800be02:	d104      	bne.n	800be0e <USB_EPStartXfer+0xbd0>
 800be04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be08:	3b01      	subs	r3, #1
 800be0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be12:	b29b      	uxth	r3, r3
 800be14:	029b      	lsls	r3, r3, #10
 800be16:	b29b      	uxth	r3, r3
 800be18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be20:	b29a      	uxth	r2, r3
 800be22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be26:	801a      	strh	r2, [r3, #0]
 800be28:	e05c      	b.n	800bee4 <USB_EPStartXfer+0xca6>
 800be2a:	463b      	mov	r3, r7
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d116      	bne.n	800be62 <USB_EPStartXfer+0xc24>
 800be34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be40:	b29a      	uxth	r2, r3
 800be42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be46:	801a      	strh	r2, [r3, #0]
 800be48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be58:	b29a      	uxth	r2, r3
 800be5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be5e:	801a      	strh	r2, [r3, #0]
 800be60:	e040      	b.n	800bee4 <USB_EPStartXfer+0xca6>
 800be62:	463b      	mov	r3, r7
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	085b      	lsrs	r3, r3, #1
 800be6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be6e:	463b      	mov	r3, r7
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <USB_EPStartXfer+0xc48>
 800be7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be80:	3301      	adds	r3, #1
 800be82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	029b      	lsls	r3, r3, #10
 800be8e:	b29a      	uxth	r2, r3
 800be90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be94:	801a      	strh	r2, [r3, #0]
 800be96:	e025      	b.n	800bee4 <USB_EPStartXfer+0xca6>
 800be98:	463b      	mov	r3, r7
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	785b      	ldrb	r3, [r3, #1]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d120      	bne.n	800bee4 <USB_EPStartXfer+0xca6>
 800bea2:	1d3b      	adds	r3, r7, #4
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800beaa:	1d3b      	adds	r3, r7, #4
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	461a      	mov	r2, r3
 800beb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800beba:	4413      	add	r3, r2
 800bebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bec0:	463b      	mov	r3, r7
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	00da      	lsls	r2, r3, #3
 800bec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800becc:	4413      	add	r3, r2
 800bece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bed6:	463b      	mov	r3, r7
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	b29a      	uxth	r2, r3
 800bede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bee2:	801a      	strh	r2, [r3, #0]
 800bee4:	1d3b      	adds	r3, r7, #4
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800beec:	463b      	mov	r3, r7
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	785b      	ldrb	r3, [r3, #1]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d175      	bne.n	800bfe2 <USB_EPStartXfer+0xda4>
 800bef6:	1d3b      	adds	r3, r7, #4
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800befe:	1d3b      	adds	r3, r7, #4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	461a      	mov	r2, r3
 800bf0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf0e:	4413      	add	r3, r2
 800bf10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf14:	463b      	mov	r3, r7
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	00da      	lsls	r2, r3, #3
 800bf1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf20:	4413      	add	r3, r2
 800bf22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	2b3e      	cmp	r3, #62	; 0x3e
 800bf32:	d91f      	bls.n	800bf74 <USB_EPStartXfer+0xd36>
 800bf34:	463b      	mov	r3, r7
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	095b      	lsrs	r3, r3, #5
 800bf3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf40:	463b      	mov	r3, r7
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	f003 031f 	and.w	r3, r3, #31
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d104      	bne.n	800bf58 <USB_EPStartXfer+0xd1a>
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf52:	3b01      	subs	r3, #1
 800bf54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	029b      	lsls	r3, r3, #10
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf70:	801a      	strh	r2, [r3, #0]
 800bf72:	e058      	b.n	800c026 <USB_EPStartXfer+0xde8>
 800bf74:	463b      	mov	r3, r7
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d116      	bne.n	800bfac <USB_EPStartXfer+0xd6e>
 800bf7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf90:	801a      	strh	r2, [r3, #0]
 800bf92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfa8:	801a      	strh	r2, [r3, #0]
 800bfaa:	e03c      	b.n	800c026 <USB_EPStartXfer+0xde8>
 800bfac:	463b      	mov	r3, r7
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	085b      	lsrs	r3, r3, #1
 800bfb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bfb8:	463b      	mov	r3, r7
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d004      	beq.n	800bfd0 <USB_EPStartXfer+0xd92>
 800bfc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfca:	3301      	adds	r3, #1
 800bfcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bfd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	029b      	lsls	r3, r3, #10
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	e021      	b.n	800c026 <USB_EPStartXfer+0xde8>
 800bfe2:	463b      	mov	r3, r7
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d11c      	bne.n	800c026 <USB_EPStartXfer+0xde8>
 800bfec:	1d3b      	adds	r3, r7, #4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	461a      	mov	r2, r3
 800bff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bffc:	4413      	add	r3, r2
 800bffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c002:	463b      	mov	r3, r7
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	00da      	lsls	r2, r3, #3
 800c00a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c00e:	4413      	add	r3, r2
 800c010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c018:	463b      	mov	r3, r7
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	b29a      	uxth	r2, r3
 800c020:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c024:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c026:	463b      	mov	r3, r7
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	69db      	ldr	r3, [r3, #28]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 81a4 	beq.w	800c37a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c032:	1d3b      	adds	r3, r7, #4
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	463b      	mov	r3, r7
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c046:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c04a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <USB_EPStartXfer+0xe20>
 800c052:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10d      	bne.n	800c07a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c05e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c066:	2b00      	cmp	r3, #0
 800c068:	f040 8187 	bne.w	800c37a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c06c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c074:	2b00      	cmp	r3, #0
 800c076:	f040 8180 	bne.w	800c37a <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c07a:	1d3b      	adds	r3, r7, #4
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	463b      	mov	r3, r7
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c094:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c098:	1d3b      	adds	r3, r7, #4
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	463b      	mov	r3, r7
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	441a      	add	r2, r3
 800c0a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c0aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	8013      	strh	r3, [r2, #0]
 800c0be:	e15c      	b.n	800c37a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	78db      	ldrb	r3, [r3, #3]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	f040 8155 	bne.w	800c376 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c0cc:	463b      	mov	r3, r7
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	699a      	ldr	r2, [r3, #24]
 800c0d2:	463b      	mov	r3, r7
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d90e      	bls.n	800c0fa <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800c0dc:	463b      	mov	r3, r7
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	699a      	ldr	r2, [r3, #24]
 800c0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f0:	1ad2      	subs	r2, r2, r3
 800c0f2:	463b      	mov	r3, r7
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	619a      	str	r2, [r3, #24]
 800c0f8:	e008      	b.n	800c10c <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c104:	463b      	mov	r3, r7
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2200      	movs	r2, #0
 800c10a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c10c:	463b      	mov	r3, r7
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	785b      	ldrb	r3, [r3, #1]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d16f      	bne.n	800c1f6 <USB_EPStartXfer+0xfb8>
 800c116:	1d3b      	adds	r3, r7, #4
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c11e:	1d3b      	adds	r3, r7, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c126:	b29b      	uxth	r3, r3
 800c128:	461a      	mov	r2, r3
 800c12a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c12e:	4413      	add	r3, r2
 800c130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c134:	463b      	mov	r3, r7
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	00da      	lsls	r2, r3, #3
 800c13c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c140:	4413      	add	r3, r2
 800c142:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	2b3e      	cmp	r3, #62	; 0x3e
 800c150:	d91d      	bls.n	800c18e <USB_EPStartXfer+0xf50>
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c156:	095b      	lsrs	r3, r3, #5
 800c158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c160:	f003 031f 	and.w	r3, r3, #31
 800c164:	2b00      	cmp	r3, #0
 800c166:	d104      	bne.n	800c172 <USB_EPStartXfer+0xf34>
 800c168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c16c:	3b01      	subs	r3, #1
 800c16e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c176:	b29b      	uxth	r3, r3
 800c178:	029b      	lsls	r3, r3, #10
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c184:	b29a      	uxth	r2, r3
 800c186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c18a:	801a      	strh	r2, [r3, #0]
 800c18c:	e058      	b.n	800c240 <USB_EPStartXfer+0x1002>
 800c18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c192:	2b00      	cmp	r3, #0
 800c194:	d116      	bne.n	800c1c4 <USB_EPStartXfer+0xf86>
 800c196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c19a:	881b      	ldrh	r3, [r3, #0]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1a8:	801a      	strh	r2, [r3, #0]
 800c1aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1c0:	801a      	strh	r2, [r3, #0]
 800c1c2:	e03d      	b.n	800c240 <USB_EPStartXfer+0x1002>
 800c1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c8:	085b      	lsrs	r3, r3, #1
 800c1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d004      	beq.n	800c1e4 <USB_EPStartXfer+0xfa6>
 800c1da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1de:	3301      	adds	r3, #1
 800c1e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	029b      	lsls	r3, r3, #10
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c1f2:	801a      	strh	r2, [r3, #0]
 800c1f4:	e024      	b.n	800c240 <USB_EPStartXfer+0x1002>
 800c1f6:	463b      	mov	r3, r7
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	785b      	ldrb	r3, [r3, #1]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d11f      	bne.n	800c240 <USB_EPStartXfer+0x1002>
 800c200:	1d3b      	adds	r3, r7, #4
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c208:	1d3b      	adds	r3, r7, #4
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c210:	b29b      	uxth	r3, r3
 800c212:	461a      	mov	r2, r3
 800c214:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c218:	4413      	add	r3, r2
 800c21a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c21e:	463b      	mov	r3, r7
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	00da      	lsls	r2, r3, #3
 800c226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c22a:	4413      	add	r3, r2
 800c22c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c238:	b29a      	uxth	r2, r3
 800c23a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c23e:	801a      	strh	r2, [r3, #0]
 800c240:	1d3b      	adds	r3, r7, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c248:	463b      	mov	r3, r7
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	785b      	ldrb	r3, [r3, #1]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d16f      	bne.n	800c332 <USB_EPStartXfer+0x10f4>
 800c252:	1d3b      	adds	r3, r7, #4
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c25a:	1d3b      	adds	r3, r7, #4
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c262:	b29b      	uxth	r3, r3
 800c264:	461a      	mov	r2, r3
 800c266:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c26a:	4413      	add	r3, r2
 800c26c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c270:	463b      	mov	r3, r7
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	00da      	lsls	r2, r3, #3
 800c278:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c27c:	4413      	add	r3, r2
 800c27e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c28a:	2b3e      	cmp	r3, #62	; 0x3e
 800c28c:	d91d      	bls.n	800c2ca <USB_EPStartXfer+0x108c>
 800c28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c292:	095b      	lsrs	r3, r3, #5
 800c294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c29c:	f003 031f 	and.w	r3, r3, #31
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d104      	bne.n	800c2ae <USB_EPStartXfer+0x1070>
 800c2a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c2ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	029b      	lsls	r3, r3, #10
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2c6:	801a      	strh	r2, [r3, #0]
 800c2c8:	e057      	b.n	800c37a <USB_EPStartXfer+0x113c>
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d116      	bne.n	800c300 <USB_EPStartXfer+0x10c2>
 800c2d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2e4:	801a      	strh	r2, [r3, #0]
 800c2e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c2fc:	801a      	strh	r2, [r3, #0]
 800c2fe:	e03c      	b.n	800c37a <USB_EPStartXfer+0x113c>
 800c300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c304:	085b      	lsrs	r3, r3, #1
 800c306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d004      	beq.n	800c320 <USB_EPStartXfer+0x10e2>
 800c316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c31a:	3301      	adds	r3, #1
 800c31c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c324:	b29b      	uxth	r3, r3
 800c326:	029b      	lsls	r3, r3, #10
 800c328:	b29a      	uxth	r2, r3
 800c32a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c32e:	801a      	strh	r2, [r3, #0]
 800c330:	e023      	b.n	800c37a <USB_EPStartXfer+0x113c>
 800c332:	463b      	mov	r3, r7
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	785b      	ldrb	r3, [r3, #1]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d11e      	bne.n	800c37a <USB_EPStartXfer+0x113c>
 800c33c:	1d3b      	adds	r3, r7, #4
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c344:	b29b      	uxth	r3, r3
 800c346:	461a      	mov	r2, r3
 800c348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c34c:	4413      	add	r3, r2
 800c34e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c352:	463b      	mov	r3, r7
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	00da      	lsls	r2, r3, #3
 800c35a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c35e:	4413      	add	r3, r2
 800c360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c372:	801a      	strh	r2, [r3, #0]
 800c374:	e001      	b.n	800c37a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e02e      	b.n	800c3d8 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c37a:	1d3b      	adds	r3, r7, #4
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	463b      	mov	r3, r7
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c394:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c398:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c39c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c3a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c3a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c3a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c3ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c3b0:	1d3b      	adds	r3, r7, #4
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	463b      	mov	r3, r7
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	441a      	add	r2, r3
 800c3be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c3c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b085      	sub	sp, #20
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	785b      	ldrb	r3, [r3, #1]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d020      	beq.n	800c436 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	b29b      	uxth	r3, r3
 800c402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c40a:	81bb      	strh	r3, [r7, #12]
 800c40c:	89bb      	ldrh	r3, [r7, #12]
 800c40e:	f083 0310 	eor.w	r3, r3, #16
 800c412:	81bb      	strh	r3, [r7, #12]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	441a      	add	r2, r3
 800c41e:	89bb      	ldrh	r3, [r7, #12]
 800c420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c430:	b29b      	uxth	r3, r3
 800c432:	8013      	strh	r3, [r2, #0]
 800c434:	e01f      	b.n	800c476 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	b29b      	uxth	r3, r3
 800c444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44c:	81fb      	strh	r3, [r7, #14]
 800c44e:	89fb      	ldrh	r3, [r7, #14]
 800c450:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c454:	81fb      	strh	r3, [r7, #14]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	441a      	add	r2, r3
 800c460:	89fb      	ldrh	r3, [r7, #14]
 800c462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c46a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c472:	b29b      	uxth	r3, r3
 800c474:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	7b1b      	ldrb	r3, [r3, #12]
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 809d 	bne.w	800c5d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d04c      	beq.n	800c53a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	4413      	add	r3, r2
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	823b      	strh	r3, [r7, #16]
 800c4ae:	8a3b      	ldrh	r3, [r7, #16]
 800c4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d01b      	beq.n	800c4f0 <USB_EPClearStall+0x6c>
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4413      	add	r3, r2
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ce:	81fb      	strh	r3, [r7, #14]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	441a      	add	r2, r3
 800c4da:	89fb      	ldrh	r3, [r7, #14]
 800c4dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	78db      	ldrb	r3, [r3, #3]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d06c      	beq.n	800c5d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	b29b      	uxth	r3, r3
 800c506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c50a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c50e:	81bb      	strh	r3, [r7, #12]
 800c510:	89bb      	ldrh	r3, [r7, #12]
 800c512:	f083 0320 	eor.w	r3, r3, #32
 800c516:	81bb      	strh	r3, [r7, #12]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	441a      	add	r2, r3
 800c522:	89bb      	ldrh	r3, [r7, #12]
 800c524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c52c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c534:	b29b      	uxth	r3, r3
 800c536:	8013      	strh	r3, [r2, #0]
 800c538:	e04b      	b.n	800c5d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4413      	add	r3, r2
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	82fb      	strh	r3, [r7, #22]
 800c548:	8afb      	ldrh	r3, [r7, #22]
 800c54a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d01b      	beq.n	800c58a <USB_EPClearStall+0x106>
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	4413      	add	r3, r2
 800c55c:	881b      	ldrh	r3, [r3, #0]
 800c55e:	b29b      	uxth	r3, r3
 800c560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c568:	82bb      	strh	r3, [r7, #20]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	441a      	add	r2, r3
 800c574:	8abb      	ldrh	r3, [r7, #20]
 800c576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c57a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c57e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c586:	b29b      	uxth	r3, r3
 800c588:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4413      	add	r3, r2
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	b29b      	uxth	r3, r3
 800c598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a0:	827b      	strh	r3, [r7, #18]
 800c5a2:	8a7b      	ldrh	r3, [r7, #18]
 800c5a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c5a8:	827b      	strh	r3, [r7, #18]
 800c5aa:	8a7b      	ldrh	r3, [r7, #18]
 800c5ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c5b0:	827b      	strh	r3, [r7, #18]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	441a      	add	r2, r3
 800c5bc:	8a7b      	ldrh	r3, [r7, #18]
 800c5be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	371c      	adds	r7, #28
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c5ec:	78fb      	ldrb	r3, [r7, #3]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d103      	bne.n	800c5fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2280      	movs	r2, #128	; 0x80
 800c5f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c616:	b29b      	uxth	r3, r3
 800c618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c61c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c620:	b29a      	uxth	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c636:	b480      	push	{r7}
 800c638:	b085      	sub	sp, #20
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c644:	b29b      	uxth	r3, r3
 800c646:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c648:	68fb      	ldr	r3, [r7, #12]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c656:	b480      	push	{r7}
 800c658:	b08d      	sub	sp, #52	; 0x34
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	4611      	mov	r1, r2
 800c662:	461a      	mov	r2, r3
 800c664:	460b      	mov	r3, r1
 800c666:	80fb      	strh	r3, [r7, #6]
 800c668:	4613      	mov	r3, r2
 800c66a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c66c:	88bb      	ldrh	r3, [r7, #4]
 800c66e:	3301      	adds	r3, #1
 800c670:	085b      	lsrs	r3, r3, #1
 800c672:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c67c:	88fa      	ldrh	r2, [r7, #6]
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	4413      	add	r3, r2
 800c682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c686:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c68c:	e01b      	b.n	800c6c6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c696:	3301      	adds	r3, #1
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	021b      	lsls	r3, r3, #8
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	3301      	adds	r3, #1
 800c6be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e0      	bne.n	800c68e <USB_WritePMA+0x38>
  }
}
 800c6cc:	bf00      	nop
 800c6ce:	bf00      	nop
 800c6d0:	3734      	adds	r7, #52	; 0x34
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b08b      	sub	sp, #44	; 0x2c
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	60f8      	str	r0, [r7, #12]
 800c6e2:	60b9      	str	r1, [r7, #8]
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	80fb      	strh	r3, [r7, #6]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c6f0:	88bb      	ldrh	r3, [r7, #4]
 800c6f2:	085b      	lsrs	r3, r3, #1
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c700:	88fa      	ldrh	r2, [r7, #6]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c70a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
 800c710:	e018      	b.n	800c744 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	b29b      	uxth	r3, r3
 800c718:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	3302      	adds	r3, #2
 800c71e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	b2da      	uxtb	r2, r3
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	3301      	adds	r3, #1
 800c72c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	0a1b      	lsrs	r3, r3, #8
 800c732:	b2da      	uxtb	r2, r3
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	3301      	adds	r3, #1
 800c73c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800c73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c740:	3b01      	subs	r3, #1
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1e3      	bne.n	800c712 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c74a:	88bb      	ldrh	r3, [r7, #4]
 800c74c:	f003 0301 	and.w	r3, r3, #1
 800c750:	b29b      	uxth	r3, r3
 800c752:	2b00      	cmp	r3, #0
 800c754:	d007      	beq.n	800c766 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	881b      	ldrh	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	b2da      	uxtb	r2, r3
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	701a      	strb	r2, [r3, #0]
  }
}
 800c766:	bf00      	nop
 800c768:	372c      	adds	r7, #44	; 0x2c
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b084      	sub	sp, #16
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	460b      	mov	r3, r1
 800c77c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c77e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c782:	f006 ff85 	bl	8013690 <USBD_static_malloc>
 800c786:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c796:	2302      	movs	r3, #2
 800c798:	e066      	b.n	800c868 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7c1b      	ldrb	r3, [r3, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d119      	bne.n	800c7de <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c7aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	2181      	movs	r1, #129	; 0x81
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f006 fe11 	bl	80133da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c7be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f006 fe07 	bl	80133da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2210      	movs	r2, #16
 800c7d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c7dc:	e016      	b.n	800c80c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	2181      	movs	r1, #129	; 0x81
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f006 fdf8 	bl	80133da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c7f0:	2340      	movs	r3, #64	; 0x40
 800c7f2:	2202      	movs	r2, #2
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f006 fdef 	bl	80133da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2210      	movs	r2, #16
 800c808:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c80c:	2308      	movs	r3, #8
 800c80e:	2203      	movs	r2, #3
 800c810:	2182      	movs	r1, #130	; 0x82
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f006 fde1 	bl	80133da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	7c1b      	ldrb	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d109      	bne.n	800c856 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c84c:	2101      	movs	r1, #1
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f006 feb3 	bl	80135ba <USBD_LL_PrepareReceive>
 800c854:	e007      	b.n	800c866 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c85c:	2340      	movs	r3, #64	; 0x40
 800c85e:	2101      	movs	r1, #1
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f006 feaa 	bl	80135ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c87c:	2181      	movs	r1, #129	; 0x81
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f006 fdd1 	bl	8013426 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c88a:	2101      	movs	r1, #1
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f006 fdca 	bl	8013426 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c89a:	2182      	movs	r1, #130	; 0x82
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f006 fdc2 	bl	8013426 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00e      	beq.n	800c8da <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f006 feed 	bl	80136ac <USBD_static_free>
    pdev->pClassData = NULL;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8fe:	2300      	movs	r3, #0
 800c900:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c908:	2303      	movs	r3, #3
 800c90a:	e0af      	b.n	800ca6c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c914:	2b00      	cmp	r3, #0
 800c916:	d03f      	beq.n	800c998 <USBD_CDC_Setup+0xb4>
 800c918:	2b20      	cmp	r3, #32
 800c91a:	f040 809f 	bne.w	800ca5c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	88db      	ldrh	r3, [r3, #6]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d02e      	beq.n	800c984 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b25b      	sxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	da16      	bge.n	800c95e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c93c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	88d2      	ldrh	r2, [r2, #6]
 800c942:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	88db      	ldrh	r3, [r3, #6]
 800c948:	2b07      	cmp	r3, #7
 800c94a:	bf28      	it	cs
 800c94c:	2307      	movcs	r3, #7
 800c94e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	89fa      	ldrh	r2, [r7, #14]
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f001 fa9f 	bl	800de9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c95c:	e085      	b.n	800ca6a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	785a      	ldrb	r2, [r3, #1]
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	88db      	ldrh	r3, [r3, #6]
 800c96c:	b2da      	uxtb	r2, r3
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c974:	6939      	ldr	r1, [r7, #16]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	88db      	ldrh	r3, [r3, #6]
 800c97a:	461a      	mov	r2, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f001 fab8 	bl	800def2 <USBD_CtlPrepareRx>
      break;
 800c982:	e072      	b.n	800ca6a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	7850      	ldrb	r0, [r2, #1]
 800c990:	2200      	movs	r2, #0
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	4798      	blx	r3
      break;
 800c996:	e068      	b.n	800ca6a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	785b      	ldrb	r3, [r3, #1]
 800c99c:	2b0b      	cmp	r3, #11
 800c99e:	d852      	bhi.n	800ca46 <USBD_CDC_Setup+0x162>
 800c9a0:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <USBD_CDC_Setup+0xc4>)
 800c9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a6:	bf00      	nop
 800c9a8:	0800c9d9 	.word	0x0800c9d9
 800c9ac:	0800ca55 	.word	0x0800ca55
 800c9b0:	0800ca47 	.word	0x0800ca47
 800c9b4:	0800ca47 	.word	0x0800ca47
 800c9b8:	0800ca47 	.word	0x0800ca47
 800c9bc:	0800ca47 	.word	0x0800ca47
 800c9c0:	0800ca47 	.word	0x0800ca47
 800c9c4:	0800ca47 	.word	0x0800ca47
 800c9c8:	0800ca47 	.word	0x0800ca47
 800c9cc:	0800ca47 	.word	0x0800ca47
 800c9d0:	0800ca03 	.word	0x0800ca03
 800c9d4:	0800ca2d 	.word	0x0800ca2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d107      	bne.n	800c9f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c9e4:	f107 030a 	add.w	r3, r7, #10
 800c9e8:	2202      	movs	r2, #2
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f001 fa54 	bl	800de9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9f2:	e032      	b.n	800ca5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 f9de 	bl	800ddb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	75fb      	strb	r3, [r7, #23]
          break;
 800ca00:	e02b      	b.n	800ca5a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d107      	bne.n	800ca1e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca0e:	f107 030d 	add.w	r3, r7, #13
 800ca12:	2201      	movs	r2, #1
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 fa3f 	bl	800de9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca1c:	e01d      	b.n	800ca5a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f001 f9c9 	bl	800ddb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ca26:	2303      	movs	r3, #3
 800ca28:	75fb      	strb	r3, [r7, #23]
          break;
 800ca2a:	e016      	b.n	800ca5a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	d00f      	beq.n	800ca58 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 f9bc 	bl	800ddb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ca40:	2303      	movs	r3, #3
 800ca42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ca44:	e008      	b.n	800ca58 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f001 f9b5 	bl	800ddb8 <USBD_CtlError>
          ret = USBD_FAIL;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	75fb      	strb	r3, [r7, #23]
          break;
 800ca52:	e002      	b.n	800ca5a <USBD_CDC_Setup+0x176>
          break;
 800ca54:	bf00      	nop
 800ca56:	e008      	b.n	800ca6a <USBD_CDC_Setup+0x186>
          break;
 800ca58:	bf00      	nop
      }
      break;
 800ca5a:	e006      	b.n	800ca6a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f001 f9aa 	bl	800ddb8 <USBD_CtlError>
      ret = USBD_FAIL;
 800ca64:	2303      	movs	r3, #3
 800ca66:	75fb      	strb	r3, [r7, #23]
      break;
 800ca68:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e04f      	b.n	800cb36 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ca9e:	78fa      	ldrb	r2, [r7, #3]
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	440b      	add	r3, r1
 800caac:	3318      	adds	r3, #24
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d029      	beq.n	800cb08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cab4:	78fa      	ldrb	r2, [r7, #3]
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	4613      	mov	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	440b      	add	r3, r1
 800cac2:	3318      	adds	r3, #24
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	78f9      	ldrb	r1, [r7, #3]
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	460b      	mov	r3, r1
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	440b      	add	r3, r1
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4403      	add	r3, r0
 800cad4:	3338      	adds	r3, #56	; 0x38
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	fbb2 f1f3 	udiv	r1, r2, r3
 800cadc:	fb03 f301 	mul.w	r3, r3, r1
 800cae0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d110      	bne.n	800cb08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cae6:	78fa      	ldrb	r2, [r7, #3]
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	440b      	add	r3, r1
 800caf4:	3318      	adds	r3, #24
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cafa:	78f9      	ldrb	r1, [r7, #3]
 800cafc:	2300      	movs	r3, #0
 800cafe:	2200      	movs	r2, #0
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f006 fd39 	bl	8013578 <USBD_LL_Transmit>
 800cb06:	e015      	b.n	800cb34 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00b      	beq.n	800cb34 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cb30:	78fa      	ldrb	r2, [r7, #3]
 800cb32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	460b      	mov	r3, r1
 800cb48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e015      	b.n	800cb8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb60:	78fb      	ldrb	r3, [r7, #3]
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f006 fd49 	bl	80135fc <USBD_LL_GetRxDataSize>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cb86:	4611      	mov	r1, r2
 800cb88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cba2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e01b      	b.n	800cbe6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d015      	beq.n	800cbe4 <USBD_CDC_EP0_RxReady+0x50>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cbbe:	2bff      	cmp	r3, #255	; 0xff
 800cbc0:	d010      	beq.n	800cbe4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cbd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cbd8:	b292      	uxth	r2, r2
 800cbda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	22ff      	movs	r2, #255	; 0xff
 800cbe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
	...

0800cbf0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2243      	movs	r2, #67	; 0x43
 800cbfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cbfe:	4b03      	ldr	r3, [pc, #12]	; (800cc0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	200000a4 	.word	0x200000a4

0800cc10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2243      	movs	r2, #67	; 0x43
 800cc1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cc1e:	4b03      	ldr	r3, [pc, #12]	; (800cc2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	20000060 	.word	0x20000060

0800cc30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2243      	movs	r2, #67	; 0x43
 800cc3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cc3e:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	200000e8 	.word	0x200000e8

0800cc50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	220a      	movs	r2, #10
 800cc5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cc5e:	4b03      	ldr	r3, [pc, #12]	; (800cc6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	2000001c 	.word	0x2000001c

0800cc70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e004      	b.n	800cc8e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b087      	sub	sp, #28
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e008      	b.n	800ccca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	371c      	adds	r7, #28
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cce6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e004      	b.n	800ccfc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e016      	b.n	800cd54 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	7c1b      	ldrb	r3, [r3, #16]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d109      	bne.n	800cd42 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd38:	2101      	movs	r1, #1
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f006 fc3d 	bl	80135ba <USBD_LL_PrepareReceive>
 800cd40:	e007      	b.n	800cd52 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd48:	2340      	movs	r3, #64	; 0x40
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f006 fc34 	bl	80135ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4613      	mov	r3, r2
 800cd68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e01f      	b.n	800cdb4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d003      	beq.n	800cd9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	79fa      	ldrb	r2, [r7, #7]
 800cda6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f006 fa99 	bl	80132e0 <USBD_LL_Init>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e016      	b.n	800ce02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00b      	beq.n	800ce00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf0:	f107 020e 	add.w	r2, r7, #14
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	4798      	blx	r3
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ce00:	2300      	movs	r3, #0
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b082      	sub	sp, #8
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f006 fac6 	bl	80133a4 <USBD_LL_Start>
 800ce18:	4603      	mov	r3, r0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce2a:	2300      	movs	r3, #0
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ce44:	2303      	movs	r3, #3
 800ce46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	78fa      	ldrb	r2, [r7, #3]
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	4798      	blx	r3
 800ce62:	4603      	mov	r3, r0
 800ce64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d007      	beq.n	800ce96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	78fa      	ldrb	r2, [r7, #3]
 800ce90:	4611      	mov	r1, r2
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	4798      	blx	r3
  }

  return USBD_OK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 ff46 	bl	800dd44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cec6:	461a      	mov	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ced4:	f003 031f 	and.w	r3, r3, #31
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d01a      	beq.n	800cf12 <USBD_LL_SetupStage+0x72>
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d822      	bhi.n	800cf26 <USBD_LL_SetupStage+0x86>
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <USBD_LL_SetupStage+0x4a>
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d00a      	beq.n	800cefe <USBD_LL_SetupStage+0x5e>
 800cee8:	e01d      	b.n	800cf26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f9ee 	bl	800d2d4 <USBD_StdDevReq>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]
      break;
 800cefc:	e020      	b.n	800cf40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fa52 	bl	800d3b0 <USBD_StdItfReq>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf10:	e016      	b.n	800cf40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fa91 	bl	800d442 <USBD_StdEPReq>
 800cf20:	4603      	mov	r3, r0
 800cf22:	73fb      	strb	r3, [r7, #15]
      break;
 800cf24:	e00c      	b.n	800cf40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f006 fa95 	bl	8013464 <USBD_LL_StallEP>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf3e:	bf00      	nop
  }

  return ret;
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b086      	sub	sp, #24
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	460b      	mov	r3, r1
 800cf54:	607a      	str	r2, [r7, #4]
 800cf56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cf58:	7afb      	ldrb	r3, [r7, #11]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d138      	bne.n	800cfd0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	d14a      	bne.n	800d006 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	689a      	ldr	r2, [r3, #8]
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d913      	bls.n	800cfa4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	689a      	ldr	r2, [r3, #8]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	1ad2      	subs	r2, r2, r3
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	68da      	ldr	r2, [r3, #12]
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	4293      	cmp	r3, r2
 800cf94:	bf28      	it	cs
 800cf96:	4613      	movcs	r3, r2
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f000 ffc5 	bl	800df2c <USBD_CtlContinueRx>
 800cfa2:	e030      	b.n	800d006 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d10b      	bne.n	800cfc8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d005      	beq.n	800cfc8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 ffc0 	bl	800df4e <USBD_CtlSendStatus>
 800cfce:	e01a      	b.n	800d006 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b03      	cmp	r3, #3
 800cfda:	d114      	bne.n	800d006 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe2:	699b      	ldr	r3, [r3, #24]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00e      	beq.n	800d006 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	7afa      	ldrb	r2, [r7, #11]
 800cff2:	4611      	mov	r1, r2
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	4798      	blx	r3
 800cff8:	4603      	mov	r3, r0
 800cffa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d002:	7dfb      	ldrb	r3, [r7, #23]
 800d004:	e000      	b.n	800d008 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	460b      	mov	r3, r1
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d01e:	7afb      	ldrb	r3, [r7, #11]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d16b      	bne.n	800d0fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3314      	adds	r3, #20
 800d028:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d030:	2b02      	cmp	r3, #2
 800d032:	d156      	bne.n	800d0e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d914      	bls.n	800d06a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	1ad2      	subs	r2, r2, r3
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	461a      	mov	r2, r3
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f000 ff3a 	bl	800ded0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d05c:	2300      	movs	r3, #0
 800d05e:	2200      	movs	r2, #0
 800d060:	2100      	movs	r1, #0
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f006 faa9 	bl	80135ba <USBD_LL_PrepareReceive>
 800d068:	e03b      	b.n	800d0e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	68da      	ldr	r2, [r3, #12]
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	429a      	cmp	r2, r3
 800d074:	d11c      	bne.n	800d0b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d07e:	429a      	cmp	r2, r3
 800d080:	d316      	bcc.n	800d0b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d20f      	bcs.n	800d0b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d090:	2200      	movs	r2, #0
 800d092:	2100      	movs	r1, #0
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 ff1b 	bl	800ded0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2100      	movs	r1, #0
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f006 fa86 	bl	80135ba <USBD_LL_PrepareReceive>
 800d0ae:	e018      	b.n	800d0e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d10b      	bne.n	800d0d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d005      	beq.n	800d0d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0d4:	2180      	movs	r1, #128	; 0x80
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f006 f9c4 	bl	8013464 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f000 ff49 	bl	800df74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d122      	bne.n	800d132 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7ff fe98 	bl	800ce22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d0fa:	e01a      	b.n	800d132 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d102:	b2db      	uxtb	r3, r3
 800d104:	2b03      	cmp	r3, #3
 800d106:	d114      	bne.n	800d132 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00e      	beq.n	800d132 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d11a:	695b      	ldr	r3, [r3, #20]
 800d11c:	7afa      	ldrb	r2, [r7, #11]
 800d11e:	4611      	mov	r1, r2
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	4798      	blx	r3
 800d124:	4603      	mov	r3, r0
 800d126:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d128:	7dfb      	ldrb	r3, [r7, #23]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
 800d130:	e000      	b.n	800d134 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d16c:	2303      	movs	r3, #3
 800d16e:	e02f      	b.n	800d1d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00f      	beq.n	800d19a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d009      	beq.n	800d19a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	6852      	ldr	r2, [r2, #4]
 800d192:	b2d2      	uxtb	r2, r2
 800d194:	4611      	mov	r1, r2
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d19a:	2340      	movs	r3, #64	; 0x40
 800d19c:	2200      	movs	r2, #0
 800d19e:	2100      	movs	r1, #0
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f006 f91a 	bl	80133da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2240      	movs	r2, #64	; 0x40
 800d1b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2180      	movs	r1, #128	; 0x80
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f006 f90c 	bl	80133da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2240      	movs	r2, #64	; 0x40
 800d1cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d206:	b2da      	uxtb	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2204      	movs	r2, #4
 800d212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b04      	cmp	r3, #4
 800d236:	d106      	bne.n	800d246 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d266:	2303      	movs	r3, #3
 800d268:	e012      	b.n	800d290 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d270:	b2db      	uxtb	r3, r3
 800d272:	2b03      	cmp	r3, #3
 800d274:	d10b      	bne.n	800d28e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d2b6:	8a3b      	ldrh	r3, [r7, #16]
 800d2b8:	021b      	lsls	r3, r3, #8
 800d2ba:	b21a      	sxth	r2, r3
 800d2bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	b21b      	sxth	r3, r3
 800d2c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d2c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	371c      	adds	r7, #28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2ea:	2b40      	cmp	r3, #64	; 0x40
 800d2ec:	d005      	beq.n	800d2fa <USBD_StdDevReq+0x26>
 800d2ee:	2b40      	cmp	r3, #64	; 0x40
 800d2f0:	d853      	bhi.n	800d39a <USBD_StdDevReq+0xc6>
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00b      	beq.n	800d30e <USBD_StdDevReq+0x3a>
 800d2f6:	2b20      	cmp	r3, #32
 800d2f8:	d14f      	bne.n	800d39a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	6839      	ldr	r1, [r7, #0]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	4798      	blx	r3
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]
      break;
 800d30c:	e04a      	b.n	800d3a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	785b      	ldrb	r3, [r3, #1]
 800d312:	2b09      	cmp	r3, #9
 800d314:	d83b      	bhi.n	800d38e <USBD_StdDevReq+0xba>
 800d316:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <USBD_StdDevReq+0x48>)
 800d318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31c:	0800d371 	.word	0x0800d371
 800d320:	0800d385 	.word	0x0800d385
 800d324:	0800d38f 	.word	0x0800d38f
 800d328:	0800d37b 	.word	0x0800d37b
 800d32c:	0800d38f 	.word	0x0800d38f
 800d330:	0800d34f 	.word	0x0800d34f
 800d334:	0800d345 	.word	0x0800d345
 800d338:	0800d38f 	.word	0x0800d38f
 800d33c:	0800d367 	.word	0x0800d367
 800d340:	0800d359 	.word	0x0800d359
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f9de 	bl	800d708 <USBD_GetDescriptor>
          break;
 800d34c:	e024      	b.n	800d398 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 fb6d 	bl	800da30 <USBD_SetAddress>
          break;
 800d356:	e01f      	b.n	800d398 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fbac 	bl	800dab8 <USBD_SetConfig>
 800d360:	4603      	mov	r3, r0
 800d362:	73fb      	strb	r3, [r7, #15]
          break;
 800d364:	e018      	b.n	800d398 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fc4b 	bl	800dc04 <USBD_GetConfig>
          break;
 800d36e:	e013      	b.n	800d398 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fc7c 	bl	800dc70 <USBD_GetStatus>
          break;
 800d378:	e00e      	b.n	800d398 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d37a:	6839      	ldr	r1, [r7, #0]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fcab 	bl	800dcd8 <USBD_SetFeature>
          break;
 800d382:	e009      	b.n	800d398 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fcba 	bl	800dd00 <USBD_ClrFeature>
          break;
 800d38c:	e004      	b.n	800d398 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fd11 	bl	800ddb8 <USBD_CtlError>
          break;
 800d396:	bf00      	nop
      }
      break;
 800d398:	e004      	b.n	800d3a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fd0b 	bl	800ddb8 <USBD_CtlError>
      break;
 800d3a2:	bf00      	nop
  }

  return ret;
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop

0800d3b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3c6:	2b40      	cmp	r3, #64	; 0x40
 800d3c8:	d005      	beq.n	800d3d6 <USBD_StdItfReq+0x26>
 800d3ca:	2b40      	cmp	r3, #64	; 0x40
 800d3cc:	d82f      	bhi.n	800d42e <USBD_StdItfReq+0x7e>
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <USBD_StdItfReq+0x26>
 800d3d2:	2b20      	cmp	r3, #32
 800d3d4:	d12b      	bne.n	800d42e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d81d      	bhi.n	800d420 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	889b      	ldrh	r3, [r3, #4]
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d813      	bhi.n	800d416 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	6839      	ldr	r1, [r7, #0]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	4798      	blx	r3
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	88db      	ldrh	r3, [r3, #6]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d110      	bne.n	800d42a <USBD_StdItfReq+0x7a>
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10d      	bne.n	800d42a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fd9d 	bl	800df4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d414:	e009      	b.n	800d42a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 fccd 	bl	800ddb8 <USBD_CtlError>
          break;
 800d41e:	e004      	b.n	800d42a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fcc8 	bl	800ddb8 <USBD_CtlError>
          break;
 800d428:	e000      	b.n	800d42c <USBD_StdItfReq+0x7c>
          break;
 800d42a:	bf00      	nop
      }
      break;
 800d42c:	e004      	b.n	800d438 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fcc1 	bl	800ddb8 <USBD_CtlError>
      break;
 800d436:	bf00      	nop
  }

  return ret;
 800d438:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	889b      	ldrh	r3, [r3, #4]
 800d454:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d45e:	2b40      	cmp	r3, #64	; 0x40
 800d460:	d007      	beq.n	800d472 <USBD_StdEPReq+0x30>
 800d462:	2b40      	cmp	r3, #64	; 0x40
 800d464:	f200 8145 	bhi.w	800d6f2 <USBD_StdEPReq+0x2b0>
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00c      	beq.n	800d486 <USBD_StdEPReq+0x44>
 800d46c:	2b20      	cmp	r3, #32
 800d46e:	f040 8140 	bne.w	800d6f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	4798      	blx	r3
 800d480:	4603      	mov	r3, r0
 800d482:	73fb      	strb	r3, [r7, #15]
      break;
 800d484:	e13a      	b.n	800d6fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	785b      	ldrb	r3, [r3, #1]
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d007      	beq.n	800d49e <USBD_StdEPReq+0x5c>
 800d48e:	2b03      	cmp	r3, #3
 800d490:	f300 8129 	bgt.w	800d6e6 <USBD_StdEPReq+0x2a4>
 800d494:	2b00      	cmp	r3, #0
 800d496:	d07f      	beq.n	800d598 <USBD_StdEPReq+0x156>
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d03c      	beq.n	800d516 <USBD_StdEPReq+0xd4>
 800d49c:	e123      	b.n	800d6e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d002      	beq.n	800d4b0 <USBD_StdEPReq+0x6e>
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d016      	beq.n	800d4dc <USBD_StdEPReq+0x9a>
 800d4ae:	e02c      	b.n	800d50a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4b0:	7bbb      	ldrb	r3, [r7, #14]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00d      	beq.n	800d4d2 <USBD_StdEPReq+0x90>
 800d4b6:	7bbb      	ldrb	r3, [r7, #14]
 800d4b8:	2b80      	cmp	r3, #128	; 0x80
 800d4ba:	d00a      	beq.n	800d4d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f005 ffcf 	bl	8013464 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4c6:	2180      	movs	r1, #128	; 0x80
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f005 ffcb 	bl	8013464 <USBD_LL_StallEP>
 800d4ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4d0:	e020      	b.n	800d514 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fc6f 	bl	800ddb8 <USBD_CtlError>
              break;
 800d4da:	e01b      	b.n	800d514 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	885b      	ldrh	r3, [r3, #2]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10e      	bne.n	800d502 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00b      	beq.n	800d502 <USBD_StdEPReq+0xc0>
 800d4ea:	7bbb      	ldrb	r3, [r7, #14]
 800d4ec:	2b80      	cmp	r3, #128	; 0x80
 800d4ee:	d008      	beq.n	800d502 <USBD_StdEPReq+0xc0>
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	88db      	ldrh	r3, [r3, #6]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4f8:	7bbb      	ldrb	r3, [r7, #14]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f005 ffb1 	bl	8013464 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fd23 	bl	800df4e <USBD_CtlSendStatus>

              break;
 800d508:	e004      	b.n	800d514 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fc53 	bl	800ddb8 <USBD_CtlError>
              break;
 800d512:	bf00      	nop
          }
          break;
 800d514:	e0ec      	b.n	800d6f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d002      	beq.n	800d528 <USBD_StdEPReq+0xe6>
 800d522:	2b03      	cmp	r3, #3
 800d524:	d016      	beq.n	800d554 <USBD_StdEPReq+0x112>
 800d526:	e030      	b.n	800d58a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d528:	7bbb      	ldrb	r3, [r7, #14]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d00d      	beq.n	800d54a <USBD_StdEPReq+0x108>
 800d52e:	7bbb      	ldrb	r3, [r7, #14]
 800d530:	2b80      	cmp	r3, #128	; 0x80
 800d532:	d00a      	beq.n	800d54a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f005 ff93 	bl	8013464 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d53e:	2180      	movs	r1, #128	; 0x80
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f005 ff8f 	bl	8013464 <USBD_LL_StallEP>
 800d546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d548:	e025      	b.n	800d596 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fc33 	bl	800ddb8 <USBD_CtlError>
              break;
 800d552:	e020      	b.n	800d596 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	885b      	ldrh	r3, [r3, #2]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d11b      	bne.n	800d594 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
 800d55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d562:	2b00      	cmp	r3, #0
 800d564:	d004      	beq.n	800d570 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f005 ff99 	bl	80134a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fcec 	bl	800df4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	6839      	ldr	r1, [r7, #0]
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	4798      	blx	r3
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d588:	e004      	b.n	800d594 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fc13 	bl	800ddb8 <USBD_CtlError>
              break;
 800d592:	e000      	b.n	800d596 <USBD_StdEPReq+0x154>
              break;
 800d594:	bf00      	nop
          }
          break;
 800d596:	e0ab      	b.n	800d6f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d002      	beq.n	800d5aa <USBD_StdEPReq+0x168>
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d032      	beq.n	800d60e <USBD_StdEPReq+0x1cc>
 800d5a8:	e097      	b.n	800d6da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5aa:	7bbb      	ldrb	r3, [r7, #14]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d007      	beq.n	800d5c0 <USBD_StdEPReq+0x17e>
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
 800d5b2:	2b80      	cmp	r3, #128	; 0x80
 800d5b4:	d004      	beq.n	800d5c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fbfd 	bl	800ddb8 <USBD_CtlError>
                break;
 800d5be:	e091      	b.n	800d6e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	da0b      	bge.n	800d5e0 <USBD_StdEPReq+0x19e>
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	4413      	add	r3, r2
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	3310      	adds	r3, #16
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	4413      	add	r3, r2
 800d5dc:	3304      	adds	r3, #4
 800d5de:	e00b      	b.n	800d5f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
 800d5e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2202      	movs	r2, #2
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fc47 	bl	800de9a <USBD_CtlSendData>
              break;
 800d60c:	e06a      	b.n	800d6e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d60e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d612:	2b00      	cmp	r3, #0
 800d614:	da11      	bge.n	800d63a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d616:	7bbb      	ldrb	r3, [r7, #14]
 800d618:	f003 020f 	and.w	r2, r3, #15
 800d61c:	6879      	ldr	r1, [r7, #4]
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	440b      	add	r3, r1
 800d628:	3324      	adds	r3, #36	; 0x24
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d117      	bne.n	800d660 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d630:	6839      	ldr	r1, [r7, #0]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fbc0 	bl	800ddb8 <USBD_CtlError>
                  break;
 800d638:	e054      	b.n	800d6e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d63a:	7bbb      	ldrb	r3, [r7, #14]
 800d63c:	f003 020f 	and.w	r2, r3, #15
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	4613      	mov	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	440b      	add	r3, r1
 800d64c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d104      	bne.n	800d660 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d656:	6839      	ldr	r1, [r7, #0]
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 fbad 	bl	800ddb8 <USBD_CtlError>
                  break;
 800d65e:	e041      	b.n	800d6e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d664:	2b00      	cmp	r3, #0
 800d666:	da0b      	bge.n	800d680 <USBD_StdEPReq+0x23e>
 800d668:	7bbb      	ldrb	r3, [r7, #14]
 800d66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d66e:	4613      	mov	r3, r2
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	3310      	adds	r3, #16
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	4413      	add	r3, r2
 800d67c:	3304      	adds	r3, #4
 800d67e:	e00b      	b.n	800d698 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d680:	7bbb      	ldrb	r3, [r7, #14]
 800d682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	4413      	add	r3, r2
 800d696:	3304      	adds	r3, #4
 800d698:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <USBD_StdEPReq+0x264>
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	2b80      	cmp	r3, #128	; 0x80
 800d6a4:	d103      	bne.n	800d6ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	601a      	str	r2, [r3, #0]
 800d6ac:	e00e      	b.n	800d6cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f005 ff14 	bl	80134e0 <USBD_LL_IsStallEP>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	e002      	b.n	800d6cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fbe1 	bl	800de9a <USBD_CtlSendData>
              break;
 800d6d8:	e004      	b.n	800d6e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 fb6b 	bl	800ddb8 <USBD_CtlError>
              break;
 800d6e2:	bf00      	nop
          }
          break;
 800d6e4:	e004      	b.n	800d6f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fb65 	bl	800ddb8 <USBD_CtlError>
          break;
 800d6ee:	bf00      	nop
      }
      break;
 800d6f0:	e004      	b.n	800d6fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fb5f 	bl	800ddb8 <USBD_CtlError>
      break;
 800d6fa:	bf00      	nop
  }

  return ret;
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d716:	2300      	movs	r3, #0
 800d718:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d71a:	2300      	movs	r3, #0
 800d71c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	885b      	ldrh	r3, [r3, #2]
 800d722:	0a1b      	lsrs	r3, r3, #8
 800d724:	b29b      	uxth	r3, r3
 800d726:	3b01      	subs	r3, #1
 800d728:	2b0e      	cmp	r3, #14
 800d72a:	f200 8152 	bhi.w	800d9d2 <USBD_GetDescriptor+0x2ca>
 800d72e:	a201      	add	r2, pc, #4	; (adr r2, 800d734 <USBD_GetDescriptor+0x2c>)
 800d730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d734:	0800d7a5 	.word	0x0800d7a5
 800d738:	0800d7bd 	.word	0x0800d7bd
 800d73c:	0800d7fd 	.word	0x0800d7fd
 800d740:	0800d9d3 	.word	0x0800d9d3
 800d744:	0800d9d3 	.word	0x0800d9d3
 800d748:	0800d973 	.word	0x0800d973
 800d74c:	0800d99f 	.word	0x0800d99f
 800d750:	0800d9d3 	.word	0x0800d9d3
 800d754:	0800d9d3 	.word	0x0800d9d3
 800d758:	0800d9d3 	.word	0x0800d9d3
 800d75c:	0800d9d3 	.word	0x0800d9d3
 800d760:	0800d9d3 	.word	0x0800d9d3
 800d764:	0800d9d3 	.word	0x0800d9d3
 800d768:	0800d9d3 	.word	0x0800d9d3
 800d76c:	0800d771 	.word	0x0800d771
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d776:	69db      	ldr	r3, [r3, #28]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00b      	beq.n	800d794 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	7c12      	ldrb	r2, [r2, #16]
 800d788:	f107 0108 	add.w	r1, r7, #8
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
 800d790:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d792:	e126      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fb0e 	bl	800ddb8 <USBD_CtlError>
        err++;
 800d79c:	7afb      	ldrb	r3, [r7, #11]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	72fb      	strb	r3, [r7, #11]
      break;
 800d7a2:	e11e      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	7c12      	ldrb	r2, [r2, #16]
 800d7b0:	f107 0108 	add.w	r1, r7, #8
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4798      	blx	r3
 800d7b8:	60f8      	str	r0, [r7, #12]
      break;
 800d7ba:	e112      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	7c1b      	ldrb	r3, [r3, #16]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10d      	bne.n	800d7e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7cc:	f107 0208 	add.w	r2, r7, #8
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	4798      	blx	r3
 800d7d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	2202      	movs	r2, #2
 800d7dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d7de:	e100      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	f107 0208 	add.w	r2, r7, #8
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4798      	blx	r3
 800d7f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	701a      	strb	r2, [r3, #0]
      break;
 800d7fa:	e0f2      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	885b      	ldrh	r3, [r3, #2]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	2b05      	cmp	r3, #5
 800d804:	f200 80ac 	bhi.w	800d960 <USBD_GetDescriptor+0x258>
 800d808:	a201      	add	r2, pc, #4	; (adr r2, 800d810 <USBD_GetDescriptor+0x108>)
 800d80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80e:	bf00      	nop
 800d810:	0800d829 	.word	0x0800d829
 800d814:	0800d85d 	.word	0x0800d85d
 800d818:	0800d891 	.word	0x0800d891
 800d81c:	0800d8c5 	.word	0x0800d8c5
 800d820:	0800d8f9 	.word	0x0800d8f9
 800d824:	0800d92d 	.word	0x0800d92d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00b      	beq.n	800d84c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	7c12      	ldrb	r2, [r2, #16]
 800d840:	f107 0108 	add.w	r1, r7, #8
 800d844:	4610      	mov	r0, r2
 800d846:	4798      	blx	r3
 800d848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d84a:	e091      	b.n	800d970 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d84c:	6839      	ldr	r1, [r7, #0]
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 fab2 	bl	800ddb8 <USBD_CtlError>
            err++;
 800d854:	7afb      	ldrb	r3, [r7, #11]
 800d856:	3301      	adds	r3, #1
 800d858:	72fb      	strb	r3, [r7, #11]
          break;
 800d85a:	e089      	b.n	800d970 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00b      	beq.n	800d880 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	7c12      	ldrb	r2, [r2, #16]
 800d874:	f107 0108 	add.w	r1, r7, #8
 800d878:	4610      	mov	r0, r2
 800d87a:	4798      	blx	r3
 800d87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d87e:	e077      	b.n	800d970 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fa98 	bl	800ddb8 <USBD_CtlError>
            err++;
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	3301      	adds	r3, #1
 800d88c:	72fb      	strb	r3, [r7, #11]
          break;
 800d88e:	e06f      	b.n	800d970 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00b      	beq.n	800d8b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	7c12      	ldrb	r2, [r2, #16]
 800d8a8:	f107 0108 	add.w	r1, r7, #8
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4798      	blx	r3
 800d8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8b2:	e05d      	b.n	800d970 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fa7e 	bl	800ddb8 <USBD_CtlError>
            err++;
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8c2:	e055      	b.n	800d970 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ca:	691b      	ldr	r3, [r3, #16]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	7c12      	ldrb	r2, [r2, #16]
 800d8dc:	f107 0108 	add.w	r1, r7, #8
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
 800d8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8e6:	e043      	b.n	800d970 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fa64 	bl	800ddb8 <USBD_CtlError>
            err++;
 800d8f0:	7afb      	ldrb	r3, [r7, #11]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d8f6:	e03b      	b.n	800d970 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8fe:	695b      	ldr	r3, [r3, #20]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00b      	beq.n	800d91c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	7c12      	ldrb	r2, [r2, #16]
 800d910:	f107 0108 	add.w	r1, r7, #8
 800d914:	4610      	mov	r0, r2
 800d916:	4798      	blx	r3
 800d918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d91a:	e029      	b.n	800d970 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fa4a 	bl	800ddb8 <USBD_CtlError>
            err++;
 800d924:	7afb      	ldrb	r3, [r7, #11]
 800d926:	3301      	adds	r3, #1
 800d928:	72fb      	strb	r3, [r7, #11]
          break;
 800d92a:	e021      	b.n	800d970 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00b      	beq.n	800d950 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	7c12      	ldrb	r2, [r2, #16]
 800d944:	f107 0108 	add.w	r1, r7, #8
 800d948:	4610      	mov	r0, r2
 800d94a:	4798      	blx	r3
 800d94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d94e:	e00f      	b.n	800d970 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fa30 	bl	800ddb8 <USBD_CtlError>
            err++;
 800d958:	7afb      	ldrb	r3, [r7, #11]
 800d95a:	3301      	adds	r3, #1
 800d95c:	72fb      	strb	r3, [r7, #11]
          break;
 800d95e:	e007      	b.n	800d970 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fa28 	bl	800ddb8 <USBD_CtlError>
          err++;
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	3301      	adds	r3, #1
 800d96c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d96e:	bf00      	nop
      }
      break;
 800d970:	e037      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	7c1b      	ldrb	r3, [r3, #16]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d109      	bne.n	800d98e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d982:	f107 0208 	add.w	r2, r7, #8
 800d986:	4610      	mov	r0, r2
 800d988:	4798      	blx	r3
 800d98a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d98c:	e029      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 fa11 	bl	800ddb8 <USBD_CtlError>
        err++;
 800d996:	7afb      	ldrb	r3, [r7, #11]
 800d998:	3301      	adds	r3, #1
 800d99a:	72fb      	strb	r3, [r7, #11]
      break;
 800d99c:	e021      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7c1b      	ldrb	r3, [r3, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10d      	bne.n	800d9c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ae:	f107 0208 	add.w	r2, r7, #8
 800d9b2:	4610      	mov	r0, r2
 800d9b4:	4798      	blx	r3
 800d9b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	2207      	movs	r2, #7
 800d9be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9c0:	e00f      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 f9f7 	bl	800ddb8 <USBD_CtlError>
        err++;
 800d9ca:	7afb      	ldrb	r3, [r7, #11]
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d9d0:	e007      	b.n	800d9e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f9ef 	bl	800ddb8 <USBD_CtlError>
      err++;
 800d9da:	7afb      	ldrb	r3, [r7, #11]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	72fb      	strb	r3, [r7, #11]
      break;
 800d9e0:	bf00      	nop
  }

  if (err != 0U)
 800d9e2:	7afb      	ldrb	r3, [r7, #11]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d11e      	bne.n	800da26 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	88db      	ldrh	r3, [r3, #6]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d016      	beq.n	800da1e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d9f0:	893b      	ldrh	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00e      	beq.n	800da14 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	88da      	ldrh	r2, [r3, #6]
 800d9fa:	893b      	ldrh	r3, [r7, #8]
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	bf28      	it	cs
 800da00:	4613      	movcs	r3, r2
 800da02:	b29b      	uxth	r3, r3
 800da04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800da06:	893b      	ldrh	r3, [r7, #8]
 800da08:	461a      	mov	r2, r3
 800da0a:	68f9      	ldr	r1, [r7, #12]
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fa44 	bl	800de9a <USBD_CtlSendData>
 800da12:	e009      	b.n	800da28 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f9ce 	bl	800ddb8 <USBD_CtlError>
 800da1c:	e004      	b.n	800da28 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 fa95 	bl	800df4e <USBD_CtlSendStatus>
 800da24:	e000      	b.n	800da28 <USBD_GetDescriptor+0x320>
    return;
 800da26:	bf00      	nop
  }
}
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop

0800da30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	889b      	ldrh	r3, [r3, #4]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d131      	bne.n	800daa6 <USBD_SetAddress+0x76>
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	88db      	ldrh	r3, [r3, #6]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d12d      	bne.n	800daa6 <USBD_SetAddress+0x76>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	885b      	ldrh	r3, [r3, #2]
 800da4e:	2b7f      	cmp	r3, #127	; 0x7f
 800da50:	d829      	bhi.n	800daa6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	885b      	ldrh	r3, [r3, #2]
 800da56:	b2db      	uxtb	r3, r3
 800da58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da64:	b2db      	uxtb	r3, r3
 800da66:	2b03      	cmp	r3, #3
 800da68:	d104      	bne.n	800da74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 f9a3 	bl	800ddb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da72:	e01d      	b.n	800dab0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7bfa      	ldrb	r2, [r7, #15]
 800da78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f005 fd5a 	bl	801353a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fa61 	bl	800df4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d004      	beq.n	800da9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2202      	movs	r2, #2
 800da96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9a:	e009      	b.n	800dab0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa4:	e004      	b.n	800dab0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f985 	bl	800ddb8 <USBD_CtlError>
  }
}
 800daae:	bf00      	nop
 800dab0:	bf00      	nop
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	885b      	ldrh	r3, [r3, #2]
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	4b4c      	ldr	r3, [pc, #304]	; (800dc00 <USBD_SetConfig+0x148>)
 800dace:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dad0:	4b4b      	ldr	r3, [pc, #300]	; (800dc00 <USBD_SetConfig+0x148>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d905      	bls.n	800dae4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f96c 	bl	800ddb8 <USBD_CtlError>
    return USBD_FAIL;
 800dae0:	2303      	movs	r3, #3
 800dae2:	e088      	b.n	800dbf6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d002      	beq.n	800daf6 <USBD_SetConfig+0x3e>
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d025      	beq.n	800db40 <USBD_SetConfig+0x88>
 800daf4:	e071      	b.n	800dbda <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800daf6:	4b42      	ldr	r3, [pc, #264]	; (800dc00 <USBD_SetConfig+0x148>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d01c      	beq.n	800db38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dafe:	4b40      	ldr	r3, [pc, #256]	; (800dc00 <USBD_SetConfig+0x148>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	461a      	mov	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db08:	4b3d      	ldr	r3, [pc, #244]	; (800dc00 <USBD_SetConfig+0x148>)
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	4619      	mov	r1, r3
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff f992 	bl	800ce38 <USBD_SetClassConfig>
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800db18:	7bfb      	ldrb	r3, [r7, #15]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d004      	beq.n	800db28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f949 	bl	800ddb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db26:	e065      	b.n	800dbf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fa10 	bl	800df4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2203      	movs	r2, #3
 800db32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db36:	e05d      	b.n	800dbf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fa08 	bl	800df4e <USBD_CtlSendStatus>
      break;
 800db3e:	e059      	b.n	800dbf4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800db40:	4b2f      	ldr	r3, [pc, #188]	; (800dc00 <USBD_SetConfig+0x148>)
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d112      	bne.n	800db6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2202      	movs	r2, #2
 800db4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800db50:	4b2b      	ldr	r3, [pc, #172]	; (800dc00 <USBD_SetConfig+0x148>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db5a:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <USBD_SetConfig+0x148>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff f985 	bl	800ce70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f9f1 	bl	800df4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db6c:	e042      	b.n	800dbf4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800db6e:	4b24      	ldr	r3, [pc, #144]	; (800dc00 <USBD_SetConfig+0x148>)
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	461a      	mov	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d02a      	beq.n	800dbd2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff f973 	bl	800ce70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800db8a:	4b1d      	ldr	r3, [pc, #116]	; (800dc00 <USBD_SetConfig+0x148>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db94:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <USBD_SetConfig+0x148>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	4619      	mov	r1, r3
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7ff f94c 	bl	800ce38 <USBD_SetClassConfig>
 800dba0:	4603      	mov	r3, r0
 800dba2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00f      	beq.n	800dbca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dbaa:	6839      	ldr	r1, [r7, #0]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 f903 	bl	800ddb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff f958 	bl	800ce70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2202      	movs	r2, #2
 800dbc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dbc8:	e014      	b.n	800dbf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f9bf 	bl	800df4e <USBD_CtlSendStatus>
      break;
 800dbd0:	e010      	b.n	800dbf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 f9bb 	bl	800df4e <USBD_CtlSendStatus>
      break;
 800dbd8:	e00c      	b.n	800dbf4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f8eb 	bl	800ddb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dbe2:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <USBD_SetConfig+0x148>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7ff f941 	bl	800ce70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dbee:	2303      	movs	r3, #3
 800dbf0:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf2:	bf00      	nop
  }

  return ret;
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	2000056c 	.word	0x2000056c

0800dc04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	88db      	ldrh	r3, [r3, #6]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d004      	beq.n	800dc20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f8cd 	bl	800ddb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dc1e:	e023      	b.n	800dc68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	dc02      	bgt.n	800dc32 <USBD_GetConfig+0x2e>
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	dc03      	bgt.n	800dc38 <USBD_GetConfig+0x34>
 800dc30:	e015      	b.n	800dc5e <USBD_GetConfig+0x5a>
 800dc32:	2b03      	cmp	r3, #3
 800dc34:	d00b      	beq.n	800dc4e <USBD_GetConfig+0x4a>
 800dc36:	e012      	b.n	800dc5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	3308      	adds	r3, #8
 800dc42:	2201      	movs	r2, #1
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f927 	bl	800de9a <USBD_CtlSendData>
        break;
 800dc4c:	e00c      	b.n	800dc68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	3304      	adds	r3, #4
 800dc52:	2201      	movs	r2, #1
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f91f 	bl	800de9a <USBD_CtlSendData>
        break;
 800dc5c:	e004      	b.n	800dc68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 f8a9 	bl	800ddb8 <USBD_CtlError>
        break;
 800dc66:	bf00      	nop
}
 800dc68:	bf00      	nop
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	3b01      	subs	r3, #1
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d81e      	bhi.n	800dcc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	88db      	ldrh	r3, [r3, #6]
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d004      	beq.n	800dc9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f890 	bl	800ddb8 <USBD_CtlError>
        break;
 800dc98:	e01a      	b.n	800dcd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d005      	beq.n	800dcb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	f043 0202 	orr.w	r2, r3, #2
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	330c      	adds	r3, #12
 800dcba:	2202      	movs	r2, #2
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f8eb 	bl	800de9a <USBD_CtlSendData>
      break;
 800dcc4:	e004      	b.n	800dcd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 f875 	bl	800ddb8 <USBD_CtlError>
      break;
 800dcce:	bf00      	nop
  }
}
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	885b      	ldrh	r3, [r3, #2]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d106      	bne.n	800dcf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f92b 	bl	800df4e <USBD_CtlSendStatus>
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	3b01      	subs	r3, #1
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d80b      	bhi.n	800dd30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	885b      	ldrh	r3, [r3, #2]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d10c      	bne.n	800dd3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 f910 	bl	800df4e <USBD_CtlSendStatus>
      }
      break;
 800dd2e:	e004      	b.n	800dd3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f840 	bl	800ddb8 <USBD_CtlError>
      break;
 800dd38:	e000      	b.n	800dd3c <USBD_ClrFeature+0x3c>
      break;
 800dd3a:	bf00      	nop
  }
}
 800dd3c:	bf00      	nop
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	781a      	ldrb	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	781a      	ldrb	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7ff fa92 	bl	800d298 <SWAPBYTE>
 800dd74:	4603      	mov	r3, r0
 800dd76:	461a      	mov	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	3301      	adds	r3, #1
 800dd86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f7ff fa85 	bl	800d298 <SWAPBYTE>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	461a      	mov	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f7ff fa78 	bl	800d298 <SWAPBYTE>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	461a      	mov	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	80da      	strh	r2, [r3, #6]
}
 800ddb0:	bf00      	nop
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddc2:	2180      	movs	r1, #128	; 0x80
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f005 fb4d 	bl	8013464 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ddca:	2100      	movs	r1, #0
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f005 fb49 	bl	8013464 <USBD_LL_StallEP>
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b086      	sub	sp, #24
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dde6:	2300      	movs	r3, #0
 800dde8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d036      	beq.n	800de5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ddf4:	6938      	ldr	r0, [r7, #16]
 800ddf6:	f000 f836 	bl	800de66 <USBD_GetLen>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	005b      	lsls	r3, r3, #1
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	4413      	add	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	7812      	ldrb	r2, [r2, #0]
 800de12:	701a      	strb	r2, [r3, #0]
  idx++;
 800de14:	7dfb      	ldrb	r3, [r7, #23]
 800de16:	3301      	adds	r3, #1
 800de18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	4413      	add	r3, r2
 800de20:	2203      	movs	r2, #3
 800de22:	701a      	strb	r2, [r3, #0]
  idx++;
 800de24:	7dfb      	ldrb	r3, [r7, #23]
 800de26:	3301      	adds	r3, #1
 800de28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800de2a:	e013      	b.n	800de54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	4413      	add	r3, r2
 800de32:	693a      	ldr	r2, [r7, #16]
 800de34:	7812      	ldrb	r2, [r2, #0]
 800de36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	3301      	adds	r3, #1
 800de3c:	613b      	str	r3, [r7, #16]
    idx++;
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	3301      	adds	r3, #1
 800de42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800de44:	7dfb      	ldrb	r3, [r7, #23]
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	4413      	add	r3, r2
 800de4a:	2200      	movs	r2, #0
 800de4c:	701a      	strb	r2, [r3, #0]
    idx++;
 800de4e:	7dfb      	ldrb	r3, [r7, #23]
 800de50:	3301      	adds	r3, #1
 800de52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e7      	bne.n	800de2c <USBD_GetString+0x52>
 800de5c:	e000      	b.n	800de60 <USBD_GetString+0x86>
    return;
 800de5e:	bf00      	nop
  }
}
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de66:	b480      	push	{r7}
 800de68:	b085      	sub	sp, #20
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de6e:	2300      	movs	r3, #0
 800de70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de76:	e005      	b.n	800de84 <USBD_GetLen+0x1e>
  {
    len++;
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	3301      	adds	r3, #1
 800de7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	3301      	adds	r3, #1
 800de82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1f5      	bne.n	800de78 <USBD_GetLen+0x12>
  }

  return len;
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr

0800de9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2202      	movs	r2, #2
 800deaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	2100      	movs	r1, #0
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f005 fb59 	bl	8013578 <USBD_LL_Transmit>

  return USBD_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	2100      	movs	r1, #0
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f005 fb48 	bl	8013578 <USBD_LL_Transmit>

  return USBD_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	60f8      	str	r0, [r7, #12]
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2203      	movs	r2, #3
 800df02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	2100      	movs	r1, #0
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f005 fb4c 	bl	80135ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	2100      	movs	r1, #0
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f005 fb3b 	bl	80135ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b082      	sub	sp, #8
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2204      	movs	r2, #4
 800df5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df5e:	2300      	movs	r3, #0
 800df60:	2200      	movs	r2, #0
 800df62:	2100      	movs	r1, #0
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f005 fb07 	bl	8013578 <USBD_LL_Transmit>

  return USBD_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2205      	movs	r2, #5
 800df80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df84:	2300      	movs	r3, #0
 800df86:	2200      	movs	r2, #0
 800df88:	2100      	movs	r1, #0
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f005 fb15 	bl	80135ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
	...

0800df9c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800dfa6:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <OTP_Read+0x48>)
 800dfa8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dfaa:	e002      	b.n	800dfb2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3b08      	subs	r3, #8
 800dfb0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3307      	adds	r3, #7
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	79fa      	ldrb	r2, [r7, #7]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d003      	beq.n	800dfc6 <OTP_Read+0x2a>
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	4a09      	ldr	r2, [pc, #36]	; (800dfe8 <OTP_Read+0x4c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d1f2      	bne.n	800dfac <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3307      	adds	r3, #7
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	79fa      	ldrb	r2, [r7, #7]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d001      	beq.n	800dfd6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3714      	adds	r7, #20
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr
 800dfe4:	1fff73f8 	.word	0x1fff73f8
 800dfe8:	1fff7000 	.word	0x1fff7000

0800dfec <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	4a09      	ldr	r2, [pc, #36]	; (800e01c <_ZN15Adafruit_AS7341C1Ev+0x30>)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	711a      	strb	r2, [r3, #4]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	609a      	str	r2, [r3, #8]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	731a      	strb	r2, [r3, #12]
}
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4618      	mov	r0, r3
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	080144b4 	.word	0x080144b4

0800e020 <_ZN15Adafruit_AS7341D1Ev>:

/**
 * @brief Destroy the Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::~Adafruit_AS7341(void) {
 800e020:	b480      	push	{r7}
 800e022:	b083      	sub	sp, #12
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	4a04      	ldr	r2, [pc, #16]	; (800e03c <_ZN15Adafruit_AS7341D1Ev+0x1c>)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	601a      	str	r2, [r3, #0]
	//   if (temp_sensor)
	//     delete temp_sensor;
	//   if (pressure_sensor)
	//     delete pressure_sensor;
}
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4618      	mov	r0, r3
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr
 800e03c:	080144b4 	.word	0x080144b4

0800e040 <_ZN15Adafruit_AS73415_initEl>:

/*!  @brief Initializer for post i2c/spi init
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_AS7341::_init(int32_t sensor_id) {
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]

	// make sure we're talking to the right chip
	if ((readRegisterByte(AS7341_WHOAMI) & 0xFC) != (AS7341_CHIP_ID << 2)) {
 800e04a:	2192      	movs	r1, #146	; 0x92
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f882 	bl	800e156 <_ZN15Adafruit_AS734116readRegisterByteEt>
 800e052:	4603      	mov	r3, r0
 800e054:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800e058:	2b24      	cmp	r3, #36	; 0x24
 800e05a:	bf14      	ite	ne
 800e05c:	2301      	movne	r3, #1
 800e05e:	2300      	moveq	r3, #0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <_ZN15Adafruit_AS73415_initEl+0x2a>
		return false;
 800e066:	2300      	movs	r3, #0
 800e068:	e004      	b.n	800e074 <_ZN15Adafruit_AS73415_initEl+0x34>
	}

	powerEnable(true);
 800e06a:	2101      	movs	r1, #1
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 f805 	bl	800e07c <_ZN15Adafruit_AS734111powerEnableEb>
	return true;
 800e072:	2301      	movs	r3, #1
}
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	70fb      	strb	r3, [r7, #3]
	uint8_t enable_reg = readRegisterByte(AS7341_ENABLE);
 800e088:	2180      	movs	r1, #128	; 0x80
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f863 	bl	800e156 <_ZN15Adafruit_AS734116readRegisterByteEt>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]
	enable_reg = modifyBitInByte(enable_reg, (uint8_t) enable_power, 0);
 800e094:	78fa      	ldrb	r2, [r7, #3]
 800e096:	7bf9      	ldrb	r1, [r7, #15]
 800e098:	2300      	movs	r3, #0
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f833 	bl	800e106 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	73fb      	strb	r3, [r7, #15]
	writeRegisterByte(AS7341_ENABLE, enable_reg);
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	2180      	movs	r1, #128	; 0x80
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f804 	bl	800e0b8 <_ZN15Adafruit_AS734117writeRegisterByteEhh>
}
 800e0b0:	bf00      	nop
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <_ZN15Adafruit_AS734117writeRegisterByteEhh>:
	} else {
		return false;
	}
}

bool Adafruit_AS7341::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b086      	sub	sp, #24
 800e0bc:	af04      	add	r7, sp, #16
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	70bb      	strb	r3, [r7, #2]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, &val, 1, 10)) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6898      	ldr	r0, [r3, #8]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	7b1b      	ldrb	r3, [r3, #12]
 800e0d0:	b299      	uxth	r1, r3
 800e0d2:	78fb      	ldrb	r3, [r7, #3]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	230a      	movs	r3, #10
 800e0d8:	9302      	str	r3, [sp, #8]
 800e0da:	2301      	movs	r3, #1
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	1cbb      	adds	r3, r7, #2
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	f7f5 fe36 	bl	8003d54 <HAL_I2C_Mem_Write>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	bf0c      	ite	eq
 800e0ee:	2301      	moveq	r3, #1
 800e0f0:	2300      	movne	r3, #0
 800e0f2:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x44>
		return true;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e000      	b.n	800e0fe <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x46>
	} else {
		return false;
 800e0fc:	2300      	movs	r3, #0
	}
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>:

uint8_t Adafruit_AS7341::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
 800e106:	b480      	push	{r7}
 800e108:	b085      	sub	sp, #20
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	4608      	mov	r0, r1
 800e110:	4611      	mov	r1, r2
 800e112:	461a      	mov	r2, r3
 800e114:	4603      	mov	r3, r0
 800e116:	70fb      	strb	r3, [r7, #3]
 800e118:	460b      	mov	r3, r1
 800e11a:	70bb      	strb	r3, [r7, #2]
 800e11c:	4613      	mov	r3, r2
 800e11e:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 1 << pos;
 800e120:	787b      	ldrb	r3, [r7, #1]
 800e122:	2201      	movs	r2, #1
 800e124:	fa02 f303 	lsl.w	r3, r2, r3
 800e128:	73fb      	strb	r3, [r7, #15]
	return ((var & ~mask) | (value << pos));
 800e12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e12e:	43db      	mvns	r3, r3
 800e130:	b25a      	sxtb	r2, r3
 800e132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e136:	4013      	ands	r3, r2
 800e138:	b25a      	sxtb	r2, r3
 800e13a:	78b9      	ldrb	r1, [r7, #2]
 800e13c:	787b      	ldrb	r3, [r7, #1]
 800e13e:	fa01 f303 	lsl.w	r3, r1, r3
 800e142:	b25b      	sxtb	r3, r3
 800e144:	4313      	orrs	r3, r2
 800e146:	b25b      	sxtb	r3, r3
 800e148:	b2db      	uxtb	r3, r3
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <_ZN15Adafruit_AS734116readRegisterByteEt>:
	register_value |= value << pos; // and add in the new data

	return writeRegisterByte(reg, register_value);
}

uint8_t Adafruit_AS7341::readRegisterByte(uint16_t mem_addr) {
 800e156:	b580      	push	{r7, lr}
 800e158:	b088      	sub	sp, #32
 800e15a:	af04      	add	r7, sp, #16
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	460b      	mov	r3, r1
 800e160:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6898      	ldr	r0, [r3, #8]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	7b1b      	ldrb	r3, [r3, #12]
 800e16a:	b299      	uxth	r1, r3
 800e16c:	887a      	ldrh	r2, [r7, #2]
 800e16e:	230a      	movs	r3, #10
 800e170:	9302      	str	r3, [sp, #8]
 800e172:	2301      	movs	r3, #1
 800e174:	9301      	str	r3, [sp, #4]
 800e176:	f107 030f 	add.w	r3, r7, #15
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	2301      	movs	r3, #1
 800e17e:	f7f5 fefd 	bl	8003f7c <HAL_I2C_Mem_Read>
	return data;
 800e182:	7bfb      	ldrb	r3, [r7, #15]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>:
#include "math.h"

#define delay			HAL_Delay
#define I2C_TIMEOUT		100

void CALIPILE::setup(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, uint8_t identifier) {
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	607a      	str	r2, [r7, #4]
 800e196:	461a      	mov	r2, r3
 800e198:	460b      	mov	r3, r1
 800e19a:	72fb      	strb	r3, [r7, #11]
 800e19c:	4613      	mov	r3, r2
 800e19e:	72bb      	strb	r3, [r7, #10]
	i2c_han = i2c_handle;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	605a      	str	r2, [r3, #4]
	i2c_addr = i2c_address << 1;
 800e1a6:	7afb      	ldrb	r3, [r7, #11]
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	721a      	strb	r2, [r3, #8]
	descriptor = identifier;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	7aba      	ldrb	r2, [r7, #10]
 800e1b4:	701a      	strb	r2, [r3, #0]
}
 800e1b6:	bf00      	nop
 800e1b8:	3714      	adds	r7, #20
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <_ZN8CALIPILE4wakeEv>:

void CALIPILE::wake() {
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b088      	sub	sp, #32
 800e1c6:	af04      	add	r7, sp, #16
 800e1c8:	6078      	str	r0, [r7, #4]
//	writeByte(0x00, 0x04, 0x00);  // issue general call and reload command
	uint8_t data = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(i2c_han, 0, 0x04, 1, &data, 1, I2C_TIMEOUT);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6858      	ldr	r0, [r3, #4]
 800e1d2:	2364      	movs	r3, #100	; 0x64
 800e1d4:	9302      	str	r3, [sp, #8]
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	9301      	str	r3, [sp, #4]
 800e1da:	f107 030f 	add.w	r3, r7, #15
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	2204      	movs	r2, #4
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	f7f5 fdb5 	bl	8003d54 <HAL_I2C_Mem_Write>
	delay(1);
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	f7f2 fde6 	bl	8000dbc <HAL_Delay>
}
 800e1f0:	bf00      	nop
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <_ZN8CALIPILE10readEEPROMEv>:

void CALIPILE::readEEPROM()
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	ed2d 8b02 	vpush	{d8}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af02      	add	r7, sp, #8
 800e202:	6078      	str	r0, [r7, #4]

	uint8_t rawData[2] = {0, 0};
 800e204:	2300      	movs	r3, #0
 800e206:	81bb      	strh	r3, [r7, #12]
	/* Start of EEPROM operations, just have to do once *************************************************** */
	// Check EEPROM protocol number as a test of I2C communication
	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x80);// enable EEPROM read
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7a19      	ldrb	r1, [r3, #8]
 800e20c:	2380      	movs	r3, #128	; 0x80
 800e20e:	221f      	movs	r2, #31
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f9e7 	bl	800e5e4 <_ZN8CALIPILE9writeByteEhhh>

	uint8_t c = readByte(i2c_addr, CALIPILE_EEPROM_PROTOCOL);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	7a1b      	ldrb	r3, [r3, #8]
 800e21a:	2220      	movs	r2, #32
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f9f7 	bl	800e612 <_ZN8CALIPILE8readByteEhh>
 800e224:	4603      	mov	r3, r0
 800e226:	73fb      	strb	r3, [r7, #15]
	//Serial.print("CaliPile EEPROM protocol number is "); //Serial.println(c);
	//Serial.println("CaliPile EEPROM protocol number should be 3");

	uint8_t d = readByte(i2c_addr, CALIPILE_SLAVE_ADDRESS);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7a1b      	ldrb	r3, [r3, #8]
 800e22c:	223f      	movs	r2, #63	; 0x3f
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f9ee 	bl	800e612 <_ZN8CALIPILE8readByteEhh>
 800e236:	4603      	mov	r3, r0
 800e238:	73bb      	strb	r3, [r7, #14]
	//Serial.println("CaliPile EEPROM slave address should be 140");
	//Serial.println(" ");

	// Read the EEPROM calibration constants

	_LOOKUP = readByte(i2c_addr, CALIPILE_EEPROM_LOOKUPNUM);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	7a1b      	ldrb	r3, [r3, #8]
 800e23e:	2229      	movs	r2, #41	; 0x29
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f9e5 	bl	800e612 <_ZN8CALIPILE8readByteEhh>
 800e248:	4603      	mov	r3, r0
 800e24a:	461a      	mov	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	765a      	strb	r2, [r3, #25]
	//Serial.print("CaliPile LookUpNumber is "); //Serial.println(_LOOKUP);

	readBytes(i2c_addr, CALIPILE_EEPROM_PTAT25, 2, &rawData[0]);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	7a19      	ldrb	r1, [r3, #8]
 800e254:	f107 030c 	add.w	r3, r7, #12
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	2302      	movs	r3, #2
 800e25c:	222a      	movs	r2, #42	; 0x2a
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f9ec 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	_PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800e264:	7b3b      	ldrb	r3, [r7, #12]
 800e266:	021b      	lsls	r3, r3, #8
 800e268:	b21a      	sxth	r2, r3
 800e26a:	7b7b      	ldrb	r3, [r7, #13]
 800e26c:	b21b      	sxth	r3, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	b21b      	sxth	r3, r3
 800e272:	b29a      	uxth	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	815a      	strh	r2, [r3, #10]
	//Serial.print("CaliPile PTAT25 is "); //Serial.println(_PTAT25);

	readBytes(i2c_addr, CALIPILE_EEPROM_M, 2, &rawData[0]);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	7a19      	ldrb	r1, [r3, #8]
 800e27c:	f107 030c 	add.w	r3, r7, #12
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	2302      	movs	r3, #2
 800e284:	222c      	movs	r2, #44	; 0x2c
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f9d8 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	_M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800e28c:	7b3b      	ldrb	r3, [r7, #12]
 800e28e:	021b      	lsls	r3, r3, #8
 800e290:	b21a      	sxth	r2, r3
 800e292:	7b7b      	ldrb	r3, [r7, #13]
 800e294:	b21b      	sxth	r3, r3
 800e296:	4313      	orrs	r3, r2
 800e298:	b21b      	sxth	r3, r3
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	819a      	strh	r2, [r3, #12]
	_M /= 100;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	899b      	ldrh	r3, [r3, #12]
 800e2a4:	4a4f      	ldr	r2, [pc, #316]	; (800e3e4 <_ZN8CALIPILE10readEEPROMEv+0x1ec>)
 800e2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2aa:	095b      	lsrs	r3, r3, #5
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	819a      	strh	r2, [r3, #12]
	//Serial.print("CaliPile M is "); //Serial.println(_M);

	readBytes(i2c_addr, CALIPILE_EEPROM_U0, 2, &rawData[0]);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7a19      	ldrb	r1, [r3, #8]
 800e2b6:	f107 030c 	add.w	r3, r7, #12
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	2302      	movs	r3, #2
 800e2be:	222e      	movs	r2, #46	; 0x2e
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 f9bb 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	_U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800e2c6:	7b3b      	ldrb	r3, [r7, #12]
 800e2c8:	021b      	lsls	r3, r3, #8
 800e2ca:	b21a      	sxth	r2, r3
 800e2cc:	7b7b      	ldrb	r3, [r7, #13]
 800e2ce:	b21b      	sxth	r3, r3
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	b21b      	sxth	r3, r3
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	81da      	strh	r2, [r3, #14]
	_U0 += 32768;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	89db      	ldrh	r3, [r3, #14]
 800e2de:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	81da      	strh	r2, [r3, #14]
	//Serial.print("CaliPile U0 is "); //Serial.println(_U0);

	readBytes(i2c_addr, CALIPILE_EEPROM_UOUT1, 2, &rawData[0]);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7a19      	ldrb	r1, [r3, #8]
 800e2ec:	f107 030c 	add.w	r3, r7, #12
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	2230      	movs	r2, #48	; 0x30
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f9a0 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	_UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800e2fc:	7b3b      	ldrb	r3, [r7, #12]
 800e2fe:	021b      	lsls	r3, r3, #8
 800e300:	7b7a      	ldrb	r2, [r7, #13]
 800e302:	4313      	orrs	r3, r2
 800e304:	461a      	mov	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	615a      	str	r2, [r3, #20]
	_UOUT1 *= 2;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	005a      	lsls	r2, r3, #1
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	615a      	str	r2, [r3, #20]
	//Serial.print("CaliPile UOUT1 is "); //Serial.println(_UOUT1);

	_TOBJ1 = readByte(i2c_addr, CALIPILE_EEPROM_TOBJ1);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	7a1b      	ldrb	r3, [r3, #8]
 800e318:	2232      	movs	r2, #50	; 0x32
 800e31a:	4619      	mov	r1, r3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 f978 	bl	800e612 <_ZN8CALIPILE8readByteEhh>
 800e322:	4603      	mov	r3, r0
 800e324:	461a      	mov	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	761a      	strb	r2, [r3, #24]
	//Serial.print("CaliPile TOBJ1 is "); //Serial.println(_TOBJ1);

	readBytes(i2c_addr, CALIPILE_EEPROM_CHECKSUM, 2, &rawData[0]);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	7a19      	ldrb	r1, [r3, #8]
 800e32e:	f107 030c 	add.w	r3, r7, #12
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	2302      	movs	r3, #2
 800e336:	2221      	movs	r2, #33	; 0x21
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f97f 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	_CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800e33e:	7b3b      	ldrb	r3, [r7, #12]
 800e340:	021b      	lsls	r3, r3, #8
 800e342:	b21a      	sxth	r2, r3
 800e344:	7b7b      	ldrb	r3, [r7, #13]
 800e346:	b21b      	sxth	r3, r3
 800e348:	4313      	orrs	r3, r2
 800e34a:	b21b      	sxth	r3, r3
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	821a      	strh	r2, [r3, #16]
	//Serial.print("CaliPile CHECKSUM is supposed to be "); //Serial.println(_CHECKSUM);

	// Calculate the checksum
	uint16_t sum = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800e356:	2323      	movs	r3, #35	; 0x23
 800e358:	613b      	str	r3, [r7, #16]
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	2b3f      	cmp	r3, #63	; 0x3f
 800e35e:	dc10      	bgt.n	800e382 <_ZN8CALIPILE10readEEPROMEv+0x18a>
	{
		sum += readByte(i2c_addr, ii);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7a1b      	ldrb	r3, [r3, #8]
 800e364:	693a      	ldr	r2, [r7, #16]
 800e366:	b2d2      	uxtb	r2, r2
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f951 	bl	800e612 <_ZN8CALIPILE8readByteEhh>
 800e370:	4603      	mov	r3, r0
 800e372:	b29a      	uxth	r2, r3
 800e374:	8afb      	ldrh	r3, [r7, #22]
 800e376:	4413      	add	r3, r2
 800e378:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	3301      	adds	r3, #1
 800e37e:	613b      	str	r3, [r7, #16]
 800e380:	e7eb      	b.n	800e35a <_ZN8CALIPILE10readEEPROMEv+0x162>
	}
	//Serial.print("CaliPile CHECKSUM is "); //Serial.println(sum + c);

	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x00); // disable EEPROM read
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	7a19      	ldrb	r1, [r3, #8]
 800e386:	2300      	movs	r3, #0
 800e388:	221f      	movs	r2, #31
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f92a 	bl	800e5e4 <_ZN8CALIPILE9writeByteEhhh>
	/* End of EEPROM operations, just have to do once *************************************************** */

	// Construct needed calibration constants (just need to calculate once)
	_k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	695b      	ldr	r3, [r3, #20]
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	89d2      	ldrh	r2, [r2, #14]
 800e398:	1a9b      	subs	r3, r3, r2
 800e39a:	ee07 3a90 	vmov	s15, r3
 800e39e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7e1b      	ldrb	r3, [r3, #24]
 800e3a6:	ee07 3a90 	vmov	s15, r3
 800e3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e3e8 <_ZN8CALIPILE10readEEPROMEv+0x1f0>
 800e3b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3b6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800e3ec <_ZN8CALIPILE10readEEPROMEv+0x1f4>
 800e3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e3be:	f005 f9b1 	bl	8013724 <powf>
 800e3c2:	eef0 7a40 	vmov.f32	s15, s0
 800e3c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e3f0 <_ZN8CALIPILE10readEEPROMEv+0x1f8>
 800e3ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e3ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800e3d8:	bf00      	nop
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	ecbd 8b02 	vpop	{d8}
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	51eb851f 	.word	0x51eb851f
 800e3e8:	43889333 	.word	0x43889333
 800e3ec:	40733333 	.word	0x40733333
 800e3f0:	4f16b4e3 	.word	0x4f16b4e3

0800e3f4 <_ZN8CALIPILE11initTempThrEt>:
	// select motion threshold
	writeByte(i2c_addr, CALIPILE_TP_PRES_THLD, 0x22);// presence threshold, set at 50 counts
	writeByte(i2c_addr, CALIPILE_TP_MOT_THLD, 0x0A);// motion threshold, set at 10 counts
}

void CALIPILE::initTempThr(uint16_t Tcounts) {
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af02      	add	r7, sp, #8
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	807b      	strh	r3, [r7, #2]
	uint8_t rawData[2] = {0, 0};
 800e400:	2300      	movs	r3, #0
 800e402:	813b      	strh	r3, [r7, #8]
	// specify the over temperature interrupt threshold (2 bytes)
	writeByte(i2c_addr, CALIPILE_TPOT_THR, Tcounts);// 0x83 means 67,072 counts as threshold
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	7a19      	ldrb	r1, [r3, #8]
 800e408:	887b      	ldrh	r3, [r7, #2]
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	221c      	movs	r2, #28
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f8e8 	bl	800e5e4 <_ZN8CALIPILE9writeByteEhhh>
	writeByte(i2c_addr, (CALIPILE_TPOT_THR + 1), 0x00);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7a19      	ldrb	r1, [r3, #8]
 800e418:	2300      	movs	r3, #0
 800e41a:	221d      	movs	r2, #29
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f8e1 	bl	800e5e4 <_ZN8CALIPILE9writeByteEhhh>
	uint8_t temp = readByte(i2c_addr, CALIPILE_SRC_SELECT);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7a1b      	ldrb	r3, [r3, #8]
 800e426:	221a      	movs	r2, #26
 800e428:	4619      	mov	r1, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 f8f1 	bl	800e612 <_ZN8CALIPILE8readByteEhh>
 800e430:	4603      	mov	r3, r0
 800e432:	73fb      	strb	r3, [r7, #15]
	writeByte(i2c_addr, CALIPILE_SRC_SELECT, temp | 0x10);// interrupt on exceeding threshold
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	7a19      	ldrb	r1, [r3, #8]
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	f043 0310 	orr.w	r3, r3, #16
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	221a      	movs	r2, #26
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f8ce 	bl	800e5e4 <_ZN8CALIPILE9writeByteEhhh>
	// Verify threshold set
	readBytes(i2c_addr, CALIPILE_TPOT_THR, 2, &rawData[0]);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	7a19      	ldrb	r1, [r3, #8]
 800e44c:	f107 0308 	add.w	r3, r7, #8
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	2302      	movs	r3, #2
 800e454:	221c      	movs	r2, #28
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 f8f0 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 800e45c:	7a3b      	ldrb	r3, [r7, #8]
 800e45e:	021b      	lsls	r3, r3, #8
 800e460:	b21a      	sxth	r2, r3
 800e462:	7a7b      	ldrb	r3, [r7, #9]
 800e464:	b21b      	sxth	r3, r3
 800e466:	4313      	orrs	r3, r2
 800e468:	b21b      	sxth	r3, r3
 800e46a:	81bb      	strh	r3, [r7, #12]
	//Serial.print("Overtemp threshold = "); //Serial.println(TPOTTHR * 2);
}
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <_ZN8CALIPILE8getTPAMBEv>:

uint16_t CALIPILE::getTPAMB() {
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af02      	add	r7, sp, #8
 800e47a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2] = {0, 0};
 800e47c:	2300      	movs	r3, #0
 800e47e:	81bb      	strh	r3, [r7, #12]
	readBytes(i2c_addr, CALIPILE_TPAMBIENT, 2, &rawData[0]);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	7a19      	ldrb	r1, [r3, #8]
 800e484:	f107 030c 	add.w	r3, r7, #12
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	2302      	movs	r3, #2
 800e48c:	2203      	movs	r2, #3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f8d4 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1];
 800e494:	7b3b      	ldrb	r3, [r7, #12]
 800e496:	021b      	lsls	r3, r3, #8
 800e498:	b21b      	sxth	r3, r3
 800e49a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800e49e:	b21a      	sxth	r2, r3
 800e4a0:	7b7b      	ldrb	r3, [r7, #13]
 800e4a2:	b21b      	sxth	r3, r3
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	b21b      	sxth	r3, r3
 800e4a8:	81fb      	strh	r3, [r7, #14]
	return temp;
 800e4aa:	89fb      	ldrh	r3, [r7, #14]
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <_ZN8CALIPILE8getTPOBJEv>:

uint32_t CALIPILE::getTPOBJ() {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af02      	add	r7, sp, #8
 800e4ba:	6078      	str	r0, [r7, #4]
	uint8_t rawData[3] = {0, 0, 0};
 800e4bc:	4b10      	ldr	r3, [pc, #64]	; (800e500 <_ZN8CALIPILE8getTPOBJEv+0x4c>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	723b      	strb	r3, [r7, #8]
 800e4c2:	f107 0309 	add.w	r3, r7, #9
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	801a      	strh	r2, [r3, #0]
	readBytes(i2c_addr, CALIPILE_TPOBJECT, 3, &rawData[0]);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	7a19      	ldrb	r1, [r3, #8]
 800e4ce:	f107 0308 	add.w	r3, r7, #8
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f8af 	bl	800e63c <_ZN8CALIPILE9readBytesEhhhPh>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 800e4de:	7a3b      	ldrb	r3, [r7, #8]
 800e4e0:	061a      	lsls	r2, r3, #24
 800e4e2:	7a7b      	ldrb	r3, [r7, #9]
 800e4e4:	041b      	lsls	r3, r3, #16
 800e4e6:	431a      	orrs	r2, r3
 800e4e8:	7abb      	ldrb	r3, [r7, #10]
 800e4ea:	021b      	lsls	r3, r3, #8
 800e4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	0bdb      	lsrs	r3, r3, #15
 800e4f4:	60fb      	str	r3, [r7, #12]
	return temp;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	08014270 	.word	0x08014270

0800e504 <_ZN8CALIPILE7getTambEt>:
uint8_t CALIPILE::getTPAMBSHK() {
	uint8_t temp = readByte(i2c_addr, CALIPILE_TPAMB_SHOCK);
	return temp;
}

float CALIPILE::getTamb(uint16_t TPAMB) {
 800e504:	b480      	push	{r7}
 800e506:	b085      	sub	sp, #20
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	460b      	mov	r3, r1
 800e50e:	807b      	strh	r3, [r7, #2]
	float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 800e510:	887b      	ldrh	r3, [r7, #2]
 800e512:	ee07 3a90 	vmov	s15, r3
 800e516:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	895b      	ldrh	r3, [r3, #10]
 800e51e:	ee07 3a90 	vmov	s15, r3
 800e522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	899b      	ldrh	r3, [r3, #12]
 800e52e:	ee07 3a90 	vmov	s15, r3
 800e532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e536:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e53a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800e53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e542:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e564 <_ZN8CALIPILE7getTambEt+0x60>
 800e546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e54a:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	ee07 3a90 	vmov	s15, r3
}
 800e554:	eeb0 0a67 	vmov.f32	s0, s15
 800e558:	3714      	adds	r7, #20
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	43951333 	.word	0x43951333

0800e568 <_ZN8CALIPILE7getTobjEmf>:

float CALIPILE::getTobj(uint32_t TPOBJ, float Tamb) {
 800e568:	b580      	push	{r7, lr}
 800e56a:	b088      	sub	sp, #32
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp0 = powf(Tamb, 3.8f);
 800e576:	eddf 0a19 	vldr	s1, [pc, #100]	; 800e5dc <_ZN8CALIPILE7getTobjEmf+0x74>
 800e57a:	ed97 0a01 	vldr	s0, [r7, #4]
 800e57e:	f005 f8d1 	bl	8013724 <powf>
 800e582:	ed87 0a07 	vstr	s0, [r7, #28]
	float temp1 = ( ((float) TPOBJ) - ((float) _U0) ) / _k;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	ee07 3a90 	vmov	s15, r3
 800e58c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	89db      	ldrh	r3, [r3, #14]
 800e594:	ee07 3a90 	vmov	s15, r3
 800e598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e59c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	ed93 7a07 	vldr	s14, [r3, #28]
 800e5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5aa:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 800e5ae:	ed97 7a07 	vldr	s14, [r7, #28]
 800e5b2:	edd7 7a06 	vldr	s15, [r7, #24]
 800e5b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5ba:	eddf 0a09 	vldr	s1, [pc, #36]	; 800e5e0 <_ZN8CALIPILE7getTobjEmf+0x78>
 800e5be:	eeb0 0a67 	vmov.f32	s0, s15
 800e5c2:	f005 f8af 	bl	8013724 <powf>
 800e5c6:	ed87 0a05 	vstr	s0, [r7, #20]
	return temp3;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	ee07 3a90 	vmov	s15, r3
}
 800e5d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e5d4:	3720      	adds	r7, #32
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	40733333 	.word	0x40733333
 800e5e0:	3e86bca2 	.word	0x3e86bca2

0800e5e4 <_ZN8CALIPILE9writeByteEhhh>:
//	//Serial.println("done\n");
//
//}

// I2C read/write functions for the BMP280 sensors
void CALIPILE::writeByte(uint8_t address, uint8_t subAddress, uint8_t data) {
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	4608      	mov	r0, r1
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	70fb      	strb	r3, [r7, #3]
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	70bb      	strb	r3, [r7, #2]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	707b      	strb	r3, [r7, #1]
	writeRegister(subAddress, &data, 1);
 800e5fe:	1c7a      	adds	r2, r7, #1
 800e600:	78b9      	ldrb	r1, [r7, #2]
 800e602:	2301      	movs	r3, #1
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f85d 	bl	800e6c4 <_ZN8CALIPILE13writeRegisterEhPht>
}
 800e60a:	bf00      	nop
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <_ZN8CALIPILE8readByteEhh>:

uint8_t CALIPILE::readByte(uint8_t address, uint8_t subAddress) {
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	460b      	mov	r3, r1
 800e61c:	70fb      	strb	r3, [r7, #3]
 800e61e:	4613      	mov	r3, r2
 800e620:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[1];
	readRegister(subAddress, &temp[0], 1);
 800e622:	78bb      	ldrb	r3, [r7, #2]
 800e624:	b299      	uxth	r1, r3
 800e626:	f107 020c 	add.w	r2, r7, #12
 800e62a:	2301      	movs	r3, #1
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 f81f 	bl	800e670 <_ZN8CALIPILE12readRegisterEtPht>
	return temp[0];
 800e632:	7b3b      	ldrb	r3, [r7, #12]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_ZN8CALIPILE9readBytesEhhhPh>:

void CALIPILE::readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest) {
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	4608      	mov	r0, r1
 800e646:	4611      	mov	r1, r2
 800e648:	461a      	mov	r2, r3
 800e64a:	4603      	mov	r3, r0
 800e64c:	70fb      	strb	r3, [r7, #3]
 800e64e:	460b      	mov	r3, r1
 800e650:	70bb      	strb	r3, [r7, #2]
 800e652:	4613      	mov	r3, r2
 800e654:	707b      	strb	r3, [r7, #1]
	readRegister(subAddress, dest, count);
 800e656:	78bb      	ldrb	r3, [r7, #2]
 800e658:	b299      	uxth	r1, r3
 800e65a:	787b      	ldrb	r3, [r7, #1]
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f805 	bl	800e670 <_ZN8CALIPILE12readRegisterEtPht>
}
 800e666:	bf00      	nop
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <_ZN8CALIPILE12readRegisterEtPht>:
		return false;
	}
}

HAL_StatusTypeDef test;
bool CALIPILE::readRegister(uint16_t mem_addr, uint8_t *dest, uint16_t size) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af04      	add	r7, sp, #16
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	607a      	str	r2, [r7, #4]
 800e67a:	461a      	mov	r2, r3
 800e67c:	460b      	mov	r3, r1
 800e67e:	817b      	strh	r3, [r7, #10]
 800e680:	4613      	mov	r3, r2
 800e682:	813b      	strh	r3, [r7, #8]
	test = HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, I2C_TIMEOUT);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6858      	ldr	r0, [r3, #4]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	7a1b      	ldrb	r3, [r3, #8]
 800e68c:	b299      	uxth	r1, r3
 800e68e:	897a      	ldrh	r2, [r7, #10]
 800e690:	2364      	movs	r3, #100	; 0x64
 800e692:	9302      	str	r3, [sp, #8]
 800e694:	893b      	ldrh	r3, [r7, #8]
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	2301      	movs	r3, #1
 800e69e:	f7f5 fc6d 	bl	8003f7c <HAL_I2C_Mem_Read>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <_ZN8CALIPILE12readRegisterEtPht+0x50>)
 800e6a8:	701a      	strb	r2, [r3, #0]
	if (HAL_OK
			== test) {
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <_ZN8CALIPILE12readRegisterEtPht+0x50>)
 800e6ac:	781b      	ldrb	r3, [r3, #0]
	if (HAL_OK
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <_ZN8CALIPILE12readRegisterEtPht+0x46>
		return true;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e000      	b.n	800e6b8 <_ZN8CALIPILE12readRegisterEtPht+0x48>
	} else {
		return false;
 800e6b6:	2300      	movs	r3, #0
	}
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	2000056d 	.word	0x2000056d

0800e6c4 <_ZN8CALIPILE13writeRegisterEhPht>:

bool CALIPILE::writeRegister(uint8_t mem_addr, uint8_t *val, uint16_t size) {
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b088      	sub	sp, #32
 800e6c8:	af04      	add	r7, sp, #16
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	72fb      	strb	r3, [r7, #11]
 800e6d4:	4613      	mov	r3, r2
 800e6d6:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, val, size, I2C_TIMEOUT)) {
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6858      	ldr	r0, [r3, #4]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	7a1b      	ldrb	r3, [r3, #8]
 800e6e0:	b299      	uxth	r1, r3
 800e6e2:	7afb      	ldrb	r3, [r7, #11]
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	2364      	movs	r3, #100	; 0x64
 800e6e8:	9302      	str	r3, [sp, #8]
 800e6ea:	893b      	ldrh	r3, [r7, #8]
 800e6ec:	9301      	str	r3, [sp, #4]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f7f5 fb2e 	bl	8003d54 <HAL_I2C_Mem_Write>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	bf0c      	ite	eq
 800e6fe:	2301      	moveq	r3, #1
 800e700:	2300      	movne	r3, #0
 800e702:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <_ZN8CALIPILE13writeRegisterEhPht+0x48>
		return true;
 800e708:	2301      	movs	r3, #1
 800e70a:	e000      	b.n	800e70e <_ZN8CALIPILE13writeRegisterEhPht+0x4a>
	} else {
		return false;
 800e70c:	2300      	movs	r3, #0
	}
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
	...

0800e718 <_ZN7TSL2772C1Ev>:

/**
 * @brief Construct a new TSL2772::TSL2772 object
 *
 */
TSL2772::TSL2772(void) {
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2200      	movs	r2, #0
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	711a      	strb	r2, [r3, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2200      	movs	r2, #0
 800e730:	729a      	strb	r2, [r3, #10]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e738:	60da      	str	r2, [r3, #12]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4a05      	ldr	r2, [pc, #20]	; (800e754 <_ZN7TSL2772C1Ev+0x3c>)
 800e73e:	611a      	str	r2, [r3, #16]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	615a      	str	r2, [r3, #20]
}
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	402eb852 	.word	0x402eb852

0800e758 <_ZN7TSL2772D1Ev>:

/**
 * @brief Destroy the TSL2772::TSL2772 object
 *
 */
TSL2772::~TSL2772(void) {
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
}
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	370c      	adds	r7, #12
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <_ZN7TSL27725beginEhP19__I2C_HandleTypeDef>:
 *            The Wire object to be used for I2C connections.
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool TSL2772::begin(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle) {
 800e76e:	b580      	push	{r7, lr}
 800e770:	b084      	sub	sp, #16
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	460b      	mov	r3, r1
 800e778:	607a      	str	r2, [r7, #4]
 800e77a:	72fb      	strb	r3, [r7, #11]

	i2c_han = i2c_handle;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	601a      	str	r2, [r3, #0]
	i2c_addr = i2c_address << 1;
 800e782:	7afb      	ldrb	r3, [r7, #11]
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	b2da      	uxtb	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	711a      	strb	r2, [r3, #4]

	return _init();
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f000 f805 	bl	800e79c <_ZN7TSL27725_initEv>
 800e792:	4603      	mov	r3, r0
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZN7TSL27725_initEv>:

/*!  @brief Initializer
 *   @returns True if chip identified and initialized
 */
bool TSL2772::_init() {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af02      	add	r7, sp, #8
 800e7a2:	6078      	str	r0, [r7, #4]

	// configure register autoincrement
	uint8_t data = CMD_REG_W | CMD_REG_TYPE_AUTO_INC;
 800e7a4:	23a0      	movs	r3, #160	; 0xa0
 800e7a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK == HAL_I2C_Master_Transmit(i2c_han, i2c_addr, &data, 1, 10)){
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6818      	ldr	r0, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	791b      	ldrb	r3, [r3, #4]
 800e7b0:	b299      	uxth	r1, r3
 800e7b2:	f107 020f 	add.w	r2, r7, #15
 800e7b6:	230a      	movs	r3, #10
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	f7f5 f9d6 	bl	8003b6c <HAL_I2C_Master_Transmit>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	bf0c      	ite	eq
 800e7c6:	2301      	moveq	r3, #1
 800e7c8:	2300      	movne	r3, #0
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d001      	beq.n	800e7d4 <_ZN7TSL27725_initEv+0x38>
		return true;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e000      	b.n	800e7d6 <_ZN7TSL27725_initEv+0x3a>
	}else{
		return false;
 800e7d4:	2300      	movs	r3, #0
	}
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <_ZN7TSL27729enableALSEb>:

bool TSL2772::enableALS(bool state) {
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b084      	sub	sp, #16
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	70fb      	strb	r3, [r7, #3]
	uint8_t enable_reg_data = readRegisterByte(TSL2722_ENABLE_REG);
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fa0f 	bl	800ec10 <_ZN7TSL277216readRegisterByteEt>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	73fb      	strb	r3, [r7, #15]

	if(state) enable_reg_data |= EN_REG_AEN;
 800e7f6:	78fb      	ldrb	r3, [r7, #3]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <_ZN7TSL27729enableALSEb+0x28>
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	f043 0302 	orr.w	r3, r3, #2
 800e802:	73fb      	strb	r3, [r7, #15]
 800e804:	e001      	b.n	800e80a <_ZN7TSL27729enableALSEb+0x2c>
	else enable_reg_data &= !EN_REG_AEN;
 800e806:	2300      	movs	r3, #0
 800e808:	73fb      	strb	r3, [r7, #15]

	return writeRegisterByte(TSL2722_ENABLE_REG, enable_reg_data);
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
 800e80c:	461a      	mov	r2, r3
 800e80e:	2100      	movs	r1, #0
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f9ae 	bl	800eb72 <_ZN7TSL277217writeRegisterByteEhh>
 800e816:	4603      	mov	r3, r0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <_ZN7TSL27727powerOnEb>:
	}

	return writeRegisterByte(TSL2722_CONFIG_REG, config_reg_data);
}

bool TSL2772::powerOn(bool state) {
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	70fb      	strb	r3, [r7, #3]
	uint8_t enable_reg_data = readRegisterByte(TSL2722_ENABLE_REG);
 800e82c:	2100      	movs	r1, #0
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 f9ee 	bl	800ec10 <_ZN7TSL277216readRegisterByteEt>
 800e834:	4603      	mov	r3, r0
 800e836:	73fb      	strb	r3, [r7, #15]

	if(state) enable_reg_data |= EN_REG_PON;
 800e838:	78fb      	ldrb	r3, [r7, #3]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d004      	beq.n	800e848 <_ZN7TSL27727powerOnEb+0x28>
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	f043 0301 	orr.w	r3, r3, #1
 800e844:	73fb      	strb	r3, [r7, #15]
 800e846:	e001      	b.n	800e84c <_ZN7TSL27727powerOnEb+0x2c>
	else enable_reg_data &= !EN_REG_PON;
 800e848:	2300      	movs	r3, #0
 800e84a:	73fb      	strb	r3, [r7, #15]

	return writeRegisterByte(TSL2722_ENABLE_REG, enable_reg_data);
 800e84c:	7bfb      	ldrb	r3, [r7, #15]
 800e84e:	461a      	mov	r2, r3
 800e850:	2100      	movs	r1, #0
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f98d 	bl	800eb72 <_ZN7TSL277217writeRegisterByteEhh>
 800e858:	4603      	mov	r3, r0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
	...

0800e864 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t>:

bool TSL2772::setATIME(tsl2591IntegrationTime_t atime_value){
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	460b      	mov	r3, r1
 800e86e:	70fb      	strb	r3, [r7, #3]
	uint8_t atime_reg_val = readRegisterByte(TSL2722_ATIME_REG);
 800e870:	2101      	movs	r1, #1
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f9cc 	bl	800ec10 <_ZN7TSL277216readRegisterByteEt>
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]

	atime_reg_val = atime_value;
 800e87c:	78fb      	ldrb	r3, [r7, #3]
 800e87e:	73fb      	strb	r3, [r7, #15]

	switch(atime_value){
 800e880:	78fb      	ldrb	r3, [r7, #3]
 800e882:	2bff      	cmp	r3, #255	; 0xff
 800e884:	d00e      	beq.n	800e8a4 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x40>
 800e886:	2bff      	cmp	r3, #255	; 0xff
 800e888:	dc20      	bgt.n	800e8cc <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x68>
 800e88a:	2bf6      	cmp	r3, #246	; 0xf6
 800e88c:	d00e      	beq.n	800e8ac <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x48>
 800e88e:	2bf6      	cmp	r3, #246	; 0xf6
 800e890:	dc1c      	bgt.n	800e8cc <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x68>
 800e892:	2bdb      	cmp	r3, #219	; 0xdb
 800e894:	d00e      	beq.n	800e8b4 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x50>
 800e896:	2bdb      	cmp	r3, #219	; 0xdb
 800e898:	dc18      	bgt.n	800e8cc <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x68>
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d012      	beq.n	800e8c4 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x60>
 800e89e:	2bc0      	cmp	r3, #192	; 0xc0
 800e8a0:	d00c      	beq.n	800e8bc <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x58>
		break;
	case TSL2722_INTEGRATIONTIME_600MS:
		als_integration_time_ms = 600;
		break;
	default:
		break;
 800e8a2:	e013      	b.n	800e8cc <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x68>
		als_integration_time_ms = 2.73;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a0f      	ldr	r2, [pc, #60]	; (800e8e4 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x80>)
 800e8a8:	611a      	str	r2, [r3, #16]
		break;
 800e8aa:	e010      	b.n	800e8ce <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x6a>
		als_integration_time_ms = 27.33;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a0e      	ldr	r2, [pc, #56]	; (800e8e8 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x84>)
 800e8b0:	611a      	str	r2, [r3, #16]
		break;
 800e8b2:	e00c      	b.n	800e8ce <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x6a>
		als_integration_time_ms = 101;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a0d      	ldr	r2, [pc, #52]	; (800e8ec <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x88>)
 800e8b8:	611a      	str	r2, [r3, #16]
		break;
 800e8ba:	e008      	b.n	800e8ce <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x6a>
		als_integration_time_ms = 175;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a0c      	ldr	r2, [pc, #48]	; (800e8f0 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x8c>)
 800e8c0:	611a      	str	r2, [r3, #16]
		break;
 800e8c2:	e004      	b.n	800e8ce <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x6a>
		als_integration_time_ms = 600;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a0b      	ldr	r2, [pc, #44]	; (800e8f4 <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x90>)
 800e8c8:	611a      	str	r2, [r3, #16]
		break;
 800e8ca:	e000      	b.n	800e8ce <_ZN7TSL27728setATIMEE24tsl2591IntegrationTime_t+0x6a>
		break;
 800e8cc:	bf00      	nop
	}

	return writeRegisterByte(TSL2722_ATIME_REG, atime_reg_val);
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f94c 	bl	800eb72 <_ZN7TSL277217writeRegisterByteEhh>
 800e8da:	4603      	mov	r3, r0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	402eb852 	.word	0x402eb852
 800e8e8:	41daa3d7 	.word	0x41daa3d7
 800e8ec:	42ca0000 	.word	0x42ca0000
 800e8f0:	432f0000 	.word	0x432f0000
 800e8f4:	44160000 	.word	0x44160000

0800e8f8 <_ZN7TSL27728setAGAINE13tsl2591Gain_t>:
bool TSL2772::setAGAIN(tsl2591Gain_t gain_value){
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	70fb      	strb	r3, [r7, #3]

	uint8_t ctrl_reg_val = readRegisterByte(TSL2722_CONTROL_REG) & 0xFC;
 800e904:	210f      	movs	r1, #15
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f982 	bl	800ec10 <_ZN7TSL277216readRegisterByteEt>
 800e90c:	4603      	mov	r3, r0
 800e90e:	f023 0303 	bic.w	r3, r3, #3
 800e912:	73fb      	strb	r3, [r7, #15]

	ctrl_reg_val &= 0xFC;
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	f023 0303 	bic.w	r3, r3, #3
 800e91a:	73fb      	strb	r3, [r7, #15]
	ctrl_reg_val |= gain_value;
 800e91c:	7bfa      	ldrb	r2, [r7, #15]
 800e91e:	78fb      	ldrb	r3, [r7, #3]
 800e920:	4313      	orrs	r3, r2
 800e922:	73fb      	strb	r3, [r7, #15]

	switch(gain_value){
 800e924:	78fb      	ldrb	r3, [r7, #3]
 800e926:	2b03      	cmp	r3, #3
 800e928:	d81d      	bhi.n	800e966 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x6e>
 800e92a:	a201      	add	r2, pc, #4	; (adr r2, 800e930 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x38>)
 800e92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e930:	0800e941 	.word	0x0800e941
 800e934:	0800e94b 	.word	0x0800e94b
 800e938:	0800e955 	.word	0x0800e955
 800e93c:	0800e95f 	.word	0x0800e95f
	case TSL2722_GAIN_1X:
		als_gain = 1;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e946:	60da      	str	r2, [r3, #12]
		break;
 800e948:	e00e      	b.n	800e968 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x70>
	case TSL2722_GAIN_8X:
		als_gain = 8;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800e950:	60da      	str	r2, [r3, #12]
		break;
 800e952:	e009      	b.n	800e968 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x70>
	case TSL2722_GAIN_16X:
		als_gain = 16;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800e95a:	60da      	str	r2, [r3, #12]
		break;
 800e95c:	e004      	b.n	800e968 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x70>
	case TSL2722_GAIN_120X:
		als_gain = 120;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0xc0>)
 800e962:	60da      	str	r2, [r3, #12]
		break;
 800e964:	e000      	b.n	800e968 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x70>
	default:
		break;
 800e966:	bf00      	nop
	}

	if(als_gain_scaler) als_gain *= 0.16;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	7a9b      	ldrb	r3, [r3, #10]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d012      	beq.n	800e996 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0x9e>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	4618      	mov	r0, r3
 800e976:	f7f1 fd67 	bl	8000448 <__aeabi_f2d>
 800e97a:	a30d      	add	r3, pc, #52	; (adr r3, 800e9b0 <_ZN7TSL27728setAGAINE13tsl2591Gain_t+0xb8>)
 800e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e980:	f7f1 fdba 	bl	80004f8 <__aeabi_dmul>
 800e984:	4602      	mov	r2, r0
 800e986:	460b      	mov	r3, r1
 800e988:	4610      	mov	r0, r2
 800e98a:	4619      	mov	r1, r3
 800e98c:	f7f1 ffc6 	bl	800091c <__aeabi_d2f>
 800e990:	4602      	mov	r2, r0
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	60da      	str	r2, [r3, #12]

	return writeRegisterByte(TSL2722_CONTROL_REG, ctrl_reg_val);
 800e996:	7bfb      	ldrb	r3, [r7, #15]
 800e998:	461a      	mov	r2, r3
 800e99a:	210f      	movs	r1, #15
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f8e8 	bl	800eb72 <_ZN7TSL277217writeRegisterByteEhh>
 800e9a2:	4603      	mov	r3, r0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	f3af 8000 	nop.w
 800e9b0:	47ae147b 	.word	0x47ae147b
 800e9b4:	3fc47ae1 	.word	0x3fc47ae1
 800e9b8:	42f00000 	.word	0x42f00000
 800e9bc:	00000000 	.word	0x00000000

0800e9c0 <_ZN7TSL27726getLuxEv>:

tsl2591Gain_t TSL2772::getAGAIN(){
	return (tsl2591Gain_t) (readRegisterByte(TSL2722_CONTROL_REG) & 0xFC);
}

uint32_t TSL2772::getLux(){
 800e9c0:	b5b0      	push	{r4, r5, r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]

	readALS_data(); // grab samples from sensor
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f000 f8af 	bl	800eb2c <_ZN7TSL277212readALS_dataEv>

	float _CPL; // counters per lux
	_CPL = (als_integration_time_ms * als_gain) / (_GA*60);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	ed93 7a04 	vldr	s14, [r3, #16]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	edd3 7a03 	vldr	s15, [r3, #12]
 800e9da:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	695a      	ldr	r2, [r3, #20]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	011b      	lsls	r3, r3, #4
 800e9e6:	1a9b      	subs	r3, r3, r2
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	ee07 3a90 	vmov	s15, r3
 800e9ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9f6:	edc7 7a05 	vstr	s15, [r7, #20]
	float Lux1, Lux2;
	Lux1 = (1*_C0DATA - 1.87*_C1DATA)/_CPL;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	88db      	ldrh	r3, [r3, #6]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7f1 fd10 	bl	8000424 <__aeabi_i2d>
 800ea04:	4604      	mov	r4, r0
 800ea06:	460d      	mov	r5, r1
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	891b      	ldrh	r3, [r3, #8]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7f1 fd09 	bl	8000424 <__aeabi_i2d>
 800ea12:	a342      	add	r3, pc, #264	; (adr r3, 800eb1c <_ZN7TSL27726getLuxEv+0x15c>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	f7f1 fd6e 	bl	80004f8 <__aeabi_dmul>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	4620      	mov	r0, r4
 800ea22:	4629      	mov	r1, r5
 800ea24:	f7f1 fbb0 	bl	8000188 <__aeabi_dsub>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4614      	mov	r4, r2
 800ea2e:	461d      	mov	r5, r3
 800ea30:	6978      	ldr	r0, [r7, #20]
 800ea32:	f7f1 fd09 	bl	8000448 <__aeabi_f2d>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	f7f1 fe85 	bl	800074c <__aeabi_ddiv>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4610      	mov	r0, r2
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f7f1 ff67 	bl	800091c <__aeabi_d2f>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	613b      	str	r3, [r7, #16]
	Lux2 = (0.63*_C0DATA - 1*_C1DATA)/_CPL;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	88db      	ldrh	r3, [r3, #6]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7f1 fce4 	bl	8000424 <__aeabi_i2d>
 800ea5c:	a331      	add	r3, pc, #196	; (adr r3, 800eb24 <_ZN7TSL27726getLuxEv+0x164>)
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	f7f1 fd49 	bl	80004f8 <__aeabi_dmul>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	4614      	mov	r4, r2
 800ea6c:	461d      	mov	r5, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	891b      	ldrh	r3, [r3, #8]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7f1 fcd6 	bl	8000424 <__aeabi_i2d>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	4629      	mov	r1, r5
 800ea80:	f7f1 fb82 	bl	8000188 <__aeabi_dsub>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4614      	mov	r4, r2
 800ea8a:	461d      	mov	r5, r3
 800ea8c:	6978      	ldr	r0, [r7, #20]
 800ea8e:	f7f1 fcdb 	bl	8000448 <__aeabi_f2d>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	4620      	mov	r0, r4
 800ea98:	4629      	mov	r1, r5
 800ea9a:	f7f1 fe57 	bl	800074c <__aeabi_ddiv>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	f7f1 ff39 	bl	800091c <__aeabi_d2f>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	60fb      	str	r3, [r7, #12]

	if( (Lux1>=Lux2) && (Lux1 > 0)){
 800eaae:	ed97 7a04 	vldr	s14, [r7, #16]
 800eab2:	edd7 7a03 	vldr	s15, [r7, #12]
 800eab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabe:	db0b      	blt.n	800ead8 <_ZN7TSL27726getLuxEv+0x118>
 800eac0:	edd7 7a04 	vldr	s15, [r7, #16]
 800eac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eacc:	dd04      	ble.n	800ead8 <_ZN7TSL27726getLuxEv+0x118>
		return Lux1;
 800eace:	edd7 7a04 	vldr	s15, [r7, #16]
 800ead2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ead6:	e016      	b.n	800eb06 <_ZN7TSL27726getLuxEv+0x146>
	}else if ((Lux1<Lux2) && (Lux1 > 0)){
 800ead8:	ed97 7a04 	vldr	s14, [r7, #16]
 800eadc:	edd7 7a03 	vldr	s15, [r7, #12]
 800eae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae8:	d50b      	bpl.n	800eb02 <_ZN7TSL27726getLuxEv+0x142>
 800eaea:	edd7 7a04 	vldr	s15, [r7, #16]
 800eaee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eaf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf6:	dd04      	ble.n	800eb02 <_ZN7TSL27726getLuxEv+0x142>
		return Lux2;
 800eaf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800eafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb00:	e001      	b.n	800eb06 <_ZN7TSL27726getLuxEv+0x146>
	}else{
		return 0;
 800eb02:	eddf 7a05 	vldr	s15, [pc, #20]	; 800eb18 <_ZN7TSL27726getLuxEv+0x158>
 800eb06:	ee17 3a90 	vmov	r3, s15
	}
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bdb0      	pop	{r4, r5, r7, pc}
 800eb12:	bf00      	nop
 800eb14:	f3af 8000 	nop.w
 800eb18:	00000000 	.word	0x00000000
 800eb1c:	1eb851ec 	.word	0x1eb851ec
 800eb20:	3ffdeb85 	.word	0x3ffdeb85
 800eb24:	c28f5c29 	.word	0xc28f5c29
 800eb28:	3fe428f5 	.word	0x3fe428f5

0800eb2c <_ZN7TSL277212readALS_dataEv>:

void TSL2772::readALS_data(){
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
	uint8_t data[4];
	readRegister(TSL2722_C0DATA_REG, data, 4);
 800eb34:	f107 020c 	add.w	r2, r7, #12
 800eb38:	2304      	movs	r3, #4
 800eb3a:	2114      	movs	r1, #20
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 f83f 	bl	800ebc0 <_ZN7TSL277212readRegisterEtPht>

	_C0DATA = data[1] << 8 | data[0];
 800eb42:	7b7b      	ldrb	r3, [r7, #13]
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	b21a      	sxth	r2, r3
 800eb48:	7b3b      	ldrb	r3, [r7, #12]
 800eb4a:	b21b      	sxth	r3, r3
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	b21b      	sxth	r3, r3
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	80da      	strh	r2, [r3, #6]
	_C1DATA = data[3] << 8 | data[2];
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
 800eb58:	021b      	lsls	r3, r3, #8
 800eb5a:	b21a      	sxth	r2, r3
 800eb5c:	7bbb      	ldrb	r3, [r7, #14]
 800eb5e:	b21b      	sxth	r3, r3
 800eb60:	4313      	orrs	r3, r2
 800eb62:	b21b      	sxth	r3, r3
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	811a      	strh	r2, [r3, #8]

//	readRegister(TSL2722_C0DATA_REG, (uint8_t*) &_C0DATA, 2);
//	readRegister(TSL2722_C1DATA_REG, (uint8_t*) &_C1DATA, 2);
}
 800eb6a:	bf00      	nop
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <_ZN7TSL277217writeRegisterByteEhh>:
	} else {
		return false;
	}
}

bool TSL2772::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b086      	sub	sp, #24
 800eb76:	af04      	add	r7, sp, #16
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	70fb      	strb	r3, [r7, #3]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	70bb      	strb	r3, [r7, #2]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, &val, 1, 10)) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6818      	ldr	r0, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	791b      	ldrb	r3, [r3, #4]
 800eb8a:	b299      	uxth	r1, r3
 800eb8c:	78fb      	ldrb	r3, [r7, #3]
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	230a      	movs	r3, #10
 800eb92:	9302      	str	r3, [sp, #8]
 800eb94:	2301      	movs	r3, #1
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	1cbb      	adds	r3, r7, #2
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	f7f5 f8d9 	bl	8003d54 <HAL_I2C_Mem_Write>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bf0c      	ite	eq
 800eba8:	2301      	moveq	r3, #1
 800ebaa:	2300      	movne	r3, #0
 800ebac:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <_ZN7TSL277217writeRegisterByteEhh+0x44>
		return true;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e000      	b.n	800ebb8 <_ZN7TSL277217writeRegisterByteEhh+0x46>
	} else {
		return false;
 800ebb6:	2300      	movs	r3, #0
	}
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <_ZN7TSL277212readRegisterEtPht>:
	uint8_t mask = 1 << pos;
	return ((var & ~mask) | (value << pos));
}

bool TSL2772::readRegister(uint16_t mem_addr, uint8_t *dest,
		uint16_t size) {
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b088      	sub	sp, #32
 800ebc4:	af04      	add	r7, sp, #16
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	607a      	str	r2, [r7, #4]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	460b      	mov	r3, r1
 800ebce:	817b      	strh	r3, [r7, #10]
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, 10)) {
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	791b      	ldrb	r3, [r3, #4]
 800ebdc:	b299      	uxth	r1, r3
 800ebde:	897a      	ldrh	r2, [r7, #10]
 800ebe0:	230a      	movs	r3, #10
 800ebe2:	9302      	str	r3, [sp, #8]
 800ebe4:	893b      	ldrh	r3, [r7, #8]
 800ebe6:	9301      	str	r3, [sp, #4]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	2301      	movs	r3, #1
 800ebee:	f7f5 f9c5 	bl	8003f7c <HAL_I2C_Mem_Read>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	bf0c      	ite	eq
 800ebf8:	2301      	moveq	r3, #1
 800ebfa:	2300      	movne	r3, #0
 800ebfc:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <_ZN7TSL277212readRegisterEtPht+0x46>
		return true;
 800ec02:	2301      	movs	r3, #1
 800ec04:	e000      	b.n	800ec08 <_ZN7TSL277212readRegisterEtPht+0x48>
	} else {
		return false;
 800ec06:	2300      	movs	r3, #0
	}
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <_ZN7TSL277216readRegisterByteEt>:
	register_value |= value << pos; // and add in the new data

	return writeRegisterByte(reg, register_value);
}

uint8_t TSL2772::readRegisterByte(uint16_t mem_addr) {
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b088      	sub	sp, #32
 800ec14:	af04      	add	r7, sp, #16
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	791b      	ldrb	r3, [r3, #4]
 800ec24:	b299      	uxth	r1, r3
 800ec26:	887a      	ldrh	r2, [r7, #2]
 800ec28:	230a      	movs	r3, #10
 800ec2a:	9302      	str	r3, [sp, #8]
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	9301      	str	r3, [sp, #4]
 800ec30:	f107 030f 	add.w	r3, r7, #15
 800ec34:	9300      	str	r3, [sp, #0]
 800ec36:	2301      	movs	r3, #1
 800ec38:	f7f5 f9a0 	bl	8003f7c <HAL_I2C_Mem_Read>
	return data;
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
	...

0800ec48 <__NVIC_SetPriority>:
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ec54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	db0a      	blt.n	800ec72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	490c      	ldr	r1, [pc, #48]	; (800ec94 <__NVIC_SetPriority+0x4c>)
 800ec62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec66:	0112      	lsls	r2, r2, #4
 800ec68:	b2d2      	uxtb	r2, r2
 800ec6a:	440b      	add	r3, r1
 800ec6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ec70:	e00a      	b.n	800ec88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	4908      	ldr	r1, [pc, #32]	; (800ec98 <__NVIC_SetPriority+0x50>)
 800ec78:	79fb      	ldrb	r3, [r7, #7]
 800ec7a:	f003 030f 	and.w	r3, r3, #15
 800ec7e:	3b04      	subs	r3, #4
 800ec80:	0112      	lsls	r2, r2, #4
 800ec82:	b2d2      	uxtb	r2, r2
 800ec84:	440b      	add	r3, r1
 800ec86:	761a      	strb	r2, [r3, #24]
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr
 800ec94:	e000e100 	.word	0xe000e100
 800ec98:	e000ed00 	.word	0xe000ed00

0800ec9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eca0:	4b05      	ldr	r3, [pc, #20]	; (800ecb8 <SysTick_Handler+0x1c>)
 800eca2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eca4:	f002 fbee 	bl	8011484 <xTaskGetSchedulerState>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d001      	beq.n	800ecb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ecae:	f003 fd93 	bl	80127d8 <xPortSysTickHandler>
  }
}
 800ecb2:	bf00      	nop
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	e000e010 	.word	0xe000e010

0800ecbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	f06f 0004 	mvn.w	r0, #4
 800ecc6:	f7ff ffbf 	bl	800ec48 <__NVIC_SetPriority>
#endif
}
 800ecca:	bf00      	nop
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecd6:	f3ef 8305 	mrs	r3, IPSR
 800ecda:	603b      	str	r3, [r7, #0]
  return(result);
 800ecdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d003      	beq.n	800ecea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ece2:	f06f 0305 	mvn.w	r3, #5
 800ece6:	607b      	str	r3, [r7, #4]
 800ece8:	e00c      	b.n	800ed04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ecea:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <osKernelInitialize+0x44>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ecf2:	4b08      	ldr	r3, [pc, #32]	; (800ed14 <osKernelInitialize+0x44>)
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	607b      	str	r3, [r7, #4]
 800ecfc:	e002      	b.n	800ed04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ecfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ed04:	687b      	ldr	r3, [r7, #4]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	370c      	adds	r7, #12
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20000570 	.word	0x20000570

0800ed18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed1e:	f3ef 8305 	mrs	r3, IPSR
 800ed22:	603b      	str	r3, [r7, #0]
  return(result);
 800ed24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d003      	beq.n	800ed32 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ed2a:	f06f 0305 	mvn.w	r3, #5
 800ed2e:	607b      	str	r3, [r7, #4]
 800ed30:	e010      	b.n	800ed54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ed32:	4b0b      	ldr	r3, [pc, #44]	; (800ed60 <osKernelStart+0x48>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d109      	bne.n	800ed4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ed3a:	f7ff ffbf 	bl	800ecbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ed3e:	4b08      	ldr	r3, [pc, #32]	; (800ed60 <osKernelStart+0x48>)
 800ed40:	2202      	movs	r2, #2
 800ed42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ed44:	f001 ff42 	bl	8010bcc <vTaskStartScheduler>
      stat = osOK;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	607b      	str	r3, [r7, #4]
 800ed4c:	e002      	b.n	800ed54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ed4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ed54:	687b      	ldr	r3, [r7, #4]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	20000570 	.word	0x20000570

0800ed64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b08e      	sub	sp, #56	; 0x38
 800ed68:	af04      	add	r7, sp, #16
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ed70:	2300      	movs	r3, #0
 800ed72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed74:	f3ef 8305 	mrs	r3, IPSR
 800ed78:	617b      	str	r3, [r7, #20]
  return(result);
 800ed7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d17e      	bne.n	800ee7e <osThreadNew+0x11a>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d07b      	beq.n	800ee7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ed86:	2380      	movs	r3, #128	; 0x80
 800ed88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ed8a:	2318      	movs	r3, #24
 800ed8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ed92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d045      	beq.n	800ee2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <osThreadNew+0x48>
        name = attr->name;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d008      	beq.n	800edd2 <osThreadNew+0x6e>
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	2b38      	cmp	r3, #56	; 0x38
 800edc4:	d805      	bhi.n	800edd2 <osThreadNew+0x6e>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <osThreadNew+0x72>
        return (NULL);
 800edd2:	2300      	movs	r3, #0
 800edd4:	e054      	b.n	800ee80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	695b      	ldr	r3, [r3, #20]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	695b      	ldr	r3, [r3, #20]
 800ede2:	089b      	lsrs	r3, r3, #2
 800ede4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00e      	beq.n	800ee0c <osThreadNew+0xa8>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	2bbb      	cmp	r3, #187	; 0xbb
 800edf4:	d90a      	bls.n	800ee0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d006      	beq.n	800ee0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	695b      	ldr	r3, [r3, #20]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <osThreadNew+0xa8>
        mem = 1;
 800ee06:	2301      	movs	r3, #1
 800ee08:	61bb      	str	r3, [r7, #24]
 800ee0a:	e010      	b.n	800ee2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d10c      	bne.n	800ee2e <osThreadNew+0xca>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d108      	bne.n	800ee2e <osThreadNew+0xca>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d104      	bne.n	800ee2e <osThreadNew+0xca>
          mem = 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	61bb      	str	r3, [r7, #24]
 800ee28:	e001      	b.n	800ee2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d110      	bne.n	800ee56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ee3c:	9202      	str	r2, [sp, #8]
 800ee3e:	9301      	str	r3, [sp, #4]
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	6a3a      	ldr	r2, [r7, #32]
 800ee48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f001 fcd2 	bl	80107f4 <xTaskCreateStatic>
 800ee50:	4603      	mov	r3, r0
 800ee52:	613b      	str	r3, [r7, #16]
 800ee54:	e013      	b.n	800ee7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d110      	bne.n	800ee7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	f107 0310 	add.w	r3, r7, #16
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f001 fd1d 	bl	80108ae <xTaskCreate>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d001      	beq.n	800ee7e <osThreadNew+0x11a>
            hTask = NULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ee7e:	693b      	ldr	r3, [r7, #16]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3728      	adds	r7, #40	; 0x28
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b088      	sub	sp, #32
 800ee8c:	af02      	add	r7, sp, #8
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <osThreadFlagsSet+0x1a>
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	da03      	bge.n	800eeaa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800eea2:	f06f 0303 	mvn.w	r3, #3
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	e035      	b.n	800ef16 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800eeaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeb0:	f3ef 8305 	mrs	r3, IPSR
 800eeb4:	613b      	str	r3, [r7, #16]
  return(result);
 800eeb6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d01f      	beq.n	800eefc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800eec0:	f107 0308 	add.w	r3, r7, #8
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	2300      	movs	r3, #0
 800eec8:	2201      	movs	r2, #1
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	6978      	ldr	r0, [r7, #20]
 800eece:	f002 fd81 	bl	80119d4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800eed2:	f107 030c 	add.w	r3, r7, #12
 800eed6:	2200      	movs	r2, #0
 800eed8:	9200      	str	r2, [sp, #0]
 800eeda:	2200      	movs	r2, #0
 800eedc:	2100      	movs	r1, #0
 800eede:	6978      	ldr	r0, [r7, #20]
 800eee0:	f002 fd78 	bl	80119d4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d015      	beq.n	800ef16 <osThreadFlagsSet+0x8e>
 800eeea:	4b0d      	ldr	r3, [pc, #52]	; (800ef20 <osThreadFlagsSet+0x98>)
 800eeec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	e00c      	b.n	800ef16 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800eefc:	2300      	movs	r3, #0
 800eefe:	2201      	movs	r2, #1
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	6978      	ldr	r0, [r7, #20]
 800ef04:	f002 fca8 	bl	8011858 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ef08:	f107 030c 	add.w	r3, r7, #12
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	2100      	movs	r1, #0
 800ef10:	6978      	ldr	r0, [r7, #20]
 800ef12:	f002 fca1 	bl	8011858 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ef16:	68fb      	ldr	r3, [r7, #12]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3718      	adds	r7, #24
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08c      	sub	sp, #48	; 0x30
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef30:	f3ef 8305 	mrs	r3, IPSR
 800ef34:	617b      	str	r3, [r7, #20]
  return(result);
 800ef36:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d003      	beq.n	800ef44 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ef3c:	f06f 0305 	mvn.w	r3, #5
 800ef40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef42:	e06b      	b.n	800f01c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	da03      	bge.n	800ef52 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ef4a:	f06f 0303 	mvn.w	r3, #3
 800ef4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef50:	e064      	b.n	800f01c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	f003 0302 	and.w	r3, r3, #2
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d002      	beq.n	800ef62 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef60:	e001      	b.n	800ef66 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800ef66:	2300      	movs	r3, #0
 800ef68:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800ef6e:	f001 ff49 	bl	8010e04 <xTaskGetTickCount>
 800ef72:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ef74:	f107 0210 	add.w	r2, r7, #16
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	f002 fc0b 	bl	8011798 <xTaskNotifyWait>
 800ef82:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d137      	bne.n	800effa <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800ef8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4013      	ands	r3, r2
 800ef90:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef96:	4313      	orrs	r3, r2
 800ef98:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	f003 0301 	and.w	r3, r3, #1
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d00c      	beq.n	800efbe <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa8:	4013      	ands	r3, r2
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	429a      	cmp	r2, r3
 800efae:	d032      	beq.n	800f016 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d10f      	bne.n	800efd6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800efb6:	f06f 0302 	mvn.w	r3, #2
 800efba:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800efbc:	e02e      	b.n	800f01c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	4013      	ands	r3, r2
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d128      	bne.n	800f01a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d103      	bne.n	800efd6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800efce:	f06f 0302 	mvn.w	r3, #2
 800efd2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800efd4:	e022      	b.n	800f01c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800efd6:	f001 ff15 	bl	8010e04 <xTaskGetTickCount>
 800efda:	4602      	mov	r2, r0
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800efe2:	69ba      	ldr	r2, [r7, #24]
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d902      	bls.n	800eff0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	627b      	str	r3, [r7, #36]	; 0x24
 800efee:	e00e      	b.n	800f00e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800eff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	627b      	str	r3, [r7, #36]	; 0x24
 800eff8:	e009      	b.n	800f00e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d103      	bne.n	800f008 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f000:	f06f 0302 	mvn.w	r3, #2
 800f004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f006:	e002      	b.n	800f00e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f008:	f06f 0301 	mvn.w	r3, #1
 800f00c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1af      	bne.n	800ef74 <osThreadFlagsWait+0x50>
 800f014:	e002      	b.n	800f01c <osThreadFlagsWait+0xf8>
            break;
 800f016:	bf00      	nop
 800f018:	e000      	b.n	800f01c <osThreadFlagsWait+0xf8>
            break;
 800f01a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3730      	adds	r7, #48	; 0x30
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f026:	b580      	push	{r7, lr}
 800f028:	b084      	sub	sp, #16
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f02e:	f3ef 8305 	mrs	r3, IPSR
 800f032:	60bb      	str	r3, [r7, #8]
  return(result);
 800f034:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f036:	2b00      	cmp	r3, #0
 800f038:	d003      	beq.n	800f042 <osDelay+0x1c>
    stat = osErrorISR;
 800f03a:	f06f 0305 	mvn.w	r3, #5
 800f03e:	60fb      	str	r3, [r7, #12]
 800f040:	e007      	b.n	800f052 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f001 fd89 	bl	8010b64 <vTaskDelay>
    }
  }

  return (stat);
 800f052:	68fb      	ldr	r3, [r7, #12]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f003 f9d5 	bl	8012414 <pvTimerGetTimerID>
 800f06a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d005      	beq.n	800f07e <TimerCallback+0x22>
    callb->func (callb->arg);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	6852      	ldr	r2, [r2, #4]
 800f07a:	4610      	mov	r0, r2
 800f07c:	4798      	blx	r3
  }
}
 800f07e:	bf00      	nop
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
	...

0800f088 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08c      	sub	sp, #48	; 0x30
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	607a      	str	r2, [r7, #4]
 800f092:	603b      	str	r3, [r7, #0]
 800f094:	460b      	mov	r3, r1
 800f096:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f098:	2300      	movs	r3, #0
 800f09a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f09c:	f3ef 8305 	mrs	r3, IPSR
 800f0a0:	613b      	str	r3, [r7, #16]
  return(result);
 800f0a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d163      	bne.n	800f170 <osTimerNew+0xe8>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d060      	beq.n	800f170 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f0ae:	2008      	movs	r0, #8
 800f0b0:	f003 fc22 	bl	80128f8 <pvPortMalloc>
 800f0b4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d059      	beq.n	800f170 <osTimerNew+0xe8>
      callb->func = func;
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f0c8:	7afb      	ldrb	r3, [r7, #11]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d102      	bne.n	800f0d4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	61fb      	str	r3, [r7, #28]
 800f0d2:	e001      	b.n	800f0d8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0dc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d01c      	beq.n	800f122 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <osTimerNew+0x6e>
          name = attr->name;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d006      	beq.n	800f10c <osTimerNew+0x84>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	2b2b      	cmp	r3, #43	; 0x2b
 800f104:	d902      	bls.n	800f10c <osTimerNew+0x84>
          mem = 1;
 800f106:	2301      	movs	r3, #1
 800f108:	61bb      	str	r3, [r7, #24]
 800f10a:	e00c      	b.n	800f126 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d108      	bne.n	800f126 <osTimerNew+0x9e>
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d104      	bne.n	800f126 <osTimerNew+0x9e>
            mem = 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	61bb      	str	r3, [r7, #24]
 800f120:	e001      	b.n	800f126 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800f122:	2300      	movs	r3, #0
 800f124:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d10c      	bne.n	800f146 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	4b12      	ldr	r3, [pc, #72]	; (800f17c <osTimerNew+0xf4>)
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	69fa      	ldr	r2, [r7, #28]
 800f13a:	2101      	movs	r1, #1
 800f13c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f13e:	f002 fdea 	bl	8011d16 <xTimerCreateStatic>
 800f142:	6238      	str	r0, [r7, #32]
 800f144:	e00b      	b.n	800f15e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d108      	bne.n	800f15e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f14c:	4b0b      	ldr	r3, [pc, #44]	; (800f17c <osTimerNew+0xf4>)
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	69fa      	ldr	r2, [r7, #28]
 800f154:	2101      	movs	r1, #1
 800f156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f158:	f002 fdbc 	bl	8011cd4 <xTimerCreate>
 800f15c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d105      	bne.n	800f170 <osTimerNew+0xe8>
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d002      	beq.n	800f170 <osTimerNew+0xe8>
        vPortFree (callb);
 800f16a:	6978      	ldr	r0, [r7, #20]
 800f16c:	f003 fc90 	bl	8012a90 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f170:	6a3b      	ldr	r3, [r7, #32]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3728      	adds	r7, #40	; 0x28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	0800f05d 	.word	0x0800f05d

0800f180 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f180:	b580      	push	{r7, lr}
 800f182:	b088      	sub	sp, #32
 800f184:	af02      	add	r7, sp, #8
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f18e:	f3ef 8305 	mrs	r3, IPSR
 800f192:	60fb      	str	r3, [r7, #12]
  return(result);
 800f194:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f196:	2b00      	cmp	r3, #0
 800f198:	d003      	beq.n	800f1a2 <osTimerStart+0x22>
    stat = osErrorISR;
 800f19a:	f06f 0305 	mvn.w	r3, #5
 800f19e:	617b      	str	r3, [r7, #20]
 800f1a0:	e017      	b.n	800f1d2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d103      	bne.n	800f1b0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f1a8:	f06f 0303 	mvn.w	r3, #3
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	e010      	b.n	800f1d2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	2104      	movs	r1, #4
 800f1ba:	6938      	ldr	r0, [r7, #16]
 800f1bc:	f002 fe24 	bl	8011e08 <xTimerGenericCommand>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d102      	bne.n	800f1cc <osTimerStart+0x4c>
      stat = osOK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	e002      	b.n	800f1d2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f1cc:	f06f 0302 	mvn.w	r3, #2
 800f1d0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f1d2:	697b      	ldr	r3, [r7, #20]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3718      	adds	r7, #24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1e8:	f3ef 8305 	mrs	r3, IPSR
 800f1ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800f1ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d003      	beq.n	800f1fc <osTimerDelete+0x20>
    stat = osErrorISR;
 800f1f4:	f06f 0305 	mvn.w	r3, #5
 800f1f8:	617b      	str	r3, [r7, #20]
 800f1fa:	e01e      	b.n	800f23a <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d103      	bne.n	800f20a <osTimerDelete+0x2e>
    stat = osErrorParameter;
 800f202:	f06f 0303 	mvn.w	r3, #3
 800f206:	617b      	str	r3, [r7, #20]
 800f208:	e017      	b.n	800f23a <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f20a:	6938      	ldr	r0, [r7, #16]
 800f20c:	f003 f902 	bl	8012414 <pvTimerGetTimerID>
 800f210:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 800f212:	2300      	movs	r3, #0
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	2300      	movs	r3, #0
 800f218:	2200      	movs	r2, #0
 800f21a:	2105      	movs	r1, #5
 800f21c:	6938      	ldr	r0, [r7, #16]
 800f21e:	f002 fdf3 	bl	8011e08 <xTimerGenericCommand>
 800f222:	4603      	mov	r3, r0
 800f224:	2b01      	cmp	r3, #1
 800f226:	d105      	bne.n	800f234 <osTimerDelete+0x58>
      vPortFree (callb);
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f003 fc31 	bl	8012a90 <vPortFree>
      stat = osOK;
 800f22e:	2300      	movs	r3, #0
 800f230:	617b      	str	r3, [r7, #20]
 800f232:	e002      	b.n	800f23a <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 800f234:	f06f 0302 	mvn.w	r3, #2
 800f238:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800f23a:	697b      	ldr	r3, [r7, #20]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f244:	b580      	push	{r7, lr}
 800f246:	b088      	sub	sp, #32
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f24c:	2300      	movs	r3, #0
 800f24e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f250:	f3ef 8305 	mrs	r3, IPSR
 800f254:	60bb      	str	r3, [r7, #8]
  return(result);
 800f256:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d174      	bne.n	800f346 <osMutexNew+0x102>
    if (attr != NULL) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <osMutexNew+0x26>
      type = attr->attr_bits;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	61bb      	str	r3, [r7, #24]
 800f268:	e001      	b.n	800f26e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	f003 0301 	and.w	r3, r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <osMutexNew+0x3a>
      rmtx = 1U;
 800f278:	2301      	movs	r3, #1
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	e001      	b.n	800f282 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f27e:	2300      	movs	r3, #0
 800f280:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	f003 0308 	and.w	r3, r3, #8
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d15c      	bne.n	800f346 <osMutexNew+0x102>
      mem = -1;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f290:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d015      	beq.n	800f2c4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d006      	beq.n	800f2ae <osMutexNew+0x6a>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	2b4f      	cmp	r3, #79	; 0x4f
 800f2a6:	d902      	bls.n	800f2ae <osMutexNew+0x6a>
          mem = 1;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	e00c      	b.n	800f2c8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d108      	bne.n	800f2c8 <osMutexNew+0x84>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <osMutexNew+0x84>
            mem = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	613b      	str	r3, [r7, #16]
 800f2c2:	e001      	b.n	800f2c8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d112      	bne.n	800f2f4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d007      	beq.n	800f2e4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	2004      	movs	r0, #4
 800f2dc:	f000 fc57 	bl	800fb8e <xQueueCreateMutexStatic>
 800f2e0:	61f8      	str	r0, [r7, #28]
 800f2e2:	e016      	b.n	800f312 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	f000 fc4f 	bl	800fb8e <xQueueCreateMutexStatic>
 800f2f0:	61f8      	str	r0, [r7, #28]
 800f2f2:	e00e      	b.n	800f312 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10b      	bne.n	800f312 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d004      	beq.n	800f30a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f300:	2004      	movs	r0, #4
 800f302:	f000 fc2c 	bl	800fb5e <xQueueCreateMutex>
 800f306:	61f8      	str	r0, [r7, #28]
 800f308:	e003      	b.n	800f312 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f30a:	2001      	movs	r0, #1
 800f30c:	f000 fc27 	bl	800fb5e <xQueueCreateMutex>
 800f310:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d00c      	beq.n	800f332 <osMutexNew+0xee>
        if (attr != NULL) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d003      	beq.n	800f326 <osMutexNew+0xe2>
          name = attr->name;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	e001      	b.n	800f32a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f326:	2300      	movs	r3, #0
 800f328:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f32a:	68f9      	ldr	r1, [r7, #12]
 800f32c:	69f8      	ldr	r0, [r7, #28]
 800f32e:	f001 fa03 	bl	8010738 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d006      	beq.n	800f346 <osMutexNew+0x102>
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d003      	beq.n	800f346 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	f043 0301 	orr.w	r3, r3, #1
 800f344:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f346:	69fb      	ldr	r3, [r7, #28]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3720      	adds	r7, #32
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <osSemaphoreAcquire>:
  }

  return ((osSemaphoreId_t)hSemaphore);
}

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d103      	bne.n	800f370 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f368:	f06f 0303 	mvn.w	r3, #3
 800f36c:	617b      	str	r3, [r7, #20]
 800f36e:	e039      	b.n	800f3e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f370:	f3ef 8305 	mrs	r3, IPSR
 800f374:	60fb      	str	r3, [r7, #12]
  return(result);
 800f376:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d022      	beq.n	800f3c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d003      	beq.n	800f38a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f382:	f06f 0303 	mvn.w	r3, #3
 800f386:	617b      	str	r3, [r7, #20]
 800f388:	e02c      	b.n	800f3e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f38a:	2300      	movs	r3, #0
 800f38c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f38e:	f107 0308 	add.w	r3, r7, #8
 800f392:	461a      	mov	r2, r3
 800f394:	2100      	movs	r1, #0
 800f396:	6938      	ldr	r0, [r7, #16]
 800f398:	f001 f826 	bl	80103e8 <xQueueReceiveFromISR>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d003      	beq.n	800f3aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f3a2:	f06f 0302 	mvn.w	r3, #2
 800f3a6:	617b      	str	r3, [r7, #20]
 800f3a8:	e01c      	b.n	800f3e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d019      	beq.n	800f3e4 <osSemaphoreAcquire+0x94>
 800f3b0:	4b0f      	ldr	r3, [pc, #60]	; (800f3f0 <osSemaphoreAcquire+0xa0>)
 800f3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	e010      	b.n	800f3e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f3c2:	6839      	ldr	r1, [r7, #0]
 800f3c4:	6938      	ldr	r0, [r7, #16]
 800f3c6:	f000 ff03 	bl	80101d0 <xQueueSemaphoreTake>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d009      	beq.n	800f3e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d003      	beq.n	800f3de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f3d6:	f06f 0301 	mvn.w	r3, #1
 800f3da:	617b      	str	r3, [r7, #20]
 800f3dc:	e002      	b.n	800f3e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f3de:	f06f 0302 	mvn.w	r3, #2
 800f3e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f3e4:	697b      	ldr	r3, [r7, #20]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b086      	sub	sp, #24
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f400:	2300      	movs	r3, #0
 800f402:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d103      	bne.n	800f412 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f40a:	f06f 0303 	mvn.w	r3, #3
 800f40e:	617b      	str	r3, [r7, #20]
 800f410:	e02c      	b.n	800f46c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f412:	f3ef 8305 	mrs	r3, IPSR
 800f416:	60fb      	str	r3, [r7, #12]
  return(result);
 800f418:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d01a      	beq.n	800f454 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f41e:	2300      	movs	r3, #0
 800f420:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f422:	f107 0308 	add.w	r3, r7, #8
 800f426:	4619      	mov	r1, r3
 800f428:	6938      	ldr	r0, [r7, #16]
 800f42a:	f000 fd64 	bl	800fef6 <xQueueGiveFromISR>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b01      	cmp	r3, #1
 800f432:	d003      	beq.n	800f43c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f434:	f06f 0302 	mvn.w	r3, #2
 800f438:	617b      	str	r3, [r7, #20]
 800f43a:	e017      	b.n	800f46c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d014      	beq.n	800f46c <osSemaphoreRelease+0x78>
 800f442:	4b0d      	ldr	r3, [pc, #52]	; (800f478 <osSemaphoreRelease+0x84>)
 800f444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	e00b      	b.n	800f46c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f454:	2300      	movs	r3, #0
 800f456:	2200      	movs	r2, #0
 800f458:	2100      	movs	r1, #0
 800f45a:	6938      	ldr	r0, [r7, #16]
 800f45c:	f000 fbb2 	bl	800fbc4 <xQueueGenericSend>
 800f460:	4603      	mov	r3, r0
 800f462:	2b01      	cmp	r3, #1
 800f464:	d002      	beq.n	800f46c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f466:	f06f 0302 	mvn.w	r3, #2
 800f46a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f46c:	697b      	ldr	r3, [r7, #20]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	e000ed04 	.word	0xe000ed04

0800f47c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08a      	sub	sp, #40	; 0x28
 800f480:	af02      	add	r7, sp, #8
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f48c:	f3ef 8305 	mrs	r3, IPSR
 800f490:	613b      	str	r3, [r7, #16]
  return(result);
 800f492:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f494:	2b00      	cmp	r3, #0
 800f496:	d15f      	bne.n	800f558 <osMessageQueueNew+0xdc>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d05c      	beq.n	800f558 <osMessageQueueNew+0xdc>
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d059      	beq.n	800f558 <osMessageQueueNew+0xdc>
    mem = -1;
 800f4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d029      	beq.n	800f504 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d012      	beq.n	800f4de <osMessageQueueNew+0x62>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	2b4f      	cmp	r3, #79	; 0x4f
 800f4be:	d90e      	bls.n	800f4de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00a      	beq.n	800f4de <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	695a      	ldr	r2, [r3, #20]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	fb01 f303 	mul.w	r3, r1, r3
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d302      	bcc.n	800f4de <osMessageQueueNew+0x62>
        mem = 1;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	61bb      	str	r3, [r7, #24]
 800f4dc:	e014      	b.n	800f508 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d110      	bne.n	800f508 <osMessageQueueNew+0x8c>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10c      	bne.n	800f508 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d108      	bne.n	800f508 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d104      	bne.n	800f508 <osMessageQueueNew+0x8c>
          mem = 0;
 800f4fe:	2300      	movs	r3, #0
 800f500:	61bb      	str	r3, [r7, #24]
 800f502:	e001      	b.n	800f508 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f504:	2300      	movs	r3, #0
 800f506:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d10b      	bne.n	800f526 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	691a      	ldr	r2, [r3, #16]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	2100      	movs	r1, #0
 800f518:	9100      	str	r1, [sp, #0]
 800f51a:	68b9      	ldr	r1, [r7, #8]
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f000 fa2f 	bl	800f980 <xQueueGenericCreateStatic>
 800f522:	61f8      	str	r0, [r7, #28]
 800f524:	e008      	b.n	800f538 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f52c:	2200      	movs	r2, #0
 800f52e:	68b9      	ldr	r1, [r7, #8]
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f000 fa9d 	bl	800fa70 <xQueueGenericCreate>
 800f536:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00c      	beq.n	800f558 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d003      	beq.n	800f54c <osMessageQueueNew+0xd0>
        name = attr->name;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	617b      	str	r3, [r7, #20]
 800f54a:	e001      	b.n	800f550 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f54c:	2300      	movs	r3, #0
 800f54e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f550:	6979      	ldr	r1, [r7, #20]
 800f552:	69f8      	ldr	r0, [r7, #28]
 800f554:	f001 f8f0 	bl	8010738 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f558:	69fb      	ldr	r3, [r7, #28]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3720      	adds	r7, #32
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
	...

0800f564 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	603b      	str	r3, [r7, #0]
 800f570:	4613      	mov	r3, r2
 800f572:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f578:	2300      	movs	r3, #0
 800f57a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f57c:	f3ef 8305 	mrs	r3, IPSR
 800f580:	617b      	str	r3, [r7, #20]
  return(result);
 800f582:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f584:	2b00      	cmp	r3, #0
 800f586:	d028      	beq.n	800f5da <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d005      	beq.n	800f59a <osMessageQueuePut+0x36>
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d002      	beq.n	800f59a <osMessageQueuePut+0x36>
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d003      	beq.n	800f5a2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f59a:	f06f 0303 	mvn.w	r3, #3
 800f59e:	61fb      	str	r3, [r7, #28]
 800f5a0:	e038      	b.n	800f614 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f5a6:	f107 0210 	add.w	r2, r7, #16
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	68b9      	ldr	r1, [r7, #8]
 800f5ae:	69b8      	ldr	r0, [r7, #24]
 800f5b0:	f000 fc06 	bl	800fdc0 <xQueueGenericSendFromISR>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d003      	beq.n	800f5c2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f5ba:	f06f 0302 	mvn.w	r3, #2
 800f5be:	61fb      	str	r3, [r7, #28]
 800f5c0:	e028      	b.n	800f614 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d025      	beq.n	800f614 <osMessageQueuePut+0xb0>
 800f5c8:	4b15      	ldr	r3, [pc, #84]	; (800f620 <osMessageQueuePut+0xbc>)
 800f5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	e01c      	b.n	800f614 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d002      	beq.n	800f5e6 <osMessageQueuePut+0x82>
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d103      	bne.n	800f5ee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f5e6:	f06f 0303 	mvn.w	r3, #3
 800f5ea:	61fb      	str	r3, [r7, #28]
 800f5ec:	e012      	b.n	800f614 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	683a      	ldr	r2, [r7, #0]
 800f5f2:	68b9      	ldr	r1, [r7, #8]
 800f5f4:	69b8      	ldr	r0, [r7, #24]
 800f5f6:	f000 fae5 	bl	800fbc4 <xQueueGenericSend>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d009      	beq.n	800f614 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d003      	beq.n	800f60e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f606:	f06f 0301 	mvn.w	r3, #1
 800f60a:	61fb      	str	r3, [r7, #28]
 800f60c:	e002      	b.n	800f614 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f60e:	f06f 0302 	mvn.w	r3, #2
 800f612:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f614:	69fb      	ldr	r3, [r7, #28]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3720      	adds	r7, #32
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	e000ed04 	.word	0xe000ed04

0800f624 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f624:	b580      	push	{r7, lr}
 800f626:	b088      	sub	sp, #32
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f636:	2300      	movs	r3, #0
 800f638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f63a:	f3ef 8305 	mrs	r3, IPSR
 800f63e:	617b      	str	r3, [r7, #20]
  return(result);
 800f640:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f642:	2b00      	cmp	r3, #0
 800f644:	d028      	beq.n	800f698 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d005      	beq.n	800f658 <osMessageQueueGet+0x34>
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d002      	beq.n	800f658 <osMessageQueueGet+0x34>
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f658:	f06f 0303 	mvn.w	r3, #3
 800f65c:	61fb      	str	r3, [r7, #28]
 800f65e:	e037      	b.n	800f6d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f660:	2300      	movs	r3, #0
 800f662:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f664:	f107 0310 	add.w	r3, r7, #16
 800f668:	461a      	mov	r2, r3
 800f66a:	68b9      	ldr	r1, [r7, #8]
 800f66c:	69b8      	ldr	r0, [r7, #24]
 800f66e:	f000 febb 	bl	80103e8 <xQueueReceiveFromISR>
 800f672:	4603      	mov	r3, r0
 800f674:	2b01      	cmp	r3, #1
 800f676:	d003      	beq.n	800f680 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f678:	f06f 0302 	mvn.w	r3, #2
 800f67c:	61fb      	str	r3, [r7, #28]
 800f67e:	e027      	b.n	800f6d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d024      	beq.n	800f6d0 <osMessageQueueGet+0xac>
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <osMessageQueueGet+0xb8>)
 800f688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	e01b      	b.n	800f6d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d002      	beq.n	800f6a4 <osMessageQueueGet+0x80>
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d103      	bne.n	800f6ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f6a4:	f06f 0303 	mvn.w	r3, #3
 800f6a8:	61fb      	str	r3, [r7, #28]
 800f6aa:	e011      	b.n	800f6d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	69b8      	ldr	r0, [r7, #24]
 800f6b2:	f000 fcad 	bl	8010010 <xQueueReceive>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d009      	beq.n	800f6d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d003      	beq.n	800f6ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f6c2:	f06f 0301 	mvn.w	r3, #1
 800f6c6:	61fb      	str	r3, [r7, #28]
 800f6c8:	e002      	b.n	800f6d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f6ca:	f06f 0302 	mvn.w	r3, #2
 800f6ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f6d0:	69fb      	ldr	r3, [r7, #28]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3720      	adds	r7, #32
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	e000ed04 	.word	0xe000ed04

0800f6e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	4a07      	ldr	r2, [pc, #28]	; (800f70c <vApplicationGetIdleTaskMemory+0x2c>)
 800f6f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	4a06      	ldr	r2, [pc, #24]	; (800f710 <vApplicationGetIdleTaskMemory+0x30>)
 800f6f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2280      	movs	r2, #128	; 0x80
 800f6fc:	601a      	str	r2, [r3, #0]
}
 800f6fe:	bf00      	nop
 800f700:	3714      	adds	r7, #20
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr
 800f70a:	bf00      	nop
 800f70c:	20000574 	.word	0x20000574
 800f710:	20000630 	.word	0x20000630

0800f714 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	4a07      	ldr	r2, [pc, #28]	; (800f740 <vApplicationGetTimerTaskMemory+0x2c>)
 800f724:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	4a06      	ldr	r2, [pc, #24]	; (800f744 <vApplicationGetTimerTaskMemory+0x30>)
 800f72a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f732:	601a      	str	r2, [r3, #0]
}
 800f734:	bf00      	nop
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	20000830 	.word	0x20000830
 800f744:	200008ec 	.word	0x200008ec

0800f748 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f103 0208 	add.w	r2, r3, #8
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f760:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f103 0208 	add.w	r2, r3, #8
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f103 0208 	add.w	r2, r3, #8
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f77c:	bf00      	nop
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2200      	movs	r2, #0
 800f794:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f796:	bf00      	nop
 800f798:	370c      	adds	r7, #12
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr

0800f7a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7a2:	b480      	push	{r7}
 800f7a4:	b085      	sub	sp, #20
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	689a      	ldr	r2, [r3, #8]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	1c5a      	adds	r2, r3, #1
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	601a      	str	r2, [r3, #0]
}
 800f7de:	bf00      	nop
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b085      	sub	sp, #20
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f800:	d103      	bne.n	800f80a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	691b      	ldr	r3, [r3, #16]
 800f806:	60fb      	str	r3, [r7, #12]
 800f808:	e00c      	b.n	800f824 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	3308      	adds	r3, #8
 800f80e:	60fb      	str	r3, [r7, #12]
 800f810:	e002      	b.n	800f818 <vListInsert+0x2e>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	429a      	cmp	r2, r3
 800f822:	d2f6      	bcs.n	800f812 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	685a      	ldr	r2, [r3, #4]
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	601a      	str	r2, [r3, #0]
}
 800f850:	bf00      	nop
 800f852:	3714      	adds	r7, #20
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	691b      	ldr	r3, [r3, #16]
 800f868:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	6892      	ldr	r2, [r2, #8]
 800f872:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	6852      	ldr	r2, [r2, #4]
 800f87c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	429a      	cmp	r2, r3
 800f886:	d103      	bne.n	800f890 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	689a      	ldr	r2, [r3, #8]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	1e5a      	subs	r2, r3, #1
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3714      	adds	r7, #20
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10a      	bne.n	800f8da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f8da:	f002 feeb 	bl	80126b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8e6:	68f9      	ldr	r1, [r7, #12]
 800f8e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f8ea:	fb01 f303 	mul.w	r3, r1, r3
 800f8ee:	441a      	add	r2, r3
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f90a:	3b01      	subs	r3, #1
 800f90c:	68f9      	ldr	r1, [r7, #12]
 800f90e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f910:	fb01 f303 	mul.w	r3, r1, r3
 800f914:	441a      	add	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	22ff      	movs	r2, #255	; 0xff
 800f91e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	22ff      	movs	r2, #255	; 0xff
 800f926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d114      	bne.n	800f95a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d01a      	beq.n	800f96e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	3310      	adds	r3, #16
 800f93c:	4618      	mov	r0, r3
 800f93e:	f001 fbdf 	bl	8011100 <xTaskRemoveFromEventList>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d012      	beq.n	800f96e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f948:	4b0c      	ldr	r3, [pc, #48]	; (800f97c <xQueueGenericReset+0xcc>)
 800f94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f94e:	601a      	str	r2, [r3, #0]
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	e009      	b.n	800f96e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	3310      	adds	r3, #16
 800f95e:	4618      	mov	r0, r3
 800f960:	f7ff fef2 	bl	800f748 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	3324      	adds	r3, #36	; 0x24
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff feed 	bl	800f748 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f96e:	f002 fed1 	bl	8012714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f972:	2301      	movs	r3, #1
}
 800f974:	4618      	mov	r0, r3
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	e000ed04 	.word	0xe000ed04

0800f980 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f980:	b580      	push	{r7, lr}
 800f982:	b08e      	sub	sp, #56	; 0x38
 800f984:	af02      	add	r7, sp, #8
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
 800f98c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10a      	bne.n	800f9aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f998:	f383 8811 	msr	BASEPRI, r3
 800f99c:	f3bf 8f6f 	isb	sy
 800f9a0:	f3bf 8f4f 	dsb	sy
 800f9a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9a6:	bf00      	nop
 800f9a8:	e7fe      	b.n	800f9a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10a      	bne.n	800f9c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <xQueueGenericCreateStatic+0x52>
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d001      	beq.n	800f9d6 <xQueueGenericCreateStatic+0x56>
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	e000      	b.n	800f9d8 <xQueueGenericCreateStatic+0x58>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10a      	bne.n	800f9f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e0:	f383 8811 	msr	BASEPRI, r3
 800f9e4:	f3bf 8f6f 	isb	sy
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	623b      	str	r3, [r7, #32]
}
 800f9ee:	bf00      	nop
 800f9f0:	e7fe      	b.n	800f9f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d102      	bne.n	800f9fe <xQueueGenericCreateStatic+0x7e>
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d101      	bne.n	800fa02 <xQueueGenericCreateStatic+0x82>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e000      	b.n	800fa04 <xQueueGenericCreateStatic+0x84>
 800fa02:	2300      	movs	r3, #0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d10a      	bne.n	800fa1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0c:	f383 8811 	msr	BASEPRI, r3
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	61fb      	str	r3, [r7, #28]
}
 800fa1a:	bf00      	nop
 800fa1c:	e7fe      	b.n	800fa1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa1e:	2350      	movs	r3, #80	; 0x50
 800fa20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	2b50      	cmp	r3, #80	; 0x50
 800fa26:	d00a      	beq.n	800fa3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2c:	f383 8811 	msr	BASEPRI, r3
 800fa30:	f3bf 8f6f 	isb	sy
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	61bb      	str	r3, [r7, #24]
}
 800fa3a:	bf00      	nop
 800fa3c:	e7fe      	b.n	800fa3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fa3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00d      	beq.n	800fa66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	68b9      	ldr	r1, [r7, #8]
 800fa60:	68f8      	ldr	r0, [r7, #12]
 800fa62:	f000 f83f 	bl	800fae4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3730      	adds	r7, #48	; 0x30
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08a      	sub	sp, #40	; 0x28
 800fa74:	af02      	add	r7, sp, #8
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d10a      	bne.n	800fa9a <xQueueGenericCreate+0x2a>
	__asm volatile
 800fa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa88:	f383 8811 	msr	BASEPRI, r3
 800fa8c:	f3bf 8f6f 	isb	sy
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	613b      	str	r3, [r7, #16]
}
 800fa96:	bf00      	nop
 800fa98:	e7fe      	b.n	800fa98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	fb02 f303 	mul.w	r3, r2, r3
 800faa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	3350      	adds	r3, #80	; 0x50
 800faa8:	4618      	mov	r0, r3
 800faaa:	f002 ff25 	bl	80128f8 <pvPortMalloc>
 800faae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d011      	beq.n	800fada <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	3350      	adds	r3, #80	; 0x50
 800fabe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fac8:	79fa      	ldrb	r2, [r7, #7]
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	9300      	str	r3, [sp, #0]
 800face:	4613      	mov	r3, r2
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	68b9      	ldr	r1, [r7, #8]
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f000 f805 	bl	800fae4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fada:	69bb      	ldr	r3, [r7, #24]
	}
 800fadc:	4618      	mov	r0, r3
 800fade:	3720      	adds	r7, #32
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
 800faf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d103      	bne.n	800fb00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	69ba      	ldr	r2, [r7, #24]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	e002      	b.n	800fb06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fb12:	2101      	movs	r1, #1
 800fb14:	69b8      	ldr	r0, [r7, #24]
 800fb16:	f7ff fecb 	bl	800f8b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	78fa      	ldrb	r2, [r7, #3]
 800fb1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fb22:	bf00      	nop
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b082      	sub	sp, #8
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00e      	beq.n	800fb56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	2100      	movs	r1, #0
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f837 	bl	800fbc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fb56:	bf00      	nop
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b086      	sub	sp, #24
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	4603      	mov	r3, r0
 800fb66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	617b      	str	r3, [r7, #20]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fb70:	79fb      	ldrb	r3, [r7, #7]
 800fb72:	461a      	mov	r2, r3
 800fb74:	6939      	ldr	r1, [r7, #16]
 800fb76:	6978      	ldr	r0, [r7, #20]
 800fb78:	f7ff ff7a 	bl	800fa70 <xQueueGenericCreate>
 800fb7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f7ff ffd3 	bl	800fb2a <prvInitialiseMutex>

		return xNewQueue;
 800fb84:	68fb      	ldr	r3, [r7, #12]
	}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b088      	sub	sp, #32
 800fb92:	af02      	add	r7, sp, #8
 800fb94:	4603      	mov	r3, r0
 800fb96:	6039      	str	r1, [r7, #0]
 800fb98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	617b      	str	r3, [r7, #20]
 800fb9e:	2300      	movs	r3, #0
 800fba0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	6939      	ldr	r1, [r7, #16]
 800fbac:	6978      	ldr	r0, [r7, #20]
 800fbae:	f7ff fee7 	bl	800f980 <xQueueGenericCreateStatic>
 800fbb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7ff ffb8 	bl	800fb2a <prvInitialiseMutex>

		return xNewQueue;
 800fbba:	68fb      	ldr	r3, [r7, #12]
	}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b08e      	sub	sp, #56	; 0x38
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
 800fbd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10a      	bne.n	800fbf6 <xQueueGenericSend+0x32>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fbf2:	bf00      	nop
 800fbf4:	e7fe      	b.n	800fbf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d103      	bne.n	800fc04 <xQueueGenericSend+0x40>
 800fbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d101      	bne.n	800fc08 <xQueueGenericSend+0x44>
 800fc04:	2301      	movs	r3, #1
 800fc06:	e000      	b.n	800fc0a <xQueueGenericSend+0x46>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d10a      	bne.n	800fc24 <xQueueGenericSend+0x60>
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc20:	bf00      	nop
 800fc22:	e7fe      	b.n	800fc22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d103      	bne.n	800fc32 <xQueueGenericSend+0x6e>
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d101      	bne.n	800fc36 <xQueueGenericSend+0x72>
 800fc32:	2301      	movs	r3, #1
 800fc34:	e000      	b.n	800fc38 <xQueueGenericSend+0x74>
 800fc36:	2300      	movs	r3, #0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10a      	bne.n	800fc52 <xQueueGenericSend+0x8e>
	__asm volatile
 800fc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc40:	f383 8811 	msr	BASEPRI, r3
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	623b      	str	r3, [r7, #32]
}
 800fc4e:	bf00      	nop
 800fc50:	e7fe      	b.n	800fc50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc52:	f001 fc17 	bl	8011484 <xTaskGetSchedulerState>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d102      	bne.n	800fc62 <xQueueGenericSend+0x9e>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <xQueueGenericSend+0xa2>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <xQueueGenericSend+0xa4>
 800fc66:	2300      	movs	r3, #0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10a      	bne.n	800fc82 <xQueueGenericSend+0xbe>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	61fb      	str	r3, [r7, #28]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc82:	f002 fd17 	bl	80126b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d302      	bcc.n	800fc98 <xQueueGenericSend+0xd4>
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d129      	bne.n	800fcec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc98:	683a      	ldr	r2, [r7, #0]
 800fc9a:	68b9      	ldr	r1, [r7, #8]
 800fc9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc9e:	f000 fc3b 	bl	8010518 <prvCopyDataToQueue>
 800fca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d010      	beq.n	800fcce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	3324      	adds	r3, #36	; 0x24
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f001 fa25 	bl	8011100 <xTaskRemoveFromEventList>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d013      	beq.n	800fce4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fcbc:	4b3f      	ldr	r3, [pc, #252]	; (800fdbc <xQueueGenericSend+0x1f8>)
 800fcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	e00a      	b.n	800fce4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d007      	beq.n	800fce4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fcd4:	4b39      	ldr	r3, [pc, #228]	; (800fdbc <xQueueGenericSend+0x1f8>)
 800fcd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fce4:	f002 fd16 	bl	8012714 <vPortExitCritical>
				return pdPASS;
 800fce8:	2301      	movs	r3, #1
 800fcea:	e063      	b.n	800fdb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d103      	bne.n	800fcfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fcf2:	f002 fd0f 	bl	8012714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	e05c      	b.n	800fdb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d106      	bne.n	800fd0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd00:	f107 0314 	add.w	r3, r7, #20
 800fd04:	4618      	mov	r0, r3
 800fd06:	f001 fa5f 	bl	80111c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd0e:	f002 fd01 	bl	8012714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd12:	f000 ffcb 	bl	8010cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd16:	f002 fccd 	bl	80126b4 <vPortEnterCritical>
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd20:	b25b      	sxtb	r3, r3
 800fd22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd26:	d103      	bne.n	800fd30 <xQueueGenericSend+0x16c>
 800fd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd36:	b25b      	sxtb	r3, r3
 800fd38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd3c:	d103      	bne.n	800fd46 <xQueueGenericSend+0x182>
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd46:	f002 fce5 	bl	8012714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd4a:	1d3a      	adds	r2, r7, #4
 800fd4c:	f107 0314 	add.w	r3, r7, #20
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f001 fa4e 	bl	80111f4 <xTaskCheckForTimeOut>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d124      	bne.n	800fda8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fd5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd60:	f000 fcd2 	bl	8010708 <prvIsQueueFull>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d018      	beq.n	800fd9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	3310      	adds	r3, #16
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	4611      	mov	r1, r2
 800fd72:	4618      	mov	r0, r3
 800fd74:	f001 f974 	bl	8011060 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fd78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd7a:	f000 fc5d 	bl	8010638 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fd7e:	f000 ffa3 	bl	8010cc8 <xTaskResumeAll>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	f47f af7c 	bne.w	800fc82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fd8a:	4b0c      	ldr	r3, [pc, #48]	; (800fdbc <xQueueGenericSend+0x1f8>)
 800fd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	f3bf 8f4f 	dsb	sy
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	e772      	b.n	800fc82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fd9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd9e:	f000 fc4b 	bl	8010638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fda2:	f000 ff91 	bl	8010cc8 <xTaskResumeAll>
 800fda6:	e76c      	b.n	800fc82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fda8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdaa:	f000 fc45 	bl	8010638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdae:	f000 ff8b 	bl	8010cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fdb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3738      	adds	r7, #56	; 0x38
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	e000ed04 	.word	0xe000ed04

0800fdc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b090      	sub	sp, #64	; 0x40
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10a      	bne.n	800fdee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fddc:	f383 8811 	msr	BASEPRI, r3
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	f3bf 8f4f 	dsb	sy
 800fde8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fdea:	bf00      	nop
 800fdec:	e7fe      	b.n	800fdec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d103      	bne.n	800fdfc <xQueueGenericSendFromISR+0x3c>
 800fdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d101      	bne.n	800fe00 <xQueueGenericSendFromISR+0x40>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e000      	b.n	800fe02 <xQueueGenericSendFromISR+0x42>
 800fe00:	2300      	movs	r3, #0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10a      	bne.n	800fe1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fe06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe18:	bf00      	nop
 800fe1a:	e7fe      	b.n	800fe1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d103      	bne.n	800fe2a <xQueueGenericSendFromISR+0x6a>
 800fe22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d101      	bne.n	800fe2e <xQueueGenericSendFromISR+0x6e>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e000      	b.n	800fe30 <xQueueGenericSendFromISR+0x70>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d10a      	bne.n	800fe4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fe34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	623b      	str	r3, [r7, #32]
}
 800fe46:	bf00      	nop
 800fe48:	e7fe      	b.n	800fe48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe4a:	f002 fd15 	bl	8012878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fe4e:	f3ef 8211 	mrs	r2, BASEPRI
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	61fa      	str	r2, [r7, #28]
 800fe64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fe66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d302      	bcc.n	800fe7c <xQueueGenericSendFromISR+0xbc>
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d12f      	bne.n	800fedc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	68b9      	ldr	r1, [r7, #8]
 800fe90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe92:	f000 fb41 	bl	8010518 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fe9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe9e:	d112      	bne.n	800fec6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d016      	beq.n	800fed6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	3324      	adds	r3, #36	; 0x24
 800feac:	4618      	mov	r0, r3
 800feae:	f001 f927 	bl	8011100 <xTaskRemoveFromEventList>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d00e      	beq.n	800fed6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00b      	beq.n	800fed6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2201      	movs	r2, #1
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	e007      	b.n	800fed6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fec6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800feca:	3301      	adds	r3, #1
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	b25a      	sxtb	r2, r3
 800fed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fed6:	2301      	movs	r3, #1
 800fed8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800feda:	e001      	b.n	800fee0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fedc:	2300      	movs	r3, #0
 800fede:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800feea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800feec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3740      	adds	r7, #64	; 0x40
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b08e      	sub	sp, #56	; 0x38
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
 800fefe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d10a      	bne.n	800ff20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ff0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	623b      	str	r3, [r7, #32]
}
 800ff1c:	bf00      	nop
 800ff1e:	e7fe      	b.n	800ff1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00a      	beq.n	800ff3e <xQueueGiveFromISR+0x48>
	__asm volatile
 800ff28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff2c:	f383 8811 	msr	BASEPRI, r3
 800ff30:	f3bf 8f6f 	isb	sy
 800ff34:	f3bf 8f4f 	dsb	sy
 800ff38:	61fb      	str	r3, [r7, #28]
}
 800ff3a:	bf00      	nop
 800ff3c:	e7fe      	b.n	800ff3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ff3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d103      	bne.n	800ff4e <xQueueGiveFromISR+0x58>
 800ff46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d101      	bne.n	800ff52 <xQueueGiveFromISR+0x5c>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e000      	b.n	800ff54 <xQueueGiveFromISR+0x5e>
 800ff52:	2300      	movs	r3, #0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10a      	bne.n	800ff6e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	61bb      	str	r3, [r7, #24]
}
 800ff6a:	bf00      	nop
 800ff6c:	e7fe      	b.n	800ff6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff6e:	f002 fc83 	bl	8012878 <vPortValidateInterruptPriority>
	__asm volatile
 800ff72:	f3ef 8211 	mrs	r2, BASEPRI
 800ff76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	617a      	str	r2, [r7, #20]
 800ff88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ff8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ff94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d22b      	bcs.n	800fff6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ffa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffaa:	1c5a      	adds	r2, r3, #1
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ffb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ffb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffb8:	d112      	bne.n	800ffe0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d016      	beq.n	800fff0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	3324      	adds	r3, #36	; 0x24
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f001 f89a 	bl	8011100 <xTaskRemoveFromEventList>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d00e      	beq.n	800fff0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00b      	beq.n	800fff0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	e007      	b.n	800fff0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ffe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	b25a      	sxtb	r2, r3
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fff0:	2301      	movs	r3, #1
 800fff2:	637b      	str	r3, [r7, #52]	; 0x34
 800fff4:	e001      	b.n	800fffa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fff6:	2300      	movs	r3, #0
 800fff8:	637b      	str	r3, [r7, #52]	; 0x34
 800fffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f383 8811 	msr	BASEPRI, r3
}
 8010004:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010008:	4618      	mov	r0, r3
 801000a:	3738      	adds	r7, #56	; 0x38
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b08c      	sub	sp, #48	; 0x30
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801001c:	2300      	movs	r3, #0
 801001e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010026:	2b00      	cmp	r3, #0
 8010028:	d10a      	bne.n	8010040 <xQueueReceive+0x30>
	__asm volatile
 801002a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	623b      	str	r3, [r7, #32]
}
 801003c:	bf00      	nop
 801003e:	e7fe      	b.n	801003e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d103      	bne.n	801004e <xQueueReceive+0x3e>
 8010046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <xQueueReceive+0x42>
 801004e:	2301      	movs	r3, #1
 8010050:	e000      	b.n	8010054 <xQueueReceive+0x44>
 8010052:	2300      	movs	r3, #0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10a      	bne.n	801006e <xQueueReceive+0x5e>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	61fb      	str	r3, [r7, #28]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801006e:	f001 fa09 	bl	8011484 <xTaskGetSchedulerState>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d102      	bne.n	801007e <xQueueReceive+0x6e>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d101      	bne.n	8010082 <xQueueReceive+0x72>
 801007e:	2301      	movs	r3, #1
 8010080:	e000      	b.n	8010084 <xQueueReceive+0x74>
 8010082:	2300      	movs	r3, #0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10a      	bne.n	801009e <xQueueReceive+0x8e>
	__asm volatile
 8010088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	61bb      	str	r3, [r7, #24]
}
 801009a:	bf00      	nop
 801009c:	e7fe      	b.n	801009c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801009e:	f002 fb09 	bl	80126b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d01f      	beq.n	80100ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100ae:	68b9      	ldr	r1, [r7, #8]
 80100b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100b2:	f000 fa9b 	bl	80105ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00f      	beq.n	80100e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c8:	3310      	adds	r3, #16
 80100ca:	4618      	mov	r0, r3
 80100cc:	f001 f818 	bl	8011100 <xTaskRemoveFromEventList>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d007      	beq.n	80100e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80100d6:	4b3d      	ldr	r3, [pc, #244]	; (80101cc <xQueueReceive+0x1bc>)
 80100d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80100e6:	f002 fb15 	bl	8012714 <vPortExitCritical>
				return pdPASS;
 80100ea:	2301      	movs	r3, #1
 80100ec:	e069      	b.n	80101c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d103      	bne.n	80100fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100f4:	f002 fb0e 	bl	8012714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80100f8:	2300      	movs	r3, #0
 80100fa:	e062      	b.n	80101c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010102:	f107 0310 	add.w	r3, r7, #16
 8010106:	4618      	mov	r0, r3
 8010108:	f001 f85e 	bl	80111c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801010c:	2301      	movs	r3, #1
 801010e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010110:	f002 fb00 	bl	8012714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010114:	f000 fdca 	bl	8010cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010118:	f002 facc 	bl	80126b4 <vPortEnterCritical>
 801011c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010122:	b25b      	sxtb	r3, r3
 8010124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010128:	d103      	bne.n	8010132 <xQueueReceive+0x122>
 801012a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010138:	b25b      	sxtb	r3, r3
 801013a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801013e:	d103      	bne.n	8010148 <xQueueReceive+0x138>
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010142:	2200      	movs	r2, #0
 8010144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010148:	f002 fae4 	bl	8012714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801014c:	1d3a      	adds	r2, r7, #4
 801014e:	f107 0310 	add.w	r3, r7, #16
 8010152:	4611      	mov	r1, r2
 8010154:	4618      	mov	r0, r3
 8010156:	f001 f84d 	bl	80111f4 <xTaskCheckForTimeOut>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d123      	bne.n	80101a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010162:	f000 fabb 	bl	80106dc <prvIsQueueEmpty>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d017      	beq.n	801019c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801016c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016e:	3324      	adds	r3, #36	; 0x24
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	4611      	mov	r1, r2
 8010174:	4618      	mov	r0, r3
 8010176:	f000 ff73 	bl	8011060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801017a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801017c:	f000 fa5c 	bl	8010638 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010180:	f000 fda2 	bl	8010cc8 <xTaskResumeAll>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d189      	bne.n	801009e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801018a:	4b10      	ldr	r3, [pc, #64]	; (80101cc <xQueueReceive+0x1bc>)
 801018c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	e780      	b.n	801009e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801019c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801019e:	f000 fa4b 	bl	8010638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101a2:	f000 fd91 	bl	8010cc8 <xTaskResumeAll>
 80101a6:	e77a      	b.n	801009e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80101a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101aa:	f000 fa45 	bl	8010638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101ae:	f000 fd8b 	bl	8010cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101b4:	f000 fa92 	bl	80106dc <prvIsQueueEmpty>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f43f af6f 	beq.w	801009e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80101c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3730      	adds	r7, #48	; 0x30
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	e000ed04 	.word	0xe000ed04

080101d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08e      	sub	sp, #56	; 0x38
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80101da:	2300      	movs	r3, #0
 80101dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80101e2:	2300      	movs	r3, #0
 80101e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d10a      	bne.n	8010202 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f0:	f383 8811 	msr	BASEPRI, r3
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	f3bf 8f4f 	dsb	sy
 80101fc:	623b      	str	r3, [r7, #32]
}
 80101fe:	bf00      	nop
 8010200:	e7fe      	b.n	8010200 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010206:	2b00      	cmp	r3, #0
 8010208:	d00a      	beq.n	8010220 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	61fb      	str	r3, [r7, #28]
}
 801021c:	bf00      	nop
 801021e:	e7fe      	b.n	801021e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010220:	f001 f930 	bl	8011484 <xTaskGetSchedulerState>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d102      	bne.n	8010230 <xQueueSemaphoreTake+0x60>
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d101      	bne.n	8010234 <xQueueSemaphoreTake+0x64>
 8010230:	2301      	movs	r3, #1
 8010232:	e000      	b.n	8010236 <xQueueSemaphoreTake+0x66>
 8010234:	2300      	movs	r3, #0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10a      	bne.n	8010250 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	61bb      	str	r3, [r7, #24]
}
 801024c:	bf00      	nop
 801024e:	e7fe      	b.n	801024e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010250:	f002 fa30 	bl	80126b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010258:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	2b00      	cmp	r3, #0
 801025e:	d024      	beq.n	80102aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010262:	1e5a      	subs	r2, r3, #1
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d104      	bne.n	801027a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010270:	f001 fa7e 	bl	8011770 <pvTaskIncrementMutexHeldCount>
 8010274:	4602      	mov	r2, r0
 8010276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010278:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801027a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027c:	691b      	ldr	r3, [r3, #16]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00f      	beq.n	80102a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	3310      	adds	r3, #16
 8010286:	4618      	mov	r0, r3
 8010288:	f000 ff3a 	bl	8011100 <xTaskRemoveFromEventList>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d007      	beq.n	80102a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010292:	4b54      	ldr	r3, [pc, #336]	; (80103e4 <xQueueSemaphoreTake+0x214>)
 8010294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010298:	601a      	str	r2, [r3, #0]
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102a2:	f002 fa37 	bl	8012714 <vPortExitCritical>
				return pdPASS;
 80102a6:	2301      	movs	r3, #1
 80102a8:	e097      	b.n	80103da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d111      	bne.n	80102d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80102b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00a      	beq.n	80102cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	617b      	str	r3, [r7, #20]
}
 80102c8:	bf00      	nop
 80102ca:	e7fe      	b.n	80102ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80102cc:	f002 fa22 	bl	8012714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102d0:	2300      	movs	r3, #0
 80102d2:	e082      	b.n	80103da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d106      	bne.n	80102e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102da:	f107 030c 	add.w	r3, r7, #12
 80102de:	4618      	mov	r0, r3
 80102e0:	f000 ff72 	bl	80111c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102e4:	2301      	movs	r3, #1
 80102e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102e8:	f002 fa14 	bl	8012714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102ec:	f000 fcde 	bl	8010cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102f0:	f002 f9e0 	bl	80126b4 <vPortEnterCritical>
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102fa:	b25b      	sxtb	r3, r3
 80102fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010300:	d103      	bne.n	801030a <xQueueSemaphoreTake+0x13a>
 8010302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010304:	2200      	movs	r2, #0
 8010306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010310:	b25b      	sxtb	r3, r3
 8010312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010316:	d103      	bne.n	8010320 <xQueueSemaphoreTake+0x150>
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	2200      	movs	r2, #0
 801031c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010320:	f002 f9f8 	bl	8012714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010324:	463a      	mov	r2, r7
 8010326:	f107 030c 	add.w	r3, r7, #12
 801032a:	4611      	mov	r1, r2
 801032c:	4618      	mov	r0, r3
 801032e:	f000 ff61 	bl	80111f4 <xTaskCheckForTimeOut>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d132      	bne.n	801039e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801033a:	f000 f9cf 	bl	80106dc <prvIsQueueEmpty>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d026      	beq.n	8010392 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d109      	bne.n	8010360 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801034c:	f002 f9b2 	bl	80126b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	4618      	mov	r0, r3
 8010356:	f001 f8b3 	bl	80114c0 <xTaskPriorityInherit>
 801035a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801035c:	f002 f9da 	bl	8012714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	3324      	adds	r3, #36	; 0x24
 8010364:	683a      	ldr	r2, [r7, #0]
 8010366:	4611      	mov	r1, r2
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fe79 	bl	8011060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801036e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010370:	f000 f962 	bl	8010638 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010374:	f000 fca8 	bl	8010cc8 <xTaskResumeAll>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	f47f af68 	bne.w	8010250 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010380:	4b18      	ldr	r3, [pc, #96]	; (80103e4 <xQueueSemaphoreTake+0x214>)
 8010382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010386:	601a      	str	r2, [r3, #0]
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	e75e      	b.n	8010250 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010394:	f000 f950 	bl	8010638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010398:	f000 fc96 	bl	8010cc8 <xTaskResumeAll>
 801039c:	e758      	b.n	8010250 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801039e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103a0:	f000 f94a 	bl	8010638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103a4:	f000 fc90 	bl	8010cc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103aa:	f000 f997 	bl	80106dc <prvIsQueueEmpty>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f43f af4d 	beq.w	8010250 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80103b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00d      	beq.n	80103d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80103bc:	f002 f97a 	bl	80126b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80103c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103c2:	f000 f891 	bl	80104e8 <prvGetDisinheritPriorityAfterTimeout>
 80103c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80103c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103ce:	4618      	mov	r0, r3
 80103d0:	f001 f94c 	bl	801166c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80103d4:	f002 f99e 	bl	8012714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3738      	adds	r7, #56	; 0x38
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	e000ed04 	.word	0xe000ed04

080103e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08e      	sub	sp, #56	; 0x38
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80103f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d10a      	bne.n	8010414 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80103fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010402:	f383 8811 	msr	BASEPRI, r3
 8010406:	f3bf 8f6f 	isb	sy
 801040a:	f3bf 8f4f 	dsb	sy
 801040e:	623b      	str	r3, [r7, #32]
}
 8010410:	bf00      	nop
 8010412:	e7fe      	b.n	8010412 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d103      	bne.n	8010422 <xQueueReceiveFromISR+0x3a>
 801041a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801041e:	2b00      	cmp	r3, #0
 8010420:	d101      	bne.n	8010426 <xQueueReceiveFromISR+0x3e>
 8010422:	2301      	movs	r3, #1
 8010424:	e000      	b.n	8010428 <xQueueReceiveFromISR+0x40>
 8010426:	2300      	movs	r3, #0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d10a      	bne.n	8010442 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801042c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010430:	f383 8811 	msr	BASEPRI, r3
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	61fb      	str	r3, [r7, #28]
}
 801043e:	bf00      	nop
 8010440:	e7fe      	b.n	8010440 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010442:	f002 fa19 	bl	8012878 <vPortValidateInterruptPriority>
	__asm volatile
 8010446:	f3ef 8211 	mrs	r2, BASEPRI
 801044a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044e:	f383 8811 	msr	BASEPRI, r3
 8010452:	f3bf 8f6f 	isb	sy
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	61ba      	str	r2, [r7, #24]
 801045c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801045e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010460:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010466:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046a:	2b00      	cmp	r3, #0
 801046c:	d02f      	beq.n	80104ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010478:	68b9      	ldr	r1, [r7, #8]
 801047a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801047c:	f000 f8b6 	bl	80105ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010482:	1e5a      	subs	r2, r3, #1
 8010484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010486:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010488:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010490:	d112      	bne.n	80104b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d016      	beq.n	80104c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801049a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049c:	3310      	adds	r3, #16
 801049e:	4618      	mov	r0, r3
 80104a0:	f000 fe2e 	bl	8011100 <xTaskRemoveFromEventList>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d00e      	beq.n	80104c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00b      	beq.n	80104c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2201      	movs	r2, #1
 80104b4:	601a      	str	r2, [r3, #0]
 80104b6:	e007      	b.n	80104c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80104b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104bc:	3301      	adds	r3, #1
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	b25a      	sxtb	r2, r3
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80104c8:	2301      	movs	r3, #1
 80104ca:	637b      	str	r3, [r7, #52]	; 0x34
 80104cc:	e001      	b.n	80104d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80104ce:	2300      	movs	r3, #0
 80104d0:	637b      	str	r3, [r7, #52]	; 0x34
 80104d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	f383 8811 	msr	BASEPRI, r3
}
 80104dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3738      	adds	r7, #56	; 0x38
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d006      	beq.n	8010506 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e001      	b.n	801050a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010506:	2300      	movs	r3, #0
 8010508:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801050a:	68fb      	ldr	r3, [r7, #12]
	}
 801050c:	4618      	mov	r0, r3
 801050e:	3714      	adds	r7, #20
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010524:	2300      	movs	r3, #0
 8010526:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801052c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010532:	2b00      	cmp	r3, #0
 8010534:	d10d      	bne.n	8010552 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d14d      	bne.n	80105da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	689b      	ldr	r3, [r3, #8]
 8010542:	4618      	mov	r0, r3
 8010544:	f001 f824 	bl	8011590 <xTaskPriorityDisinherit>
 8010548:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2200      	movs	r2, #0
 801054e:	609a      	str	r2, [r3, #8]
 8010550:	e043      	b.n	80105da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d119      	bne.n	801058c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6858      	ldr	r0, [r3, #4]
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010560:	461a      	mov	r2, r3
 8010562:	68b9      	ldr	r1, [r7, #8]
 8010564:	f003 fd4e 	bl	8014004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010570:	441a      	add	r2, r3
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	429a      	cmp	r2, r3
 8010580:	d32b      	bcc.n	80105da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	605a      	str	r2, [r3, #4]
 801058a:	e026      	b.n	80105da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	68d8      	ldr	r0, [r3, #12]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010594:	461a      	mov	r2, r3
 8010596:	68b9      	ldr	r1, [r7, #8]
 8010598:	f003 fd34 	bl	8014004 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	68da      	ldr	r2, [r3, #12]
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105a4:	425b      	negs	r3, r3
 80105a6:	441a      	add	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	68da      	ldr	r2, [r3, #12]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d207      	bcs.n	80105c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	689a      	ldr	r2, [r3, #8]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c0:	425b      	negs	r3, r3
 80105c2:	441a      	add	r2, r3
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d105      	bne.n	80105da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	3b01      	subs	r3, #1
 80105d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	1c5a      	adds	r2, r3, #1
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80105e2:	697b      	ldr	r3, [r7, #20]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3718      	adds	r7, #24
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d018      	beq.n	8010630 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68da      	ldr	r2, [r3, #12]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010606:	441a      	add	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	68da      	ldr	r2, [r3, #12]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	429a      	cmp	r2, r3
 8010616:	d303      	bcc.n	8010620 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68d9      	ldr	r1, [r3, #12]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010628:	461a      	mov	r2, r3
 801062a:	6838      	ldr	r0, [r7, #0]
 801062c:	f003 fcea 	bl	8014004 <memcpy>
	}
}
 8010630:	bf00      	nop
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010640:	f002 f838 	bl	80126b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801064a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801064c:	e011      	b.n	8010672 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010652:	2b00      	cmp	r3, #0
 8010654:	d012      	beq.n	801067c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3324      	adds	r3, #36	; 0x24
 801065a:	4618      	mov	r0, r3
 801065c:	f000 fd50 	bl	8011100 <xTaskRemoveFromEventList>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d001      	beq.n	801066a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010666:	f000 fe27 	bl	80112b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801066a:	7bfb      	ldrb	r3, [r7, #15]
 801066c:	3b01      	subs	r3, #1
 801066e:	b2db      	uxtb	r3, r3
 8010670:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010676:	2b00      	cmp	r3, #0
 8010678:	dce9      	bgt.n	801064e <prvUnlockQueue+0x16>
 801067a:	e000      	b.n	801067e <prvUnlockQueue+0x46>
					break;
 801067c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	22ff      	movs	r2, #255	; 0xff
 8010682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010686:	f002 f845 	bl	8012714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801068a:	f002 f813 	bl	80126b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010694:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010696:	e011      	b.n	80106bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d012      	beq.n	80106c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	3310      	adds	r3, #16
 80106a4:	4618      	mov	r0, r3
 80106a6:	f000 fd2b 	bl	8011100 <xTaskRemoveFromEventList>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d001      	beq.n	80106b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80106b0:	f000 fe02 	bl	80112b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80106b4:	7bbb      	ldrb	r3, [r7, #14]
 80106b6:	3b01      	subs	r3, #1
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	dce9      	bgt.n	8010698 <prvUnlockQueue+0x60>
 80106c4:	e000      	b.n	80106c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80106c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	22ff      	movs	r2, #255	; 0xff
 80106cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80106d0:	f002 f820 	bl	8012714 <vPortExitCritical>
}
 80106d4:	bf00      	nop
 80106d6:	3710      	adds	r7, #16
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80106e4:	f001 ffe6 	bl	80126b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d102      	bne.n	80106f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80106f0:	2301      	movs	r3, #1
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	e001      	b.n	80106fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80106f6:	2300      	movs	r3, #0
 80106f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80106fa:	f002 f80b 	bl	8012714 <vPortExitCritical>

	return xReturn;
 80106fe:	68fb      	ldr	r3, [r7, #12]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010710:	f001 ffd0 	bl	80126b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071c:	429a      	cmp	r2, r3
 801071e:	d102      	bne.n	8010726 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010720:	2301      	movs	r3, #1
 8010722:	60fb      	str	r3, [r7, #12]
 8010724:	e001      	b.n	801072a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010726:	2300      	movs	r3, #0
 8010728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801072a:	f001 fff3 	bl	8012714 <vPortExitCritical>

	return xReturn;
 801072e:	68fb      	ldr	r3, [r7, #12]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	e014      	b.n	8010772 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010748:	4a0f      	ldr	r2, [pc, #60]	; (8010788 <vQueueAddToRegistry+0x50>)
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10b      	bne.n	801076c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010754:	490c      	ldr	r1, [pc, #48]	; (8010788 <vQueueAddToRegistry+0x50>)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	683a      	ldr	r2, [r7, #0]
 801075a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801075e:	4a0a      	ldr	r2, [pc, #40]	; (8010788 <vQueueAddToRegistry+0x50>)
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	4413      	add	r3, r2
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801076a:	e006      	b.n	801077a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	3301      	adds	r3, #1
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2b07      	cmp	r3, #7
 8010776:	d9e7      	bls.n	8010748 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010778:	bf00      	nop
 801077a:	bf00      	nop
 801077c:	3714      	adds	r7, #20
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	2000400c 	.word	0x2000400c

0801078c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801078c:	b580      	push	{r7, lr}
 801078e:	b086      	sub	sp, #24
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801079c:	f001 ff8a 	bl	80126b4 <vPortEnterCritical>
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107a6:	b25b      	sxtb	r3, r3
 80107a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107ac:	d103      	bne.n	80107b6 <vQueueWaitForMessageRestricted+0x2a>
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	2200      	movs	r2, #0
 80107b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107bc:	b25b      	sxtb	r3, r3
 80107be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107c2:	d103      	bne.n	80107cc <vQueueWaitForMessageRestricted+0x40>
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107cc:	f001 ffa2 	bl	8012714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d106      	bne.n	80107e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	3324      	adds	r3, #36	; 0x24
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	68b9      	ldr	r1, [r7, #8]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f000 fc61 	bl	80110a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80107e6:	6978      	ldr	r0, [r7, #20]
 80107e8:	f7ff ff26 	bl	8010638 <prvUnlockQueue>
	}
 80107ec:	bf00      	nop
 80107ee:	3718      	adds	r7, #24
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b08e      	sub	sp, #56	; 0x38
 80107f8:	af04      	add	r7, sp, #16
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
 8010800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010804:	2b00      	cmp	r3, #0
 8010806:	d10a      	bne.n	801081e <xTaskCreateStatic+0x2a>
	__asm volatile
 8010808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080c:	f383 8811 	msr	BASEPRI, r3
 8010810:	f3bf 8f6f 	isb	sy
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	623b      	str	r3, [r7, #32]
}
 801081a:	bf00      	nop
 801081c:	e7fe      	b.n	801081c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	2b00      	cmp	r3, #0
 8010822:	d10a      	bne.n	801083a <xTaskCreateStatic+0x46>
	__asm volatile
 8010824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010828:	f383 8811 	msr	BASEPRI, r3
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	f3bf 8f4f 	dsb	sy
 8010834:	61fb      	str	r3, [r7, #28]
}
 8010836:	bf00      	nop
 8010838:	e7fe      	b.n	8010838 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801083a:	23bc      	movs	r3, #188	; 0xbc
 801083c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	2bbc      	cmp	r3, #188	; 0xbc
 8010842:	d00a      	beq.n	801085a <xTaskCreateStatic+0x66>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	61bb      	str	r3, [r7, #24]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801085a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	2b00      	cmp	r3, #0
 8010860:	d01e      	beq.n	80108a0 <xTaskCreateStatic+0xac>
 8010862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010864:	2b00      	cmp	r3, #0
 8010866:	d01b      	beq.n	80108a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010870:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	2202      	movs	r2, #2
 8010876:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801087a:	2300      	movs	r3, #0
 801087c:	9303      	str	r3, [sp, #12]
 801087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010880:	9302      	str	r3, [sp, #8]
 8010882:	f107 0314 	add.w	r3, r7, #20
 8010886:	9301      	str	r3, [sp, #4]
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	68b9      	ldr	r1, [r7, #8]
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	f000 f850 	bl	8010938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801089a:	f000 f8f3 	bl	8010a84 <prvAddNewTaskToReadyList>
 801089e:	e001      	b.n	80108a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80108a0:	2300      	movs	r3, #0
 80108a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80108a4:	697b      	ldr	r3, [r7, #20]
	}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3728      	adds	r7, #40	; 0x28
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b08c      	sub	sp, #48	; 0x30
 80108b2:	af04      	add	r7, sp, #16
 80108b4:	60f8      	str	r0, [r7, #12]
 80108b6:	60b9      	str	r1, [r7, #8]
 80108b8:	603b      	str	r3, [r7, #0]
 80108ba:	4613      	mov	r3, r2
 80108bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80108be:	88fb      	ldrh	r3, [r7, #6]
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	4618      	mov	r0, r3
 80108c4:	f002 f818 	bl	80128f8 <pvPortMalloc>
 80108c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00e      	beq.n	80108ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80108d0:	20bc      	movs	r0, #188	; 0xbc
 80108d2:	f002 f811 	bl	80128f8 <pvPortMalloc>
 80108d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d003      	beq.n	80108e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	697a      	ldr	r2, [r7, #20]
 80108e2:	631a      	str	r2, [r3, #48]	; 0x30
 80108e4:	e005      	b.n	80108f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80108e6:	6978      	ldr	r0, [r7, #20]
 80108e8:	f002 f8d2 	bl	8012a90 <vPortFree>
 80108ec:	e001      	b.n	80108f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80108ee:	2300      	movs	r3, #0
 80108f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d017      	beq.n	8010928 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010900:	88fa      	ldrh	r2, [r7, #6]
 8010902:	2300      	movs	r3, #0
 8010904:	9303      	str	r3, [sp, #12]
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	9302      	str	r3, [sp, #8]
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	68b9      	ldr	r1, [r7, #8]
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f000 f80e 	bl	8010938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801091c:	69f8      	ldr	r0, [r7, #28]
 801091e:	f000 f8b1 	bl	8010a84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010922:	2301      	movs	r3, #1
 8010924:	61bb      	str	r3, [r7, #24]
 8010926:	e002      	b.n	801092e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801092c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801092e:	69bb      	ldr	r3, [r7, #24]
	}
 8010930:	4618      	mov	r0, r3
 8010932:	3720      	adds	r7, #32
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b088      	sub	sp, #32
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010948:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	461a      	mov	r2, r3
 8010950:	21a5      	movs	r1, #165	; 0xa5
 8010952:	f003 fb65 	bl	8014020 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010960:	3b01      	subs	r3, #1
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	f023 0307 	bic.w	r3, r3, #7
 801096e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	f003 0307 	and.w	r3, r3, #7
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00a      	beq.n	8010990 <prvInitialiseNewTask+0x58>
	__asm volatile
 801097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097e:	f383 8811 	msr	BASEPRI, r3
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	617b      	str	r3, [r7, #20]
}
 801098c:	bf00      	nop
 801098e:	e7fe      	b.n	801098e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d01f      	beq.n	80109d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010996:	2300      	movs	r3, #0
 8010998:	61fb      	str	r3, [r7, #28]
 801099a:	e012      	b.n	80109c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801099c:	68ba      	ldr	r2, [r7, #8]
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	4413      	add	r3, r2
 80109a2:	7819      	ldrb	r1, [r3, #0]
 80109a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	4413      	add	r3, r2
 80109aa:	3334      	adds	r3, #52	; 0x34
 80109ac:	460a      	mov	r2, r1
 80109ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	4413      	add	r3, r2
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d006      	beq.n	80109ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80109bc:	69fb      	ldr	r3, [r7, #28]
 80109be:	3301      	adds	r3, #1
 80109c0:	61fb      	str	r3, [r7, #28]
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	2b0f      	cmp	r3, #15
 80109c6:	d9e9      	bls.n	801099c <prvInitialiseNewTask+0x64>
 80109c8:	e000      	b.n	80109cc <prvInitialiseNewTask+0x94>
			{
				break;
 80109ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ce:	2200      	movs	r2, #0
 80109d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109d4:	e003      	b.n	80109de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	2200      	movs	r2, #0
 80109da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80109de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e0:	2b37      	cmp	r3, #55	; 0x37
 80109e2:	d901      	bls.n	80109e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80109e4:	2337      	movs	r3, #55	; 0x37
 80109e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	2200      	movs	r2, #0
 80109f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80109fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fc:	3304      	adds	r3, #4
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fe fec2 	bl	800f788 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a06:	3318      	adds	r3, #24
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fe febd 	bl	800f788 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	2200      	movs	r2, #0
 8010a28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a36:	3354      	adds	r3, #84	; 0x54
 8010a38:	2260      	movs	r2, #96	; 0x60
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f003 faef 	bl	8014020 <memset>
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	4a0c      	ldr	r2, [pc, #48]	; (8010a78 <prvInitialiseNewTask+0x140>)
 8010a46:	659a      	str	r2, [r3, #88]	; 0x58
 8010a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4a:	4a0c      	ldr	r2, [pc, #48]	; (8010a7c <prvInitialiseNewTask+0x144>)
 8010a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8010a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a50:	4a0b      	ldr	r2, [pc, #44]	; (8010a80 <prvInitialiseNewTask+0x148>)
 8010a52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	68f9      	ldr	r1, [r7, #12]
 8010a58:	69b8      	ldr	r0, [r7, #24]
 8010a5a:	f001 fcfb 	bl	8012454 <pxPortInitialiseStack>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d002      	beq.n	8010a70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a70:	bf00      	nop
 8010a72:	3720      	adds	r7, #32
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	080144fc 	.word	0x080144fc
 8010a7c:	0801451c 	.word	0x0801451c
 8010a80:	080144dc 	.word	0x080144dc

08010a84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010a8c:	f001 fe12 	bl	80126b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010a90:	4b2d      	ldr	r3, [pc, #180]	; (8010b48 <prvAddNewTaskToReadyList+0xc4>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	3301      	adds	r3, #1
 8010a96:	4a2c      	ldr	r2, [pc, #176]	; (8010b48 <prvAddNewTaskToReadyList+0xc4>)
 8010a98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010a9a:	4b2c      	ldr	r3, [pc, #176]	; (8010b4c <prvAddNewTaskToReadyList+0xc8>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d109      	bne.n	8010ab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010aa2:	4a2a      	ldr	r2, [pc, #168]	; (8010b4c <prvAddNewTaskToReadyList+0xc8>)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010aa8:	4b27      	ldr	r3, [pc, #156]	; (8010b48 <prvAddNewTaskToReadyList+0xc4>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d110      	bne.n	8010ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ab0:	f000 fc26 	bl	8011300 <prvInitialiseTaskLists>
 8010ab4:	e00d      	b.n	8010ad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ab6:	4b26      	ldr	r3, [pc, #152]	; (8010b50 <prvAddNewTaskToReadyList+0xcc>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d109      	bne.n	8010ad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010abe:	4b23      	ldr	r3, [pc, #140]	; (8010b4c <prvAddNewTaskToReadyList+0xc8>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d802      	bhi.n	8010ad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010acc:	4a1f      	ldr	r2, [pc, #124]	; (8010b4c <prvAddNewTaskToReadyList+0xc8>)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ad2:	4b20      	ldr	r3, [pc, #128]	; (8010b54 <prvAddNewTaskToReadyList+0xd0>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	4a1e      	ldr	r2, [pc, #120]	; (8010b54 <prvAddNewTaskToReadyList+0xd0>)
 8010ada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010adc:	4b1d      	ldr	r3, [pc, #116]	; (8010b54 <prvAddNewTaskToReadyList+0xd0>)
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ae8:	4b1b      	ldr	r3, [pc, #108]	; (8010b58 <prvAddNewTaskToReadyList+0xd4>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d903      	bls.n	8010af8 <prvAddNewTaskToReadyList+0x74>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af4:	4a18      	ldr	r2, [pc, #96]	; (8010b58 <prvAddNewTaskToReadyList+0xd4>)
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010afc:	4613      	mov	r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4413      	add	r3, r2
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	4a15      	ldr	r2, [pc, #84]	; (8010b5c <prvAddNewTaskToReadyList+0xd8>)
 8010b06:	441a      	add	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4610      	mov	r0, r2
 8010b10:	f7fe fe47 	bl	800f7a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010b14:	f001 fdfe 	bl	8012714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010b18:	4b0d      	ldr	r3, [pc, #52]	; (8010b50 <prvAddNewTaskToReadyList+0xcc>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00e      	beq.n	8010b3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010b20:	4b0a      	ldr	r3, [pc, #40]	; (8010b4c <prvAddNewTaskToReadyList+0xc8>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d207      	bcs.n	8010b3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010b2e:	4b0c      	ldr	r3, [pc, #48]	; (8010b60 <prvAddNewTaskToReadyList+0xdc>)
 8010b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b34:	601a      	str	r2, [r3, #0]
 8010b36:	f3bf 8f4f 	dsb	sy
 8010b3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b3e:	bf00      	nop
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	200011c0 	.word	0x200011c0
 8010b4c:	20000cec 	.word	0x20000cec
 8010b50:	200011cc 	.word	0x200011cc
 8010b54:	200011dc 	.word	0x200011dc
 8010b58:	200011c8 	.word	0x200011c8
 8010b5c:	20000cf0 	.word	0x20000cf0
 8010b60:	e000ed04 	.word	0xe000ed04

08010b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d017      	beq.n	8010ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b76:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <vTaskDelay+0x60>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00a      	beq.n	8010b94 <vTaskDelay+0x30>
	__asm volatile
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	60bb      	str	r3, [r7, #8]
}
 8010b90:	bf00      	nop
 8010b92:	e7fe      	b.n	8010b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010b94:	f000 f88a 	bl	8010cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b98:	2100      	movs	r1, #0
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fffe 	bl	8011b9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010ba0:	f000 f892 	bl	8010cc8 <xTaskResumeAll>
 8010ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d107      	bne.n	8010bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010bac:	4b06      	ldr	r3, [pc, #24]	; (8010bc8 <vTaskDelay+0x64>)
 8010bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010bbc:	bf00      	nop
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	200011e8 	.word	0x200011e8
 8010bc8:	e000ed04 	.word	0xe000ed04

08010bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b08a      	sub	sp, #40	; 0x28
 8010bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bda:	463a      	mov	r2, r7
 8010bdc:	1d39      	adds	r1, r7, #4
 8010bde:	f107 0308 	add.w	r3, r7, #8
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fe fd7c 	bl	800f6e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	9202      	str	r2, [sp, #8]
 8010bf0:	9301      	str	r3, [sp, #4]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	460a      	mov	r2, r1
 8010bfa:	4924      	ldr	r1, [pc, #144]	; (8010c8c <vTaskStartScheduler+0xc0>)
 8010bfc:	4824      	ldr	r0, [pc, #144]	; (8010c90 <vTaskStartScheduler+0xc4>)
 8010bfe:	f7ff fdf9 	bl	80107f4 <xTaskCreateStatic>
 8010c02:	4603      	mov	r3, r0
 8010c04:	4a23      	ldr	r2, [pc, #140]	; (8010c94 <vTaskStartScheduler+0xc8>)
 8010c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010c08:	4b22      	ldr	r3, [pc, #136]	; (8010c94 <vTaskStartScheduler+0xc8>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010c10:	2301      	movs	r3, #1
 8010c12:	617b      	str	r3, [r7, #20]
 8010c14:	e001      	b.n	8010c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d102      	bne.n	8010c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010c20:	f001 f810 	bl	8011c44 <xTimerCreateTimerTask>
 8010c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d11b      	bne.n	8010c64 <vTaskStartScheduler+0x98>
	__asm volatile
 8010c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c30:	f383 8811 	msr	BASEPRI, r3
 8010c34:	f3bf 8f6f 	isb	sy
 8010c38:	f3bf 8f4f 	dsb	sy
 8010c3c:	613b      	str	r3, [r7, #16]
}
 8010c3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c40:	4b15      	ldr	r3, [pc, #84]	; (8010c98 <vTaskStartScheduler+0xcc>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3354      	adds	r3, #84	; 0x54
 8010c46:	4a15      	ldr	r2, [pc, #84]	; (8010c9c <vTaskStartScheduler+0xd0>)
 8010c48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c4a:	4b15      	ldr	r3, [pc, #84]	; (8010ca0 <vTaskStartScheduler+0xd4>)
 8010c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c52:	4b14      	ldr	r3, [pc, #80]	; (8010ca4 <vTaskStartScheduler+0xd8>)
 8010c54:	2201      	movs	r2, #1
 8010c56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c58:	4b13      	ldr	r3, [pc, #76]	; (8010ca8 <vTaskStartScheduler+0xdc>)
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c5e:	f001 fc87 	bl	8012570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c62:	e00e      	b.n	8010c82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c6a:	d10a      	bne.n	8010c82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	60fb      	str	r3, [r7, #12]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <vTaskStartScheduler+0xb4>
}
 8010c82:	bf00      	nop
 8010c84:	3718      	adds	r7, #24
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	08014274 	.word	0x08014274
 8010c90:	080112d1 	.word	0x080112d1
 8010c94:	200011e4 	.word	0x200011e4
 8010c98:	20000cec 	.word	0x20000cec
 8010c9c:	20000198 	.word	0x20000198
 8010ca0:	200011e0 	.word	0x200011e0
 8010ca4:	200011cc 	.word	0x200011cc
 8010ca8:	200011c4 	.word	0x200011c4

08010cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010cac:	b480      	push	{r7}
 8010cae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010cb0:	4b04      	ldr	r3, [pc, #16]	; (8010cc4 <vTaskSuspendAll+0x18>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	4a03      	ldr	r2, [pc, #12]	; (8010cc4 <vTaskSuspendAll+0x18>)
 8010cb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010cba:	bf00      	nop
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	200011e8 	.word	0x200011e8

08010cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010cd6:	4b42      	ldr	r3, [pc, #264]	; (8010de0 <xTaskResumeAll+0x118>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10a      	bne.n	8010cf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	f383 8811 	msr	BASEPRI, r3
 8010ce6:	f3bf 8f6f 	isb	sy
 8010cea:	f3bf 8f4f 	dsb	sy
 8010cee:	603b      	str	r3, [r7, #0]
}
 8010cf0:	bf00      	nop
 8010cf2:	e7fe      	b.n	8010cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010cf4:	f001 fcde 	bl	80126b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010cf8:	4b39      	ldr	r3, [pc, #228]	; (8010de0 <xTaskResumeAll+0x118>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	4a38      	ldr	r2, [pc, #224]	; (8010de0 <xTaskResumeAll+0x118>)
 8010d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d02:	4b37      	ldr	r3, [pc, #220]	; (8010de0 <xTaskResumeAll+0x118>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d162      	bne.n	8010dd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d0a:	4b36      	ldr	r3, [pc, #216]	; (8010de4 <xTaskResumeAll+0x11c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d05e      	beq.n	8010dd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d12:	e02f      	b.n	8010d74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d14:	4b34      	ldr	r3, [pc, #208]	; (8010de8 <xTaskResumeAll+0x120>)
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	3318      	adds	r3, #24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fd9b 	bl	800f85c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fe fd96 	bl	800f85c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d34:	4b2d      	ldr	r3, [pc, #180]	; (8010dec <xTaskResumeAll+0x124>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d903      	bls.n	8010d44 <xTaskResumeAll+0x7c>
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d40:	4a2a      	ldr	r2, [pc, #168]	; (8010dec <xTaskResumeAll+0x124>)
 8010d42:	6013      	str	r3, [r2, #0]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d48:	4613      	mov	r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4413      	add	r3, r2
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4a27      	ldr	r2, [pc, #156]	; (8010df0 <xTaskResumeAll+0x128>)
 8010d52:	441a      	add	r2, r3
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	3304      	adds	r3, #4
 8010d58:	4619      	mov	r1, r3
 8010d5a:	4610      	mov	r0, r2
 8010d5c:	f7fe fd21 	bl	800f7a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d64:	4b23      	ldr	r3, [pc, #140]	; (8010df4 <xTaskResumeAll+0x12c>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d302      	bcc.n	8010d74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010d6e:	4b22      	ldr	r3, [pc, #136]	; (8010df8 <xTaskResumeAll+0x130>)
 8010d70:	2201      	movs	r2, #1
 8010d72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d74:	4b1c      	ldr	r3, [pc, #112]	; (8010de8 <xTaskResumeAll+0x120>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d1cb      	bne.n	8010d14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d001      	beq.n	8010d86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d82:	f000 fb5f 	bl	8011444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010d86:	4b1d      	ldr	r3, [pc, #116]	; (8010dfc <xTaskResumeAll+0x134>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d010      	beq.n	8010db4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d92:	f000 f847 	bl	8010e24 <xTaskIncrementTick>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d002      	beq.n	8010da2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010d9c:	4b16      	ldr	r3, [pc, #88]	; (8010df8 <xTaskResumeAll+0x130>)
 8010d9e:	2201      	movs	r2, #1
 8010da0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3b01      	subs	r3, #1
 8010da6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1f1      	bne.n	8010d92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010dae:	4b13      	ldr	r3, [pc, #76]	; (8010dfc <xTaskResumeAll+0x134>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010db4:	4b10      	ldr	r3, [pc, #64]	; (8010df8 <xTaskResumeAll+0x130>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d009      	beq.n	8010dd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010dc0:	4b0f      	ldr	r3, [pc, #60]	; (8010e00 <xTaskResumeAll+0x138>)
 8010dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dc6:	601a      	str	r2, [r3, #0]
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010dd0:	f001 fca0 	bl	8012714 <vPortExitCritical>

	return xAlreadyYielded;
 8010dd4:	68bb      	ldr	r3, [r7, #8]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	200011e8 	.word	0x200011e8
 8010de4:	200011c0 	.word	0x200011c0
 8010de8:	20001180 	.word	0x20001180
 8010dec:	200011c8 	.word	0x200011c8
 8010df0:	20000cf0 	.word	0x20000cf0
 8010df4:	20000cec 	.word	0x20000cec
 8010df8:	200011d4 	.word	0x200011d4
 8010dfc:	200011d0 	.word	0x200011d0
 8010e00:	e000ed04 	.word	0xe000ed04

08010e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010e0a:	4b05      	ldr	r3, [pc, #20]	; (8010e20 <xTaskGetTickCount+0x1c>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010e10:	687b      	ldr	r3, [r7, #4]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	200011c4 	.word	0x200011c4

08010e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e2e:	4b4f      	ldr	r3, [pc, #316]	; (8010f6c <xTaskIncrementTick+0x148>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f040 808f 	bne.w	8010f56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e38:	4b4d      	ldr	r3, [pc, #308]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e40:	4a4b      	ldr	r2, [pc, #300]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d120      	bne.n	8010e8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e4c:	4b49      	ldr	r3, [pc, #292]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00a      	beq.n	8010e6c <xTaskIncrementTick+0x48>
	__asm volatile
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
 8010e66:	603b      	str	r3, [r7, #0]
}
 8010e68:	bf00      	nop
 8010e6a:	e7fe      	b.n	8010e6a <xTaskIncrementTick+0x46>
 8010e6c:	4b41      	ldr	r3, [pc, #260]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	60fb      	str	r3, [r7, #12]
 8010e72:	4b41      	ldr	r3, [pc, #260]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a3f      	ldr	r2, [pc, #252]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e78:	6013      	str	r3, [r2, #0]
 8010e7a:	4a3f      	ldr	r2, [pc, #252]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	6013      	str	r3, [r2, #0]
 8010e80:	4b3e      	ldr	r3, [pc, #248]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3301      	adds	r3, #1
 8010e86:	4a3d      	ldr	r2, [pc, #244]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010e88:	6013      	str	r3, [r2, #0]
 8010e8a:	f000 fadb 	bl	8011444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e8e:	4b3c      	ldr	r3, [pc, #240]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d349      	bcc.n	8010f2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e98:	4b36      	ldr	r3, [pc, #216]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d104      	bne.n	8010eac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ea2:	4b37      	ldr	r3, [pc, #220]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ea8:	601a      	str	r2, [r3, #0]
					break;
 8010eaa:	e03f      	b.n	8010f2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eac:	4b31      	ldr	r3, [pc, #196]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d203      	bcs.n	8010ecc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010ec4:	4a2e      	ldr	r2, [pc, #184]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010eca:	e02f      	b.n	8010f2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	3304      	adds	r3, #4
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe fcc3 	bl	800f85c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d004      	beq.n	8010ee8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	3318      	adds	r3, #24
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fe fcba 	bl	800f85c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eec:	4b25      	ldr	r3, [pc, #148]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d903      	bls.n	8010efc <xTaskIncrementTick+0xd8>
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef8:	4a22      	ldr	r2, [pc, #136]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010efa:	6013      	str	r3, [r2, #0]
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f00:	4613      	mov	r3, r2
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	4413      	add	r3, r2
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4a1f      	ldr	r2, [pc, #124]	; (8010f88 <xTaskIncrementTick+0x164>)
 8010f0a:	441a      	add	r2, r3
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	3304      	adds	r3, #4
 8010f10:	4619      	mov	r1, r3
 8010f12:	4610      	mov	r0, r2
 8010f14:	f7fe fc45 	bl	800f7a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f1c:	4b1b      	ldr	r3, [pc, #108]	; (8010f8c <xTaskIncrementTick+0x168>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d3b8      	bcc.n	8010e98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010f26:	2301      	movs	r3, #1
 8010f28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f2a:	e7b5      	b.n	8010e98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f2c:	4b17      	ldr	r3, [pc, #92]	; (8010f8c <xTaskIncrementTick+0x168>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f32:	4915      	ldr	r1, [pc, #84]	; (8010f88 <xTaskIncrementTick+0x164>)
 8010f34:	4613      	mov	r3, r2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	440b      	add	r3, r1
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d901      	bls.n	8010f48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010f44:	2301      	movs	r3, #1
 8010f46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010f48:	4b11      	ldr	r3, [pc, #68]	; (8010f90 <xTaskIncrementTick+0x16c>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d007      	beq.n	8010f60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010f50:	2301      	movs	r3, #1
 8010f52:	617b      	str	r3, [r7, #20]
 8010f54:	e004      	b.n	8010f60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010f56:	4b0f      	ldr	r3, [pc, #60]	; (8010f94 <xTaskIncrementTick+0x170>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	4a0d      	ldr	r2, [pc, #52]	; (8010f94 <xTaskIncrementTick+0x170>)
 8010f5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010f60:	697b      	ldr	r3, [r7, #20]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3718      	adds	r7, #24
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	200011e8 	.word	0x200011e8
 8010f70:	200011c4 	.word	0x200011c4
 8010f74:	20001178 	.word	0x20001178
 8010f78:	2000117c 	.word	0x2000117c
 8010f7c:	200011d8 	.word	0x200011d8
 8010f80:	200011e0 	.word	0x200011e0
 8010f84:	200011c8 	.word	0x200011c8
 8010f88:	20000cf0 	.word	0x20000cf0
 8010f8c:	20000cec 	.word	0x20000cec
 8010f90:	200011d4 	.word	0x200011d4
 8010f94:	200011d0 	.word	0x200011d0

08010f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f9e:	4b2a      	ldr	r3, [pc, #168]	; (8011048 <vTaskSwitchContext+0xb0>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d003      	beq.n	8010fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010fa6:	4b29      	ldr	r3, [pc, #164]	; (801104c <vTaskSwitchContext+0xb4>)
 8010fa8:	2201      	movs	r2, #1
 8010faa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010fac:	e046      	b.n	801103c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8010fae:	4b27      	ldr	r3, [pc, #156]	; (801104c <vTaskSwitchContext+0xb4>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fb4:	4b26      	ldr	r3, [pc, #152]	; (8011050 <vTaskSwitchContext+0xb8>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	60fb      	str	r3, [r7, #12]
 8010fba:	e010      	b.n	8010fde <vTaskSwitchContext+0x46>
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10a      	bne.n	8010fd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8010fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc6:	f383 8811 	msr	BASEPRI, r3
 8010fca:	f3bf 8f6f 	isb	sy
 8010fce:	f3bf 8f4f 	dsb	sy
 8010fd2:	607b      	str	r3, [r7, #4]
}
 8010fd4:	bf00      	nop
 8010fd6:	e7fe      	b.n	8010fd6 <vTaskSwitchContext+0x3e>
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	3b01      	subs	r3, #1
 8010fdc:	60fb      	str	r3, [r7, #12]
 8010fde:	491d      	ldr	r1, [pc, #116]	; (8011054 <vTaskSwitchContext+0xbc>)
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	4413      	add	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	440b      	add	r3, r1
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d0e4      	beq.n	8010fbc <vTaskSwitchContext+0x24>
 8010ff2:	68fa      	ldr	r2, [r7, #12]
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	4413      	add	r3, r2
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	4a15      	ldr	r2, [pc, #84]	; (8011054 <vTaskSwitchContext+0xbc>)
 8010ffe:	4413      	add	r3, r2
 8011000:	60bb      	str	r3, [r7, #8]
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	685a      	ldr	r2, [r3, #4]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	605a      	str	r2, [r3, #4]
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	685a      	ldr	r2, [r3, #4]
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	3308      	adds	r3, #8
 8011014:	429a      	cmp	r2, r3
 8011016:	d104      	bne.n	8011022 <vTaskSwitchContext+0x8a>
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	605a      	str	r2, [r3, #4]
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	4a0b      	ldr	r2, [pc, #44]	; (8011058 <vTaskSwitchContext+0xc0>)
 801102a:	6013      	str	r3, [r2, #0]
 801102c:	4a08      	ldr	r2, [pc, #32]	; (8011050 <vTaskSwitchContext+0xb8>)
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011032:	4b09      	ldr	r3, [pc, #36]	; (8011058 <vTaskSwitchContext+0xc0>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	3354      	adds	r3, #84	; 0x54
 8011038:	4a08      	ldr	r2, [pc, #32]	; (801105c <vTaskSwitchContext+0xc4>)
 801103a:	6013      	str	r3, [r2, #0]
}
 801103c:	bf00      	nop
 801103e:	3714      	adds	r7, #20
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr
 8011048:	200011e8 	.word	0x200011e8
 801104c:	200011d4 	.word	0x200011d4
 8011050:	200011c8 	.word	0x200011c8
 8011054:	20000cf0 	.word	0x20000cf0
 8011058:	20000cec 	.word	0x20000cec
 801105c:	20000198 	.word	0x20000198

08011060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d10a      	bne.n	8011086 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	60fb      	str	r3, [r7, #12]
}
 8011082:	bf00      	nop
 8011084:	e7fe      	b.n	8011084 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011086:	4b07      	ldr	r3, [pc, #28]	; (80110a4 <vTaskPlaceOnEventList+0x44>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	3318      	adds	r3, #24
 801108c:	4619      	mov	r1, r3
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f7fe fbab 	bl	800f7ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011094:	2101      	movs	r1, #1
 8011096:	6838      	ldr	r0, [r7, #0]
 8011098:	f000 fd80 	bl	8011b9c <prvAddCurrentTaskToDelayedList>
}
 801109c:	bf00      	nop
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	20000cec 	.word	0x20000cec

080110a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d10a      	bne.n	80110d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80110ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110be:	f383 8811 	msr	BASEPRI, r3
 80110c2:	f3bf 8f6f 	isb	sy
 80110c6:	f3bf 8f4f 	dsb	sy
 80110ca:	617b      	str	r3, [r7, #20]
}
 80110cc:	bf00      	nop
 80110ce:	e7fe      	b.n	80110ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110d0:	4b0a      	ldr	r3, [pc, #40]	; (80110fc <vTaskPlaceOnEventListRestricted+0x54>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	3318      	adds	r3, #24
 80110d6:	4619      	mov	r1, r3
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f7fe fb62 	bl	800f7a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d002      	beq.n	80110ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80110e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80110ea:	6879      	ldr	r1, [r7, #4]
 80110ec:	68b8      	ldr	r0, [r7, #8]
 80110ee:	f000 fd55 	bl	8011b9c <prvAddCurrentTaskToDelayedList>
	}
 80110f2:	bf00      	nop
 80110f4:	3718      	adds	r7, #24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20000cec 	.word	0x20000cec

08011100 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b086      	sub	sp, #24
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d10a      	bne.n	801112c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111a:	f383 8811 	msr	BASEPRI, r3
 801111e:	f3bf 8f6f 	isb	sy
 8011122:	f3bf 8f4f 	dsb	sy
 8011126:	60fb      	str	r3, [r7, #12]
}
 8011128:	bf00      	nop
 801112a:	e7fe      	b.n	801112a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	3318      	adds	r3, #24
 8011130:	4618      	mov	r0, r3
 8011132:	f7fe fb93 	bl	800f85c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011136:	4b1e      	ldr	r3, [pc, #120]	; (80111b0 <xTaskRemoveFromEventList+0xb0>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d11d      	bne.n	801117a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	3304      	adds	r3, #4
 8011142:	4618      	mov	r0, r3
 8011144:	f7fe fb8a 	bl	800f85c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114c:	4b19      	ldr	r3, [pc, #100]	; (80111b4 <xTaskRemoveFromEventList+0xb4>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	429a      	cmp	r2, r3
 8011152:	d903      	bls.n	801115c <xTaskRemoveFromEventList+0x5c>
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011158:	4a16      	ldr	r2, [pc, #88]	; (80111b4 <xTaskRemoveFromEventList+0xb4>)
 801115a:	6013      	str	r3, [r2, #0]
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011160:	4613      	mov	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	4413      	add	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4a13      	ldr	r2, [pc, #76]	; (80111b8 <xTaskRemoveFromEventList+0xb8>)
 801116a:	441a      	add	r2, r3
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	3304      	adds	r3, #4
 8011170:	4619      	mov	r1, r3
 8011172:	4610      	mov	r0, r2
 8011174:	f7fe fb15 	bl	800f7a2 <vListInsertEnd>
 8011178:	e005      	b.n	8011186 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	3318      	adds	r3, #24
 801117e:	4619      	mov	r1, r3
 8011180:	480e      	ldr	r0, [pc, #56]	; (80111bc <xTaskRemoveFromEventList+0xbc>)
 8011182:	f7fe fb0e 	bl	800f7a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801118a:	4b0d      	ldr	r3, [pc, #52]	; (80111c0 <xTaskRemoveFromEventList+0xc0>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011190:	429a      	cmp	r2, r3
 8011192:	d905      	bls.n	80111a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011194:	2301      	movs	r3, #1
 8011196:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011198:	4b0a      	ldr	r3, [pc, #40]	; (80111c4 <xTaskRemoveFromEventList+0xc4>)
 801119a:	2201      	movs	r2, #1
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	e001      	b.n	80111a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80111a0:	2300      	movs	r3, #0
 80111a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80111a4:	697b      	ldr	r3, [r7, #20]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3718      	adds	r7, #24
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	200011e8 	.word	0x200011e8
 80111b4:	200011c8 	.word	0x200011c8
 80111b8:	20000cf0 	.word	0x20000cf0
 80111bc:	20001180 	.word	0x20001180
 80111c0:	20000cec 	.word	0x20000cec
 80111c4:	200011d4 	.word	0x200011d4

080111c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111d0:	4b06      	ldr	r3, [pc, #24]	; (80111ec <vTaskInternalSetTimeOutState+0x24>)
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111d8:	4b05      	ldr	r3, [pc, #20]	; (80111f0 <vTaskInternalSetTimeOutState+0x28>)
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	605a      	str	r2, [r3, #4]
}
 80111e0:	bf00      	nop
 80111e2:	370c      	adds	r7, #12
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr
 80111ec:	200011d8 	.word	0x200011d8
 80111f0:	200011c4 	.word	0x200011c4

080111f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b088      	sub	sp, #32
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d10a      	bne.n	801121a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	613b      	str	r3, [r7, #16]
}
 8011216:	bf00      	nop
 8011218:	e7fe      	b.n	8011218 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10a      	bne.n	8011236 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011224:	f383 8811 	msr	BASEPRI, r3
 8011228:	f3bf 8f6f 	isb	sy
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	60fb      	str	r3, [r7, #12]
}
 8011232:	bf00      	nop
 8011234:	e7fe      	b.n	8011234 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011236:	f001 fa3d 	bl	80126b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801123a:	4b1d      	ldr	r3, [pc, #116]	; (80112b0 <xTaskCheckForTimeOut+0xbc>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	69ba      	ldr	r2, [r7, #24]
 8011246:	1ad3      	subs	r3, r2, r3
 8011248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011252:	d102      	bne.n	801125a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011254:	2300      	movs	r3, #0
 8011256:	61fb      	str	r3, [r7, #28]
 8011258:	e023      	b.n	80112a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	4b15      	ldr	r3, [pc, #84]	; (80112b4 <xTaskCheckForTimeOut+0xc0>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	429a      	cmp	r2, r3
 8011264:	d007      	beq.n	8011276 <xTaskCheckForTimeOut+0x82>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	69ba      	ldr	r2, [r7, #24]
 801126c:	429a      	cmp	r2, r3
 801126e:	d302      	bcc.n	8011276 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011270:	2301      	movs	r3, #1
 8011272:	61fb      	str	r3, [r7, #28]
 8011274:	e015      	b.n	80112a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	429a      	cmp	r2, r3
 801127e:	d20b      	bcs.n	8011298 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	1ad2      	subs	r2, r2, r3
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff ff9b 	bl	80111c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011292:	2300      	movs	r3, #0
 8011294:	61fb      	str	r3, [r7, #28]
 8011296:	e004      	b.n	80112a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	2200      	movs	r2, #0
 801129c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801129e:	2301      	movs	r3, #1
 80112a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80112a2:	f001 fa37 	bl	8012714 <vPortExitCritical>

	return xReturn;
 80112a6:	69fb      	ldr	r3, [r7, #28]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3720      	adds	r7, #32
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	200011c4 	.word	0x200011c4
 80112b4:	200011d8 	.word	0x200011d8

080112b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80112b8:	b480      	push	{r7}
 80112ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80112bc:	4b03      	ldr	r3, [pc, #12]	; (80112cc <vTaskMissedYield+0x14>)
 80112be:	2201      	movs	r2, #1
 80112c0:	601a      	str	r2, [r3, #0]
}
 80112c2:	bf00      	nop
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr
 80112cc:	200011d4 	.word	0x200011d4

080112d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112d8:	f000 f852 	bl	8011380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112dc:	4b06      	ldr	r3, [pc, #24]	; (80112f8 <prvIdleTask+0x28>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	d9f9      	bls.n	80112d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112e4:	4b05      	ldr	r3, [pc, #20]	; (80112fc <prvIdleTask+0x2c>)
 80112e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112f4:	e7f0      	b.n	80112d8 <prvIdleTask+0x8>
 80112f6:	bf00      	nop
 80112f8:	20000cf0 	.word	0x20000cf0
 80112fc:	e000ed04 	.word	0xe000ed04

08011300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011306:	2300      	movs	r3, #0
 8011308:	607b      	str	r3, [r7, #4]
 801130a:	e00c      	b.n	8011326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	4613      	mov	r3, r2
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	4413      	add	r3, r2
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	4a12      	ldr	r2, [pc, #72]	; (8011360 <prvInitialiseTaskLists+0x60>)
 8011318:	4413      	add	r3, r2
 801131a:	4618      	mov	r0, r3
 801131c:	f7fe fa14 	bl	800f748 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	3301      	adds	r3, #1
 8011324:	607b      	str	r3, [r7, #4]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b37      	cmp	r3, #55	; 0x37
 801132a:	d9ef      	bls.n	801130c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801132c:	480d      	ldr	r0, [pc, #52]	; (8011364 <prvInitialiseTaskLists+0x64>)
 801132e:	f7fe fa0b 	bl	800f748 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011332:	480d      	ldr	r0, [pc, #52]	; (8011368 <prvInitialiseTaskLists+0x68>)
 8011334:	f7fe fa08 	bl	800f748 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011338:	480c      	ldr	r0, [pc, #48]	; (801136c <prvInitialiseTaskLists+0x6c>)
 801133a:	f7fe fa05 	bl	800f748 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801133e:	480c      	ldr	r0, [pc, #48]	; (8011370 <prvInitialiseTaskLists+0x70>)
 8011340:	f7fe fa02 	bl	800f748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011344:	480b      	ldr	r0, [pc, #44]	; (8011374 <prvInitialiseTaskLists+0x74>)
 8011346:	f7fe f9ff 	bl	800f748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801134a:	4b0b      	ldr	r3, [pc, #44]	; (8011378 <prvInitialiseTaskLists+0x78>)
 801134c:	4a05      	ldr	r2, [pc, #20]	; (8011364 <prvInitialiseTaskLists+0x64>)
 801134e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011350:	4b0a      	ldr	r3, [pc, #40]	; (801137c <prvInitialiseTaskLists+0x7c>)
 8011352:	4a05      	ldr	r2, [pc, #20]	; (8011368 <prvInitialiseTaskLists+0x68>)
 8011354:	601a      	str	r2, [r3, #0]
}
 8011356:	bf00      	nop
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	20000cf0 	.word	0x20000cf0
 8011364:	20001150 	.word	0x20001150
 8011368:	20001164 	.word	0x20001164
 801136c:	20001180 	.word	0x20001180
 8011370:	20001194 	.word	0x20001194
 8011374:	200011ac 	.word	0x200011ac
 8011378:	20001178 	.word	0x20001178
 801137c:	2000117c 	.word	0x2000117c

08011380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011386:	e019      	b.n	80113bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011388:	f001 f994 	bl	80126b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801138c:	4b10      	ldr	r3, [pc, #64]	; (80113d0 <prvCheckTasksWaitingTermination+0x50>)
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	3304      	adds	r3, #4
 8011398:	4618      	mov	r0, r3
 801139a:	f7fe fa5f 	bl	800f85c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801139e:	4b0d      	ldr	r3, [pc, #52]	; (80113d4 <prvCheckTasksWaitingTermination+0x54>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3b01      	subs	r3, #1
 80113a4:	4a0b      	ldr	r2, [pc, #44]	; (80113d4 <prvCheckTasksWaitingTermination+0x54>)
 80113a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80113a8:	4b0b      	ldr	r3, [pc, #44]	; (80113d8 <prvCheckTasksWaitingTermination+0x58>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	4a0a      	ldr	r2, [pc, #40]	; (80113d8 <prvCheckTasksWaitingTermination+0x58>)
 80113b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80113b2:	f001 f9af 	bl	8012714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 f810 	bl	80113dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113bc:	4b06      	ldr	r3, [pc, #24]	; (80113d8 <prvCheckTasksWaitingTermination+0x58>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d1e1      	bne.n	8011388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113c4:	bf00      	nop
 80113c6:	bf00      	nop
 80113c8:	3708      	adds	r7, #8
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	20001194 	.word	0x20001194
 80113d4:	200011c0 	.word	0x200011c0
 80113d8:	200011a8 	.word	0x200011a8

080113dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3354      	adds	r3, #84	; 0x54
 80113e8:	4618      	mov	r0, r3
 80113ea:	f002 fe2f 	bl	801404c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d108      	bne.n	801140a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113fc:	4618      	mov	r0, r3
 80113fe:	f001 fb47 	bl	8012a90 <vPortFree>
				vPortFree( pxTCB );
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f001 fb44 	bl	8012a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011408:	e018      	b.n	801143c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011410:	2b01      	cmp	r3, #1
 8011412:	d103      	bne.n	801141c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f001 fb3b 	bl	8012a90 <vPortFree>
	}
 801141a:	e00f      	b.n	801143c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011422:	2b02      	cmp	r3, #2
 8011424:	d00a      	beq.n	801143c <prvDeleteTCB+0x60>
	__asm volatile
 8011426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142a:	f383 8811 	msr	BASEPRI, r3
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	60fb      	str	r3, [r7, #12]
}
 8011438:	bf00      	nop
 801143a:	e7fe      	b.n	801143a <prvDeleteTCB+0x5e>
	}
 801143c:	bf00      	nop
 801143e:	3710      	adds	r7, #16
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801144a:	4b0c      	ldr	r3, [pc, #48]	; (801147c <prvResetNextTaskUnblockTime+0x38>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d104      	bne.n	801145e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011454:	4b0a      	ldr	r3, [pc, #40]	; (8011480 <prvResetNextTaskUnblockTime+0x3c>)
 8011456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801145a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801145c:	e008      	b.n	8011470 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801145e:	4b07      	ldr	r3, [pc, #28]	; (801147c <prvResetNextTaskUnblockTime+0x38>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	4a04      	ldr	r2, [pc, #16]	; (8011480 <prvResetNextTaskUnblockTime+0x3c>)
 801146e:	6013      	str	r3, [r2, #0]
}
 8011470:	bf00      	nop
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	20001178 	.word	0x20001178
 8011480:	200011e0 	.word	0x200011e0

08011484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801148a:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <xTaskGetSchedulerState+0x34>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d102      	bne.n	8011498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011492:	2301      	movs	r3, #1
 8011494:	607b      	str	r3, [r7, #4]
 8011496:	e008      	b.n	80114aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011498:	4b08      	ldr	r3, [pc, #32]	; (80114bc <xTaskGetSchedulerState+0x38>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d102      	bne.n	80114a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114a0:	2302      	movs	r3, #2
 80114a2:	607b      	str	r3, [r7, #4]
 80114a4:	e001      	b.n	80114aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114a6:	2300      	movs	r3, #0
 80114a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80114aa:	687b      	ldr	r3, [r7, #4]
	}
 80114ac:	4618      	mov	r0, r3
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	200011cc 	.word	0x200011cc
 80114bc:	200011e8 	.word	0x200011e8

080114c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80114cc:	2300      	movs	r3, #0
 80114ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d051      	beq.n	801157a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114da:	4b2a      	ldr	r3, [pc, #168]	; (8011584 <xTaskPriorityInherit+0xc4>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d241      	bcs.n	8011568 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	699b      	ldr	r3, [r3, #24]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	db06      	blt.n	80114fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114ec:	4b25      	ldr	r3, [pc, #148]	; (8011584 <xTaskPriorityInherit+0xc4>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	6959      	ldr	r1, [r3, #20]
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011502:	4613      	mov	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4413      	add	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	4a1f      	ldr	r2, [pc, #124]	; (8011588 <xTaskPriorityInherit+0xc8>)
 801150c:	4413      	add	r3, r2
 801150e:	4299      	cmp	r1, r3
 8011510:	d122      	bne.n	8011558 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	3304      	adds	r3, #4
 8011516:	4618      	mov	r0, r3
 8011518:	f7fe f9a0 	bl	800f85c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801151c:	4b19      	ldr	r3, [pc, #100]	; (8011584 <xTaskPriorityInherit+0xc4>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152a:	4b18      	ldr	r3, [pc, #96]	; (801158c <xTaskPriorityInherit+0xcc>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	429a      	cmp	r2, r3
 8011530:	d903      	bls.n	801153a <xTaskPriorityInherit+0x7a>
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011536:	4a15      	ldr	r2, [pc, #84]	; (801158c <xTaskPriorityInherit+0xcc>)
 8011538:	6013      	str	r3, [r2, #0]
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801153e:	4613      	mov	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4a10      	ldr	r2, [pc, #64]	; (8011588 <xTaskPriorityInherit+0xc8>)
 8011548:	441a      	add	r2, r3
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	3304      	adds	r3, #4
 801154e:	4619      	mov	r1, r3
 8011550:	4610      	mov	r0, r2
 8011552:	f7fe f926 	bl	800f7a2 <vListInsertEnd>
 8011556:	e004      	b.n	8011562 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011558:	4b0a      	ldr	r3, [pc, #40]	; (8011584 <xTaskPriorityInherit+0xc4>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011562:	2301      	movs	r3, #1
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	e008      	b.n	801157a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801156c:	4b05      	ldr	r3, [pc, #20]	; (8011584 <xTaskPriorityInherit+0xc4>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011572:	429a      	cmp	r2, r3
 8011574:	d201      	bcs.n	801157a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011576:	2301      	movs	r3, #1
 8011578:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801157a:	68fb      	ldr	r3, [r7, #12]
	}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20000cec 	.word	0x20000cec
 8011588:	20000cf0 	.word	0x20000cf0
 801158c:	200011c8 	.word	0x200011c8

08011590 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801159c:	2300      	movs	r3, #0
 801159e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d056      	beq.n	8011654 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80115a6:	4b2e      	ldr	r3, [pc, #184]	; (8011660 <xTaskPriorityDisinherit+0xd0>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	693a      	ldr	r2, [r7, #16]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d00a      	beq.n	80115c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80115b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b4:	f383 8811 	msr	BASEPRI, r3
 80115b8:	f3bf 8f6f 	isb	sy
 80115bc:	f3bf 8f4f 	dsb	sy
 80115c0:	60fb      	str	r3, [r7, #12]
}
 80115c2:	bf00      	nop
 80115c4:	e7fe      	b.n	80115c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d10a      	bne.n	80115e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80115ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	60bb      	str	r3, [r7, #8]
}
 80115e0:	bf00      	nop
 80115e2:	e7fe      	b.n	80115e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115e8:	1e5a      	subs	r2, r3, #1
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d02c      	beq.n	8011654 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d128      	bne.n	8011654 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	3304      	adds	r3, #4
 8011606:	4618      	mov	r0, r3
 8011608:	f7fe f928 	bl	800f85c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011618:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011624:	4b0f      	ldr	r3, [pc, #60]	; (8011664 <xTaskPriorityDisinherit+0xd4>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	429a      	cmp	r2, r3
 801162a:	d903      	bls.n	8011634 <xTaskPriorityDisinherit+0xa4>
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011630:	4a0c      	ldr	r2, [pc, #48]	; (8011664 <xTaskPriorityDisinherit+0xd4>)
 8011632:	6013      	str	r3, [r2, #0]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011638:	4613      	mov	r3, r2
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	4413      	add	r3, r2
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	4a09      	ldr	r2, [pc, #36]	; (8011668 <xTaskPriorityDisinherit+0xd8>)
 8011642:	441a      	add	r2, r3
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	3304      	adds	r3, #4
 8011648:	4619      	mov	r1, r3
 801164a:	4610      	mov	r0, r2
 801164c:	f7fe f8a9 	bl	800f7a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011650:	2301      	movs	r3, #1
 8011652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011654:	697b      	ldr	r3, [r7, #20]
	}
 8011656:	4618      	mov	r0, r3
 8011658:	3718      	adds	r7, #24
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	20000cec 	.word	0x20000cec
 8011664:	200011c8 	.word	0x200011c8
 8011668:	20000cf0 	.word	0x20000cf0

0801166c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801166c:	b580      	push	{r7, lr}
 801166e:	b088      	sub	sp, #32
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801167a:	2301      	movs	r3, #1
 801167c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d06a      	beq.n	801175a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10a      	bne.n	80116a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801168c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011690:	f383 8811 	msr	BASEPRI, r3
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	f3bf 8f4f 	dsb	sy
 801169c:	60fb      	str	r3, [r7, #12]
}
 801169e:	bf00      	nop
 80116a0:	e7fe      	b.n	80116a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116a6:	683a      	ldr	r2, [r7, #0]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d902      	bls.n	80116b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	61fb      	str	r3, [r7, #28]
 80116b0:	e002      	b.n	80116b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116bc:	69fa      	ldr	r2, [r7, #28]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d04b      	beq.n	801175a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d146      	bne.n	801175a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80116cc:	4b25      	ldr	r3, [pc, #148]	; (8011764 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	69ba      	ldr	r2, [r7, #24]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d10a      	bne.n	80116ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	60bb      	str	r3, [r7, #8]
}
 80116e8:	bf00      	nop
 80116ea:	e7fe      	b.n	80116ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	69fa      	ldr	r2, [r7, #28]
 80116f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	699b      	ldr	r3, [r3, #24]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	db04      	blt.n	801170a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	6959      	ldr	r1, [r3, #20]
 801170e:	693a      	ldr	r2, [r7, #16]
 8011710:	4613      	mov	r3, r2
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	4413      	add	r3, r2
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	4a13      	ldr	r2, [pc, #76]	; (8011768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801171a:	4413      	add	r3, r2
 801171c:	4299      	cmp	r1, r3
 801171e:	d11c      	bne.n	801175a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	3304      	adds	r3, #4
 8011724:	4618      	mov	r0, r3
 8011726:	f7fe f899 	bl	800f85c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801172e:	4b0f      	ldr	r3, [pc, #60]	; (801176c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	429a      	cmp	r2, r3
 8011734:	d903      	bls.n	801173e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801173a:	4a0c      	ldr	r2, [pc, #48]	; (801176c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801173c:	6013      	str	r3, [r2, #0]
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011742:	4613      	mov	r3, r2
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4413      	add	r3, r2
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	4a07      	ldr	r2, [pc, #28]	; (8011768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801174c:	441a      	add	r2, r3
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	3304      	adds	r3, #4
 8011752:	4619      	mov	r1, r3
 8011754:	4610      	mov	r0, r2
 8011756:	f7fe f824 	bl	800f7a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801175a:	bf00      	nop
 801175c:	3720      	adds	r7, #32
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	20000cec 	.word	0x20000cec
 8011768:	20000cf0 	.word	0x20000cf0
 801176c:	200011c8 	.word	0x200011c8

08011770 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011770:	b480      	push	{r7}
 8011772:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011774:	4b07      	ldr	r3, [pc, #28]	; (8011794 <pvTaskIncrementMutexHeldCount+0x24>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801177c:	4b05      	ldr	r3, [pc, #20]	; (8011794 <pvTaskIncrementMutexHeldCount+0x24>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011782:	3201      	adds	r2, #1
 8011784:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011786:	4b03      	ldr	r3, [pc, #12]	; (8011794 <pvTaskIncrementMutexHeldCount+0x24>)
 8011788:	681b      	ldr	r3, [r3, #0]
	}
 801178a:	4618      	mov	r0, r3
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr
 8011794:	20000cec 	.word	0x20000cec

08011798 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80117a6:	f000 ff85 	bl	80126b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80117aa:	4b29      	ldr	r3, [pc, #164]	; (8011850 <xTaskNotifyWait+0xb8>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	2b02      	cmp	r3, #2
 80117b6:	d01c      	beq.n	80117f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80117b8:	4b25      	ldr	r3, [pc, #148]	; (8011850 <xTaskNotifyWait+0xb8>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	43d2      	mvns	r2, r2
 80117c4:	400a      	ands	r2, r1
 80117c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80117ca:	4b21      	ldr	r3, [pc, #132]	; (8011850 <xTaskNotifyWait+0xb8>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2201      	movs	r2, #1
 80117d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00b      	beq.n	80117f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80117da:	2101      	movs	r1, #1
 80117dc:	6838      	ldr	r0, [r7, #0]
 80117de:	f000 f9dd 	bl	8011b9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80117e2:	4b1c      	ldr	r3, [pc, #112]	; (8011854 <xTaskNotifyWait+0xbc>)
 80117e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117e8:	601a      	str	r2, [r3, #0]
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80117f2:	f000 ff8f 	bl	8012714 <vPortExitCritical>

		taskENTER_CRITICAL();
 80117f6:	f000 ff5d 	bl	80126b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d005      	beq.n	801180c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011800:	4b13      	ldr	r3, [pc, #76]	; (8011850 <xTaskNotifyWait+0xb8>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801180c:	4b10      	ldr	r3, [pc, #64]	; (8011850 <xTaskNotifyWait+0xb8>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b02      	cmp	r3, #2
 8011818:	d002      	beq.n	8011820 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801181a:	2300      	movs	r3, #0
 801181c:	617b      	str	r3, [r7, #20]
 801181e:	e00a      	b.n	8011836 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <xTaskNotifyWait+0xb8>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	43d2      	mvns	r2, r2
 801182c:	400a      	ands	r2, r1
 801182e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8011832:	2301      	movs	r3, #1
 8011834:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011836:	4b06      	ldr	r3, [pc, #24]	; (8011850 <xTaskNotifyWait+0xb8>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2200      	movs	r2, #0
 801183c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8011840:	f000 ff68 	bl	8012714 <vPortExitCritical>

		return xReturn;
 8011844:	697b      	ldr	r3, [r7, #20]
	}
 8011846:	4618      	mov	r0, r3
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	20000cec 	.word	0x20000cec
 8011854:	e000ed04 	.word	0xe000ed04

08011858 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011858:	b580      	push	{r7, lr}
 801185a:	b08a      	sub	sp, #40	; 0x28
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	603b      	str	r3, [r7, #0]
 8011864:	4613      	mov	r3, r2
 8011866:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011868:	2301      	movs	r3, #1
 801186a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10a      	bne.n	8011888 <xTaskGenericNotify+0x30>
	__asm volatile
 8011872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011876:	f383 8811 	msr	BASEPRI, r3
 801187a:	f3bf 8f6f 	isb	sy
 801187e:	f3bf 8f4f 	dsb	sy
 8011882:	61bb      	str	r3, [r7, #24]
}
 8011884:	bf00      	nop
 8011886:	e7fe      	b.n	8011886 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801188c:	f000 ff12 	bl	80126b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d004      	beq.n	80118a0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011896:	6a3b      	ldr	r3, [r7, #32]
 8011898:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80118a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80118a8:	6a3b      	ldr	r3, [r7, #32]
 80118aa:	2202      	movs	r2, #2
 80118ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80118b0:	79fb      	ldrb	r3, [r7, #7]
 80118b2:	2b04      	cmp	r3, #4
 80118b4:	d82d      	bhi.n	8011912 <xTaskGenericNotify+0xba>
 80118b6:	a201      	add	r2, pc, #4	; (adr r2, 80118bc <xTaskGenericNotify+0x64>)
 80118b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118bc:	08011935 	.word	0x08011935
 80118c0:	080118d1 	.word	0x080118d1
 80118c4:	080118e3 	.word	0x080118e3
 80118c8:	080118f3 	.word	0x080118f3
 80118cc:	080118fd 	.word	0x080118fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80118d0:	6a3b      	ldr	r3, [r7, #32]
 80118d2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	431a      	orrs	r2, r3
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80118e0:	e02b      	b.n	801193a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80118e8:	1c5a      	adds	r2, r3, #1
 80118ea:	6a3b      	ldr	r3, [r7, #32]
 80118ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80118f0:	e023      	b.n	801193a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80118f2:	6a3b      	ldr	r3, [r7, #32]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80118fa:	e01e      	b.n	801193a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80118fc:	7ffb      	ldrb	r3, [r7, #31]
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d004      	beq.n	801190c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801190a:	e016      	b.n	801193a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801190c:	2300      	movs	r3, #0
 801190e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011910:	e013      	b.n	801193a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011912:	6a3b      	ldr	r3, [r7, #32]
 8011914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801191c:	d00c      	beq.n	8011938 <xTaskGenericNotify+0xe0>
	__asm volatile
 801191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011922:	f383 8811 	msr	BASEPRI, r3
 8011926:	f3bf 8f6f 	isb	sy
 801192a:	f3bf 8f4f 	dsb	sy
 801192e:	617b      	str	r3, [r7, #20]
}
 8011930:	bf00      	nop
 8011932:	e7fe      	b.n	8011932 <xTaskGenericNotify+0xda>
					break;
 8011934:	bf00      	nop
 8011936:	e000      	b.n	801193a <xTaskGenericNotify+0xe2>

					break;
 8011938:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801193a:	7ffb      	ldrb	r3, [r7, #31]
 801193c:	2b01      	cmp	r3, #1
 801193e:	d13a      	bne.n	80119b6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011940:	6a3b      	ldr	r3, [r7, #32]
 8011942:	3304      	adds	r3, #4
 8011944:	4618      	mov	r0, r3
 8011946:	f7fd ff89 	bl	800f85c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801194a:	6a3b      	ldr	r3, [r7, #32]
 801194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801194e:	4b1d      	ldr	r3, [pc, #116]	; (80119c4 <xTaskGenericNotify+0x16c>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	429a      	cmp	r2, r3
 8011954:	d903      	bls.n	801195e <xTaskGenericNotify+0x106>
 8011956:	6a3b      	ldr	r3, [r7, #32]
 8011958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195a:	4a1a      	ldr	r2, [pc, #104]	; (80119c4 <xTaskGenericNotify+0x16c>)
 801195c:	6013      	str	r3, [r2, #0]
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011962:	4613      	mov	r3, r2
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	4413      	add	r3, r2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4a17      	ldr	r2, [pc, #92]	; (80119c8 <xTaskGenericNotify+0x170>)
 801196c:	441a      	add	r2, r3
 801196e:	6a3b      	ldr	r3, [r7, #32]
 8011970:	3304      	adds	r3, #4
 8011972:	4619      	mov	r1, r3
 8011974:	4610      	mov	r0, r2
 8011976:	f7fd ff14 	bl	800f7a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00a      	beq.n	8011998 <xTaskGenericNotify+0x140>
	__asm volatile
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	613b      	str	r3, [r7, #16]
}
 8011994:	bf00      	nop
 8011996:	e7fe      	b.n	8011996 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199c:	4b0b      	ldr	r3, [pc, #44]	; (80119cc <xTaskGenericNotify+0x174>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d907      	bls.n	80119b6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80119a6:	4b0a      	ldr	r3, [pc, #40]	; (80119d0 <xTaskGenericNotify+0x178>)
 80119a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ac:	601a      	str	r2, [r3, #0]
 80119ae:	f3bf 8f4f 	dsb	sy
 80119b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80119b6:	f000 fead 	bl	8012714 <vPortExitCritical>

		return xReturn;
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80119bc:	4618      	mov	r0, r3
 80119be:	3728      	adds	r7, #40	; 0x28
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	200011c8 	.word	0x200011c8
 80119c8:	20000cf0 	.word	0x20000cf0
 80119cc:	20000cec 	.word	0x20000cec
 80119d0:	e000ed04 	.word	0xe000ed04

080119d4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08e      	sub	sp, #56	; 0x38
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	4613      	mov	r3, r2
 80119e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80119e4:	2301      	movs	r3, #1
 80119e6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d10a      	bne.n	8011a04 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80119ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f2:	f383 8811 	msr	BASEPRI, r3
 80119f6:	f3bf 8f6f 	isb	sy
 80119fa:	f3bf 8f4f 	dsb	sy
 80119fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011a00:	bf00      	nop
 8011a02:	e7fe      	b.n	8011a02 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a04:	f000 ff38 	bl	8012878 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011a0c:	f3ef 8211 	mrs	r2, BASEPRI
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	623a      	str	r2, [r7, #32]
 8011a22:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011a24:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a26:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d004      	beq.n	8011a38 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a30:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a3a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8011a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a44:	2202      	movs	r2, #2
 8011a46:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8011a4a:	79fb      	ldrb	r3, [r7, #7]
 8011a4c:	2b04      	cmp	r3, #4
 8011a4e:	d82f      	bhi.n	8011ab0 <xTaskGenericNotifyFromISR+0xdc>
 8011a50:	a201      	add	r2, pc, #4	; (adr r2, 8011a58 <xTaskGenericNotifyFromISR+0x84>)
 8011a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a56:	bf00      	nop
 8011a58:	08011ad3 	.word	0x08011ad3
 8011a5c:	08011a6d 	.word	0x08011a6d
 8011a60:	08011a7f 	.word	0x08011a7f
 8011a64:	08011a8f 	.word	0x08011a8f
 8011a68:	08011a99 	.word	0x08011a99
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	431a      	orrs	r2, r3
 8011a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8011a7c:	e02c      	b.n	8011ad8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011a84:	1c5a      	adds	r2, r3, #1
 8011a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8011a8c:	e024      	b.n	8011ad8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a90:	68ba      	ldr	r2, [r7, #8]
 8011a92:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8011a96:	e01f      	b.n	8011ad8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d004      	beq.n	8011aaa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa2:	68ba      	ldr	r2, [r7, #8]
 8011aa4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011aa8:	e016      	b.n	8011ad8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011aae:	e013      	b.n	8011ad8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011aba:	d00c      	beq.n	8011ad6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8011abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac0:	f383 8811 	msr	BASEPRI, r3
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	61bb      	str	r3, [r7, #24]
}
 8011ace:	bf00      	nop
 8011ad0:	e7fe      	b.n	8011ad0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011ad2:	bf00      	nop
 8011ad4:	e000      	b.n	8011ad8 <xTaskGenericNotifyFromISR+0x104>
					break;
 8011ad6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d146      	bne.n	8011b6e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00a      	beq.n	8011afe <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8011ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aec:	f383 8811 	msr	BASEPRI, r3
 8011af0:	f3bf 8f6f 	isb	sy
 8011af4:	f3bf 8f4f 	dsb	sy
 8011af8:	617b      	str	r3, [r7, #20]
}
 8011afa:	bf00      	nop
 8011afc:	e7fe      	b.n	8011afc <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011afe:	4b21      	ldr	r3, [pc, #132]	; (8011b84 <xTaskGenericNotifyFromISR+0x1b0>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d11d      	bne.n	8011b42 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b08:	3304      	adds	r3, #4
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fd fea6 	bl	800f85c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b14:	4b1c      	ldr	r3, [pc, #112]	; (8011b88 <xTaskGenericNotifyFromISR+0x1b4>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d903      	bls.n	8011b24 <xTaskGenericNotifyFromISR+0x150>
 8011b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b20:	4a19      	ldr	r2, [pc, #100]	; (8011b88 <xTaskGenericNotifyFromISR+0x1b4>)
 8011b22:	6013      	str	r3, [r2, #0]
 8011b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b28:	4613      	mov	r3, r2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	4a16      	ldr	r2, [pc, #88]	; (8011b8c <xTaskGenericNotifyFromISR+0x1b8>)
 8011b32:	441a      	add	r2, r3
 8011b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b36:	3304      	adds	r3, #4
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4610      	mov	r0, r2
 8011b3c:	f7fd fe31 	bl	800f7a2 <vListInsertEnd>
 8011b40:	e005      	b.n	8011b4e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b44:	3318      	adds	r3, #24
 8011b46:	4619      	mov	r1, r3
 8011b48:	4811      	ldr	r0, [pc, #68]	; (8011b90 <xTaskGenericNotifyFromISR+0x1bc>)
 8011b4a:	f7fd fe2a 	bl	800f7a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b52:	4b10      	ldr	r3, [pc, #64]	; (8011b94 <xTaskGenericNotifyFromISR+0x1c0>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d908      	bls.n	8011b6e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d002      	beq.n	8011b68 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b64:	2201      	movs	r2, #1
 8011b66:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011b68:	4b0b      	ldr	r3, [pc, #44]	; (8011b98 <xTaskGenericNotifyFromISR+0x1c4>)
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	601a      	str	r2, [r3, #0]
 8011b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	f383 8811 	msr	BASEPRI, r3
}
 8011b78:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3738      	adds	r7, #56	; 0x38
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	200011e8 	.word	0x200011e8
 8011b88:	200011c8 	.word	0x200011c8
 8011b8c:	20000cf0 	.word	0x20000cf0
 8011b90:	20001180 	.word	0x20001180
 8011b94:	20000cec 	.word	0x20000cec
 8011b98:	200011d4 	.word	0x200011d4

08011b9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011ba6:	4b21      	ldr	r3, [pc, #132]	; (8011c2c <prvAddCurrentTaskToDelayedList+0x90>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bac:	4b20      	ldr	r3, [pc, #128]	; (8011c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	3304      	adds	r3, #4
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fd fe52 	bl	800f85c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bbe:	d10a      	bne.n	8011bd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d007      	beq.n	8011bd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bc6:	4b1a      	ldr	r3, [pc, #104]	; (8011c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	3304      	adds	r3, #4
 8011bcc:	4619      	mov	r1, r3
 8011bce:	4819      	ldr	r0, [pc, #100]	; (8011c34 <prvAddCurrentTaskToDelayedList+0x98>)
 8011bd0:	f7fd fde7 	bl	800f7a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011bd4:	e026      	b.n	8011c24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011bd6:	68fa      	ldr	r2, [r7, #12]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4413      	add	r3, r2
 8011bdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011bde:	4b14      	ldr	r3, [pc, #80]	; (8011c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	68ba      	ldr	r2, [r7, #8]
 8011be4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011be6:	68ba      	ldr	r2, [r7, #8]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d209      	bcs.n	8011c02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bee:	4b12      	ldr	r3, [pc, #72]	; (8011c38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	4b0f      	ldr	r3, [pc, #60]	; (8011c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	3304      	adds	r3, #4
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	4610      	mov	r0, r2
 8011bfc:	f7fd fdf5 	bl	800f7ea <vListInsert>
}
 8011c00:	e010      	b.n	8011c24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c02:	4b0e      	ldr	r3, [pc, #56]	; (8011c3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	4b0a      	ldr	r3, [pc, #40]	; (8011c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	4610      	mov	r0, r2
 8011c10:	f7fd fdeb 	bl	800f7ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c14:	4b0a      	ldr	r3, [pc, #40]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	68ba      	ldr	r2, [r7, #8]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d202      	bcs.n	8011c24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011c1e:	4a08      	ldr	r2, [pc, #32]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	6013      	str	r3, [r2, #0]
}
 8011c24:	bf00      	nop
 8011c26:	3710      	adds	r7, #16
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	200011c4 	.word	0x200011c4
 8011c30:	20000cec 	.word	0x20000cec
 8011c34:	200011ac 	.word	0x200011ac
 8011c38:	2000117c 	.word	0x2000117c
 8011c3c:	20001178 	.word	0x20001178
 8011c40:	200011e0 	.word	0x200011e0

08011c44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b08a      	sub	sp, #40	; 0x28
 8011c48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011c4e:	f000 fba1 	bl	8012394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011c52:	4b1c      	ldr	r3, [pc, #112]	; (8011cc4 <xTimerCreateTimerTask+0x80>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d021      	beq.n	8011c9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011c62:	1d3a      	adds	r2, r7, #4
 8011c64:	f107 0108 	add.w	r1, r7, #8
 8011c68:	f107 030c 	add.w	r3, r7, #12
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fd fd51 	bl	800f714 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011c72:	6879      	ldr	r1, [r7, #4]
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	68fa      	ldr	r2, [r7, #12]
 8011c78:	9202      	str	r2, [sp, #8]
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	2302      	movs	r3, #2
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	2300      	movs	r3, #0
 8011c82:	460a      	mov	r2, r1
 8011c84:	4910      	ldr	r1, [pc, #64]	; (8011cc8 <xTimerCreateTimerTask+0x84>)
 8011c86:	4811      	ldr	r0, [pc, #68]	; (8011ccc <xTimerCreateTimerTask+0x88>)
 8011c88:	f7fe fdb4 	bl	80107f4 <xTaskCreateStatic>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	4a10      	ldr	r2, [pc, #64]	; (8011cd0 <xTimerCreateTimerTask+0x8c>)
 8011c90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011c92:	4b0f      	ldr	r3, [pc, #60]	; (8011cd0 <xTimerCreateTimerTask+0x8c>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d10a      	bne.n	8011cba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	613b      	str	r3, [r7, #16]
}
 8011cb6:	bf00      	nop
 8011cb8:	e7fe      	b.n	8011cb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011cba:	697b      	ldr	r3, [r7, #20]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3718      	adds	r7, #24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	2000121c 	.word	0x2000121c
 8011cc8:	0801427c 	.word	0x0801427c
 8011ccc:	08011f3d 	.word	0x08011f3d
 8011cd0:	20001220 	.word	0x20001220

08011cd4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b088      	sub	sp, #32
 8011cd8:	af02      	add	r7, sp, #8
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	607a      	str	r2, [r7, #4]
 8011ce0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011ce2:	202c      	movs	r0, #44	; 0x2c
 8011ce4:	f000 fe08 	bl	80128f8 <pvPortMalloc>
 8011ce8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d00d      	beq.n	8011d0c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	9301      	str	r3, [sp, #4]
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	68b9      	ldr	r1, [r7, #8]
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	f000 f843 	bl	8011d92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011d0c:	697b      	ldr	r3, [r7, #20]
	}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3718      	adds	r7, #24
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}

08011d16 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011d16:	b580      	push	{r7, lr}
 8011d18:	b08a      	sub	sp, #40	; 0x28
 8011d1a:	af02      	add	r7, sp, #8
 8011d1c:	60f8      	str	r0, [r7, #12]
 8011d1e:	60b9      	str	r1, [r7, #8]
 8011d20:	607a      	str	r2, [r7, #4]
 8011d22:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011d24:	232c      	movs	r3, #44	; 0x2c
 8011d26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	2b2c      	cmp	r3, #44	; 0x2c
 8011d2c:	d00a      	beq.n	8011d44 <xTimerCreateStatic+0x2e>
	__asm volatile
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	61bb      	str	r3, [r7, #24]
}
 8011d40:	bf00      	nop
 8011d42:	e7fe      	b.n	8011d42 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011d44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10a      	bne.n	8011d62 <xTimerCreateStatic+0x4c>
	__asm volatile
 8011d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	617b      	str	r3, [r7, #20]
}
 8011d5e:	bf00      	nop
 8011d60:	e7fe      	b.n	8011d60 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d64:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00d      	beq.n	8011d88 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	2202      	movs	r2, #2
 8011d70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	9301      	str	r3, [sp, #4]
 8011d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7a:	9300      	str	r3, [sp, #0]
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	68b9      	ldr	r1, [r7, #8]
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	f000 f805 	bl	8011d92 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011d88:	69fb      	ldr	r3, [r7, #28]
	}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3720      	adds	r7, #32
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b086      	sub	sp, #24
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	607a      	str	r2, [r7, #4]
 8011d9e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d10a      	bne.n	8011dbc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8011da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011daa:	f383 8811 	msr	BASEPRI, r3
 8011dae:	f3bf 8f6f 	isb	sy
 8011db2:	f3bf 8f4f 	dsb	sy
 8011db6:	617b      	str	r3, [r7, #20]
}
 8011db8:	bf00      	nop
 8011dba:	e7fe      	b.n	8011dba <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d01e      	beq.n	8011e00 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011dc2:	f000 fae7 	bl	8012394 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc8:	68fa      	ldr	r2, [r7, #12]
 8011dca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	68ba      	ldr	r2, [r7, #8]
 8011dd0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd4:	683a      	ldr	r2, [r7, #0]
 8011dd6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	6a3a      	ldr	r2, [r7, #32]
 8011ddc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de0:	3304      	adds	r3, #4
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fd fcd0 	bl	800f788 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d008      	beq.n	8011e00 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011df4:	f043 0304 	orr.w	r3, r3, #4
 8011df8:	b2da      	uxtb	r2, r3
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011e00:	bf00      	nop
 8011e02:	3718      	adds	r7, #24
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}

08011e08 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b08a      	sub	sp, #40	; 0x28
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
 8011e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011e16:	2300      	movs	r3, #0
 8011e18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d10a      	bne.n	8011e36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e24:	f383 8811 	msr	BASEPRI, r3
 8011e28:	f3bf 8f6f 	isb	sy
 8011e2c:	f3bf 8f4f 	dsb	sy
 8011e30:	623b      	str	r3, [r7, #32]
}
 8011e32:	bf00      	nop
 8011e34:	e7fe      	b.n	8011e34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011e36:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <xTimerGenericCommand+0x98>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d02a      	beq.n	8011e94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	2b05      	cmp	r3, #5
 8011e4e:	dc18      	bgt.n	8011e82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011e50:	f7ff fb18 	bl	8011484 <xTaskGetSchedulerState>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d109      	bne.n	8011e6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011e5a:	4b11      	ldr	r3, [pc, #68]	; (8011ea0 <xTimerGenericCommand+0x98>)
 8011e5c:	6818      	ldr	r0, [r3, #0]
 8011e5e:	f107 0110 	add.w	r1, r7, #16
 8011e62:	2300      	movs	r3, #0
 8011e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e66:	f7fd fead 	bl	800fbc4 <xQueueGenericSend>
 8011e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8011e6c:	e012      	b.n	8011e94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011e6e:	4b0c      	ldr	r3, [pc, #48]	; (8011ea0 <xTimerGenericCommand+0x98>)
 8011e70:	6818      	ldr	r0, [r3, #0]
 8011e72:	f107 0110 	add.w	r1, r7, #16
 8011e76:	2300      	movs	r3, #0
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f7fd fea3 	bl	800fbc4 <xQueueGenericSend>
 8011e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8011e80:	e008      	b.n	8011e94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011e82:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <xTimerGenericCommand+0x98>)
 8011e84:	6818      	ldr	r0, [r3, #0]
 8011e86:	f107 0110 	add.w	r1, r7, #16
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	683a      	ldr	r2, [r7, #0]
 8011e8e:	f7fd ff97 	bl	800fdc0 <xQueueGenericSendFromISR>
 8011e92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3728      	adds	r7, #40	; 0x28
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	2000121c 	.word	0x2000121c

08011ea4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b088      	sub	sp, #32
 8011ea8:	af02      	add	r7, sp, #8
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eae:	4b22      	ldr	r3, [pc, #136]	; (8011f38 <prvProcessExpiredTimer+0x94>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	3304      	adds	r3, #4
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fd fccd 	bl	800f85c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ec8:	f003 0304 	and.w	r3, r3, #4
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d022      	beq.n	8011f16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	699a      	ldr	r2, [r3, #24]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	18d1      	adds	r1, r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	6978      	ldr	r0, [r7, #20]
 8011ede:	f000 f8d1 	bl	8012084 <prvInsertTimerInActiveList>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d01f      	beq.n	8011f28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011ee8:	2300      	movs	r3, #0
 8011eea:	9300      	str	r3, [sp, #0]
 8011eec:	2300      	movs	r3, #0
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	6978      	ldr	r0, [r7, #20]
 8011ef4:	f7ff ff88 	bl	8011e08 <xTimerGenericCommand>
 8011ef8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d113      	bne.n	8011f28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	60fb      	str	r3, [r7, #12]
}
 8011f12:	bf00      	nop
 8011f14:	e7fe      	b.n	8011f14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f1c:	f023 0301 	bic.w	r3, r3, #1
 8011f20:	b2da      	uxtb	r2, r3
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	6a1b      	ldr	r3, [r3, #32]
 8011f2c:	6978      	ldr	r0, [r7, #20]
 8011f2e:	4798      	blx	r3
}
 8011f30:	bf00      	nop
 8011f32:	3718      	adds	r7, #24
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	20001214 	.word	0x20001214

08011f3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011f44:	f107 0308 	add.w	r3, r7, #8
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f000 f857 	bl	8011ffc <prvGetNextExpireTime>
 8011f4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	4619      	mov	r1, r3
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f000 f803 	bl	8011f60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011f5a:	f000 f8d5 	bl	8012108 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011f5e:	e7f1      	b.n	8011f44 <prvTimerTask+0x8>

08011f60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011f6a:	f7fe fe9f 	bl	8010cac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011f6e:	f107 0308 	add.w	r3, r7, #8
 8011f72:	4618      	mov	r0, r3
 8011f74:	f000 f866 	bl	8012044 <prvSampleTimeNow>
 8011f78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d130      	bne.n	8011fe2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d10a      	bne.n	8011f9c <prvProcessTimerOrBlockTask+0x3c>
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d806      	bhi.n	8011f9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011f8e:	f7fe fe9b 	bl	8010cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011f92:	68f9      	ldr	r1, [r7, #12]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff ff85 	bl	8011ea4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011f9a:	e024      	b.n	8011fe6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d008      	beq.n	8011fb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011fa2:	4b13      	ldr	r3, [pc, #76]	; (8011ff0 <prvProcessTimerOrBlockTask+0x90>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d101      	bne.n	8011fb0 <prvProcessTimerOrBlockTask+0x50>
 8011fac:	2301      	movs	r3, #1
 8011fae:	e000      	b.n	8011fb2 <prvProcessTimerOrBlockTask+0x52>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011fb4:	4b0f      	ldr	r3, [pc, #60]	; (8011ff4 <prvProcessTimerOrBlockTask+0x94>)
 8011fb6:	6818      	ldr	r0, [r3, #0]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f7fe fbe3 	bl	801078c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011fc6:	f7fe fe7f 	bl	8010cc8 <xTaskResumeAll>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d10a      	bne.n	8011fe6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011fd0:	4b09      	ldr	r3, [pc, #36]	; (8011ff8 <prvProcessTimerOrBlockTask+0x98>)
 8011fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fd6:	601a      	str	r2, [r3, #0]
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	f3bf 8f6f 	isb	sy
}
 8011fe0:	e001      	b.n	8011fe6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011fe2:	f7fe fe71 	bl	8010cc8 <xTaskResumeAll>
}
 8011fe6:	bf00      	nop
 8011fe8:	3710      	adds	r7, #16
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	20001218 	.word	0x20001218
 8011ff4:	2000121c 	.word	0x2000121c
 8011ff8:	e000ed04 	.word	0xe000ed04

08011ffc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b085      	sub	sp, #20
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012004:	4b0e      	ldr	r3, [pc, #56]	; (8012040 <prvGetNextExpireTime+0x44>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d101      	bne.n	8012012 <prvGetNextExpireTime+0x16>
 801200e:	2201      	movs	r2, #1
 8012010:	e000      	b.n	8012014 <prvGetNextExpireTime+0x18>
 8012012:	2200      	movs	r2, #0
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d105      	bne.n	801202c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012020:	4b07      	ldr	r3, [pc, #28]	; (8012040 <prvGetNextExpireTime+0x44>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60fb      	str	r3, [r7, #12]
 801202a:	e001      	b.n	8012030 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801202c:	2300      	movs	r3, #0
 801202e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012030:	68fb      	ldr	r3, [r7, #12]
}
 8012032:	4618      	mov	r0, r3
 8012034:	3714      	adds	r7, #20
 8012036:	46bd      	mov	sp, r7
 8012038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	20001214 	.word	0x20001214

08012044 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801204c:	f7fe feda 	bl	8010e04 <xTaskGetTickCount>
 8012050:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012052:	4b0b      	ldr	r3, [pc, #44]	; (8012080 <prvSampleTimeNow+0x3c>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	68fa      	ldr	r2, [r7, #12]
 8012058:	429a      	cmp	r2, r3
 801205a:	d205      	bcs.n	8012068 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801205c:	f000 f936 	bl	80122cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2201      	movs	r2, #1
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	e002      	b.n	801206e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2200      	movs	r2, #0
 801206c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801206e:	4a04      	ldr	r2, [pc, #16]	; (8012080 <prvSampleTimeNow+0x3c>)
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012074:	68fb      	ldr	r3, [r7, #12]
}
 8012076:	4618      	mov	r0, r3
 8012078:	3710      	adds	r7, #16
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	20001224 	.word	0x20001224

08012084 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012092:	2300      	movs	r3, #0
 8012094:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	68fa      	ldr	r2, [r7, #12]
 80120a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d812      	bhi.n	80120d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	1ad2      	subs	r2, r2, r3
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	699b      	ldr	r3, [r3, #24]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d302      	bcc.n	80120be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80120b8:	2301      	movs	r3, #1
 80120ba:	617b      	str	r3, [r7, #20]
 80120bc:	e01b      	b.n	80120f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80120be:	4b10      	ldr	r3, [pc, #64]	; (8012100 <prvInsertTimerInActiveList+0x7c>)
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	3304      	adds	r3, #4
 80120c6:	4619      	mov	r1, r3
 80120c8:	4610      	mov	r0, r2
 80120ca:	f7fd fb8e 	bl	800f7ea <vListInsert>
 80120ce:	e012      	b.n	80120f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d206      	bcs.n	80120e6 <prvInsertTimerInActiveList+0x62>
 80120d8:	68ba      	ldr	r2, [r7, #8]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d302      	bcc.n	80120e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80120e0:	2301      	movs	r3, #1
 80120e2:	617b      	str	r3, [r7, #20]
 80120e4:	e007      	b.n	80120f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120e6:	4b07      	ldr	r3, [pc, #28]	; (8012104 <prvInsertTimerInActiveList+0x80>)
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	3304      	adds	r3, #4
 80120ee:	4619      	mov	r1, r3
 80120f0:	4610      	mov	r0, r2
 80120f2:	f7fd fb7a 	bl	800f7ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80120f6:	697b      	ldr	r3, [r7, #20]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3718      	adds	r7, #24
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	20001218 	.word	0x20001218
 8012104:	20001214 	.word	0x20001214

08012108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b08e      	sub	sp, #56	; 0x38
 801210c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801210e:	e0ca      	b.n	80122a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2b00      	cmp	r3, #0
 8012114:	da18      	bge.n	8012148 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012116:	1d3b      	adds	r3, r7, #4
 8012118:	3304      	adds	r3, #4
 801211a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211e:	2b00      	cmp	r3, #0
 8012120:	d10a      	bne.n	8012138 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012126:	f383 8811 	msr	BASEPRI, r3
 801212a:	f3bf 8f6f 	isb	sy
 801212e:	f3bf 8f4f 	dsb	sy
 8012132:	61fb      	str	r3, [r7, #28]
}
 8012134:	bf00      	nop
 8012136:	e7fe      	b.n	8012136 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801213e:	6850      	ldr	r0, [r2, #4]
 8012140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012142:	6892      	ldr	r2, [r2, #8]
 8012144:	4611      	mov	r1, r2
 8012146:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2b00      	cmp	r3, #0
 801214c:	f2c0 80aa 	blt.w	80122a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012156:	695b      	ldr	r3, [r3, #20]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d004      	beq.n	8012166 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215e:	3304      	adds	r3, #4
 8012160:	4618      	mov	r0, r3
 8012162:	f7fd fb7b 	bl	800f85c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012166:	463b      	mov	r3, r7
 8012168:	4618      	mov	r0, r3
 801216a:	f7ff ff6b 	bl	8012044 <prvSampleTimeNow>
 801216e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b09      	cmp	r3, #9
 8012174:	f200 8097 	bhi.w	80122a6 <prvProcessReceivedCommands+0x19e>
 8012178:	a201      	add	r2, pc, #4	; (adr r2, 8012180 <prvProcessReceivedCommands+0x78>)
 801217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217e:	bf00      	nop
 8012180:	080121a9 	.word	0x080121a9
 8012184:	080121a9 	.word	0x080121a9
 8012188:	080121a9 	.word	0x080121a9
 801218c:	0801221d 	.word	0x0801221d
 8012190:	08012231 	.word	0x08012231
 8012194:	0801227b 	.word	0x0801227b
 8012198:	080121a9 	.word	0x080121a9
 801219c:	080121a9 	.word	0x080121a9
 80121a0:	0801221d 	.word	0x0801221d
 80121a4:	08012231 	.word	0x08012231
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80121a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121ae:	f043 0301 	orr.w	r3, r3, #1
 80121b2:	b2da      	uxtb	r2, r3
 80121b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80121ba:	68ba      	ldr	r2, [r7, #8]
 80121bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121be:	699b      	ldr	r3, [r3, #24]
 80121c0:	18d1      	adds	r1, r2, r3
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c8:	f7ff ff5c 	bl	8012084 <prvInsertTimerInActiveList>
 80121cc:	4603      	mov	r3, r0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d069      	beq.n	80122a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80121d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d4:	6a1b      	ldr	r3, [r3, #32]
 80121d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80121da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121e0:	f003 0304 	and.w	r3, r3, #4
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d05e      	beq.n	80122a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ec:	699b      	ldr	r3, [r3, #24]
 80121ee:	441a      	add	r2, r3
 80121f0:	2300      	movs	r3, #0
 80121f2:	9300      	str	r3, [sp, #0]
 80121f4:	2300      	movs	r3, #0
 80121f6:	2100      	movs	r1, #0
 80121f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121fa:	f7ff fe05 	bl	8011e08 <xTimerGenericCommand>
 80121fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012200:	6a3b      	ldr	r3, [r7, #32]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d14f      	bne.n	80122a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	61bb      	str	r3, [r7, #24]
}
 8012218:	bf00      	nop
 801221a:	e7fe      	b.n	801221a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801221e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012222:	f023 0301 	bic.w	r3, r3, #1
 8012226:	b2da      	uxtb	r2, r3
 8012228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801222e:	e03a      	b.n	80122a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012236:	f043 0301 	orr.w	r3, r3, #1
 801223a:	b2da      	uxtb	r2, r3
 801223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012246:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d10a      	bne.n	8012266 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012254:	f383 8811 	msr	BASEPRI, r3
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	f3bf 8f4f 	dsb	sy
 8012260:	617b      	str	r3, [r7, #20]
}
 8012262:	bf00      	nop
 8012264:	e7fe      	b.n	8012264 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	699a      	ldr	r2, [r3, #24]
 801226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226c:	18d1      	adds	r1, r2, r3
 801226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012274:	f7ff ff06 	bl	8012084 <prvInsertTimerInActiveList>
					break;
 8012278:	e015      	b.n	80122a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012280:	f003 0302 	and.w	r3, r3, #2
 8012284:	2b00      	cmp	r3, #0
 8012286:	d103      	bne.n	8012290 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801228a:	f000 fc01 	bl	8012a90 <vPortFree>
 801228e:	e00a      	b.n	80122a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012296:	f023 0301 	bic.w	r3, r3, #1
 801229a:	b2da      	uxtb	r2, r3
 801229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80122a2:	e000      	b.n	80122a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80122a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80122a6:	4b08      	ldr	r3, [pc, #32]	; (80122c8 <prvProcessReceivedCommands+0x1c0>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	1d39      	adds	r1, r7, #4
 80122ac:	2200      	movs	r2, #0
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fd feae 	bl	8010010 <xQueueReceive>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f47f af2a 	bne.w	8012110 <prvProcessReceivedCommands+0x8>
	}
}
 80122bc:	bf00      	nop
 80122be:	bf00      	nop
 80122c0:	3730      	adds	r7, #48	; 0x30
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	2000121c 	.word	0x2000121c

080122cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b088      	sub	sp, #32
 80122d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80122d2:	e048      	b.n	8012366 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80122d4:	4b2d      	ldr	r3, [pc, #180]	; (801238c <prvSwitchTimerLists+0xc0>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122de:	4b2b      	ldr	r3, [pc, #172]	; (801238c <prvSwitchTimerLists+0xc0>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	3304      	adds	r3, #4
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fd fab5 	bl	800f85c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6a1b      	ldr	r3, [r3, #32]
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012300:	f003 0304 	and.w	r3, r3, #4
 8012304:	2b00      	cmp	r3, #0
 8012306:	d02e      	beq.n	8012366 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	699b      	ldr	r3, [r3, #24]
 801230c:	693a      	ldr	r2, [r7, #16]
 801230e:	4413      	add	r3, r2
 8012310:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012312:	68ba      	ldr	r2, [r7, #8]
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	429a      	cmp	r2, r3
 8012318:	d90e      	bls.n	8012338 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	68ba      	ldr	r2, [r7, #8]
 801231e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	68fa      	ldr	r2, [r7, #12]
 8012324:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012326:	4b19      	ldr	r3, [pc, #100]	; (801238c <prvSwitchTimerLists+0xc0>)
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	3304      	adds	r3, #4
 801232e:	4619      	mov	r1, r3
 8012330:	4610      	mov	r0, r2
 8012332:	f7fd fa5a 	bl	800f7ea <vListInsert>
 8012336:	e016      	b.n	8012366 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012338:	2300      	movs	r3, #0
 801233a:	9300      	str	r3, [sp, #0]
 801233c:	2300      	movs	r3, #0
 801233e:	693a      	ldr	r2, [r7, #16]
 8012340:	2100      	movs	r1, #0
 8012342:	68f8      	ldr	r0, [r7, #12]
 8012344:	f7ff fd60 	bl	8011e08 <xTimerGenericCommand>
 8012348:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d10a      	bne.n	8012366 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012354:	f383 8811 	msr	BASEPRI, r3
 8012358:	f3bf 8f6f 	isb	sy
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	603b      	str	r3, [r7, #0]
}
 8012362:	bf00      	nop
 8012364:	e7fe      	b.n	8012364 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012366:	4b09      	ldr	r3, [pc, #36]	; (801238c <prvSwitchTimerLists+0xc0>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d1b1      	bne.n	80122d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012370:	4b06      	ldr	r3, [pc, #24]	; (801238c <prvSwitchTimerLists+0xc0>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012376:	4b06      	ldr	r3, [pc, #24]	; (8012390 <prvSwitchTimerLists+0xc4>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4a04      	ldr	r2, [pc, #16]	; (801238c <prvSwitchTimerLists+0xc0>)
 801237c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801237e:	4a04      	ldr	r2, [pc, #16]	; (8012390 <prvSwitchTimerLists+0xc4>)
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	6013      	str	r3, [r2, #0]
}
 8012384:	bf00      	nop
 8012386:	3718      	adds	r7, #24
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20001214 	.word	0x20001214
 8012390:	20001218 	.word	0x20001218

08012394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801239a:	f000 f98b 	bl	80126b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801239e:	4b15      	ldr	r3, [pc, #84]	; (80123f4 <prvCheckForValidListAndQueue+0x60>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d120      	bne.n	80123e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80123a6:	4814      	ldr	r0, [pc, #80]	; (80123f8 <prvCheckForValidListAndQueue+0x64>)
 80123a8:	f7fd f9ce 	bl	800f748 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80123ac:	4813      	ldr	r0, [pc, #76]	; (80123fc <prvCheckForValidListAndQueue+0x68>)
 80123ae:	f7fd f9cb 	bl	800f748 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80123b2:	4b13      	ldr	r3, [pc, #76]	; (8012400 <prvCheckForValidListAndQueue+0x6c>)
 80123b4:	4a10      	ldr	r2, [pc, #64]	; (80123f8 <prvCheckForValidListAndQueue+0x64>)
 80123b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80123b8:	4b12      	ldr	r3, [pc, #72]	; (8012404 <prvCheckForValidListAndQueue+0x70>)
 80123ba:	4a10      	ldr	r2, [pc, #64]	; (80123fc <prvCheckForValidListAndQueue+0x68>)
 80123bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80123be:	2300      	movs	r3, #0
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	4b11      	ldr	r3, [pc, #68]	; (8012408 <prvCheckForValidListAndQueue+0x74>)
 80123c4:	4a11      	ldr	r2, [pc, #68]	; (801240c <prvCheckForValidListAndQueue+0x78>)
 80123c6:	2110      	movs	r1, #16
 80123c8:	200a      	movs	r0, #10
 80123ca:	f7fd fad9 	bl	800f980 <xQueueGenericCreateStatic>
 80123ce:	4603      	mov	r3, r0
 80123d0:	4a08      	ldr	r2, [pc, #32]	; (80123f4 <prvCheckForValidListAndQueue+0x60>)
 80123d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80123d4:	4b07      	ldr	r3, [pc, #28]	; (80123f4 <prvCheckForValidListAndQueue+0x60>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d005      	beq.n	80123e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80123dc:	4b05      	ldr	r3, [pc, #20]	; (80123f4 <prvCheckForValidListAndQueue+0x60>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	490b      	ldr	r1, [pc, #44]	; (8012410 <prvCheckForValidListAndQueue+0x7c>)
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fe f9a8 	bl	8010738 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80123e8:	f000 f994 	bl	8012714 <vPortExitCritical>
}
 80123ec:	bf00      	nop
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	2000121c 	.word	0x2000121c
 80123f8:	200011ec 	.word	0x200011ec
 80123fc:	20001200 	.word	0x20001200
 8012400:	20001214 	.word	0x20001214
 8012404:	20001218 	.word	0x20001218
 8012408:	200012c8 	.word	0x200012c8
 801240c:	20001228 	.word	0x20001228
 8012410:	08014284 	.word	0x08014284

08012414 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b086      	sub	sp, #24
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10a      	bne.n	801243c <pvTimerGetTimerID+0x28>
	__asm volatile
 8012426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	60fb      	str	r3, [r7, #12]
}
 8012438:	bf00      	nop
 801243a:	e7fe      	b.n	801243a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801243c:	f000 f93a 	bl	80126b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	69db      	ldr	r3, [r3, #28]
 8012444:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012446:	f000 f965 	bl	8012714 <vPortExitCritical>

	return pvReturn;
 801244a:	693b      	ldr	r3, [r7, #16]
}
 801244c:	4618      	mov	r0, r3
 801244e:	3718      	adds	r7, #24
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012454:	b480      	push	{r7}
 8012456:	b085      	sub	sp, #20
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	3b04      	subs	r3, #4
 8012464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801246c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3b04      	subs	r3, #4
 8012472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	f023 0201 	bic.w	r2, r3, #1
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	3b04      	subs	r3, #4
 8012482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012484:	4a0c      	ldr	r2, [pc, #48]	; (80124b8 <pxPortInitialiseStack+0x64>)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	3b14      	subs	r3, #20
 801248e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	3b04      	subs	r3, #4
 801249a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f06f 0202 	mvn.w	r2, #2
 80124a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	3b20      	subs	r3, #32
 80124a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80124aa:	68fb      	ldr	r3, [r7, #12]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3714      	adds	r7, #20
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr
 80124b8:	080124bd 	.word	0x080124bd

080124bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80124c6:	4b12      	ldr	r3, [pc, #72]	; (8012510 <prvTaskExitError+0x54>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124ce:	d00a      	beq.n	80124e6 <prvTaskExitError+0x2a>
	__asm volatile
 80124d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d4:	f383 8811 	msr	BASEPRI, r3
 80124d8:	f3bf 8f6f 	isb	sy
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	60fb      	str	r3, [r7, #12]
}
 80124e2:	bf00      	nop
 80124e4:	e7fe      	b.n	80124e4 <prvTaskExitError+0x28>
	__asm volatile
 80124e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ea:	f383 8811 	msr	BASEPRI, r3
 80124ee:	f3bf 8f6f 	isb	sy
 80124f2:	f3bf 8f4f 	dsb	sy
 80124f6:	60bb      	str	r3, [r7, #8]
}
 80124f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80124fa:	bf00      	nop
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d0fc      	beq.n	80124fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012502:	bf00      	nop
 8012504:	bf00      	nop
 8012506:	3714      	adds	r7, #20
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr
 8012510:	2000012c 	.word	0x2000012c
	...

08012520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012520:	4b07      	ldr	r3, [pc, #28]	; (8012540 <pxCurrentTCBConst2>)
 8012522:	6819      	ldr	r1, [r3, #0]
 8012524:	6808      	ldr	r0, [r1, #0]
 8012526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252a:	f380 8809 	msr	PSP, r0
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f04f 0000 	mov.w	r0, #0
 8012536:	f380 8811 	msr	BASEPRI, r0
 801253a:	4770      	bx	lr
 801253c:	f3af 8000 	nop.w

08012540 <pxCurrentTCBConst2>:
 8012540:	20000cec 	.word	0x20000cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012544:	bf00      	nop
 8012546:	bf00      	nop

08012548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012548:	4808      	ldr	r0, [pc, #32]	; (801256c <prvPortStartFirstTask+0x24>)
 801254a:	6800      	ldr	r0, [r0, #0]
 801254c:	6800      	ldr	r0, [r0, #0]
 801254e:	f380 8808 	msr	MSP, r0
 8012552:	f04f 0000 	mov.w	r0, #0
 8012556:	f380 8814 	msr	CONTROL, r0
 801255a:	b662      	cpsie	i
 801255c:	b661      	cpsie	f
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	df00      	svc	0
 8012568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801256a:	bf00      	nop
 801256c:	e000ed08 	.word	0xe000ed08

08012570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b086      	sub	sp, #24
 8012574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012576:	4b46      	ldr	r3, [pc, #280]	; (8012690 <xPortStartScheduler+0x120>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4a46      	ldr	r2, [pc, #280]	; (8012694 <xPortStartScheduler+0x124>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d10a      	bne.n	8012596 <xPortStartScheduler+0x26>
	__asm volatile
 8012580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012584:	f383 8811 	msr	BASEPRI, r3
 8012588:	f3bf 8f6f 	isb	sy
 801258c:	f3bf 8f4f 	dsb	sy
 8012590:	613b      	str	r3, [r7, #16]
}
 8012592:	bf00      	nop
 8012594:	e7fe      	b.n	8012594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012596:	4b3e      	ldr	r3, [pc, #248]	; (8012690 <xPortStartScheduler+0x120>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a3f      	ldr	r2, [pc, #252]	; (8012698 <xPortStartScheduler+0x128>)
 801259c:	4293      	cmp	r3, r2
 801259e:	d10a      	bne.n	80125b6 <xPortStartScheduler+0x46>
	__asm volatile
 80125a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	60fb      	str	r3, [r7, #12]
}
 80125b2:	bf00      	nop
 80125b4:	e7fe      	b.n	80125b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80125b6:	4b39      	ldr	r3, [pc, #228]	; (801269c <xPortStartScheduler+0x12c>)
 80125b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	22ff      	movs	r2, #255	; 0xff
 80125c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80125d0:	78fb      	ldrb	r3, [r7, #3]
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80125d8:	b2da      	uxtb	r2, r3
 80125da:	4b31      	ldr	r3, [pc, #196]	; (80126a0 <xPortStartScheduler+0x130>)
 80125dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80125de:	4b31      	ldr	r3, [pc, #196]	; (80126a4 <xPortStartScheduler+0x134>)
 80125e0:	2207      	movs	r2, #7
 80125e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125e4:	e009      	b.n	80125fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80125e6:	4b2f      	ldr	r3, [pc, #188]	; (80126a4 <xPortStartScheduler+0x134>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	3b01      	subs	r3, #1
 80125ec:	4a2d      	ldr	r2, [pc, #180]	; (80126a4 <xPortStartScheduler+0x134>)
 80125ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80125f0:	78fb      	ldrb	r3, [r7, #3]
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	005b      	lsls	r3, r3, #1
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125fa:	78fb      	ldrb	r3, [r7, #3]
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012602:	2b80      	cmp	r3, #128	; 0x80
 8012604:	d0ef      	beq.n	80125e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012606:	4b27      	ldr	r3, [pc, #156]	; (80126a4 <xPortStartScheduler+0x134>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f1c3 0307 	rsb	r3, r3, #7
 801260e:	2b04      	cmp	r3, #4
 8012610:	d00a      	beq.n	8012628 <xPortStartScheduler+0xb8>
	__asm volatile
 8012612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012616:	f383 8811 	msr	BASEPRI, r3
 801261a:	f3bf 8f6f 	isb	sy
 801261e:	f3bf 8f4f 	dsb	sy
 8012622:	60bb      	str	r3, [r7, #8]
}
 8012624:	bf00      	nop
 8012626:	e7fe      	b.n	8012626 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012628:	4b1e      	ldr	r3, [pc, #120]	; (80126a4 <xPortStartScheduler+0x134>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	021b      	lsls	r3, r3, #8
 801262e:	4a1d      	ldr	r2, [pc, #116]	; (80126a4 <xPortStartScheduler+0x134>)
 8012630:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012632:	4b1c      	ldr	r3, [pc, #112]	; (80126a4 <xPortStartScheduler+0x134>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801263a:	4a1a      	ldr	r2, [pc, #104]	; (80126a4 <xPortStartScheduler+0x134>)
 801263c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	b2da      	uxtb	r2, r3
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012646:	4b18      	ldr	r3, [pc, #96]	; (80126a8 <xPortStartScheduler+0x138>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4a17      	ldr	r2, [pc, #92]	; (80126a8 <xPortStartScheduler+0x138>)
 801264c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012652:	4b15      	ldr	r3, [pc, #84]	; (80126a8 <xPortStartScheduler+0x138>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	4a14      	ldr	r2, [pc, #80]	; (80126a8 <xPortStartScheduler+0x138>)
 8012658:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801265c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801265e:	f000 f8dd 	bl	801281c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012662:	4b12      	ldr	r3, [pc, #72]	; (80126ac <xPortStartScheduler+0x13c>)
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012668:	f000 f8fc 	bl	8012864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801266c:	4b10      	ldr	r3, [pc, #64]	; (80126b0 <xPortStartScheduler+0x140>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4a0f      	ldr	r2, [pc, #60]	; (80126b0 <xPortStartScheduler+0x140>)
 8012672:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012676:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012678:	f7ff ff66 	bl	8012548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801267c:	f7fe fc8c 	bl	8010f98 <vTaskSwitchContext>
	prvTaskExitError();
 8012680:	f7ff ff1c 	bl	80124bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3718      	adds	r7, #24
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	e000ed00 	.word	0xe000ed00
 8012694:	410fc271 	.word	0x410fc271
 8012698:	410fc270 	.word	0x410fc270
 801269c:	e000e400 	.word	0xe000e400
 80126a0:	20001318 	.word	0x20001318
 80126a4:	2000131c 	.word	0x2000131c
 80126a8:	e000ed20 	.word	0xe000ed20
 80126ac:	2000012c 	.word	0x2000012c
 80126b0:	e000ef34 	.word	0xe000ef34

080126b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80126b4:	b480      	push	{r7}
 80126b6:	b083      	sub	sp, #12
 80126b8:	af00      	add	r7, sp, #0
	__asm volatile
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	607b      	str	r3, [r7, #4]
}
 80126cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80126ce:	4b0f      	ldr	r3, [pc, #60]	; (801270c <vPortEnterCritical+0x58>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	3301      	adds	r3, #1
 80126d4:	4a0d      	ldr	r2, [pc, #52]	; (801270c <vPortEnterCritical+0x58>)
 80126d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80126d8:	4b0c      	ldr	r3, [pc, #48]	; (801270c <vPortEnterCritical+0x58>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d10f      	bne.n	8012700 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80126e0:	4b0b      	ldr	r3, [pc, #44]	; (8012710 <vPortEnterCritical+0x5c>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00a      	beq.n	8012700 <vPortEnterCritical+0x4c>
	__asm volatile
 80126ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ee:	f383 8811 	msr	BASEPRI, r3
 80126f2:	f3bf 8f6f 	isb	sy
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	603b      	str	r3, [r7, #0]
}
 80126fc:	bf00      	nop
 80126fe:	e7fe      	b.n	80126fe <vPortEnterCritical+0x4a>
	}
}
 8012700:	bf00      	nop
 8012702:	370c      	adds	r7, #12
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr
 801270c:	2000012c 	.word	0x2000012c
 8012710:	e000ed04 	.word	0xe000ed04

08012714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012714:	b480      	push	{r7}
 8012716:	b083      	sub	sp, #12
 8012718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801271a:	4b12      	ldr	r3, [pc, #72]	; (8012764 <vPortExitCritical+0x50>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d10a      	bne.n	8012738 <vPortExitCritical+0x24>
	__asm volatile
 8012722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012726:	f383 8811 	msr	BASEPRI, r3
 801272a:	f3bf 8f6f 	isb	sy
 801272e:	f3bf 8f4f 	dsb	sy
 8012732:	607b      	str	r3, [r7, #4]
}
 8012734:	bf00      	nop
 8012736:	e7fe      	b.n	8012736 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012738:	4b0a      	ldr	r3, [pc, #40]	; (8012764 <vPortExitCritical+0x50>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	3b01      	subs	r3, #1
 801273e:	4a09      	ldr	r2, [pc, #36]	; (8012764 <vPortExitCritical+0x50>)
 8012740:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012742:	4b08      	ldr	r3, [pc, #32]	; (8012764 <vPortExitCritical+0x50>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d105      	bne.n	8012756 <vPortExitCritical+0x42>
 801274a:	2300      	movs	r3, #0
 801274c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	f383 8811 	msr	BASEPRI, r3
}
 8012754:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012756:	bf00      	nop
 8012758:	370c      	adds	r7, #12
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	2000012c 	.word	0x2000012c
	...

08012770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012770:	f3ef 8009 	mrs	r0, PSP
 8012774:	f3bf 8f6f 	isb	sy
 8012778:	4b15      	ldr	r3, [pc, #84]	; (80127d0 <pxCurrentTCBConst>)
 801277a:	681a      	ldr	r2, [r3, #0]
 801277c:	f01e 0f10 	tst.w	lr, #16
 8012780:	bf08      	it	eq
 8012782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278a:	6010      	str	r0, [r2, #0]
 801278c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012790:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012794:	f380 8811 	msr	BASEPRI, r0
 8012798:	f3bf 8f4f 	dsb	sy
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f7fe fbfa 	bl	8010f98 <vTaskSwitchContext>
 80127a4:	f04f 0000 	mov.w	r0, #0
 80127a8:	f380 8811 	msr	BASEPRI, r0
 80127ac:	bc09      	pop	{r0, r3}
 80127ae:	6819      	ldr	r1, [r3, #0]
 80127b0:	6808      	ldr	r0, [r1, #0]
 80127b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b6:	f01e 0f10 	tst.w	lr, #16
 80127ba:	bf08      	it	eq
 80127bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80127c0:	f380 8809 	msr	PSP, r0
 80127c4:	f3bf 8f6f 	isb	sy
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	f3af 8000 	nop.w

080127d0 <pxCurrentTCBConst>:
 80127d0:	20000cec 	.word	0x20000cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80127d4:	bf00      	nop
 80127d6:	bf00      	nop

080127d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
	__asm volatile
 80127de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e2:	f383 8811 	msr	BASEPRI, r3
 80127e6:	f3bf 8f6f 	isb	sy
 80127ea:	f3bf 8f4f 	dsb	sy
 80127ee:	607b      	str	r3, [r7, #4]
}
 80127f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80127f2:	f7fe fb17 	bl	8010e24 <xTaskIncrementTick>
 80127f6:	4603      	mov	r3, r0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d003      	beq.n	8012804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80127fc:	4b06      	ldr	r3, [pc, #24]	; (8012818 <xPortSysTickHandler+0x40>)
 80127fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	2300      	movs	r3, #0
 8012806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	f383 8811 	msr	BASEPRI, r3
}
 801280e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012810:	bf00      	nop
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	e000ed04 	.word	0xe000ed04

0801281c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801281c:	b480      	push	{r7}
 801281e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012820:	4b0b      	ldr	r3, [pc, #44]	; (8012850 <vPortSetupTimerInterrupt+0x34>)
 8012822:	2200      	movs	r2, #0
 8012824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012826:	4b0b      	ldr	r3, [pc, #44]	; (8012854 <vPortSetupTimerInterrupt+0x38>)
 8012828:	2200      	movs	r2, #0
 801282a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801282c:	4b0a      	ldr	r3, [pc, #40]	; (8012858 <vPortSetupTimerInterrupt+0x3c>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	4a0a      	ldr	r2, [pc, #40]	; (801285c <vPortSetupTimerInterrupt+0x40>)
 8012832:	fba2 2303 	umull	r2, r3, r2, r3
 8012836:	099b      	lsrs	r3, r3, #6
 8012838:	4a09      	ldr	r2, [pc, #36]	; (8012860 <vPortSetupTimerInterrupt+0x44>)
 801283a:	3b01      	subs	r3, #1
 801283c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801283e:	4b04      	ldr	r3, [pc, #16]	; (8012850 <vPortSetupTimerInterrupt+0x34>)
 8012840:	2207      	movs	r2, #7
 8012842:	601a      	str	r2, [r3, #0]
}
 8012844:	bf00      	nop
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop
 8012850:	e000e010 	.word	0xe000e010
 8012854:	e000e018 	.word	0xe000e018
 8012858:	20000010 	.word	0x20000010
 801285c:	10624dd3 	.word	0x10624dd3
 8012860:	e000e014 	.word	0xe000e014

08012864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012874 <vPortEnableVFP+0x10>
 8012868:	6801      	ldr	r1, [r0, #0]
 801286a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801286e:	6001      	str	r1, [r0, #0]
 8012870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012872:	bf00      	nop
 8012874:	e000ed88 	.word	0xe000ed88

08012878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801287e:	f3ef 8305 	mrs	r3, IPSR
 8012882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2b0f      	cmp	r3, #15
 8012888:	d914      	bls.n	80128b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801288a:	4a17      	ldr	r2, [pc, #92]	; (80128e8 <vPortValidateInterruptPriority+0x70>)
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	4413      	add	r3, r2
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012894:	4b15      	ldr	r3, [pc, #84]	; (80128ec <vPortValidateInterruptPriority+0x74>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	7afa      	ldrb	r2, [r7, #11]
 801289a:	429a      	cmp	r2, r3
 801289c:	d20a      	bcs.n	80128b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a2:	f383 8811 	msr	BASEPRI, r3
 80128a6:	f3bf 8f6f 	isb	sy
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	607b      	str	r3, [r7, #4]
}
 80128b0:	bf00      	nop
 80128b2:	e7fe      	b.n	80128b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80128b4:	4b0e      	ldr	r3, [pc, #56]	; (80128f0 <vPortValidateInterruptPriority+0x78>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80128bc:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <vPortValidateInterruptPriority+0x7c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d90a      	bls.n	80128da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80128c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c8:	f383 8811 	msr	BASEPRI, r3
 80128cc:	f3bf 8f6f 	isb	sy
 80128d0:	f3bf 8f4f 	dsb	sy
 80128d4:	603b      	str	r3, [r7, #0]
}
 80128d6:	bf00      	nop
 80128d8:	e7fe      	b.n	80128d8 <vPortValidateInterruptPriority+0x60>
	}
 80128da:	bf00      	nop
 80128dc:	3714      	adds	r7, #20
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	e000e3f0 	.word	0xe000e3f0
 80128ec:	20001318 	.word	0x20001318
 80128f0:	e000ed0c 	.word	0xe000ed0c
 80128f4:	2000131c 	.word	0x2000131c

080128f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b08a      	sub	sp, #40	; 0x28
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012900:	2300      	movs	r3, #0
 8012902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012904:	f7fe f9d2 	bl	8010cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012908:	4b5b      	ldr	r3, [pc, #364]	; (8012a78 <pvPortMalloc+0x180>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d101      	bne.n	8012914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012910:	f000 f920 	bl	8012b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012914:	4b59      	ldr	r3, [pc, #356]	; (8012a7c <pvPortMalloc+0x184>)
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	4013      	ands	r3, r2
 801291c:	2b00      	cmp	r3, #0
 801291e:	f040 8093 	bne.w	8012a48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d01d      	beq.n	8012964 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012928:	2208      	movs	r2, #8
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4413      	add	r3, r2
 801292e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f003 0307 	and.w	r3, r3, #7
 8012936:	2b00      	cmp	r3, #0
 8012938:	d014      	beq.n	8012964 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f023 0307 	bic.w	r3, r3, #7
 8012940:	3308      	adds	r3, #8
 8012942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f003 0307 	and.w	r3, r3, #7
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00a      	beq.n	8012964 <pvPortMalloc+0x6c>
	__asm volatile
 801294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012952:	f383 8811 	msr	BASEPRI, r3
 8012956:	f3bf 8f6f 	isb	sy
 801295a:	f3bf 8f4f 	dsb	sy
 801295e:	617b      	str	r3, [r7, #20]
}
 8012960:	bf00      	nop
 8012962:	e7fe      	b.n	8012962 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d06e      	beq.n	8012a48 <pvPortMalloc+0x150>
 801296a:	4b45      	ldr	r3, [pc, #276]	; (8012a80 <pvPortMalloc+0x188>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	429a      	cmp	r2, r3
 8012972:	d869      	bhi.n	8012a48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012974:	4b43      	ldr	r3, [pc, #268]	; (8012a84 <pvPortMalloc+0x18c>)
 8012976:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012978:	4b42      	ldr	r3, [pc, #264]	; (8012a84 <pvPortMalloc+0x18c>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801297e:	e004      	b.n	801298a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012982:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	429a      	cmp	r2, r3
 8012992:	d903      	bls.n	801299c <pvPortMalloc+0xa4>
 8012994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d1f1      	bne.n	8012980 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801299c:	4b36      	ldr	r3, [pc, #216]	; (8012a78 <pvPortMalloc+0x180>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d050      	beq.n	8012a48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80129a6:	6a3b      	ldr	r3, [r7, #32]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2208      	movs	r2, #8
 80129ac:	4413      	add	r3, r2
 80129ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80129b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	6a3b      	ldr	r3, [r7, #32]
 80129b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80129b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	1ad2      	subs	r2, r2, r3
 80129c0:	2308      	movs	r3, #8
 80129c2:	005b      	lsls	r3, r3, #1
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d91f      	bls.n	8012a08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80129c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4413      	add	r3, r2
 80129ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	f003 0307 	and.w	r3, r3, #7
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d00a      	beq.n	80129f0 <pvPortMalloc+0xf8>
	__asm volatile
 80129da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129de:	f383 8811 	msr	BASEPRI, r3
 80129e2:	f3bf 8f6f 	isb	sy
 80129e6:	f3bf 8f4f 	dsb	sy
 80129ea:	613b      	str	r3, [r7, #16]
}
 80129ec:	bf00      	nop
 80129ee:	e7fe      	b.n	80129ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f2:	685a      	ldr	r2, [r3, #4]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	1ad2      	subs	r2, r2, r3
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012a02:	69b8      	ldr	r0, [r7, #24]
 8012a04:	f000 f908 	bl	8012c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012a08:	4b1d      	ldr	r3, [pc, #116]	; (8012a80 <pvPortMalloc+0x188>)
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	1ad3      	subs	r3, r2, r3
 8012a12:	4a1b      	ldr	r2, [pc, #108]	; (8012a80 <pvPortMalloc+0x188>)
 8012a14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012a16:	4b1a      	ldr	r3, [pc, #104]	; (8012a80 <pvPortMalloc+0x188>)
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	4b1b      	ldr	r3, [pc, #108]	; (8012a88 <pvPortMalloc+0x190>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d203      	bcs.n	8012a2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012a22:	4b17      	ldr	r3, [pc, #92]	; (8012a80 <pvPortMalloc+0x188>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	4a18      	ldr	r2, [pc, #96]	; (8012a88 <pvPortMalloc+0x190>)
 8012a28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2c:	685a      	ldr	r2, [r3, #4]
 8012a2e:	4b13      	ldr	r3, [pc, #76]	; (8012a7c <pvPortMalloc+0x184>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	431a      	orrs	r2, r3
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012a3e:	4b13      	ldr	r3, [pc, #76]	; (8012a8c <pvPortMalloc+0x194>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	3301      	adds	r3, #1
 8012a44:	4a11      	ldr	r2, [pc, #68]	; (8012a8c <pvPortMalloc+0x194>)
 8012a46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a48:	f7fe f93e 	bl	8010cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	f003 0307 	and.w	r3, r3, #7
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00a      	beq.n	8012a6c <pvPortMalloc+0x174>
	__asm volatile
 8012a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	f3bf 8f4f 	dsb	sy
 8012a66:	60fb      	str	r3, [r7, #12]
}
 8012a68:	bf00      	nop
 8012a6a:	e7fe      	b.n	8012a6a <pvPortMalloc+0x172>
	return pvReturn;
 8012a6c:	69fb      	ldr	r3, [r7, #28]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3728      	adds	r7, #40	; 0x28
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	20003a38 	.word	0x20003a38
 8012a7c:	20003a4c 	.word	0x20003a4c
 8012a80:	20003a3c 	.word	0x20003a3c
 8012a84:	20003a30 	.word	0x20003a30
 8012a88:	20003a40 	.word	0x20003a40
 8012a8c:	20003a44 	.word	0x20003a44

08012a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d04d      	beq.n	8012b3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012aa2:	2308      	movs	r3, #8
 8012aa4:	425b      	negs	r3, r3
 8012aa6:	697a      	ldr	r2, [r7, #20]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	685a      	ldr	r2, [r3, #4]
 8012ab4:	4b24      	ldr	r3, [pc, #144]	; (8012b48 <vPortFree+0xb8>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4013      	ands	r3, r2
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d10a      	bne.n	8012ad4 <vPortFree+0x44>
	__asm volatile
 8012abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	60fb      	str	r3, [r7, #12]
}
 8012ad0:	bf00      	nop
 8012ad2:	e7fe      	b.n	8012ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d00a      	beq.n	8012af2 <vPortFree+0x62>
	__asm volatile
 8012adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae0:	f383 8811 	msr	BASEPRI, r3
 8012ae4:	f3bf 8f6f 	isb	sy
 8012ae8:	f3bf 8f4f 	dsb	sy
 8012aec:	60bb      	str	r3, [r7, #8]
}
 8012aee:	bf00      	nop
 8012af0:	e7fe      	b.n	8012af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	685a      	ldr	r2, [r3, #4]
 8012af6:	4b14      	ldr	r3, [pc, #80]	; (8012b48 <vPortFree+0xb8>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4013      	ands	r3, r2
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d01e      	beq.n	8012b3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d11a      	bne.n	8012b3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	685a      	ldr	r2, [r3, #4]
 8012b0c:	4b0e      	ldr	r3, [pc, #56]	; (8012b48 <vPortFree+0xb8>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	43db      	mvns	r3, r3
 8012b12:	401a      	ands	r2, r3
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012b18:	f7fe f8c8 	bl	8010cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	685a      	ldr	r2, [r3, #4]
 8012b20:	4b0a      	ldr	r3, [pc, #40]	; (8012b4c <vPortFree+0xbc>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	4413      	add	r3, r2
 8012b26:	4a09      	ldr	r2, [pc, #36]	; (8012b4c <vPortFree+0xbc>)
 8012b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012b2a:	6938      	ldr	r0, [r7, #16]
 8012b2c:	f000 f874 	bl	8012c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012b30:	4b07      	ldr	r3, [pc, #28]	; (8012b50 <vPortFree+0xc0>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	3301      	adds	r3, #1
 8012b36:	4a06      	ldr	r2, [pc, #24]	; (8012b50 <vPortFree+0xc0>)
 8012b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012b3a:	f7fe f8c5 	bl	8010cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012b3e:	bf00      	nop
 8012b40:	3718      	adds	r7, #24
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	20003a4c 	.word	0x20003a4c
 8012b4c:	20003a3c 	.word	0x20003a3c
 8012b50:	20003a48 	.word	0x20003a48

08012b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012b54:	b480      	push	{r7}
 8012b56:	b085      	sub	sp, #20
 8012b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012b5a:	f242 7310 	movw	r3, #10000	; 0x2710
 8012b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012b60:	4b27      	ldr	r3, [pc, #156]	; (8012c00 <prvHeapInit+0xac>)
 8012b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f003 0307 	and.w	r3, r3, #7
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d00c      	beq.n	8012b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	3307      	adds	r3, #7
 8012b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f023 0307 	bic.w	r3, r3, #7
 8012b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012b7c:	68ba      	ldr	r2, [r7, #8]
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	1ad3      	subs	r3, r2, r3
 8012b82:	4a1f      	ldr	r2, [pc, #124]	; (8012c00 <prvHeapInit+0xac>)
 8012b84:	4413      	add	r3, r2
 8012b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b8c:	4a1d      	ldr	r2, [pc, #116]	; (8012c04 <prvHeapInit+0xb0>)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b92:	4b1c      	ldr	r3, [pc, #112]	; (8012c04 <prvHeapInit+0xb0>)
 8012b94:	2200      	movs	r2, #0
 8012b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	68ba      	ldr	r2, [r7, #8]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012ba0:	2208      	movs	r2, #8
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	1a9b      	subs	r3, r3, r2
 8012ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	f023 0307 	bic.w	r3, r3, #7
 8012bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	4a15      	ldr	r2, [pc, #84]	; (8012c08 <prvHeapInit+0xb4>)
 8012bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012bb6:	4b14      	ldr	r3, [pc, #80]	; (8012c08 <prvHeapInit+0xb4>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012bbe:	4b12      	ldr	r3, [pc, #72]	; (8012c08 <prvHeapInit+0xb4>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	68fa      	ldr	r2, [r7, #12]
 8012bce:	1ad2      	subs	r2, r2, r3
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012bd4:	4b0c      	ldr	r3, [pc, #48]	; (8012c08 <prvHeapInit+0xb4>)
 8012bd6:	681a      	ldr	r2, [r3, #0]
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	4a0a      	ldr	r2, [pc, #40]	; (8012c0c <prvHeapInit+0xb8>)
 8012be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	4a09      	ldr	r2, [pc, #36]	; (8012c10 <prvHeapInit+0xbc>)
 8012bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012bec:	4b09      	ldr	r3, [pc, #36]	; (8012c14 <prvHeapInit+0xc0>)
 8012bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012bf2:	601a      	str	r2, [r3, #0]
}
 8012bf4:	bf00      	nop
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr
 8012c00:	20001320 	.word	0x20001320
 8012c04:	20003a30 	.word	0x20003a30
 8012c08:	20003a38 	.word	0x20003a38
 8012c0c:	20003a40 	.word	0x20003a40
 8012c10:	20003a3c 	.word	0x20003a3c
 8012c14:	20003a4c 	.word	0x20003a4c

08012c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b085      	sub	sp, #20
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012c20:	4b28      	ldr	r3, [pc, #160]	; (8012cc4 <prvInsertBlockIntoFreeList+0xac>)
 8012c22:	60fb      	str	r3, [r7, #12]
 8012c24:	e002      	b.n	8012c2c <prvInsertBlockIntoFreeList+0x14>
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	60fb      	str	r3, [r7, #12]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d8f7      	bhi.n	8012c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	4413      	add	r3, r2
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d108      	bne.n	8012c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	685a      	ldr	r2, [r3, #4]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	441a      	add	r2, r3
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	685b      	ldr	r3, [r3, #4]
 8012c62:	68ba      	ldr	r2, [r7, #8]
 8012c64:	441a      	add	r2, r3
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d118      	bne.n	8012ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	4b15      	ldr	r3, [pc, #84]	; (8012cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d00d      	beq.n	8012c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	685a      	ldr	r2, [r3, #4]
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	441a      	add	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	601a      	str	r2, [r3, #0]
 8012c94:	e008      	b.n	8012ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c96:	4b0c      	ldr	r3, [pc, #48]	; (8012cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	e003      	b.n	8012ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ca8:	68fa      	ldr	r2, [r7, #12]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d002      	beq.n	8012cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cb6:	bf00      	nop
 8012cb8:	3714      	adds	r7, #20
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop
 8012cc4:	20003a30 	.word	0x20003a30
 8012cc8:	20003a38 	.word	0x20003a38

08012ccc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	4912      	ldr	r1, [pc, #72]	; (8012d1c <MX_USB_Device_Init+0x50>)
 8012cd4:	4812      	ldr	r0, [pc, #72]	; (8012d20 <MX_USB_Device_Init+0x54>)
 8012cd6:	f7fa f841 	bl	800cd5c <USBD_Init>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d001      	beq.n	8012ce4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012ce0:	f7ee feb4 	bl	8001a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012ce4:	490f      	ldr	r1, [pc, #60]	; (8012d24 <MX_USB_Device_Init+0x58>)
 8012ce6:	480e      	ldr	r0, [pc, #56]	; (8012d20 <MX_USB_Device_Init+0x54>)
 8012ce8:	f7fa f868 	bl	800cdbc <USBD_RegisterClass>
 8012cec:	4603      	mov	r3, r0
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d001      	beq.n	8012cf6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012cf2:	f7ee feab 	bl	8001a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012cf6:	490c      	ldr	r1, [pc, #48]	; (8012d28 <MX_USB_Device_Init+0x5c>)
 8012cf8:	4809      	ldr	r0, [pc, #36]	; (8012d20 <MX_USB_Device_Init+0x54>)
 8012cfa:	f7f9 ffb9 	bl	800cc70 <USBD_CDC_RegisterInterface>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d001      	beq.n	8012d08 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012d04:	f7ee fea2 	bl	8001a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012d08:	4805      	ldr	r0, [pc, #20]	; (8012d20 <MX_USB_Device_Init+0x54>)
 8012d0a:	f7fa f87e 	bl	800ce0a <USBD_Start>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d001      	beq.n	8012d18 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012d14:	f7ee fe9a 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012d18:	bf00      	nop
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	20000144 	.word	0x20000144
 8012d20:	2000404c 	.word	0x2000404c
 8012d24:	20000028 	.word	0x20000028
 8012d28:	20000130 	.word	0x20000130

08012d2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012d30:	2200      	movs	r2, #0
 8012d32:	4905      	ldr	r1, [pc, #20]	; (8012d48 <CDC_Init_FS+0x1c>)
 8012d34:	4805      	ldr	r0, [pc, #20]	; (8012d4c <CDC_Init_FS+0x20>)
 8012d36:	f7f9 ffb0 	bl	800cc9a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012d3a:	4905      	ldr	r1, [pc, #20]	; (8012d50 <CDC_Init_FS+0x24>)
 8012d3c:	4803      	ldr	r0, [pc, #12]	; (8012d4c <CDC_Init_FS+0x20>)
 8012d3e:	f7f9 ffca 	bl	800ccd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012d42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	20004b1c 	.word	0x20004b1c
 8012d4c:	2000404c 	.word	0x2000404c
 8012d50:	2000431c 	.word	0x2000431c

08012d54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012d54:	b480      	push	{r7}
 8012d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012d58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	6039      	str	r1, [r7, #0]
 8012d6e:	71fb      	strb	r3, [r7, #7]
 8012d70:	4613      	mov	r3, r2
 8012d72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012d74:	79fb      	ldrb	r3, [r7, #7]
 8012d76:	2b23      	cmp	r3, #35	; 0x23
 8012d78:	d84a      	bhi.n	8012e10 <CDC_Control_FS+0xac>
 8012d7a:	a201      	add	r2, pc, #4	; (adr r2, 8012d80 <CDC_Control_FS+0x1c>)
 8012d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d80:	08012e11 	.word	0x08012e11
 8012d84:	08012e11 	.word	0x08012e11
 8012d88:	08012e11 	.word	0x08012e11
 8012d8c:	08012e11 	.word	0x08012e11
 8012d90:	08012e11 	.word	0x08012e11
 8012d94:	08012e11 	.word	0x08012e11
 8012d98:	08012e11 	.word	0x08012e11
 8012d9c:	08012e11 	.word	0x08012e11
 8012da0:	08012e11 	.word	0x08012e11
 8012da4:	08012e11 	.word	0x08012e11
 8012da8:	08012e11 	.word	0x08012e11
 8012dac:	08012e11 	.word	0x08012e11
 8012db0:	08012e11 	.word	0x08012e11
 8012db4:	08012e11 	.word	0x08012e11
 8012db8:	08012e11 	.word	0x08012e11
 8012dbc:	08012e11 	.word	0x08012e11
 8012dc0:	08012e11 	.word	0x08012e11
 8012dc4:	08012e11 	.word	0x08012e11
 8012dc8:	08012e11 	.word	0x08012e11
 8012dcc:	08012e11 	.word	0x08012e11
 8012dd0:	08012e11 	.word	0x08012e11
 8012dd4:	08012e11 	.word	0x08012e11
 8012dd8:	08012e11 	.word	0x08012e11
 8012ddc:	08012e11 	.word	0x08012e11
 8012de0:	08012e11 	.word	0x08012e11
 8012de4:	08012e11 	.word	0x08012e11
 8012de8:	08012e11 	.word	0x08012e11
 8012dec:	08012e11 	.word	0x08012e11
 8012df0:	08012e11 	.word	0x08012e11
 8012df4:	08012e11 	.word	0x08012e11
 8012df8:	08012e11 	.word	0x08012e11
 8012dfc:	08012e11 	.word	0x08012e11
 8012e00:	08012e11 	.word	0x08012e11
 8012e04:	08012e11 	.word	0x08012e11
 8012e08:	08012e11 	.word	0x08012e11
 8012e0c:	08012e11 	.word	0x08012e11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012e10:	bf00      	nop
  }

  return (USBD_OK);
 8012e12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr

08012e20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012e2a:	6879      	ldr	r1, [r7, #4]
 8012e2c:	4805      	ldr	r0, [pc, #20]	; (8012e44 <CDC_Receive_FS+0x24>)
 8012e2e:	f7f9 ff52 	bl	800ccd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012e32:	4804      	ldr	r0, [pc, #16]	; (8012e44 <CDC_Receive_FS+0x24>)
 8012e34:	f7f9 ff68 	bl	800cd08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012e38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	2000404c 	.word	0x2000404c

08012e48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b087      	sub	sp, #28
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	4613      	mov	r3, r2
 8012e54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012e56:	2300      	movs	r3, #0
 8012e58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	371c      	adds	r7, #28
 8012e62:	46bd      	mov	sp, r7
 8012e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e68:	4770      	bx	lr
	...

08012e6c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	4603      	mov	r3, r0
 8012e74:	6039      	str	r1, [r7, #0]
 8012e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	2212      	movs	r2, #18
 8012e7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012e7e:	4b03      	ldr	r3, [pc, #12]	; (8012e8c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	370c      	adds	r7, #12
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr
 8012e8c:	20000164 	.word	0x20000164

08012e90 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	6039      	str	r1, [r7, #0]
 8012e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2204      	movs	r2, #4
 8012ea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012ea2:	4b03      	ldr	r3, [pc, #12]	; (8012eb0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr
 8012eb0:	20000178 	.word	0x20000178

08012eb4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	4603      	mov	r3, r0
 8012ebc:	6039      	str	r1, [r7, #0]
 8012ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ec0:	79fb      	ldrb	r3, [r7, #7]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d105      	bne.n	8012ed2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	4907      	ldr	r1, [pc, #28]	; (8012ee8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012eca:	4808      	ldr	r0, [pc, #32]	; (8012eec <USBD_CDC_ProductStrDescriptor+0x38>)
 8012ecc:	f7fa ff85 	bl	800ddda <USBD_GetString>
 8012ed0:	e004      	b.n	8012edc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012ed2:	683a      	ldr	r2, [r7, #0]
 8012ed4:	4904      	ldr	r1, [pc, #16]	; (8012ee8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012ed6:	4805      	ldr	r0, [pc, #20]	; (8012eec <USBD_CDC_ProductStrDescriptor+0x38>)
 8012ed8:	f7fa ff7f 	bl	800ddda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012edc:	4b02      	ldr	r3, [pc, #8]	; (8012ee8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3708      	adds	r7, #8
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	2000531c 	.word	0x2000531c
 8012eec:	0801428c 	.word	0x0801428c

08012ef0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	6039      	str	r1, [r7, #0]
 8012efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012efc:	683a      	ldr	r2, [r7, #0]
 8012efe:	4904      	ldr	r1, [pc, #16]	; (8012f10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012f00:	4804      	ldr	r0, [pc, #16]	; (8012f14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012f02:	f7fa ff6a 	bl	800ddda <USBD_GetString>
  return USBD_StrDesc;
 8012f06:	4b02      	ldr	r3, [pc, #8]	; (8012f10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	2000531c 	.word	0x2000531c
 8012f14:	080142a4 	.word	0x080142a4

08012f18 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	4603      	mov	r3, r0
 8012f20:	6039      	str	r1, [r7, #0]
 8012f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	221a      	movs	r2, #26
 8012f28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012f2a:	f000 f843 	bl	8012fb4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012f2e:	4b02      	ldr	r3, [pc, #8]	; (8012f38 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	2000017c 	.word	0x2000017c

08012f3c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	4603      	mov	r3, r0
 8012f44:	6039      	str	r1, [r7, #0]
 8012f46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012f48:	79fb      	ldrb	r3, [r7, #7]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d105      	bne.n	8012f5a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	4907      	ldr	r1, [pc, #28]	; (8012f70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012f52:	4808      	ldr	r0, [pc, #32]	; (8012f74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012f54:	f7fa ff41 	bl	800ddda <USBD_GetString>
 8012f58:	e004      	b.n	8012f64 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012f5a:	683a      	ldr	r2, [r7, #0]
 8012f5c:	4904      	ldr	r1, [pc, #16]	; (8012f70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012f5e:	4805      	ldr	r0, [pc, #20]	; (8012f74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012f60:	f7fa ff3b 	bl	800ddda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012f64:	4b02      	ldr	r3, [pc, #8]	; (8012f70 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3708      	adds	r7, #8
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	2000531c 	.word	0x2000531c
 8012f74:	080142b8 	.word	0x080142b8

08012f78 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	4603      	mov	r3, r0
 8012f80:	6039      	str	r1, [r7, #0]
 8012f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d105      	bne.n	8012f96 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012f8a:	683a      	ldr	r2, [r7, #0]
 8012f8c:	4907      	ldr	r1, [pc, #28]	; (8012fac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012f8e:	4808      	ldr	r0, [pc, #32]	; (8012fb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012f90:	f7fa ff23 	bl	800ddda <USBD_GetString>
 8012f94:	e004      	b.n	8012fa0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012f96:	683a      	ldr	r2, [r7, #0]
 8012f98:	4904      	ldr	r1, [pc, #16]	; (8012fac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012f9a:	4805      	ldr	r0, [pc, #20]	; (8012fb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012f9c:	f7fa ff1d 	bl	800ddda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012fa0:	4b02      	ldr	r3, [pc, #8]	; (8012fac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3708      	adds	r7, #8
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}
 8012faa:	bf00      	nop
 8012fac:	2000531c 	.word	0x2000531c
 8012fb0:	080142c4 	.word	0x080142c4

08012fb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012fba:	4b0f      	ldr	r3, [pc, #60]	; (8012ff8 <Get_SerialNum+0x44>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012fc0:	4b0e      	ldr	r3, [pc, #56]	; (8012ffc <Get_SerialNum+0x48>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012fc6:	4b0e      	ldr	r3, [pc, #56]	; (8013000 <Get_SerialNum+0x4c>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d009      	beq.n	8012fee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012fda:	2208      	movs	r2, #8
 8012fdc:	4909      	ldr	r1, [pc, #36]	; (8013004 <Get_SerialNum+0x50>)
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	f000 f814 	bl	801300c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012fe4:	2204      	movs	r2, #4
 8012fe6:	4908      	ldr	r1, [pc, #32]	; (8013008 <Get_SerialNum+0x54>)
 8012fe8:	68b8      	ldr	r0, [r7, #8]
 8012fea:	f000 f80f 	bl	801300c <IntToUnicode>
  }
}
 8012fee:	bf00      	nop
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	1fff7590 	.word	0x1fff7590
 8012ffc:	1fff7594 	.word	0x1fff7594
 8013000:	1fff7598 	.word	0x1fff7598
 8013004:	2000017e 	.word	0x2000017e
 8013008:	2000018e 	.word	0x2000018e

0801300c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801300c:	b480      	push	{r7}
 801300e:	b087      	sub	sp, #28
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	4613      	mov	r3, r2
 8013018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801301e:	2300      	movs	r3, #0
 8013020:	75fb      	strb	r3, [r7, #23]
 8013022:	e027      	b.n	8013074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	0f1b      	lsrs	r3, r3, #28
 8013028:	2b09      	cmp	r3, #9
 801302a:	d80b      	bhi.n	8013044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	0f1b      	lsrs	r3, r3, #28
 8013030:	b2da      	uxtb	r2, r3
 8013032:	7dfb      	ldrb	r3, [r7, #23]
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4619      	mov	r1, r3
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	440b      	add	r3, r1
 801303c:	3230      	adds	r2, #48	; 0x30
 801303e:	b2d2      	uxtb	r2, r2
 8013040:	701a      	strb	r2, [r3, #0]
 8013042:	e00a      	b.n	801305a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	0f1b      	lsrs	r3, r3, #28
 8013048:	b2da      	uxtb	r2, r3
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	4619      	mov	r1, r3
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	440b      	add	r3, r1
 8013054:	3237      	adds	r2, #55	; 0x37
 8013056:	b2d2      	uxtb	r2, r2
 8013058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	011b      	lsls	r3, r3, #4
 801305e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013060:	7dfb      	ldrb	r3, [r7, #23]
 8013062:	005b      	lsls	r3, r3, #1
 8013064:	3301      	adds	r3, #1
 8013066:	68ba      	ldr	r2, [r7, #8]
 8013068:	4413      	add	r3, r2
 801306a:	2200      	movs	r2, #0
 801306c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801306e:	7dfb      	ldrb	r3, [r7, #23]
 8013070:	3301      	adds	r3, #1
 8013072:	75fb      	strb	r3, [r7, #23]
 8013074:	7dfa      	ldrb	r2, [r7, #23]
 8013076:	79fb      	ldrb	r3, [r7, #7]
 8013078:	429a      	cmp	r2, r3
 801307a:	d3d3      	bcc.n	8013024 <IntToUnicode+0x18>
  }
}
 801307c:	bf00      	nop
 801307e:	bf00      	nop
 8013080:	371c      	adds	r7, #28
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr

0801308a <LL_AHB2_GRP1_EnableClock>:
{
 801308a:	b480      	push	{r7}
 801308c:	b085      	sub	sp, #20
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8013092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	4313      	orrs	r3, r2
 80130a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80130a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	4013      	ands	r3, r2
 80130ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80130ae:	68fb      	ldr	r3, [r7, #12]
}
 80130b0:	bf00      	nop
 80130b2:	3714      	adds	r7, #20
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr

080130bc <LL_APB1_GRP1_EnableClock>:
{
 80130bc:	b480      	push	{r7}
 80130be:	b085      	sub	sp, #20
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80130c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80130ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	4313      	orrs	r3, r2
 80130d2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80130d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80130d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4013      	ands	r3, r2
 80130de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80130e0:	68fb      	ldr	r3, [r7, #12]
}
 80130e2:	bf00      	nop
 80130e4:	3714      	adds	r7, #20
 80130e6:	46bd      	mov	sp, r7
 80130e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ec:	4770      	bx	lr
	...

080130f0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b088      	sub	sp, #32
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80130f8:	f107 030c 	add.w	r3, r7, #12
 80130fc:	2200      	movs	r2, #0
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	605a      	str	r2, [r3, #4]
 8013102:	609a      	str	r2, [r3, #8]
 8013104:	60da      	str	r2, [r3, #12]
 8013106:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a1d      	ldr	r2, [pc, #116]	; (8013184 <HAL_PCD_MspInit+0x94>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d134      	bne.n	801317c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013112:	2001      	movs	r0, #1
 8013114:	f7ff ffb9 	bl	801308a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013118:	2004      	movs	r0, #4
 801311a:	f7ff ffb6 	bl	801308a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801311e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013124:	2302      	movs	r3, #2
 8013126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013128:	2300      	movs	r3, #0
 801312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801312c:	2300      	movs	r3, #0
 801312e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013130:	230a      	movs	r3, #10
 8013132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013134:	f107 030c 	add.w	r3, r7, #12
 8013138:	4619      	mov	r1, r3
 801313a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801313e:	f7f0 fad9 	bl	80036f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013146:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013148:	2302      	movs	r3, #2
 801314a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801314c:	2300      	movs	r3, #0
 801314e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013150:	2300      	movs	r3, #0
 8013152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013154:	230a      	movs	r3, #10
 8013156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013158:	f107 030c 	add.w	r3, r7, #12
 801315c:	4619      	mov	r1, r3
 801315e:	480a      	ldr	r0, [pc, #40]	; (8013188 <HAL_PCD_MspInit+0x98>)
 8013160:	f7f0 fac8 	bl	80036f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013164:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8013168:	f7ff ffa8 	bl	80130bc <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801316c:	2200      	movs	r2, #0
 801316e:	2105      	movs	r1, #5
 8013170:	2014      	movs	r0, #20
 8013172:	f7f0 fa97 	bl	80036a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013176:	2014      	movs	r0, #20
 8013178:	f7f0 faae 	bl	80036d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801317c:	bf00      	nop
 801317e:	3720      	adds	r7, #32
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	40006800 	.word	0x40006800
 8013188:	48000800 	.word	0x48000800

0801318c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80131a0:	4619      	mov	r1, r3
 80131a2:	4610      	mov	r0, r2
 80131a4:	f7f9 fe7c 	bl	800cea0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80131a8:	bf00      	nop
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80131c2:	78fa      	ldrb	r2, [r7, #3]
 80131c4:	6879      	ldr	r1, [r7, #4]
 80131c6:	4613      	mov	r3, r2
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	4413      	add	r3, r2
 80131cc:	00db      	lsls	r3, r3, #3
 80131ce:	440b      	add	r3, r1
 80131d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	78fb      	ldrb	r3, [r7, #3]
 80131d8:	4619      	mov	r1, r3
 80131da:	f7f9 feb6 	bl	800cf4a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80131de:	bf00      	nop
 80131e0:	3708      	adds	r7, #8
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}

080131e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b082      	sub	sp, #8
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	460b      	mov	r3, r1
 80131f0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80131f8:	78fa      	ldrb	r2, [r7, #3]
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	4613      	mov	r3, r2
 80131fe:	009b      	lsls	r3, r3, #2
 8013200:	4413      	add	r3, r2
 8013202:	00db      	lsls	r3, r3, #3
 8013204:	440b      	add	r3, r1
 8013206:	333c      	adds	r3, #60	; 0x3c
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	78fb      	ldrb	r3, [r7, #3]
 801320c:	4619      	mov	r1, r3
 801320e:	f7f9 feff 	bl	800d010 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8013212:	bf00      	nop
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801321a:	b580      	push	{r7, lr}
 801321c:	b082      	sub	sp, #8
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013228:	4618      	mov	r0, r3
 801322a:	f7fa f813 	bl	800d254 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801322e:	bf00      	nop
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013236:	b580      	push	{r7, lr}
 8013238:	b084      	sub	sp, #16
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801323e:	2301      	movs	r3, #1
 8013240:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	689b      	ldr	r3, [r3, #8]
 8013246:	2b02      	cmp	r3, #2
 8013248:	d001      	beq.n	801324e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801324a:	f7ee fbff 	bl	8001a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013254:	7bfa      	ldrb	r2, [r7, #15]
 8013256:	4611      	mov	r1, r2
 8013258:	4618      	mov	r0, r3
 801325a:	f7f9 ffbd 	bl	800d1d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013264:	4618      	mov	r0, r3
 8013266:	f7f9 ff69 	bl	800d13c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801326a:	bf00      	nop
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
	...

08013274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013282:	4618      	mov	r0, r3
 8013284:	f7f9 ffb8 	bl	800d1f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	699b      	ldr	r3, [r3, #24]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d005      	beq.n	801329c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013290:	4b04      	ldr	r3, [pc, #16]	; (80132a4 <HAL_PCD_SuspendCallback+0x30>)
 8013292:	691b      	ldr	r3, [r3, #16]
 8013294:	4a03      	ldr	r2, [pc, #12]	; (80132a4 <HAL_PCD_SuspendCallback+0x30>)
 8013296:	f043 0306 	orr.w	r3, r3, #6
 801329a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801329c:	bf00      	nop
 801329e:	3708      	adds	r7, #8
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	e000ed00 	.word	0xe000ed00

080132a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	699b      	ldr	r3, [r3, #24]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d007      	beq.n	80132c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80132b8:	4b08      	ldr	r3, [pc, #32]	; (80132dc <HAL_PCD_ResumeCallback+0x34>)
 80132ba:	691b      	ldr	r3, [r3, #16]
 80132bc:	4a07      	ldr	r2, [pc, #28]	; (80132dc <HAL_PCD_ResumeCallback+0x34>)
 80132be:	f023 0306 	bic.w	r3, r3, #6
 80132c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80132c4:	f000 f9fc 	bl	80136c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7f9 ffa8 	bl	800d224 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80132d4:	bf00      	nop
 80132d6:	3708      	adds	r7, #8
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	e000ed00 	.word	0xe000ed00

080132e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80132e8:	4a2c      	ldr	r2, [pc, #176]	; (801339c <USBD_LL_Init+0xbc>)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	4a2a      	ldr	r2, [pc, #168]	; (801339c <USBD_LL_Init+0xbc>)
 80132f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80132f8:	f7f3 f84e 	bl	8006398 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80132fc:	4b27      	ldr	r3, [pc, #156]	; (801339c <USBD_LL_Init+0xbc>)
 80132fe:	4a28      	ldr	r2, [pc, #160]	; (80133a0 <USBD_LL_Init+0xc0>)
 8013300:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013302:	4b26      	ldr	r3, [pc, #152]	; (801339c <USBD_LL_Init+0xbc>)
 8013304:	2208      	movs	r2, #8
 8013306:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013308:	4b24      	ldr	r3, [pc, #144]	; (801339c <USBD_LL_Init+0xbc>)
 801330a:	2202      	movs	r2, #2
 801330c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801330e:	4b23      	ldr	r3, [pc, #140]	; (801339c <USBD_LL_Init+0xbc>)
 8013310:	2202      	movs	r2, #2
 8013312:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013314:	4b21      	ldr	r3, [pc, #132]	; (801339c <USBD_LL_Init+0xbc>)
 8013316:	2200      	movs	r2, #0
 8013318:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801331a:	4b20      	ldr	r3, [pc, #128]	; (801339c <USBD_LL_Init+0xbc>)
 801331c:	2200      	movs	r2, #0
 801331e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013320:	4b1e      	ldr	r3, [pc, #120]	; (801339c <USBD_LL_Init+0xbc>)
 8013322:	2200      	movs	r2, #0
 8013324:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013326:	4b1d      	ldr	r3, [pc, #116]	; (801339c <USBD_LL_Init+0xbc>)
 8013328:	2200      	movs	r2, #0
 801332a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801332c:	481b      	ldr	r0, [pc, #108]	; (801339c <USBD_LL_Init+0xbc>)
 801332e:	f7f1 fae1 	bl	80048f4 <HAL_PCD_Init>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d001      	beq.n	801333c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8013338:	f7ee fb88 	bl	8001a4c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013342:	2318      	movs	r3, #24
 8013344:	2200      	movs	r2, #0
 8013346:	2100      	movs	r1, #0
 8013348:	f7f2 ff9a 	bl	8006280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013352:	2358      	movs	r3, #88	; 0x58
 8013354:	2200      	movs	r2, #0
 8013356:	2180      	movs	r1, #128	; 0x80
 8013358:	f7f2 ff92 	bl	8006280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013362:	23c0      	movs	r3, #192	; 0xc0
 8013364:	2200      	movs	r2, #0
 8013366:	2181      	movs	r1, #129	; 0x81
 8013368:	f7f2 ff8a 	bl	8006280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013372:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013376:	2200      	movs	r2, #0
 8013378:	2101      	movs	r1, #1
 801337a:	f7f2 ff81 	bl	8006280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013388:	2200      	movs	r2, #0
 801338a:	2182      	movs	r1, #130	; 0x82
 801338c:	f7f2 ff78 	bl	8006280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	2000551c 	.word	0x2000551c
 80133a0:	40006800 	.word	0x40006800

080133a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133ac:	2300      	movs	r3, #0
 80133ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133b0:	2300      	movs	r3, #0
 80133b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7f1 fb7f 	bl	8004abe <HAL_PCD_Start>
 80133c0:	4603      	mov	r3, r0
 80133c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133c4:	7bfb      	ldrb	r3, [r7, #15]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 f980 	bl	80136cc <USBD_Get_USB_Status>
 80133cc:	4603      	mov	r3, r0
 80133ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}

080133da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	b084      	sub	sp, #16
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	4608      	mov	r0, r1
 80133e4:	4611      	mov	r1, r2
 80133e6:	461a      	mov	r2, r3
 80133e8:	4603      	mov	r3, r0
 80133ea:	70fb      	strb	r3, [r7, #3]
 80133ec:	460b      	mov	r3, r1
 80133ee:	70bb      	strb	r3, [r7, #2]
 80133f0:	4613      	mov	r3, r2
 80133f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133f4:	2300      	movs	r3, #0
 80133f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133f8:	2300      	movs	r3, #0
 80133fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013402:	78bb      	ldrb	r3, [r7, #2]
 8013404:	883a      	ldrh	r2, [r7, #0]
 8013406:	78f9      	ldrb	r1, [r7, #3]
 8013408:	f7f1 fcc7 	bl	8004d9a <HAL_PCD_EP_Open>
 801340c:	4603      	mov	r3, r0
 801340e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013410:	7bfb      	ldrb	r3, [r7, #15]
 8013412:	4618      	mov	r0, r3
 8013414:	f000 f95a 	bl	80136cc <USBD_Get_USB_Status>
 8013418:	4603      	mov	r3, r0
 801341a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801341c:	7bbb      	ldrb	r3, [r7, #14]
}
 801341e:	4618      	mov	r0, r3
 8013420:	3710      	adds	r7, #16
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}

08013426 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013426:	b580      	push	{r7, lr}
 8013428:	b084      	sub	sp, #16
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
 801342e:	460b      	mov	r3, r1
 8013430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013432:	2300      	movs	r3, #0
 8013434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013436:	2300      	movs	r3, #0
 8013438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013440:	78fa      	ldrb	r2, [r7, #3]
 8013442:	4611      	mov	r1, r2
 8013444:	4618      	mov	r0, r3
 8013446:	f7f1 fd0e 	bl	8004e66 <HAL_PCD_EP_Close>
 801344a:	4603      	mov	r3, r0
 801344c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801344e:	7bfb      	ldrb	r3, [r7, #15]
 8013450:	4618      	mov	r0, r3
 8013452:	f000 f93b 	bl	80136cc <USBD_Get_USB_Status>
 8013456:	4603      	mov	r3, r0
 8013458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801345a:	7bbb      	ldrb	r3, [r7, #14]
}
 801345c:	4618      	mov	r0, r3
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b084      	sub	sp, #16
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	460b      	mov	r3, r1
 801346e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013470:	2300      	movs	r3, #0
 8013472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013474:	2300      	movs	r3, #0
 8013476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801347e:	78fa      	ldrb	r2, [r7, #3]
 8013480:	4611      	mov	r1, r2
 8013482:	4618      	mov	r0, r3
 8013484:	f7f1 fdcf 	bl	8005026 <HAL_PCD_EP_SetStall>
 8013488:	4603      	mov	r3, r0
 801348a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801348c:	7bfb      	ldrb	r3, [r7, #15]
 801348e:	4618      	mov	r0, r3
 8013490:	f000 f91c 	bl	80136cc <USBD_Get_USB_Status>
 8013494:	4603      	mov	r3, r0
 8013496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013498:	7bbb      	ldrb	r3, [r7, #14]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b084      	sub	sp, #16
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
 80134aa:	460b      	mov	r3, r1
 80134ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134ae:	2300      	movs	r3, #0
 80134b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b2:	2300      	movs	r3, #0
 80134b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134bc:	78fa      	ldrb	r2, [r7, #3]
 80134be:	4611      	mov	r1, r2
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f1 fe02 	bl	80050ca <HAL_PCD_EP_ClrStall>
 80134c6:	4603      	mov	r3, r0
 80134c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134ca:	7bfb      	ldrb	r3, [r7, #15]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f000 f8fd 	bl	80136cc <USBD_Get_USB_Status>
 80134d2:	4603      	mov	r3, r0
 80134d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134e0:	b480      	push	{r7}
 80134e2:	b085      	sub	sp, #20
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	460b      	mov	r3, r1
 80134ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80134f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	da0c      	bge.n	8013516 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80134fc:	78fb      	ldrb	r3, [r7, #3]
 80134fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013502:	68f9      	ldr	r1, [r7, #12]
 8013504:	1c5a      	adds	r2, r3, #1
 8013506:	4613      	mov	r3, r2
 8013508:	009b      	lsls	r3, r3, #2
 801350a:	4413      	add	r3, r2
 801350c:	00db      	lsls	r3, r3, #3
 801350e:	440b      	add	r3, r1
 8013510:	3302      	adds	r3, #2
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	e00b      	b.n	801352e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013516:	78fb      	ldrb	r3, [r7, #3]
 8013518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801351c:	68f9      	ldr	r1, [r7, #12]
 801351e:	4613      	mov	r3, r2
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	4413      	add	r3, r2
 8013524:	00db      	lsls	r3, r3, #3
 8013526:	440b      	add	r3, r1
 8013528:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801352c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801352e:	4618      	mov	r0, r3
 8013530:	3714      	adds	r7, #20
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr

0801353a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801353a:	b580      	push	{r7, lr}
 801353c:	b084      	sub	sp, #16
 801353e:	af00      	add	r7, sp, #0
 8013540:	6078      	str	r0, [r7, #4]
 8013542:	460b      	mov	r3, r1
 8013544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013546:	2300      	movs	r3, #0
 8013548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801354a:	2300      	movs	r3, #0
 801354c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013554:	78fa      	ldrb	r2, [r7, #3]
 8013556:	4611      	mov	r1, r2
 8013558:	4618      	mov	r0, r3
 801355a:	f7f1 fbf9 	bl	8004d50 <HAL_PCD_SetAddress>
 801355e:	4603      	mov	r3, r0
 8013560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013562:	7bfb      	ldrb	r3, [r7, #15]
 8013564:	4618      	mov	r0, r3
 8013566:	f000 f8b1 	bl	80136cc <USBD_Get_USB_Status>
 801356a:	4603      	mov	r3, r0
 801356c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801356e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013570:	4618      	mov	r0, r3
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	607a      	str	r2, [r7, #4]
 8013582:	603b      	str	r3, [r7, #0]
 8013584:	460b      	mov	r3, r1
 8013586:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013588:	2300      	movs	r3, #0
 801358a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801358c:	2300      	movs	r3, #0
 801358e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013596:	7af9      	ldrb	r1, [r7, #11]
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	f7f1 fd00 	bl	8004fa0 <HAL_PCD_EP_Transmit>
 80135a0:	4603      	mov	r3, r0
 80135a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
 80135a6:	4618      	mov	r0, r3
 80135a8:	f000 f890 	bl	80136cc <USBD_Get_USB_Status>
 80135ac:	4603      	mov	r3, r0
 80135ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3718      	adds	r7, #24
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b086      	sub	sp, #24
 80135be:	af00      	add	r7, sp, #0
 80135c0:	60f8      	str	r0, [r7, #12]
 80135c2:	607a      	str	r2, [r7, #4]
 80135c4:	603b      	str	r3, [r7, #0]
 80135c6:	460b      	mov	r3, r1
 80135c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135ca:	2300      	movs	r3, #0
 80135cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135ce:	2300      	movs	r3, #0
 80135d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135d8:	7af9      	ldrb	r1, [r7, #11]
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	f7f1 fc8a 	bl	8004ef6 <HAL_PCD_EP_Receive>
 80135e2:	4603      	mov	r3, r0
 80135e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135e6:	7dfb      	ldrb	r3, [r7, #23]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 f86f 	bl	80136cc <USBD_Get_USB_Status>
 80135ee:	4603      	mov	r3, r0
 80135f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3718      	adds	r7, #24
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}

080135fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b082      	sub	sp, #8
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	460b      	mov	r3, r1
 8013606:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801360e:	78fa      	ldrb	r2, [r7, #3]
 8013610:	4611      	mov	r1, r2
 8013612:	4618      	mov	r0, r3
 8013614:	f7f1 fcac 	bl	8004f70 <HAL_PCD_EP_GetRxCount>
 8013618:	4603      	mov	r3, r0
}
 801361a:	4618      	mov	r0, r3
 801361c:	3708      	adds	r7, #8
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
	...

08013624 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
 801362c:	460b      	mov	r3, r1
 801362e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013630:	78fb      	ldrb	r3, [r7, #3]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d002      	beq.n	801363c <HAL_PCDEx_LPM_Callback+0x18>
 8013636:	2b01      	cmp	r3, #1
 8013638:	d013      	beq.n	8013662 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801363a:	e023      	b.n	8013684 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	699b      	ldr	r3, [r3, #24]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d007      	beq.n	8013654 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013644:	f000 f83c 	bl	80136c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013648:	4b10      	ldr	r3, [pc, #64]	; (801368c <HAL_PCDEx_LPM_Callback+0x68>)
 801364a:	691b      	ldr	r3, [r3, #16]
 801364c:	4a0f      	ldr	r2, [pc, #60]	; (801368c <HAL_PCDEx_LPM_Callback+0x68>)
 801364e:	f023 0306 	bic.w	r3, r3, #6
 8013652:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801365a:	4618      	mov	r0, r3
 801365c:	f7f9 fde2 	bl	800d224 <USBD_LL_Resume>
    break;
 8013660:	e010      	b.n	8013684 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013668:	4618      	mov	r0, r3
 801366a:	f7f9 fdc5 	bl	800d1f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	699b      	ldr	r3, [r3, #24]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d005      	beq.n	8013682 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013676:	4b05      	ldr	r3, [pc, #20]	; (801368c <HAL_PCDEx_LPM_Callback+0x68>)
 8013678:	691b      	ldr	r3, [r3, #16]
 801367a:	4a04      	ldr	r2, [pc, #16]	; (801368c <HAL_PCDEx_LPM_Callback+0x68>)
 801367c:	f043 0306 	orr.w	r3, r3, #6
 8013680:	6113      	str	r3, [r2, #16]
    break;
 8013682:	bf00      	nop
}
 8013684:	bf00      	nop
 8013686:	3708      	adds	r7, #8
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}
 801368c:	e000ed00 	.word	0xe000ed00

08013690 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013690:	b480      	push	{r7}
 8013692:	b083      	sub	sp, #12
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013698:	4b03      	ldr	r3, [pc, #12]	; (80136a8 <USBD_static_malloc+0x18>)
}
 801369a:	4618      	mov	r0, r3
 801369c:	370c      	adds	r7, #12
 801369e:	46bd      	mov	sp, r7
 80136a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a4:	4770      	bx	lr
 80136a6:	bf00      	nop
 80136a8:	20003a50 	.word	0x20003a50

080136ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]

}
 80136b4:	bf00      	nop
 80136b6:	370c      	adds	r7, #12
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr

080136c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80136c4:	f7ee f8f6 	bl	80018b4 <SystemClock_Config>
}
 80136c8:	bf00      	nop
 80136ca:	bd80      	pop	{r7, pc}

080136cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	4603      	mov	r3, r0
 80136d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80136da:	79fb      	ldrb	r3, [r7, #7]
 80136dc:	2b03      	cmp	r3, #3
 80136de:	d817      	bhi.n	8013710 <USBD_Get_USB_Status+0x44>
 80136e0:	a201      	add	r2, pc, #4	; (adr r2, 80136e8 <USBD_Get_USB_Status+0x1c>)
 80136e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136e6:	bf00      	nop
 80136e8:	080136f9 	.word	0x080136f9
 80136ec:	080136ff 	.word	0x080136ff
 80136f0:	08013705 	.word	0x08013705
 80136f4:	0801370b 	.word	0x0801370b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80136f8:	2300      	movs	r3, #0
 80136fa:	73fb      	strb	r3, [r7, #15]
    break;
 80136fc:	e00b      	b.n	8013716 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80136fe:	2303      	movs	r3, #3
 8013700:	73fb      	strb	r3, [r7, #15]
    break;
 8013702:	e008      	b.n	8013716 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013704:	2301      	movs	r3, #1
 8013706:	73fb      	strb	r3, [r7, #15]
    break;
 8013708:	e005      	b.n	8013716 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801370a:	2303      	movs	r3, #3
 801370c:	73fb      	strb	r3, [r7, #15]
    break;
 801370e:	e002      	b.n	8013716 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013710:	2303      	movs	r3, #3
 8013712:	73fb      	strb	r3, [r7, #15]
    break;
 8013714:	bf00      	nop
  }
  return usb_status;
 8013716:	7bfb      	ldrb	r3, [r7, #15]
}
 8013718:	4618      	mov	r0, r3
 801371a:	3714      	adds	r7, #20
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr

08013724 <powf>:
 8013724:	b508      	push	{r3, lr}
 8013726:	ed2d 8b04 	vpush	{d8-d9}
 801372a:	eeb0 9a40 	vmov.f32	s18, s0
 801372e:	eef0 8a60 	vmov.f32	s17, s1
 8013732:	f000 f88f 	bl	8013854 <__ieee754_powf>
 8013736:	4b43      	ldr	r3, [pc, #268]	; (8013844 <powf+0x120>)
 8013738:	f993 3000 	ldrsb.w	r3, [r3]
 801373c:	3301      	adds	r3, #1
 801373e:	eeb0 8a40 	vmov.f32	s16, s0
 8013742:	d012      	beq.n	801376a <powf+0x46>
 8013744:	eef4 8a68 	vcmp.f32	s17, s17
 8013748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374c:	d60d      	bvs.n	801376a <powf+0x46>
 801374e:	eeb4 9a49 	vcmp.f32	s18, s18
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	d70d      	bvc.n	8013774 <powf+0x50>
 8013758:	eef5 8a40 	vcmp.f32	s17, #0.0
 801375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013760:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013764:	bf08      	it	eq
 8013766:	eeb0 8a67 	vmoveq.f32	s16, s15
 801376a:	eeb0 0a48 	vmov.f32	s0, s16
 801376e:	ecbd 8b04 	vpop	{d8-d9}
 8013772:	bd08      	pop	{r3, pc}
 8013774:	eddf 9a34 	vldr	s19, [pc, #208]	; 8013848 <powf+0x124>
 8013778:	eeb4 9a69 	vcmp.f32	s18, s19
 801377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013780:	d116      	bne.n	80137b0 <powf+0x8c>
 8013782:	eef4 8a69 	vcmp.f32	s17, s19
 8013786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801378a:	d057      	beq.n	801383c <powf+0x118>
 801378c:	eeb0 0a68 	vmov.f32	s0, s17
 8013790:	f000 fb2a 	bl	8013de8 <finitef>
 8013794:	2800      	cmp	r0, #0
 8013796:	d0e8      	beq.n	801376a <powf+0x46>
 8013798:	eef4 8ae9 	vcmpe.f32	s17, s19
 801379c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a0:	d5e3      	bpl.n	801376a <powf+0x46>
 80137a2:	f000 fc03 	bl	8013fac <__errno>
 80137a6:	2321      	movs	r3, #33	; 0x21
 80137a8:	6003      	str	r3, [r0, #0]
 80137aa:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801384c <powf+0x128>
 80137ae:	e7dc      	b.n	801376a <powf+0x46>
 80137b0:	f000 fb1a 	bl	8013de8 <finitef>
 80137b4:	bb50      	cbnz	r0, 801380c <powf+0xe8>
 80137b6:	eeb0 0a49 	vmov.f32	s0, s18
 80137ba:	f000 fb15 	bl	8013de8 <finitef>
 80137be:	b328      	cbz	r0, 801380c <powf+0xe8>
 80137c0:	eeb0 0a68 	vmov.f32	s0, s17
 80137c4:	f000 fb10 	bl	8013de8 <finitef>
 80137c8:	b300      	cbz	r0, 801380c <powf+0xe8>
 80137ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80137ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d2:	d706      	bvc.n	80137e2 <powf+0xbe>
 80137d4:	f000 fbea 	bl	8013fac <__errno>
 80137d8:	2321      	movs	r3, #33	; 0x21
 80137da:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80137de:	6003      	str	r3, [r0, #0]
 80137e0:	e7c3      	b.n	801376a <powf+0x46>
 80137e2:	f000 fbe3 	bl	8013fac <__errno>
 80137e6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80137ea:	2322      	movs	r3, #34	; 0x22
 80137ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f0:	6003      	str	r3, [r0, #0]
 80137f2:	d508      	bpl.n	8013806 <powf+0xe2>
 80137f4:	eeb0 0a68 	vmov.f32	s0, s17
 80137f8:	f000 fb0a 	bl	8013e10 <rintf>
 80137fc:	eeb4 0a68 	vcmp.f32	s0, s17
 8013800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013804:	d1d1      	bne.n	80137aa <powf+0x86>
 8013806:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8013850 <powf+0x12c>
 801380a:	e7ae      	b.n	801376a <powf+0x46>
 801380c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013814:	d1a9      	bne.n	801376a <powf+0x46>
 8013816:	eeb0 0a49 	vmov.f32	s0, s18
 801381a:	f000 fae5 	bl	8013de8 <finitef>
 801381e:	2800      	cmp	r0, #0
 8013820:	d0a3      	beq.n	801376a <powf+0x46>
 8013822:	eeb0 0a68 	vmov.f32	s0, s17
 8013826:	f000 fadf 	bl	8013de8 <finitef>
 801382a:	2800      	cmp	r0, #0
 801382c:	d09d      	beq.n	801376a <powf+0x46>
 801382e:	f000 fbbd 	bl	8013fac <__errno>
 8013832:	2322      	movs	r3, #34	; 0x22
 8013834:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013848 <powf+0x124>
 8013838:	6003      	str	r3, [r0, #0]
 801383a:	e796      	b.n	801376a <powf+0x46>
 801383c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013840:	e793      	b.n	801376a <powf+0x46>
 8013842:	bf00      	nop
 8013844:	20000196 	.word	0x20000196
 8013848:	00000000 	.word	0x00000000
 801384c:	ff800000 	.word	0xff800000
 8013850:	7f800000 	.word	0x7f800000

08013854 <__ieee754_powf>:
 8013854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013858:	ee10 5a90 	vmov	r5, s1
 801385c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8013860:	ed2d 8b02 	vpush	{d8}
 8013864:	eeb0 8a40 	vmov.f32	s16, s0
 8013868:	eef0 8a60 	vmov.f32	s17, s1
 801386c:	f000 8291 	beq.w	8013d92 <__ieee754_powf+0x53e>
 8013870:	ee10 8a10 	vmov	r8, s0
 8013874:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8013878:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801387c:	dc06      	bgt.n	801388c <__ieee754_powf+0x38>
 801387e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013882:	dd0a      	ble.n	801389a <__ieee754_powf+0x46>
 8013884:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013888:	f000 8283 	beq.w	8013d92 <__ieee754_powf+0x53e>
 801388c:	ecbd 8b02 	vpop	{d8}
 8013890:	48d8      	ldr	r0, [pc, #864]	; (8013bf4 <__ieee754_powf+0x3a0>)
 8013892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013896:	f000 bab5 	b.w	8013e04 <nanf>
 801389a:	f1b8 0f00 	cmp.w	r8, #0
 801389e:	da1f      	bge.n	80138e0 <__ieee754_powf+0x8c>
 80138a0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80138a4:	da2e      	bge.n	8013904 <__ieee754_powf+0xb0>
 80138a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80138aa:	f2c0 827b 	blt.w	8013da4 <__ieee754_powf+0x550>
 80138ae:	15fb      	asrs	r3, r7, #23
 80138b0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80138b4:	fa47 f603 	asr.w	r6, r7, r3
 80138b8:	fa06 f303 	lsl.w	r3, r6, r3
 80138bc:	42bb      	cmp	r3, r7
 80138be:	f040 8271 	bne.w	8013da4 <__ieee754_powf+0x550>
 80138c2:	f006 0601 	and.w	r6, r6, #1
 80138c6:	f1c6 0602 	rsb	r6, r6, #2
 80138ca:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80138ce:	d120      	bne.n	8013912 <__ieee754_powf+0xbe>
 80138d0:	2d00      	cmp	r5, #0
 80138d2:	f280 8264 	bge.w	8013d9e <__ieee754_powf+0x54a>
 80138d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80138da:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80138de:	e00d      	b.n	80138fc <__ieee754_powf+0xa8>
 80138e0:	2600      	movs	r6, #0
 80138e2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80138e6:	d1f0      	bne.n	80138ca <__ieee754_powf+0x76>
 80138e8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80138ec:	f000 8251 	beq.w	8013d92 <__ieee754_powf+0x53e>
 80138f0:	dd0a      	ble.n	8013908 <__ieee754_powf+0xb4>
 80138f2:	2d00      	cmp	r5, #0
 80138f4:	f280 8250 	bge.w	8013d98 <__ieee754_powf+0x544>
 80138f8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8013bf8 <__ieee754_powf+0x3a4>
 80138fc:	ecbd 8b02 	vpop	{d8}
 8013900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013904:	2602      	movs	r6, #2
 8013906:	e7ec      	b.n	80138e2 <__ieee754_powf+0x8e>
 8013908:	2d00      	cmp	r5, #0
 801390a:	daf5      	bge.n	80138f8 <__ieee754_powf+0xa4>
 801390c:	eeb1 0a68 	vneg.f32	s0, s17
 8013910:	e7f4      	b.n	80138fc <__ieee754_powf+0xa8>
 8013912:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8013916:	d102      	bne.n	801391e <__ieee754_powf+0xca>
 8013918:	ee28 0a08 	vmul.f32	s0, s16, s16
 801391c:	e7ee      	b.n	80138fc <__ieee754_powf+0xa8>
 801391e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8013922:	eeb0 0a48 	vmov.f32	s0, s16
 8013926:	d108      	bne.n	801393a <__ieee754_powf+0xe6>
 8013928:	f1b8 0f00 	cmp.w	r8, #0
 801392c:	db05      	blt.n	801393a <__ieee754_powf+0xe6>
 801392e:	ecbd 8b02 	vpop	{d8}
 8013932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013936:	f000 ba4d 	b.w	8013dd4 <__ieee754_sqrtf>
 801393a:	f000 fa4e 	bl	8013dda <fabsf>
 801393e:	b124      	cbz	r4, 801394a <__ieee754_powf+0xf6>
 8013940:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8013944:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013948:	d117      	bne.n	801397a <__ieee754_powf+0x126>
 801394a:	2d00      	cmp	r5, #0
 801394c:	bfbc      	itt	lt
 801394e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013952:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013956:	f1b8 0f00 	cmp.w	r8, #0
 801395a:	dacf      	bge.n	80138fc <__ieee754_powf+0xa8>
 801395c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8013960:	ea54 0306 	orrs.w	r3, r4, r6
 8013964:	d104      	bne.n	8013970 <__ieee754_powf+0x11c>
 8013966:	ee70 7a40 	vsub.f32	s15, s0, s0
 801396a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801396e:	e7c5      	b.n	80138fc <__ieee754_powf+0xa8>
 8013970:	2e01      	cmp	r6, #1
 8013972:	d1c3      	bne.n	80138fc <__ieee754_powf+0xa8>
 8013974:	eeb1 0a40 	vneg.f32	s0, s0
 8013978:	e7c0      	b.n	80138fc <__ieee754_powf+0xa8>
 801397a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801397e:	3801      	subs	r0, #1
 8013980:	ea56 0300 	orrs.w	r3, r6, r0
 8013984:	d104      	bne.n	8013990 <__ieee754_powf+0x13c>
 8013986:	ee38 8a48 	vsub.f32	s16, s16, s16
 801398a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801398e:	e7b5      	b.n	80138fc <__ieee754_powf+0xa8>
 8013990:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8013994:	dd6b      	ble.n	8013a6e <__ieee754_powf+0x21a>
 8013996:	4b99      	ldr	r3, [pc, #612]	; (8013bfc <__ieee754_powf+0x3a8>)
 8013998:	429c      	cmp	r4, r3
 801399a:	dc06      	bgt.n	80139aa <__ieee754_powf+0x156>
 801399c:	2d00      	cmp	r5, #0
 801399e:	daab      	bge.n	80138f8 <__ieee754_powf+0xa4>
 80139a0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8013c00 <__ieee754_powf+0x3ac>
 80139a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80139a8:	e7a8      	b.n	80138fc <__ieee754_powf+0xa8>
 80139aa:	4b96      	ldr	r3, [pc, #600]	; (8013c04 <__ieee754_powf+0x3b0>)
 80139ac:	429c      	cmp	r4, r3
 80139ae:	dd02      	ble.n	80139b6 <__ieee754_powf+0x162>
 80139b0:	2d00      	cmp	r5, #0
 80139b2:	dcf5      	bgt.n	80139a0 <__ieee754_powf+0x14c>
 80139b4:	e7a0      	b.n	80138f8 <__ieee754_powf+0xa4>
 80139b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80139ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139be:	eddf 6a92 	vldr	s13, [pc, #584]	; 8013c08 <__ieee754_powf+0x3b4>
 80139c2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80139c6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80139ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139ce:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80139d2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80139d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139da:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8013c0c <__ieee754_powf+0x3b8>
 80139de:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80139e2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8013c10 <__ieee754_powf+0x3bc>
 80139e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80139ea:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013c14 <__ieee754_powf+0x3c0>
 80139ee:	eef0 6a67 	vmov.f32	s13, s15
 80139f2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80139f6:	ee16 3a90 	vmov	r3, s13
 80139fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80139fe:	f023 030f 	bic.w	r3, r3, #15
 8013a02:	ee00 3a90 	vmov	s1, r3
 8013a06:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013a0a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013a0e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8013a12:	f025 050f 	bic.w	r5, r5, #15
 8013a16:	ee07 5a10 	vmov	s14, r5
 8013a1a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013a1e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013a22:	ee07 3a90 	vmov	s15, r3
 8013a26:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013a2a:	3e01      	subs	r6, #1
 8013a2c:	ea56 0200 	orrs.w	r2, r6, r0
 8013a30:	ee07 5a10 	vmov	s14, r5
 8013a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a38:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013a3c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013a40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013a44:	ee17 4a10 	vmov	r4, s14
 8013a48:	bf08      	it	eq
 8013a4a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013a4e:	2c00      	cmp	r4, #0
 8013a50:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013a54:	f340 8184 	ble.w	8013d60 <__ieee754_powf+0x50c>
 8013a58:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013a5c:	f340 80fc 	ble.w	8013c58 <__ieee754_powf+0x404>
 8013a60:	eddf 7a67 	vldr	s15, [pc, #412]	; 8013c00 <__ieee754_powf+0x3ac>
 8013a64:	ee28 0a27 	vmul.f32	s0, s16, s15
 8013a68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a6c:	e746      	b.n	80138fc <__ieee754_powf+0xa8>
 8013a6e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8013a72:	bf01      	itttt	eq
 8013a74:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8013c18 <__ieee754_powf+0x3c4>
 8013a78:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013a7c:	f06f 0217 	mvneq.w	r2, #23
 8013a80:	ee17 4a90 	vmoveq	r4, s15
 8013a84:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8013a88:	bf18      	it	ne
 8013a8a:	2200      	movne	r2, #0
 8013a8c:	3b7f      	subs	r3, #127	; 0x7f
 8013a8e:	4413      	add	r3, r2
 8013a90:	4a62      	ldr	r2, [pc, #392]	; (8013c1c <__ieee754_powf+0x3c8>)
 8013a92:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8013a96:	4294      	cmp	r4, r2
 8013a98:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8013a9c:	dd06      	ble.n	8013aac <__ieee754_powf+0x258>
 8013a9e:	4a60      	ldr	r2, [pc, #384]	; (8013c20 <__ieee754_powf+0x3cc>)
 8013aa0:	4294      	cmp	r4, r2
 8013aa2:	f340 80a4 	ble.w	8013bee <__ieee754_powf+0x39a>
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013aac:	2400      	movs	r4, #0
 8013aae:	4a5d      	ldr	r2, [pc, #372]	; (8013c24 <__ieee754_powf+0x3d0>)
 8013ab0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013ab4:	ee07 1a90 	vmov	s15, r1
 8013ab8:	ed92 7a00 	vldr	s14, [r2]
 8013abc:	4a5a      	ldr	r2, [pc, #360]	; (8013c28 <__ieee754_powf+0x3d4>)
 8013abe:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013ac2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013ac6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8013aca:	1049      	asrs	r1, r1, #1
 8013acc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013ad0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013ad4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8013ad8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8013adc:	ee06 1a10 	vmov	s12, r1
 8013ae0:	ee65 4a26 	vmul.f32	s9, s10, s13
 8013ae4:	ee36 7a47 	vsub.f32	s14, s12, s14
 8013ae8:	ee14 7a90 	vmov	r7, s9
 8013aec:	4017      	ands	r7, r2
 8013aee:	ee05 7a90 	vmov	s11, r7
 8013af2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013af6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013afa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8013c2c <__ieee754_powf+0x3d8>
 8013afe:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013b02:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013b06:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013b0a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8013c30 <__ieee754_powf+0x3dc>
 8013b0e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013b12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8013c34 <__ieee754_powf+0x3e0>
 8013b16:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013b1a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8013c08 <__ieee754_powf+0x3b4>
 8013b1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b22:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013c38 <__ieee754_powf+0x3e4>
 8013b26:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013b2a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013c3c <__ieee754_powf+0x3e8>
 8013b2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b32:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013b36:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8013b3a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013b3e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013b42:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013b46:	eef0 7a45 	vmov.f32	s15, s10
 8013b4a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b52:	ee17 1a90 	vmov	r1, s15
 8013b56:	4011      	ands	r1, r2
 8013b58:	ee07 1a90 	vmov	s15, r1
 8013b5c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8013b60:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8013b64:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013b68:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013b6c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013b70:	eeb0 6a47 	vmov.f32	s12, s14
 8013b74:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013b78:	ee16 1a10 	vmov	r1, s12
 8013b7c:	4011      	ands	r1, r2
 8013b7e:	ee06 1a90 	vmov	s13, r1
 8013b82:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8013b86:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8013c40 <__ieee754_powf+0x3ec>
 8013b8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013c44 <__ieee754_powf+0x3f0>
 8013b8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013b92:	ee06 1a10 	vmov	s12, r1
 8013b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b9a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013c48 <__ieee754_powf+0x3f4>
 8013b9e:	492b      	ldr	r1, [pc, #172]	; (8013c4c <__ieee754_powf+0x3f8>)
 8013ba0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013ba4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013ba8:	edd1 7a00 	vldr	s15, [r1]
 8013bac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013bb0:	ee07 3a90 	vmov	s15, r3
 8013bb4:	4b26      	ldr	r3, [pc, #152]	; (8013c50 <__ieee754_powf+0x3fc>)
 8013bb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013bba:	eef0 7a47 	vmov.f32	s15, s14
 8013bbe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013bc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013bc6:	edd4 0a00 	vldr	s1, [r4]
 8013bca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bd2:	ee17 3a90 	vmov	r3, s15
 8013bd6:	4013      	ands	r3, r2
 8013bd8:	ee07 3a90 	vmov	s15, r3
 8013bdc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013be0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8013be4:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013be8:	ee77 7a66 	vsub.f32	s15, s14, s13
 8013bec:	e70f      	b.n	8013a0e <__ieee754_powf+0x1ba>
 8013bee:	2401      	movs	r4, #1
 8013bf0:	e75d      	b.n	8013aae <__ieee754_powf+0x25a>
 8013bf2:	bf00      	nop
 8013bf4:	080144b8 	.word	0x080144b8
 8013bf8:	00000000 	.word	0x00000000
 8013bfc:	3f7ffff7 	.word	0x3f7ffff7
 8013c00:	7149f2ca 	.word	0x7149f2ca
 8013c04:	3f800007 	.word	0x3f800007
 8013c08:	3eaaaaab 	.word	0x3eaaaaab
 8013c0c:	3fb8aa3b 	.word	0x3fb8aa3b
 8013c10:	36eca570 	.word	0x36eca570
 8013c14:	3fb8aa00 	.word	0x3fb8aa00
 8013c18:	4b800000 	.word	0x4b800000
 8013c1c:	001cc471 	.word	0x001cc471
 8013c20:	005db3d6 	.word	0x005db3d6
 8013c24:	080144bc 	.word	0x080144bc
 8013c28:	fffff000 	.word	0xfffff000
 8013c2c:	3e6c3255 	.word	0x3e6c3255
 8013c30:	3e53f142 	.word	0x3e53f142
 8013c34:	3e8ba305 	.word	0x3e8ba305
 8013c38:	3edb6db7 	.word	0x3edb6db7
 8013c3c:	3f19999a 	.word	0x3f19999a
 8013c40:	3f76384f 	.word	0x3f76384f
 8013c44:	3f763800 	.word	0x3f763800
 8013c48:	369dc3a0 	.word	0x369dc3a0
 8013c4c:	080144cc 	.word	0x080144cc
 8013c50:	080144c4 	.word	0x080144c4
 8013c54:	3338aa3c 	.word	0x3338aa3c
 8013c58:	f040 8092 	bne.w	8013d80 <__ieee754_powf+0x52c>
 8013c5c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013c54 <__ieee754_powf+0x400>
 8013c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c64:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013c68:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c70:	f73f aef6 	bgt.w	8013a60 <__ieee754_powf+0x20c>
 8013c74:	15db      	asrs	r3, r3, #23
 8013c76:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8013c7a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013c7e:	4103      	asrs	r3, r0
 8013c80:	4423      	add	r3, r4
 8013c82:	4949      	ldr	r1, [pc, #292]	; (8013da8 <__ieee754_powf+0x554>)
 8013c84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013c88:	3a7f      	subs	r2, #127	; 0x7f
 8013c8a:	4111      	asrs	r1, r2
 8013c8c:	ea23 0101 	bic.w	r1, r3, r1
 8013c90:	ee07 1a10 	vmov	s14, r1
 8013c94:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013c9c:	f1c2 0217 	rsb	r2, r2, #23
 8013ca0:	4110      	asrs	r0, r2
 8013ca2:	2c00      	cmp	r4, #0
 8013ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ca8:	bfb8      	it	lt
 8013caa:	4240      	neglt	r0, r0
 8013cac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013cb0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8013dac <__ieee754_powf+0x558>
 8013cb4:	ee17 3a10 	vmov	r3, s14
 8013cb8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013cbc:	f023 030f 	bic.w	r3, r3, #15
 8013cc0:	ee07 3a10 	vmov	s14, r3
 8013cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cc8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013ccc:	eddf 7a38 	vldr	s15, [pc, #224]	; 8013db0 <__ieee754_powf+0x55c>
 8013cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cd4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013cd8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8013db4 <__ieee754_powf+0x560>
 8013cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8013ce0:	eea7 0a26 	vfma.f32	s0, s14, s13
 8013ce4:	eeb0 6a40 	vmov.f32	s12, s0
 8013ce8:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013cec:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013cf0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013cf4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013db8 <__ieee754_powf+0x564>
 8013cf8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8013dbc <__ieee754_powf+0x568>
 8013cfc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8013d00:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8013dc0 <__ieee754_powf+0x56c>
 8013d04:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013d08:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8013dc4 <__ieee754_powf+0x570>
 8013d0c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013d10:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8013dc8 <__ieee754_powf+0x574>
 8013d14:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013d18:	eeb0 6a40 	vmov.f32	s12, s0
 8013d1c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013d20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013d24:	eeb0 7a46 	vmov.f32	s14, s12
 8013d28:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013d2c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8013d30:	eee0 7a27 	vfma.f32	s15, s0, s15
 8013d34:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d3c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013d40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d44:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013d48:	ee10 3a10 	vmov	r3, s0
 8013d4c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013d54:	da1a      	bge.n	8013d8c <__ieee754_powf+0x538>
 8013d56:	f000 f8b7 	bl	8013ec8 <scalbnf>
 8013d5a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d5e:	e5cd      	b.n	80138fc <__ieee754_powf+0xa8>
 8013d60:	4a1a      	ldr	r2, [pc, #104]	; (8013dcc <__ieee754_powf+0x578>)
 8013d62:	4293      	cmp	r3, r2
 8013d64:	dd02      	ble.n	8013d6c <__ieee754_powf+0x518>
 8013d66:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8013dd0 <__ieee754_powf+0x57c>
 8013d6a:	e67b      	b.n	8013a64 <__ieee754_powf+0x210>
 8013d6c:	d108      	bne.n	8013d80 <__ieee754_powf+0x52c>
 8013d6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013d72:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7a:	f6ff af7b 	blt.w	8013c74 <__ieee754_powf+0x420>
 8013d7e:	e7f2      	b.n	8013d66 <__ieee754_powf+0x512>
 8013d80:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013d84:	f73f af76 	bgt.w	8013c74 <__ieee754_powf+0x420>
 8013d88:	2000      	movs	r0, #0
 8013d8a:	e78f      	b.n	8013cac <__ieee754_powf+0x458>
 8013d8c:	ee00 3a10 	vmov	s0, r3
 8013d90:	e7e3      	b.n	8013d5a <__ieee754_powf+0x506>
 8013d92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013d96:	e5b1      	b.n	80138fc <__ieee754_powf+0xa8>
 8013d98:	eeb0 0a68 	vmov.f32	s0, s17
 8013d9c:	e5ae      	b.n	80138fc <__ieee754_powf+0xa8>
 8013d9e:	eeb0 0a48 	vmov.f32	s0, s16
 8013da2:	e5ab      	b.n	80138fc <__ieee754_powf+0xa8>
 8013da4:	2600      	movs	r6, #0
 8013da6:	e590      	b.n	80138ca <__ieee754_powf+0x76>
 8013da8:	007fffff 	.word	0x007fffff
 8013dac:	3f317218 	.word	0x3f317218
 8013db0:	35bfbe8c 	.word	0x35bfbe8c
 8013db4:	3f317200 	.word	0x3f317200
 8013db8:	3331bb4c 	.word	0x3331bb4c
 8013dbc:	b5ddea0e 	.word	0xb5ddea0e
 8013dc0:	388ab355 	.word	0x388ab355
 8013dc4:	bb360b61 	.word	0xbb360b61
 8013dc8:	3e2aaaab 	.word	0x3e2aaaab
 8013dcc:	43160000 	.word	0x43160000
 8013dd0:	0da24260 	.word	0x0da24260

08013dd4 <__ieee754_sqrtf>:
 8013dd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013dd8:	4770      	bx	lr

08013dda <fabsf>:
 8013dda:	ee10 3a10 	vmov	r3, s0
 8013dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013de2:	ee00 3a10 	vmov	s0, r3
 8013de6:	4770      	bx	lr

08013de8 <finitef>:
 8013de8:	b082      	sub	sp, #8
 8013dea:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013dee:	9801      	ldr	r0, [sp, #4]
 8013df0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013df4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013df8:	bfac      	ite	ge
 8013dfa:	2000      	movge	r0, #0
 8013dfc:	2001      	movlt	r0, #1
 8013dfe:	b002      	add	sp, #8
 8013e00:	4770      	bx	lr
	...

08013e04 <nanf>:
 8013e04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013e0c <nanf+0x8>
 8013e08:	4770      	bx	lr
 8013e0a:	bf00      	nop
 8013e0c:	7fc00000 	.word	0x7fc00000

08013e10 <rintf>:
 8013e10:	ee10 2a10 	vmov	r2, s0
 8013e14:	b513      	push	{r0, r1, r4, lr}
 8013e16:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013e1a:	397f      	subs	r1, #127	; 0x7f
 8013e1c:	2916      	cmp	r1, #22
 8013e1e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013e22:	dc47      	bgt.n	8013eb4 <rintf+0xa4>
 8013e24:	b32b      	cbz	r3, 8013e72 <rintf+0x62>
 8013e26:	2900      	cmp	r1, #0
 8013e28:	ee10 3a10 	vmov	r3, s0
 8013e2c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8013e30:	da21      	bge.n	8013e76 <rintf+0x66>
 8013e32:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8013e36:	425b      	negs	r3, r3
 8013e38:	4921      	ldr	r1, [pc, #132]	; (8013ec0 <rintf+0xb0>)
 8013e3a:	0a5b      	lsrs	r3, r3, #9
 8013e3c:	0d12      	lsrs	r2, r2, #20
 8013e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013e42:	0512      	lsls	r2, r2, #20
 8013e44:	4313      	orrs	r3, r2
 8013e46:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8013e4a:	ee07 3a90 	vmov	s15, r3
 8013e4e:	edd1 6a00 	vldr	s13, [r1]
 8013e52:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013e56:	ed8d 7a01 	vstr	s14, [sp, #4]
 8013e5a:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013e62:	ee17 3a90 	vmov	r3, s15
 8013e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013e6a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8013e6e:	ee00 3a10 	vmov	s0, r3
 8013e72:	b002      	add	sp, #8
 8013e74:	bd10      	pop	{r4, pc}
 8013e76:	4a13      	ldr	r2, [pc, #76]	; (8013ec4 <rintf+0xb4>)
 8013e78:	410a      	asrs	r2, r1
 8013e7a:	4213      	tst	r3, r2
 8013e7c:	d0f9      	beq.n	8013e72 <rintf+0x62>
 8013e7e:	0854      	lsrs	r4, r2, #1
 8013e80:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8013e84:	d006      	beq.n	8013e94 <rintf+0x84>
 8013e86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013e8a:	ea23 0304 	bic.w	r3, r3, r4
 8013e8e:	fa42 f101 	asr.w	r1, r2, r1
 8013e92:	430b      	orrs	r3, r1
 8013e94:	4a0a      	ldr	r2, [pc, #40]	; (8013ec0 <rintf+0xb0>)
 8013e96:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8013e9a:	ed90 7a00 	vldr	s14, [r0]
 8013e9e:	ee07 3a90 	vmov	s15, r3
 8013ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ea6:	edcd 7a01 	vstr	s15, [sp, #4]
 8013eaa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013eae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013eb2:	e7de      	b.n	8013e72 <rintf+0x62>
 8013eb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013eb8:	d3db      	bcc.n	8013e72 <rintf+0x62>
 8013eba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013ebe:	e7d8      	b.n	8013e72 <rintf+0x62>
 8013ec0:	080144d4 	.word	0x080144d4
 8013ec4:	007fffff 	.word	0x007fffff

08013ec8 <scalbnf>:
 8013ec8:	ee10 3a10 	vmov	r3, s0
 8013ecc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013ed0:	d025      	beq.n	8013f1e <scalbnf+0x56>
 8013ed2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013ed6:	d302      	bcc.n	8013ede <scalbnf+0x16>
 8013ed8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013edc:	4770      	bx	lr
 8013ede:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013ee2:	d122      	bne.n	8013f2a <scalbnf+0x62>
 8013ee4:	4b2a      	ldr	r3, [pc, #168]	; (8013f90 <scalbnf+0xc8>)
 8013ee6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013f94 <scalbnf+0xcc>
 8013eea:	4298      	cmp	r0, r3
 8013eec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013ef0:	db16      	blt.n	8013f20 <scalbnf+0x58>
 8013ef2:	ee10 3a10 	vmov	r3, s0
 8013ef6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013efa:	3a19      	subs	r2, #25
 8013efc:	4402      	add	r2, r0
 8013efe:	2afe      	cmp	r2, #254	; 0xfe
 8013f00:	dd15      	ble.n	8013f2e <scalbnf+0x66>
 8013f02:	ee10 3a10 	vmov	r3, s0
 8013f06:	eddf 7a24 	vldr	s15, [pc, #144]	; 8013f98 <scalbnf+0xd0>
 8013f0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013f9c <scalbnf+0xd4>
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	eeb0 7a67 	vmov.f32	s14, s15
 8013f14:	bfb8      	it	lt
 8013f16:	eef0 7a66 	vmovlt.f32	s15, s13
 8013f1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013f1e:	4770      	bx	lr
 8013f20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013fa0 <scalbnf+0xd8>
 8013f24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013f28:	4770      	bx	lr
 8013f2a:	0dd2      	lsrs	r2, r2, #23
 8013f2c:	e7e6      	b.n	8013efc <scalbnf+0x34>
 8013f2e:	2a00      	cmp	r2, #0
 8013f30:	dd06      	ble.n	8013f40 <scalbnf+0x78>
 8013f32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013f36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013f3a:	ee00 3a10 	vmov	s0, r3
 8013f3e:	4770      	bx	lr
 8013f40:	f112 0f16 	cmn.w	r2, #22
 8013f44:	da1a      	bge.n	8013f7c <scalbnf+0xb4>
 8013f46:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013f4a:	4298      	cmp	r0, r3
 8013f4c:	ee10 3a10 	vmov	r3, s0
 8013f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f54:	dd0a      	ble.n	8013f6c <scalbnf+0xa4>
 8013f56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8013f98 <scalbnf+0xd0>
 8013f5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8013f9c <scalbnf+0xd4>
 8013f5e:	eef0 7a40 	vmov.f32	s15, s0
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	bf18      	it	ne
 8013f66:	eeb0 0a47 	vmovne.f32	s0, s14
 8013f6a:	e7db      	b.n	8013f24 <scalbnf+0x5c>
 8013f6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8013fa0 <scalbnf+0xd8>
 8013f70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013fa4 <scalbnf+0xdc>
 8013f74:	eef0 7a40 	vmov.f32	s15, s0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	e7f3      	b.n	8013f64 <scalbnf+0x9c>
 8013f7c:	3219      	adds	r2, #25
 8013f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013f82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013f86:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013fa8 <scalbnf+0xe0>
 8013f8a:	ee07 3a10 	vmov	s14, r3
 8013f8e:	e7c4      	b.n	8013f1a <scalbnf+0x52>
 8013f90:	ffff3cb0 	.word	0xffff3cb0
 8013f94:	4c000000 	.word	0x4c000000
 8013f98:	7149f2ca 	.word	0x7149f2ca
 8013f9c:	f149f2ca 	.word	0xf149f2ca
 8013fa0:	0da24260 	.word	0x0da24260
 8013fa4:	8da24260 	.word	0x8da24260
 8013fa8:	33000000 	.word	0x33000000

08013fac <__errno>:
 8013fac:	4b01      	ldr	r3, [pc, #4]	; (8013fb4 <__errno+0x8>)
 8013fae:	6818      	ldr	r0, [r3, #0]
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop
 8013fb4:	20000198 	.word	0x20000198

08013fb8 <__libc_init_array>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	4d0d      	ldr	r5, [pc, #52]	; (8013ff0 <__libc_init_array+0x38>)
 8013fbc:	4c0d      	ldr	r4, [pc, #52]	; (8013ff4 <__libc_init_array+0x3c>)
 8013fbe:	1b64      	subs	r4, r4, r5
 8013fc0:	10a4      	asrs	r4, r4, #2
 8013fc2:	2600      	movs	r6, #0
 8013fc4:	42a6      	cmp	r6, r4
 8013fc6:	d109      	bne.n	8013fdc <__libc_init_array+0x24>
 8013fc8:	4d0b      	ldr	r5, [pc, #44]	; (8013ff8 <__libc_init_array+0x40>)
 8013fca:	4c0c      	ldr	r4, [pc, #48]	; (8013ffc <__libc_init_array+0x44>)
 8013fcc:	f000 f8f6 	bl	80141bc <_init>
 8013fd0:	1b64      	subs	r4, r4, r5
 8013fd2:	10a4      	asrs	r4, r4, #2
 8013fd4:	2600      	movs	r6, #0
 8013fd6:	42a6      	cmp	r6, r4
 8013fd8:	d105      	bne.n	8013fe6 <__libc_init_array+0x2e>
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fe0:	4798      	blx	r3
 8013fe2:	3601      	adds	r6, #1
 8013fe4:	e7ee      	b.n	8013fc4 <__libc_init_array+0xc>
 8013fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fea:	4798      	blx	r3
 8013fec:	3601      	adds	r6, #1
 8013fee:	e7f2      	b.n	8013fd6 <__libc_init_array+0x1e>
 8013ff0:	0801453c 	.word	0x0801453c
 8013ff4:	0801453c 	.word	0x0801453c
 8013ff8:	0801453c 	.word	0x0801453c
 8013ffc:	0801454c 	.word	0x0801454c

08014000 <__retarget_lock_acquire_recursive>:
 8014000:	4770      	bx	lr

08014002 <__retarget_lock_release_recursive>:
 8014002:	4770      	bx	lr

08014004 <memcpy>:
 8014004:	440a      	add	r2, r1
 8014006:	4291      	cmp	r1, r2
 8014008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801400c:	d100      	bne.n	8014010 <memcpy+0xc>
 801400e:	4770      	bx	lr
 8014010:	b510      	push	{r4, lr}
 8014012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014016:	f803 4f01 	strb.w	r4, [r3, #1]!
 801401a:	4291      	cmp	r1, r2
 801401c:	d1f9      	bne.n	8014012 <memcpy+0xe>
 801401e:	bd10      	pop	{r4, pc}

08014020 <memset>:
 8014020:	4402      	add	r2, r0
 8014022:	4603      	mov	r3, r0
 8014024:	4293      	cmp	r3, r2
 8014026:	d100      	bne.n	801402a <memset+0xa>
 8014028:	4770      	bx	lr
 801402a:	f803 1b01 	strb.w	r1, [r3], #1
 801402e:	e7f9      	b.n	8014024 <memset+0x4>

08014030 <cleanup_glue>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	460c      	mov	r4, r1
 8014034:	6809      	ldr	r1, [r1, #0]
 8014036:	4605      	mov	r5, r0
 8014038:	b109      	cbz	r1, 801403e <cleanup_glue+0xe>
 801403a:	f7ff fff9 	bl	8014030 <cleanup_glue>
 801403e:	4621      	mov	r1, r4
 8014040:	4628      	mov	r0, r5
 8014042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014046:	f000 b869 	b.w	801411c <_free_r>
	...

0801404c <_reclaim_reent>:
 801404c:	4b2c      	ldr	r3, [pc, #176]	; (8014100 <_reclaim_reent+0xb4>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4283      	cmp	r3, r0
 8014052:	b570      	push	{r4, r5, r6, lr}
 8014054:	4604      	mov	r4, r0
 8014056:	d051      	beq.n	80140fc <_reclaim_reent+0xb0>
 8014058:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801405a:	b143      	cbz	r3, 801406e <_reclaim_reent+0x22>
 801405c:	68db      	ldr	r3, [r3, #12]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d14a      	bne.n	80140f8 <_reclaim_reent+0xac>
 8014062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014064:	6819      	ldr	r1, [r3, #0]
 8014066:	b111      	cbz	r1, 801406e <_reclaim_reent+0x22>
 8014068:	4620      	mov	r0, r4
 801406a:	f000 f857 	bl	801411c <_free_r>
 801406e:	6961      	ldr	r1, [r4, #20]
 8014070:	b111      	cbz	r1, 8014078 <_reclaim_reent+0x2c>
 8014072:	4620      	mov	r0, r4
 8014074:	f000 f852 	bl	801411c <_free_r>
 8014078:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801407a:	b111      	cbz	r1, 8014082 <_reclaim_reent+0x36>
 801407c:	4620      	mov	r0, r4
 801407e:	f000 f84d 	bl	801411c <_free_r>
 8014082:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014084:	b111      	cbz	r1, 801408c <_reclaim_reent+0x40>
 8014086:	4620      	mov	r0, r4
 8014088:	f000 f848 	bl	801411c <_free_r>
 801408c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801408e:	b111      	cbz	r1, 8014096 <_reclaim_reent+0x4a>
 8014090:	4620      	mov	r0, r4
 8014092:	f000 f843 	bl	801411c <_free_r>
 8014096:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014098:	b111      	cbz	r1, 80140a0 <_reclaim_reent+0x54>
 801409a:	4620      	mov	r0, r4
 801409c:	f000 f83e 	bl	801411c <_free_r>
 80140a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80140a2:	b111      	cbz	r1, 80140aa <_reclaim_reent+0x5e>
 80140a4:	4620      	mov	r0, r4
 80140a6:	f000 f839 	bl	801411c <_free_r>
 80140aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80140ac:	b111      	cbz	r1, 80140b4 <_reclaim_reent+0x68>
 80140ae:	4620      	mov	r0, r4
 80140b0:	f000 f834 	bl	801411c <_free_r>
 80140b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140b6:	b111      	cbz	r1, 80140be <_reclaim_reent+0x72>
 80140b8:	4620      	mov	r0, r4
 80140ba:	f000 f82f 	bl	801411c <_free_r>
 80140be:	69a3      	ldr	r3, [r4, #24]
 80140c0:	b1e3      	cbz	r3, 80140fc <_reclaim_reent+0xb0>
 80140c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80140c4:	4620      	mov	r0, r4
 80140c6:	4798      	blx	r3
 80140c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80140ca:	b1b9      	cbz	r1, 80140fc <_reclaim_reent+0xb0>
 80140cc:	4620      	mov	r0, r4
 80140ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140d2:	f7ff bfad 	b.w	8014030 <cleanup_glue>
 80140d6:	5949      	ldr	r1, [r1, r5]
 80140d8:	b941      	cbnz	r1, 80140ec <_reclaim_reent+0xa0>
 80140da:	3504      	adds	r5, #4
 80140dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140de:	2d80      	cmp	r5, #128	; 0x80
 80140e0:	68d9      	ldr	r1, [r3, #12]
 80140e2:	d1f8      	bne.n	80140d6 <_reclaim_reent+0x8a>
 80140e4:	4620      	mov	r0, r4
 80140e6:	f000 f819 	bl	801411c <_free_r>
 80140ea:	e7ba      	b.n	8014062 <_reclaim_reent+0x16>
 80140ec:	680e      	ldr	r6, [r1, #0]
 80140ee:	4620      	mov	r0, r4
 80140f0:	f000 f814 	bl	801411c <_free_r>
 80140f4:	4631      	mov	r1, r6
 80140f6:	e7ef      	b.n	80140d8 <_reclaim_reent+0x8c>
 80140f8:	2500      	movs	r5, #0
 80140fa:	e7ef      	b.n	80140dc <_reclaim_reent+0x90>
 80140fc:	bd70      	pop	{r4, r5, r6, pc}
 80140fe:	bf00      	nop
 8014100:	20000198 	.word	0x20000198

08014104 <__malloc_lock>:
 8014104:	4801      	ldr	r0, [pc, #4]	; (801410c <__malloc_lock+0x8>)
 8014106:	f7ff bf7b 	b.w	8014000 <__retarget_lock_acquire_recursive>
 801410a:	bf00      	nop
 801410c:	20005814 	.word	0x20005814

08014110 <__malloc_unlock>:
 8014110:	4801      	ldr	r0, [pc, #4]	; (8014118 <__malloc_unlock+0x8>)
 8014112:	f7ff bf76 	b.w	8014002 <__retarget_lock_release_recursive>
 8014116:	bf00      	nop
 8014118:	20005814 	.word	0x20005814

0801411c <_free_r>:
 801411c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801411e:	2900      	cmp	r1, #0
 8014120:	d048      	beq.n	80141b4 <_free_r+0x98>
 8014122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014126:	9001      	str	r0, [sp, #4]
 8014128:	2b00      	cmp	r3, #0
 801412a:	f1a1 0404 	sub.w	r4, r1, #4
 801412e:	bfb8      	it	lt
 8014130:	18e4      	addlt	r4, r4, r3
 8014132:	f7ff ffe7 	bl	8014104 <__malloc_lock>
 8014136:	4a20      	ldr	r2, [pc, #128]	; (80141b8 <_free_r+0x9c>)
 8014138:	9801      	ldr	r0, [sp, #4]
 801413a:	6813      	ldr	r3, [r2, #0]
 801413c:	4615      	mov	r5, r2
 801413e:	b933      	cbnz	r3, 801414e <_free_r+0x32>
 8014140:	6063      	str	r3, [r4, #4]
 8014142:	6014      	str	r4, [r2, #0]
 8014144:	b003      	add	sp, #12
 8014146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801414a:	f7ff bfe1 	b.w	8014110 <__malloc_unlock>
 801414e:	42a3      	cmp	r3, r4
 8014150:	d90b      	bls.n	801416a <_free_r+0x4e>
 8014152:	6821      	ldr	r1, [r4, #0]
 8014154:	1862      	adds	r2, r4, r1
 8014156:	4293      	cmp	r3, r2
 8014158:	bf04      	itt	eq
 801415a:	681a      	ldreq	r2, [r3, #0]
 801415c:	685b      	ldreq	r3, [r3, #4]
 801415e:	6063      	str	r3, [r4, #4]
 8014160:	bf04      	itt	eq
 8014162:	1852      	addeq	r2, r2, r1
 8014164:	6022      	streq	r2, [r4, #0]
 8014166:	602c      	str	r4, [r5, #0]
 8014168:	e7ec      	b.n	8014144 <_free_r+0x28>
 801416a:	461a      	mov	r2, r3
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	b10b      	cbz	r3, 8014174 <_free_r+0x58>
 8014170:	42a3      	cmp	r3, r4
 8014172:	d9fa      	bls.n	801416a <_free_r+0x4e>
 8014174:	6811      	ldr	r1, [r2, #0]
 8014176:	1855      	adds	r5, r2, r1
 8014178:	42a5      	cmp	r5, r4
 801417a:	d10b      	bne.n	8014194 <_free_r+0x78>
 801417c:	6824      	ldr	r4, [r4, #0]
 801417e:	4421      	add	r1, r4
 8014180:	1854      	adds	r4, r2, r1
 8014182:	42a3      	cmp	r3, r4
 8014184:	6011      	str	r1, [r2, #0]
 8014186:	d1dd      	bne.n	8014144 <_free_r+0x28>
 8014188:	681c      	ldr	r4, [r3, #0]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	6053      	str	r3, [r2, #4]
 801418e:	4421      	add	r1, r4
 8014190:	6011      	str	r1, [r2, #0]
 8014192:	e7d7      	b.n	8014144 <_free_r+0x28>
 8014194:	d902      	bls.n	801419c <_free_r+0x80>
 8014196:	230c      	movs	r3, #12
 8014198:	6003      	str	r3, [r0, #0]
 801419a:	e7d3      	b.n	8014144 <_free_r+0x28>
 801419c:	6825      	ldr	r5, [r4, #0]
 801419e:	1961      	adds	r1, r4, r5
 80141a0:	428b      	cmp	r3, r1
 80141a2:	bf04      	itt	eq
 80141a4:	6819      	ldreq	r1, [r3, #0]
 80141a6:	685b      	ldreq	r3, [r3, #4]
 80141a8:	6063      	str	r3, [r4, #4]
 80141aa:	bf04      	itt	eq
 80141ac:	1949      	addeq	r1, r1, r5
 80141ae:	6021      	streq	r1, [r4, #0]
 80141b0:	6054      	str	r4, [r2, #4]
 80141b2:	e7c7      	b.n	8014144 <_free_r+0x28>
 80141b4:	b003      	add	sp, #12
 80141b6:	bd30      	pop	{r4, r5, pc}
 80141b8:	20003c70 	.word	0x20003c70

080141bc <_init>:
 80141bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141be:	bf00      	nop
 80141c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141c2:	bc08      	pop	{r3}
 80141c4:	469e      	mov	lr, r3
 80141c6:	4770      	bx	lr

080141c8 <_fini>:
 80141c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ca:	bf00      	nop
 80141cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ce:	bc08      	pop	{r3}
 80141d0:	469e      	mov	lr, r3
 80141d2:	4770      	bx	lr
