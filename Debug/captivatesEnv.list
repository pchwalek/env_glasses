
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3b4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0801a4f4  0801a4f4  0002a4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801abb0  0801abb0  0002abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000020  0801abb8  0801abb8  0002abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000014  0801abd8  0801abd8  0002abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  20000004  0801abec  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000016c  0801ad54  0003016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000041  20000208  0801aded  00030208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000024c  0801ae2e  0003024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  20000260  0801ae3f  00030260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a758  200002e8  0801aec7  000302e8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  2000aa40  0801aec7  0003aa40  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00040000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 17 .debug_info   000bd4ba  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00012185  00000000  00000000  000ed7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004e38  00000000  00000000  000ff958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000048c8  00000000  00000000  00104790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00047630  00000000  00000000  00109058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0001f9ca  00000000  00000000  00150688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  00170052  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00013bf0  00000000  00000000  001700a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00008050  00000000  00000000  00183c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e8 	.word	0x200002e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a4dc 	.word	0x0801a4dc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002ec 	.word	0x200002ec
 800017c:	0801a4dc 	.word	0x0801a4dc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 b96e 	b.w	8000cc0 <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468c      	mov	ip, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8083 	bne.w	8000b12 <__udivmoddi4+0x116>
 8000a0c:	428a      	cmp	r2, r1
 8000a0e:	4617      	mov	r7, r2
 8000a10:	d947      	bls.n	8000aa2 <__udivmoddi4+0xa6>
 8000a12:	fab2 f282 	clz	r2, r2
 8000a16:	b142      	cbz	r2, 8000a2a <__udivmoddi4+0x2e>
 8000a18:	f1c2 0020 	rsb	r0, r2, #32
 8000a1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4097      	lsls	r7, r2
 8000a24:	ea40 0c01 	orr.w	ip, r0, r1
 8000a28:	4094      	lsls	r4, r2
 8000a2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a2e:	0c23      	lsrs	r3, r4, #16
 8000a30:	fbbc f6f8 	udiv	r6, ip, r8
 8000a34:	fa1f fe87 	uxth.w	lr, r7
 8000a38:	fb08 c116 	mls	r1, r8, r6, ip
 8000a3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a40:	fb06 f10e 	mul.w	r1, r6, lr
 8000a44:	4299      	cmp	r1, r3
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x60>
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a4e:	f080 8119 	bcs.w	8000c84 <__udivmoddi4+0x288>
 8000a52:	4299      	cmp	r1, r3
 8000a54:	f240 8116 	bls.w	8000c84 <__udivmoddi4+0x288>
 8000a58:	3e02      	subs	r6, #2
 8000a5a:	443b      	add	r3, r7
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a64:	fb08 3310 	mls	r3, r8, r0, r3
 8000a68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x8c>
 8000a74:	193c      	adds	r4, r7, r4
 8000a76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a7a:	f080 8105 	bcs.w	8000c88 <__udivmoddi4+0x28c>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	f240 8102 	bls.w	8000c88 <__udivmoddi4+0x28c>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8c:	eba4 040e 	sub.w	r4, r4, lr
 8000a90:	2600      	movs	r6, #0
 8000a92:	b11d      	cbz	r5, 8000a9c <__udivmoddi4+0xa0>
 8000a94:	40d4      	lsrs	r4, r2
 8000a96:	2300      	movs	r3, #0
 8000a98:	e9c5 4300 	strd	r4, r3, [r5]
 8000a9c:	4631      	mov	r1, r6
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	b902      	cbnz	r2, 8000aa6 <__udivmoddi4+0xaa>
 8000aa4:	deff      	udf	#255	; 0xff
 8000aa6:	fab2 f282 	clz	r2, r2
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d150      	bne.n	8000b50 <__udivmoddi4+0x154>
 8000aae:	1bcb      	subs	r3, r1, r7
 8000ab0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab4:	fa1f f887 	uxth.w	r8, r7
 8000ab8:	2601      	movs	r6, #1
 8000aba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000abe:	0c21      	lsrs	r1, r4, #16
 8000ac0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb08 f30c 	mul.w	r3, r8, ip
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0xe4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0xe2>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	f200 80e9 	bhi.w	8000cb0 <__udivmoddi4+0x2b4>
 8000ade:	4684      	mov	ip, r0
 8000ae0:	1ac9      	subs	r1, r1, r3
 8000ae2:	b2a3      	uxth	r3, r4
 8000ae4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000af0:	fb08 f800 	mul.w	r8, r8, r0
 8000af4:	45a0      	cmp	r8, r4
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x10c>
 8000af8:	193c      	adds	r4, r7, r4
 8000afa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x10a>
 8000b00:	45a0      	cmp	r8, r4
 8000b02:	f200 80d9 	bhi.w	8000cb8 <__udivmoddi4+0x2bc>
 8000b06:	4618      	mov	r0, r3
 8000b08:	eba4 0408 	sub.w	r4, r4, r8
 8000b0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b10:	e7bf      	b.n	8000a92 <__udivmoddi4+0x96>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x12e>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	f000 80b1 	beq.w	8000c7e <__udivmoddi4+0x282>
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b22:	4630      	mov	r0, r6
 8000b24:	4631      	mov	r1, r6
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	fab3 f683 	clz	r6, r3
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d14a      	bne.n	8000bc8 <__udivmoddi4+0x1cc>
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0x140>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 80b8 	bhi.w	8000cac <__udivmoddi4+0x2b0>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	468c      	mov	ip, r1
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0a8      	beq.n	8000a9c <__udivmoddi4+0xa0>
 8000b4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b4e:	e7a5      	b.n	8000a9c <__udivmoddi4+0xa0>
 8000b50:	f1c2 0320 	rsb	r3, r2, #32
 8000b54:	fa20 f603 	lsr.w	r6, r0, r3
 8000b58:	4097      	lsls	r7, r2
 8000b5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b62:	40d9      	lsrs	r1, r3
 8000b64:	4330      	orrs	r0, r6
 8000b66:	0c03      	lsrs	r3, r0, #16
 8000b68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b6c:	fa1f f887 	uxth.w	r8, r7
 8000b70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f108 	mul.w	r1, r6, r8
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x19c>
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b8a:	f080 808d 	bcs.w	8000ca8 <__udivmoddi4+0x2ac>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 808a 	bls.w	8000ca8 <__udivmoddi4+0x2ac>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	443b      	add	r3, r7
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b281      	uxth	r1, r0
 8000b9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb00 f308 	mul.w	r3, r0, r8
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x1c4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bb6:	d273      	bcs.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	d971      	bls.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4439      	add	r1, r7
 8000bc0:	1acb      	subs	r3, r1, r3
 8000bc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bc6:	e778      	b.n	8000aba <__udivmoddi4+0xbe>
 8000bc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000bcc:	fa03 f406 	lsl.w	r4, r3, r6
 8000bd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bd4:	431c      	orrs	r4, r3
 8000bd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bda:	fa01 f306 	lsl.w	r3, r1, r6
 8000bde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000be2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000be6:	431f      	orrs	r7, r3
 8000be8:	0c3b      	lsrs	r3, r7, #16
 8000bea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bee:	fa1f f884 	uxth.w	r8, r4
 8000bf2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bf6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000bfe:	458a      	cmp	sl, r1
 8000c00:	fa02 f206 	lsl.w	r2, r2, r6
 8000c04:	fa00 f306 	lsl.w	r3, r0, r6
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x220>
 8000c0a:	1861      	adds	r1, r4, r1
 8000c0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c10:	d248      	bcs.n	8000ca4 <__udivmoddi4+0x2a8>
 8000c12:	458a      	cmp	sl, r1
 8000c14:	d946      	bls.n	8000ca4 <__udivmoddi4+0x2a8>
 8000c16:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1a:	4421      	add	r1, r4
 8000c1c:	eba1 010a 	sub.w	r1, r1, sl
 8000c20:	b2bf      	uxth	r7, r7
 8000c22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c2e:	fb00 f808 	mul.w	r8, r0, r8
 8000c32:	45b8      	cmp	r8, r7
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x24a>
 8000c36:	19e7      	adds	r7, r4, r7
 8000c38:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c3c:	d22e      	bcs.n	8000c9c <__udivmoddi4+0x2a0>
 8000c3e:	45b8      	cmp	r8, r7
 8000c40:	d92c      	bls.n	8000c9c <__udivmoddi4+0x2a0>
 8000c42:	3802      	subs	r0, #2
 8000c44:	4427      	add	r7, r4
 8000c46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4a:	eba7 0708 	sub.w	r7, r7, r8
 8000c4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c52:	454f      	cmp	r7, r9
 8000c54:	46c6      	mov	lr, r8
 8000c56:	4649      	mov	r1, r9
 8000c58:	d31a      	bcc.n	8000c90 <__udivmoddi4+0x294>
 8000c5a:	d017      	beq.n	8000c8c <__udivmoddi4+0x290>
 8000c5c:	b15d      	cbz	r5, 8000c76 <__udivmoddi4+0x27a>
 8000c5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c62:	eb67 0701 	sbc.w	r7, r7, r1
 8000c66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c6a:	40f2      	lsrs	r2, r6
 8000c6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c70:	40f7      	lsrs	r7, r6
 8000c72:	e9c5 2700 	strd	r2, r7, [r5]
 8000c76:	2600      	movs	r6, #0
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e70b      	b.n	8000a9c <__udivmoddi4+0xa0>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e9      	b.n	8000a5c <__udivmoddi4+0x60>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6fd      	b.n	8000a88 <__udivmoddi4+0x8c>
 8000c8c:	4543      	cmp	r3, r8
 8000c8e:	d2e5      	bcs.n	8000c5c <__udivmoddi4+0x260>
 8000c90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c94:	eb69 0104 	sbc.w	r1, r9, r4
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7df      	b.n	8000c5c <__udivmoddi4+0x260>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e7d2      	b.n	8000c46 <__udivmoddi4+0x24a>
 8000ca0:	4660      	mov	r0, ip
 8000ca2:	e78d      	b.n	8000bc0 <__udivmoddi4+0x1c4>
 8000ca4:	4681      	mov	r9, r0
 8000ca6:	e7b9      	b.n	8000c1c <__udivmoddi4+0x220>
 8000ca8:	4666      	mov	r6, ip
 8000caa:	e775      	b.n	8000b98 <__udivmoddi4+0x19c>
 8000cac:	4630      	mov	r0, r6
 8000cae:	e74a      	b.n	8000b46 <__udivmoddi4+0x14a>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	4439      	add	r1, r7
 8000cb6:	e713      	b.n	8000ae0 <__udivmoddi4+0xe4>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	443c      	add	r4, r7
 8000cbc:	e724      	b.n	8000b08 <__udivmoddi4+0x10c>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d10:	4a2a      	ldr	r2, [pc, #168]	; (8000dbc <MX_ADC1_Init+0xc4>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d1e:	2210      	movs	r2, #16
 8000d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d50:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d74:	4810      	ldr	r0, [pc, #64]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000d76:	f003 fbff 	bl	8004578 <HAL_ADC_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d80:	f001 ff9a 	bl	8002cb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_ADC1_Init+0xc8>)
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d90:	237f      	movs	r3, #127	; 0x7f
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d94:	2304      	movs	r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_ADC1_Init+0xc0>)
 8000da2:	f003 fd35 	bl	8004810 <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000dac:	f001 ff84 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20009cb4 	.word	0x20009cb4
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	19200040 	.word	0x19200040

08000dc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <HAL_ADC_MspInit+0xa4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d13c      	bne.n	8000e60 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000de6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dea:	f7ff ff6b 	bl	8000cc4 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff68 	bl	8000cc4 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8000df4:	2302      	movs	r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f004 fc4b 	bl	80056a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_MspInit+0xac>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e16:	2205      	movs	r2, #5
 8000e18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e46:	f004 fa13 	bl	8005270 <HAL_DMA_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8000e50:	f001 ff32 	bl	8002cb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e58:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_ADC_MspInit+0xa8>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	50040000 	.word	0x50040000
 8000e6c:	20009d18 	.word	0x20009d18
 8000e70:	40020008 	.word	0x40020008

08000e74 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <APPD_EnableCPU2+0x34>)
 8000e7c:	1d3c      	adds	r4, r7, #4
 8000e7e:	461d      	mov	r5, r3
 8000e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e88:	c403      	stmia	r4!, {r0, r1}
 8000e8a:	8022      	strh	r2, [r4, #0]
 8000e8c:	3402      	adds	r4, #2
 8000e8e:	0c13      	lsrs	r3, r2, #16
 8000e90:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000e92:	f012 fc93 	bl	80137bc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f011 ff2e 	bl	8012cfa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000e9e:	bf00      	nop
}
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0801a4f4 	.word	0x0801a4f4

08000eac <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eba:	f023 0207 	bic.w	r2, r3, #7
 8000ebe:	4905      	ldr	r1, [pc, #20]	; (8000ed4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	58000400 	.word	0x58000400

08000ed8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <LL_EXTI_EnableIT_32_63+0x24>)
 8000ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000ee6:	4905      	ldr	r1, [pc, #20]	; (8000efc <LL_EXTI_EnableIT_32_63+0x24>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	58000800 	.word	0x58000800

08000f00 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f1a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f26:	4313      	orrs	r3, r2
 8000f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	cafecafe 	.word	0xcafecafe

08000f3c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fbc:	d101      	bne.n	8000fc2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fe2:	d101      	bne.n	8000fe8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <LL_DBGMCU_GetRevisionID+0x18>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0c1b      	lsrs	r3, r3, #16
 8001032:	b29b      	uxth	r3, r3
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e0042000 	.word	0xe0042000

08001044 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	041b      	lsls	r3, r3, #16
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	615a      	str	r2, [r3, #20]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	615a      	str	r2, [r3, #20]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	609a      	str	r2, [r3, #8]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	619a      	str	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <LL_LPM_EnableSleep+0x1c>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <LL_LPM_EnableSleep+0x1c>)
 8001112:	f023 0304 	bic.w	r3, r3, #4
 8001116:	6113      	str	r3, [r2, #16]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	22ca      	movs	r2, #202	; 0xca
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2253      	movs	r2, #83	; 0x53
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f023 0207 	bic.w	r2, r3, #7
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <MX_APPE_Config+0x18>)
 800118e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001192:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8001194:	f000 f824 	bl	80011e0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001198:	f000 f864 	bl	8001264 <Config_HSE>

  return;
 800119c:	bf00      	nop
}
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58004000 	.word	0x58004000

080011a4 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80011a8:	f000 f870 	bl	800128c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80011ac:	f000 f888 	bl	80012c0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80011b0:	4903      	ldr	r1, [pc, #12]	; (80011c0 <MX_APPE_Init+0x1c>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 feec 	bl	8001f90 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80011b8:	f000 f890 	bl	80012dc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80011bc:	bf00      	nop
}
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20009eac 	.word	0x20009eac

080011c4 <Init_Smps>:

void Init_Smps( void )
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 80011c8:	bf00      	nop
}
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <Init_Exti>:

void Init_Exti( void )
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fe7e 	bl	8000ed8 <LL_EXTI_EnableIT_32_63>

  return;
 80011dc:	bf00      	nop
}
 80011de:	bd80      	pop	{r7, pc}

080011e0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80011e4:	f000 f804 	bl	80011f0 <Reset_BackupDomain>

  Reset_IPCC();
 80011e8:	f000 f81a 	bl	8001220 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80011ec:	bf00      	nop
}
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80011f4:	f7ff fed8 	bl	8000fa8 <LL_RCC_IsActiveFlag_PINRST>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00d      	beq.n	800121a <Reset_BackupDomain+0x2a>
 80011fe:	f7ff fee6 	bl	8000fce <LL_RCC_IsActiveFlag_SFTRST>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d108      	bne.n	800121a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001208:	f006 ff66 	bl	80080d8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800120c:	f006 ff64 	bl	80080d8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001210:	f7ff fea8 	bl	8000f64 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001214:	f7ff feb7 	bl	8000f86 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001218:	bf00      	nop
 800121a:	bf00      	nop
}
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001224:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001228:	f7ff fee4 	bl	8000ff4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800122c:	213f      	movs	r1, #63	; 0x3f
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <Reset_IPCC+0x40>)
 8001230:	f7ff ff4e 	bl	80010d0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001234:	213f      	movs	r1, #63	; 0x3f
 8001236:	480a      	ldr	r0, [pc, #40]	; (8001260 <Reset_IPCC+0x40>)
 8001238:	f7ff ff58 	bl	80010ec <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800123c:	213f      	movs	r1, #63	; 0x3f
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <Reset_IPCC+0x40>)
 8001240:	f7ff ff00 	bl	8001044 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001244:	213f      	movs	r1, #63	; 0x3f
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <Reset_IPCC+0x40>)
 8001248:	f7ff ff1f 	bl	800108a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800124c:	213f      	movs	r1, #63	; 0x3f
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <Reset_IPCC+0x40>)
 8001250:	f7ff ff0a 	bl	8001068 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001254:	213f      	movs	r1, #63	; 0x3f
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <Reset_IPCC+0x40>)
 8001258:	f7ff ff29 	bl	80010ae <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800125c:	bf00      	nop
}
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58000c00 	.word	0x58000c00

08001264 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800126a:	2000      	movs	r0, #0
 800126c:	f012 fb32 	bl	80138d4 <OTP_Read>
 8001270:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	799b      	ldrb	r3, [r3, #6]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe3f 	bl	8000f00 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001282:	bf00      	nop
 8001284:	bf00      	nop
}
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <System_Init>:

static void System_Init( void )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  Init_Smps( );
 8001290:	f7ff ff98 	bl	80011c4 <Init_Smps>

  Init_Exti( );
 8001294:	f7ff ff9d 	bl	80011d2 <Init_Exti>

  Init_Rtc( );
 8001298:	f000 f802 	bl	80012a0 <Init_Rtc>

  return;
 800129c:	bf00      	nop
}
 800129e:	bd80      	pop	{r7, pc}

080012a0 <Init_Rtc>:

static void Init_Rtc( void )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <Init_Rtc+0x1c>)
 80012a6:	f7ff ff4c 	bl	8001142 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012aa:	2100      	movs	r1, #0
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <Init_Rtc+0x1c>)
 80012ae:	f7ff ff58 	bl	8001162 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80012b2:	4802      	ldr	r0, [pc, #8]	; (80012bc <Init_Rtc+0x1c>)
 80012b4:	f7ff ff38 	bl	8001128 <LL_RTC_EnableWriteProtection>

  return;
 80012b8:	bf00      	nop
}
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40002800 	.word	0x40002800

080012c0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012c8:	f7ff fe38 	bl	8000f3c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80012cc:	f018 ffc2 	bl	801a254 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80012d0:	2004      	movs	r0, #4
 80012d2:	f7ff fdeb 	bl	8000eac <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80012d6:	bf00      	nop
}
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80012e2:	f012 f8b5 	bl	8013450 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 80012e6:	2000      	movs	r0, #0
 80012e8:	f013 fa62 	bl	80147b0 <osMutexNew>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <appe_Tl_Init+0x70>)
 80012f0:	6013      	str	r3, [r2, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2001      	movs	r0, #1
 80012f8:	f013 fb68 	bl	80149cc <osSemaphoreNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <appe_Tl_Init+0x74>)
 8001300:	6013      	str	r3, [r2, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <appe_Tl_Init+0x78>)
 8001304:	2100      	movs	r1, #0
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <appe_Tl_Init+0x7c>)
 8001308:	f013 f8a8 	bl	801445c <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <appe_Tl_Init+0x80>)
 8001310:	6013      	str	r3, [r2, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <appe_Tl_Init+0x84>)
 8001314:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <appe_Tl_Init+0x88>)
 8001318:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <appe_Tl_Init+0x8c>)
 8001320:	f011 ff5c 	bl	80131dc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <appe_Tl_Init+0x90>)
 8001326:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <appe_Tl_Init+0x94>)
 800132a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <appe_Tl_Init+0x98>)
 800132e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001330:	f240 533c 	movw	r3, #1340	; 0x53c
 8001334:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4618      	mov	r0, r3
 800133c:	f012 f9ca 	bl	80136d4 <TL_MM_Init>

  TL_Enable();
 8001340:	f012 f880 	bl	8013444 <TL_Enable>

  return;
 8001344:	bf00      	nop
}
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20009d78 	.word	0x20009d78
 8001350:	20009d80 	.word	0x20009d80
 8001354:	0801a7e8 	.word	0x0801a7e8
 8001358:	080014bf 	.word	0x080014bf
 800135c:	20009d7c 	.word	0x20009d7c
 8001360:	20030724 	.word	0x20030724
 8001364:	08001379 	.word	0x08001379
 8001368:	080013b9 	.word	0x080013b9
 800136c:	2003093c 	.word	0x2003093c
 8001370:	20030830 	.word	0x20030830
 8001374:	200301e8 	.word	0x200301e8

08001378 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <APPE_SysStatusNot+0x16>
 8001388:	2b01      	cmp	r3, #1
 800138a:	d008      	beq.n	800139e <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 800138c:	e00d      	b.n	80013aa <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <APPE_SysStatusNot+0x3c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001396:	4618      	mov	r0, r3
 8001398:	f013 fa90 	bl	80148bc <osMutexAcquire>
      break;
 800139c:	e005      	b.n	80013aa <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <APPE_SysStatusNot+0x3c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f013 fad5 	bl	8014952 <osMutexRelease>
      break;
 80013a8:	bf00      	nop
  }
  return;
 80013aa:	bf00      	nop
}
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20009d78 	.word	0x20009d78

080013b8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	330b      	adds	r3, #11
 80013c6:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4618      	mov	r0, r3
 80013ce:	f011 fcc1 	bl	8012d54 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d81b      	bhi.n	8001418 <APPE_SysUserEvtRx+0x60>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <APPE_SysUserEvtRx+0x30>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001409 	.word	0x08001409
 80013ec:	08001411 	.word	0x08001411
 80013f0:	08001419 	.word	0x08001419
 80013f4:	08001419 	.word	0x08001419
 80013f8:	08001419 	.word	0x08001419
 80013fc:	08001419 	.word	0x08001419
 8001400:	08001419 	.word	0x08001419
 8001404:	08001419 	.word	0x08001419
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f81c 	bl	8001446 <APPE_SysEvtReadyProcessing>
    break;
 800140e:	e004      	b.n	800141a <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f807 	bl	8001424 <APPE_SysEvtError>
    break;
 8001416:	e000      	b.n	800141a <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 8001418:	bf00      	nop
  }

  return;
 800141a:	bf00      	nop
}
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	330b      	adds	r3, #11
 8001432:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3302      	adds	r3, #2
 8001438:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800143a:	bf00      	nop
}
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b08a      	sub	sp, #40	; 0x28
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	330b      	adds	r3, #11
 8001466:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	3302      	adds	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d117      	bne.n	80014a6 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8001476:	f7ff fcfd 	bl	8000e74 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800147a:	230d      	movs	r3, #13
 800147c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800147e:	237f      	movs	r3, #127	; 0x7f
 8001480:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001482:	f7ff fdd1 	bl	8001028 <LL_DBGMCU_GetRevisionID>
 8001486:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	b29b      	uxth	r3, r3
 800148c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4618      	mov	r0, r3
 8001494:	f011 fc48 	bl	8012d28 <SHCI_C2_Config>

    APP_BLE_Init( );
 8001498:	f017 f974 	bl	8018784 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800149c:	2100      	movs	r1, #0
 800149e:	2001      	movs	r0, #1
 80014a0:	f018 feea 	bl	801a278 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 80014a4:	e007      	b.n	80014b6 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d103      	bne.n	80014b6 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  return;
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
}
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80014c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ca:	2100      	movs	r1, #0
 80014cc:	2001      	movs	r0, #1
 80014ce:	f013 f8d3 	bl	8014678 <osThreadFlagsWait>
     shci_user_evt_proc();
 80014d2:	f011 fe9f 	bl	8013214 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80014d6:	e7f6      	b.n	80014c6 <ShciUserEvtProcess+0x8>

080014d8 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f002 fe9a 	bl	8004218 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f0:	d00a      	beq.n	8001508 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80014f2:	f002 fea9 	bl	8004248 <HAL_GetTickFreq>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001500:	e002      	b.n	8001508 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001502:	f7ff fe01 	bl	8001108 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001506:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001508:	f002 fe86 	bl	8004218 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f4      	bhi.n	8001502 <HAL_Delay+0x2a>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <shci_notify_asynch_evt+0x1c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f013 f852 	bl	80145dc <osThreadFlagsSet>
  return;
 8001538:	bf00      	nop
}
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20009d7c 	.word	0x20009d7c

08001544 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <shci_cmd_resp_release+0x1c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f013 fb17 	bl	8014b84 <osSemaphoreRelease>
  return;
 8001556:	bf00      	nop
}
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20009d80 	.word	0x20009d80

08001564 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <shci_cmd_resp_wait+0x20>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001574:	4618      	mov	r0, r3
 8001576:	f013 fab3 	bl	8014ae0 <osSemaphoreAcquire>
  return;
 800157a:	bf00      	nop
}
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20009d80 	.word	0x20009d80

08001588 <_Z16StartDefaultTaskPv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001588:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	osDelay(5000);
 800158a:	f241 3088 	movw	r0, #5000	; 0x1388
 800158e:	f013 f8f4 	bl	801477a <osDelay>
	startThreads();
	vTaskDelete( NULL );
 8001592:	2000      	movs	r0, #0
 8001594:	f014 ffd4 	bl	8016540 <vTaskDelete>
////		osDelay(5000);
//		osDelay(1);
//	}
//  }
	/* USER CODE END StartDefaultTask */
}
 8001598:	bd08      	pop	{r3, pc}
	...

0800159c <_Z16MX_FREERTOS_Initv>:
void MX_FREERTOS_Init(void) {
 800159c:	b508      	push	{r3, lr}
	packet_QueueHandle = osMessageQueueNew(MAX_PACKET_QUEUE_SIZE,
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <_Z16MX_FREERTOS_Initv+0x64>)
 80015a0:	2104      	movs	r1, #4
 80015a2:	200a      	movs	r0, #10
 80015a4:	f013 fb32 	bl	8014c0c <osMessageQueueNew>
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <_Z16MX_FREERTOS_Initv+0x68>)
 80015aa:	6018      	str	r0, [r3, #0]
	packetAvail_QueueHandle = osMessageQueueNew(MAX_PACKET_QUEUE_SIZE,
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <_Z16MX_FREERTOS_Initv+0x6c>)
 80015ae:	2104      	movs	r1, #4
 80015b0:	200a      	movs	r0, #10
 80015b2:	f013 fb2b 	bl	8014c0c <osMessageQueueNew>
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <_Z16MX_FREERTOS_Initv+0x70>)
 80015b8:	6018      	str	r0, [r3, #0]
	messageI2C1_LockHandle = osMutexNew(&messageI2C1_Lock_attributes);
 80015ba:	4815      	ldr	r0, [pc, #84]	; (8001610 <_Z16MX_FREERTOS_Initv+0x74>)
 80015bc:	f013 f8f8 	bl	80147b0 <osMutexNew>
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <_Z16MX_FREERTOS_Initv+0x78>)
 80015c2:	6018      	str	r0, [r3, #0]
	messageI2C3_LockHandle = osMutexNew(&messageI2C3_Lock_attributes);
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <_Z16MX_FREERTOS_Initv+0x7c>)
 80015c6:	f013 f8f3 	bl	80147b0 <osMutexNew>
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <_Z16MX_FREERTOS_Initv+0x80>)
 80015cc:	6018      	str	r0, [r3, #0]
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <_Z16MX_FREERTOS_Initv+0x84>)
 80015d0:	2112      	movs	r1, #18
 80015d2:	2003      	movs	r0, #3
 80015d4:	f013 fb1a 	bl	8014c0c <osMessageQueueNew>
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <_Z16MX_FREERTOS_Initv+0x88>)
 80015da:	6018      	str	r0, [r3, #0]
	senderTaskHandle = osThreadNew(senderThread, NULL, &senderTask_attributes);
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <_Z16MX_FREERTOS_Initv+0x8c>)
 80015de:	2100      	movs	r1, #0
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <_Z16MX_FREERTOS_Initv+0x90>)
 80015e2:	f012 ff3b 	bl	801445c <osThreadNew>
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <_Z16MX_FREERTOS_Initv+0x94>)
 80015e8:	6018      	str	r0, [r3, #0]
	frontLightsThreHandle = osThreadNew(ThreadFrontLightsComplexTask, NULL,
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_Z16MX_FREERTOS_Initv+0x98>)
 80015ec:	2100      	movs	r1, #0
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <_Z16MX_FREERTOS_Initv+0x9c>)
 80015f0:	f012 ff34 	bl	801445c <osThreadNew>
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_Z16MX_FREERTOS_Initv+0xa0>)
 80015f6:	6018      	str	r0, [r3, #0]
	sensorThreadsRunning = 1;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_Z16MX_FREERTOS_Initv+0xa4>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
}
 80015fe:	bd08      	pop	{r3, pc}
 8001600:	0801a8dc 	.word	0x0801a8dc
 8001604:	20000320 	.word	0x20000320
 8001608:	0801a938 	.word	0x0801a938
 800160c:	2000031c 	.word	0x2000031c
 8001610:	0801a918 	.word	0x0801a918
 8001614:	20000314 	.word	0x20000314
 8001618:	0801a928 	.word	0x0801a928
 800161c:	20000318 	.word	0x20000318
 8001620:	0801a950 	.word	0x0801a950
 8001624:	20000310 	.word	0x20000310
 8001628:	0801a894 	.word	0x0801a894
 800162c:	080030a9 	.word	0x080030a9
 8001630:	20000324 	.word	0x20000324
 8001634:	0801a8f4 	.word	0x0801a8f4
 8001638:	080028f9 	.word	0x080028f9
 800163c:	2000030c 	.word	0x2000030c
 8001640:	200025d8 	.word	0x200025d8

08001644 <startInitThread>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
#ifdef __cplusplus
extern "C" {
#endif
void startInitThread() {
 8001644:	b508      	push	{r3, lr}
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <startInitThread+0x14>)
 8001648:	2100      	movs	r1, #0
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <startInitThread+0x18>)
 800164c:	f012 ff06 	bl	801445c <osThreadNew>
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <startInitThread+0x1c>)
 8001652:	6018      	str	r0, [r3, #0]
			&defaultTask_attributes);

}
 8001654:	bd08      	pop	{r3, pc}
 8001656:	bf00      	nop
 8001658:	0801a8b8 	.word	0x0801a8b8
 800165c:	08001589 	.word	0x08001589
 8001660:	20000308 	.word	0x20000308

08001664 <HAL_TIM_PWM_PulseFinishedCallback>:
	blink_ptr = blink_buffer;
	osThreadFlagsSet(blinkTaskHandle, 0x00000004U);

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
//	}
//	pwm_tracker++;

//	low_adc_sample = 1;
//	HAL_ADC_Start(&hadc1);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_Z41__static_initialization_and_destruction_0ii>:

}

static void triggerBMESample(void *argument) {
	osThreadFlagsSet(bmeTaskHandle, GRAB_SAMPLE_BIT);
}
 8001678:	2801      	cmp	r0, #1
 800167a:	d000      	beq.n	800167e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800167c:	4770      	bx	lr
 800167e:	b508      	push	{r3, lr}
 8001680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001684:	4299      	cmp	r1, r3
 8001686:	d000      	beq.n	800168a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8001688:	bd08      	pop	{r3, pc}
Adafruit_BME680 bme;
 800168a:	4802      	ldr	r0, [pc, #8]	; (8001694 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 800168c:	f012 fa6a 	bl	8013b64 <_ZN15Adafruit_BME680C1Ev>
}
 8001690:	e7fa      	b.n	8001688 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8001692:	bf00      	nop
 8001694:	20000328 	.word	0x20000328

08001698 <_GLOBAL__sub_I_periodicBMETimer_id>:
 8001698:	b508      	push	{r3, lr}
 800169a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff ffea 	bl	8001678 <_Z41__static_initialization_and_destruction_0ii>
 80016a4:	bd08      	pop	{r3, pc}

080016a6 <LL_AHB1_GRP1_EnableClock>:
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016dc:	2004      	movs	r0, #4
 80016de:	f7ff ffe2 	bl	80016a6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	2001      	movs	r0, #1
 80016e4:	f7ff ffdf 	bl	80016a6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2105      	movs	r1, #5
 80016ec:	200b      	movs	r0, #11
 80016ee:	f003 fd6d 	bl	80051cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016f2:	200b      	movs	r0, #11
 80016f4:	f003 fd84 	bl	8005200 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2105      	movs	r1, #5
 80016fc:	200c      	movs	r0, #12
 80016fe:	f003 fd65 	bl	80051cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001702:	200c      	movs	r0, #12
 8001704:	f003 fd7c 	bl	8005200 <HAL_NVIC_EnableIRQ>

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <extMemChipSelectPin>:

#define SPI_HAN &hspi1

uint8_t header[4];

void extMemChipSelectPin(bool state){
 800170c:	b508      	push	{r3, lr}
	if(state){
 800170e:	b138      	cbz	r0, 8001720 <extMemChipSelectPin+0x14>
		HAL_GPIO_WritePin(MEM_CS_GPIO_Port, MEM_CS_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f004 f933 	bl	8005984 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(MEM_CS_GPIO_Port, MEM_CS_Pin, GPIO_PIN_SET);
	}
}
 800171e:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(MEM_CS_GPIO_Port, MEM_CS_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f004 f92b 	bl	8005984 <HAL_GPIO_WritePin>
}
 800172e:	e7f6      	b.n	800171e <extMemChipSelectPin+0x12>

08001730 <_Z22extMemWriteEnableLatchb>:

bool extMemWriteEnableLatch(bool state){
 8001730:	b510      	push	{r4, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	4604      	mov	r4, r0
	uint8_t dataTX;
	extMemChipSelectPin(true);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff ffe8 	bl	800170c <extMemChipSelectPin>
	if(state){
 800173c:	b17c      	cbz	r4, 800175e <_Z22extMemWriteEnableLatchb+0x2e>
		dataTX = WREN;
 800173e:	2306      	movs	r3, #6
 8001740:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_SPI_Transmit(SPI_HAN, &dataTX, 1, 10);
 8001744:	230a      	movs	r3, #10
 8001746:	2201      	movs	r2, #1
 8001748:	f10d 0107 	add.w	r1, sp, #7
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <_Z22extMemWriteEnableLatchb+0x44>)
 800174e:	f00a f9e4 	bl	800bb1a <HAL_SPI_Transmit>
	}else{
		dataTX = WRDI;
		HAL_SPI_Transmit(SPI_HAN, &dataTX, 1, 10);
	}
	extMemChipSelectPin(false);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff ffda 	bl	800170c <extMemChipSelectPin>
	return true;
}
 8001758:	2001      	movs	r0, #1
 800175a:	b002      	add	sp, #8
 800175c:	bd10      	pop	{r4, pc}
		dataTX = WRDI;
 800175e:	2304      	movs	r3, #4
 8001760:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_SPI_Transmit(SPI_HAN, &dataTX, 1, 10);
 8001764:	230a      	movs	r3, #10
 8001766:	2201      	movs	r2, #1
 8001768:	f10d 0107 	add.w	r1, sp, #7
 800176c:	4801      	ldr	r0, [pc, #4]	; (8001774 <_Z22extMemWriteEnableLatchb+0x44>)
 800176e:	f00a f9d4 	bl	800bb1a <HAL_SPI_Transmit>
 8001772:	e7ee      	b.n	8001752 <_Z22extMemWriteEnableLatchb+0x22>
 8001774:	2000a02c 	.word	0x2000a02c

08001778 <extMemInit>:


bool extMemInit(){
 8001778:	b508      	push	{r3, lr}
	extMemWriteEnableLatch(true);
 800177a:	2001      	movs	r0, #1
 800177c:	f7ff ffd8 	bl	8001730 <_Z22extMemWriteEnableLatchb>
	return true;
}
 8001780:	2001      	movs	r0, #1
 8001782:	bd08      	pop	{r3, pc}

08001784 <LL_AHB2_GRP1_EnableClock>:
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff ffd9 	bl	8001784 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2004      	movs	r0, #4
 80017d4:	f7ff ffd6 	bl	8001784 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	2002      	movs	r0, #2
 80017da:	f7ff ffd3 	bl	8001784 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2008      	movs	r0, #8
 80017e0:	f7ff ffd0 	bl	8001784 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_WP_GPIO_Port, MEM_WP_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ea:	483b      	ldr	r0, [pc, #236]	; (80018d8 <MX_GPIO_Init+0x120>)
 80017ec:	f004 f8ca 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEM_CS_GPIO_Port, MEM_CS_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f004 f8c3 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2101      	movs	r1, #1
 8001802:	4836      	ldr	r0, [pc, #216]	; (80018dc <MX_GPIO_Init+0x124>)
 8001804:	f004 f8be 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 8001808:	2302      	movs	r3, #2
 800180a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f003 ff42 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8001820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001824:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4828      	ldr	r0, [pc, #160]	; (80018d8 <MX_GPIO_Init+0x120>)
 8001838:	f003 ff34 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 800183c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f003 ff25 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800185a:	2301      	movs	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800185e:	2311      	movs	r3, #17
 8001860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4619      	mov	r1, r3
 800186e:	481b      	ldr	r0, [pc, #108]	; (80018dc <MX_GPIO_Init+0x124>)
 8001870:	f003 ff18 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001874:	2304      	movs	r3, #4
 8001876:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800187c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4816      	ldr	r0, [pc, #88]	; (80018e0 <MX_GPIO_Init+0x128>)
 8001888:	f003 ff0c 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 800188c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001890:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f003 feff 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 80018a6:	f44f 7304 	mov.w	r3, #528	; 0x210
 80018aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <MX_GPIO_Init+0x124>)
 80018ba:	f003 fef3 	bl	80056a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2105      	movs	r1, #5
 80018c2:	2008      	movs	r0, #8
 80018c4:	f003 fc82 	bl	80051cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018c8:	2008      	movs	r0, #8
 80018ca:	f003 fc99 	bl	8005200 <HAL_NVIC_EnableIRQ>

}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000c00 	.word	0x48000c00
 80018e0:	48000400 	.word	0x48000400

080018e4 <LL_EXTI_EnableIT_0_31>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <LL_EXTI_EnableIT_0_31+0x24>)
 80018ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018f2:	4905      	ldr	r1, [pc, #20]	; (8001908 <LL_EXTI_EnableIT_0_31+0x24>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	58000800 	.word	0x58000800

0800190c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4904      	ldr	r1, [pc, #16]	; (800192c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]

}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	58000800 	.word	0x58000800

08001930 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <ReadRtcSsrValue+0x3c>)
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	b29b      	uxth	r3, r3
 800193c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <ReadRtcSsrValue+0x3c>)
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	b29b      	uxth	r3, r3
 8001944:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001946:	e005      	b.n	8001954 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <ReadRtcSsrValue+0x3c>)
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	b29b      	uxth	r3, r3
 8001952:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d1f5      	bne.n	8001948 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800195c:	683b      	ldr	r3, [r7, #0]
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40002800 	.word	0x40002800

08001970 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	460a      	mov	r2, r1
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	4613      	mov	r3, r2
 800197e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001980:	79ba      	ldrb	r2, [r7, #6]
 8001982:	491d      	ldr	r1, [pc, #116]	; (80019f8 <LinkTimerAfter+0x88>)
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3315      	adds	r3, #21
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b06      	cmp	r3, #6
 8001998:	d009      	beq.n	80019ae <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	4916      	ldr	r1, [pc, #88]	; (80019f8 <LinkTimerAfter+0x88>)
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	440b      	add	r3, r1
 80019a8:	3314      	adds	r3, #20
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	4911      	ldr	r1, [pc, #68]	; (80019f8 <LinkTimerAfter+0x88>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3315      	adds	r3, #21
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <LinkTimerAfter+0x88>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	3314      	adds	r3, #20
 80019d2:	79ba      	ldrb	r2, [r7, #6]
 80019d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80019d6:	79ba      	ldrb	r2, [r7, #6]
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <LinkTimerAfter+0x88>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3315      	adds	r3, #21
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	701a      	strb	r2, [r3, #0]

  return;
 80019ea:	bf00      	nop
}
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000016c 	.word	0x2000016c

080019fc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	460a      	mov	r2, r1
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <LinkTimerBefore+0xb8>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	79ba      	ldrb	r2, [r7, #6]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d032      	beq.n	8001a7e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a18:	79ba      	ldrb	r2, [r7, #6]
 8001a1a:	4927      	ldr	r1, [pc, #156]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3314      	adds	r3, #20
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3315      	adds	r3, #21
 8001a3c:	79fa      	ldrb	r2, [r7, #7]
 8001a3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a40:	79fa      	ldrb	r2, [r7, #7]
 8001a42:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3315      	adds	r3, #21
 8001a50:	79ba      	ldrb	r2, [r7, #6]
 8001a52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3314      	adds	r3, #20
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001a68:	79ba      	ldrb	r2, [r7, #6]
 8001a6a:	4913      	ldr	r1, [pc, #76]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3314      	adds	r3, #20
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001a7c:	e014      	b.n	8001aa8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3315      	adds	r3, #21
 8001a8e:	79ba      	ldrb	r2, [r7, #6]
 8001a90:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001a92:	79ba      	ldrb	r2, [r7, #6]
 8001a94:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <LinkTimerBefore+0xbc>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3314      	adds	r3, #20
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	701a      	strb	r2, [r3, #0]
  return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200001fc 	.word	0x200001fc
 8001ab8:	2000016c 	.word	0x2000016c

08001abc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <linkTimer+0x144>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d118      	bne.n	8001b02 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <linkTimer+0x144>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <linkTimer+0x148>)
 8001ad8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001ada:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <linkTimer+0x144>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001ae0:	79fa      	ldrb	r2, [r7, #7]
 8001ae2:	4949      	ldr	r1, [pc, #292]	; (8001c08 <linkTimer+0x14c>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	3315      	adds	r3, #21
 8001af0:	2206      	movs	r2, #6
 8001af2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001af4:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <linkTimer+0x150>)
 8001af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001afa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	81fb      	strh	r3, [r7, #14]
 8001b00:	e078      	b.n	8001bf4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b02:	f000 f909 	bl	8001d18 <ReturnTimeElapsed>
 8001b06:	4603      	mov	r3, r0
 8001b08:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	493e      	ldr	r1, [pc, #248]	; (8001c08 <linkTimer+0x14c>)
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3308      	adds	r3, #8
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	4419      	add	r1, r3
 8001b22:	4839      	ldr	r0, [pc, #228]	; (8001c08 <linkTimer+0x14c>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4403      	add	r3, r0
 8001b2e:	3308      	adds	r3, #8
 8001b30:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	4934      	ldr	r1, [pc, #208]	; (8001c08 <linkTimer+0x14c>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3308      	adds	r3, #8
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <linkTimer+0x144>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <linkTimer+0x14c>)
 8001b50:	460b      	mov	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d337      	bcc.n	8001bd4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <linkTimer+0x144>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001b6a:	7b7a      	ldrb	r2, [r7, #13]
 8001b6c:	4926      	ldr	r1, [pc, #152]	; (8001c08 <linkTimer+0x14c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3315      	adds	r3, #21
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001b7e:	e013      	b.n	8001ba8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001b80:	7b7a      	ldrb	r2, [r7, #13]
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <linkTimer+0x14c>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3315      	adds	r3, #21
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001b94:	7b7a      	ldrb	r2, [r7, #13]
 8001b96:	491c      	ldr	r1, [pc, #112]	; (8001c08 <linkTimer+0x14c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3315      	adds	r3, #21
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ba8:	7b3b      	ldrb	r3, [r7, #12]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d00b      	beq.n	8001bc6 <linkTimer+0x10a>
 8001bae:	7b3a      	ldrb	r2, [r7, #12]
 8001bb0:	4915      	ldr	r1, [pc, #84]	; (8001c08 <linkTimer+0x14c>)
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d2dc      	bcs.n	8001b80 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001bc6:	7b7a      	ldrb	r2, [r7, #13]
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fecf 	bl	8001970 <LinkTimerAfter>
 8001bd2:	e00f      	b.n	8001bf4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <linkTimer+0x144>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff0c 	bl	80019fc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <linkTimer+0x144>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <linkTimer+0x148>)
 8001bec:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <linkTimer+0x144>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200001fc 	.word	0x200001fc
 8001c04:	200001fd 	.word	0x200001fd
 8001c08:	2000016c 	.word	0x2000016c
 8001c0c:	20000200 	.word	0x20000200

08001c10 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	460a      	mov	r2, r1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <UnlinkTimer+0xf8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	79fa      	ldrb	r2, [r7, #7]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d111      	bne.n	8001c50 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <UnlinkTimer+0xf8>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <UnlinkTimer+0xfc>)
 8001c34:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	4935      	ldr	r1, [pc, #212]	; (8001d10 <UnlinkTimer+0x100>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	3315      	adds	r3, #21
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <UnlinkTimer+0xf8>)
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e03e      	b.n	8001cce <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	492f      	ldr	r1, [pc, #188]	; (8001d10 <UnlinkTimer+0x100>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3314      	adds	r3, #20
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	492a      	ldr	r1, [pc, #168]	; (8001d10 <UnlinkTimer+0x100>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	3315      	adds	r3, #21
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001c78:	79f9      	ldrb	r1, [r7, #7]
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	4824      	ldr	r0, [pc, #144]	; (8001d10 <UnlinkTimer+0x100>)
 8001c7e:	460b      	mov	r3, r1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	440b      	add	r3, r1
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4403      	add	r3, r0
 8001c88:	3315      	adds	r3, #21
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2d8      	uxtb	r0, r3
 8001c8e:	4920      	ldr	r1, [pc, #128]	; (8001d10 <UnlinkTimer+0x100>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	440b      	add	r3, r1
 8001c9a:	3315      	adds	r3, #21
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d013      	beq.n	8001cce <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001ca6:	79f9      	ldrb	r1, [r7, #7]
 8001ca8:	7bba      	ldrb	r2, [r7, #14]
 8001caa:	4819      	ldr	r0, [pc, #100]	; (8001d10 <UnlinkTimer+0x100>)
 8001cac:	460b      	mov	r3, r1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	440b      	add	r3, r1
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4403      	add	r3, r0
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2d8      	uxtb	r0, r3
 8001cbc:	4914      	ldr	r1, [pc, #80]	; (8001d10 <UnlinkTimer+0x100>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3314      	adds	r3, #20
 8001cca:	4602      	mov	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	490f      	ldr	r1, [pc, #60]	; (8001d10 <UnlinkTimer+0x100>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	440b      	add	r3, r1
 8001cdc:	330c      	adds	r3, #12
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <UnlinkTimer+0xf8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d107      	bne.n	8001cfc <UnlinkTimer+0xec>
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <UnlinkTimer+0x104>)
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  return;
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
}
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200001fc 	.word	0x200001fc
 8001d0c:	200001fd 	.word	0x200001fd
 8001d10:	2000016c 	.word	0x2000016c
 8001d14:	20000200 	.word	0x20000200

08001d18 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <ReturnTimeElapsed+0x70>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d26:	d026      	beq.n	8001d76 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d28:	f7ff fe02 	bl	8001930 <ReadRtcSsrValue>
 8001d2c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <ReturnTimeElapsed+0x70>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d805      	bhi.n	8001d44 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <ReturnTimeElapsed+0x70>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	e00a      	b.n	8001d5a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <ReturnTimeElapsed+0x74>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <ReturnTimeElapsed+0x70>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <ReturnTimeElapsed+0x78>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <ReturnTimeElapsed+0x7c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	40d3      	lsrs	r3, r2
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	e001      	b.n	8001d7a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	b29b      	uxth	r3, r3
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000200 	.word	0x20000200
 8001d8c:	2000051e 	.word	0x2000051e
 8001d90:	2000051d 	.word	0x2000051d
 8001d94:	2000051c 	.word	0x2000051c

08001d98 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d108      	bne.n	8001dba <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001da8:	f7ff fdc2 	bl	8001930 <ReadRtcSsrValue>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <RestartWakeupCounter+0xa8>)
 8001db0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001db2:	2003      	movs	r0, #3
 8001db4:	f003 fa40 	bl	8005238 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001db8:	e03e      	b.n	8001e38 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d803      	bhi.n	8001dc8 <RestartWakeupCounter+0x30>
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <RestartWakeupCounter+0xac>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d002      	beq.n	8001dce <RestartWakeupCounter+0x36>
      Value -= 1;
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001dce:	bf00      	nop
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <RestartWakeupCounter+0xb0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f7      	beq.n	8001dd0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <RestartWakeupCounter+0xb0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <RestartWakeupCounter+0xb0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001df4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <RestartWakeupCounter+0xb4>)
 8001df8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001dfc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001dfe:	2003      	movs	r0, #3
 8001e00:	f003 fa28 	bl	8005254 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <RestartWakeupCounter+0xb8>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	4910      	ldr	r1, [pc, #64]	; (8001e50 <RestartWakeupCounter+0xb8>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e14:	f7ff fd8c 	bl	8001930 <ReadRtcSsrValue>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <RestartWakeupCounter+0xa8>)
 8001e1c:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <RestartWakeupCounter+0xb0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <RestartWakeupCounter+0xb0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e30:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e32:	f3af 8000 	nop.w
  return ;
 8001e36:	bf00      	nop
}
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000200 	.word	0x20000200
 8001e44:	2000051c 	.word	0x2000051c
 8001e48:	20000518 	.word	0x20000518
 8001e4c:	58000800 	.word	0x58000800
 8001e50:	40002800 	.word	0x40002800

08001e54 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <RescheduleTimerList+0x124>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d108      	bne.n	8001e7a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001e68:	bf00      	nop
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <RescheduleTimerList+0x128>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f7      	bne.n	8001e6a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001e7a:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <RescheduleTimerList+0x128>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <RescheduleTimerList+0x128>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <RescheduleTimerList+0x12c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	493b      	ldr	r1, [pc, #236]	; (8001f84 <RescheduleTimerList+0x130>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001ea8:	f7ff ff36 	bl	8001d18 <ReturnTimeElapsed>
 8001eac:	4603      	mov	r3, r0
 8001eae:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d205      	bcs.n	8001ec4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ebc:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <RescheduleTimerList+0x134>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	e04d      	b.n	8001f60 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <RescheduleTimerList+0x138>)
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	4413      	add	r3, r2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d906      	bls.n	8001ee4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <RescheduleTimerList+0x138>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <RescheduleTimerList+0x134>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e03d      	b.n	8001f60 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <RescheduleTimerList+0x134>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ef4:	e034      	b.n	8001f60 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	4922      	ldr	r1, [pc, #136]	; (8001f84 <RescheduleTimerList+0x130>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3308      	adds	r3, #8
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20a      	bcs.n	8001f24 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	491c      	ldr	r1, [pc, #112]	; (8001f84 <RescheduleTimerList+0x130>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3308      	adds	r3, #8
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e013      	b.n	8001f4c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	4917      	ldr	r1, [pc, #92]	; (8001f84 <RescheduleTimerList+0x130>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	3308      	adds	r3, #8
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	1ac9      	subs	r1, r1, r3
 8001f3c:	4811      	ldr	r0, [pc, #68]	; (8001f84 <RescheduleTimerList+0x130>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4403      	add	r3, r0
 8001f48:	3308      	adds	r3, #8
 8001f4a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	490d      	ldr	r1, [pc, #52]	; (8001f84 <RescheduleTimerList+0x130>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3315      	adds	r3, #21
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d1c7      	bne.n	8001ef6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001f66:	89bb      	ldrh	r3, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff15 	bl	8001d98 <RestartWakeupCounter>

  return ;
 8001f6e:	bf00      	nop
}
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40002800 	.word	0x40002800
 8001f7c:	20000518 	.word	0x20000518
 8001f80:	200001fc 	.word	0x200001fc
 8001f84:	2000016c 	.word	0x2000016c
 8001f88:	20000204 	.word	0x20000204
 8001f8c:	20000520 	.word	0x20000520

08001f90 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001f9c:	4a64      	ldr	r2, [pc, #400]	; (8002130 <HW_TS_Init+0x1a0>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HW_TS_Init+0x1a0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	22ca      	movs	r2, #202	; 0xca
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
 8001fac:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HW_TS_Init+0x1a0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2253      	movs	r2, #83	; 0x53
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HW_TS_Init+0x1a4>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a5e      	ldr	r2, [pc, #376]	; (8002134 <HW_TS_Init+0x1a4>)
 8001fbc:	f043 0320 	orr.w	r3, r3, #32
 8001fc0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	; (8002134 <HW_TS_Init+0x1a4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f1c3 0304 	rsb	r3, r3, #4
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HW_TS_Init+0x1a8>)
 8001fd6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001fd8:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HW_TS_Init+0x1a4>)
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fe0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001fe4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	fa92 f2a2 	rbit	r2, r2
 8001fec:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d101      	bne.n	8001ffc <HW_TS_Init+0x6c>
  {
    return 32U;
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	e003      	b.n	8002004 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	40d3      	lsrs	r3, r2
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HW_TS_Init+0x1ac>)
 800200e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002010:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HW_TS_Init+0x1a4>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	b29b      	uxth	r3, r3
 8002016:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800201a:	b29b      	uxth	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HW_TS_Init+0x1b0>)
 8002022:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HW_TS_Init+0x1b0>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	4a44      	ldr	r2, [pc, #272]	; (800213c <HW_TS_Init+0x1ac>)
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002036:	4a40      	ldr	r2, [pc, #256]	; (8002138 <HW_TS_Init+0x1a8>)
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	40d3      	lsrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002044:	4293      	cmp	r3, r2
 8002046:	d904      	bls.n	8002052 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HW_TS_Init+0x1b4>)
 800204a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e003      	b.n	800205a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HW_TS_Init+0x1b4>)
 8002058:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800205a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800205e:	f7ff fc55 	bl	800190c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002062:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002066:	f7ff fc3d 	bl	80018e4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d143      	bne.n	80020f8 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002070:	4b35      	ldr	r3, [pc, #212]	; (8002148 <HW_TS_Init+0x1b8>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <HW_TS_Init+0x1bc>)
 8002078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800207c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800207e:	2300      	movs	r3, #0
 8002080:	77fb      	strb	r3, [r7, #31]
 8002082:	e00c      	b.n	800209e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002084:	7ffa      	ldrb	r2, [r7, #31]
 8002086:	4932      	ldr	r1, [pc, #200]	; (8002150 <HW_TS_Init+0x1c0>)
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	330c      	adds	r3, #12
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	3301      	adds	r3, #1
 800209c:	77fb      	strb	r3, [r7, #31]
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d9ef      	bls.n	8002084 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HW_TS_Init+0x1c4>)
 80020a6:	2206      	movs	r2, #6
 80020a8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HW_TS_Init+0x1a0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HW_TS_Init+0x1a0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HW_TS_Init+0x1a0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HW_TS_Init+0x1a0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020d2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HW_TS_Init+0x1c8>)
 80020d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020da:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80020dc:	2003      	movs	r0, #3
 80020de:	f003 f8b9 	bl	8005254 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HW_TS_Init+0x1a0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HW_TS_Init+0x1a0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	e00a      	b.n	800210e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HW_TS_Init+0x1a0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002108:	2003      	movs	r0, #3
 800210a:	f003 f895 	bl	8005238 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HW_TS_Init+0x1a0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002118:	2200      	movs	r2, #0
 800211a:	2106      	movs	r1, #6
 800211c:	2003      	movs	r0, #3
 800211e:	f003 f855 	bl	80051cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002122:	2003      	movs	r0, #3
 8002124:	f003 f86c 	bl	8005200 <HAL_NVIC_EnableIRQ>

  return;
 8002128:	bf00      	nop
}
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000518 	.word	0x20000518
 8002134:	40002800 	.word	0x40002800
 8002138:	2000051c 	.word	0x2000051c
 800213c:	2000051d 	.word	0x2000051d
 8002140:	2000051e 	.word	0x2000051e
 8002144:	20000520 	.word	0x20000520
 8002148:	20000204 	.word	0x20000204
 800214c:	20000200 	.word	0x20000200
 8002150:	2000016c 	.word	0x2000016c
 8002154:	200001fc 	.word	0x200001fc
 8002158:	58000800 	.word	0x58000800

0800215c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800215c:	b480      	push	{r7}
 800215e:	b08b      	sub	sp, #44	; 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002172:	f3ef 8310 	mrs	r3, PRIMASK
 8002176:	61fb      	str	r3, [r7, #28]
  return(result);
 8002178:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800217a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002180:	e004      	b.n	800218c <HW_TS_Create+0x30>
  {
    loop++;
 8002182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002186:	3301      	adds	r3, #1
 8002188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800218c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002190:	2b05      	cmp	r3, #5
 8002192:	d80c      	bhi.n	80021ae <HW_TS_Create+0x52>
 8002194:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002198:	492c      	ldr	r1, [pc, #176]	; (800224c <HW_TS_Create+0xf0>)
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	330c      	adds	r3, #12
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e9      	bne.n	8002182 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d038      	beq.n	8002228 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80021b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021ba:	4924      	ldr	r1, [pc, #144]	; (800224c <HW_TS_Create+0xf0>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	330c      	adds	r3, #12
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f383 8810 	msr	PRIMASK, r3
}
 80021d6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80021d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021dc:	491b      	ldr	r1, [pc, #108]	; (800224c <HW_TS_Create+0xf0>)
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	3310      	adds	r3, #16
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80021ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021f2:	4916      	ldr	r1, [pc, #88]	; (800224c <HW_TS_Create+0xf0>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	330d      	adds	r3, #13
 8002200:	79fa      	ldrb	r2, [r7, #7]
 8002202:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002204:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002208:	4910      	ldr	r1, [pc, #64]	; (800224c <HW_TS_Create+0xf0>)
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800221e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002226:	e008      	b.n	800223a <HW_TS_Create+0xde>
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f383 8810 	msr	PRIMASK, r3
}
 8002232:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002234:	2301      	movs	r3, #1
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800223a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800223e:	4618      	mov	r0, r3
 8002240:	372c      	adds	r7, #44	; 0x2c
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000016c 	.word	0x2000016c

08002250 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800225a:	f3ef 8310 	mrs	r3, PRIMASK
 800225e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002260:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002264:	b672      	cpsid	i
}
 8002266:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002268:	2003      	movs	r0, #3
 800226a:	f002 ffd7 	bl	800521c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HW_TS_Stop+0x100>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	22ca      	movs	r2, #202	; 0xca
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HW_TS_Stop+0x100>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2253      	movs	r2, #83	; 0x53
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002282:	79fa      	ldrb	r2, [r7, #7]
 8002284:	4933      	ldr	r1, [pc, #204]	; (8002354 <HW_TS_Stop+0x104>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	330c      	adds	r3, #12
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d148      	bne.n	800232c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fcb6 	bl	8001c10 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <HW_TS_Stop+0x108>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d135      	bne.n	800231c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HW_TS_Stop+0x10c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022bc:	d108      	bne.n	80022d0 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80022be:	bf00      	nop
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HW_TS_Stop+0x100>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f7      	bne.n	80022c0 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HW_TS_Stop+0x100>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HW_TS_Stop+0x100>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e2:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80022e4:	bf00      	nop
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HW_TS_Stop+0x100>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f7      	beq.n	80022e6 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HW_TS_Stop+0x100>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HW_TS_Stop+0x100>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800230a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HW_TS_Stop+0x110>)
 800230e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002312:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002314:	2003      	movs	r0, #3
 8002316:	f002 ff9d 	bl	8005254 <HAL_NVIC_ClearPendingIRQ>
 800231a:	e007      	b.n	800232c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HW_TS_Stop+0x114>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	7cfa      	ldrb	r2, [r7, #19]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8002328:	f7ff fd94 	bl	8001e54 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HW_TS_Stop+0x100>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	22ff      	movs	r2, #255	; 0xff
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002336:	2003      	movs	r0, #3
 8002338:	f002 ff62 	bl	8005200 <HAL_NVIC_EnableIRQ>
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f383 8810 	msr	PRIMASK, r3
}
 8002346:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002348:	bf00      	nop
}
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000518 	.word	0x20000518
 8002354:	2000016c 	.word	0x2000016c
 8002358:	200001fc 	.word	0x200001fc
 800235c:	40002800 	.word	0x40002800
 8002360:	58000800 	.word	0x58000800
 8002364:	200001fd 	.word	0x200001fd

08002368 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002374:	79fa      	ldrb	r2, [r7, #7]
 8002376:	493c      	ldr	r1, [pc, #240]	; (8002468 <HW_TS_Start+0x100>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	330c      	adds	r3, #12
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d103      	bne.n	8002394 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff5e 	bl	8002250 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002394:	f3ef 8310 	mrs	r3, PRIMASK
 8002398:	60fb      	str	r3, [r7, #12]
  return(result);
 800239a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800239c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800239e:	b672      	cpsid	i
}
 80023a0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023a2:	2003      	movs	r0, #3
 80023a4:	f002 ff3a 	bl	800521c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HW_TS_Start+0x104>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	22ca      	movs	r2, #202	; 0xca
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HW_TS_Start+0x104>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2253      	movs	r2, #83	; 0x53
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	492a      	ldr	r1, [pc, #168]	; (8002468 <HW_TS_Start+0x100>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	330c      	adds	r3, #12
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	4925      	ldr	r1, [pc, #148]	; (8002468 <HW_TS_Start+0x100>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3308      	adds	r3, #8
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	4920      	ldr	r1, [pc, #128]	; (8002468 <HW_TS_Start+0x100>)
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3304      	adds	r3, #4
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fb5e 	bl	8001abc <linkTimer>
 8002400:	4603      	mov	r3, r0
 8002402:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HW_TS_Start+0x108>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HW_TS_Start+0x10c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	7c7a      	ldrb	r2, [r7, #17]
 8002412:	429a      	cmp	r2, r3
 8002414:	d002      	beq.n	800241c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8002416:	f7ff fd1d 	bl	8001e54 <RescheduleTimerList>
 800241a:	e013      	b.n	8002444 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800241c:	79fa      	ldrb	r2, [r7, #7]
 800241e:	4912      	ldr	r1, [pc, #72]	; (8002468 <HW_TS_Start+0x100>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3308      	adds	r3, #8
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	8a7b      	ldrh	r3, [r7, #18]
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	1ac9      	subs	r1, r1, r3
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <HW_TS_Start+0x100>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4403      	add	r3, r0
 8002440:	3308      	adds	r3, #8
 8002442:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HW_TS_Start+0x104>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800244e:	2003      	movs	r0, #3
 8002450:	f002 fed6 	bl	8005200 <HAL_NVIC_EnableIRQ>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002460:	bf00      	nop
}
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000016c 	.word	0x2000016c
 800246c:	20000518 	.word	0x20000518
 8002470:	200001fc 	.word	0x200001fc
 8002474:	200001fd 	.word	0x200001fd

08002478 <LL_AHB2_GRP1_EnableClock>:
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4313      	orrs	r3, r2
 800248e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4013      	ands	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4313      	orrs	r3, r2
 80024c0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <MX_I2C1_Init+0x74>)
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <MX_I2C1_Init+0x78>)
 80024e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_I2C1_Init+0x74>)
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <MX_I2C1_Init+0x7c>)
 80024ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <MX_I2C1_Init+0x74>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_I2C1_Init+0x74>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <MX_I2C1_Init+0x74>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_I2C1_Init+0x74>)
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_I2C1_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_I2C1_Init+0x74>)
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_I2C1_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002516:	480e      	ldr	r0, [pc, #56]	; (8002550 <MX_I2C1_Init+0x74>)
 8002518:	f003 fa88 	bl	8005a2c <HAL_I2C_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002522:	f000 fbc9 	bl	8002cb8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002526:	2100      	movs	r1, #0
 8002528:	4809      	ldr	r0, [pc, #36]	; (8002550 <MX_I2C1_Init+0x74>)
 800252a:	f003 ffc1 	bl	80064b0 <HAL_I2CEx_ConfigAnalogFilter>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002534:	f000 fbc0 	bl	8002cb8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002538:	2100      	movs	r1, #0
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_I2C1_Init+0x74>)
 800253c:	f004 f803 	bl	8006546 <HAL_I2CEx_ConfigDigitalFilter>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002546:	f000 fbb7 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20009dd0 	.word	0x20009dd0
 8002554:	40005400 	.word	0x40005400
 8002558:	00303d5b 	.word	0x00303d5b

0800255c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <MX_I2C3_Init+0x78>)
 8002564:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <MX_I2C3_Init+0x7c>)
 800256a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_I2C3_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002574:	2201      	movs	r2, #1
 8002576:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_I2C3_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_I2C3_Init+0x74>)
 800258c:	2200      	movs	r2, #0
 800258e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002592:	2200      	movs	r2, #0
 8002594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <MX_I2C3_Init+0x74>)
 8002598:	f003 fa48 	bl	8005a2c <HAL_I2C_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80025a2:	f000 fb89 	bl	8002cb8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025a6:	2100      	movs	r1, #0
 80025a8:	4809      	ldr	r0, [pc, #36]	; (80025d0 <MX_I2C3_Init+0x74>)
 80025aa:	f003 ff81 	bl	80064b0 <HAL_I2CEx_ConfigAnalogFilter>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80025b4:	f000 fb80 	bl	8002cb8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80025b8:	2100      	movs	r1, #0
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_I2C3_Init+0x74>)
 80025bc:	f003 ffc3 	bl	8006546 <HAL_I2CEx_ConfigDigitalFilter>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80025c6:	f000 fb77 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20009d84 	.word	0x20009d84
 80025d4:	40005c00 	.word	0x40005c00
 80025d8:	00303d5b 	.word	0x00303d5b

080025dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b09c      	sub	sp, #112	; 0x70
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	2250      	movs	r2, #80	; 0x50
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f017 fe9f 	bl	801a340 <memset>
  if(i2cHandle->Instance==I2C1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3f      	ldr	r2, [pc, #252]	; (8002704 <HAL_I2C_MspInit+0x128>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d12f      	bne.n	800266c <HAL_I2C_MspInit+0x90>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800260c:	2304      	movs	r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002610:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4618      	mov	r0, r3
 800261c:	f007 fbb0 	bl	8009d80 <HAL_RCCEx_PeriphCLKConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002626:	f000 fb47 	bl	8002cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	2002      	movs	r0, #2
 800262c:	f7ff ff24 	bl	8002478 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8002630:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002634:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002636:	2312      	movs	r3, #18
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800263a:	2301      	movs	r3, #1
 800263c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263e:	2302      	movs	r3, #2
 8002640:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002642:	2304      	movs	r3, #4
 8002644:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800264a:	4619      	mov	r1, r3
 800264c:	482e      	ldr	r0, [pc, #184]	; (8002708 <HAL_I2C_MspInit+0x12c>)
 800264e:	f003 f829 	bl	80056a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002652:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002656:	f7ff ff28 	bl	80024aa <LL_APB1_GRP1_EnableClock>

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2105      	movs	r1, #5
 800265e:	201e      	movs	r0, #30
 8002660:	f002 fdb4 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002664:	201e      	movs	r0, #30
 8002666:	f002 fdcb 	bl	8005200 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800266a:	e046      	b.n	80026fa <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_I2C_MspInit+0x130>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d141      	bne.n	80026fa <HAL_I2C_MspInit+0x11e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002676:	2308      	movs	r3, #8
 8002678:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800267a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	4618      	mov	r0, r3
 8002686:	f007 fb7b 	bl	8009d80 <HAL_RCCEx_PeriphCLKConfig>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_MspInit+0xb8>
      Error_Handler();
 8002690:	f000 fb12 	bl	8002cb8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002694:	2004      	movs	r0, #4
 8002696:	f7ff feef 	bl	8002478 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff feec 	bl	8002478 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026a0:	2302      	movs	r3, #2
 80026a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a4:	2312      	movs	r3, #18
 80026a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a8:	2301      	movs	r3, #1
 80026aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ac:	2302      	movs	r3, #2
 80026ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026b0:	2304      	movs	r3, #4
 80026b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026b8:	4619      	mov	r1, r3
 80026ba:	4815      	ldr	r0, [pc, #84]	; (8002710 <HAL_I2C_MspInit+0x134>)
 80026bc:	f002 fff2 	bl	80056a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c4:	2312      	movs	r3, #18
 80026c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026cc:	2302      	movs	r3, #2
 80026ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026d0:	2304      	movs	r3, #4
 80026d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026d8:	4619      	mov	r1, r3
 80026da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026de:	f002 ffe1 	bl	80056a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80026e6:	f7ff fee0 	bl	80024aa <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	2020      	movs	r0, #32
 80026f0:	f002 fd6c 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80026f4:	2020      	movs	r0, #32
 80026f6:	f002 fd83 	bl	8005200 <HAL_NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3770      	adds	r7, #112	; 0x70
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40005400 	.word	0x40005400
 8002708:	48000400 	.word	0x48000400
 800270c:	40005c00 	.word	0x40005c00
 8002710:	48000800 	.word	0x48000800

08002714 <_Z41__static_initialization_and_destruction_0ii>:
	}else if ((flag & IMU_DATA_RDY_BIT) == IMU_DATA_RDY_BIT){
		*state = 1;
	}

	return;
}
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4604      	mov	r4, r0
 8002718:	460d      	mov	r5, r1
 800271a:	2801      	cmp	r0, #1
 800271c:	d005      	beq.n	800272a <_Z41__static_initialization_and_destruction_0ii+0x16>
Adafruit_ICM20948 imu;
 800271e:	b91c      	cbnz	r4, 8002728 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002724:	429d      	cmp	r5, r3
 8002726:	d008      	beq.n	800273a <_Z41__static_initialization_and_destruction_0ii+0x26>
}
 8002728:	bd38      	pop	{r3, r4, r5, pc}
 800272a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272e:	4299      	cmp	r1, r3
 8002730:	d1f5      	bne.n	800271e <_Z41__static_initialization_and_destruction_0ii+0xa>
Adafruit_ICM20948 imu;
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002734:	f011 fafc 	bl	8013d30 <_ZN17Adafruit_ICM20948C1Ev>
 8002738:	e7f1      	b.n	800271e <_Z41__static_initialization_and_destruction_0ii+0xa>
 *            the ST ICM2948 9-DoF Accelerometer, gyro, and magnetometer
 */
class Adafruit_ICM20948: public Adafruit_ICM20X {
public:
	Adafruit_ICM20948();
	~Adafruit_ICM20948() {
 800273a:	4803      	ldr	r0, [pc, #12]	; (8002748 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800273e:	6003      	str	r3, [r0, #0]
 8002740:	f011 fb2e 	bl	8013da0 <_ZN15Adafruit_ICM20XD1Ev>
}
 8002744:	e7f0      	b.n	8002728 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002746:	bf00      	nop
 8002748:	20000524 	.word	0x20000524
 800274c:	0801aac0 	.word	0x0801aac0

08002750 <HAL_GPIO_EXTI_Callback>:
}
 8002750:	4770      	bx	lr

08002752 <_GLOBAL__sub_I_periodicIMUTimer_id>:
}
 8002752:	b508      	push	{r3, lr}
 8002754:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002758:	2001      	movs	r0, #1
 800275a:	f7ff ffdb 	bl	8002714 <_Z41__static_initialization_and_destruction_0ii>
 800275e:	bd08      	pop	{r3, pc}

08002760 <_GLOBAL__sub_D_periodicIMUTimer_id>:
 8002760:	b508      	push	{r3, lr}
 8002762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff ffd4 	bl	8002714 <_Z41__static_initialization_and_destruction_0ii>
 800276c:	bd08      	pop	{r3, pc}

0800276e <LL_AHB3_GRP1_EnableClock>:
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800277c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4313      	orrs	r3, r2
 8002784:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_IPCC_Init+0x20>)
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <MX_IPCC_Init+0x24>)
 80027a8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_IPCC_Init+0x20>)
 80027ac:	f003 ff18 	bl	80065e0 <HAL_IPCC_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80027b6:	f000 fa7f 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20009e1c 	.word	0x20009e1c
 80027c4:	58000c00 	.word	0x58000c00

080027c8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <HAL_IPCC_MspInit+0x44>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d113      	bne.n	8002802 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80027da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027de:	f7ff ffc6 	bl	800276e <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 5, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2105      	movs	r1, #5
 80027e6:	202c      	movs	r0, #44	; 0x2c
 80027e8:	f002 fcf0 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80027ec:	202c      	movs	r0, #44	; 0x2c
 80027ee:	f002 fd07 	bl	8005200 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 5, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2105      	movs	r1, #5
 80027f6:	202d      	movs	r0, #45	; 0x2d
 80027f8:	f002 fce8 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80027fc:	202d      	movs	r0, #45	; 0x2d
 80027fe:	f002 fcff 	bl	8005200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	58000c00 	.word	0x58000c00

08002810 <setup_LP5523>:
		LOG_EN, LOG_EN, LOG_EN, LOG_EN };
uint8_t deviceAddress;
uint8_t led_PWM[9] = { 0 };
uint8_t packet;

void setup_LP5523(uint8_t ADDR) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af04      	add	r7, sp, #16
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]

#ifndef DONGLE_CODE
	deviceAddress = ADDR << 1;
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <setup_LP5523+0xcc>)
 8002822:	701a      	strb	r2, [r3, #0]

	// enable chip
	osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <setup_LP5523+0xd0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800282c:	4618      	mov	r0, r3
 800282e:	f012 f957 	bl	8014ae0 <osSemaphoreAcquire>
	packet = LP5525_CHIP_EN;
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <setup_LP5523+0xd4>)
 8002834:	2240      	movs	r2, #64	; 0x40
 8002836:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_EN_CNTRL1_REG,
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <setup_LP5523+0xcc>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b299      	uxth	r1, r3
 800283e:	230a      	movs	r3, #10
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <setup_LP5523+0xd4>)
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	2200      	movs	r2, #0
 800284e:	4826      	ldr	r0, [pc, #152]	; (80028e8 <setup_LP5523+0xd8>)
 8002850:	f003 f97c 	bl	8005b4c <HAL_I2C_Mem_Write>
			1, &packet, 1, I2C_TIMEOUT);

	// put charge-pump in auto-mode, serial auto increment, internal clock
	packet = CP_MODE_AUTO | EN_AUTO_INC | INT_CLK_EN;
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <setup_LP5523+0xd4>)
 8002856:	224f      	movs	r2, #79	; 0x4f
 8002858:	701a      	strb	r2, [r3, #0]
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1, &packet, 1, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_MISC_REG, 1,
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <setup_LP5523+0xcc>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b299      	uxth	r1, r3
 8002860:	230a      	movs	r3, #10
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	2301      	movs	r3, #1
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <setup_LP5523+0xd4>)
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	2236      	movs	r2, #54	; 0x36
 8002870:	481d      	ldr	r0, [pc, #116]	; (80028e8 <setup_LP5523+0xd8>)
 8002872:	f003 f96b 	bl	8005b4c <HAL_I2C_Mem_Write>
			&packet, 1, I2C_TIMEOUT);

	// set PWM level (0 to 255)
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1, led_PWM, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_PWM_REG, 1,
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <setup_LP5523+0xcc>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b299      	uxth	r1, r3
 800287c:	230a      	movs	r3, #10
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2309      	movs	r3, #9
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <setup_LP5523+0xdc>)
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	2216      	movs	r2, #22
 800288c:	4816      	ldr	r0, [pc, #88]	; (80028e8 <setup_LP5523+0xd8>)
 800288e:	f003 f95d 	bl	8005b4c <HAL_I2C_Mem_Write>
			led_PWM, 9, I2C_TIMEOUT);

	// set current control (0 to 25.5 mA) - step size is 100uA
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress,
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <setup_LP5523+0xcc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b299      	uxth	r1, r3
 8002898:	230a      	movs	r3, #10
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	2309      	movs	r3, #9
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <setup_LP5523+0xe0>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2301      	movs	r3, #1
 80028a6:	2226      	movs	r2, #38	; 0x26
 80028a8:	480f      	ldr	r0, [pc, #60]	; (80028e8 <setup_LP5523+0xd8>)
 80028aa:	f003 f94f 	bl	8005b4c <HAL_I2C_Mem_Write>
			LIS3DH_D1_CURRENT_CTRL_REG, 1, led_current, 9, I2C_TIMEOUT);

	// enable logarithmic dimming
//	packet = LOG_EN;
//	while(HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1, packet_array, 9, I2C_TIMEOUT) != HAL_OK);
	HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, deviceAddress, LIS3DH_D1_CNTRL_REG, 1,
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <setup_LP5523+0xcc>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b299      	uxth	r1, r3
 80028b4:	230a      	movs	r3, #10
 80028b6:	9302      	str	r3, [sp, #8]
 80028b8:	2309      	movs	r3, #9
 80028ba:	9301      	str	r3, [sp, #4]
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <setup_LP5523+0xe4>)
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	2206      	movs	r2, #6
 80028c4:	4808      	ldr	r0, [pc, #32]	; (80028e8 <setup_LP5523+0xd8>)
 80028c6:	f003 f941 	bl	8005b4c <HAL_I2C_Mem_Write>
			packet_array, 9, I2C_TIMEOUT);

	osSemaphoreRelease(messageI2C1_LockHandle);
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <setup_LP5523+0xd0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f012 f958 	bl	8014b84 <osSemaphoreRelease>
#else
	BSP_LED_Init(LED_BLUE);
	BSP_LED_Init(LED_GREEN);
	BSP_LED_Init(LED_RED);
#endif
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20009e6e 	.word	0x20009e6e
 80028e0:	20000314 	.word	0x20000314
 80028e4:	20009e58 	.word	0x20009e58
 80028e8:	20009dd0 	.word	0x20009dd0
 80028ec:	200025b4 	.word	0x200025b4
 80028f0:	20000004 	.word	0x20000004
 80028f4:	0801a9a0 	.word	0x0801a9a0

080028f8 <ThreadFrontLightsComplexTask>:
	    	}
#endif
}

union ColorComplex receivedColors;
void ThreadFrontLightsComplexTask(void *argument){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	6078      	str	r0, [r7, #4]

	osDelay(500);
 8002900:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002904:	f011 ff39 	bl	801477a <osDelay>

	setup_LP5523(LIS3DH_LEFT_ADDRESS);
 8002908:	2034      	movs	r0, #52	; 0x34
 800290a:	f7ff ff81 	bl	8002810 <setup_LP5523>
	setup_LP5523(LIS3DH_RIGHT_ADDRESS);
 800290e:	2035      	movs	r0, #53	; 0x35
 8002910:	f7ff ff7e 	bl	8002810 <setup_LP5523>

	HAL_StatusTypeDef state = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

	uint16_t timeTracker;


	while (1) {
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <ThreadFrontLightsComplexTask+0xa0>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002920:	2200      	movs	r2, #0
 8002922:	491e      	ldr	r1, [pc, #120]	; (800299c <ThreadFrontLightsComplexTask+0xa4>)
 8002924:	f012 fa46 	bl	8014db4 <osMessageQueueGet>
						0U, osWaitForever);
		memcpy(led_left_PWM, &receivedColors, 9);
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <ThreadFrontLightsComplexTask+0xa8>)
 800292a:	4a1c      	ldr	r2, [pc, #112]	; (800299c <ThreadFrontLightsComplexTask+0xa4>)
 800292c:	6810      	ldr	r0, [r2, #0]
 800292e:	6851      	ldr	r1, [r2, #4]
 8002930:	c303      	stmia	r3!, {r0, r1}
 8002932:	7a12      	ldrb	r2, [r2, #8]
 8002934:	701a      	strb	r2, [r3, #0]
		memcpy(led_right_PWM, &(receivedColors.color[9]), 9);
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <ThreadFrontLightsComplexTask+0xac>)
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <ThreadFrontLightsComplexTask+0xa4>)
 800293a:	3209      	adds	r2, #9
 800293c:	6810      	ldr	r0, [r2, #0]
 800293e:	6851      	ldr	r1, [r2, #4]
 8002940:	c303      	stmia	r3!, {r0, r1}
 8002942:	7a12      	ldrb	r2, [r2, #8]
 8002944:	701a      	strb	r2, [r3, #0]
	#ifndef DONGLE_CODE
		osSemaphoreAcquire(messageI2C1_LockHandle, osWaitForever);
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <ThreadFrontLightsComplexTask+0xb0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800294e:	4618      	mov	r0, r3
 8002950:	f012 f8c6 	bl	8014ae0 <osSemaphoreAcquire>

//		timeTracker = HAL_GetTick();
//		HAL_I2C_Mem_Write_DMA(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
//				LIS3DH_D1_PWM_REG, 1, led_left_PWM, 9);
		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 8002954:	2305      	movs	r3, #5
 8002956:	9302      	str	r3, [sp, #8]
 8002958:	2309      	movs	r3, #9
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <ThreadFrontLightsComplexTask+0xa8>)
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2301      	movs	r3, #1
 8002962:	2216      	movs	r2, #22
 8002964:	2168      	movs	r1, #104	; 0x68
 8002966:	4811      	ldr	r0, [pc, #68]	; (80029ac <ThreadFrontLightsComplexTask+0xb4>)
 8002968:	f003 f8f0 	bl	8005b4c <HAL_I2C_Mem_Write>
 800296c:	4603      	mov	r3, r0
 800296e:	73fb      	strb	r3, [r7, #15]
////			if(counter > 1000){
////				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
////			}
//		}

		state = HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 8002970:	2305      	movs	r3, #5
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	2309      	movs	r3, #9
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <ThreadFrontLightsComplexTask+0xac>)
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	2301      	movs	r3, #1
 800297e:	2216      	movs	r2, #22
 8002980:	216a      	movs	r1, #106	; 0x6a
 8002982:	480a      	ldr	r0, [pc, #40]	; (80029ac <ThreadFrontLightsComplexTask+0xb4>)
 8002984:	f003 f8e2 	bl	8005b4c <HAL_I2C_Mem_Write>
 8002988:	4603      	mov	r3, r0
 800298a:	73fb      	strb	r3, [r7, #15]
//			if(counter > 1000){
//				HAL_I2C_Master_Abort_IT(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1);
//			}
//		}

		osSemaphoreRelease(messageI2C1_LockHandle);
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <ThreadFrontLightsComplexTask+0xb0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f012 f8f7 	bl	8014b84 <osSemaphoreRelease>
		osMessageQueueGet(lightsComplexQueueHandle, &receivedColors,
 8002996:	e7bf      	b.n	8002918 <ThreadFrontLightsComplexTask+0x20>
 8002998:	20000310 	.word	0x20000310
 800299c:	20009e5c 	.word	0x20009e5c
 80029a0:	2000259c 	.word	0x2000259c
 80029a4:	200025a8 	.word	0x200025a8
 80029a8:	20000314 	.word	0x20000314
 80029ac:	20009dd0 	.word	0x20009dd0

080029b0 <BlueGreenTransitionTask>:
//	osDelay(LED_START_SEQ_INTERVAL);
	}
}

union ColorComplex blueGreenTranColor;
void BlueGreenTransitionTask(void *argument){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	union BlueGreenTransition blueGreenTran;
	uint32_t timeTracker = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

	memcpy(&blueGreenTran,argument,sizeof(union BlueGreenTransition));
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	6810      	ldr	r0, [r2, #0]
 80029c4:	6018      	str	r0, [r3, #0]
 80029c6:	8892      	ldrh	r2, [r2, #4]
 80029c8:	809a      	strh	r2, [r3, #4]

	/* start sequence */

	//	timeTracker = HAL_GetTick();

	resetColor(&blueGreenTranColor);
 80029ca:	483f      	ldr	r0, [pc, #252]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 80029cc:	f000 f918 	bl	8002c00 <resetColor>


	// error condition: if step size exceeds intensity range
	if( (blueGreenTran.val.step_size >= blueGreenTran.val.blue_max_intensity) ||
 80029d0:	7c3a      	ldrb	r2, [r7, #16]
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d203      	bcs.n	80029e0 <BlueGreenTransitionTask+0x30>
			(blueGreenTran.val.step_size >= blueGreenTran.val.green_max_intensity)){
 80029d8:	7c3a      	ldrb	r2, [r7, #16]
 80029da:	7bfb      	ldrb	r3, [r7, #15]
	if( (blueGreenTran.val.step_size >= blueGreenTran.val.blue_max_intensity) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <BlueGreenTransitionTask+0x36>
		vTaskDelete( NULL );
 80029e0:	2000      	movs	r0, #0
 80029e2:	f013 fdad 	bl	8016540 <vTaskDelete>
	}

	/* increase blue intensity */
	if(blueGreenTran.val.blue_max_intensity > blueGreenTran.val.blue_min_intensity){
 80029e6:	7bba      	ldrb	r2, [r7, #14]
 80029e8:	7b7b      	ldrb	r3, [r7, #13]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d925      	bls.n	8002a3a <BlueGreenTransitionTask+0x8a>
		for(int i = blueGreenTran.val.blue_min_intensity;;
 80029ee:	7b7b      	ldrb	r3, [r7, #13]
 80029f0:	61fb      	str	r3, [r7, #28]
				i += blueGreenTran.val.step_size){

			blueGreenTranColor.colors_indiv.right_side_b = (i > blueGreenTran.val.blue_max_intensity) ? blueGreenTran.val.blue_max_intensity : i;
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	461a      	mov	r2, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bfa8      	it	ge
 80029fc:	4613      	movge	r3, r2
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a02:	735a      	strb	r2, [r3, #13]
			blueGreenTranColor.colors_indiv.left_side_b = blueGreenTranColor.colors_indiv.right_side_b;
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a06:	7b5a      	ldrb	r2, [r3, #13]
 8002a08:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a0a:	711a      	strb	r2, [r3, #4]
			osMessageQueuePut(lightsComplexQueueHandle, &blueGreenTranColor, 0, 0);
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <BlueGreenTransitionTask+0x11c>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	2300      	movs	r3, #0
 8002a12:	2200      	movs	r2, #0
 8002a14:	492c      	ldr	r1, [pc, #176]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a16:	f012 f96d 	bl	8014cf4 <osMessageQueuePut>
			osDelay(blueGreenTran.val.step_duration);
 8002a1a:	7c7b      	ldrb	r3, [r7, #17]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f011 feac 	bl	801477a <osDelay>

			if(i >= blueGreenTran.val.blue_max_intensity){
 8002a22:	7bbb      	ldrb	r3, [r7, #14]
 8002a24:	461a      	mov	r2, r3
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	da05      	bge.n	8002a38 <BlueGreenTransitionTask+0x88>
				i += blueGreenTran.val.step_size){
 8002a2c:	7c3b      	ldrb	r3, [r7, #16]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	61fb      	str	r3, [r7, #28]
			blueGreenTranColor.colors_indiv.right_side_b = (i > blueGreenTran.val.blue_max_intensity) ? blueGreenTran.val.blue_max_intensity : i;
 8002a36:	e7dc      	b.n	80029f2 <BlueGreenTransitionTask+0x42>
				break;
 8002a38:	bf00      	nop
			}
		}
	}

	/* start transition */
	for(int i = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e038      	b.n	8002ab2 <BlueGreenTransitionTask+0x102>
			i <= 255;
			i += blueGreenTran.val.step_size){
		blueGreenTranColor.colors_indiv.right_side_b = (i > blueGreenTran.val.blue_max_intensity) ? 0 : blueGreenTran.val.blue_max_intensity - i;
 8002a40:	7bbb      	ldrb	r3, [r7, #14]
 8002a42:	461a      	mov	r2, r3
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4293      	cmp	r3, r2
 8002a48:	dc05      	bgt.n	8002a56 <BlueGreenTransitionTask+0xa6>
 8002a4a:	7bba      	ldrb	r2, [r7, #14]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e000      	b.n	8002a58 <BlueGreenTransitionTask+0xa8>
 8002a56:	2300      	movs	r3, #0
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a5a:	7353      	strb	r3, [r2, #13]
		blueGreenTranColor.colors_indiv.left_side_b = blueGreenTranColor.colors_indiv.right_side_b;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a5e:	7b5a      	ldrb	r2, [r3, #13]
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a62:	711a      	strb	r2, [r3, #4]

		blueGreenTranColor.colors_indiv.right_side_g = (i > blueGreenTran.val.green_max_intensity) ? blueGreenTran.val.green_max_intensity : i;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	461a      	mov	r2, r3
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	bfa8      	it	ge
 8002a6e:	4613      	movge	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a74:	739a      	strb	r2, [r3, #14]
		blueGreenTranColor.colors_indiv.left_side_g = blueGreenTranColor.colors_indiv.right_side_g;
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a78:	7b9a      	ldrb	r2, [r3, #14]
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a7c:	715a      	strb	r2, [r3, #5]

		osMessageQueuePut(lightsComplexQueueHandle, &blueGreenTranColor, 0, 0);
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <BlueGreenTransitionTask+0x11c>)
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	2300      	movs	r3, #0
 8002a84:	2200      	movs	r2, #0
 8002a86:	4910      	ldr	r1, [pc, #64]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a88:	f012 f934 	bl	8014cf4 <osMessageQueuePut>

		if( (blueGreenTran.val.green_max_intensity == blueGreenTranColor.colors_indiv.right_side_g) &&
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a90:	7b9b      	ldrb	r3, [r3, #14]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d104      	bne.n	8002aa0 <BlueGreenTransitionTask+0xf0>
				(blueGreenTran.val.blue_max_intensity == blueGreenTranColor.colors_indiv.right_side_b)){
 8002a96:	7bba      	ldrb	r2, [r7, #14]
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <BlueGreenTransitionTask+0x118>)
 8002a9a:	7b5b      	ldrb	r3, [r3, #13]
		if( (blueGreenTran.val.green_max_intensity == blueGreenTranColor.colors_indiv.right_side_g) &&
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d003      	beq.n	8002aa8 <BlueGreenTransitionTask+0xf8>

		}else{
			osDelay(blueGreenTran.val.step_duration);
 8002aa0:	7c7b      	ldrb	r3, [r7, #17]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f011 fe69 	bl	801477a <osDelay>
			i += blueGreenTran.val.step_size){
 8002aa8:	7c3b      	ldrb	r3, [r7, #16]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
	for(int i = 0;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	ddc3      	ble.n	8002a40 <BlueGreenTransitionTask+0x90>
//	timeTracker = HAL_GetTick() - timeTracker;
//	if(timeTracker < blueGreenTran->val.step_duration){
//		osDelay(blueGreenTran->val.step_duration - timeTracker);
//	}

	vTaskDelete( NULL );
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f013 fd41 	bl	8016540 <vTaskDelete>
}
 8002abe:	bf00      	nop
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20009e84 	.word	0x20009e84
 8002acc:	20000310 	.word	0x20000310

08002ad0 <ledEnterDFUNotification>:

void ledEnterDFUNotification(void){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af04      	add	r7, sp, #16
	if(sensorThreadsRunning){
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <ledEnterDFUNotification+0x64>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d026      	beq.n	8002b2e <ledEnterDFUNotification+0x5e>
		resetColor(&receivedColor);
 8002ae0:	4815      	ldr	r0, [pc, #84]	; (8002b38 <ledEnterDFUNotification+0x68>)
 8002ae2:	f000 f88d 	bl	8002c00 <resetColor>

		receivedColor.colors_indiv.left_side_g = 120;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <ledEnterDFUNotification+0x68>)
 8002ae8:	2278      	movs	r2, #120	; 0x78
 8002aea:	715a      	strb	r2, [r3, #5]
		receivedColor.colors_indiv.left_top_g = 120;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <ledEnterDFUNotification+0x68>)
 8002aee:	2278      	movs	r2, #120	; 0x78
 8002af0:	70da      	strb	r2, [r3, #3]
		receivedColor.colors_indiv.left_top_r = 120;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <ledEnterDFUNotification+0x68>)
 8002af4:	2278      	movs	r2, #120	; 0x78
 8002af6:	71da      	strb	r2, [r3, #7]
		receivedColor.colors_indiv.left_side_r = 120;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <ledEnterDFUNotification+0x68>)
 8002afa:	2278      	movs	r2, #120	; 0x78
 8002afc:	721a      	strb	r2, [r3, #8]
//		receivedColor.colors_indiv.left_front_g = 120;
//		receivedColor.colors_indiv.right_front_g = 120;

//		osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);

		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_LEFT_ADDRESS << 1,
 8002afe:	2305      	movs	r3, #5
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	2309      	movs	r3, #9
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <ledEnterDFUNotification+0x68>)
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	2168      	movs	r1, #104	; 0x68
 8002b10:	480a      	ldr	r0, [pc, #40]	; (8002b3c <ledEnterDFUNotification+0x6c>)
 8002b12:	f003 f81b 	bl	8005b4c <HAL_I2C_Mem_Write>
						LIS3DH_D1_PWM_REG, 1, &receivedColor.color[0], 9, 5);

		HAL_I2C_Mem_Write(I2C_HANDLE_TYPEDEF, LIS3DH_RIGHT_ADDRESS << 1,
 8002b16:	2305      	movs	r3, #5
 8002b18:	9302      	str	r3, [sp, #8]
 8002b1a:	2309      	movs	r3, #9
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <ledEnterDFUNotification+0x70>)
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2301      	movs	r3, #1
 8002b24:	2216      	movs	r2, #22
 8002b26:	216a      	movs	r1, #106	; 0x6a
 8002b28:	4804      	ldr	r0, [pc, #16]	; (8002b3c <ledEnterDFUNotification+0x6c>)
 8002b2a:	f003 f80f 	bl	8005b4c <HAL_I2C_Mem_Write>
				LIS3DH_D1_PWM_REG, 1,  &receivedColor.color[9], 9, 5);

	}
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200025d8 	.word	0x200025d8
 8002b38:	20009e70 	.word	0x20009e70
 8002b3c:	20009dd0 	.word	0x20009dd0
 8002b40:	20009e79 	.word	0x20009e79

08002b44 <ledDisconnectNotification>:


void ledDisconnectNotification(void){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	if(sensorThreadsRunning){
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <ledDisconnectNotification+0x44>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d018      	beq.n	8002b84 <ledDisconnectNotification+0x40>
		resetColor(&receivedColor);
 8002b52:	480e      	ldr	r0, [pc, #56]	; (8002b8c <ledDisconnectNotification+0x48>)
 8002b54:	f000 f854 	bl	8002c00 <resetColor>

		receivedColor.colors_indiv.left_side_g = 0;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <ledDisconnectNotification+0x48>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	715a      	strb	r2, [r3, #5]
		receivedColor.colors_indiv.right_side_g = 0;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <ledDisconnectNotification+0x48>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	739a      	strb	r2, [r3, #14]
		receivedColor.colors_indiv.left_side_b = NOMINAL_BLUE_VAL;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <ledDisconnectNotification+0x48>)
 8002b66:	2232      	movs	r2, #50	; 0x32
 8002b68:	711a      	strb	r2, [r3, #4]
		receivedColor.colors_indiv.right_side_b = NOMINAL_BLUE_VAL;
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <ledDisconnectNotification+0x48>)
 8002b6c:	2232      	movs	r2, #50	; 0x32
 8002b6e:	735a      	strb	r2, [r3, #13]
		osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <ledDisconnectNotification+0x4c>)
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	2200      	movs	r2, #0
 8002b78:	4904      	ldr	r1, [pc, #16]	; (8002b8c <ledDisconnectNotification+0x48>)
 8002b7a:	f012 f8bb 	bl	8014cf4 <osMessageQueuePut>
		osDelay(10);
 8002b7e:	200a      	movs	r0, #10
 8002b80:	f011 fdfb 	bl	801477a <osDelay>
	}
//	FrontLightsSet(&receivedColor);
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200025d8 	.word	0x200025d8
 8002b8c:	20009e70 	.word	0x20009e70
 8002b90:	20000310 	.word	0x20000310

08002b94 <ledConnectNotification>:
//		osDelay(10);
//	}
////	FrontLightsSet(&receivedColor);
//}

void ledConnectNotification(void){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	if(sensorThreadsRunning){
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <ledConnectNotification+0x60>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d026      	beq.n	8002bf0 <ledConnectNotification+0x5c>
		resetColor(&receivedColor);
 8002ba2:	4815      	ldr	r0, [pc, #84]	; (8002bf8 <ledConnectNotification+0x64>)
 8002ba4:	f000 f82c 	bl	8002c00 <resetColor>

		receivedColor.colors_indiv.left_side_b = 0;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <ledConnectNotification+0x64>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	711a      	strb	r2, [r3, #4]
		receivedColor.colors_indiv.right_side_b = 0;
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	735a      	strb	r2, [r3, #13]
		receivedColor.colors_indiv.left_side_g = 80;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bb6:	2250      	movs	r2, #80	; 0x50
 8002bb8:	715a      	strb	r2, [r3, #5]
		receivedColor.colors_indiv.right_side_g = 80;
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bbc:	2250      	movs	r2, #80	; 0x50
 8002bbe:	739a      	strb	r2, [r3, #14]
		osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <ledConnectNotification+0x68>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	490b      	ldr	r1, [pc, #44]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bca:	f012 f893 	bl	8014cf4 <osMessageQueuePut>
	//	FrontLightsSet(&receivedColor);
		osDelay(1000);
 8002bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd2:	f011 fdd2 	bl	801477a <osDelay>
		receivedColor.colors_indiv.left_side_g = 0;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	715a      	strb	r2, [r3, #5]
		receivedColor.colors_indiv.right_side_g = 0;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	739a      	strb	r2, [r3, #14]
		osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <ledConnectNotification+0x68>)
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	2300      	movs	r3, #0
 8002be8:	2200      	movs	r2, #0
 8002bea:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <ledConnectNotification+0x64>)
 8002bec:	f012 f882 	bl	8014cf4 <osMessageQueuePut>
	//	FrontLightsSet(&receivedColor);
	}
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200025d8 	.word	0x200025d8
 8002bf8:	20009e70 	.word	0x20009e70
 8002bfc:	20000310 	.word	0x20000310

08002c00 <resetColor>:
		receivedColor.colors_indiv.right_front_r = 255;
		osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
	}
}

void resetColor(union ColorComplex * colorComplex){
 8002c00:	b4b0      	push	{r4, r5, r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <resetColor+0x28>)
 8002c0c:	461d      	mov	r5, r3
 8002c0e:	4614      	mov	r4, r2
 8002c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c12:	6028      	str	r0, [r5, #0]
 8002c14:	6069      	str	r1, [r5, #4]
 8002c16:	60aa      	str	r2, [r5, #8]
 8002c18:	60eb      	str	r3, [r5, #12]
 8002c1a:	8823      	ldrh	r3, [r4, #0]
 8002c1c:	822b      	strh	r3, [r5, #16]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bcb0      	pop	{r4, r5, r7}
 8002c26:	4770      	bx	lr
 8002c28:	0801a98c 	.word	0x0801a98c

08002c2c <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerLuxSample(void *argument) {
	osThreadFlagsSet(luxTaskHandle, GRAB_SAMPLE_BIT);
}
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4604      	mov	r4, r0
 8002c30:	460d      	mov	r5, r1
 8002c32:	2801      	cmp	r0, #1
 8002c34:	d005      	beq.n	8002c42 <_Z41__static_initialization_and_destruction_0ii+0x16>
TSL2772 luxSensor;
 8002c36:	b91c      	cbnz	r4, 8002c40 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	d008      	beq.n	8002c52 <_Z41__static_initialization_and_destruction_0ii+0x26>
}
 8002c40:	bd38      	pop	{r3, r4, r5, pc}
 8002c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c46:	4299      	cmp	r1, r3
 8002c48:	d1f5      	bne.n	8002c36 <_Z41__static_initialization_and_destruction_0ii+0xa>
TSL2772 luxSensor;
 8002c4a:	4804      	ldr	r0, [pc, #16]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002c4c:	f011 fb68 	bl	8014320 <_ZN7TSL2772C1Ev>
 8002c50:	e7f1      	b.n	8002c36 <_Z41__static_initialization_and_destruction_0ii+0xa>
 8002c52:	4802      	ldr	r0, [pc, #8]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002c54:	f011 fb72 	bl	801433c <_ZN7TSL2772D1Ev>
}
 8002c58:	e7f2      	b.n	8002c40 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002c5a:	bf00      	nop
 8002c5c:	200025c0 	.word	0x200025c0

08002c60 <_GLOBAL__sub_I_periodicLuxTimer_id>:
 8002c60:	b508      	push	{r3, lr}
 8002c62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7ff ffe0 	bl	8002c2c <_Z41__static_initialization_and_destruction_0ii>
 8002c6c:	bd08      	pop	{r3, pc}

08002c6e <_GLOBAL__sub_D_periodicLuxTimer_id>:
 8002c6e:	b508      	push	{r3, lr}
 8002c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff ffd9 	bl	8002c2c <_Z41__static_initialization_and_destruction_0ii>
 8002c7a:	bd08      	pop	{r3, pc}

08002c7c <configureTimerForRunTimeStats>:
/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */

void configureTimerForRunTimeStats(void)
{
 8002c7c:	b508      	push	{r3, lr}
    ulHighFrequencyTimerTicks = 0;
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <configureTimerForRunTimeStats+0x10>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim17);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <configureTimerForRunTimeStats+0x14>)
 8002c86:	f009 fda5 	bl	800c7d4 <HAL_TIM_Base_Start_IT>
}
 8002c8a:	bd08      	pop	{r3, pc}
 8002c8c:	200025dc 	.word	0x200025dc
 8002c90:	2000a0e0 	.word	0x2000a0e0

08002c94 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
	return ulHighFrequencyTimerTicks;
 8002c94:	4b01      	ldr	r3, [pc, #4]	; (8002c9c <getRunTimeCounterValue+0x8>)
 8002c96:	6818      	ldr	r0, [r3, #0]
}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200025dc 	.word	0x200025dc

08002ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ca2:	6802      	ldr	r2, [r0, #0]
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d000      	beq.n	8002cac <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002caa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002cac:	f001 faa0 	bl	80041f0 <HAL_IncTick>
}
 8002cb0:	e7fb      	b.n	8002caa <HAL_TIM_PeriodElapsedCallback+0xa>
 8002cb2:	bf00      	nop
 8002cb4:	40012c00 	.word	0x40012c00

08002cb8 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002cba:	e7fe      	b.n	8002cba <Error_Handler+0x2>

08002cbc <SystemClock_Config>:
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc0:	2248      	movs	r2, #72	; 0x48
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	a808      	add	r0, sp, #32
 8002cc6:	f017 fb3b 	bl	801a340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cca:	2400      	movs	r4, #0
 8002ccc:	9401      	str	r4, [sp, #4]
 8002cce:	9402      	str	r4, [sp, #8]
 8002cd0:	9403      	str	r4, [sp, #12]
 8002cd2:	9404      	str	r4, [sp, #16]
 8002cd4:	9405      	str	r4, [sp, #20]
 8002cd6:	9406      	str	r4, [sp, #24]
 8002cd8:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8002cda:	f005 f9fd 	bl	80080d8 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ce6:	f023 0318 	bic.w	r3, r3, #24
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	6813      	ldr	r3, [r2, #0]
 8002d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002d08:	2327      	movs	r3, #39	; 0x27
 8002d0a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d10:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d12:	2301      	movs	r3, #1
 8002d14:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d1c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002d22:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d28:	2202      	movs	r2, #2
 8002d2a:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002d2c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002d2e:	2310      	movs	r3, #16
 8002d30:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002d32:	2320      	movs	r3, #32
 8002d34:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d3a:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8002d3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d40:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d46:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d48:	a808      	add	r0, sp, #32
 8002d4a:	f005 fe33 	bl	80089b4 <HAL_RCC_OscConfig>
 8002d4e:	b998      	cbnz	r0, 8002d78 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002d50:	236f      	movs	r3, #111	; 0x6f
 8002d52:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d54:	2303      	movs	r3, #3
 8002d56:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d60:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002d62:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002d64:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d66:	2101      	movs	r1, #1
 8002d68:	a801      	add	r0, sp, #4
 8002d6a:	f006 f9af 	bl	80090cc <HAL_RCC_ClockConfig>
 8002d6e:	b928      	cbnz	r0, 8002d7c <SystemClock_Config+0xc0>
  HAL_RCCEx_EnableMSIPLLMode();
 8002d70:	f007 fd93 	bl	800a89a <HAL_RCCEx_EnableMSIPLLMode>
}
 8002d74:	b01a      	add	sp, #104	; 0x68
 8002d76:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d78:	f7ff ff9e 	bl	8002cb8 <Error_Handler>
    Error_Handler();
 8002d7c:	f7ff ff9c 	bl	8002cb8 <Error_Handler>

08002d80 <_Z24PeriphCommonClock_Configv>:
{
 8002d80:	b500      	push	{lr}
 8002d82:	b095      	sub	sp, #84	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	222c      	movs	r2, #44	; 0x2c
 8002d86:	2100      	movs	r1, #0
 8002d88:	a806      	add	r0, sp, #24
 8002d8a:	f017 fad9 	bl	801a340 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002d8e:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8002d92:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLSAI1.PLLN = 12;
 8002d94:	230c      	movs	r3, #12
 8002d96:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d9c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da2:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002da4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002da8:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_USBCLK
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <_Z24PeriphCommonClock_Configv+0x5c>)
 8002dac:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002dae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002db2:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002db8:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dbe:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc8:	4668      	mov	r0, sp
 8002dca:	f006 ffd9 	bl	8009d80 <HAL_RCCEx_PeriphCLKConfig>
 8002dce:	b910      	cbnz	r0, 8002dd6 <_Z24PeriphCommonClock_Configv+0x56>
}
 8002dd0:	b015      	add	sp, #84	; 0x54
 8002dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002dd6:	f7ff ff6f 	bl	8002cb8 <Error_Handler>
 8002dda:	bf00      	nop
 8002ddc:	11010000 	.word	0x11010000

08002de0 <main>:
{
 8002de0:	b508      	push	{r3, lr}
	*((int *)0x2000020c) =  0xCAFEFEED; // Reset our trigger
 8002de2:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <main+0x6c>)
 8002de4:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <main+0x70>)
 8002de6:	601a      	str	r2, [r3, #0]
  HAL_Init();
 8002de8:	f001 f99c 	bl	8004124 <HAL_Init>
  MX_APPE_Config();
 8002dec:	f7fe f9cc 	bl	8001188 <MX_APPE_Config>
  SystemClock_Config();
 8002df0:	f7ff ff64 	bl	8002cbc <SystemClock_Config>
  PeriphCommonClock_Config();
 8002df4:	f7ff ffc4 	bl	8002d80 <_Z24PeriphCommonClock_Configv>
   MX_IPCC_Init();
 8002df8:	f7ff fcd2 	bl	80027a0 <MX_IPCC_Init>
  MX_GPIO_Init();
 8002dfc:	f7fe fcdc 	bl	80017b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e00:	f7fe fc6a 	bl	80016d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e04:	f7fd ff78 	bl	8000cf8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002e08:	f7ff fb68 	bl	80024dc <MX_I2C1_Init>
  MX_I2C3_Init();
 8002e0c:	f7ff fba6 	bl	800255c <MX_I2C3_Init>
  MX_RF_Init();
 8002e10:	f000 f990 	bl	8003134 <MX_RF_Init>
  MX_RTC_Init();
 8002e14:	f000 f9c0 	bl	8003198 <MX_RTC_Init>
  MX_SAI1_Init();
 8002e18:	f000 fa2c 	bl	8003274 <MX_SAI1_Init>
  MX_SPI1_Init();
 8002e1c:	f000 fba4 	bl	8003568 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e20:	f000 fbe0 	bl	80035e4 <MX_SPI2_Init>
  MX_TIM16_Init();
 8002e24:	f000 ff38 	bl	8003c98 <MX_TIM16_Init>
  MX_TIM2_Init();
 8002e28:	f000 fec2 	bl	8003bb0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8002e2c:	f016 fd72 	bl	8019914 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8002e30:	f000 ffac 	bl	8003d8c <MX_TIM17_Init>
  extMemInit();
 8002e34:	f7fe fca0 	bl	8001778 <extMemInit>
  MX_APPE_Init();
 8002e38:	f7fe f9b4 	bl	80011a4 <MX_APPE_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002e3c:	f011 fac4 	bl	80143c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002e40:	f7fe fbac 	bl	800159c <_Z16MX_FREERTOS_Initv>
  osKernelStart();
 8002e44:	f011 fae4 	bl	8014410 <osKernelStart>
	while (1) {
 8002e48:	e7fe      	b.n	8002e48 <main+0x68>
 8002e4a:	bf00      	nop
 8002e4c:	2000020c 	.word	0x2000020c
 8002e50:	cafefeed 	.word	0xcafefeed

08002e54 <sendPacket_BLE>:
//		osDelay(MAX_BLE_RETRIES - retry); // artificial delay to allow for the connected device to handle the latest sent packet
	}
}

static DTS_App_Context_t DataTransferServerContext;
uint8_t sendPacket_BLE(SensorPacket *packet) {
 8002e54:	b508      	push	{r3, lr}

	if ((packet->header.payloadLength) > MAX_PAYLOAD_SIZE) {
 8002e56:	6903      	ldr	r3, [r0, #16]
 8002e58:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 8002e5c:	d901      	bls.n	8002e62 <sendPacket_BLE+0xe>
		return PACKET_LENGTH_EXCEEDED;
 8002e5e:	2001      	movs	r0, #1
	if (status == BLE_STATUS_SUCCESS) {
		return PACKET_SEND_SUCCESS;
	} else {
		return PACKET_UNDEFINED_ERR;
	}
}
 8002e60:	bd08      	pop	{r3, pc}
	DataTransferServerContext.TxData.pPayload = (uint8_t*) packet;
 8002e62:	4906      	ldr	r1, [pc, #24]	; (8002e7c <sendPacket_BLE+0x28>)
 8002e64:	6008      	str	r0, [r1, #0]
			+ sizeof(PacketHeader); //Att_Mtu_Exchanged-10;
 8002e66:	3328      	adds	r3, #40	; 0x28
	DataTransferServerContext.TxData.Length = packet->header.payloadLength
 8002e68:	60cb      	str	r3, [r1, #12]
	status = DTS_STM_UpdateChar(DATA_TRANSFER_TX_CHAR_UUID,
 8002e6a:	f64f 6081 	movw	r0, #65153	; 0xfe81
 8002e6e:	f016 facd 	bl	801940c <DTS_STM_UpdateChar>
	if (status == BLE_STATUS_SUCCESS) {
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d0f4      	beq.n	8002e60 <sendPacket_BLE+0xc>
		return PACKET_UNDEFINED_ERR;
 8002e76:	200a      	movs	r0, #10
 8002e78:	e7f2      	b.n	8002e60 <sendPacket_BLE+0xc>
 8002e7a:	bf00      	nop
 8002e7c:	200025e0 	.word	0x200025e0

08002e80 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef>:
	// (2) get time
	return RTC_ToEpoch(&time, &date);
}

// Convert epoch time to Date/Time structures
void RTC_FromEpoch(uint32_t epoch, RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8002e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	4688      	mov	r8, r1
 8002e86:	4617      	mov	r7, r2
	uint64_t JD    = 0;
	uint64_t JDN   = 0;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	JD  = ((epoch + 43200) / (86400 >>1 )) + (2440587 << 1) + 1;
 8002e88:	f500 4428 	add.w	r4, r0, #43008	; 0xa800
 8002e8c:	34c0      	adds	r4, #192	; 0xc0
 8002e8e:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x108>)
 8002e90:	fba3 2404 	umull	r2, r4, r3, r4
 8002e94:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x10c>)
 8002e96:	eb02 34d4 	add.w	r4, r2, r4, lsr #15
	JDN = JD >> 1;
 8002e9a:	0864      	lsrs	r4, r4, #1

    tm = epoch; t1 = tm / 60; sec  = tm - (t1 * 60);
 8002e9c:	4d3c      	ldr	r5, [pc, #240]	; (8002f90 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x110>)
 8002e9e:	fba5 2500 	umull	r2, r5, r5, r0
 8002ea2:	f3c5 154f 	ubfx	r5, r5, #5, #16
 8002ea6:	ebc5 1905 	rsb	r9, r5, r5, lsl #4
 8002eaa:	eba0 0989 	sub.w	r9, r0, r9, lsl #2
 8002eae:	fa1f f989 	uxth.w	r9, r9
    tm = t1;    t1 = tm / 60; min  = tm - (t1 * 60);
 8002eb2:	4e38      	ldr	r6, [pc, #224]	; (8002f94 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x114>)
 8002eb4:	fba6 2600 	umull	r2, r6, r6, r0
 8002eb8:	f3c6 26cf 	ubfx	r6, r6, #11, #16
 8002ebc:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
 8002ec0:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 8002ec4:	b2ad      	uxth	r5, r5
    tm = t1;    t1 = tm / 24; hour = tm - (t1 * 24);
 8002ec6:	fba3 3000 	umull	r3, r0, r3, r0
 8002eca:	0c00      	lsrs	r0, r0, #16
 8002ecc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ed0:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 8002ed4:	b286      	uxth	r6, r0

    dow   = JDN % 7;
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	2300      	movs	r3, #0
 8002eda:	4620      	mov	r0, r4
 8002edc:	2100      	movs	r1, #0
 8002ede:	f7fd fd75 	bl	80009cc <__aeabi_uldivmod>
    a     = JDN + 32044;
 8002ee2:	f504 44fa 	add.w	r4, r4, #32000	; 0x7d00
 8002ee6:	342c      	adds	r4, #44	; 0x2c
    b     = ((4 * a) + 3) / 146097;
 8002ee8:	00a1      	lsls	r1, r4, #2
 8002eea:	3103      	adds	r1, #3
 8002eec:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x118>)
 8002eee:	fba3 3101 	umull	r3, r1, r3, r1
 8002ef2:	0bc9      	lsrs	r1, r1, #15
    c     = a - ((146097 * b) / 4);
 8002ef4:	4829      	ldr	r0, [pc, #164]	; (8002f9c <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x11c>)
 8002ef6:	fb00 f001 	mul.w	r0, r0, r1
 8002efa:	eba4 0490 	sub.w	r4, r4, r0, lsr #2
    d     = ((4 * c) + 3) / 1461;
 8002efe:	00a3      	lsls	r3, r4, #2
 8002f00:	3303      	adds	r3, #3
 8002f02:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x120>)
 8002f04:	fba0 0303 	umull	r0, r3, r0, r3
 8002f08:	09db      	lsrs	r3, r3, #7
    e     = c - ((1461 * d) / 4);
 8002f0a:	f240 50b5 	movw	r0, #1461	; 0x5b5
 8002f0e:	fb00 f003 	mul.w	r0, r0, r3
 8002f12:	eba4 0090 	sub.w	r0, r4, r0, lsr #2
    m     = ((5 * e) + 2) / 153;
 8002f16:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 8002f1a:	f10c 0c02 	add.w	ip, ip, #2
 8002f1e:	4c21      	ldr	r4, [pc, #132]	; (8002fa4 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x124>)
 8002f20:	fba4 e40c 	umull	lr, r4, r4, ip
 8002f24:	09e4      	lsrs	r4, r4, #7
    mday  = e - (((153 * m) + 2) / 5) + 1;
 8002f26:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
 8002f2a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8002f2e:	f10e 0e02 	add.w	lr, lr, #2
 8002f32:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002fa8 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x128>
 8002f36:	fbaa ae0e 	umull	sl, lr, sl, lr
 8002f3a:	eba0 009e 	sub.w	r0, r0, lr, lsr #2
 8002f3e:	b280      	uxth	r0, r0
 8002f40:	3001      	adds	r0, #1
    month = m + 3 - (12 * (m / 10));
 8002f42:	f8df e068 	ldr.w	lr, [pc, #104]	; 8002fac <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x12c>
 8002f46:	fbae ec0c 	umull	lr, ip, lr, ip
 8002f4a:	f3cc 2c0f 	ubfx	ip, ip, #8, #16
 8002f4e:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 8002f52:	eba4 048e 	sub.w	r4, r4, lr, lsl #2
 8002f56:	3403      	adds	r4, #3
    year  = (100 * b) + d - 4800 + (m / 10);
 8002f58:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002f5c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002f60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002f64:	fa1c f383 	uxtah	r3, ip, r3
 8002f68:	f5a3 5396 	sub.w	r3, r3, #4800	; 0x12c0
 8002f6c:	b29b      	uxth	r3, r3

    date->Year    = year - 2000;
 8002f6e:	3330      	adds	r3, #48	; 0x30
 8002f70:	70fb      	strb	r3, [r7, #3]
    date->Month   = month;
 8002f72:	707c      	strb	r4, [r7, #1]
    date->Date    = mday;
 8002f74:	70b8      	strb	r0, [r7, #2]
    date->WeekDay = dow;
 8002f76:	703a      	strb	r2, [r7, #0]
    time->Hours   = hour;
 8002f78:	f888 6000 	strb.w	r6, [r8]
    time->Minutes = min;
 8002f7c:	f888 5001 	strb.w	r5, [r8, #1]
    time->Seconds = sec;
 8002f80:	f888 9002 	strb.w	r9, [r8, #2]
}
 8002f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f88:	c22e4507 	.word	0xc22e4507
 8002f8c:	004a7b17 	.word	0x004a7b17
 8002f90:	88888889 	.word	0x88888889
 8002f94:	91a2b3c5 	.word	0x91a2b3c5
 8002f98:	396b06bd 	.word	0x396b06bd
 8002f9c:	00023ab1 	.word	0x00023ab1
 8002fa0:	166db073 	.word	0x166db073
 8002fa4:	d62b80d7 	.word	0xd62b80d7
 8002fa8:	cccccccd 	.word	0xcccccccd
 8002fac:	2ad5802b 	.word	0x2ad5802b

08002fb0 <updateRTC>:
void updateRTC(uint32_t receivedTime){
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	b086      	sub	sp, #24
	RTC_FromEpoch(receivedTime, &time, &date);
 8002fb4:	466a      	mov	r2, sp
 8002fb6:	a901      	add	r1, sp, #4
 8002fb8:	f7ff ff62 	bl	8002e80 <_Z13RTC_FromEpochmP15RTC_TimeTypeDefP15RTC_DateTypeDef>
	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002fbc:	4c06      	ldr	r4, [pc, #24]	; (8002fd8 <updateRTC+0x28>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	a901      	add	r1, sp, #4
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f007 ff2e 	bl	800ae24 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4669      	mov	r1, sp
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f008 f849 	bl	800b064 <HAL_RTC_SetDate>
}
 8002fd2:	b006      	add	sp, #24
 8002fd4:	bd10      	pop	{r4, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20009eac 	.word	0x20009eac

08002fdc <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef>:

uint32_t RTC_ToEpoch(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 8002fdc:	b430      	push	{r4, r5}
	uint32_t JDN;

	// These hardcore math's are taken from http://en.wikipedia.org/wiki/Julian_day

	// Calculate some coefficients
	a = (14 - date->Month) / 12;
 8002fde:	784b      	ldrb	r3, [r1, #1]
 8002fe0:	f1c3 020e 	rsb	r2, r3, #14
 8002fe4:	4d20      	ldr	r5, [pc, #128]	; (8003068 <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x8c>)
 8002fe6:	fb85 4502 	smull	r4, r5, r5, r2
 8002fea:	17d4      	asrs	r4, r2, #31
 8002fec:	ebc4 0465 	rsb	r4, r4, r5, asr #1
 8002ff0:	b2e4      	uxtb	r4, r4
	y = (date->Year + 2000) + 4800 - a; // years since 1 March, 4801 BC
 8002ff2:	78ca      	ldrb	r2, [r1, #3]
 8002ff4:	1b12      	subs	r2, r2, r4
 8002ff6:	f641 2590 	movw	r5, #6800	; 0x1a90
 8002ffa:	fa15 f282 	uxtah	r2, r5, r2
 8002ffe:	b292      	uxth	r2, r2
	m = date->Month + (12 * a) - 3; // since 1 March, 4801 BC
 8003000:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003004:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3b03      	subs	r3, #3
 800300c:	b2db      	uxtb	r3, r3

	// Gregorian calendar date compute
    JDN  = date->Date;
 800300e:	7889      	ldrb	r1, [r1, #2]
    JDN += (153 * m + 2) / 5;
 8003010:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003014:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8003018:	3302      	adds	r3, #2
 800301a:	4c14      	ldr	r4, [pc, #80]	; (800306c <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x90>)
 800301c:	fb84 4303 	smull	r4, r3, r4, r3
 8003020:	eb01 0163 	add.w	r1, r1, r3, asr #1
    JDN += 365 * y;
 8003024:	f240 136d 	movw	r3, #365	; 0x16d
 8003028:	fb03 1302 	mla	r3, r3, r2, r1
    JDN += y / 4;
 800302c:	eb03 0392 	add.w	r3, r3, r2, lsr #2
    JDN += -y / 100;
 8003030:	490f      	ldr	r1, [pc, #60]	; (8003070 <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x94>)
 8003032:	fb81 5402 	smull	r5, r4, r1, r2
 8003036:	eba3 1364 	sub.w	r3, r3, r4, asr #5
    JDN += y / 400;
 800303a:	fba1 1202 	umull	r1, r2, r1, r2
 800303e:	eb03 12d2 	add.w	r2, r3, r2, lsr #7
    JDN  = JDN - 32045;
    JDN  = JDN - JULIAN_DATE_BASE;    // Calculate from base date
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x98>)
 8003044:	4413      	add	r3, r2
    JDN *= 86400;                     // Days to seconds
    JDN += time->Hours * 3600;    // ... and today seconds
 8003046:	7801      	ldrb	r1, [r0, #0]
 8003048:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800304c:	fb02 f201 	mul.w	r2, r2, r1
 8003050:	4909      	ldr	r1, [pc, #36]	; (8003078 <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef+0x9c>)
 8003052:	fb01 2303 	mla	r3, r1, r3, r2
    JDN += time->Minutes * 60;
 8003056:	7842      	ldrb	r2, [r0, #1]
 8003058:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800305c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    JDN += time->Seconds;
 8003060:	7880      	ldrb	r0, [r0, #2]

	return JDN;
}
 8003062:	4418      	add	r0, r3
 8003064:	bc30      	pop	{r4, r5}
 8003066:	4770      	bx	lr
 8003068:	2aaaaaab 	.word	0x2aaaaaab
 800306c:	66666667 	.word	0x66666667
 8003070:	51eb851f 	.word	0x51eb851f
 8003074:	ffda4547 	.word	0xffda4547
 8003078:	00015180 	.word	0x00015180

0800307c <getEpoch>:
uint32_t getEpoch(void){
 800307c:	b510      	push	{r4, lr}
 800307e:	b086      	sub	sp, #24
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003080:	4c08      	ldr	r4, [pc, #32]	; (80030a4 <getEpoch+0x28>)
 8003082:	2200      	movs	r2, #0
 8003084:	a901      	add	r1, sp, #4
 8003086:	4620      	mov	r0, r4
 8003088:	f007 ff90 	bl	800afac <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800308c:	2200      	movs	r2, #0
 800308e:	4669      	mov	r1, sp
 8003090:	4620      	mov	r0, r4
 8003092:	f008 f895 	bl	800b1c0 <HAL_RTC_GetDate>
	return RTC_ToEpoch(&time, &date);
 8003096:	4669      	mov	r1, sp
 8003098:	a801      	add	r0, sp, #4
 800309a:	f7ff ff9f 	bl	8002fdc <_Z11RTC_ToEpochP15RTC_TimeTypeDefP15RTC_DateTypeDef>
}
 800309e:	b006      	add	sp, #24
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	bf00      	nop
 80030a4:	20009eac 	.word	0x20009eac

080030a8 <senderThread>:
void senderThread(void *argument) {
 80030a8:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_PACKET_QUEUE_SIZE; i++) {
 80030aa:	2400      	movs	r4, #0
 80030ac:	2c09      	cmp	r4, #9
 80030ae:	dc19      	bgt.n	80030e4 <senderThread+0x3c>
		packetToSend = &packets[i];
 80030b0:	0262      	lsls	r2, r4, #9
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <senderThread+0x78>)
 80030b4:	eb03 2044 	add.w	r0, r3, r4, lsl #9
 80030b8:	491a      	ldr	r1, [pc, #104]	; (8003124 <senderThread+0x7c>)
 80030ba:	6008      	str	r0, [r1, #0]
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80030bc:	481a      	ldr	r0, [pc, #104]	; (8003128 <senderThread+0x80>)
 80030be:	6800      	ldr	r0, [r0, #0]
		packetToSend->header.systemID = LL_FLASH_GetUDN();
 80030c0:	50d0      	str	r0, [r2, r3]
		osMessageQueuePut(packetAvail_QueueHandle, &packetToSend, 0U,
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030c6:	2200      	movs	r2, #0
 80030c8:	4818      	ldr	r0, [pc, #96]	; (800312c <senderThread+0x84>)
 80030ca:	6800      	ldr	r0, [r0, #0]
 80030cc:	f011 fe12 	bl	8014cf4 <osMessageQueuePut>
	for (int i = 0; i < MAX_PACKET_QUEUE_SIZE; i++) {
 80030d0:	3401      	adds	r4, #1
 80030d2:	e7eb      	b.n	80030ac <senderThread+0x4>
		osMessageQueuePut(packetAvail_QueueHandle, &packetToSend, 0U,
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030d8:	2200      	movs	r2, #0
 80030da:	4912      	ldr	r1, [pc, #72]	; (8003124 <senderThread+0x7c>)
 80030dc:	4813      	ldr	r0, [pc, #76]	; (800312c <senderThread+0x84>)
 80030de:	6800      	ldr	r0, [r0, #0]
 80030e0:	f011 fe08 	bl	8014cf4 <osMessageQueuePut>
		osMessageQueueGet(packet_QueueHandle, &packetToSend, 0U, osWaitForever);
 80030e4:	4c0f      	ldr	r4, [pc, #60]	; (8003124 <senderThread+0x7c>)
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ea:	2200      	movs	r2, #0
 80030ec:	4621      	mov	r1, r4
 80030ee:	4810      	ldr	r0, [pc, #64]	; (8003130 <senderThread+0x88>)
 80030f0:	6800      	ldr	r0, [r0, #0]
 80030f2:	f011 fe5f 	bl	8014db4 <osMessageQueueGet>
		packetToSend->header.systemID = LL_FLASH_GetUDN();
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <senderThread+0x80>)
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	601a      	str	r2, [r3, #0]
		packetToSend->header.epoch = getEpoch();
 80030fe:	6824      	ldr	r4, [r4, #0]
 8003100:	f7ff ffbc 	bl	800307c <getEpoch>
 8003104:	60e0      	str	r0, [r4, #12]
		retry = 0;
 8003106:	2400      	movs	r4, #0
		while (PACKET_SEND_SUCCESS != sendPacket_BLE(packetToSend)) {
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <senderThread+0x7c>)
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	f7ff fea2 	bl	8002e54 <sendPacket_BLE>
 8003110:	2800      	cmp	r0, #0
 8003112:	d0df      	beq.n	80030d4 <senderThread+0x2c>
			if (retry >= MAX_BLE_RETRIES) {
 8003114:	2c01      	cmp	r4, #1
 8003116:	d8dd      	bhi.n	80030d4 <senderThread+0x2c>
			retry++;
 8003118:	3401      	adds	r4, #1
 800311a:	b2e4      	uxtb	r4, r4
		while (PACKET_SEND_SUCCESS != sendPacket_BLE(packetToSend)) {
 800311c:	e7f4      	b.n	8003108 <senderThread+0x60>
 800311e:	bf00      	nop
 8003120:	200025f4 	.word	0x200025f4
 8003124:	200039f4 	.word	0x200039f4
 8003128:	1fff7580 	.word	0x1fff7580
 800312c:	2000031c 	.word	0x2000031c
 8003130:	20000320 	.word	0x20000320

08003134 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_RCC_EnableRTC>:
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_APB1_GRP1_EnableClock>:
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800316c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4313      	orrs	r3, r2
 800317a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003188:	68fb      	ldr	r3, [r7, #12]
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */
#else
  hrtc.Instance = RTC;
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <MX_RTC_Init+0x48>)
 800319e:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <MX_RTC_Init+0x4c>)
 80031a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <MX_RTC_Init+0x48>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <MX_RTC_Init+0x48>)
 80031aa:	220f      	movs	r2, #15
 80031ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_RTC_Init+0x48>)
 80031b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80031b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <MX_RTC_Init+0x48>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <MX_RTC_Init+0x48>)
 80031be:	2200      	movs	r2, #0
 80031c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <MX_RTC_Init+0x48>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <MX_RTC_Init+0x48>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	615a      	str	r2, [r3, #20]

  hrtc.Lock = HAL_UNLOCKED;
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <MX_RTC_Init+0x48>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]
  HAL_RTC_MspInit(&hrtc);
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <MX_RTC_Init+0x48>)
 80031d8:	f000 f806 	bl	80031e8 <HAL_RTC_MspInit>
////      HAL_RTC_GetDate(&hrtc, Date, Format);
//
//    }
  /* USER CODE END RTC_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20009eac 	.word	0x20009eac
 80031e4:	40002800 	.word	0x40002800

080031e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b096      	sub	sp, #88	; 0x58
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	2250      	movs	r2, #80	; 0x50
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f017 f8a1 	bl	801a340 <memset>
  if(rtcHandle->Instance==RTC)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_RTC_MspInit+0x54>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d115      	bne.n	8003234 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800320c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800320e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003214:	f107 0308 	add.w	r3, r7, #8
 8003218:	4618      	mov	r0, r3
 800321a:	f006 fdb1 	bl	8009d80 <HAL_RCCEx_PeriphCLKConfig>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003224:	f7ff fd48 	bl	8002cb8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003228:	f7ff ff8b 	bl	8003142 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800322c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003230:	f7ff ff98 	bl	8003164 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003234:	bf00      	nop
 8003236:	3758      	adds	r7, #88	; 0x58
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40002800 	.word	0x40002800

08003240 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800324e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4313      	orrs	r3, r2
 8003256:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4013      	ands	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <MX_SAI1_Init+0x6c>)
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <MX_SAI1_Init+0x70>)
 800327c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_SAI1_Init+0x6c>)
 8003280:	2200      	movs	r2, #0
 8003282:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <MX_SAI1_Init+0x6c>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <MX_SAI1_Init+0x6c>)
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <MX_SAI1_Init+0x6c>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <MX_SAI1_Init+0x6c>)
 8003298:	2200      	movs	r2, #0
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <MX_SAI1_Init+0x6c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <MX_SAI1_Init+0x6c>)
 80032a4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80032a8:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <MX_SAI1_Init+0x6c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <MX_SAI1_Init+0x6c>)
 80032b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <MX_SAI1_Init+0x6c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <MX_SAI1_Init+0x6c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80032c4:	2302      	movs	r3, #2
 80032c6:	2202      	movs	r2, #2
 80032c8:	2100      	movs	r1, #0
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_SAI1_Init+0x6c>)
 80032cc:	f008 f851 	bl	800b372 <HAL_SAI_InitProtocol>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_SAI1_Init+0x66>
  {
    Error_Handler();
 80032d6:	f7ff fcef 	bl	8002cb8 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20009f30 	.word	0x20009f30
 80032e4:	40015404 	.word	0x40015404

080032e8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <HAL_SAI_MspInit+0x100>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d172      	bne.n	80033e0 <HAL_SAI_MspInit+0xf8>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <HAL_SAI_MspInit+0x104>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003302:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003306:	f7ff ff9b 	bl	8003240 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_SAI_MspInit+0x104>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a36      	ldr	r2, [pc, #216]	; (80033ec <HAL_SAI_MspInit+0x104>)
 8003312:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB12     ------> SAI1_FS_A
    PA8     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003314:	2308      	movs	r3, #8
 8003316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003324:	230d      	movs	r3, #13
 8003326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	4619      	mov	r1, r3
 800332e:	4830      	ldr	r0, [pc, #192]	; (80033f0 <HAL_SAI_MspInit+0x108>)
 8003330:	f002 f9b8 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003346:	230d      	movs	r3, #13
 8003348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	4619      	mov	r1, r3
 8003350:	4828      	ldr	r0, [pc, #160]	; (80033f4 <HAL_SAI_MspInit+0x10c>)
 8003352:	f002 f9a7 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800335a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003368:	230d      	movs	r3, #13
 800336a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	4619      	mov	r1, r3
 8003372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003376:	f002 f995 	bl	80056a4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel2;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 800337c:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_SAI_MspInit+0x114>)
 800337e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 8003382:	2212      	movs	r2, #18
 8003384:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 8003388:	2210      	movs	r2, #16
 800338a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 800339a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033a0:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80033b4:	4810      	ldr	r0, [pc, #64]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033b6:	f001 ff5b 	bl	8005270 <HAL_DMA_Init>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 80033c0:	f7ff fc7a 	bl	8002cb8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80033da:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <HAL_SAI_MspInit+0x110>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40015404 	.word	0x40015404
 80033ec:	200039f8 	.word	0x200039f8
 80033f0:	48000800 	.word	0x48000800
 80033f4:	48000400 	.word	0x48000400
 80033f8:	20009ed0 	.word	0x20009ed0
 80033fc:	4002001c 	.word	0x4002001c

08003400 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerSgpSample(void *argument) {
	osThreadFlagsSet(sgpTaskHandle, GRAB_SAMPLE_BIT);
}
 8003400:	2801      	cmp	r0, #1
 8003402:	d000      	beq.n	8003406 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003404:	4770      	bx	lr
 8003406:	b508      	push	{r3, lr}
 8003408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340c:	4299      	cmp	r1, r3
 800340e:	d000      	beq.n	8003412 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8003410:	bd08      	pop	{r3, pc}
SensirionI2CSgp41 sgp41;
 8003412:	4802      	ldr	r0, [pc, #8]	; (800341c <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 8003414:	f010 ff6a 	bl	80142ec <_ZN17SensirionI2CSgp41C1Ev>
}
 8003418:	e7fa      	b.n	8003410 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800341a:	bf00      	nop
 800341c:	200039fc 	.word	0x200039fc

08003420 <_GLOBAL__sub_I_periodicSgpTimer_id>:
 8003420:	b508      	push	{r3, lr}
 8003422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003426:	2001      	movs	r0, #1
 8003428:	f7ff ffea 	bl	8003400 <_Z41__static_initialization_and_destruction_0ii>
 800342c:	bd08      	pop	{r3, pc}
	...

08003430 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerShtSample(void *argument) {
	osThreadFlagsSet(shtTaskHandle, GRAB_SAMPLE_BIT);
}
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4604      	mov	r4, r0
 8003434:	460d      	mov	r5, r1
 8003436:	2801      	cmp	r0, #1
 8003438:	d005      	beq.n	8003446 <_Z41__static_initialization_and_destruction_0ii+0x16>
Adafruit_SHT4x sht4 = Adafruit_SHT4x();
 800343a:	b91c      	cbnz	r4, 8003444 <_Z41__static_initialization_and_destruction_0ii+0x14>
 800343c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003440:	429d      	cmp	r5, r3
 8003442:	d008      	beq.n	8003456 <_Z41__static_initialization_and_destruction_0ii+0x26>
}
 8003444:	bd38      	pop	{r3, r4, r5, pc}
 8003446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800344a:	4299      	cmp	r1, r3
 800344c:	d1f5      	bne.n	800343a <_Z41__static_initialization_and_destruction_0ii+0xa>
Adafruit_SHT4x sht4 = Adafruit_SHT4x();
 800344e:	4804      	ldr	r0, [pc, #16]	; (8003460 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003450:	f010 ff50 	bl	80142f4 <_ZN14Adafruit_SHT4xC1Ev>
 8003454:	e7f1      	b.n	800343a <_Z41__static_initialization_and_destruction_0ii+0xa>
 8003456:	4802      	ldr	r0, [pc, #8]	; (8003460 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003458:	f010 ff54 	bl	8014304 <_ZN14Adafruit_SHT4xD1Ev>
}
 800345c:	e7f2      	b.n	8003444 <_Z41__static_initialization_and_destruction_0ii+0x14>
 800345e:	bf00      	nop
 8003460:	20003a04 	.word	0x20003a04

08003464 <_GLOBAL__sub_I_periodicShtTimer_id>:
 8003464:	b508      	push	{r3, lr}
 8003466:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800346a:	2001      	movs	r0, #1
 800346c:	f7ff ffe0 	bl	8003430 <_Z41__static_initialization_and_destruction_0ii>
 8003470:	bd08      	pop	{r3, pc}

08003472 <_GLOBAL__sub_D_periodicShtTimer_id>:
 8003472:	b508      	push	{r3, lr}
 8003474:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003478:	2000      	movs	r0, #0
 800347a:	f7ff ffd9 	bl	8003430 <_Z41__static_initialization_and_destruction_0ii>
 800347e:	bd08      	pop	{r3, pc}

08003480 <_Z41__static_initialization_and_destruction_0ii>:
	}
}

static void triggerSpectrometerSample(void *argument) {
	osThreadFlagsSet(specTaskHandle, GRAB_SAMPLE_BIT);
}
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4604      	mov	r4, r0
 8003484:	460d      	mov	r5, r1
 8003486:	2801      	cmp	r0, #1
 8003488:	d005      	beq.n	8003496 <_Z41__static_initialization_and_destruction_0ii+0x16>
Adafruit_AS7341 specSensor;
 800348a:	b91c      	cbnz	r4, 8003494 <_Z41__static_initialization_and_destruction_0ii+0x14>
 800348c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003490:	429d      	cmp	r5, r3
 8003492:	d008      	beq.n	80034a6 <_Z41__static_initialization_and_destruction_0ii+0x26>
}
 8003494:	bd38      	pop	{r3, r4, r5, pc}
 8003496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349a:	4299      	cmp	r1, r3
 800349c:	d1f5      	bne.n	800348a <_Z41__static_initialization_and_destruction_0ii+0xa>
Adafruit_AS7341 specSensor;
 800349e:	4804      	ldr	r0, [pc, #16]	; (80034b0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80034a0:	f010 fafe 	bl	8013aa0 <_ZN15Adafruit_AS7341C1Ev>
 80034a4:	e7f1      	b.n	800348a <_Z41__static_initialization_and_destruction_0ii+0xa>
 80034a6:	4802      	ldr	r0, [pc, #8]	; (80034b0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80034a8:	f010 fb04 	bl	8013ab4 <_ZN15Adafruit_AS7341D1Ev>
}
 80034ac:	e7f2      	b.n	8003494 <_Z41__static_initialization_and_destruction_0ii+0x14>
 80034ae:	bf00      	nop
 80034b0:	20003a24 	.word	0x20003a24

080034b4 <_GLOBAL__sub_I_periodicSpecTimer_id>:
 80034b4:	b508      	push	{r3, lr}
 80034b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7ff ffe0 	bl	8003480 <_Z41__static_initialization_and_destruction_0ii>
 80034c0:	bd08      	pop	{r3, pc}

080034c2 <_GLOBAL__sub_D_periodicSpecTimer_id>:
 80034c2:	b508      	push	{r3, lr}
 80034c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7ff ffd9 	bl	8003480 <_Z41__static_initialization_and_destruction_0ii>
 80034ce:	bd08      	pop	{r3, pc}

080034d0 <LL_AHB2_GRP1_EnableClock>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_APB1_GRP1_EnableClock>:
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4313      	orrs	r3, r2
 8003518:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800351a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4013      	ands	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_APB2_GRP1_EnableClock>:
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4313      	orrs	r3, r2
 800354a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <MX_SPI1_Init+0x74>)
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <MX_SPI1_Init+0x78>)
 8003570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <MX_SPI1_Init+0x74>)
 8003574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <MX_SPI1_Init+0x74>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <MX_SPI1_Init+0x74>)
 8003582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <MX_SPI1_Init+0x74>)
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <MX_SPI1_Init+0x74>)
 8003590:	2200      	movs	r2, #0
 8003592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <MX_SPI1_Init+0x74>)
 8003596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <MX_SPI1_Init+0x74>)
 800359e:	2208      	movs	r2, #8
 80035a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <MX_SPI1_Init+0x74>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <MX_SPI1_Init+0x74>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <MX_SPI1_Init+0x74>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <MX_SPI1_Init+0x74>)
 80035b6:	2207      	movs	r2, #7
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <MX_SPI1_Init+0x74>)
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <MX_SPI1_Init+0x74>)
 80035c2:	2208      	movs	r2, #8
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035c6:	4805      	ldr	r0, [pc, #20]	; (80035dc <MX_SPI1_Init+0x74>)
 80035c8:	f008 fa04 	bl	800b9d4 <HAL_SPI_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80035d2:	f7ff fb71 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000a02c 	.word	0x2000a02c
 80035e0:	40013000 	.word	0x40013000

080035e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <MX_SPI2_Init+0x74>)
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <MX_SPI2_Init+0x78>)
 80035ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <MX_SPI2_Init+0x74>)
 80035f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <MX_SPI2_Init+0x74>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <MX_SPI2_Init+0x74>)
 80035fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003602:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <MX_SPI2_Init+0x74>)
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <MX_SPI2_Init+0x74>)
 800360c:	2200      	movs	r2, #0
 800360e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <MX_SPI2_Init+0x74>)
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <MX_SPI2_Init+0x74>)
 800361a:	2208      	movs	r2, #8
 800361c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <MX_SPI2_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <MX_SPI2_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <MX_SPI2_Init+0x74>)
 800362c:	2200      	movs	r2, #0
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <MX_SPI2_Init+0x74>)
 8003632:	2207      	movs	r2, #7
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <MX_SPI2_Init+0x74>)
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <MX_SPI2_Init+0x74>)
 800363e:	2208      	movs	r2, #8
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003642:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_SPI2_Init+0x74>)
 8003644:	f008 f9c6 	bl	800b9d4 <HAL_SPI_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800364e:	f7ff fb33 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20009fc8 	.word	0x20009fc8
 800365c:	40003800 	.word	0x40003800

08003660 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_SPI_MspInit+0xcc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d117      	bne.n	80036b2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003682:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003686:	f7ff ff55 	bl	8003534 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	2002      	movs	r0, #2
 800368c:	f7ff ff20 	bl	80034d0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 8003690:	2338      	movs	r3, #56	; 0x38
 8003692:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036a0:	2305      	movs	r3, #5
 80036a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	4619      	mov	r1, r3
 80036aa:	4821      	ldr	r0, [pc, #132]	; (8003730 <HAL_SPI_MspInit+0xd0>)
 80036ac:	f001 fffa 	bl	80056a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80036b0:	e037      	b.n	8003722 <HAL_SPI_MspInit+0xc2>
  else if(spiHandle->Instance==SPI2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_SPI_MspInit+0xd4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d132      	bne.n	8003722 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036c0:	f7ff ff1f 	bl	8003502 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c4:	2008      	movs	r0, #8
 80036c6:	f7ff ff03 	bl	80034d0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	2002      	movs	r0, #2
 80036cc:	f7ff ff00 	bl	80034d0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036d0:	2302      	movs	r3, #2
 80036d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036e0:	2305      	movs	r3, #5
 80036e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	4619      	mov	r1, r3
 80036ea:	4813      	ldr	r0, [pc, #76]	; (8003738 <HAL_SPI_MspInit+0xd8>)
 80036ec:	f001 ffda 	bl	80056a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80036f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80036f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003702:	2305      	movs	r3, #5
 8003704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	4619      	mov	r1, r3
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <HAL_SPI_MspInit+0xd0>)
 800370e:	f001 ffc9 	bl	80056a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2105      	movs	r1, #5
 8003716:	2023      	movs	r0, #35	; 0x23
 8003718:	f001 fd58 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800371c:	2023      	movs	r0, #35	; 0x23
 800371e:	f001 fd6f 	bl	8005200 <HAL_NVIC_EnableIRQ>
}
 8003722:	bf00      	nop
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40013000 	.word	0x40013000
 8003730:	48000400 	.word	0x48000400
 8003734:	40003800 	.word	0x40003800
 8003738:	48000c00 	.word	0x48000c00

0800373c <LL_AHB3_GRP1_EnableClock>:
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800374a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003772:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003776:	f7ff ffe1 	bl	800373c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	210f      	movs	r1, #15
 800377e:	f06f 0001 	mvn.w	r0, #1
 8003782:	f001 fd23 	bl	80051cc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2105      	movs	r1, #5
 800378a:	202e      	movs	r0, #46	; 0x2e
 800378c:	f001 fd1e 	bl	80051cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003790:	202e      	movs	r0, #46	; 0x2e
 8003792:	f001 fd35 	bl	8005200 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}

0800379a <LL_APB2_GRP1_EnableClock>:
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80037dc:	2200      	movs	r2, #0
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	2019      	movs	r0, #25
 80037e2:	f001 fcf3 	bl	80051cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80037e6:	2019      	movs	r0, #25
 80037e8:	f001 fd0a 	bl	8005200 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80037ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80037f0:	f7ff ffd3 	bl	800379a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037f4:	f107 0208 	add.w	r2, r7, #8
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f005 fe3a 	bl	8009478 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003804:	f005 fe22 	bl	800944c <HAL_RCC_GetPCLK2Freq>
 8003808:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_InitTick+0x8c>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0c9b      	lsrs	r3, r3, #18
 8003814:	3b01      	subs	r3, #1
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_InitTick+0x90>)
 800381a:	4a11      	ldr	r2, [pc, #68]	; (8003860 <HAL_InitTick+0x94>)
 800381c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800381e:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_InitTick+0x90>)
 8003820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003824:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_InitTick+0x90>)
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_InitTick+0x90>)
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_InitTick+0x90>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <HAL_InitTick+0x90>)
 800383a:	f008 ff73 	bl	800c724 <HAL_TIM_Base_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003844:	4805      	ldr	r0, [pc, #20]	; (800385c <HAL_InitTick+0x90>)
 8003846:	f008 ffc5 	bl	800c7d4 <HAL_TIM_Base_Start_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	e000      	b.n	8003850 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
}
 8003850:	4618      	mov	r0, r3
 8003852:	3730      	adds	r7, #48	; 0x30
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	431bde83 	.word	0x431bde83
 800385c:	2000a090 	.word	0x2000a090
 8003860:	40012c00 	.word	0x40012c00

08003864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <NMI_Handler+0x4>

0800386a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <HardFault_Handler+0x4>

08003870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <MemManage_Handler+0x4>

08003876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800387a:	e7fe      	b.n	800387a <BusFault_Handler+0x4>

0800387c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <UsageFault_Handler+0x4>

08003882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003894:	2004      	movs	r0, #4
 8003896:	f002 f88d 	bl	80059b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <DMA1_Channel1_IRQHandler+0x10>)
 80038a6:	f001 fdea 	bl	800547e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20009d18 	.word	0x20009d18

080038b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80038b8:	4802      	ldr	r0, [pc, #8]	; (80038c4 <DMA1_Channel2_IRQHandler+0x10>)
 80038ba:	f001 fde0 	bl	800547e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20009ed0 	.word	0x20009ed0

080038c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <USB_LP_IRQHandler+0x10>)
 80038ce:	f003 f836 	bl	800693e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	2000a740 	.word	0x2000a740

080038dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038e0:	4803      	ldr	r0, [pc, #12]	; (80038f0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80038e2:	f009 f887 	bl	800c9f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80038e6:	4803      	ldr	r0, [pc, #12]	; (80038f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80038e8:	f009 f884 	bl	800c9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000a090 	.word	0x2000a090
 80038f4:	2000a178 	.word	0x2000a178

080038f8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a03      	ldr	r2, [pc, #12]	; (8003910 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8003904:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003906:	4803      	ldr	r0, [pc, #12]	; (8003914 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8003908:	f009 f874 	bl	800c9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200025dc 	.word	0x200025dc
 8003914:	2000a0e0 	.word	0x2000a0e0

08003918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <TIM2_IRQHandler+0x10>)
 800391e:	f009 f869 	bl	800c9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	2000a12c 	.word	0x2000a12c

0800392c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <I2C1_EV_IRQHandler+0x10>)
 8003932:	f002 fb39 	bl	8005fa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20009dd0 	.word	0x20009dd0

08003940 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <I2C3_EV_IRQHandler+0x10>)
 8003946:	f002 fb2f 	bl	8005fa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20009d84 	.word	0x20009d84

08003954 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <SPI2_IRQHandler+0x10>)
 800395a:	f008 fc5f 	bl	800c21c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20009fc8 	.word	0x20009fc8

08003968 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800396c:	f015 fe8e 	bl	801968c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}

08003974 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003978:	f015 fec0 	bl	80196fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}

08003980 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003984:	f002 f82e 	bl	80059e4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}

0800398c <LL_SYSCFG_SetRemapMemory>:
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->MEMRMP, SYSCFG_MEMRMP_MEM_MODE, Memory);
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <LL_SYSCFG_SetRemapMemory+0x24>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 0207 	bic.w	r2, r3, #7
 800399c:	4904      	ldr	r1, [pc, #16]	; (80039b0 <LL_SYSCFG_SetRemapMemory+0x24>)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	600b      	str	r3, [r1, #0]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40010000 	.word	0x40010000

080039b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	  //
	  // So I then looked at the default value at address 0x0 and it was 0x20002250
	  //
	  // Note that 0x1fffC800 is "System Memory" start address for STM32 F0xx
	  //
  if ( *((unsigned long *)0x2000020c) == 0xDEADBEEF ) {
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <SystemInit+0xec>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <SystemInit+0xf0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d124      	bne.n	8003a0e <SystemInit+0x5a>
	   *((unsigned long *)0x2000020c) =  0xCAFEFEED; // Reset our trigger
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <SystemInit+0xec>)
 80039c6:	4a38      	ldr	r2, [pc, #224]	; (8003aa8 <SystemInit+0xf4>)
 80039c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ca:	b662      	cpsie	i
}
 80039cc:	bf00      	nop

		__enable_irq();
		HAL_RCC_DeInit();
 80039ce:	f004 ff55 	bl	800887c <HAL_RCC_DeInit>
		HAL_DeInit();
 80039d2:	f000 fbc7 	bl	8004164 <HAL_DeInit>
		SysTick->CTRL = SysTick->LOAD = SysTick->VAL = 0;
 80039d6:	4a35      	ldr	r2, [pc, #212]	; (8003aac <SystemInit+0xf8>)
 80039d8:	2300      	movs	r3, #0
 80039da:	6093      	str	r3, [r2, #8]
 80039dc:	4a33      	ldr	r2, [pc, #204]	; (8003aac <SystemInit+0xf8>)
 80039de:	6053      	str	r3, [r2, #4]
 80039e0:	4a32      	ldr	r2, [pc, #200]	; (8003aac <SystemInit+0xf8>)
 80039e2:	6013      	str	r3, [r2, #0]
		__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7ff ffd1 	bl	800398c <LL_SYSCFG_SetRemapMemory>

	   const uint32_t p = (*((uint32_t *) 0x1FFF0000));
 80039ea:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <SystemInit+0xfc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f383 8808 	msr	MSP, r3
}
 80039fa:	bf00      	nop
	  __set_MSP(p);
	  SysMemBootJump = (void (*)(void)) (*((uint32_t *) 0x1FFF0004)); // Point the PC to the System Memory reset vector (+4)
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <SystemInit+0x100>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <SystemInit+0x104>)
 8003a04:	601a      	str	r2, [r3, #0]
	  SysMemBootJump();
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <SystemInit+0x104>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4798      	blx	r3
	  while (1);
 8003a0c:	e7fe      	b.n	8003a0c <SystemInit+0x58>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <SystemInit+0x108>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	4a29      	ldr	r2, [pc, #164]	; (8003abc <SystemInit+0x108>)
 8003a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003a36:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a42:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <SystemInit+0x10c>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a54:	f023 0305 	bic.w	r3, r3, #5
 8003a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <SystemInit+0x110>)
 8003a76:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <SystemInit+0x110>)
 8003a7e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	2000020c 	.word	0x2000020c
 8003aa4:	deadbeef 	.word	0xdeadbeef
 8003aa8:	cafefeed 	.word	0xcafefeed
 8003aac:	e000e010 	.word	0xe000e010
 8003ab0:	1fff0000 	.word	0x1fff0000
 8003ab4:	1fff0004 	.word	0x1fff0004
 8003ab8:	2000a0dc 	.word	0x2000a0dc
 8003abc:	e000ed00 	.word	0xe000ed00
 8003ac0:	faf6fefb 	.word	0xfaf6fefb
 8003ac4:	22041000 	.word	0x22041000

08003ac8 <_Z41__static_initialization_and_destruction_0ii>:
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
}

static void triggerThermopileSample(void *argument) {
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
}
 8003ac8:	2801      	cmp	r0, #1
 8003aca:	d000      	beq.n	8003ace <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003acc:	4770      	bx	lr
 8003ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad2:	4299      	cmp	r1, r3
 8003ad4:	d1fa      	bne.n	8003acc <_Z41__static_initialization_and_destruction_0ii+0x4>
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6053      	str	r3, [r2, #4]
 8003adc:	7213      	strb	r3, [r2, #8]
 8003ade:	4a07      	ldr	r2, [pc, #28]	; (8003afc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003ae0:	6053      	str	r3, [r2, #4]
 8003ae2:	7213      	strb	r3, [r2, #8]
 8003ae4:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003ae6:	6053      	str	r3, [r2, #4]
 8003ae8:	7213      	strb	r3, [r2, #8]
 8003aea:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003aec:	6053      	str	r3, [r2, #4]
 8003aee:	7213      	strb	r3, [r2, #8]
 8003af0:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003af2:	6053      	str	r3, [r2, #4]
 8003af4:	7213      	strb	r3, [r2, #8]
 8003af6:	e7e9      	b.n	8003acc <_Z41__static_initialization_and_destruction_0ii+0x4>
 8003af8:	20003a70 	.word	0x20003a70
 8003afc:	20003a4c 	.word	0x20003a4c
 8003b00:	20003ab8 	.word	0x20003ab8
 8003b04:	20003adc 	.word	0x20003adc
 8003b08:	20003a94 	.word	0x20003a94

08003b0c <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 8003b0c:	b508      	push	{r3, lr}
 8003b0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b12:	2001      	movs	r0, #1
 8003b14:	f7ff ffd8 	bl	8003ac8 <_Z41__static_initialization_and_destruction_0ii>
 8003b18:	bd08      	pop	{r3, pc}

08003b1a <LL_AHB2_GRP1_EnableClock>:
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_APB1_GRP1_EnableClock>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b70:	68fb      	ldr	r3, [r7, #12]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_APB2_GRP1_EnableClock>:
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	609a      	str	r2, [r3, #8]
 8003bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	615a      	str	r2, [r3, #20]
 8003be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003bec:	f240 623f 	movw	r2, #1599	; 0x63f
 8003bf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf2:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8003bf8:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003bfa:	2213      	movs	r2, #19
 8003bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c04:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c0a:	4822      	ldr	r0, [pc, #136]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c0c:	f008 fd8a 	bl	800c724 <HAL_TIM_Base_Init>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c16:	f7ff f84f 	bl	8002cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c24:	4619      	mov	r1, r3
 8003c26:	481b      	ldr	r0, [pc, #108]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c28:	f009 f992 	bl	800cf50 <HAL_TIM_ConfigClockSource>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003c32:	f7ff f841 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003c36:	4817      	ldr	r0, [pc, #92]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c38:	f008 fe1a 	bl	800c870 <HAL_TIM_OC_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003c42:	f7ff f839 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c46:	2320      	movs	r3, #32
 8003c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4619      	mov	r1, r3
 8003c54:	480f      	ldr	r0, [pc, #60]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c56:	f009 fde1 	bl	800d81c <HAL_TIMEx_MasterConfigSynchronization>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c60:	f7ff f82a 	bl	8002cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c64:	2300      	movs	r3, #0
 8003c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c74:	463b      	mov	r3, r7
 8003c76:	220c      	movs	r2, #12
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4806      	ldr	r0, [pc, #24]	; (8003c94 <MX_TIM2_Init+0xe4>)
 8003c7c:	f008 ffda 	bl	800cc34 <HAL_TIM_OC_ConfigChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003c86:	f7ff f817 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c8a:	bf00      	nop
 8003c8c:	3738      	adds	r7, #56	; 0x38
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2000a12c 	.word	0x2000a12c

08003c98 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b094      	sub	sp, #80	; 0x50
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	615a      	str	r2, [r3, #20]
 8003cb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	2234      	movs	r2, #52	; 0x34
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f016 fb41 	bl	801a340 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cc0:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <MX_TIM16_Init+0xf0>)
 8003cc2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1599;
 8003cc4:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cc6:	f240 623f 	movw	r2, #1599	; 0x63f
 8003cca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cd4:	2263      	movs	r2, #99	; 0x63
 8003cd6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003cea:	4826      	ldr	r0, [pc, #152]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cec:	f008 fd1a 	bl	800c724 <HAL_TIM_Base_Init>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8003cf6:	f7fe ffdf 	bl	8002cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003cfa:	4822      	ldr	r0, [pc, #136]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003cfc:	f008 fe19 	bl	800c932 <HAL_TIM_PWM_Init>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8003d06:	f7fe ffd7 	bl	8002cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d0a:	2360      	movs	r3, #96	; 0x60
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 50;
 8003d0e:	2332      	movs	r3, #50	; 0x32
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d12:	2300      	movs	r3, #0
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d16:	2300      	movs	r3, #0
 8003d18:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4815      	ldr	r0, [pc, #84]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003d30:	f008 fffa 	bl	800cd28 <HAL_TIM_PWM_ConfigChannel>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8003d3a:	f7fe ffbd 	bl	8002cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003d60:	463b      	mov	r3, r7
 8003d62:	4619      	mov	r1, r3
 8003d64:	4807      	ldr	r0, [pc, #28]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003d66:	f009 fdb9 	bl	800d8dc <HAL_TIMEx_ConfigBreakDeadTime>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8003d70:	f7fe ffa2 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003d74:	4803      	ldr	r0, [pc, #12]	; (8003d84 <MX_TIM16_Init+0xec>)
 8003d76:	f000 f86f 	bl	8003e58 <HAL_TIM_MspPostInit>

}
 8003d7a:	bf00      	nop
 8003d7c:	3750      	adds	r7, #80	; 0x50
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000a178 	.word	0x2000a178
 8003d88:	40014400 	.word	0x40014400

08003d8c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003d92:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <MX_TIM17_Init+0x48>)
 8003d94:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 159;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003da4:	229f      	movs	r2, #159	; 0x9f
 8003da6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003dba:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <MX_TIM17_Init+0x44>)
 8003dbc:	f008 fcb2 	bl	800c724 <HAL_TIM_Base_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003dc6:	f7fe ff77 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	2000a0e0 	.word	0x2000a0e0
 8003dd4:	40014800 	.word	0x40014800

08003dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d10b      	bne.n	8003e02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7ff feae 	bl	8003b4c <LL_APB1_GRP1_EnableClock>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003df0:	2200      	movs	r2, #0
 8003df2:	2105      	movs	r1, #5
 8003df4:	201c      	movs	r0, #28
 8003df6:	f001 f9e9 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dfa:	201c      	movs	r0, #28
 8003dfc:	f001 fa00 	bl	8005200 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003e00:	e022      	b.n	8003e48 <HAL_TIM_Base_MspInit+0x70>
  else if(tim_baseHandle->Instance==TIM16)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <HAL_TIM_Base_MspInit+0x78>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10c      	bne.n	8003e26 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003e0c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003e10:	f7ff feb5 	bl	8003b7e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	210f      	movs	r1, #15
 8003e18:	2019      	movs	r0, #25
 8003e1a:	f001 f9d7 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e1e:	2019      	movs	r0, #25
 8003e20:	f001 f9ee 	bl	8005200 <HAL_NVIC_EnableIRQ>
}
 8003e24:	e010      	b.n	8003e48 <HAL_TIM_Base_MspInit+0x70>
  else if(tim_baseHandle->Instance==TIM17)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_TIM_Base_MspInit+0x7c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10b      	bne.n	8003e48 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003e30:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003e34:	f7ff fea3 	bl	8003b7e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2105      	movs	r1, #5
 8003e3c:	201a      	movs	r0, #26
 8003e3e:	f001 f9c5 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003e42:	201a      	movs	r0, #26
 8003e44:	f001 f9dc 	bl	8005200 <HAL_NVIC_EnableIRQ>
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800

08003e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	f107 030c 	add.w	r3, r7, #12
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <HAL_TIM_MspPostInit+0x54>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d113      	bne.n	8003ea2 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7ff fe4d 	bl	8003b1a <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 8003e80:	2340      	movs	r3, #64	; 0x40
 8003e82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003e90:	230e      	movs	r3, #14
 8003e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 8003e94:	f107 030c 	add.w	r3, r7, #12
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e9e:	f001 fc01 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003ea2:	bf00      	nop
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40014400 	.word	0x40014400

08003eb0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003eb0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb4:	3304      	adds	r3, #4

08003eb6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003eba:	d3f9      	bcc.n	8003eb0 <CopyDataInit>
  bx lr
 8003ebc:	4770      	bx	lr

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003ebe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003ec0:	3004      	adds	r0, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003ec2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>
  bx lr
 8003ec6:	4770      	bx	lr

08003ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8003ec8:	480c      	ldr	r0, [pc, #48]	; (8003efc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003eca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ecc:	f7ff fd72 	bl	80039b4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003ed0:	480b      	ldr	r0, [pc, #44]	; (8003f00 <LoopForever+0x8>)
 8003ed2:	490c      	ldr	r1, [pc, #48]	; (8003f04 <LoopForever+0xc>)
 8003ed4:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <LoopForever+0x10>)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f7ff ffed 	bl	8003eb6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003edc:	480b      	ldr	r0, [pc, #44]	; (8003f0c <LoopForever+0x14>)
 8003ede:	490c      	ldr	r1, [pc, #48]	; (8003f10 <LoopForever+0x18>)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f7ff ffee 	bl	8003ec2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003ee6:	480b      	ldr	r0, [pc, #44]	; (8003f14 <LoopForever+0x1c>)
 8003ee8:	490b      	ldr	r1, [pc, #44]	; (8003f18 <LoopForever+0x20>)
 8003eea:	2300      	movs	r3, #0
 8003eec:	f7ff ffe9 	bl	8003ec2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ef0:	f016 f9f2 	bl	801a2d8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003ef4:	f7fe ff74 	bl	8002de0 <main>

08003ef8 <LoopForever>:

LoopForever:
  b LoopForever
 8003ef8:	e7fe      	b.n	8003ef8 <LoopForever>
 8003efa:	0000      	.short	0x0000
Reset_Handler:  ldr   r0, =_estack
 8003efc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003f00:	20000004 	.word	0x20000004
 8003f04:	2000016c 	.word	0x2000016c
 8003f08:	0801abec 	.word	0x0801abec
  INIT_BSS _sbss, _ebss
 8003f0c:	200002e8 	.word	0x200002e8
 8003f10:	2000aa40 	.word	0x2000aa40
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003f14:	200301e0 	.word	0x200301e0
 8003f18:	20030a57 	.word	0x20030a57

08003f1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f1c:	e7fe      	b.n	8003f1c <ADC1_IRQHandler>

08003f1e <LL_AHB1_GRP1_ForceReset>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_AHB1_GRP1_ReleaseReset>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f58:	4013      	ands	r3, r2
 8003f5a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_AHB2_GRP1_ForceReset>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_AHB2_GRP1_ReleaseReset>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_AHB3_GRP1_ForceReset>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_AHB3_GRP1_ReleaseReset>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fec:	4013      	ands	r3, r2
 8003fee:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_APB1_GRP1_ForceReset>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_APB1_GRP2_ForceReset>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4313      	orrs	r3, r2
 8004036:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_APB1_GRP1_ReleaseReset>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	43db      	mvns	r3, r3
 8004056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405a:	4013      	ands	r3, r2
 800405c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_APB1_GRP2_ReleaseReset>:
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	43db      	mvns	r3, r3
 800407c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004080:	4013      	ands	r3, r2
 8004082:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80040bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ca:	4013      	ands	r3, r2
 80040cc:	640b      	str	r3, [r1, #64]	; 0x40
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	43db      	mvns	r3, r3
 8004110:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004114:	4013      	ands	r3, r2
 8004116:	644b      	str	r3, [r1, #68]	; 0x44
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_Init+0x3c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <HAL_Init+0x3c>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800413a:	2003      	movs	r0, #3
 800413c:	f001 f83b 	bl	80051b6 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004140:	200f      	movs	r0, #15
 8004142:	f7ff fb43 	bl	80037cc <HAL_InitTick>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	e001      	b.n	8004156 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004152:	f7ff fb0c 	bl	800376e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004156:	79fb      	ldrb	r3, [r7, #7]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	58004000 	.word	0x58004000

08004164 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8004168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800416c:	f7ff ff46 	bl	8003ffc <LL_APB1_GRP1_ForceReset>
 8004170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004174:	f7ff ff54 	bl	8004020 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_APB1_RELEASE_RESET();
 8004178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800417c:	f7ff ff62 	bl	8004044 <LL_APB1_GRP1_ReleaseReset>
 8004180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004184:	f7ff ff71 	bl	800406a <LL_APB1_GRP2_ReleaseReset>

  __HAL_RCC_APB2_FORCE_RESET();
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418c:	f7ff ff80 	bl	8004090 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_APB2_RELEASE_RESET();
 8004190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004194:	f7ff ff8e 	bl	80040b4 <LL_APB2_GRP1_ReleaseReset>

  __HAL_RCC_APB3_FORCE_RESET();
 8004198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800419c:	f7ff ff9d 	bl	80040da <LL_APB3_GRP1_ForceReset>
  __HAL_RCC_APB3_RELEASE_RESET();
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a4:	f7ff ffab 	bl	80040fe <LL_APB3_GRP1_ReleaseReset>
  
  __HAL_RCC_AHB1_FORCE_RESET();
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ac:	f7ff feb7 	bl	8003f1e <LL_AHB1_GRP1_ForceReset>
  __HAL_RCC_AHB1_RELEASE_RESET();
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041b4:	f7ff fec5 	bl	8003f42 <LL_AHB1_GRP1_ReleaseReset>

  __HAL_RCC_AHB2_FORCE_RESET();
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041bc:	f7ff fed4 	bl	8003f68 <LL_AHB2_GRP1_ForceReset>
  __HAL_RCC_AHB2_RELEASE_RESET();
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c4:	f7ff fee2 	bl	8003f8c <LL_AHB2_GRP1_ReleaseReset>

  __HAL_RCC_AHB3_FORCE_RESET();
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041cc:	f7ff fef1 	bl	8003fb2 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_AHB3_RELEASE_RESET();
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d4:	f7ff feff 	bl	8003fd6 <LL_AHB3_GRP1_ReleaseReset>

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80041d8:	f000 f803 	bl	80041e2 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{     
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_IncTick+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x24>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_IncTick+0x24>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000018 	.word	0x20000018
 8004214:	2000a1c4 	.word	0x2000a1c4

08004218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return uwTick;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_GetTick+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	2000a1c4 	.word	0x2000a1c4

08004230 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_GetTickPrio+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000014 	.word	0x20000014

08004248 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_GetTickFreq+0x14>)
 800424e:	781b      	ldrb	r3, [r3, #0]
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000018 	.word	0x20000018

08004260 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3360      	adds	r3, #96	; 0x60
 80042da:	461a      	mov	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <LL_ADC_SetOffset+0x44>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	03fff000 	.word	0x03fff000

08004310 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3360      	adds	r3, #96	; 0x60
 800431e:	461a      	mov	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3360      	adds	r3, #96	; 0x60
 800434c:	461a      	mov	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	431a      	orrs	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004372:	b480      	push	{r7}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3330      	adds	r3, #48	; 0x30
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	4413      	add	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	211f      	movs	r1, #31
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	401a      	ands	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0e9b      	lsrs	r3, r3, #26
 80043aa:	f003 011f 	and.w	r1, r3, #31
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	431a      	orrs	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b087      	sub	sp, #28
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3314      	adds	r3, #20
 80043da:	461a      	mov	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	0e5b      	lsrs	r3, r3, #25
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	4413      	add	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2107      	movs	r1, #7
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	401a      	ands	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	0d1b      	lsrs	r3, r3, #20
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	431a      	orrs	r2, r3
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f003 0318 	and.w	r3, r3, #24
 8004442:	4908      	ldr	r1, [pc, #32]	; (8004464 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004444:	40d9      	lsrs	r1, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	400b      	ands	r3, r1
 800444a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444e:	431a      	orrs	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	0007ffff 	.word	0x0007ffff

08004468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6093      	str	r3, [r2, #8]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800449c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a0:	d101      	bne.n	80044a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80044c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <LL_ADC_IsEnabled+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_ADC_IsEnabled+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b04      	cmp	r3, #4
 800453c:	d101      	bne.n	8004542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d101      	bne.n	8004568 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e12e      	b.n	80047f4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fc fc0d 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff65 	bl	800448c <LL_ADC_IsDeepPowerDownEnabled>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff4b 	bl	8004468 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff80 	bl	80044dc <LL_ADC_IsInternalRegulatorEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d115      	bne.n	800460e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff64 	bl	80044b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ec:	4b83      	ldr	r3, [pc, #524]	; (80047fc <HAL_ADC_Init+0x284>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	4a83      	ldr	r2, [pc, #524]	; (8004800 <HAL_ADC_Init+0x288>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	3301      	adds	r3, #1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004600:	e002      	b.n	8004608 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3b01      	subs	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f9      	bne.n	8004602 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff ff62 	bl	80044dc <LL_ADC_IsInternalRegulatorEnabled>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff73 	bl	800452a <LL_ADC_REG_IsConversionOngoing>
 8004644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 80c7 	bne.w	80047e2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 80c3 	bne.w	80047e2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004664:	f043 0202 	orr.w	r2, r3, #2
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff47 	bl	8004504 <LL_ADC_IsEnabled>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800467c:	4861      	ldr	r0, [pc, #388]	; (8004804 <HAL_ADC_Init+0x28c>)
 800467e:	f7ff ff41 	bl	8004504 <LL_ADC_IsEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4619      	mov	r1, r3
 800468e:	485e      	ldr	r0, [pc, #376]	; (8004808 <HAL_ADC_Init+0x290>)
 8004690:	f7ff fde6 	bl	8004260 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7e5b      	ldrb	r3, [r3, #25]
 8004698:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800469e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80046a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80046aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80046b4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d106      	bne.n	80046d4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	3b01      	subs	r3, #1
 80046cc:	045b      	lsls	r3, r3, #17
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4b45      	ldr	r3, [pc, #276]	; (800480c <HAL_ADC_Init+0x294>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	430b      	orrs	r3, r1
 8004702:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff0e 	bl	800452a <LL_ADC_REG_IsConversionOngoing>
 800470e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff1b 	bl	8004550 <LL_ADC_INJ_IsConversionOngoing>
 800471a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d13d      	bne.n	800479e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d13a      	bne.n	800479e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800472c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004734:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004744:	f023 0302 	bic.w	r3, r3, #2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	69b9      	ldr	r1, [r7, #24]
 800474e:	430b      	orrs	r3, r1
 8004750:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004758:	2b01      	cmp	r3, #1
 800475a:	d118      	bne.n	800478e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004766:	f023 0304 	bic.w	r3, r3, #4
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800477e:	430a      	orrs	r2, r1
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	611a      	str	r2, [r3, #16]
 800478c:	e007      	b.n	800479e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10c      	bne.n	80047c0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	f023 010f 	bic.w	r1, r3, #15
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	1e5a      	subs	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
 80047be:	e007      	b.n	80047d0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 020f 	bic.w	r2, r2, #15
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
 80047e0:	e007      	b.n	80047f2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000010 	.word	0x20000010
 8004800:	053e2d63 	.word	0x053e2d63
 8004804:	50040000 	.word	0x50040000
 8004808:	50040300 	.word	0x50040300
 800480c:	fff0c007 	.word	0xfff0c007

08004810 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b0b6      	sub	sp, #216	; 0xd8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x22>
 800482e:	2302      	movs	r3, #2
 8004830:	e39f      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x762>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fe73 	bl	800452a <LL_ADC_REG_IsConversionOngoing>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8384 	bne.w	8004f54 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	f7ff fd8a 	bl	8004372 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fe61 	bl	800452a <LL_ADC_REG_IsConversionOngoing>
 8004868:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff fe6d 	bl	8004550 <LL_ADC_INJ_IsConversionOngoing>
 8004876:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800487a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 81a6 	bne.w	8004bd0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 81a1 	bne.w	8004bd0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	461a      	mov	r2, r3
 800489c:	f7ff fd95 	bl	80043ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	08db      	lsrs	r3, r3, #3
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00a      	beq.n	80048d8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6919      	ldr	r1, [r3, #16]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048d2:	f7ff fcf9 	bl	80042c8 <LL_ADC_SetOffset>
 80048d6:	e17b      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fd16 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <HAL_ADC_ConfigChannel+0xf4>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fd0b 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80048fa:	4603      	mov	r3, r0
 80048fc:	0e9b      	lsrs	r3, r3, #26
 80048fe:	f003 021f 	and.w	r2, r3, #31
 8004902:	e01e      	b.n	8004942 <HAL_ADC_ConfigChannel+0x132>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fd00 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004910:	4603      	mov	r3, r0
 8004912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800492a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8004932:	2320      	movs	r3, #32
 8004934:	e004      	b.n	8004940 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8004936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494a:	2b00      	cmp	r3, #0
 800494c:	d105      	bne.n	800495a <HAL_ADC_ConfigChannel+0x14a>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	0e9b      	lsrs	r3, r3, #26
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	e018      	b.n	800498c <HAL_ADC_ConfigChannel+0x17c>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800496e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800497e:	2320      	movs	r3, #32
 8004980:	e004      	b.n	800498c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8004982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	429a      	cmp	r2, r3
 800498e:	d106      	bne.n	800499e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2200      	movs	r2, #0
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fccf 	bl	800433c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fcb3 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x1ba>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2101      	movs	r1, #1
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fca8 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80049c0:	4603      	mov	r3, r0
 80049c2:	0e9b      	lsrs	r3, r3, #26
 80049c4:	f003 021f 	and.w	r2, r3, #31
 80049c8:	e01e      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x1f8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fc9d 	bl	8004310 <LL_ADC_GetOffsetChannel>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80049e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80049f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e004      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80049fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a00:	fab3 f383 	clz	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x210>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e9b      	lsrs	r3, r3, #26
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	e018      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x242>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e004      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8004a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d106      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fc6c 	bl	800433c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2102      	movs	r1, #2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fc50 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x280>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fc45 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004a86:	4603      	mov	r3, r0
 8004a88:	0e9b      	lsrs	r3, r3, #26
 8004a8a:	f003 021f 	and.w	r2, r3, #31
 8004a8e:	e01e      	b.n	8004ace <HAL_ADC_ConfigChannel+0x2be>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2102      	movs	r1, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fc3a 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8004abe:	2320      	movs	r3, #32
 8004ac0:	e004      	b.n	8004acc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ac6:	fab3 f383 	clz	r3, r3
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x2d6>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	0e9b      	lsrs	r3, r3, #26
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	e016      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x304>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004afa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8004b06:	2320      	movs	r3, #32
 8004b08:	e004      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8004b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d106      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fc0b 	bl	800433c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2103      	movs	r1, #3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fbef 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x342>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2103      	movs	r1, #3
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fbe4 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	0e9b      	lsrs	r3, r3, #26
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	e017      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x372>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2103      	movs	r1, #3
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fbd9 	bl	8004310 <LL_ADC_GetOffsetChannel>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b6c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8004b74:	2320      	movs	r3, #32
 8004b76:	e003      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8004b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d105      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x38a>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	0e9b      	lsrs	r3, r3, #26
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	e011      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x3ae>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004baa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e003      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8004bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d106      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2103      	movs	r1, #3
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fbb6 	bl	800433c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fc95 	bl	8004504 <LL_ADC_IsEnabled>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 81c2 	bne.w	8004f66 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6819      	ldr	r1, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f7ff fc16 	bl	8004420 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a8e      	ldr	r2, [pc, #568]	; (8004e34 <HAL_ADC_ConfigChannel+0x624>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f040 8130 	bne.w	8004e60 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x418>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	0e9b      	lsrs	r3, r3, #26
 8004c16:	3301      	adds	r3, #1
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2b09      	cmp	r3, #9
 8004c1e:	bf94      	ite	ls
 8004c20:	2301      	movls	r3, #1
 8004c22:	2300      	movhi	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e019      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x44c>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c30:	fa93 f3a3 	rbit	r3, r3
 8004c34:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c38:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004c40:	2320      	movs	r3, #32
 8004c42:	e003      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	bf94      	ite	ls
 8004c56:	2301      	movls	r3, #1
 8004c58:	2300      	movhi	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d079      	beq.n	8004d54 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x46c>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0e9b      	lsrs	r3, r3, #26
 8004c72:	3301      	adds	r3, #1
 8004c74:	069b      	lsls	r3, r3, #26
 8004c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c7a:	e015      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x498>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c84:	fa93 f3a3 	rbit	r3, r3
 8004c88:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004c94:	2320      	movs	r3, #32
 8004c96:	e003      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	069b      	lsls	r3, r3, #26
 8004ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x4b8>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0e9b      	lsrs	r3, r3, #26
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	e017      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x4e8>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd0:	fa93 f3a3 	rbit	r3, r3
 8004cd4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	e003      	b.n	8004cec <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	ea42 0103 	orr.w	r1, r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x50e>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0e9b      	lsrs	r3, r3, #26
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f003 021f 	and.w	r2, r3, #31
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	051b      	lsls	r3, r3, #20
 8004d1c:	e018      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x540>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e003      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3c:	fab3 f383 	clz	r3, r3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f003 021f 	and.w	r2, r3, #31
 8004d48:	4613      	mov	r3, r2
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4413      	add	r3, r2
 8004d4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d50:	430b      	orrs	r3, r1
 8004d52:	e080      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x560>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0e9b      	lsrs	r3, r3, #26
 8004d66:	3301      	adds	r3, #1
 8004d68:	069b      	lsls	r3, r3, #26
 8004d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d6e:	e015      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x58c>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e003      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	3301      	adds	r3, #1
 8004d96:	069b      	lsls	r3, r3, #26
 8004d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x5ac>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	3301      	adds	r3, #1
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	e017      	b.n	8004dec <HAL_ADC_ConfigChannel+0x5dc>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	61fb      	str	r3, [r7, #28]
  return result;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	e003      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3301      	adds	r3, #1
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2101      	movs	r1, #1
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	ea42 0103 	orr.w	r1, r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x608>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	0e9b      	lsrs	r3, r3, #26
 8004e02:	3301      	adds	r3, #1
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	4613      	mov	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3b1e      	subs	r3, #30
 8004e10:	051b      	lsls	r3, r3, #20
 8004e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e16:	e01d      	b.n	8004e54 <HAL_ADC_ConfigChannel+0x644>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	613b      	str	r3, [r7, #16]
  return result;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004e30:	2320      	movs	r3, #32
 8004e32:	e005      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x630>
 8004e34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	3301      	adds	r3, #1
 8004e42:	f003 021f 	and.w	r2, r3, #31
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b1e      	subs	r3, #30
 8004e4e:	051b      	lsls	r3, r3, #20
 8004e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e54:	430b      	orrs	r3, r1
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f7ff fab5 	bl	80043ca <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <HAL_ADC_ConfigChannel+0x76c>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d07c      	beq.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e6c:	4844      	ldr	r0, [pc, #272]	; (8004f80 <HAL_ADC_ConfigChannel+0x770>)
 8004e6e:	f7ff fa1d 	bl	80042ac <LL_ADC_GetCommonPathInternalCh>
 8004e72:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e76:	4843      	ldr	r0, [pc, #268]	; (8004f84 <HAL_ADC_ConfigChannel+0x774>)
 8004e78:	f7ff fb44 	bl	8004504 <LL_ADC_IsEnabled>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d15e      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a40      	ldr	r2, [pc, #256]	; (8004f88 <HAL_ADC_ConfigChannel+0x778>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d127      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x6cc>
 8004e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d121      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <HAL_ADC_ConfigChannel+0x774>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d161      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4834      	ldr	r0, [pc, #208]	; (8004f80 <HAL_ADC_ConfigChannel+0x770>)
 8004eae:	f7ff f9ea 	bl	8004286 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eb2:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <HAL_ADC_ConfigChannel+0x77c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	4a35      	ldr	r2, [pc, #212]	; (8004f90 <HAL_ADC_ConfigChannel+0x780>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004ecc:	e002      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f9      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004eda:	e044      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <HAL_ADC_ConfigChannel+0x784>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d113      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x6fe>
 8004ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10d      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <HAL_ADC_ConfigChannel+0x774>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d134      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004efc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f04:	4619      	mov	r1, r3
 8004f06:	481e      	ldr	r0, [pc, #120]	; (8004f80 <HAL_ADC_ConfigChannel+0x770>)
 8004f08:	f7ff f9bd 	bl	8004286 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f0c:	e02b      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a21      	ldr	r2, [pc, #132]	; (8004f98 <HAL_ADC_ConfigChannel+0x788>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d126      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
 8004f18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d120      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_ADC_ConfigChannel+0x774>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d11b      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004f2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f36:	4619      	mov	r1, r3
 8004f38:	4811      	ldr	r0, [pc, #68]	; (8004f80 <HAL_ADC_ConfigChannel+0x770>)
 8004f3a:	f7ff f9a4 	bl	8004286 <LL_ADC_SetCommonPathInternalCh>
 8004f3e:	e012      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004f52:	e008      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004f6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	37d8      	adds	r7, #216	; 0xd8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	80080000 	.word	0x80080000
 8004f80:	50040300 	.word	0x50040300
 8004f84:	50040000 	.word	0x50040000
 8004f88:	c7520000 	.word	0xc7520000
 8004f8c:	20000010 	.word	0x20000010
 8004f90:	053e2d63 	.word	0x053e2d63
 8004f94:	cb840000 	.word	0xcb840000
 8004f98:	80000001 	.word	0x80000001

08004f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fce:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	60d3      	str	r3, [r2, #12]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <__NVIC_GetPriorityGrouping+0x18>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	f003 0307 	and.w	r3, r3, #7
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500e:	2b00      	cmp	r3, #0
 8005010:	db0b      	blt.n	800502a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	f003 021f 	and.w	r2, r3, #31
 8005018:	4907      	ldr	r1, [pc, #28]	; (8005038 <__NVIC_EnableIRQ+0x38>)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	2001      	movs	r0, #1
 8005022:	fa00 f202 	lsl.w	r2, r0, r2
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	e000e100 	.word	0xe000e100

0800503c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db12      	blt.n	8005074 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	490a      	ldr	r1, [pc, #40]	; (8005080 <__NVIC_DisableIRQ+0x44>)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2001      	movs	r0, #1
 800505e:	fa00 f202 	lsl.w	r2, r0, r2
 8005062:	3320      	adds	r3, #32
 8005064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005068:	f3bf 8f4f 	dsb	sy
}
 800506c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800506e:	f3bf 8f6f 	isb	sy
}
 8005072:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000e100 	.word	0xe000e100

08005084 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	2b00      	cmp	r3, #0
 8005094:	db0c      	blt.n	80050b0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	f003 021f 	and.w	r2, r3, #31
 800509c:	4907      	ldr	r1, [pc, #28]	; (80050bc <__NVIC_SetPendingIRQ+0x38>)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2001      	movs	r0, #1
 80050a6:	fa00 f202 	lsl.w	r2, r0, r2
 80050aa:	3340      	adds	r3, #64	; 0x40
 80050ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000e100 	.word	0xe000e100

080050c0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	db0c      	blt.n	80050ec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	f003 021f 	and.w	r2, r3, #31
 80050d8:	4907      	ldr	r1, [pc, #28]	; (80050f8 <__NVIC_ClearPendingIRQ+0x38>)
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	2001      	movs	r0, #1
 80050e2:	fa00 f202 	lsl.w	r2, r0, r2
 80050e6:	3360      	adds	r3, #96	; 0x60
 80050e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100

080050fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	6039      	str	r1, [r7, #0]
 8005106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510c:	2b00      	cmp	r3, #0
 800510e:	db0a      	blt.n	8005126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	490c      	ldr	r1, [pc, #48]	; (8005148 <__NVIC_SetPriority+0x4c>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	440b      	add	r3, r1
 8005120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005124:	e00a      	b.n	800513c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	4908      	ldr	r1, [pc, #32]	; (800514c <__NVIC_SetPriority+0x50>)
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	3b04      	subs	r3, #4
 8005134:	0112      	lsls	r2, r2, #4
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	440b      	add	r3, r1
 800513a:	761a      	strb	r2, [r3, #24]
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	e000e100 	.word	0xe000e100
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f1c3 0307 	rsb	r3, r3, #7
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf28      	it	cs
 800516e:	2304      	movcs	r3, #4
 8005170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3304      	adds	r3, #4
 8005176:	2b06      	cmp	r3, #6
 8005178:	d902      	bls.n	8005180 <NVIC_EncodePriority+0x30>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3b03      	subs	r3, #3
 800517e:	e000      	b.n	8005182 <NVIC_EncodePriority+0x32>
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43da      	mvns	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	401a      	ands	r2, r3
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	fa01 f303 	lsl.w	r3, r1, r3
 80051a2:	43d9      	mvns	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a8:	4313      	orrs	r3, r2
         );
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3724      	adds	r7, #36	; 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff feec 	bl	8004f9c <__NVIC_SetPriorityGrouping>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051da:	f7ff ff03 	bl	8004fe4 <__NVIC_GetPriorityGrouping>
 80051de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	6978      	ldr	r0, [r7, #20]
 80051e6:	f7ff ffb3 	bl	8005150 <NVIC_EncodePriority>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff ff82 	bl	80050fc <__NVIC_SetPriority>
}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800520a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fef6 	bl	8005000 <__NVIC_EnableIRQ>
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff06 	bl	800503c <__NVIC_DisableIRQ>
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff1c 	bl	8005084 <__NVIC_SetPendingIRQ>
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff2c 	bl	80050c0 <__NVIC_ClearPendingIRQ>
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e08e      	b.n	80053a0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_DMA_Init+0x138>)
 800528a:	429a      	cmp	r2, r3
 800528c:	d80f      	bhi.n	80052ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	4b45      	ldr	r3, [pc, #276]	; (80053ac <HAL_DMA_Init+0x13c>)
 8005296:	4413      	add	r3, r2
 8005298:	4a45      	ldr	r2, [pc, #276]	; (80053b0 <HAL_DMA_Init+0x140>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	009a      	lsls	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <HAL_DMA_Init+0x144>)
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
 80052ac:	e00e      	b.n	80052cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b40      	ldr	r3, [pc, #256]	; (80053b8 <HAL_DMA_Init+0x148>)
 80052b6:	4413      	add	r3, r2
 80052b8:	4a3d      	ldr	r2, [pc, #244]	; (80053b0 <HAL_DMA_Init+0x140>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	009a      	lsls	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a3c      	ldr	r2, [pc, #240]	; (80053bc <HAL_DMA_Init+0x14c>)
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f95c 	bl	80055dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532c:	d102      	bne.n	8005334 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005340:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800534a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d010      	beq.n	8005376 <HAL_DMA_Init+0x106>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d80c      	bhi.n	8005376 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f97b 	bl	8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	e008      	b.n	8005388 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40020407 	.word	0x40020407
 80053ac:	bffdfff8 	.word	0xbffdfff8
 80053b0:	cccccccd 	.word	0xcccccccd
 80053b4:	40020000 	.word	0x40020000
 80053b8:	bffdfbf8 	.word	0xbffdfbf8
 80053bc:	40020400 	.word	0x40020400

080053c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d005      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2204      	movs	r2, #4
 80053dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	e047      	b.n	8005474 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 020e 	bic.w	r2, r2, #14
 80053f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	f003 021c 	and.w	r2, r3, #28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f202 	lsl.w	r2, r1, r2
 8005426:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005430:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005448:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005452:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	4798      	blx	r3
    }
  }
  return status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f003 031c 	and.w	r3, r3, #28
 800549e:	2204      	movs	r2, #4
 80054a0:	409a      	lsls	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d026      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x7a>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d021      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0204 	bic.w	r2, r2, #4
 80054d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	f003 021c 	and.w	r2, r3, #28
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2104      	movs	r1, #4
 80054e0:	fa01 f202 	lsl.w	r2, r1, r2
 80054e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d071      	beq.n	80055d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054f6:	e06c      	b.n	80055d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fc:	f003 031c 	and.w	r3, r3, #28
 8005500:	2202      	movs	r2, #2
 8005502:	409a      	lsls	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d02e      	beq.n	800556a <HAL_DMA_IRQHandler+0xec>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d029      	beq.n	800556a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10b      	bne.n	800553c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 020a 	bic.w	r2, r2, #10
 8005532:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	f003 021c 	and.w	r2, r3, #28
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	2102      	movs	r1, #2
 800554a:	fa01 f202 	lsl.w	r2, r1, r2
 800554e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d038      	beq.n	80055d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005568:	e033      	b.n	80055d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	f003 031c 	and.w	r3, r3, #28
 8005572:	2208      	movs	r2, #8
 8005574:	409a      	lsls	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02a      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x156>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d025      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 020e 	bic.w	r2, r2, #14
 8005596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559c:	f003 021c 	and.w	r2, r3, #28
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f202 	lsl.w	r2, r1, r2
 80055aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
}
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b17      	ldr	r3, [pc, #92]	; (8005648 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d80a      	bhi.n	8005606 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055fc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6493      	str	r3, [r2, #72]	; 0x48
 8005604:	e007      	b.n	8005616 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	089b      	lsrs	r3, r3, #2
 800560c:	009a      	lsls	r2, r3, #2
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005610:	4413      	add	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	3b08      	subs	r3, #8
 800561e:	4a0c      	ldr	r2, [pc, #48]	; (8005650 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800562c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2201      	movs	r2, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40020407 	.word	0x40020407
 800564c:	4002081c 	.word	0x4002081c
 8005650:	cccccccd 	.word	0xcccccccd
 8005654:	40020880 	.word	0x40020880

08005658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005668:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	461a      	mov	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800567c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3b01      	subs	r3, #1
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2201      	movs	r2, #1
 8005688:	409a      	lsls	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	1000823f 	.word	0x1000823f
 80056a0:	40020940 	.word	0x40020940

080056a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b2:	e14c      	b.n	800594e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	2101      	movs	r1, #1
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	4013      	ands	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 813e 	beq.w	8005948 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d005      	beq.n	80056e4 <HAL_GPIO_Init+0x40>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d130      	bne.n	8005746 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	2203      	movs	r2, #3
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800571a:	2201      	movs	r2, #1
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4013      	ands	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	f003 0201 	and.w	r2, r3, #1
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b03      	cmp	r3, #3
 8005750:	d017      	beq.n	8005782 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	2203      	movs	r2, #3
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4013      	ands	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d123      	bne.n	80057d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	08da      	lsrs	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3208      	adds	r2, #8
 8005796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	220f      	movs	r2, #15
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	08da      	lsrs	r2, r3, #3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3208      	adds	r2, #8
 80057d0:	6939      	ldr	r1, [r7, #16]
 80057d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	2203      	movs	r2, #3
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4013      	ands	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0203 	and.w	r2, r3, #3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8098 	beq.w	8005948 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005818:	4a54      	ldr	r2, [pc, #336]	; (800596c <HAL_GPIO_Init+0x2c8>)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	089b      	lsrs	r3, r3, #2
 800581e:	3302      	adds	r3, #2
 8005820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	220f      	movs	r2, #15
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005842:	d019      	beq.n	8005878 <HAL_GPIO_Init+0x1d4>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a4a      	ldr	r2, [pc, #296]	; (8005970 <HAL_GPIO_Init+0x2cc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_GPIO_Init+0x1d0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a49      	ldr	r2, [pc, #292]	; (8005974 <HAL_GPIO_Init+0x2d0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00d      	beq.n	8005870 <HAL_GPIO_Init+0x1cc>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a48      	ldr	r2, [pc, #288]	; (8005978 <HAL_GPIO_Init+0x2d4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <HAL_GPIO_Init+0x1c8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a47      	ldr	r2, [pc, #284]	; (800597c <HAL_GPIO_Init+0x2d8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <HAL_GPIO_Init+0x1c4>
 8005864:	2304      	movs	r3, #4
 8005866:	e008      	b.n	800587a <HAL_GPIO_Init+0x1d6>
 8005868:	2307      	movs	r3, #7
 800586a:	e006      	b.n	800587a <HAL_GPIO_Init+0x1d6>
 800586c:	2303      	movs	r3, #3
 800586e:	e004      	b.n	800587a <HAL_GPIO_Init+0x1d6>
 8005870:	2302      	movs	r3, #2
 8005872:	e002      	b.n	800587a <HAL_GPIO_Init+0x1d6>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_GPIO_Init+0x1d6>
 8005878:	2300      	movs	r3, #0
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	f002 0203 	and.w	r2, r2, #3
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	4093      	lsls	r3, r2
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800588a:	4938      	ldr	r1, [pc, #224]	; (800596c <HAL_GPIO_Init+0x2c8>)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005898:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	43db      	mvns	r3, r3
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4013      	ands	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058bc:	4a30      	ldr	r2, [pc, #192]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4013      	ands	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058e6:	4a26      	ldr	r2, [pc, #152]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058ec:	4b24      	ldr	r3, [pc, #144]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 80058ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43db      	mvns	r3, r3
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4013      	ands	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800591a:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 800591c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43db      	mvns	r3, r3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005940:	4a0f      	ldr	r2, [pc, #60]	; (8005980 <HAL_GPIO_Init+0x2dc>)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3301      	adds	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f47f aeab 	bne.w	80056b4 <HAL_GPIO_Init+0x10>
  }
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40010000 	.word	0x40010000
 8005970:	48000400 	.word	0x48000400
 8005974:	48000800 	.word	0x48000800
 8005978:	48000c00 	.word	0x48000c00
 800597c:	48001000 	.word	0x48001000
 8005980:	58000800 	.word	0x58000800

08005984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005994:	787b      	ldrb	r3, [r7, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059a0:	e002      	b.n	80059a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059a2:	887a      	ldrh	r2, [r7, #2]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ca:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc febc 	bl	8002750 <HAL_GPIO_EXTI_Callback>
  }
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	58000800 	.word	0x58000800

080059e4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <HAL_HSEM_IRQHandler+0x30>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80059f0:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <HAL_HSEM_IRQHandler+0x30>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	4906      	ldr	r1, [pc, #24]	; (8005a14 <HAL_HSEM_IRQHandler+0x30>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80059fe:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <HAL_HSEM_IRQHandler+0x30>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f807 	bl	8005a18 <HAL_HSEM_FreeCallback>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	58001500 	.word	0x58001500

08005a18 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e081      	b.n	8005b42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc fdc2 	bl	80025dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d107      	bne.n	8005aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	e006      	b.n	8005ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d104      	bne.n	8005ac6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69d9      	ldr	r1, [r3, #28]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1a      	ldr	r2, [r3, #32]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	817b      	strh	r3, [r7, #10]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	813b      	strh	r3, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	f040 80f9 	bne.w	8005d66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_I2C_Mem_Write+0x34>
 8005b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0ed      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_I2C_Mem_Write+0x4e>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e0e6      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ba2:	f7fe fb39 	bl	8004218 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2319      	movs	r3, #25
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fadd 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0d1      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2221      	movs	r2, #33	; 0x21
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2240      	movs	r2, #64	; 0x40
 8005bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a3a      	ldr	r2, [r7, #32]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bec:	88f8      	ldrh	r0, [r7, #6]
 8005bee:	893a      	ldrh	r2, [r7, #8]
 8005bf0:	8979      	ldrh	r1, [r7, #10]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f9ed 	bl	8005fdc <I2C_RequestMemoryWrite>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0a9      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2bff      	cmp	r3, #255	; 0xff
 8005c1c:	d90e      	bls.n	8005c3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	22ff      	movs	r2, #255	; 0xff
 8005c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	8979      	ldrh	r1, [r7, #10]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fc09 	bl	800644c <I2C_TransferConfig>
 8005c3a:	e00f      	b.n	8005c5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	8979      	ldrh	r1, [r7, #10]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fbf8 	bl	800644c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fac7 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e07b      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d034      	beq.n	8005d14 <HAL_I2C_Mem_Write+0x1c8>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d130      	bne.n	8005d14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fa59 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e04d      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2bff      	cmp	r3, #255	; 0xff
 8005cd4:	d90e      	bls.n	8005cf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	8979      	ldrh	r1, [r7, #10]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fbad 	bl	800644c <I2C_TransferConfig>
 8005cf2:	e00f      	b.n	8005d14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	8979      	ldrh	r1, [r7, #10]
 8005d06:	2300      	movs	r3, #0
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fb9c 	bl	800644c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d19e      	bne.n	8005c5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 faa6 	bl	8006274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e01a      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2220      	movs	r2, #32
 8005d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6859      	ldr	r1, [r3, #4]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <HAL_I2C_Mem_Write+0x224>)
 8005d46:	400b      	ands	r3, r1
 8005d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e000      	b.n	8005d68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d66:	2302      	movs	r3, #2
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	fe00e800 	.word	0xfe00e800

08005d74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	460b      	mov	r3, r1
 8005d88:	813b      	strh	r3, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	f040 80fd 	bne.w	8005f96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_I2C_Mem_Read+0x34>
 8005da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0f1      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_I2C_Mem_Read+0x4e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e0ea      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dca:	f7fe fa25 	bl	8004218 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	2319      	movs	r3, #25
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f9c9 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0d5      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2222      	movs	r2, #34	; 0x22
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2240      	movs	r2, #64	; 0x40
 8005df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a3a      	ldr	r2, [r7, #32]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e14:	88f8      	ldrh	r0, [r7, #6]
 8005e16:	893a      	ldrh	r2, [r7, #8]
 8005e18:	8979      	ldrh	r1, [r7, #10]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	4603      	mov	r3, r0
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f92d 	bl	8006084 <I2C_RequestMemoryRead>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0ad      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2bff      	cmp	r3, #255	; 0xff
 8005e44:	d90e      	bls.n	8005e64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	22ff      	movs	r2, #255	; 0xff
 8005e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	8979      	ldrh	r1, [r7, #10]
 8005e54:	4b52      	ldr	r3, [pc, #328]	; (8005fa0 <HAL_I2C_Mem_Read+0x22c>)
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 faf5 	bl	800644c <I2C_TransferConfig>
 8005e62:	e00f      	b.n	8005e84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	8979      	ldrh	r1, [r7, #10]
 8005e76:	4b4a      	ldr	r3, [pc, #296]	; (8005fa0 <HAL_I2C_Mem_Read+0x22c>)
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fae4 	bl	800644c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2104      	movs	r1, #4
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f970 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e07c      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d034      	beq.n	8005f44 <HAL_I2C_Mem_Read+0x1d0>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d130      	bne.n	8005f44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f941 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e04d      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2bff      	cmp	r3, #255	; 0xff
 8005f04:	d90e      	bls.n	8005f24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	22ff      	movs	r2, #255	; 0xff
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	8979      	ldrh	r1, [r7, #10]
 8005f14:	2300      	movs	r3, #0
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fa95 	bl	800644c <I2C_TransferConfig>
 8005f22:	e00f      	b.n	8005f44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	8979      	ldrh	r1, [r7, #10]
 8005f36:	2300      	movs	r3, #0
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa84 	bl	800644c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d19a      	bne.n	8005e84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f98e 	bl	8006274 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e01a      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2220      	movs	r2, #32
 8005f68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <HAL_I2C_Mem_Read+0x230>)
 8005f76:	400b      	ands	r3, r1
 8005f78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e000      	b.n	8005f98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005f96:	2302      	movs	r3, #2
  }
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	80002400 	.word	0x80002400
 8005fa4:	fe00e800 	.word	0xfe00e800

08005fa8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	817b      	strh	r3, [r7, #10]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	813b      	strh	r3, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	8979      	ldrh	r1, [r7, #10]
 8005ffc:	4b20      	ldr	r3, [pc, #128]	; (8006080 <I2C_RequestMemoryWrite+0xa4>)
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fa21 	bl	800644c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f8f0 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e02c      	b.n	8006078 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d105      	bne.n	8006030 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	629a      	str	r2, [r3, #40]	; 0x28
 800602e:	e015      	b.n	800605c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b29b      	uxth	r3, r3
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	69b9      	ldr	r1, [r7, #24]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f8d6 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e012      	b.n	8006078 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006052:	893b      	ldrh	r3, [r7, #8]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2200      	movs	r2, #0
 8006064:	2180      	movs	r1, #128	; 0x80
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f884 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	80002000 	.word	0x80002000

08006084 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	4603      	mov	r3, r0
 8006094:	817b      	strh	r3, [r7, #10]
 8006096:	460b      	mov	r3, r1
 8006098:	813b      	strh	r3, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	8979      	ldrh	r1, [r7, #10]
 80060a4:	4b20      	ldr	r3, [pc, #128]	; (8006128 <I2C_RequestMemoryRead+0xa4>)
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2300      	movs	r3, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f9ce 	bl	800644c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	69b9      	ldr	r1, [r7, #24]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f89d 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e02c      	b.n	800611e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d105      	bne.n	80060d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060ca:	893b      	ldrh	r3, [r7, #8]
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
 80060d4:	e015      	b.n	8006102 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060d6:	893b      	ldrh	r3, [r7, #8]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	b29b      	uxth	r3, r3
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	69b9      	ldr	r1, [r7, #24]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f883 	bl	80061f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e012      	b.n	800611e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060f8:	893b      	ldrh	r3, [r7, #8]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2200      	movs	r2, #0
 800610a:	2140      	movs	r1, #64	; 0x40
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f831 	bl	8006174 <I2C_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	80002000 	.word	0x80002000

0800612c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d103      	bne.n	800614a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d007      	beq.n	8006168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	619a      	str	r2, [r3, #24]
  }
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006184:	e022      	b.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800618c:	d01e      	beq.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618e:	f7fe f843 	bl	8004218 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d113      	bne.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e00f      	b.n	80061ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4013      	ands	r3, r2
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d0cd      	beq.n	8006186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006200:	e02c      	b.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f870 	bl	80062ec <I2C_IsErrorOccurred>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e02a      	b.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800621c:	d01e      	beq.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621e:	f7fd fffb 	bl	8004218 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	d302      	bcc.n	8006234 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d113      	bne.n	800625c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e007      	b.n	800626c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d1cb      	bne.n	8006202 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006280:	e028      	b.n	80062d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f830 	bl	80062ec <I2C_IsErrorOccurred>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e026      	b.n	80062e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fd ffbf 	bl	8004218 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d113      	bne.n	80062d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e007      	b.n	80062e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d1cf      	bne.n	8006282 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	d040      	beq.n	8006394 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006320:	d01d      	beq.n	800635e <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006330:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006332:	e014      	b.n	800635e <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633a:	d010      	beq.n	800635e <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633c:	f7fd ff6c 	bl	8004218 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <I2C_IsErrorOccurred+0x66>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d105      	bne.n	800635e <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f043 0320 	orr.w	r3, r3, #32
 8006358:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d002      	beq.n	8006372 <I2C_IsErrorOccurred+0x86>
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0e0      	beq.n	8006334 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006372:	7ffb      	ldrb	r3, [r7, #31]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2220      	movs	r2, #32
 800637e:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2210      	movs	r2, #16
 8006386:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f043 0304 	orr.w	r3, r3, #4
 800638e:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f043 0308 	orr.w	r3, r3, #8
 80063cc:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 80063fc:	7ffb      	ldrb	r3, [r7, #31]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d01c      	beq.n	800643c <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fe92 	bl	800612c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <I2C_IsErrorOccurred+0x15c>)
 8006414:	400b      	ands	r3, r1
 8006416:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	431a      	orrs	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800643c:	7ffb      	ldrb	r3, [r7, #31]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	fe00e800 	.word	0xfe00e800

0800644c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	4613      	mov	r3, r2
 800645c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006464:	7a7b      	ldrb	r3, [r7, #9]
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800646c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	4313      	orrs	r3, r2
 8006476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800647a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	0d5b      	lsrs	r3, r3, #21
 8006486:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <I2C_TransferConfig+0x60>)
 800648c:	430b      	orrs	r3, r1
 800648e:	43db      	mvns	r3, r3
 8006490:	ea02 0103 	and.w	r1, r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	03ff63ff 	.word	0x03ff63ff

080064b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d138      	bne.n	8006538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e032      	b.n	800653a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	; 0x24
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0201 	bic.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e000      	b.n	800653a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b20      	cmp	r3, #32
 800655a:	d139      	bne.n	80065d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006566:	2302      	movs	r3, #2
 8006568:	e033      	b.n	80065d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2224      	movs	r2, #36	; 0x24
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006598:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01e      	beq.n	8006630 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <HAL_IPCC_Init+0x60>)
 80065f4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fc f8e0 	bl	80027c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006608:	68b8      	ldr	r0, [r7, #8]
 800660a:	f000 f85b 	bl	80066c4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f82c 	bl	8006678 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800662e:	e001      	b.n	8006634 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	58000c00 	.word	0x58000c00

08006644 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	4613      	mov	r3, r2
 800666a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	e00f      	b.n	80066a6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <IPCC_SetDefaultCallbacks+0x44>)
 8006690:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3306      	adds	r3, #6
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <IPCC_SetDefaultCallbacks+0x48>)
 800669e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b05      	cmp	r3, #5
 80066aa:	d9ec      	bls.n	8006686 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	08006645 	.word	0x08006645
 80066c0:	0800665f 	.word	0x0800665f

080066c4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80066d8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	223f      	movs	r2, #63	; 0x3f
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ee:	b08b      	sub	sp, #44	; 0x2c
 80066f0:	af06      	add	r7, sp, #24
 80066f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e0d7      	b.n	80068ae <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f013 fab6 	bl	8019c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2203      	movs	r2, #3
 800671c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f007 f99e 	bl	800da66 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	e04c      	b.n	80067ca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	440b      	add	r3, r1
 8006740:	3301      	adds	r3, #1
 8006742:	2201      	movs	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	440b      	add	r3, r1
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800675a:	7bfa      	ldrb	r2, [r7, #15]
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	b298      	uxth	r0, r3
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	440b      	add	r3, r1
 800676c:	3336      	adds	r3, #54	; 0x36
 800676e:	4602      	mov	r2, r0
 8006770:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	440b      	add	r3, r1
 8006782:	3303      	adds	r3, #3
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006788:	7bfa      	ldrb	r2, [r7, #15]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	440b      	add	r3, r1
 8006796:	3338      	adds	r3, #56	; 0x38
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800679c:	7bfa      	ldrb	r2, [r7, #15]
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	440b      	add	r3, r1
 80067aa:	333c      	adds	r3, #60	; 0x3c
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067b0:	7bfa      	ldrb	r2, [r7, #15]
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	440b      	add	r3, r1
 80067be:	3340      	adds	r3, #64	; 0x40
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	3301      	adds	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d3ad      	bcc.n	8006730 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e044      	b.n	8006864 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067da:	7bfa      	ldrb	r2, [r7, #15]
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	440b      	add	r3, r1
 80067e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067f0:	7bfa      	ldrb	r2, [r7, #15]
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	440b      	add	r3, r1
 80067fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006802:	7bfa      	ldrb	r2, [r7, #15]
 8006804:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006806:	7bfa      	ldrb	r2, [r7, #15]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	440b      	add	r3, r1
 8006814:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800681c:	7bfa      	ldrb	r2, [r7, #15]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	440b      	add	r3, r1
 800682a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	440b      	add	r3, r1
 8006840:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006848:	7bfa      	ldrb	r2, [r7, #15]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	440b      	add	r3, r1
 8006856:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	3301      	adds	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
 8006864:	7bfa      	ldrb	r2, [r7, #15]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d3b5      	bcc.n	80067da <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	687e      	ldr	r6, [r7, #4]
 8006876:	466d      	mov	r5, sp
 8006878:	f106 0410 	add.w	r4, r6, #16
 800687c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800687e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	1d33      	adds	r3, r6, #4
 8006886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006888:	6838      	ldr	r0, [r7, #0]
 800688a:	f007 f907 	bl	800da9c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fbeb 	bl	8008082 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_PCD_Start+0x16>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e012      	b.n	80068f2 <HAL_PCD_Start+0x3c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f007 f8ad 	bl	800da38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f008 fe75 	bl	800f5d2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_PCD_Stop+0x16>
 800690c:	2302      	movs	r3, #2
 800690e:	e012      	b.n	8006936 <HAL_PCD_Stop+0x3c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f007 f8a2 	bl	800da66 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f008 fe6a 	bl	800f600 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f008 fe6d 	bl	800f62a <USB_ReadInterrupts>
 8006950:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fac6 	bl	8006eee <PCD_EP_ISR_Handler>

    return;
 8006962:	e110      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696a:	2b00      	cmp	r3, #0
 800696c:	d013      	beq.n	8006996 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006980:	b292      	uxth	r2, r2
 8006982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f013 fa1f 	bl	8019dca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800698c:	2100      	movs	r1, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f8fc 	bl	8006b8c <HAL_PCD_SetAddress>

    return;
 8006994:	e0f7      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00c      	beq.n	80069ba <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069b2:	b292      	uxth	r2, r2
 80069b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80069b8:	e0e5      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069d6:	b292      	uxth	r2, r2
 80069d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80069dc:	e0d3      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d034      	beq.n	8006a52 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0204 	bic.w	r2, r2, #4
 80069fa:	b292      	uxth	r2, r2
 80069fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0208 	bic.w	r2, r2, #8
 8006a12:	b292      	uxth	r2, r2
 8006a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d107      	bne.n	8006a32 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f013 fb91 	bl	801a154 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f013 fa02 	bl	8019e3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a4a:	b292      	uxth	r2, r2
 8006a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006a50:	e099      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d027      	beq.n	8006aac <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a86:	b292      	uxth	r2, r2
 8006a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0204 	orr.w	r2, r2, #4
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f013 f9af 	bl	8019e08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006aaa:	e06c      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d040      	beq.n	8006b38 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac8:	b292      	uxth	r2, r2
 8006aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d12b      	bne.n	8006b30 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0204 	orr.w	r2, r2, #4
 8006aea:	b292      	uxth	r2, r2
 8006aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0208 	orr.w	r2, r2, #8
 8006b02:	b292      	uxth	r2, r2
 8006b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006b26:	2101      	movs	r1, #1
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f013 fb13 	bl	801a154 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006b2e:	e02a      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f013 f969 	bl	8019e08 <HAL_PCD_SuspendCallback>
    return;
 8006b36:	e026      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00f      	beq.n	8006b62 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b54:	b292      	uxth	r2, r2
 8006b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f013 f927 	bl	8019dae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006b60:	e011      	b.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006b84:	bf00      	nop
  }
}
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <HAL_PCD_SetAddress+0x1a>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	e013      	b.n	8006bce <HAL_PCD_SetAddress+0x42>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f008 fcf3 	bl	800f5aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	4608      	mov	r0, r1
 8006be0:	4611      	mov	r1, r2
 8006be2:	461a      	mov	r2, r3
 8006be4:	4603      	mov	r3, r0
 8006be6:	70fb      	strb	r3, [r7, #3]
 8006be8:	460b      	mov	r3, r1
 8006bea:	803b      	strh	r3, [r7, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da0e      	bge.n	8006c1a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	705a      	strb	r2, [r3, #1]
 8006c18:	e00e      	b.n	8006c38 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	f003 0207 	and.w	r2, r3, #7
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c44:	883a      	ldrh	r2, [r7, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	78ba      	ldrb	r2, [r7, #2]
 8006c4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c62:	78bb      	ldrb	r3, [r7, #2]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d102      	bne.n	8006c6e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_PCD_EP_Open+0xa6>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e00e      	b.n	8006c9a <HAL_PCD_EP_Open+0xc4>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f006 ff28 	bl	800dae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	f003 0207 	and.w	r2, r3, #7
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ce2:	7afb      	ldrb	r3, [r7, #11]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f007 fa82 	bl	800e208 <USB_EPStartXfer>
 8006d04:	e005      	b.n	8006d12 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6979      	ldr	r1, [r7, #20]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f007 fa7b 	bl	800e208 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2201      	movs	r2, #1
 8006d66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d74:	7afb      	ldrb	r3, [r7, #11]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6979      	ldr	r1, [r7, #20]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f007 fa3f 	bl	800e208 <USB_EPStartXfer>
 8006d8a:	e005      	b.n	8006d98 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6979      	ldr	r1, [r7, #20]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f007 fa38 	bl	800e208 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	f003 0207 	and.w	r2, r3, #7
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d901      	bls.n	8006dc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e03e      	b.n	8006e3e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da0e      	bge.n	8006de6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	705a      	strb	r2, [r3, #1]
 8006de4:	e00c      	b.n	8006e00 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006de6:	78fa      	ldrb	r2, [r7, #3]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_PCD_EP_SetStall+0x7e>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e00e      	b.n	8006e3e <HAL_PCD_EP_SetStall+0x9c>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f008 fabc 	bl	800f3ac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d901      	bls.n	8006e64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e040      	b.n	8006ee6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da0e      	bge.n	8006e8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4413      	add	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	705a      	strb	r2, [r3, #1]
 8006e88:	e00e      	b.n	8006ea8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f003 0207 	and.w	r2, r3, #7
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_PCD_EP_ClrStall+0x82>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e00e      	b.n	8006ee6 <HAL_PCD_EP_ClrStall+0xa0>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68f9      	ldr	r1, [r7, #12]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f008 fab9 	bl	800f44e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b096      	sub	sp, #88	; 0x58
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ef6:	e39c      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f00:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006f04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006f12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 815e 	bne.w	80071d8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006f1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d150      	bne.n	8006fca <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	81fb      	strh	r3, [r7, #14]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	89fb      	ldrh	r3, [r7, #14]
 8006f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3328      	adds	r3, #40	; 0x28
 8006f50:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4413      	add	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	441a      	add	r2, r3
 8006f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006f88:	2100      	movs	r1, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f012 fef5 	bl	8019d7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 834a 	beq.w	8007632 <PCD_EP_ISR_Handler+0x744>
 8006f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f040 8345 	bne.w	8007632 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	b292      	uxth	r2, r2
 8006fbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006fc8:	e333      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006fdc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d032      	beq.n	800704e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	4413      	add	r3, r2
 8007002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800701a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800701e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007020:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007022:	b29b      	uxth	r3, r3
 8007024:	f008 fb53 	bl	800f6ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29a      	uxth	r2, r3
 8007030:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007034:	4013      	ands	r3, r2
 8007036:	823b      	strh	r3, [r7, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	8a3a      	ldrh	r2, [r7, #16]
 800703e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007042:	b292      	uxth	r2, r2
 8007044:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f012 fe6a 	bl	8019d20 <HAL_PCD_SetupStageCallback>
 800704c:	e2f1      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800704e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8007052:	2b00      	cmp	r3, #0
 8007054:	f280 82ed 	bge.w	8007632 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29a      	uxth	r2, r3
 8007060:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007064:	4013      	ands	r3, r2
 8007066:	83fb      	strh	r3, [r7, #30]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	8bfa      	ldrh	r2, [r7, #30]
 800706e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007072:	b292      	uxth	r2, r2
 8007074:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	4413      	add	r3, r2
 8007090:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800709a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800709c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d019      	beq.n	80070da <PCD_EP_ISR_Handler+0x1ec>
 80070a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d015      	beq.n	80070da <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	6959      	ldr	r1, [r3, #20]
 80070b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80070ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f008 fb05 	bl	800f6ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80070c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	441a      	add	r2, r3
 80070ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80070d2:	2100      	movs	r1, #0
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f012 fe35 	bl	8019d44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 82a3 	bne.w	8007632 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	4413      	add	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b3e      	cmp	r3, #62	; 0x3e
 8007112:	d918      	bls.n	8007146 <PCD_EP_ISR_Handler+0x258>
 8007114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	647b      	str	r3, [r7, #68]	; 0x44
 800711c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <PCD_EP_ISR_Handler+0x240>
 8007128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712a:	3b01      	subs	r3, #1
 800712c:	647b      	str	r3, [r7, #68]	; 0x44
 800712e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007130:	b29b      	uxth	r3, r3
 8007132:	029b      	lsls	r3, r3, #10
 8007134:	b29b      	uxth	r3, r3
 8007136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713e:	b29a      	uxth	r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e029      	b.n	800719a <PCD_EP_ISR_Handler+0x2ac>
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d112      	bne.n	8007174 <PCD_EP_ISR_Handler+0x286>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007158:	b29a      	uxth	r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716c:	b29a      	uxth	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	801a      	strh	r2, [r3, #0]
 8007172:	e012      	b.n	800719a <PCD_EP_ISR_Handler+0x2ac>
 8007174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	085b      	lsrs	r3, r3, #1
 800717a:	647b      	str	r3, [r7, #68]	; 0x44
 800717c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <PCD_EP_ISR_Handler+0x2a0>
 8007188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718a:	3301      	adds	r3, #1
 800718c:	647b      	str	r3, [r7, #68]	; 0x44
 800718e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007190:	b29b      	uxth	r3, r3
 8007192:	029b      	lsls	r3, r3, #10
 8007194:	b29a      	uxth	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	827b      	strh	r3, [r7, #18]
 80071ac:	8a7b      	ldrh	r3, [r7, #18]
 80071ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071b2:	827b      	strh	r3, [r7, #18]
 80071b4:	8a7b      	ldrh	r3, [r7, #18]
 80071b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071ba:	827b      	strh	r3, [r7, #18]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	8a7b      	ldrh	r3, [r7, #18]
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]
 80071d6:	e22c      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80071ec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f280 80f6 	bge.w	80073e2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29a      	uxth	r2, r3
 8007208:	f640 738f 	movw	r3, #3983	; 0xf8f
 800720c:	4013      	ands	r3, r2
 800720e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007228:	b292      	uxth	r2, r2
 800722a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800722c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4413      	add	r3, r2
 8007240:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	7b1b      	ldrb	r3, [r3, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d123      	bne.n	8007292 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4413      	add	r3, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	4413      	add	r3, r2
 8007264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8007272:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 808e 	beq.w	8007398 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007282:	6959      	ldr	r1, [r3, #20]
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	88da      	ldrh	r2, [r3, #6]
 8007288:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800728c:	f008 fa1f 	bl	800f6ce <USB_ReadPMA>
 8007290:	e082      	b.n	8007398 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d10a      	bne.n	80072b0 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800729a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800729e:	461a      	mov	r2, r3
 80072a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9d3 	bl	800764e <HAL_PCD_EP_DB_Receive>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80072ae:	e073      	b.n	8007398 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d022      	beq.n	8007354 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	4413      	add	r3, r2
 8007328:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007332:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8007336:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800733a:	2b00      	cmp	r3, #0
 800733c:	d02c      	beq.n	8007398 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007344:	6959      	ldr	r1, [r3, #20]
 8007346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007348:	891a      	ldrh	r2, [r3, #8]
 800734a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800734e:	f008 f9be 	bl	800f6ce <USB_ReadPMA>
 8007352:	e021      	b.n	8007398 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4413      	add	r3, r2
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	4413      	add	r3, r2
 800736e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007378:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800737c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738a:	6959      	ldr	r1, [r3, #20]
 800738c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738e:	895a      	ldrh	r2, [r3, #10]
 8007390:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007394:	f008 f99b 	bl	800f6ce <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739a:	69da      	ldr	r2, [r3, #28]
 800739c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80073a0:	441a      	add	r2, r3
 80073a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80073a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80073ae:	441a      	add	r2, r3
 80073b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80073b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <PCD_EP_ISR_Handler+0x4da>
 80073bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80073c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d206      	bcs.n	80073d6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80073c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f012 fcb8 	bl	8019d44 <HAL_PCD_DataOutStageCallback>
 80073d4:	e005      	b.n	80073e2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80073dc:	4618      	mov	r0, r3
 80073de:	f006 ff13 	bl	800e208 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80073e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80073e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8121 	beq.w	8007632 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80073f0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4413      	add	r3, r2
 8007402:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	441a      	add	r2, r3
 8007430:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743c:	b29b      	uxth	r3, r3
 800743e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	2b02      	cmp	r3, #2
 8007446:	f000 80a2 	beq.w	800758e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800744a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744c:	2200      	movs	r2, #0
 800744e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007452:	7b1b      	ldrb	r3, [r3, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8093 	beq.w	8007580 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800745a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d046      	beq.n	80074f4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d126      	bne.n	80074bc <PCD_EP_ISR_Handler+0x5ce>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747c:	b29b      	uxth	r3, r3
 800747e:	461a      	mov	r2, r3
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	4413      	add	r3, r2
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	00da      	lsls	r2, r3, #3
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	4413      	add	r3, r2
 8007490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007494:	623b      	str	r3, [r7, #32]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e061      	b.n	8007580 <PCD_EP_ISR_Handler+0x692>
 80074bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d15d      	bne.n	8007580 <PCD_EP_ISR_Handler+0x692>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	4413      	add	r3, r2
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	00da      	lsls	r2, r3, #3
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	4413      	add	r3, r2
 80074e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	2200      	movs	r2, #0
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e045      	b.n	8007580 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d126      	bne.n	8007550 <PCD_EP_ISR_Handler+0x662>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007510:	b29b      	uxth	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	4413      	add	r3, r2
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
 800751a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	00da      	lsls	r2, r3, #3
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	4413      	add	r3, r2
 8007524:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007528:	633b      	str	r3, [r7, #48]	; 0x30
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007534:	b29a      	uxth	r2, r3
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007548:	b29a      	uxth	r2, r3
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	e017      	b.n	8007580 <PCD_EP_ISR_Handler+0x692>
 8007550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d113      	bne.n	8007580 <PCD_EP_ISR_Handler+0x692>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007560:	b29b      	uxth	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	4413      	add	r3, r2
 8007568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	00da      	lsls	r2, r3, #3
 8007570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007572:	4413      	add	r3, r2
 8007574:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007578:	63bb      	str	r3, [r7, #56]	; 0x38
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	2200      	movs	r2, #0
 800757e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f012 fbf7 	bl	8019d7a <HAL_PCD_DataInStageCallback>
 800758c:	e051      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800758e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007596:	2b00      	cmp	r3, #0
 8007598:	d144      	bne.n	8007624 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	4413      	add	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	4413      	add	r3, r2
 80075b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80075c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d907      	bls.n	80075de <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80075ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80075d6:	1ad2      	subs	r2, r2, r3
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	619a      	str	r2, [r3, #24]
 80075dc:	e002      	b.n	80075e4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80075de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e0:	2200      	movs	r2, #0
 80075e2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80075e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80075ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f012 fbc1 	bl	8019d7a <HAL_PCD_DataInStageCallback>
 80075f8:	e01b      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007602:	441a      	add	r2, r3
 8007604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007606:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007610:	441a      	add	r2, r3
 8007612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007614:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800761c:	4618      	mov	r0, r3
 800761e:	f006 fdf3 	bl	800e208 <USB_EPStartXfer>
 8007622:	e006      	b.n	8007632 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007624:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007628:	461a      	mov	r2, r3
 800762a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f917 	bl	8007860 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800763a:	b29b      	uxth	r3, r3
 800763c:	b21b      	sxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	f6ff ac5a 	blt.w	8006ef8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3758      	adds	r7, #88	; 0x58
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b088      	sub	sp, #32
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	4613      	mov	r3, r2
 800765a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d07c      	beq.n	8007760 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4413      	add	r3, r2
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	4413      	add	r3, r2
 8007680:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800768a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	8b7b      	ldrh	r3, [r7, #26]
 8007692:	429a      	cmp	r2, r3
 8007694:	d306      	bcc.n	80076a4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	8b7b      	ldrh	r3, [r7, #26]
 800769c:	1ad2      	subs	r2, r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	619a      	str	r2, [r3, #24]
 80076a2:	e002      	b.n	80076aa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d123      	bne.n	80076fa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076cc:	833b      	strh	r3, [r7, #24]
 80076ce:	8b3b      	ldrh	r3, [r7, #24]
 80076d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076d4:	833b      	strh	r3, [r7, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	8b3b      	ldrh	r3, [r7, #24]
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01f      	beq.n	8007744 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	82fb      	strh	r3, [r7, #22]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	8afb      	ldrh	r3, [r7, #22]
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007744:	8b7b      	ldrh	r3, [r7, #26]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8085 	beq.w	8007856 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6959      	ldr	r1, [r3, #20]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	891a      	ldrh	r2, [r3, #8]
 8007758:	8b7b      	ldrh	r3, [r7, #26]
 800775a:	f007 ffb8 	bl	800f6ce <USB_ReadPMA>
 800775e:	e07a      	b.n	8007856 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007768:	b29b      	uxth	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	4413      	add	r3, r2
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	4413      	add	r3, r2
 800777a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007784:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	8b7b      	ldrh	r3, [r7, #26]
 800778c:	429a      	cmp	r2, r3
 800778e:	d306      	bcc.n	800779e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	8b7b      	ldrh	r3, [r7, #26]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	619a      	str	r2, [r3, #24]
 800779c:	e002      	b.n	80077a4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d123      	bne.n	80077f4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c6:	83fb      	strh	r3, [r7, #30]
 80077c8:	8bfb      	ldrh	r3, [r7, #30]
 80077ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80077ce:	83fb      	strh	r3, [r7, #30]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	8bfb      	ldrh	r3, [r7, #30]
 80077e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d11f      	bne.n	800783e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007818:	83bb      	strh	r3, [r7, #28]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	441a      	add	r2, r3
 8007828:	8bbb      	ldrh	r3, [r7, #28]
 800782a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007836:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800783a:	b29b      	uxth	r3, r3
 800783c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800783e:	8b7b      	ldrh	r3, [r7, #26]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6959      	ldr	r1, [r3, #20]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	895a      	ldrh	r2, [r3, #10]
 8007850:	8b7b      	ldrh	r3, [r7, #26]
 8007852:	f007 ff3c 	bl	800f6ce <USB_ReadPMA>
    }
  }

  return count;
 8007856:	8b7b      	ldrh	r3, [r7, #26]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b0a2      	sub	sp, #136	; 0x88
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 81c5 	beq.w	8007c04 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007882:	b29b      	uxth	r3, r3
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	4413      	add	r3, r2
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	4413      	add	r3, r2
 8007894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800789e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d907      	bls.n	80078be <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078b6:	1ad2      	subs	r2, r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	619a      	str	r2, [r3, #24]
 80078bc:	e002      	b.n	80078c4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f040 80b9 	bne.w	8007a40 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d126      	bne.n	8007924 <HAL_PCD_EP_DB_Transmit+0xc4>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	62bb      	str	r3, [r7, #40]	; 0x28
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	4413      	add	r3, r2
 80078ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	00da      	lsls	r2, r3, #3
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	4413      	add	r3, r2
 80078f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007908:	b29a      	uxth	r2, r3
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	801a      	strh	r2, [r3, #0]
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791c:	b29a      	uxth	r2, r3
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	e01a      	b.n	800795a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d116      	bne.n	800795a <HAL_PCD_EP_DB_Transmit+0xfa>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	633b      	str	r3, [r7, #48]	; 0x30
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793a:	b29b      	uxth	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	4413      	add	r3, r2
 8007942:	633b      	str	r3, [r7, #48]	; 0x30
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00da      	lsls	r2, r3, #3
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	4413      	add	r3, r2
 800794e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	2200      	movs	r2, #0
 8007958:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	623b      	str	r3, [r7, #32]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d126      	bne.n	80079b6 <HAL_PCD_EP_DB_Transmit+0x156>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	4413      	add	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	00da      	lsls	r2, r3, #3
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	4413      	add	r3, r2
 800798a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800799a:	b29a      	uxth	r2, r3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	801a      	strh	r2, [r3, #0]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	801a      	strh	r2, [r3, #0]
 80079b4:	e017      	b.n	80079e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d113      	bne.n	80079e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	4413      	add	r3, r2
 80079ce:	623b      	str	r3, [r7, #32]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	00da      	lsls	r2, r3, #3
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	4413      	add	r3, r2
 80079da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2200      	movs	r2, #0
 80079e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	4619      	mov	r1, r3
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f012 f9c4 	bl	8019d7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 82d2 	beq.w	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a18:	827b      	strh	r3, [r7, #18]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	441a      	add	r2, r3
 8007a28:	8a7b      	ldrh	r3, [r7, #18]
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]
 8007a3e:	e2b0      	b.n	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d021      	beq.n	8007a8e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	441a      	add	r2, r3
 8007a76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f040 8284 	bne.w	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007aa2:	441a      	add	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6a1a      	ldr	r2, [r3, #32]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d309      	bcc.n	8007ad6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6a1a      	ldr	r2, [r3, #32]
 8007acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	621a      	str	r2, [r3, #32]
 8007ad4:	e015      	b.n	8007b02 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007ade:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ae2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007aec:	e009      	b.n	8007b02 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d155      	bne.n	8007bb6 <HAL_PCD_EP_DB_Transmit+0x356>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	4413      	add	r3, r2
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	00da      	lsls	r2, r3, #3
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
 8007b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b34:	2b3e      	cmp	r3, #62	; 0x3e
 8007b36:	d916      	bls.n	8007b66 <HAL_PCD_EP_DB_Transmit+0x306>
 8007b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	029b      	lsls	r3, r3, #10
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	e043      	b.n	8007bee <HAL_PCD_EP_DB_Transmit+0x38e>
 8007b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d112      	bne.n	8007b92 <HAL_PCD_EP_DB_Transmit+0x332>
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e02d      	b.n	8007bee <HAL_PCD_EP_DB_Transmit+0x38e>
 8007b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_PCD_EP_DB_Transmit+0x348>
 8007ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	029b      	lsls	r3, r3, #10
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e01b      	b.n	8007bee <HAL_PCD_EP_DB_Transmit+0x38e>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d117      	bne.n	8007bee <HAL_PCD_EP_DB_Transmit+0x38e>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd2:	4413      	add	r3, r2
 8007bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	00da      	lsls	r2, r3, #3
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bde:	4413      	add	r3, r2
 8007be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6959      	ldr	r1, [r3, #20]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	891a      	ldrh	r2, [r3, #8]
 8007bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f007 fd24 	bl	800f64a <USB_WritePMA>
 8007c02:	e1ce      	b.n	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4413      	add	r3, r2
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d307      	bcc.n	8007c48 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c40:	1ad2      	subs	r2, r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	619a      	str	r2, [r3, #24]
 8007c46:	e002      	b.n	8007c4e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 80c4 	bne.w	8007de0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d126      	bne.n	8007cae <HAL_PCD_EP_DB_Transmit+0x44e>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c74:	4413      	add	r3, r2
 8007c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	00da      	lsls	r2, r3, #3
 8007c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c80:	4413      	add	r3, r2
 8007c82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c86:	667b      	str	r3, [r7, #100]	; 0x64
 8007c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e01a      	b.n	8007ce4 <HAL_PCD_EP_DB_Transmit+0x484>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d116      	bne.n	8007ce4 <HAL_PCD_EP_DB_Transmit+0x484>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	673b      	str	r3, [r7, #112]	; 0x70
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cca:	4413      	add	r3, r2
 8007ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	00da      	lsls	r2, r3, #3
 8007cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d12f      	bne.n	8007d52 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	00da      	lsls	r2, r3, #3
 8007d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d36:	801a      	strh	r2, [r3, #0]
 8007d38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d4e:	801a      	strh	r2, [r3, #0]
 8007d50:	e017      	b.n	8007d82 <HAL_PCD_EP_DB_Transmit+0x522>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d113      	bne.n	8007d82 <HAL_PCD_EP_DB_Transmit+0x522>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d68:	4413      	add	r3, r2
 8007d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	00da      	lsls	r2, r3, #3
 8007d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d74:	4413      	add	r3, r2
 8007d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7e:	2200      	movs	r2, #0
 8007d80:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	4619      	mov	r1, r3
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f011 fff6 	bl	8019d7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 8104 	bne.w	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	8013      	strh	r3, [r2, #0]
 8007dde:	e0e0      	b.n	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d121      	bne.n	8007e2e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	f040 80b4 	bne.w	8007fa2 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e42:	441a      	add	r2, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e50:	441a      	add	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6a1a      	ldr	r2, [r3, #32]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d309      	bcc.n	8007e76 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6a1a      	ldr	r2, [r3, #32]
 8007e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	621a      	str	r2, [r3, #32]
 8007e74:	e015      	b.n	8007ea2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007e7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007e8c:	e009      	b.n	8007ea2 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d155      	bne.n	8007f5c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ec4:	4413      	add	r3, r2
 8007ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	00da      	lsls	r2, r3, #3
 8007ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eda:	2b3e      	cmp	r3, #62	; 0x3e
 8007edc:	d916      	bls.n	8007f0c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee0:	095b      	lsrs	r3, r3, #5
 8007ee2:	677b      	str	r3, [r7, #116]	; 0x74
 8007ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee6:	f003 031f 	and.w	r3, r3, #31
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d102      	bne.n	8007ef4 <HAL_PCD_EP_DB_Transmit+0x694>
 8007eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	677b      	str	r3, [r7, #116]	; 0x74
 8007ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	029b      	lsls	r3, r3, #10
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	e040      	b.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8007f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d112      	bne.n	8007f38 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f34:	801a      	strh	r2, [r3, #0]
 8007f36:	e02a      	b.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8007f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	677b      	str	r3, [r7, #116]	; 0x74
 8007f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e018      	b.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d114      	bne.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x72e>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f72:	4413      	add	r3, r2
 8007f74:	663b      	str	r3, [r7, #96]	; 0x60
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	00da      	lsls	r2, r3, #3
 8007f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f7e:	4413      	add	r3, r2
 8007f80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6959      	ldr	r1, [r3, #20]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	895a      	ldrh	r2, [r3, #10]
 8007f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f007 fb54 	bl	800f64a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	823b      	strh	r3, [r7, #16]
 8007fbe:	8a3b      	ldrh	r3, [r7, #16]
 8007fc0:	f083 0310 	eor.w	r3, r3, #16
 8007fc4:	823b      	strh	r3, [r7, #16]
 8007fc6:	8a3b      	ldrh	r3, [r7, #16]
 8007fc8:	f083 0320 	eor.w	r3, r3, #32
 8007fcc:	823b      	strh	r3, [r7, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	441a      	add	r2, r3
 8007fdc:	8a3b      	ldrh	r3, [r7, #16]
 8007fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3788      	adds	r7, #136	; 0x88
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	817b      	strh	r3, [r7, #10]
 800800a:	4613      	mov	r3, r2
 800800c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800800e:	897b      	ldrh	r3, [r7, #10]
 8008010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800801a:	897b      	ldrh	r3, [r7, #10]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e009      	b.n	8008046 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008032:	897a      	ldrh	r2, [r7, #10]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008046:	893b      	ldrh	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d107      	bne.n	800805c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2200      	movs	r2, #0
 8008050:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	b29a      	uxth	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	80da      	strh	r2, [r3, #6]
 800805a:	e00b      	b.n	8008074 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2201      	movs	r2, #1
 8008060:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	b29a      	uxth	r2, r3
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	b29a      	uxth	r2, r3
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f043 0301 	orr.w	r3, r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f043 0302 	orr.w	r3, r3, #2
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a04      	ldr	r2, [pc, #16]	; (80080f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e6:	6013      	str	r3, [r2, #0]
}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	58000400 	.word	0x58000400

080080f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <HAL_PWREx_GetVoltageRange+0x18>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008104:	4618      	mov	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	58000400 	.word	0x58000400

08008114 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a04      	ldr	r2, [pc, #16]	; (8008130 <HAL_PWREx_EnableVddUSB+0x1c>)
 800811e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008122:	6053      	str	r3, [r2, #4]
}
 8008124:	bf00      	nop
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	58000400 	.word	0x58000400

08008134 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008146:	d101      	bne.n	800814c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <LL_RCC_HSE_Enable>:
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800815c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800816a:	6013      	str	r3, [r2, #0]
}
 800816c:	bf00      	nop
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <LL_RCC_HSE_Disable>:
{
 8008176:	b480      	push	{r7}
 8008178:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800817a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008188:	6013      	str	r3, [r2, #0]
}
 800818a:	bf00      	nop
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <LL_RCC_HSE_IsReady>:
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a6:	d101      	bne.n	80081ac <LL_RCC_HSE_IsReady+0x18>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <LL_RCC_HSE_IsReady+0x1a>
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <LL_RCC_HSI_Enable>:
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80081bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ca:	6013      	str	r3, [r2, #0]
}
 80081cc:	bf00      	nop
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <LL_RCC_HSI_Disable>:
{
 80081d6:	b480      	push	{r7}
 80081d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80081da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e8:	6013      	str	r3, [r2, #0]
}
 80081ea:	bf00      	nop
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <LL_RCC_HSI_IsReady>:
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80081f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008206:	d101      	bne.n	800820c <LL_RCC_HSI_IsReady+0x18>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <LL_RCC_HSI_IsReady+0x1a>
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	061b      	lsls	r3, r3, #24
 800822e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008232:	4313      	orrs	r3, r2
 8008234:	604b      	str	r3, [r1, #4]
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <LL_RCC_HSI48_Enable>:
{
 8008242:	b480      	push	{r7}
 8008244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800824e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800825a:	bf00      	nop
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <LL_RCC_HSI48_Disable>:
{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800826c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800827c:	bf00      	nop
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <LL_RCC_HSI48_IsReady>:
{
 8008286:	b480      	push	{r7}
 8008288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800828a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800828e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b02      	cmp	r3, #2
 8008298:	d101      	bne.n	800829e <LL_RCC_HSI48_IsReady+0x18>
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <LL_RCC_HSI48_IsReady+0x1a>
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <LL_RCC_LSE_Enable>:
{
 80082aa:	b480      	push	{r7}
 80082ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80082ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80082c2:	bf00      	nop
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <LL_RCC_LSE_Disable>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80082d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <LL_RCC_LSE_EnableBypass>:
{
 80082ee:	b480      	push	{r7}
 80082f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80082f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082fe:	f043 0304 	orr.w	r3, r3, #4
 8008302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <LL_RCC_LSE_DisableBypass>:
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008320:	f023 0304 	bic.w	r3, r3, #4
 8008324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008328:	bf00      	nop
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <LL_RCC_LSE_IsReady>:
{
 8008332:	b480      	push	{r7}
 8008334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b02      	cmp	r3, #2
 8008344:	d101      	bne.n	800834a <LL_RCC_LSE_IsReady+0x18>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <LL_RCC_LSE_IsReady+0x1a>
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <LL_RCC_LSI1_Enable>:
{
 8008356:	b480      	push	{r7}
 8008358:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800835a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800835e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800836e:	bf00      	nop
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <LL_RCC_LSI1_Disable>:
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800837c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008388:	f023 0301 	bic.w	r3, r3, #1
 800838c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008390:	bf00      	nop
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <LL_RCC_LSI1_IsReady>:
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800839e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d101      	bne.n	80083b2 <LL_RCC_LSI1_IsReady+0x18>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <LL_RCC_LSI1_IsReady+0x1a>
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <LL_RCC_LSI2_Enable>:
{
 80083be:	b480      	push	{r7}
 80083c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80083c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80083d6:	bf00      	nop
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <LL_RCC_LSI2_Disable>:
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80083e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083f0:	f023 0304 	bic.w	r3, r3, #4
 80083f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80083f8:	bf00      	nop
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <LL_RCC_LSI2_IsReady>:
{
 8008402:	b480      	push	{r7}
 8008404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b08      	cmp	r3, #8
 8008414:	d101      	bne.n	800841a <LL_RCC_LSI2_IsReady+0x18>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <LL_RCC_LSI2_IsReady+0x1a>
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <LL_RCC_LSI2_SetTrimming>:
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800842e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008436:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <LL_RCC_MSI_Enable>:
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	6013      	str	r3, [r2, #0]
}
 8008468:	bf00      	nop
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <LL_RCC_MSI_Disable>:
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	6013      	str	r3, [r2, #0]
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <LL_RCC_MSI_IsReady>:
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d101      	bne.n	80084a6 <LL_RCC_MSI_IsReady+0x16>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <LL_RCC_MSI_IsReady+0x18>
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <LL_RCC_MSI_DisablePLLMode>:
{
 80084b2:	b480      	push	{r7}
 80084b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80084b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084c0:	f023 0304 	bic.w	r3, r3, #4
 80084c4:	6013      	str	r3, [r2, #0]
}
 80084c6:	bf00      	nop
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <LL_RCC_MSI_SetRange>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80084d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	600b      	str	r3, [r1, #0]
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <LL_RCC_MSI_GetRange>:
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80084fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008508:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2bb0      	cmp	r3, #176	; 0xb0
 800850e:	d901      	bls.n	8008514 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8008510:	23b0      	movs	r3, #176	; 0xb0
 8008512:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800852a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800853c:	4313      	orrs	r3, r2
 800853e:	604b      	str	r3, [r1, #4]
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <LL_RCC_SetSysClkSource>:
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f023 0203 	bic.w	r2, r3, #3
 800855e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4313      	orrs	r3, r2
 8008566:	608b      	str	r3, [r1, #8]
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <LL_RCC_GetSysClkSource>:
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f003 030c 	and.w	r3, r3, #12
}
 8008582:	4618      	mov	r0, r3
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <LL_RCC_SetAHBPrescaler>:
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800859e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	608b      	str	r3, [r1, #8]
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <LL_C2_RCC_SetAHBPrescaler>:
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80085bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80085c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <LL_RCC_SetAHB4Prescaler>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80085e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80085f0:	f023 020f 	bic.w	r2, r3, #15
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	091b      	lsrs	r3, r3, #4
 80085f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <LL_RCC_SetAPB1Prescaler>:
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4313      	orrs	r3, r2
 8008628:	608b      	str	r3, [r1, #8]
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <LL_RCC_SetAPB2Prescaler>:
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800863e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4313      	orrs	r3, r2
 8008650:	608b      	str	r3, [r1, #8]
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <LL_RCC_GetAHBPrescaler>:
{
 800865e:	b480      	push	{r7}
 8008660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800866c:	4618      	mov	r0, r3
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <LL_C2_RCC_GetAHBPrescaler>:
{
 8008676:	b480      	push	{r7}
 8008678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800867a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008686:	4618      	mov	r0, r3
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <LL_RCC_GetAHB4Prescaler>:
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008698:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <LL_RCC_GetAPB1Prescaler>:
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80086b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_RCC_GetAPB2Prescaler>:
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80086c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <LL_RCC_PLL_Enable>:
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80086e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ee:	6013      	str	r3, [r2, #0]
}
 80086f0:	bf00      	nop
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <LL_RCC_PLL_Disable>:
{
 80086fa:	b480      	push	{r7}
 80086fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80086fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800870c:	6013      	str	r3, [r2, #0]
}
 800870e:	bf00      	nop
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_RCC_PLL_IsReady>:
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800872a:	d101      	bne.n	8008730 <LL_RCC_PLL_IsReady+0x18>
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <LL_RCC_PLL_IsReady+0x1a>
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <LL_RCC_PLL_GetN>:
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800874c:	4618      	mov	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <LL_RCC_PLL_GetR>:
{
 8008756:	b480      	push	{r7}
 8008758:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800875a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008764:	4618      	mov	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <LL_RCC_PLL_GetDivider>:
{
 800876e:	b480      	push	{r7}
 8008770:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800877c:	4618      	mov	r0, r3
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <LL_RCC_PLLSAI1_IsReady>:
{
 8008786:	b480      	push	{r7}
 8008788:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800878a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008798:	d101      	bne.n	800879e <LL_RCC_PLLSAI1_IsReady+0x18>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <LL_RCC_PLL_GetMainSource>:
{
 80087aa:	b480      	push	{r7}
 80087ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80087ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0303 	and.w	r3, r3, #3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80087c2:	b480      	push	{r7}
 80087c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80087c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d4:	d101      	bne.n	80087da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80087e6:	b480      	push	{r7}
 80087e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80087ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fa:	d101      	bne.n	8008800 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80087fc:	2301      	movs	r3, #1
 80087fe:	e000      	b.n	8008802 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008814:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d101      	bne.n	8008826 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008832:	b480      	push	{r7}
 8008834:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008844:	d101      	bne.n	800884a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008856:	b480      	push	{r7}
 8008858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800885a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008868:	d101      	bne.n	800886e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <HAL_RCC_DeInit>:
  *           - Peripheral clocks
  *           - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008882:	f7fb fcc9 	bl	8004218 <HAL_GetTick>
 8008886:	6078      	str	r0, [r7, #4]

  /* MSI PLL OFF */
  LL_RCC_MSI_DisablePLLMode();
 8008888:	f7ff fe13 	bl	80084b2 <LL_RCC_MSI_DisablePLLMode>
  
  /* Set MSION bit */
  LL_RCC_MSI_Enable();
 800888c:	f7ff fde2 	bl	8008454 <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() == 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_DeInit+0x28>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008892:	f7fb fcc1 	bl	8004218 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_DeInit+0x28>
    {
      return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e078      	b.n	8008996 <HAL_RCC_DeInit+0x11a>
  while (LL_RCC_MSI_IsReady() == 0U)
 80088a4:	f7ff fdf4 	bl	8008490 <LL_RCC_MSI_IsReady>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f1      	beq.n	8008892 <HAL_RCC_DeInit+0x16>
    }
  }

  /* Set MSIRANGE default value */
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80088ae:	2060      	movs	r0, #96	; 0x60
 80088b0:	f7ff fe0e 	bl	80084d0 <LL_RCC_MSI_SetRange>

  /* Set MSITRIM bits to the reset value*/
  LL_RCC_MSI_SetCalibTrimming(0);
 80088b4:	2000      	movs	r0, #0
 80088b6:	f7ff fe34 	bl	8008522 <LL_RCC_MSI_SetCalibTrimming>

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x40U);
 80088ba:	2040      	movs	r0, #64	; 0x40
 80088bc:	f7ff fcac 	bl	8008218 <LL_RCC_HSI_SetCalibTrimming>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088c0:	f7fb fcaa 	bl	8004218 <HAL_GetTick>
 80088c4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 80088c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ca:	2200      	movs	r2, #0
 80088cc:	609a      	str	r2, [r3, #8]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80088ce:	e00a      	b.n	80088e6 <HAL_RCC_DeInit+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088d0:	f7fb fca2 	bl	8004218 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	f241 3288 	movw	r2, #5000	; 0x1388
 80088de:	4293      	cmp	r3, r2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_DeInit+0x6a>
    {
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e057      	b.n	8008996 <HAL_RCC_DeInit+0x11a>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80088e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 030c 	and.w	r3, r3, #12
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1ed      	bne.n	80088d0 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, PLLON, PLLSAI11ON, HSEPRE bits */
#if defined(SAI1)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 80088f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088fe:	4b28      	ldr	r3, [pc, #160]	; (80089a0 <HAL_RCC_DeInit+0x124>)
 8008900:	4013      	ands	r3, r2
 8008902:	600b      	str	r3, [r1, #0]
#else
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON);
#endif

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008904:	f7fb fc88 	bl	8004218 <HAL_GetTick>
 8008908:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 0U)
 800890a:	e008      	b.n	800891e <HAL_RCC_DeInit+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800890c:	f7fb fc84 	bl	8004218 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCC_DeInit+0xa2>
    {
      return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e03b      	b.n	8008996 <HAL_RCC_DeInit+0x11a>
  while (LL_RCC_PLL_IsReady() != 0U)
 800891e:	f7ff fefb 	bl	8008718 <LL_RCC_PLL_IsReady>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f1      	bne.n	800890c <HAL_RCC_DeInit+0x90>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLP_1 | RCC_PLLCFGR_PLLN_0);
 8008928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800892c:	4a1d      	ldr	r2, [pc, #116]	; (80089a4 <HAL_RCC_DeInit+0x128>)
 800892e:	60da      	str	r2, [r3, #12]

#if defined(SAI1)
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008930:	f7fb fc72 	bl	8004218 <HAL_GetTick>
 8008934:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is ready */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_DeInit+0xce>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008938:	f7fb fc6e 	bl	8004218 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_DeInit+0xce>
    {
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e025      	b.n	8008996 <HAL_RCC_DeInit+0x11a>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800894a:	f7ff ff1c 	bl	8008786 <LL_RCC_PLLSAI1_IsReady>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f1      	bne.n	8008938 <HAL_RCC_DeInit+0xbc>
    }
  }
  /* once PLLSAI1 is OFF, reset PLLSAI1CFGR register to default value */
  WRITE_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR_0 | RCC_PLLSAI1CFGR_PLLQ_0 | RCC_PLLSAI1CFGR_PLLP_1 | RCC_PLLSAI1CFGR_PLLN_0);
 8008954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008958:	4a12      	ldr	r2, [pc, #72]	; (80089a4 <HAL_RCC_DeInit+0x128>)
 800895a:	611a      	str	r2, [r3, #16]
#endif

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800895c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008960:	2200      	movs	r2, #0
 8008962:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8008964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800896c:	621a      	str	r2, [r3, #32]

  /* EXTCFGR reset*/
  LL_RCC_WriteReg(EXTCFGR, 0x00030000U);
 800896e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008972:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008976:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <HAL_RCC_DeInit+0x12c>)
 800897c:	4a0b      	ldr	r2, [pc, #44]	; (80089ac <HAL_RCC_DeInit+0x130>)
 800897e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_RCC_DeInit+0x134>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f7fa ff21 	bl	80037cc <HAL_InitTick>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_RCC_DeInit+0x118>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <HAL_RCC_DeInit+0x11a>
  }
  else
  {
    return HAL_OK;
 8008994:	2300      	movs	r3, #0
  }
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	faeef4ff 	.word	0xfaeef4ff
 80089a4:	22040100 	.word	0x22040100
 80089a8:	20000010 	.word	0x20000010
 80089ac:	003d0900 	.word	0x003d0900
 80089b0:	20000014 	.word	0x20000014

080089b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089b4:	b590      	push	{r4, r7, lr}
 80089b6:	b08d      	sub	sp, #52	; 0x34
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e37e      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 8092 	beq.w	8008af8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d4:	f7ff fdce 	bl	8008574 <LL_RCC_GetSysClkSource>
 80089d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089da:	f7ff fee6 	bl	80087aa <LL_RCC_PLL_GetMainSource>
 80089de:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <HAL_RCC_OscConfig+0x3e>
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	2b0c      	cmp	r3, #12
 80089ea:	d14c      	bne.n	8008a86 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d149      	bne.n	8008a86 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80089f2:	f7ff fd4d 	bl	8008490 <LL_RCC_MSI_IsReady>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_RCC_OscConfig+0x54>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e35d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008a0c:	f7ff fd74 	bl	80084f8 <LL_RCC_MSI_GetRange>
 8008a10:	4603      	mov	r3, r0
 8008a12:	429c      	cmp	r4, r3
 8008a14:	d914      	bls.n	8008a40 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fd5e 	bl	80094dc <RCC_SetFlashLatencyFromMSIRange>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e34c      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fd4e 	bl	80084d0 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fd72 	bl	8008522 <LL_RCC_MSI_SetCalibTrimming>
 8008a3e:	e013      	b.n	8008a68 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fd43 	bl	80084d0 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fd67 	bl	8008522 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fd3f 	bl	80094dc <RCC_SetFlashLatencyFromMSIRange>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e32d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008a68:	f000 fcdc 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	4ab3      	ldr	r2, [pc, #716]	; (8008d3c <HAL_RCC_OscConfig+0x388>)
 8008a70:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a72:	4bb3      	ldr	r3, [pc, #716]	; (8008d40 <HAL_RCC_OscConfig+0x38c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fa fea8 	bl	80037cc <HAL_InitTick>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d039      	beq.n	8008af6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e31e      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01e      	beq.n	8008acc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008a8e:	f7ff fce1 	bl	8008454 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a92:	f7fb fbc1 	bl	8004218 <HAL_GetTick>
 8008a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008a98:	e008      	b.n	8008aac <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a9a:	f7fb fbbd 	bl	8004218 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e30b      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008aac:	f7ff fcf0 	bl	8008490 <LL_RCC_MSI_IsReady>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0f1      	beq.n	8008a9a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7ff fd08 	bl	80084d0 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fd2c 	bl	8008522 <LL_RCC_MSI_SetCalibTrimming>
 8008aca:	e015      	b.n	8008af8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008acc:	f7ff fcd1 	bl	8008472 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ad0:	f7fb fba2 	bl	8004218 <HAL_GetTick>
 8008ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ad8:	f7fb fb9e 	bl	8004218 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e2ec      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008aea:	f7ff fcd1 	bl	8008490 <LL_RCC_MSI_IsReady>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1f1      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x124>
 8008af4:	e000      	b.n	8008af8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008af6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d04e      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b04:	f7ff fd36 	bl	8008574 <LL_RCC_GetSysClkSource>
 8008b08:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b0a:	f7ff fe4e 	bl	80087aa <LL_RCC_PLL_GetMainSource>
 8008b0e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	d005      	beq.n	8008b22 <HAL_RCC_OscConfig+0x16e>
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	2b0c      	cmp	r3, #12
 8008b1a:	d10d      	bne.n	8008b38 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d10a      	bne.n	8008b38 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b22:	f7ff fb37 	bl	8008194 <LL_RCC_HSE_IsReady>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d039      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x1ec>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d135      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e2c5      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b40:	d102      	bne.n	8008b48 <HAL_RCC_OscConfig+0x194>
 8008b42:	f7ff fb09 	bl	8008158 <LL_RCC_HSE_Enable>
 8008b46:	e001      	b.n	8008b4c <HAL_RCC_OscConfig+0x198>
 8008b48:	f7ff fb15 	bl	8008176 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d012      	beq.n	8008b7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b54:	f7fb fb60 	bl	8004218 <HAL_GetTick>
 8008b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b5c:	f7fb fb5c 	bl	8004218 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b64      	cmp	r3, #100	; 0x64
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e2aa      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008b6e:	f7ff fb11 	bl	8008194 <LL_RCC_HSE_IsReady>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0f1      	beq.n	8008b5c <HAL_RCC_OscConfig+0x1a8>
 8008b78:	e013      	b.n	8008ba2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b7a:	f7fb fb4d 	bl	8004218 <HAL_GetTick>
 8008b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b82:	f7fb fb49 	bl	8004218 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b64      	cmp	r3, #100	; 0x64
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e297      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008b94:	f7ff fafe 	bl	8008194 <LL_RCC_HSE_IsReady>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1f1      	bne.n	8008b82 <HAL_RCC_OscConfig+0x1ce>
 8008b9e:	e000      	b.n	8008ba2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d051      	beq.n	8008c52 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bae:	f7ff fce1 	bl	8008574 <LL_RCC_GetSysClkSource>
 8008bb2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bb4:	f7ff fdf9 	bl	80087aa <LL_RCC_PLL_GetMainSource>
 8008bb8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d005      	beq.n	8008bcc <HAL_RCC_OscConfig+0x218>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b0c      	cmp	r3, #12
 8008bc4:	d113      	bne.n	8008bee <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d110      	bne.n	8008bee <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bcc:	f7ff fb12 	bl	80081f4 <LL_RCC_HSI_IsReady>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <HAL_RCC_OscConfig+0x22e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e270      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fb16 	bl	8008218 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bec:	e031      	b.n	8008c52 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d019      	beq.n	8008c2a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf6:	f7ff fadf 	bl	80081b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfa:	f7fb fb0d 	bl	8004218 <HAL_GetTick>
 8008bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008c00:	e008      	b.n	8008c14 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c02:	f7fb fb09 	bl	8004218 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e257      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008c14:	f7ff faee 	bl	80081f4 <LL_RCC_HSI_IsReady>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0f1      	beq.n	8008c02 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff faf8 	bl	8008218 <LL_RCC_HSI_SetCalibTrimming>
 8008c28:	e013      	b.n	8008c52 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c2a:	f7ff fad4 	bl	80081d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c2e:	f7fb faf3 	bl	8004218 <HAL_GetTick>
 8008c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008c34:	e008      	b.n	8008c48 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c36:	f7fb faef 	bl	8004218 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e23d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008c48:	f7ff fad4 	bl	80081f4 <LL_RCC_HSI_IsReady>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f1      	bne.n	8008c36 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80a3 	beq.w	8008db2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d076      	beq.n	8008d62 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d046      	beq.n	8008d0e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008c80:	f7ff fb8b 	bl	800839a <LL_RCC_LSI1_IsReady>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d113      	bne.n	8008cb2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008c8a:	f7ff fb64 	bl	8008356 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c8e:	f7fb fac3 	bl	8004218 <HAL_GetTick>
 8008c92:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008c96:	f7fb fabf 	bl	8004218 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e20d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008ca8:	f7ff fb77 	bl	800839a <LL_RCC_LSI1_IsReady>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f1      	beq.n	8008c96 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008cb2:	f7ff fb84 	bl	80083be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb6:	f7fb faaf 	bl	8004218 <HAL_GetTick>
 8008cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008cbe:	f7fb faab 	bl	8004218 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d901      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e1f9      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008cd0:	f7ff fb97 	bl	8008402 <LL_RCC_LSI2_IsReady>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0f1      	beq.n	8008cbe <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff fba1 	bl	8008426 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008ce4:	f7ff fb48 	bl	8008378 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce8:	f7fb fa96 	bl	8004218 <HAL_GetTick>
 8008cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008cf0:	f7fb fa92 	bl	8004218 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e1e0      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008d02:	f7ff fb4a 	bl	800839a <LL_RCC_LSI1_IsReady>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f1      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x33c>
 8008d0c:	e051      	b.n	8008db2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008d0e:	f7ff fb22 	bl	8008356 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d12:	f7fb fa81 	bl	8004218 <HAL_GetTick>
 8008d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008d18:	e008      	b.n	8008d2c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008d1a:	f7fb fa7d 	bl	8004218 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d901      	bls.n	8008d2c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e1cb      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008d2c:	f7ff fb35 	bl	800839a <LL_RCC_LSI1_IsReady>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0f1      	beq.n	8008d1a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008d36:	f7ff fb53 	bl	80083e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008d3a:	e00c      	b.n	8008d56 <HAL_RCC_OscConfig+0x3a2>
 8008d3c:	20000010 	.word	0x20000010
 8008d40:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008d44:	f7fb fa68 	bl	8004218 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e1b6      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008d56:	f7ff fb54 	bl	8008402 <LL_RCC_LSI2_IsReady>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1f1      	bne.n	8008d44 <HAL_RCC_OscConfig+0x390>
 8008d60:	e027      	b.n	8008db2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008d62:	f7ff fb3d 	bl	80083e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d66:	f7fb fa57 	bl	8004218 <HAL_GetTick>
 8008d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008d6e:	f7fb fa53 	bl	8004218 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e1a1      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008d80:	f7ff fb3f 	bl	8008402 <LL_RCC_LSI2_IsReady>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f1      	bne.n	8008d6e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008d8a:	f7ff faf5 	bl	8008378 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8e:	f7fb fa43 	bl	8004218 <HAL_GetTick>
 8008d92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008d94:	e008      	b.n	8008da8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008d96:	f7fb fa3f 	bl	8004218 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e18d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008da8:	f7ff faf7 	bl	800839a <LL_RCC_LSI1_IsReady>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1f1      	bne.n	8008d96 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d05b      	beq.n	8008e76 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dbe:	4bb5      	ldr	r3, [pc, #724]	; (8009094 <HAL_RCC_OscConfig+0x6e0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d114      	bne.n	8008df4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008dca:	f7ff f985 	bl	80080d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dce:	f7fb fa23 	bl	8004218 <HAL_GetTick>
 8008dd2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dd4:	e008      	b.n	8008de8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dd6:	f7fb fa1f 	bl	8004218 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d901      	bls.n	8008de8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e16d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008de8:	4baa      	ldr	r3, [pc, #680]	; (8009094 <HAL_RCC_OscConfig+0x6e0>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0f0      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d102      	bne.n	8008e02 <HAL_RCC_OscConfig+0x44e>
 8008dfc:	f7ff fa55 	bl	80082aa <LL_RCC_LSE_Enable>
 8008e00:	e00c      	b.n	8008e1c <HAL_RCC_OscConfig+0x468>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	d104      	bne.n	8008e14 <HAL_RCC_OscConfig+0x460>
 8008e0a:	f7ff fa70 	bl	80082ee <LL_RCC_LSE_EnableBypass>
 8008e0e:	f7ff fa4c 	bl	80082aa <LL_RCC_LSE_Enable>
 8008e12:	e003      	b.n	8008e1c <HAL_RCC_OscConfig+0x468>
 8008e14:	f7ff fa5a 	bl	80082cc <LL_RCC_LSE_Disable>
 8008e18:	f7ff fa7a 	bl	8008310 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d014      	beq.n	8008e4e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e24:	f7fb f9f8 	bl	8004218 <HAL_GetTick>
 8008e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008e2a:	e00a      	b.n	8008e42 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e2c:	f7fb f9f4 	bl	8004218 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e140      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008e42:	f7ff fa76 	bl	8008332 <LL_RCC_LSE_IsReady>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0ef      	beq.n	8008e2c <HAL_RCC_OscConfig+0x478>
 8008e4c:	e013      	b.n	8008e76 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e4e:	f7fb f9e3 	bl	8004218 <HAL_GetTick>
 8008e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008e54:	e00a      	b.n	8008e6c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e56:	f7fb f9df 	bl	8004218 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d901      	bls.n	8008e6c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e12b      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008e6c:	f7ff fa61 	bl	8008332 <LL_RCC_LSE_IsReady>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1ef      	bne.n	8008e56 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d02c      	beq.n	8008edc <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d014      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e8a:	f7ff f9da 	bl	8008242 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e8e:	f7fb f9c3 	bl	8004218 <HAL_GetTick>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008e94:	e008      	b.n	8008ea8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e96:	f7fb f9bf 	bl	8004218 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e10d      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008ea8:	f7ff f9ed 	bl	8008286 <LL_RCC_HSI48_IsReady>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0f1      	beq.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
 8008eb2:	e013      	b.n	8008edc <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008eb4:	f7ff f9d6 	bl	8008264 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb8:	f7fb f9ae 	bl	8004218 <HAL_GetTick>
 8008ebc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008ebe:	e008      	b.n	8008ed2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ec0:	f7fb f9aa 	bl	8004218 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e0f8      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008ed2:	f7ff f9d8 	bl	8008286 <LL_RCC_HSI48_IsReady>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f1      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 80ee 	beq.w	80090c2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee6:	f7ff fb45 	bl	8008574 <LL_RCC_GetSysClkSource>
 8008eea:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	f040 80af 	bne.w	800905c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f003 0203 	and.w	r2, r3, #3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d123      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d11c      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d114      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d10d      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d106      	bne.n	8008f54 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d05d      	beq.n	8009010 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b0c      	cmp	r3, #12
 8008f58:	d058      	beq.n	800900c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0ab      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008f6c:	f7ff fbc5 	bl	80086fa <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f70:	f7fb f952 	bl	8004218 <HAL_GetTick>
 8008f74:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f78:	f7fb f94e 	bl	8004218 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e09c      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1ef      	bne.n	8008f78 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	4b3e      	ldr	r3, [pc, #248]	; (8009098 <HAL_RCC_OscConfig+0x6e4>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008faa:	4311      	orrs	r1, r2
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fb0:	0212      	lsls	r2, r2, #8
 8008fb2:	4311      	orrs	r1, r2
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fb8:	4311      	orrs	r1, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008fbe:	4311      	orrs	r1, r2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008fce:	f7ff fb85 	bl	80086dc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008fe2:	f7fb f919 	bl	8004218 <HAL_GetTick>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fe8:	e008      	b.n	8008ffc <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fea:	f7fb f915 	bl	8004218 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e063      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0ef      	beq.n	8008fea <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800900a:	e05a      	b.n	80090c2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e059      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d151      	bne.n	80090c2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800901e:	f7ff fb5d 	bl	80086dc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800902c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009030:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009032:	f7fb f8f1 	bl	8004218 <HAL_GetTick>
 8009036:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009038:	e008      	b.n	800904c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800903a:	f7fb f8ed 	bl	8004218 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e03b      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800904c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0ef      	beq.n	800903a <HAL_RCC_OscConfig+0x686>
 800905a:	e032      	b.n	80090c2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b0c      	cmp	r3, #12
 8009060:	d02d      	beq.n	80090be <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009062:	f7ff fb4a 	bl	80086fa <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8009066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8009076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009080:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8009084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009088:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908a:	f7fb f8c5 	bl	8004218 <HAL_GetTick>
 800908e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009090:	e00d      	b.n	80090ae <HAL_RCC_OscConfig+0x6fa>
 8009092:	bf00      	nop
 8009094:	58000400 	.word	0x58000400
 8009098:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800909c:	f7fb f8bc 	bl	8004218 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d901      	bls.n	80090ae <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1ef      	bne.n	800909c <HAL_RCC_OscConfig+0x6e8>
 80090bc:	e001      	b.n	80090c2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3734      	adds	r7, #52	; 0x34
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd90      	pop	{r4, r7, pc}

080090cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e12d      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090e0:	4b98      	ldr	r3, [pc, #608]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d91b      	bls.n	8009126 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ee:	4b95      	ldr	r3, [pc, #596]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f023 0207 	bic.w	r2, r3, #7
 80090f6:	4993      	ldr	r1, [pc, #588]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090fe:	f7fb f88b 	bl	8004218 <HAL_GetTick>
 8009102:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009104:	e008      	b.n	8009118 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009106:	f7fb f887 	bl	8004218 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e111      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009118:	4b8a      	ldr	r3, [pc, #552]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d1ef      	bne.n	8009106 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d016      	beq.n	8009160 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff fa28 	bl	800858c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800913c:	f7fb f86c 	bl	8004218 <HAL_GetTick>
 8009140:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009142:	e008      	b.n	8009156 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009144:	f7fb f868 	bl	8004218 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b02      	cmp	r3, #2
 8009150:	d901      	bls.n	8009156 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e0f2      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009156:	f7ff fb34 	bl	80087c2 <LL_RCC_IsActiveFlag_HPRE>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f1      	beq.n	8009144 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	d016      	beq.n	800919a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff fa1f 	bl	80085b4 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009176:	f7fb f84f 	bl	8004218 <HAL_GetTick>
 800917a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800917c:	e008      	b.n	8009190 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800917e:	f7fb f84b 	bl	8004218 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	2b02      	cmp	r3, #2
 800918a:	d901      	bls.n	8009190 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e0d5      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009190:	f7ff fb29 	bl	80087e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0f1      	beq.n	800917e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d016      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff fa18 	bl	80085e0 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80091b0:	f7fb f832 	bl	8004218 <HAL_GetTick>
 80091b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80091b8:	f7fb f82e 	bl	8004218 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e0b8      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80091ca:	f7ff fb1f 	bl	800880c <LL_RCC_IsActiveFlag_SHDHPRE>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d0f1      	beq.n	80091b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d016      	beq.n	800920e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fa12 	bl	800860e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80091ea:	f7fb f815 	bl	8004218 <HAL_GetTick>
 80091ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80091f0:	e008      	b.n	8009204 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80091f2:	f7fb f811 	bl	8004218 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d901      	bls.n	8009204 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e09b      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009204:	f7ff fb15 	bl	8008832 <LL_RCC_IsActiveFlag_PPRE1>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0f1      	beq.n	80091f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d017      	beq.n	800924a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	4618      	mov	r0, r3
 8009222:	f7ff fa08 	bl	8008636 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009226:	f7fa fff7 	bl	8004218 <HAL_GetTick>
 800922a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800922c:	e008      	b.n	8009240 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800922e:	f7fa fff3 	bl	8004218 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e07d      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009240:	f7ff fb09 	bl	8008856 <LL_RCC_IsActiveFlag_PPRE2>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0f1      	beq.n	800922e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d043      	beq.n	80092de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2b02      	cmp	r3, #2
 800925c:	d106      	bne.n	800926c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800925e:	f7fe ff99 	bl	8008194 <LL_RCC_HSE_IsReady>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d11e      	bne.n	80092a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e067      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d106      	bne.n	8009282 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009274:	f7ff fa50 	bl	8008718 <LL_RCC_PLL_IsReady>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d113      	bne.n	80092a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e05c      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800928a:	f7ff f901 	bl	8008490 <LL_RCC_MSI_IsReady>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d108      	bne.n	80092a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e051      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009298:	f7fe ffac 	bl	80081f4 <LL_RCC_HSI_IsReady>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e04a      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff f94e 	bl	800854c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b0:	f7fa ffb2 	bl	8004218 <HAL_GetTick>
 80092b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092b6:	e00a      	b.n	80092ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092b8:	f7fa ffae 	bl	8004218 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e036      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ce:	f7ff f951 	bl	8008574 <LL_RCC_GetSysClkSource>
 80092d2:	4602      	mov	r2, r0
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	429a      	cmp	r2, r3
 80092dc:	d1ec      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092de:	4b19      	ldr	r3, [pc, #100]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d21b      	bcs.n	8009324 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ec:	4b15      	ldr	r3, [pc, #84]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f023 0207 	bic.w	r2, r3, #7
 80092f4:	4913      	ldr	r1, [pc, #76]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092fc:	f7fa ff8c 	bl	8004218 <HAL_GetTick>
 8009300:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009302:	e008      	b.n	8009316 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009304:	f7fa ff88 	bl	8004218 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e012      	b.n	800933c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <HAL_RCC_ClockConfig+0x278>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d1ef      	bne.n	8009304 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009324:	f000 f87e 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 8009328:	4603      	mov	r3, r0
 800932a:	4a07      	ldr	r2, [pc, #28]	; (8009348 <HAL_RCC_ClockConfig+0x27c>)
 800932c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800932e:	f7fa ff7f 	bl	8004230 <HAL_GetTickPrio>
 8009332:	4603      	mov	r3, r0
 8009334:	4618      	mov	r0, r3
 8009336:	f7fa fa49 	bl	80037cc <HAL_InitTick>
 800933a:	4603      	mov	r3, r0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	58004000 	.word	0x58004000
 8009348:	20000010 	.word	0x20000010

0800934c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800934c:	b590      	push	{r4, r7, lr}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009352:	f7ff f90f 	bl	8008574 <LL_RCC_GetSysClkSource>
 8009356:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800935e:	f7ff f8cb 	bl	80084f8 <LL_RCC_MSI_GetRange>
 8009362:	4603      	mov	r3, r0
 8009364:	091b      	lsrs	r3, r3, #4
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <HAL_RCC_GetSysClockFreq+0xcc>)
 800936c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	e04b      	b.n	800940c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b04      	cmp	r3, #4
 8009378:	d102      	bne.n	8009380 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800937a:	4b28      	ldr	r3, [pc, #160]	; (800941c <HAL_RCC_GetSysClockFreq+0xd0>)
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e045      	b.n	800940c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b08      	cmp	r3, #8
 8009384:	d10a      	bne.n	800939c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009386:	f7fe fed5 	bl	8008134 <LL_RCC_HSE_IsEnabledDiv2>
 800938a:	4603      	mov	r3, r0
 800938c:	2b01      	cmp	r3, #1
 800938e:	d102      	bne.n	8009396 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009390:	4b22      	ldr	r3, [pc, #136]	; (800941c <HAL_RCC_GetSysClockFreq+0xd0>)
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e03a      	b.n	800940c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009396:	4b22      	ldr	r3, [pc, #136]	; (8009420 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	e037      	b.n	800940c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800939c:	f7ff fa05 	bl	80087aa <LL_RCC_PLL_GetMainSource>
 80093a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d003      	beq.n	80093b0 <HAL_RCC_GetSysClockFreq+0x64>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d003      	beq.n	80093b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80093ae:	e00d      	b.n	80093cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80093b0:	4b1a      	ldr	r3, [pc, #104]	; (800941c <HAL_RCC_GetSysClockFreq+0xd0>)
 80093b2:	60bb      	str	r3, [r7, #8]
        break;
 80093b4:	e015      	b.n	80093e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80093b6:	f7fe febd 	bl	8008134 <LL_RCC_HSE_IsEnabledDiv2>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d102      	bne.n	80093c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80093c0:	4b16      	ldr	r3, [pc, #88]	; (800941c <HAL_RCC_GetSysClockFreq+0xd0>)
 80093c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80093c4:	e00d      	b.n	80093e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80093c6:	4b16      	ldr	r3, [pc, #88]	; (8009420 <HAL_RCC_GetSysClockFreq+0xd4>)
 80093c8:	60bb      	str	r3, [r7, #8]
        break;
 80093ca:	e00a      	b.n	80093e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80093cc:	f7ff f894 	bl	80084f8 <LL_RCC_MSI_GetRange>
 80093d0:	4603      	mov	r3, r0
 80093d2:	091b      	lsrs	r3, r3, #4
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	4a0f      	ldr	r2, [pc, #60]	; (8009418 <HAL_RCC_GetSysClockFreq+0xcc>)
 80093da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093de:	60bb      	str	r3, [r7, #8]
        break;
 80093e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80093e2:	f7ff f9ab 	bl	800873c <LL_RCC_PLL_GetN>
 80093e6:	4602      	mov	r2, r0
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	fb03 f402 	mul.w	r4, r3, r2
 80093ee:	f7ff f9be 	bl	800876e <LL_RCC_PLL_GetDivider>
 80093f2:	4603      	mov	r3, r0
 80093f4:	091b      	lsrs	r3, r3, #4
 80093f6:	3301      	adds	r3, #1
 80093f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80093fc:	f7ff f9ab 	bl	8008756 <LL_RCC_PLL_GetR>
 8009400:	4603      	mov	r3, r0
 8009402:	0f5b      	lsrs	r3, r3, #29
 8009404:	3301      	adds	r3, #1
 8009406:	fbb4 f3f3 	udiv	r3, r4, r3
 800940a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	bd90      	pop	{r4, r7, pc}
 8009416:	bf00      	nop
 8009418:	0801aa0c 	.word	0x0801aa0c
 800941c:	00f42400 	.word	0x00f42400
 8009420:	01e84800 	.word	0x01e84800

08009424 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009424:	b598      	push	{r3, r4, r7, lr}
 8009426:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009428:	f7ff ff90 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800942c:	4604      	mov	r4, r0
 800942e:	f7ff f916 	bl	800865e <LL_RCC_GetAHBPrescaler>
 8009432:	4603      	mov	r3, r0
 8009434:	091b      	lsrs	r3, r3, #4
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	4a03      	ldr	r2, [pc, #12]	; (8009448 <HAL_RCC_GetHCLKFreq+0x24>)
 800943c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009440:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009444:	4618      	mov	r0, r3
 8009446:	bd98      	pop	{r3, r4, r7, pc}
 8009448:	0801a9ac 	.word	0x0801a9ac

0800944c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800944c:	b598      	push	{r3, r4, r7, lr}
 800944e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009450:	f7ff ffe8 	bl	8009424 <HAL_RCC_GetHCLKFreq>
 8009454:	4604      	mov	r4, r0
 8009456:	f7ff f935 	bl	80086c4 <LL_RCC_GetAPB2Prescaler>
 800945a:	4603      	mov	r3, r0
 800945c:	0adb      	lsrs	r3, r3, #11
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	4a04      	ldr	r2, [pc, #16]	; (8009474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009468:	f003 031f 	and.w	r3, r3, #31
 800946c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009470:	4618      	mov	r0, r3
 8009472:	bd98      	pop	{r3, r4, r7, pc}
 8009474:	0801a9ec 	.word	0x0801a9ec

08009478 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	226f      	movs	r2, #111	; 0x6f
 8009486:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8009488:	f7ff f874 	bl	8008574 <LL_RCC_GetSysClkSource>
 800948c:	4602      	mov	r2, r0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8009492:	f7ff f8e4 	bl	800865e <LL_RCC_GetAHBPrescaler>
 8009496:	4602      	mov	r2, r0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800949c:	f7ff f906 	bl	80086ac <LL_RCC_GetAPB1Prescaler>
 80094a0:	4602      	mov	r2, r0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80094a6:	f7ff f90d 	bl	80086c4 <LL_RCC_GetAPB2Prescaler>
 80094aa:	4602      	mov	r2, r0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80094b0:	f7ff f8e1 	bl	8008676 <LL_C2_RCC_GetAHBPrescaler>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80094ba:	f7ff f8e9 	bl	8008690 <LL_RCC_GetAHB4Prescaler>
 80094be:	4602      	mov	r2, r0
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80094c4:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <HAL_RCC_GetClockConfig+0x60>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0207 	and.w	r2, r3, #7
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	601a      	str	r2, [r3, #0]
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58004000 	.word	0x58004000

080094dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2bb0      	cmp	r3, #176	; 0xb0
 80094e8:	d903      	bls.n	80094f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80094ea:	4b15      	ldr	r3, [pc, #84]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e007      	b.n	8009502 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	091b      	lsrs	r3, r3, #4
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	4a11      	ldr	r2, [pc, #68]	; (8009540 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80094fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009500:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8009502:	f7ff f8c5 	bl	8008690 <LL_RCC_GetAHB4Prescaler>
 8009506:	4603      	mov	r3, r0
 8009508:	091b      	lsrs	r3, r3, #4
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	4a0d      	ldr	r2, [pc, #52]	; (8009544 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8009510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	fbb2 f3f3 	udiv	r3, r2, r3
 800951a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4a0a      	ldr	r2, [pc, #40]	; (8009548 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	0c9c      	lsrs	r4, r3, #18
 8009526:	f7fe fde7 	bl	80080f8 <HAL_PWREx_GetVoltageRange>
 800952a:	4603      	mov	r3, r0
 800952c:	4619      	mov	r1, r3
 800952e:	4620      	mov	r0, r4
 8009530:	f000 f80c 	bl	800954c <RCC_SetFlashLatency>
 8009534:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	bd90      	pop	{r4, r7, pc}
 800953e:	bf00      	nop
 8009540:	0801aa0c 	.word	0x0801aa0c
 8009544:	0801a9ac 	.word	0x0801a9ac
 8009548:	431bde83 	.word	0x431bde83

0800954c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800954c:	b590      	push	{r4, r7, lr}
 800954e:	b093      	sub	sp, #76	; 0x4c
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009556:	4b39      	ldr	r3, [pc, #228]	; (800963c <RCC_SetFlashLatency+0xf0>)
 8009558:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800955c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800955e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009562:	4a37      	ldr	r2, [pc, #220]	; (8009640 <RCC_SetFlashLatency+0xf4>)
 8009564:	f107 031c 	add.w	r3, r7, #28
 8009568:	ca07      	ldmia	r2, {r0, r1, r2}
 800956a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800956e:	4b35      	ldr	r3, [pc, #212]	; (8009644 <RCC_SetFlashLatency+0xf8>)
 8009570:	f107 040c 	add.w	r4, r7, #12
 8009574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800957a:	2300      	movs	r3, #0
 800957c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009584:	d11c      	bne.n	80095c0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009586:	2300      	movs	r3, #0
 8009588:	643b      	str	r3, [r7, #64]	; 0x40
 800958a:	e015      	b.n	80095b8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800958c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009594:	4413      	add	r3, r2
 8009596:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d808      	bhi.n	80095b2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80095a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095a8:	4413      	add	r3, r2
 80095aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80095ae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80095b0:	e022      	b.n	80095f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80095b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b4:	3301      	adds	r3, #1
 80095b6:	643b      	str	r3, [r7, #64]	; 0x40
 80095b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d9e6      	bls.n	800958c <RCC_SetFlashLatency+0x40>
 80095be:	e01b      	b.n	80095f8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80095c0:	2300      	movs	r3, #0
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c4:	e015      	b.n	80095f2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80095c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095ce:	4413      	add	r3, r2
 80095d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d808      	bhi.n	80095ec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80095da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095e2:	4413      	add	r3, r2
 80095e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80095e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80095ea:	e005      	b.n	80095f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80095ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ee:	3301      	adds	r3, #1
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d9e6      	bls.n	80095c6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80095f8:	4b13      	ldr	r3, [pc, #76]	; (8009648 <RCC_SetFlashLatency+0xfc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f023 0207 	bic.w	r2, r3, #7
 8009600:	4911      	ldr	r1, [pc, #68]	; (8009648 <RCC_SetFlashLatency+0xfc>)
 8009602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009604:	4313      	orrs	r3, r2
 8009606:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009608:	f7fa fe06 	bl	8004218 <HAL_GetTick>
 800960c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800960e:	e008      	b.n	8009622 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009610:	f7fa fe02 	bl	8004218 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d901      	bls.n	8009622 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e007      	b.n	8009632 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009622:	4b09      	ldr	r3, [pc, #36]	; (8009648 <RCC_SetFlashLatency+0xfc>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800962c:	429a      	cmp	r2, r3
 800962e:	d1ef      	bne.n	8009610 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	374c      	adds	r7, #76	; 0x4c
 8009636:	46bd      	mov	sp, r7
 8009638:	bd90      	pop	{r4, r7, pc}
 800963a:	bf00      	nop
 800963c:	0801a528 	.word	0x0801a528
 8009640:	0801a538 	.word	0x0801a538
 8009644:	0801a544 	.word	0x0801a544
 8009648:	58004000 	.word	0x58004000

0800964c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800965a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800965e:	d101      	bne.n	8009664 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <LL_RCC_HSE_IsReady>:
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009682:	d101      	bne.n	8009688 <LL_RCC_HSE_IsReady+0x18>
 8009684:	2301      	movs	r3, #1
 8009686:	e000      	b.n	800968a <LL_RCC_HSE_IsReady+0x1a>
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <LL_RCC_HSI_IsReady>:
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096a6:	d101      	bne.n	80096ac <LL_RCC_HSI_IsReady+0x18>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <LL_RCC_HSI_IsReady+0x1a>
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <LL_RCC_HSI48_IsReady>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80096bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d101      	bne.n	80096d0 <LL_RCC_HSI48_IsReady+0x18>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <LL_RCC_HSI48_IsReady+0x1a>
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <LL_RCC_LSE_IsEnabled>:
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80096e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <LL_RCC_LSE_IsEnabled+0x18>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e000      	b.n	80096f6 <LL_RCC_LSE_IsEnabled+0x1a>
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <LL_RCC_LSE_IsReady>:
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b02      	cmp	r3, #2
 8009712:	d101      	bne.n	8009718 <LL_RCC_LSE_IsReady+0x18>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <LL_RCC_LSE_IsReady+0x1a>
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <LL_RCC_LSI1_IsReady>:
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8009728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800972c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d101      	bne.n	800973c <LL_RCC_LSI1_IsReady+0x18>
 8009738:	2301      	movs	r3, #1
 800973a:	e000      	b.n	800973e <LL_RCC_LSI1_IsReady+0x1a>
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <LL_RCC_LSI2_IsReady>:
{
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800974c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b08      	cmp	r3, #8
 800975a:	d101      	bne.n	8009760 <LL_RCC_LSI2_IsReady+0x18>
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <LL_RCC_LSI2_IsReady+0x1a>
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <LL_RCC_MSI_IsReady>:
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b02      	cmp	r3, #2
 800977c:	d101      	bne.n	8009782 <LL_RCC_MSI_IsReady+0x16>
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <LL_RCC_MSI_IsReady+0x18>
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <LL_RCC_MSI_EnablePLLMode>:
{
 800978e:	b480      	push	{r7}
 8009790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8009792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800979c:	f043 0304 	orr.w	r3, r3, #4
 80097a0:	6013      	str	r3, [r2, #0]
}
 80097a2:	bf00      	nop
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <LL_RCC_MSI_GetRange>:
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80097b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097bc:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2bb0      	cmp	r3, #176	; 0xb0
 80097c2:	d901      	bls.n	80097c8 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80097c4:	23b0      	movs	r3, #176	; 0xb0
 80097c6:	607b      	str	r3, [r7, #4]
  return msiRange;
 80097c8:	687b      	ldr	r3, [r7, #4]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <LL_RCC_SetRFWKPClockSource>:
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80097de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr

08009802 <LL_RCC_GetRFWKPClockSource>:
{
 8009802:	b480      	push	{r7}
 8009804:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8009806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800980a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800980e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8009812:	4618      	mov	r0, r3
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <LL_RCC_GetAHBPrescaler>:
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800982a:	4618      	mov	r0, r3
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <LL_RCC_GetAPB1Prescaler>:
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8009842:	4618      	mov	r0, r3
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <LL_RCC_GetAPB2Prescaler>:
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800985a:	4618      	mov	r0, r3
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <LL_RCC_SetSMPSClockSource>:
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800986c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	f023 0203 	bic.w	r2, r3, #3
 8009876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4313      	orrs	r3, r2
 800987e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <LL_RCC_GetSMPSClockSource>:
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8009890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <LL_RCC_SetSMPSPrescaler>:
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80098ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80098b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4313      	orrs	r3, r2
 80098be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <LL_RCC_GetSMPSPrescaler>:
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80098d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 80098da:	4618      	mov	r0, r3
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <LL_RCC_SetUSARTClockSource>:
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80098ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f4:	f023 0203 	bic.w	r2, r3, #3
 80098f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4313      	orrs	r3, r2
 8009900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <LL_RCC_SetLPUARTClockSource>:
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800991c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009920:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4313      	orrs	r3, r2
 800992c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <LL_RCC_SetI2CClockSource>:
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009948:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	091b      	lsrs	r3, r3, #4
 8009950:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009954:	43db      	mvns	r3, r3
 8009956:	401a      	ands	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009964:	4313      	orrs	r3, r2
 8009966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <LL_RCC_SetLPTIMClockSource>:
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800997e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0c1b      	lsrs	r3, r3, #16
 800998a:	041b      	lsls	r3, r3, #16
 800998c:	43db      	mvns	r3, r3
 800998e:	401a      	ands	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009998:	4313      	orrs	r3, r2
 800999a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <LL_RCC_SetSAIClockSource>:
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80099b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <LL_RCC_SetRNGClockSource>:
{
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80099de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80099ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <LL_RCC_SetCLK48ClockSource>:
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <LL_RCC_SetUSBClockSource>:
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff ffe3 	bl	8009a02 <LL_RCC_SetCLK48ClockSource>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <LL_RCC_SetADCClockSource>:
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <LL_RCC_GetUSARTClockSource>:
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4013      	ands	r3, r2
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <LL_RCC_GetLPUARTClockSource>:
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4013      	ands	r3, r2
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <LL_RCC_GetI2CClockSource>:
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8009ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009abc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	091a      	lsrs	r2, r3, #4
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	011b      	lsls	r3, r3, #4
 8009aca:	4313      	orrs	r3, r2
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <LL_RCC_GetLPTIMClockSource>:
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8009ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ae4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4013      	ands	r3, r2
 8009aec:	0c1a      	lsrs	r2, r3, #16
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4313      	orrs	r3, r2
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <LL_RCC_GetSAIClockSource>:
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8009b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4013      	ands	r3, r2
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <LL_RCC_GetRNGClockSource>:
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8009b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4013      	ands	r3, r2
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <LL_RCC_GetCLK48ClockSource>:
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8009b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4013      	ands	r3, r2
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <LL_RCC_GetUSBClockSource>:
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff ffe9 	bl	8009b3e <LL_RCC_GetCLK48ClockSource>
 8009b6c:	4603      	mov	r3, r0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <LL_RCC_GetADCClockSource>:
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8009b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4013      	ands	r3, r2
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <LL_RCC_SetRTCClockSource>:
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <LL_RCC_GetRTCClockSource>:
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <LL_RCC_ForceBackupDomainReset>:
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009bf4:	bf00      	nop
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <LL_RCC_ReleaseBackupDomainReset>:
{
 8009bfe:	b480      	push	{r7}
 8009c00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009c16:	bf00      	nop
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <LL_RCC_PLL_IsReady>:
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c32:	d101      	bne.n	8009c38 <LL_RCC_PLL_IsReady+0x18>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e000      	b.n	8009c3a <LL_RCC_PLL_IsReady+0x1a>
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <LL_RCC_PLL_GetN>:
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	0a1b      	lsrs	r3, r3, #8
 8009c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <LL_RCC_PLL_GetP>:
{
 8009c5e:	b480      	push	{r7}
 8009c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <LL_RCC_PLL_GetQ>:
{
 8009c76:	b480      	push	{r7}
 8009c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8009c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <LL_RCC_PLL_GetDivider>:
{
 8009c8e:	b480      	push	{r7}
 8009c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <LL_RCC_PLLSAI1_Enable>:
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cb8:	6013      	str	r3, [r2, #0]
}
 8009cba:	bf00      	nop
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <LL_RCC_PLLSAI1_Disable>:
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cd6:	6013      	str	r3, [r2, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <LL_RCC_PLLSAI1_IsReady>:
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf4:	d101      	bne.n	8009cfa <LL_RCC_PLLSAI1_IsReady+0x18>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e000      	b.n	8009cfc <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <LL_RCC_PLLSAI1_GetN>:
{
 8009d06:	b480      	push	{r7}
 8009d08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8009d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	0a1b      	lsrs	r3, r3, #8
 8009d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <LL_RCC_PLLSAI1_GetP>:
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8009d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <LL_RCC_PLLSAI1_GetQ>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8009d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <LL_RCC_PLLSAI1_GetR>:
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8009d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <LL_RCC_PLL_GetMainSource>:
{
 8009d68:	b480      	push	{r7}
 8009d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f003 0303 	and.w	r3, r3, #3
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009d88:	2300      	movs	r3, #0
 8009d8a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d034      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009da4:	d021      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009da6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009daa:	d81b      	bhi.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009db0:	d01d      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009db2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009db6:	d815      	bhi.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dc0:	d110      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009dd2:	e00d      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fd64 	bl	800a8a6 <RCCEx_PLLSAI1_ConfigNP>
 8009dde:	4603      	mov	r3, r0
 8009de0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009de2:	e005      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	77fb      	strb	r3, [r7, #31]
        break;
 8009de8:	e002      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009dea:	bf00      	nop
 8009dec:	e000      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df0:	7ffb      	ldrb	r3, [r7, #31]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fdd5 	bl	80099aa <LL_RCC_SetSAIClockSource>
 8009e00:	e001      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e02:	7ffb      	ldrb	r3, [r7, #31]
 8009e04:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d046      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009e12:	f7ff fed6 	bl	8009bc2 <LL_RCC_GetRTCClockSource>
 8009e16:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d03c      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009e22:	f7fe f959 	bl	80080d8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d105      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff feb0 	bl	8009b96 <LL_RCC_SetRTCClockSource>
 8009e36:	e02e      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e40:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009e42:	f7ff fecb 	bl	8009bdc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009e46:	f7ff feda 	bl	8009bfe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009e62:	f7ff fc3b 	bl	80096dc <LL_RCC_LSE_IsEnabled>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d114      	bne.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e6c:	f7fa f9d4 	bl	8004218 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009e72:	e00b      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e74:	f7fa f9d0 	bl	8004218 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d902      	bls.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	77fb      	strb	r3, [r7, #31]
              break;
 8009e8a:	e004      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009e8c:	f7ff fc38 	bl	8009700 <LL_RCC_LSE_IsReady>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d1ee      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009e96:	7ffb      	ldrb	r3, [r7, #31]
 8009e98:	77bb      	strb	r3, [r7, #30]
 8009e9a:	e001      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9c:	7ffb      	ldrb	r3, [r7, #31]
 8009e9e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff fd17 	bl	80098e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d004      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fd22 	bl	8009910 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0310 	and.w	r3, r3, #16
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff fd4a 	bl	8009976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0320 	and.w	r3, r3, #32
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d004      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fd3f 	bl	8009976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff fd17 	bl	800993c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fd0c 	bl	800993c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d022      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff fd7a 	bl	8009a2e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f42:	d107      	bne.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f52:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009f5c:	d10b      	bne.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fcfa 	bl	800a95c <RCCEx_PLLSAI1_ConfigNQ>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8009f6c:	7ffb      	ldrb	r3, [r7, #31]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8009f72:	7ffb      	ldrb	r3, [r7, #31]
 8009f74:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d02b      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8a:	d008      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f94:	d003      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d105      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff fd17 	bl	80099d6 <LL_RCC_SetRNGClockSource>
 8009fa8:	e00a      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	f7ff fd0e 	bl	80099d6 <LL_RCC_SetRNGClockSource>
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fd21 	bl	8009a02 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009fc8:	d107      	bne.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fd8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d022      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fd2a 	bl	8009a44 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff8:	d107      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a008:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a012:	d10b      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3304      	adds	r3, #4
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 fcfa 	bl	800aa12 <RCCEx_PLLSAI1_ConfigNR>
 800a01e:	4603      	mov	r3, r0
 800a020:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800a022:	7ffb      	ldrb	r3, [r7, #31]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800a028:	7ffb      	ldrb	r3, [r7, #31]
 800a02a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7ff fbca 	bl	80097d6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d009      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff fc26 	bl	80098a4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff fc01 	bl	8009864 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800a062:	7fbb      	ldrb	r3, [r7, #30]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3720      	adds	r7, #32
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b093      	sub	sp, #76	; 0x4c
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 800a078:	f7ff fc28 	bl	80098cc <LL_RCC_GetSMPSPrescaler>
 800a07c:	4603      	mov	r3, r0
 800a07e:	091b      	lsrs	r3, r3, #4
 800a080:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a088:	d12d      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 800a08a:	f7ff fd9a 	bl	8009bc2 <LL_RCC_GetRTCClockSource>
 800a08e:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a096:	d109      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800a098:	f7ff fb32 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	f040 83d8 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800a0a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a0aa:	e3d3      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b2:	d110      	bne.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800a0b4:	f7ff fb36 	bl	8009724 <LL_RCC_LSI1_IsReady>
 800a0b8:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800a0ba:	f7ff fb45 	bl	8009748 <LL_RCC_LSI2_IsReady>
 800a0be:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d003      	beq.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	f040 83c3 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800a0ce:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a0d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d4:	e3be      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0dc:	f040 83ba 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 800a0e0:	4bba      	ldr	r3, [pc, #744]	; (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800a0e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0e4:	e3b6      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d130      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 800a0ec:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 800a0f0:	f7ff fd05 	bl	8009afe <LL_RCC_GetSAIClockSource>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0fa:	d008      	beq.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800a0fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a100:	d822      	bhi.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00c      	beq.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800a106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a10a:	d013      	beq.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800a10c:	e01c      	b.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 800a10e:	f7ff fac1 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a112:	4603      	mov	r3, r0
 800a114:	2b01      	cmp	r3, #1
 800a116:	f040 837e 	bne.w	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 800a11a:	4bad      	ldr	r3, [pc, #692]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800a11c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a11e:	e37a      	b.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800a120:	f7ff fddf 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a124:	4603      	mov	r3, r0
 800a126:	2b01      	cmp	r3, #1
 800a128:	f040 8377 	bne.w	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 800a12c:	f000 fdce 	bl	800accc <RCC_PLLSAI1_GetFreqDomain_P>
 800a130:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a132:	e372      	b.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 800a134:	f7ff fd74 	bl	8009c20 <LL_RCC_PLL_IsReady>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	f040 836f 	bne.w	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 800a140:	f000 fcc2 	bl	800aac8 <RCC_PLL_GetFreqDomain_P>
 800a144:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a146:	e36a      	b.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a148:	4ba2      	ldr	r3, [pc, #648]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 800a14a:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 800a14c:	e382      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a154:	d168      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800a156:	f000 fb87 	bl	800a868 <HAL_RCCEx_GetRngCLKSource>
 800a15a:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a162:	d110      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800a164:	f7ff fade 	bl	8009724 <LL_RCC_LSI1_IsReady>
 800a168:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800a16a:	f7ff faed 	bl	8009748 <LL_RCC_LSI2_IsReady>
 800a16e:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d003      	beq.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	f040 836b 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800a17e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a182:	647b      	str	r3, [r7, #68]	; 0x44
 800a184:	e366      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a18c:	d109      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800a18e:	f7ff fab7 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a192:	4603      	mov	r3, r0
 800a194:	2b01      	cmp	r3, #1
 800a196:	f040 835d 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800a19a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a19e:	647b      	str	r3, [r7, #68]	; 0x44
 800a1a0:	e358      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800a1a8:	d10e      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 800a1aa:	f7ff fd39 	bl	8009c20 <LL_RCC_PLL_IsReady>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	f040 834f 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 800a1b6:	f000 fcdd 	bl	800ab74 <RCC_PLL_GetFreqDomain_Q>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4a86      	ldr	r2, [pc, #536]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800a1be:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c6:	e345      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 800a1ce:	d114      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 800a1d0:	f7ff facc 	bl	800976c <LL_RCC_MSI_IsReady>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	f040 833c 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 800a1dc:	f7ff fae6 	bl	80097ac <LL_RCC_MSI_GetRange>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	091b      	lsrs	r3, r3, #4
 800a1e4:	f003 030f 	and.w	r3, r3, #15
 800a1e8:	4a7c      	ldr	r2, [pc, #496]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800a1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ee:	4a7a      	ldr	r2, [pc, #488]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800a1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f4:	085b      	lsrs	r3, r3, #1
 800a1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a1f8:	e32c      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 800a200:	d109      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800a202:	f7ff fd6e 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a206:	4603      	mov	r3, r0
 800a208:	2b01      	cmp	r3, #1
 800a20a:	f040 8323 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800a20e:	f000 fdb3 	bl	800ad78 <RCC_PLLSAI1_GetFreqDomain_Q>
 800a212:	6478      	str	r0, [r7, #68]	; 0x44
 800a214:	e31e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 800a216:	f7ff fa4f 	bl	80096b8 <LL_RCC_HSI48_IsReady>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	f040 8319 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 800a222:	4b6b      	ldr	r3, [pc, #428]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800a224:	647b      	str	r3, [r7, #68]	; 0x44
 800a226:	e315      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22e:	d13f      	bne.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 800a230:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800a234:	f7ff fc93 	bl	8009b5e <LL_RCC_GetUSBClockSource>
 800a238:	4603      	mov	r3, r0
 800a23a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a23e:	d01d      	beq.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800a240:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a244:	d82b      	bhi.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800a246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a24a:	d003      	beq.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800a24c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a250:	d00a      	beq.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a252:	e024      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800a254:	f7ff fd45 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	f040 82e1 	bne.w	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800a260:	f000 fd8a 	bl	800ad78 <RCC_PLLSAI1_GetFreqDomain_Q>
 800a264:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a266:	e2dc      	b.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 800a268:	f7ff fcda 	bl	8009c20 <LL_RCC_PLL_IsReady>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b01      	cmp	r3, #1
 800a270:	f040 82d9 	bne.w	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 800a274:	f000 fc7e 	bl	800ab74 <RCC_PLL_GetFreqDomain_Q>
 800a278:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a27a:	e2d4      	b.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 800a27c:	f7ff fa76 	bl	800976c <LL_RCC_MSI_IsReady>
 800a280:	4603      	mov	r3, r0
 800a282:	2b01      	cmp	r3, #1
 800a284:	f040 82d1 	bne.w	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a288:	f7ff fa90 	bl	80097ac <LL_RCC_MSI_GetRange>
 800a28c:	4603      	mov	r3, r0
 800a28e:	091b      	lsrs	r3, r3, #4
 800a290:	f003 030f 	and.w	r3, r3, #15
 800a294:	4a51      	ldr	r2, [pc, #324]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800a296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a29a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a29c:	e2c5      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 800a29e:	f7ff fa0b 	bl	80096b8 <LL_RCC_HSI48_IsReady>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	f040 82c2 	bne.w	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 800a2aa:	4b4d      	ldr	r3, [pc, #308]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a2ae:	e2be      	b.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d140      	bne.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 800a2b6:	2003      	movs	r0, #3
 800a2b8:	f7ff fbda 	bl	8009a70 <LL_RCC_GetUSARTClockSource>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d013      	beq.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d81b      	bhi.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d002      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d004      	beq.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800a2ce:	e016      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800a2d0:	f7ff f83c 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a2d4:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a2d6:	e2bd      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800a2d8:	f7ff f9dc 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	f040 82a7 	bne.w	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 800a2e4:	4b3a      	ldr	r3, [pc, #232]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800a2e6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a2e8:	e2a3      	b.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 800a2ea:	f7ff fa09 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	f040 82a0 	bne.w	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 800a2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2fa:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a2fc:	e29b      	b.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800a2fe:	f7ff f825 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a302:	4604      	mov	r4, r0
 800a304:	f7ff fa8a 	bl	800981c <LL_RCC_GetAHBPrescaler>
 800a308:	4603      	mov	r3, r0
 800a30a:	091b      	lsrs	r3, r3, #4
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	4a34      	ldr	r2, [pc, #208]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800a312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a316:	fbb4 f4f3 	udiv	r4, r4, r3
 800a31a:	f7ff fa97 	bl	800984c <LL_RCC_GetAPB2Prescaler>
 800a31e:	4603      	mov	r3, r0
 800a320:	0adb      	lsrs	r3, r3, #11
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	4a30      	ldr	r2, [pc, #192]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800a328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a32c:	f003 031f 	and.w	r3, r3, #31
 800a330:	fa24 f303 	lsr.w	r3, r4, r3
 800a334:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 800a336:	e28d      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d156      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 800a33e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a342:	f7ff fba5 	bl	8009a90 <LL_RCC_GetLPUARTClockSource>
 800a346:	4603      	mov	r3, r0
 800a348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a34c:	d016      	beq.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800a34e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a352:	d81d      	bhi.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800a354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a358:	d003      	beq.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800a35a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a35e:	d004      	beq.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800a360:	e016      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800a362:	f7fe fff3 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a366:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a368:	e274      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800a36a:	f7ff f993 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b01      	cmp	r3, #1
 800a372:	f040 8262 	bne.w	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 800a376:	4b16      	ldr	r3, [pc, #88]	; (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800a378:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a37a:	e25e      	b.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 800a37c:	f7ff f9c0 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a380:	4603      	mov	r3, r0
 800a382:	2b01      	cmp	r3, #1
 800a384:	f040 825b 	bne.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 800a388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a38c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a38e:	e256      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800a390:	f7fe ffdc 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a394:	4604      	mov	r4, r0
 800a396:	f7ff fa41 	bl	800981c <LL_RCC_GetAHBPrescaler>
 800a39a:	4603      	mov	r3, r0
 800a39c:	091b      	lsrs	r3, r3, #4
 800a39e:	f003 030f 	and.w	r3, r3, #15
 800a3a2:	4a10      	ldr	r2, [pc, #64]	; (800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800a3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a8:	fbb4 f4f3 	udiv	r4, r4, r3
 800a3ac:	f7ff fa42 	bl	8009834 <LL_RCC_GetAPB1Prescaler>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	0a1b      	lsrs	r3, r3, #8
 800a3b4:	f003 0307 	and.w	r3, r3, #7
 800a3b8:	4a0b      	ldr	r2, [pc, #44]	; (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3be:	f003 031f 	and.w	r3, r3, #31
 800a3c2:	fa24 f303 	lsr.w	r3, r4, r3
 800a3c6:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800a3c8:	e244      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800a3ca:	bf00      	nop
 800a3cc:	000f4240 	.word	0x000f4240
 800a3d0:	00f42400 	.word	0x00f42400
 800a3d4:	001fff68 	.word	0x001fff68
 800a3d8:	aaaaaaab 	.word	0xaaaaaaab
 800a3dc:	0801aa0c 	.word	0x0801aa0c
 800a3e0:	02dc6c00 	.word	0x02dc6c00
 800a3e4:	0801a9ac 	.word	0x0801a9ac
 800a3e8:	0801a9ec 	.word	0x0801a9ec
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f2:	d12a      	bne.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 800a3f4:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 800a3f8:	f7ff fbbd 	bl	8009b76 <LL_RCC_GetADCClockSource>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a402:	d014      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a404:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a408:	f200 821b 	bhi.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 800a40c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a410:	d003      	beq.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a416:	d00e      	beq.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 800a418:	e213      	b.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800a41a:	f7ff fc62 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b01      	cmp	r3, #1
 800a422:	f040 8210 	bne.w	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800a426:	f000 fbfb 	bl	800ac20 <RCC_PLLSAI1_GetFreqDomain_R>
 800a42a:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a42c:	e20b      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 800a42e:	f7fe ff8d 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a432:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a434:	e20e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 800a436:	f7ff fbf3 	bl	8009c20 <LL_RCC_PLL_IsReady>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	f040 8204 	bne.w	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800a442:	f000 fb41 	bl	800aac8 <RCC_PLL_GetFreqDomain_P>
 800a446:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a448:	e1ff      	b.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d135      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 800a450:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800a454:	f7ff fb2c 	bl	8009ab0 <LL_RCC_GetI2CClockSource>
 800a458:	4603      	mov	r3, r0
 800a45a:	4ab7      	ldr	r2, [pc, #732]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d003      	beq.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800a460:	4ab6      	ldr	r2, [pc, #728]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d004      	beq.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800a466:	e00c      	b.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800a468:	f7fe ff70 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a46c:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a46e:	e1f1      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800a470:	f7ff f910 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a474:	4603      	mov	r3, r0
 800a476:	2b01      	cmp	r3, #1
 800a478:	f040 81e9 	bne.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 800a47c:	4bb0      	ldr	r3, [pc, #704]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800a47e:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a480:	e1e5      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800a482:	f7fe ff63 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a486:	4604      	mov	r4, r0
 800a488:	f7ff f9c8 	bl	800981c <LL_RCC_GetAHBPrescaler>
 800a48c:	4603      	mov	r3, r0
 800a48e:	091b      	lsrs	r3, r3, #4
 800a490:	f003 030f 	and.w	r3, r3, #15
 800a494:	4aab      	ldr	r2, [pc, #684]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800a496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a49a:	fbb4 f4f3 	udiv	r4, r4, r3
 800a49e:	f7ff f9c9 	bl	8009834 <LL_RCC_GetAPB1Prescaler>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	4aa7      	ldr	r2, [pc, #668]	; (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800a4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4b0:	f003 031f 	and.w	r3, r3, #31
 800a4b4:	fa24 f303 	lsr.w	r3, r4, r3
 800a4b8:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800a4ba:	e1cb      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b08      	cmp	r3, #8
 800a4c0:	d135      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 800a4c2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800a4c6:	f7ff faf3 	bl	8009ab0 <LL_RCC_GetI2CClockSource>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	4a9f      	ldr	r2, [pc, #636]	; (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d003      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800a4d2:	4a9f      	ldr	r2, [pc, #636]	; (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d004      	beq.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a4d8:	e00c      	b.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800a4da:	f7fe ff37 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a4de:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800a4e0:	e1b8      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800a4e2:	f7ff f8d7 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	f040 81b2 	bne.w	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 800a4ee:	4b94      	ldr	r3, [pc, #592]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800a4f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800a4f2:	e1ae      	b.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800a4f4:	f7fe ff2a 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	f7ff f98f 	bl	800981c <LL_RCC_GetAHBPrescaler>
 800a4fe:	4603      	mov	r3, r0
 800a500:	091b      	lsrs	r3, r3, #4
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	4a8f      	ldr	r2, [pc, #572]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800a508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a50c:	fbb4 f4f3 	udiv	r4, r4, r3
 800a510:	f7ff f990 	bl	8009834 <LL_RCC_GetAPB1Prescaler>
 800a514:	4603      	mov	r3, r0
 800a516:	0a1b      	lsrs	r3, r3, #8
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	4a8a      	ldr	r2, [pc, #552]	; (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800a51e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	fa24 f303 	lsr.w	r3, r4, r3
 800a52a:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 800a52c:	e192      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b10      	cmp	r3, #16
 800a532:	d151      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 800a534:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800a538:	f7ff face 	bl	8009ad8 <LL_RCC_GetLPTIMClockSource>
 800a53c:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	4a84      	ldr	r2, [pc, #528]	; (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d110      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800a546:	f7ff f8ed 	bl	8009724 <LL_RCC_LSI1_IsReady>
 800a54a:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800a54c:	f7ff f8fc 	bl	8009748 <LL_RCC_LSI2_IsReady>
 800a550:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	2b01      	cmp	r3, #1
 800a556:	d003      	beq.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	f040 817a 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800a560:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a564:	647b      	str	r3, [r7, #68]	; 0x44
 800a566:	e175      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	4a7b      	ldr	r2, [pc, #492]	; (800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d108      	bne.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800a570:	f7ff f890 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a574:	4603      	mov	r3, r0
 800a576:	2b01      	cmp	r3, #1
 800a578:	f040 816c 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 800a57c:	4b70      	ldr	r3, [pc, #448]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800a57e:	647b      	str	r3, [r7, #68]	; 0x44
 800a580:	e168      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800a588:	d109      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800a58a:	f7ff f8b9 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b01      	cmp	r3, #1
 800a592:	f040 815f 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800a596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
 800a59c:	e15a      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 800a59e:	f7fe fed5 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	f7ff f93a 	bl	800981c <LL_RCC_GetAHBPrescaler>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	091b      	lsrs	r3, r3, #4
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	4a64      	ldr	r2, [pc, #400]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800a5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5b6:	fbb4 f4f3 	udiv	r4, r4, r3
 800a5ba:	f7ff f93b 	bl	8009834 <LL_RCC_GetAPB1Prescaler>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	0a1b      	lsrs	r3, r3, #8
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	4a60      	ldr	r2, [pc, #384]	; (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800a5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5cc:	f003 031f 	and.w	r3, r3, #31
 800a5d0:	fa24 f303 	lsr.w	r3, r4, r3
 800a5d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d6:	e13d      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d151      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 800a5de:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800a5e2:	f7ff fa79 	bl	8009ad8 <LL_RCC_GetLPTIMClockSource>
 800a5e6:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 800a5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ea:	4a5c      	ldr	r2, [pc, #368]	; (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d110      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800a5f0:	f7ff f898 	bl	8009724 <LL_RCC_LSI1_IsReady>
 800a5f4:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 800a5f6:	f7ff f8a7 	bl	8009748 <LL_RCC_LSI2_IsReady>
 800a5fa:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d003      	beq.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	2b01      	cmp	r3, #1
 800a606:	f040 8125 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800a60a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a60e:	647b      	str	r3, [r7, #68]	; 0x44
 800a610:	e120      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 800a612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a614:	4a52      	ldr	r2, [pc, #328]	; (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d108      	bne.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800a61a:	f7ff f83b 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b01      	cmp	r3, #1
 800a622:	f040 8117 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 800a626:	4b46      	ldr	r3, [pc, #280]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800a628:	647b      	str	r3, [r7, #68]	; 0x44
 800a62a:	e113      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 800a62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800a632:	d109      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800a634:	f7ff f864 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	f040 810a 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800a640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a644:	647b      	str	r3, [r7, #68]	; 0x44
 800a646:	e105      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 800a648:	f7fe fe80 	bl	800934c <HAL_RCC_GetSysClockFreq>
 800a64c:	4604      	mov	r4, r0
 800a64e:	f7ff f8e5 	bl	800981c <LL_RCC_GetAHBPrescaler>
 800a652:	4603      	mov	r3, r0
 800a654:	091b      	lsrs	r3, r3, #4
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	4a3a      	ldr	r2, [pc, #232]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 800a65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a660:	fbb4 f4f3 	udiv	r4, r4, r3
 800a664:	f7ff f8e6 	bl	8009834 <LL_RCC_GetAPB1Prescaler>
 800a668:	4603      	mov	r3, r0
 800a66a:	0a1b      	lsrs	r3, r3, #8
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	4a35      	ldr	r2, [pc, #212]	; (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800a672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	fa24 f303 	lsr.w	r3, r4, r3
 800a67e:	647b      	str	r3, [r7, #68]	; 0x44
 800a680:	e0e8      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a688:	d119      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 800a68a:	f7ff f8ba 	bl	8009802 <LL_RCC_GetRFWKPClockSource>
 800a68e:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a696:	d109      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 800a698:	f7ff f832 	bl	8009700 <LL_RCC_LSE_IsReady>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	f040 80d8 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800a6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6aa:	e0d3      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6b2:	f040 80cf 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 800a6b6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a6bc:	e0ca      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c4:	f040 80c6 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 800a6c8:	f7ff f8e0 	bl	800988c <LL_RCC_GetSMPSClockSource>
 800a6cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 800a6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d115      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800a6d4:	f7fe ffde 	bl	8009694 <LL_RCC_HSI_IsReady>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	f040 80ba 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 800a6e0:	4920      	ldr	r1, [pc, #128]	; (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800a6e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	4413      	add	r3, r2
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	440b      	add	r3, r1
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a13      	ldr	r2, [pc, #76]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800a6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f6:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800a6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fa:	085b      	lsrs	r3, r3, #1
 800a6fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a6fe:	e0a9      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 800a700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a706:	d131      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 800a708:	f7fe ffb2 	bl	8009670 <LL_RCC_HSE_IsReady>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b01      	cmp	r3, #1
 800a710:	f040 80a0 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 800a714:	4913      	ldr	r1, [pc, #76]	; (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800a716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a718:	4613      	mov	r3, r2
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	4413      	add	r3, r2
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	440b      	add	r3, r1
 800a722:	3314      	adds	r3, #20
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a10      	ldr	r2, [pc, #64]	; (800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800a72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	647b      	str	r3, [r7, #68]	; 0x44
 800a734:	e08e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800a736:	bf00      	nop
 800a738:	00030100 	.word	0x00030100
 800a73c:	00030200 	.word	0x00030200
 800a740:	00f42400 	.word	0x00f42400
 800a744:	0801a9ac 	.word	0x0801a9ac
 800a748:	0801a9ec 	.word	0x0801a9ec
 800a74c:	00301000 	.word	0x00301000
 800a750:	00302000 	.word	0x00302000
 800a754:	000c0004 	.word	0x000c0004
 800a758:	000c0008 	.word	0x000c0008
 800a75c:	00300010 	.word	0x00300010
 800a760:	00300020 	.word	0x00300020
 800a764:	0801aa4c 	.word	0x0801aa4c
 800a768:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 800a76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a772:	d16f      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 800a774:	f7ff f81a 	bl	80097ac <LL_RCC_MSI_GetRange>
 800a778:	4603      	mov	r3, r0
 800a77a:	2bb0      	cmp	r3, #176	; 0xb0
 800a77c:	d037      	beq.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a77e:	2bb0      	cmp	r3, #176	; 0xb0
 800a780:	d844      	bhi.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800a782:	2ba0      	cmp	r3, #160	; 0xa0
 800a784:	d024      	beq.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 800a786:	2ba0      	cmp	r3, #160	; 0xa0
 800a788:	d840      	bhi.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800a78a:	2b80      	cmp	r3, #128	; 0x80
 800a78c:	d002      	beq.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800a78e:	2b90      	cmp	r3, #144	; 0x90
 800a790:	d00f      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 800a792:	e03b      	b.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 800a794:	4b32      	ldr	r3, [pc, #200]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800a796:	6a19      	ldr	r1, [r3, #32]
 800a798:	4832      	ldr	r0, [pc, #200]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a79a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a79c:	4613      	mov	r3, r2
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	4413      	add	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	4403      	add	r3, r0
 800a7a6:	3310      	adds	r3, #16
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7ae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a7b0:	e02d      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 800a7b2:	4b2b      	ldr	r3, [pc, #172]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800a7b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a7b6:	482b      	ldr	r0, [pc, #172]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	4413      	add	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	4403      	add	r3, r0
 800a7c4:	330c      	adds	r3, #12
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a7ce:	e01e      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 800a7d0:	4b23      	ldr	r3, [pc, #140]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800a7d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a7d4:	4823      	ldr	r0, [pc, #140]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7d8:	4613      	mov	r3, r2
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	4413      	add	r3, r2
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4403      	add	r3, r0
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7ea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a7ec:	e00f      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 800a7ee:	4b1c      	ldr	r3, [pc, #112]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 800a7f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a7f2:	481c      	ldr	r0, [pc, #112]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	4413      	add	r3, r2
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	4403      	add	r3, r0
 800a800:	3304      	adds	r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	fbb1 f3f3 	udiv	r3, r1, r3
 800a808:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a80a:	e000      	b.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 800a80c:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 800a80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a810:	085b      	lsrs	r3, r3, #1
 800a812:	647b      	str	r3, [r7, #68]	; 0x44
 800a814:	e01e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a816:	bf00      	nop
 800a818:	e01c      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a81a:	bf00      	nop
 800a81c:	e01a      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a81e:	bf00      	nop
 800a820:	e018      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a822:	bf00      	nop
 800a824:	e016      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a826:	bf00      	nop
 800a828:	e014      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a82a:	bf00      	nop
 800a82c:	e012      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a82e:	bf00      	nop
 800a830:	e010      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a832:	bf00      	nop
 800a834:	e00e      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a836:	bf00      	nop
 800a838:	e00c      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a83a:	bf00      	nop
 800a83c:	e00a      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a83e:	bf00      	nop
 800a840:	e008      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a842:	bf00      	nop
 800a844:	e006      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a846:	bf00      	nop
 800a848:	e004      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a84a:	bf00      	nop
 800a84c:	e002      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a84e:	bf00      	nop
 800a850:	e000      	b.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 800a852:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 800a854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a856:	4618      	mov	r0, r3
 800a858:	374c      	adds	r7, #76	; 0x4c
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd90      	pop	{r4, r7, pc}
 800a85e:	bf00      	nop
 800a860:	0801aa0c 	.word	0x0801aa0c
 800a864:	0801aa4c 	.word	0x0801aa4c

0800a868 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 800a86e:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800a872:	f7ff f954 	bl	8009b1e <LL_RCC_GetRNGClockSource>
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d108      	bne.n	800a890 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 800a87e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800a882:	f7ff f95c 	bl	8009b3e <LL_RCC_GetCLK48ClockSource>
 800a886:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a88e:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 800a890:	687b      	ldr	r3, [r7, #4]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800a89e:	f7fe ff76 	bl	800978e <LL_RCC_MSI_EnablePLLMode>
}
 800a8a2:	bf00      	nop
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a8b2:	f7ff fa07 	bl	8009cc4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a8b6:	f7f9 fcaf 	bl	8004218 <HAL_GetTick>
 800a8ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a8bc:	e009      	b.n	800a8d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a8be:	f7f9 fcab 	bl	8004218 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d902      	bls.n	800a8d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d0:	e004      	b.n	800a8dc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a8d2:	f7ff fa06 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f0      	bne.n	800a8be <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d137      	bne.n	800a952 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a8e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	021b      	lsls	r3, r3, #8
 800a8f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800a8fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a90c:	4313      	orrs	r3, r2
 800a90e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a910:	f7ff f9c9 	bl	8009ca6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a914:	f7f9 fc80 	bl	8004218 <HAL_GetTick>
 800a918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a91a:	e009      	b.n	800a930 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a91c:	f7f9 fc7c 	bl	8004218 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d902      	bls.n	800a930 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	73fb      	strb	r3, [r7, #15]
        break;
 800a92e:	e004      	b.n	800a93a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a930:	f7ff f9d7 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a934:	4603      	mov	r3, r0
 800a936:	2b01      	cmp	r3, #1
 800a938:	d1f0      	bne.n	800a91c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d108      	bne.n	800a952 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a944:	691a      	ldr	r2, [r3, #16]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a94e:	4313      	orrs	r3, r2
 800a950:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800a968:	f7ff f9ac 	bl	8009cc4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a96c:	f7f9 fc54 	bl	8004218 <HAL_GetTick>
 800a970:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a972:	e009      	b.n	800a988 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a974:	f7f9 fc50 	bl	8004218 <HAL_GetTick>
 800a978:	4602      	mov	r2, r0
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d902      	bls.n	800a988 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	73fb      	strb	r3, [r7, #15]
      break;
 800a986:	e004      	b.n	800a992 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800a988:	f7ff f9ab 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1f0      	bne.n	800a974 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d137      	bne.n	800aa08 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800a998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	021b      	lsls	r3, r3, #8
 800a9a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800a9b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800a9c6:	f7ff f96e 	bl	8009ca6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ca:	f7f9 fc25 	bl	8004218 <HAL_GetTick>
 800a9ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a9d0:	e009      	b.n	800a9e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a9d2:	f7f9 fc21 	bl	8004218 <HAL_GetTick>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d902      	bls.n	800a9e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	73fb      	strb	r3, [r7, #15]
        break;
 800a9e4:	e004      	b.n	800a9f0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a9e6:	f7ff f97c 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d1f0      	bne.n	800a9d2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a9f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9fa:	691a      	ldr	r2, [r3, #16]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa04:	4313      	orrs	r3, r2
 800aa06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800aa1e:	f7ff f951 	bl	8009cc4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aa22:	f7f9 fbf9 	bl	8004218 <HAL_GetTick>
 800aa26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa28:	e009      	b.n	800aa3e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa2a:	f7f9 fbf5 	bl	8004218 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d902      	bls.n	800aa3e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa3c:	e004      	b.n	800aa48 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aa3e:	f7ff f950 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f0      	bne.n	800aa2a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d137      	bne.n	800aabe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800aa4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	021b      	lsls	r3, r3, #8
 800aa5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa62:	4313      	orrs	r3, r2
 800aa64:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800aa66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800aa7c:	f7ff f913 	bl	8009ca6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa80:	f7f9 fbca 	bl	8004218 <HAL_GetTick>
 800aa84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aa86:	e009      	b.n	800aa9c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aa88:	f7f9 fbc6 	bl	8004218 <HAL_GetTick>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d902      	bls.n	800aa9c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800aa96:	2303      	movs	r3, #3
 800aa98:	73fb      	strb	r3, [r7, #15]
        break;
 800aa9a:	e004      	b.n	800aaa6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aa9c:	f7ff f921 	bl	8009ce2 <LL_RCC_PLLSAI1_IsReady>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d1f0      	bne.n	800aa88 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d108      	bne.n	800aabe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aaac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aab0:	691a      	ldr	r2, [r3, #16]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aaba:	4313      	orrs	r3, r2
 800aabc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 800aac8:	b590      	push	{r4, r7, lr}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800aace:	f7ff f94b 	bl	8009d68 <LL_RCC_PLL_GetMainSource>
 800aad2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d017      	beq.n	800ab0a <RCC_PLL_GetFreqDomain_P+0x42>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d81f      	bhi.n	800ab20 <RCC_PLL_GetFreqDomain_P+0x58>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d003      	beq.n	800aaee <RCC_PLL_GetFreqDomain_P+0x26>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d00b      	beq.n	800ab04 <RCC_PLL_GetFreqDomain_P+0x3c>
 800aaec:	e018      	b.n	800ab20 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800aaee:	f7fe fe5d 	bl	80097ac <LL_RCC_MSI_GetRange>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	091b      	lsrs	r3, r3, #4
 800aaf6:	f003 030f 	and.w	r3, r3, #15
 800aafa:	4a1b      	ldr	r2, [pc, #108]	; (800ab68 <RCC_PLL_GetFreqDomain_P+0xa0>)
 800aafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab00:	607b      	str	r3, [r7, #4]
      break;
 800ab02:	e018      	b.n	800ab36 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800ab04:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <RCC_PLL_GetFreqDomain_P+0xa4>)
 800ab06:	607b      	str	r3, [r7, #4]
      break;
 800ab08:	e015      	b.n	800ab36 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ab0a:	f7fe fd9f 	bl	800964c <LL_RCC_HSE_IsEnabledDiv2>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d102      	bne.n	800ab1a <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800ab14:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <RCC_PLL_GetFreqDomain_P+0xa4>)
 800ab16:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800ab18:	e00d      	b.n	800ab36 <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 800ab1a:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <RCC_PLL_GetFreqDomain_P+0xa8>)
 800ab1c:	607b      	str	r3, [r7, #4]
      break;
 800ab1e:	e00a      	b.n	800ab36 <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ab20:	f7fe fe44 	bl	80097ac <LL_RCC_MSI_GetRange>
 800ab24:	4603      	mov	r3, r0
 800ab26:	091b      	lsrs	r3, r3, #4
 800ab28:	f003 030f 	and.w	r3, r3, #15
 800ab2c:	4a0e      	ldr	r2, [pc, #56]	; (800ab68 <RCC_PLL_GetFreqDomain_P+0xa0>)
 800ab2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab32:	607b      	str	r3, [r7, #4]
      break;
 800ab34:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ab36:	f7ff f885 	bl	8009c44 <LL_RCC_PLL_GetN>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	fb03 f402 	mul.w	r4, r3, r2
 800ab42:	f7ff f8a4 	bl	8009c8e <LL_RCC_PLL_GetDivider>
 800ab46:	4603      	mov	r3, r0
 800ab48:	091b      	lsrs	r3, r3, #4
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	fbb4 f4f3 	udiv	r4, r4, r3
 800ab50:	f7ff f885 	bl	8009c5e <LL_RCC_PLL_GetP>
 800ab54:	4603      	mov	r3, r0
 800ab56:	0c5b      	lsrs	r3, r3, #17
 800ab58:	3301      	adds	r3, #1
 800ab5a:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd90      	pop	{r4, r7, pc}
 800ab66:	bf00      	nop
 800ab68:	0801aa0c 	.word	0x0801aa0c
 800ab6c:	00f42400 	.word	0x00f42400
 800ab70:	01e84800 	.word	0x01e84800

0800ab74 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 800ab74:	b590      	push	{r4, r7, lr}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800ab7a:	f7ff f8f5 	bl	8009d68 <LL_RCC_PLL_GetMainSource>
 800ab7e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d017      	beq.n	800abb6 <RCC_PLL_GetFreqDomain_Q+0x42>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d81f      	bhi.n	800abcc <RCC_PLL_GetFreqDomain_Q+0x58>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d003      	beq.n	800ab9a <RCC_PLL_GetFreqDomain_Q+0x26>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d00b      	beq.n	800abb0 <RCC_PLL_GetFreqDomain_Q+0x3c>
 800ab98:	e018      	b.n	800abcc <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ab9a:	f7fe fe07 	bl	80097ac <LL_RCC_MSI_GetRange>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	091b      	lsrs	r3, r3, #4
 800aba2:	f003 030f 	and.w	r3, r3, #15
 800aba6:	4a1b      	ldr	r2, [pc, #108]	; (800ac14 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 800aba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abac:	607b      	str	r3, [r7, #4]
      break;
 800abae:	e018      	b.n	800abe2 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800abb0:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 800abb2:	607b      	str	r3, [r7, #4]
      break;
 800abb4:	e015      	b.n	800abe2 <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800abb6:	f7fe fd49 	bl	800964c <LL_RCC_HSE_IsEnabledDiv2>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d102      	bne.n	800abc6 <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800abc0:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 800abc2:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 800abc4:	e00d      	b.n	800abe2 <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 800abc6:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <RCC_PLL_GetFreqDomain_Q+0xa8>)
 800abc8:	607b      	str	r3, [r7, #4]
      break;
 800abca:	e00a      	b.n	800abe2 <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800abcc:	f7fe fdee 	bl	80097ac <LL_RCC_MSI_GetRange>
 800abd0:	4603      	mov	r3, r0
 800abd2:	091b      	lsrs	r3, r3, #4
 800abd4:	f003 030f 	and.w	r3, r3, #15
 800abd8:	4a0e      	ldr	r2, [pc, #56]	; (800ac14 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 800abda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abde:	607b      	str	r3, [r7, #4]
      break;
 800abe0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800abe2:	f7ff f82f 	bl	8009c44 <LL_RCC_PLL_GetN>
 800abe6:	4602      	mov	r2, r0
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	fb03 f402 	mul.w	r4, r3, r2
 800abee:	f7ff f84e 	bl	8009c8e <LL_RCC_PLL_GetDivider>
 800abf2:	4603      	mov	r3, r0
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	3301      	adds	r3, #1
 800abf8:	fbb4 f4f3 	udiv	r4, r4, r3
 800abfc:	f7ff f83b 	bl	8009c76 <LL_RCC_PLL_GetQ>
 800ac00:	4603      	mov	r3, r0
 800ac02:	0e5b      	lsrs	r3, r3, #25
 800ac04:	3301      	adds	r3, #1
 800ac06:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd90      	pop	{r4, r7, pc}
 800ac12:	bf00      	nop
 800ac14:	0801aa0c 	.word	0x0801aa0c
 800ac18:	00f42400 	.word	0x00f42400
 800ac1c:	01e84800 	.word	0x01e84800

0800ac20 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 800ac26:	f7ff f89f 	bl	8009d68 <LL_RCC_PLL_GetMainSource>
 800ac2a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d017      	beq.n	800ac62 <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d81f      	bhi.n	800ac78 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d003      	beq.n	800ac46 <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d00b      	beq.n	800ac5c <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 800ac44:	e018      	b.n	800ac78 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ac46:	f7fe fdb1 	bl	80097ac <LL_RCC_MSI_GetRange>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	091b      	lsrs	r3, r3, #4
 800ac4e:	f003 030f 	and.w	r3, r3, #15
 800ac52:	4a1b      	ldr	r2, [pc, #108]	; (800acc0 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 800ac54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac58:	607b      	str	r3, [r7, #4]
      break;
 800ac5a:	e018      	b.n	800ac8e <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 800ac5c:	4b19      	ldr	r3, [pc, #100]	; (800acc4 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 800ac5e:	607b      	str	r3, [r7, #4]
      break;
 800ac60:	e015      	b.n	800ac8e <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ac62:	f7fe fcf3 	bl	800964c <LL_RCC_HSE_IsEnabledDiv2>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d102      	bne.n	800ac72 <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800ac6c:	4b15      	ldr	r3, [pc, #84]	; (800acc4 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 800ac6e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800ac70:	e00d      	b.n	800ac8e <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 800ac72:	4b15      	ldr	r3, [pc, #84]	; (800acc8 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 800ac74:	607b      	str	r3, [r7, #4]
      break;
 800ac76:	e00a      	b.n	800ac8e <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ac78:	f7fe fd98 	bl	80097ac <LL_RCC_MSI_GetRange>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	091b      	lsrs	r3, r3, #4
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	4a0e      	ldr	r2, [pc, #56]	; (800acc0 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 800ac86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8a:	607b      	str	r3, [r7, #4]
      break;
 800ac8c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ac8e:	f7ff f83a 	bl	8009d06 <LL_RCC_PLLSAI1_GetN>
 800ac92:	4602      	mov	r2, r0
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	fb03 f402 	mul.w	r4, r3, r2
 800ac9a:	f7fe fff8 	bl	8009c8e <LL_RCC_PLL_GetDivider>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	091b      	lsrs	r3, r3, #4
 800aca2:	3301      	adds	r3, #1
 800aca4:	fbb4 f4f3 	udiv	r4, r4, r3
 800aca8:	f7ff f852 	bl	8009d50 <LL_RCC_PLLSAI1_GetR>
 800acac:	4603      	mov	r3, r0
 800acae:	0f5b      	lsrs	r3, r3, #29
 800acb0:	3301      	adds	r3, #1
 800acb2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd90      	pop	{r4, r7, pc}
 800acbe:	bf00      	nop
 800acc0:	0801aa0c 	.word	0x0801aa0c
 800acc4:	00f42400 	.word	0x00f42400
 800acc8:	01e84800 	.word	0x01e84800

0800accc <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 800accc:	b590      	push	{r4, r7, lr}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 800acd2:	f7ff f849 	bl	8009d68 <LL_RCC_PLL_GetMainSource>
 800acd6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d017      	beq.n	800ad0e <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d81f      	bhi.n	800ad24 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d003      	beq.n	800acf2 <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d00b      	beq.n	800ad08 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 800acf0:	e018      	b.n	800ad24 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800acf2:	f7fe fd5b 	bl	80097ac <LL_RCC_MSI_GetRange>
 800acf6:	4603      	mov	r3, r0
 800acf8:	091b      	lsrs	r3, r3, #4
 800acfa:	f003 030f 	and.w	r3, r3, #15
 800acfe:	4a1b      	ldr	r2, [pc, #108]	; (800ad6c <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 800ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad04:	607b      	str	r3, [r7, #4]
      break;
 800ad06:	e018      	b.n	800ad3a <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 800ad08:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 800ad0a:	607b      	str	r3, [r7, #4]
      break;
 800ad0c:	e015      	b.n	800ad3a <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800ad0e:	f7fe fc9d 	bl	800964c <LL_RCC_HSE_IsEnabledDiv2>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d102      	bne.n	800ad1e <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 800ad1a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800ad1c:	e00d      	b.n	800ad3a <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 800ad1e:	4b15      	ldr	r3, [pc, #84]	; (800ad74 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 800ad20:	607b      	str	r3, [r7, #4]
      break;
 800ad22:	e00a      	b.n	800ad3a <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ad24:	f7fe fd42 	bl	80097ac <LL_RCC_MSI_GetRange>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	091b      	lsrs	r3, r3, #4
 800ad2c:	f003 030f 	and.w	r3, r3, #15
 800ad30:	4a0e      	ldr	r2, [pc, #56]	; (800ad6c <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 800ad32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad36:	607b      	str	r3, [r7, #4]
      break;
 800ad38:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ad3a:	f7fe ffe4 	bl	8009d06 <LL_RCC_PLLSAI1_GetN>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	fb03 f402 	mul.w	r4, r3, r2
 800ad46:	f7fe ffa2 	bl	8009c8e <LL_RCC_PLL_GetDivider>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	091b      	lsrs	r3, r3, #4
 800ad4e:	3301      	adds	r3, #1
 800ad50:	fbb4 f4f3 	udiv	r4, r4, r3
 800ad54:	f7fe ffe4 	bl	8009d20 <LL_RCC_PLLSAI1_GetP>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	0c5b      	lsrs	r3, r3, #17
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd90      	pop	{r4, r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	0801aa0c 	.word	0x0801aa0c
 800ad70:	00f42400 	.word	0x00f42400
 800ad74:	01e84800 	.word	0x01e84800

0800ad78 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 800ad7e:	f7fe fff3 	bl	8009d68 <LL_RCC_PLL_GetMainSource>
 800ad82:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d017      	beq.n	800adba <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d81f      	bhi.n	800add0 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d003      	beq.n	800ad9e <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d00b      	beq.n	800adb4 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 800ad9c:	e018      	b.n	800add0 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800ad9e:	f7fe fd05 	bl	80097ac <LL_RCC_MSI_GetRange>
 800ada2:	4603      	mov	r3, r0
 800ada4:	091b      	lsrs	r3, r3, #4
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	4a1b      	ldr	r2, [pc, #108]	; (800ae18 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 800adac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adb0:	607b      	str	r3, [r7, #4]
      break;
 800adb2:	e018      	b.n	800ade6 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 800adb4:	4b19      	ldr	r3, [pc, #100]	; (800ae1c <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 800adb6:	607b      	str	r3, [r7, #4]
      break;
 800adb8:	e015      	b.n	800ade6 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800adba:	f7fe fc47 	bl	800964c <LL_RCC_HSE_IsEnabledDiv2>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d102      	bne.n	800adca <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800adc4:	4b15      	ldr	r3, [pc, #84]	; (800ae1c <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 800adc6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 800adc8:	e00d      	b.n	800ade6 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 800adca:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 800adcc:	607b      	str	r3, [r7, #4]
      break;
 800adce:	e00a      	b.n	800ade6 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800add0:	f7fe fcec 	bl	80097ac <LL_RCC_MSI_GetRange>
 800add4:	4603      	mov	r3, r0
 800add6:	091b      	lsrs	r3, r3, #4
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	4a0e      	ldr	r2, [pc, #56]	; (800ae18 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 800adde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade2:	607b      	str	r3, [r7, #4]
      break;
 800ade4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800ade6:	f7fe ff8e 	bl	8009d06 <LL_RCC_PLLSAI1_GetN>
 800adea:	4602      	mov	r2, r0
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	fb03 f402 	mul.w	r4, r3, r2
 800adf2:	f7fe ff4c 	bl	8009c8e <LL_RCC_PLL_GetDivider>
 800adf6:	4603      	mov	r3, r0
 800adf8:	091b      	lsrs	r3, r3, #4
 800adfa:	3301      	adds	r3, #1
 800adfc:	fbb4 f4f3 	udiv	r4, r4, r3
 800ae00:	f7fe ff9a 	bl	8009d38 <LL_RCC_PLLSAI1_GetQ>
 800ae04:	4603      	mov	r3, r0
 800ae06:	0e5b      	lsrs	r3, r3, #25
 800ae08:	3301      	adds	r3, #1
 800ae0a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd90      	pop	{r4, r7, pc}
 800ae16:	bf00      	nop
 800ae18:	0801aa0c 	.word	0x0801aa0c
 800ae1c:	00f42400 	.word	0x00f42400
 800ae20:	01e84800 	.word	0x01e84800

0800ae24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae24:	b590      	push	{r4, r7, lr}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d101      	bne.n	800ae3e <HAL_RTC_SetTime+0x1a>
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e0b2      	b.n	800afa4 <HAL_RTC_SetTime+0x180>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d126      	bne.n	800aea2 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d102      	bne.n	800ae68 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fa44 	bl	800b2fa <RTC_ByteToBcd2>
 800ae72:	4603      	mov	r3, r0
 800ae74:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 fa3d 	bl	800b2fa <RTC_ByteToBcd2>
 800ae80:	4603      	mov	r3, r0
 800ae82:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ae84:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	789b      	ldrb	r3, [r3, #2]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fa35 	bl	800b2fa <RTC_ByteToBcd2>
 800ae90:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ae92:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	78db      	ldrb	r3, [r3, #3]
 800ae9a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	e018      	b.n	800aed4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aec2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aec8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	78db      	ldrb	r3, [r3, #3]
 800aece:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	22ca      	movs	r2, #202	; 0xca
 800aeda:	625a      	str	r2, [r3, #36]	; 0x24
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2253      	movs	r2, #83	; 0x53
 800aee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f9de 	bl	800b2a6 <RTC_EnterInitMode>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00d      	beq.n	800af0c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	22ff      	movs	r2, #255	; 0xff
 800aef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2204      	movs	r2, #4
 800aefc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e04b      	b.n	800afa4 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800af16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800af1a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689a      	ldr	r2, [r3, #8]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af2a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6899      	ldr	r1, [r3, #8]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	431a      	orrs	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	430a      	orrs	r2, r1
 800af42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d113      	bne.n	800af8a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f979 	bl	800b25a <HAL_RTC_WaitForSynchro>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	22ff      	movs	r2, #255	; 0xff
 800af74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2204      	movs	r2, #4
 800af7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e00c      	b.n	800afa4 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	22ff      	movs	r2, #255	; 0xff
 800af90:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800afa2:	2300      	movs	r3, #0
  }
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd90      	pop	{r4, r7, pc}

0800afac <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800afda:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800afde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afea:	b2da      	uxtb	r2, r3
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affa:	b2da      	uxtb	r2, r3
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	0c1b      	lsrs	r3, r3, #16
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d11a      	bne.n	800b05a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f986 	bl	800b33a <RTC_Bcd2ToByte>
 800b02e:	4603      	mov	r3, r0
 800b030:	461a      	mov	r2, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	785b      	ldrb	r3, [r3, #1]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 f97d 	bl	800b33a <RTC_Bcd2ToByte>
 800b040:	4603      	mov	r3, r0
 800b042:	461a      	mov	r2, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	789b      	ldrb	r3, [r3, #2]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f000 f974 	bl	800b33a <RTC_Bcd2ToByte>
 800b052:	4603      	mov	r3, r0
 800b054:	461a      	mov	r2, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b064:	b590      	push	{r4, r7, lr}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_RTC_SetDate+0x1a>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e09c      	b.n	800b1b8 <HAL_RTC_SetDate+0x154>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2202      	movs	r2, #2
 800b08a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10e      	bne.n	800b0b2 <HAL_RTC_SetDate+0x4e>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	785b      	ldrb	r3, [r3, #1]
 800b098:	f003 0310 	and.w	r3, r3, #16
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d008      	beq.n	800b0b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	785b      	ldrb	r3, [r3, #1]
 800b0a4:	f023 0310 	bic.w	r3, r3, #16
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	330a      	adds	r3, #10
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d11c      	bne.n	800b0f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	78db      	ldrb	r3, [r3, #3]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f91c 	bl	800b2fa <RTC_ByteToBcd2>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	785b      	ldrb	r3, [r3, #1]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f915 	bl	800b2fa <RTC_ByteToBcd2>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b0d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	789b      	ldrb	r3, [r3, #2]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f90d 	bl	800b2fa <RTC_ByteToBcd2>
 800b0e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b0e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	617b      	str	r3, [r7, #20]
 800b0f0:	e00e      	b.n	800b110 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	78db      	ldrb	r3, [r3, #3]
 800b0f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b0fe:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800b104:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b10c:	4313      	orrs	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	22ca      	movs	r2, #202	; 0xca
 800b116:	625a      	str	r2, [r3, #36]	; 0x24
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2253      	movs	r2, #83	; 0x53
 800b11e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 f8c0 	bl	800b2a6 <RTC_EnterInitMode>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00d      	beq.n	800b148 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	22ff      	movs	r2, #255	; 0xff
 800b132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2204      	movs	r2, #4
 800b138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e037      	b.n	800b1b8 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b152:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b156:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b166:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	f003 0320 	and.w	r3, r3, #32
 800b172:	2b00      	cmp	r3, #0
 800b174:	d113      	bne.n	800b19e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 f86f 	bl	800b25a <HAL_RTC_WaitForSynchro>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00d      	beq.n	800b19e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	22ff      	movs	r2, #255	; 0xff
 800b188:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2204      	movs	r2, #4
 800b18e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	e00c      	b.n	800b1b8 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	22ff      	movs	r2, #255	; 0xff
 800b1a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
  }
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	371c      	adds	r7, #28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd90      	pop	{r4, r7, pc}

0800b1c0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	0c1b      	lsrs	r3, r3, #16
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	0a1b      	lsrs	r3, r3, #8
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	f003 031f 	and.w	r3, r3, #31
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	0b5b      	lsrs	r3, r3, #13
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d11a      	bne.n	800b250 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	78db      	ldrb	r3, [r3, #3]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 f88b 	bl	800b33a <RTC_Bcd2ToByte>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 f882 	bl	800b33a <RTC_Bcd2ToByte>
 800b236:	4603      	mov	r3, r0
 800b238:	461a      	mov	r2, r3
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	789b      	ldrb	r3, [r3, #2]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f879 	bl	800b33a <RTC_Bcd2ToByte>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68da      	ldr	r2, [r3, #12]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b270:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b272:	f7f8 ffd1 	bl	8004218 <HAL_GetTick>
 800b276:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b278:	e009      	b.n	800b28e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b27a:	f7f8 ffcd 	bl	8004218 <HAL_GetTick>
 800b27e:	4602      	mov	r2, r0
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b288:	d901      	bls.n	800b28e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e007      	b.n	800b29e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f003 0320 	and.w	r3, r3, #32
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d0ee      	beq.n	800b27a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d119      	bne.n	800b2f0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b2c6:	f7f8 ffa7 	bl	8004218 <HAL_GetTick>
 800b2ca:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b2cc:	e009      	b.n	800b2e2 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b2ce:	f7f8 ffa3 	bl	8004218 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2dc:	d901      	bls.n	800b2e2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e007      	b.n	800b2f2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0ee      	beq.n	800b2ce <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b085      	sub	sp, #20
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	4603      	mov	r3, r0
 800b302:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800b30c:	e005      	b.n	800b31a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3301      	adds	r3, #1
 800b312:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3b0a      	subs	r3, #10
 800b318:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	2b09      	cmp	r3, #9
 800b31e:	d8f6      	bhi.n	800b30e <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	b2db      	uxtb	r3, r3
 800b324:	011b      	lsls	r3, r3, #4
 800b326:	b2da      	uxtb	r2, r3
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	b2db      	uxtb	r3, r3
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b085      	sub	sp, #20
 800b33e:	af00      	add	r7, sp, #0
 800b340:	4603      	mov	r3, r0
 800b342:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	091b      	lsrs	r3, r3, #4
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	f003 030f 	and.w	r3, r3, #15
 800b360:	b2db      	uxtb	r3, r3
 800b362:	4413      	add	r3, r2
 800b364:	b2db      	uxtb	r3, r3
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b086      	sub	sp, #24
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b02      	cmp	r3, #2
 800b384:	d904      	bls.n	800b390 <HAL_SAI_InitProtocol+0x1e>
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	3b03      	subs	r3, #3
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d812      	bhi.n	800b3b4 <HAL_SAI_InitProtocol+0x42>
 800b38e:	e008      	b.n	800b3a2 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	68b9      	ldr	r1, [r7, #8]
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 f9ae 	bl	800b6f8 <SAI_InitI2S>
 800b39c:	4603      	mov	r3, r0
 800b39e:	75fb      	strb	r3, [r7, #23]
      break;
 800b3a0:	e00b      	b.n	800b3ba <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 fa57 	bl	800b85c <SAI_InitPCM>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b2:	e002      	b.n	800b3ba <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b8:	bf00      	nop
  }

  if (status == HAL_OK)
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d104      	bne.n	800b3ca <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 f807 	bl	800b3d4 <HAL_SAI_Init>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e17c      	b.n	800b6e0 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d10e      	bne.n	800b40e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a5c      	ldr	r2, [pc, #368]	; (800b568 <HAL_SAI_Init+0x194>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d107      	bne.n	800b40a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d103      	bne.n	800b40a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e168      	b.n	800b6e0 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7f7 ff60 	bl	80032e8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fa99 	bl	800b960 <SAI_Disable>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e153      	b.n	800b6e0 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <HAL_SAI_Init+0x7a>
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d003      	beq.n	800b454 <HAL_SAI_Init+0x80>
 800b44c:	e006      	b.n	800b45c <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	61bb      	str	r3, [r7, #24]
      break;
 800b452:	e006      	b.n	800b462 <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b458:	61bb      	str	r3, [r7, #24]
      break;
 800b45a:	e002      	b.n	800b462 <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	61bb      	str	r3, [r7, #24]
      break;
 800b460:	bf00      	nop
  }

  SAI1->GCR = 0;
 800b462:	4b42      	ldr	r3, [pc, #264]	; (800b56c <HAL_SAI_Init+0x198>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d062      	beq.n	800b536 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b470:	2040      	movs	r0, #64	; 0x40
 800b472:	f7fe fdfb 	bl	800a06c <HAL_RCCEx_GetPeriphCLKFreq>
 800b476:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b480:	d120      	bne.n	800b4c4 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b486:	2b04      	cmp	r3, #4
 800b488:	d102      	bne.n	800b490 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800b48a:	2340      	movs	r3, #64	; 0x40
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	e00a      	b.n	800b4a6 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b494:	2b08      	cmp	r3, #8
 800b496:	d103      	bne.n	800b4a0 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800b498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b49c:	613b      	str	r3, [r7, #16]
 800b49e:	e002      	b.n	800b4a6 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	fb02 f303 	mul.w	r3, r2, r3
 800b4bc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4c0:	617b      	str	r3, [r7, #20]
 800b4c2:	e017      	b.n	800b4f4 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4cc:	d101      	bne.n	800b4d2 <HAL_SAI_Init+0xfe>
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e000      	b.n	800b4d4 <HAL_SAI_Init+0x100>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ec:	021b      	lsls	r3, r3, #8
 800b4ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4f2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	4a1e      	ldr	r2, [pc, #120]	; (800b570 <HAL_SAI_Init+0x19c>)
 800b4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fc:	08da      	lsrs	r2, r3, #3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b502:	6979      	ldr	r1, [r7, #20]
 800b504:	4b1a      	ldr	r3, [pc, #104]	; (800b570 <HAL_SAI_Init+0x19c>)
 800b506:	fba3 2301 	umull	r2, r3, r3, r1
 800b50a:	08da      	lsrs	r2, r3, #3
 800b50c:	4613      	mov	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	1aca      	subs	r2, r1, r3
 800b516:	2a08      	cmp	r2, #8
 800b518:	d904      	bls.n	800b524 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d104      	bne.n	800b536 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	085a      	lsrs	r2, r3, #1
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_SAI_Init+0x172>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	2b02      	cmp	r3, #2
 800b544:	d109      	bne.n	800b55a <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d101      	bne.n	800b552 <HAL_SAI_Init+0x17e>
 800b54e:	2300      	movs	r3, #0
 800b550:	e001      	b.n	800b556 <HAL_SAI_Init+0x182>
 800b552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	e00e      	b.n	800b578 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d108      	bne.n	800b574 <HAL_SAI_Init+0x1a0>
 800b562:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b566:	e006      	b.n	800b576 <HAL_SAI_Init+0x1a2>
 800b568:	40015404 	.word	0x40015404
 800b56c:	40015400 	.word	0x40015400
 800b570:	cccccccd 	.word	0xcccccccd
 800b574:	2300      	movs	r3, #0
 800b576:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6819      	ldr	r1, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b59      	ldr	r3, [pc, #356]	; (800b6e8 <HAL_SAI_Init+0x314>)
 800b584:	400b      	ands	r3, r1
 800b586:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6819      	ldr	r1, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b596:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b59c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800b5b0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b5bc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	051b      	lsls	r3, r3, #20
 800b5c4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b5ca:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	430a      	orrs	r2, r1
 800b5d8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6812      	ldr	r2, [r2, #0]
 800b5e4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b5e8:	f023 030f 	bic.w	r3, r3, #15
 800b5ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6859      	ldr	r1, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	69da      	ldr	r2, [r3, #28]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b602:	431a      	orrs	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6899      	ldr	r1, [r3, #8]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	4b35      	ldr	r3, [pc, #212]	; (800b6ec <HAL_SAI_Init+0x318>)
 800b618:	400b      	ands	r3, r1
 800b61a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6899      	ldr	r1, [r3, #8]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b626:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b62c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800b632:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800b638:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63e:	3b01      	subs	r3, #1
 800b640:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b642:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	430a      	orrs	r2, r1
 800b64a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68d9      	ldr	r1, [r3, #12]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b65a:	400b      	ands	r3, r1
 800b65c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68d9      	ldr	r1, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b66c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b672:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b674:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b67a:	3b01      	subs	r3, #1
 800b67c:	021b      	lsls	r3, r3, #8
 800b67e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	430a      	orrs	r2, r1
 800b686:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a18      	ldr	r2, [pc, #96]	; (800b6f0 <HAL_SAI_Init+0x31c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d119      	bne.n	800b6c6 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b692:	4b18      	ldr	r3, [pc, #96]	; (800b6f4 <HAL_SAI_Init+0x320>)
 800b694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b696:	4a17      	ldr	r2, [pc, #92]	; (800b6f4 <HAL_SAI_Init+0x320>)
 800b698:	f023 0301 	bic.w	r3, r3, #1
 800b69c:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d10e      	bne.n	800b6c6 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b6b4:	490f      	ldr	r1, [pc, #60]	; (800b6f4 <HAL_SAI_Init+0x320>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800b6ba:	4b0e      	ldr	r3, [pc, #56]	; (800b6f4 <HAL_SAI_Init+0x320>)
 800b6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6be:	4a0d      	ldr	r2, [pc, #52]	; (800b6f4 <HAL_SAI_Init+0x320>)
 800b6c0:	f043 0301 	orr.w	r3, r3, #1
 800b6c4:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	f005c010 	.word	0xf005c010
 800b6ec:	fff88000 	.word	0xfff88000
 800b6f0:	40015404 	.word	0x40015404
 800b6f4:	40015400 	.word	0x40015400

0800b6f8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <SAI_InitI2S+0x2e>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d103      	bne.n	800b72e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	651a      	str	r2, [r3, #80]	; 0x50
 800b72c:	e002      	b.n	800b734 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b73a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b742:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e077      	b.n	800b84e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d107      	bne.n	800b774 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b770:	665a      	str	r2, [r3, #100]	; 0x64
 800b772:	e006      	b.n	800b782 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b77a:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	665a      	str	r2, [r3, #100]	; 0x64
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b03      	cmp	r3, #3
 800b786:	d84f      	bhi.n	800b828 <SAI_InitI2S+0x130>
 800b788:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <SAI_InitI2S+0x98>)
 800b78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78e:	bf00      	nop
 800b790:	0800b7a1 	.word	0x0800b7a1
 800b794:	0800b7c3 	.word	0x0800b7c3
 800b798:	0800b7e5 	.word	0x0800b7e5
 800b79c:	0800b807 	.word	0x0800b807

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2280      	movs	r2, #128	; 0x80
 800b7a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	085b      	lsrs	r3, r3, #1
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	011a      	lsls	r2, r3, #4
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2240      	movs	r2, #64	; 0x40
 800b7be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b7c0:	e035      	b.n	800b82e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2280      	movs	r2, #128	; 0x80
 800b7c6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	085b      	lsrs	r3, r3, #1
 800b7cc:	019a      	lsls	r2, r3, #6
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	085b      	lsrs	r3, r3, #1
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2280      	movs	r2, #128	; 0x80
 800b7e0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b7e2:	e024      	b.n	800b82e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	22c0      	movs	r2, #192	; 0xc0
 800b7e8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	085b      	lsrs	r3, r3, #1
 800b7ee:	019a      	lsls	r2, r3, #6
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	085b      	lsrs	r3, r3, #1
 800b7f8:	015a      	lsls	r2, r3, #5
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2280      	movs	r2, #128	; 0x80
 800b802:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b804:	e013      	b.n	800b82e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	22e0      	movs	r2, #224	; 0xe0
 800b80a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	085b      	lsrs	r3, r3, #1
 800b810:	019a      	lsls	r2, r3, #6
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	085b      	lsrs	r3, r3, #1
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2280      	movs	r2, #128	; 0x80
 800b824:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b826:	e002      	b.n	800b82e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	75fb      	strb	r3, [r7, #23]
      break;
 800b82c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d10b      	bne.n	800b84c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d102      	bne.n	800b840 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2210      	movs	r2, #16
 800b83e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d102      	bne.n	800b84c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2208      	movs	r2, #8
 800b84a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop

0800b85c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <SAI_InitPCM+0x2e>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d103      	bne.n	800b892 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2201      	movs	r2, #1
 800b88e:	651a      	str	r2, [r3, #80]	; 0x50
 800b890:	e002      	b.n	800b898 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b8a4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b8ac:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8c0:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d103      	bne.n	800b8d0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	659a      	str	r2, [r3, #88]	; 0x58
 800b8ce:	e002      	b.n	800b8d6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	220d      	movs	r2, #13
 800b8d4:	659a      	str	r2, [r3, #88]	; 0x58
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d837      	bhi.n	800b94c <SAI_InitPCM+0xf0>
 800b8dc:	a201      	add	r2, pc, #4	; (adr r2, 800b8e4 <SAI_InitPCM+0x88>)
 800b8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e2:	bf00      	nop
 800b8e4:	0800b8f5 	.word	0x0800b8f5
 800b8e8:	0800b90b 	.word	0x0800b90b
 800b8ec:	0800b921 	.word	0x0800b921
 800b8f0:	0800b937 	.word	0x0800b937
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2280      	movs	r2, #128	; 0x80
 800b8f8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	011a      	lsls	r2, r3, #4
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2240      	movs	r2, #64	; 0x40
 800b906:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b908:	e023      	b.n	800b952 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2280      	movs	r2, #128	; 0x80
 800b90e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	015a      	lsls	r2, r3, #5
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2280      	movs	r2, #128	; 0x80
 800b91c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b91e:	e018      	b.n	800b952 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	22c0      	movs	r2, #192	; 0xc0
 800b924:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2280      	movs	r2, #128	; 0x80
 800b932:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b934:	e00d      	b.n	800b952 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	22e0      	movs	r2, #224	; 0xe0
 800b93a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2280      	movs	r2, #128	; 0x80
 800b948:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800b94a:	e002      	b.n	800b952 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	75fb      	strb	r3, [r7, #23]
      break;
 800b950:	bf00      	nop
  }

  return status;
 800b952:	7dfb      	ldrb	r3, [r7, #23]
}
 800b954:	4618      	mov	r0, r3
 800b956:	371c      	adds	r7, #28
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b968:	4b18      	ldr	r3, [pc, #96]	; (800b9cc <SAI_Disable+0x6c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a18      	ldr	r2, [pc, #96]	; (800b9d0 <SAI_Disable+0x70>)
 800b96e:	fba2 2303 	umull	r2, r3, r2, r3
 800b972:	0b1b      	lsrs	r3, r3, #12
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b98a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10a      	bne.n	800b9a8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b998:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	72fb      	strb	r3, [r7, #11]
      break;
 800b9a6:	e009      	b.n	800b9bc <SAI_Disable+0x5c>
    }
    count--;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1e7      	bne.n	800b98c <SAI_Disable+0x2c>

  return status;
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20000010 	.word	0x20000010
 800b9d0:	95cbec1b 	.word	0x95cbec1b

0800b9d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e095      	b.n	800bb12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d108      	bne.n	800ba00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9f6:	d009      	beq.n	800ba0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	61da      	str	r2, [r3, #28]
 800b9fe:	e005      	b.n	800ba0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7f7 fe1a 	bl	8003660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba4c:	d902      	bls.n	800ba54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	e002      	b.n	800ba5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ba54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ba62:	d007      	beq.n	800ba74 <HAL_SPI_Init+0xa0>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba6c:	d002      	beq.n	800ba74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ba84:	431a      	orrs	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	431a      	orrs	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800baa2:	431a      	orrs	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baac:	431a      	orrs	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab6:	ea42 0103 	orr.w	r1, r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	f003 0204 	and.w	r2, r3, #4
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	f003 0310 	and.w	r3, r3, #16
 800badc:	431a      	orrs	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	431a      	orrs	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800baf0:	ea42 0103 	orr.w	r1, r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	430a      	orrs	r2, r1
 800bb00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b088      	sub	sp, #32
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	603b      	str	r3, [r7, #0]
 800bb26:	4613      	mov	r3, r2
 800bb28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_SPI_Transmit+0x22>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e158      	b.n	800bdee <HAL_SPI_Transmit+0x2d4>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb44:	f7f8 fb68 	bl	8004218 <HAL_GetTick>
 800bb48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d002      	beq.n	800bb60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bb5e:	e13d      	b.n	800bddc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <HAL_SPI_Transmit+0x52>
 800bb66:	88fb      	ldrh	r3, [r7, #6]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d102      	bne.n	800bb72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bb70:	e134      	b.n	800bddc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2203      	movs	r2, #3
 800bb76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	88fa      	ldrh	r2, [r7, #6]
 800bb8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	88fa      	ldrh	r2, [r7, #6]
 800bb90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbbc:	d10f      	bne.n	800bbde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbdc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe8:	2b40      	cmp	r3, #64	; 0x40
 800bbea:	d007      	beq.n	800bbfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc04:	d94b      	bls.n	800bc9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <HAL_SPI_Transmit+0xfa>
 800bc0e:	8afb      	ldrh	r3, [r7, #22]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d13e      	bne.n	800bc92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc18:	881a      	ldrh	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc24:	1c9a      	adds	r2, r3, #2
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bc38:	e02b      	b.n	800bc92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f003 0302 	and.w	r3, r3, #2
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d112      	bne.n	800bc6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4c:	881a      	ldrh	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc58:	1c9a      	adds	r2, r3, #2
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	3b01      	subs	r3, #1
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc6c:	e011      	b.n	800bc92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc6e:	f7f8 fad3 	bl	8004218 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d803      	bhi.n	800bc86 <HAL_SPI_Transmit+0x16c>
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc84:	d102      	bne.n	800bc8c <HAL_SPI_Transmit+0x172>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bc90:	e0a4      	b.n	800bddc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1ce      	bne.n	800bc3a <HAL_SPI_Transmit+0x120>
 800bc9c:	e07c      	b.n	800bd98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <HAL_SPI_Transmit+0x192>
 800bca6:	8afb      	ldrh	r3, [r7, #22]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d170      	bne.n	800bd8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d912      	bls.n	800bcdc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcba:	881a      	ldrh	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc6:	1c9a      	adds	r2, r3, #2
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b02      	subs	r3, #2
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcda:	e058      	b.n	800bd8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	330c      	adds	r3, #12
 800bce6:	7812      	ldrb	r2, [r2, #0]
 800bce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcee:	1c5a      	adds	r2, r3, #1
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bd02:	e044      	b.n	800bd8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f003 0302 	and.w	r3, r3, #2
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d12b      	bne.n	800bd6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d912      	bls.n	800bd42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd20:	881a      	ldrh	r2, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2c:	1c9a      	adds	r2, r3, #2
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	3b02      	subs	r3, #2
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd40:	e025      	b.n	800bd8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	3b01      	subs	r3, #1
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd68:	e011      	b.n	800bd8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd6a:	f7f8 fa55 	bl	8004218 <HAL_GetTick>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d803      	bhi.n	800bd82 <HAL_SPI_Transmit+0x268>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd80:	d102      	bne.n	800bd88 <HAL_SPI_Transmit+0x26e>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d102      	bne.n	800bd8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bd8c:	e026      	b.n	800bddc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1b5      	bne.n	800bd04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd98:	69ba      	ldr	r2, [r7, #24]
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 fc7b 	bl	800c698 <SPI_EndRxTxTransaction>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2220      	movs	r2, #32
 800bdac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10a      	bne.n	800bdcc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	613b      	str	r3, [r7, #16]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	613b      	str	r3, [r7, #16]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	613b      	str	r3, [r7, #16]
 800bdca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	77fb      	strb	r3, [r7, #31]
 800bdd8:	e000      	b.n	800bddc <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bdda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bdec:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b08a      	sub	sp, #40	; 0x28
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	60f8      	str	r0, [r7, #12]
 800bdfe:	60b9      	str	r1, [r7, #8]
 800be00:	607a      	str	r2, [r7, #4]
 800be02:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be04:	2301      	movs	r3, #1
 800be06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be14:	2b01      	cmp	r3, #1
 800be16:	d101      	bne.n	800be1c <HAL_SPI_TransmitReceive+0x26>
 800be18:	2302      	movs	r3, #2
 800be1a:	e1fb      	b.n	800c214 <HAL_SPI_TransmitReceive+0x41e>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be24:	f7f8 f9f8 	bl	8004218 <HAL_GetTick>
 800be28:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be30:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800be38:	887b      	ldrh	r3, [r7, #2]
 800be3a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800be3c:	887b      	ldrh	r3, [r7, #2]
 800be3e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be40:	7efb      	ldrb	r3, [r7, #27]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d00e      	beq.n	800be64 <HAL_SPI_TransmitReceive+0x6e>
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be4c:	d106      	bne.n	800be5c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <HAL_SPI_TransmitReceive+0x66>
 800be56:	7efb      	ldrb	r3, [r7, #27]
 800be58:	2b04      	cmp	r3, #4
 800be5a:	d003      	beq.n	800be64 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800be5c:	2302      	movs	r3, #2
 800be5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800be62:	e1cd      	b.n	800c200 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <HAL_SPI_TransmitReceive+0x80>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <HAL_SPI_TransmitReceive+0x80>
 800be70:	887b      	ldrh	r3, [r7, #2]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d103      	bne.n	800be7e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800be7c:	e1c0      	b.n	800c200 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b04      	cmp	r3, #4
 800be88:	d003      	beq.n	800be92 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2205      	movs	r2, #5
 800be8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	887a      	ldrh	r2, [r7, #2]
 800bea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	887a      	ldrh	r2, [r7, #2]
 800beaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	887a      	ldrh	r2, [r7, #2]
 800beb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	887a      	ldrh	r2, [r7, #2]
 800bebe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bed4:	d802      	bhi.n	800bedc <HAL_SPI_TransmitReceive+0xe6>
 800bed6:	8a3b      	ldrh	r3, [r7, #16]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d908      	bls.n	800beee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800beea:	605a      	str	r2, [r3, #4]
 800beec:	e007      	b.n	800befe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800befc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf08:	2b40      	cmp	r3, #64	; 0x40
 800bf0a:	d007      	beq.n	800bf1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf24:	d97c      	bls.n	800c020 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <HAL_SPI_TransmitReceive+0x13e>
 800bf2e:	8a7b      	ldrh	r3, [r7, #18]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d169      	bne.n	800c008 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf38:	881a      	ldrh	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	1c9a      	adds	r2, r3, #2
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	3b01      	subs	r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf58:	e056      	b.n	800c008 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f003 0302 	and.w	r3, r3, #2
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d11b      	bne.n	800bfa0 <HAL_SPI_TransmitReceive+0x1aa>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d016      	beq.n	800bfa0 <HAL_SPI_TransmitReceive+0x1aa>
 800bf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d113      	bne.n	800bfa0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7c:	881a      	ldrh	r2, [r3, #0]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	1c9a      	adds	r2, r3, #2
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	3b01      	subs	r3, #1
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d11c      	bne.n	800bfe8 <HAL_SPI_TransmitReceive+0x1f2>
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d016      	beq.n	800bfe8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68da      	ldr	r2, [r3, #12]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc4:	b292      	uxth	r2, r2
 800bfc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfcc:	1c9a      	adds	r2, r3, #2
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bfe8:	f7f8 f916 	bl	8004218 <HAL_GetTick>
 800bfec:	4602      	mov	r2, r0
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d807      	bhi.n	800c008 <HAL_SPI_TransmitReceive+0x212>
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bffe:	d003      	beq.n	800c008 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c006:	e0fb      	b.n	800c200 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1a3      	bne.n	800bf5a <HAL_SPI_TransmitReceive+0x164>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c018:	b29b      	uxth	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d19d      	bne.n	800bf5a <HAL_SPI_TransmitReceive+0x164>
 800c01e:	e0df      	b.n	800c1e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <HAL_SPI_TransmitReceive+0x23a>
 800c028:	8a7b      	ldrh	r3, [r7, #18]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	f040 80cb 	bne.w	800c1c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c034:	b29b      	uxth	r3, r3
 800c036:	2b01      	cmp	r3, #1
 800c038:	d912      	bls.n	800c060 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03e:	881a      	ldrh	r2, [r3, #0]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04a:	1c9a      	adds	r2, r3, #2
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c054:	b29b      	uxth	r3, r3
 800c056:	3b02      	subs	r3, #2
 800c058:	b29a      	uxth	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c05e:	e0b2      	b.n	800c1c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	330c      	adds	r3, #12
 800c06a:	7812      	ldrb	r2, [r2, #0]
 800c06c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	b29a      	uxth	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c086:	e09e      	b.n	800c1c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	f003 0302 	and.w	r3, r3, #2
 800c092:	2b02      	cmp	r3, #2
 800c094:	d134      	bne.n	800c100 <HAL_SPI_TransmitReceive+0x30a>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d02f      	beq.n	800c100 <HAL_SPI_TransmitReceive+0x30a>
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d12c      	bne.n	800c100 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d912      	bls.n	800c0d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b4:	881a      	ldrh	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c0:	1c9a      	adds	r2, r3, #2
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	3b02      	subs	r3, #2
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0d4:	e012      	b.n	800c0fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	330c      	adds	r3, #12
 800c0e0:	7812      	ldrb	r2, [r2, #0]
 800c0e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d148      	bne.n	800c1a0 <HAL_SPI_TransmitReceive+0x3aa>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c114:	b29b      	uxth	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d042      	beq.n	800c1a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c120:	b29b      	uxth	r3, r3
 800c122:	2b01      	cmp	r3, #1
 800c124:	d923      	bls.n	800c16e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c130:	b292      	uxth	r2, r2
 800c132:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c138:	1c9a      	adds	r2, r3, #2
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c144:	b29b      	uxth	r3, r3
 800c146:	3b02      	subs	r3, #2
 800c148:	b29a      	uxth	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d81f      	bhi.n	800c19c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c16a:	605a      	str	r2, [r3, #4]
 800c16c:	e016      	b.n	800c19c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f103 020c 	add.w	r2, r3, #12
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	b2d2      	uxtb	r2, r2
 800c17e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c190:	b29b      	uxth	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c19c:	2301      	movs	r3, #1
 800c19e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c1a0:	f7f8 f83a 	bl	8004218 <HAL_GetTick>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d803      	bhi.n	800c1b8 <HAL_SPI_TransmitReceive+0x3c2>
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b6:	d102      	bne.n	800c1be <HAL_SPI_TransmitReceive+0x3c8>
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c1be:	2303      	movs	r3, #3
 800c1c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c1c4:	e01c      	b.n	800c200 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f47f af5b 	bne.w	800c088 <HAL_SPI_TransmitReceive+0x292>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f47f af54 	bne.w	800c088 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1e0:	69fa      	ldr	r2, [r7, #28]
 800c1e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f000 fa57 	bl	800c698 <SPI_EndRxTxTransaction>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d006      	beq.n	800c1fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2220      	movs	r2, #32
 800c1fa:	661a      	str	r2, [r3, #96]	; 0x60
 800c1fc:	e000      	b.n	800c200 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c1fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c214:	4618      	mov	r0, r3
 800c216:	3728      	adds	r7, #40	; 0x28
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b088      	sub	sp, #32
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	099b      	lsrs	r3, r3, #6
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10f      	bne.n	800c260 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00a      	beq.n	800c260 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	099b      	lsrs	r3, r3, #6
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b00      	cmp	r3, #0
 800c254:	d004      	beq.n	800c260 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
    return;
 800c25e:	e0d7      	b.n	800c410 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	085b      	lsrs	r3, r3, #1
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00a      	beq.n	800c282 <HAL_SPI_IRQHandler+0x66>
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	09db      	lsrs	r3, r3, #7
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	4798      	blx	r3
    return;
 800c280:	e0c6      	b.n	800c410 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	095b      	lsrs	r3, r3, #5
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10c      	bne.n	800c2a8 <HAL_SPI_IRQHandler+0x8c>
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	099b      	lsrs	r3, r3, #6
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	0a1b      	lsrs	r3, r3, #8
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 80b4 	beq.w	800c410 <HAL_SPI_IRQHandler+0x1f4>
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	095b      	lsrs	r3, r3, #5
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 80ad 	beq.w	800c410 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	099b      	lsrs	r3, r3, #6
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d023      	beq.n	800c30a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d011      	beq.n	800c2f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2d2:	f043 0204 	orr.w	r2, r3, #4
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2da:	2300      	movs	r3, #0
 800c2dc:	617b      	str	r3, [r7, #20]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	617b      	str	r3, [r7, #20]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	617b      	str	r3, [r7, #20]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	e00b      	b.n	800c30a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	613b      	str	r3, [r7, #16]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	613b      	str	r3, [r7, #16]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	613b      	str	r3, [r7, #16]
 800c306:	693b      	ldr	r3, [r7, #16]
        return;
 800c308:	e082      	b.n	800c410 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	095b      	lsrs	r3, r3, #5
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d014      	beq.n	800c340 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c31a:	f043 0201 	orr.w	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c322:	2300      	movs	r3, #0
 800c324:	60fb      	str	r3, [r7, #12]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	60fb      	str	r3, [r7, #12]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	0a1b      	lsrs	r3, r3, #8
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00c      	beq.n	800c366 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c350:	f043 0208 	orr.w	r2, r3, #8
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c358:	2300      	movs	r3, #0
 800c35a:	60bb      	str	r3, [r7, #8]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	60bb      	str	r3, [r7, #8]
 800c364:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d04f      	beq.n	800c40e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c37c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d104      	bne.n	800c39a <HAL_SPI_IRQHandler+0x17e>
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d034      	beq.n	800c404 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0203 	bic.w	r2, r2, #3
 800c3a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d011      	beq.n	800c3d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b6:	4a18      	ldr	r2, [pc, #96]	; (800c418 <HAL_SPI_IRQHandler+0x1fc>)
 800c3b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f8 fffe 	bl	80053c0 <HAL_DMA_Abort_IT>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d005      	beq.n	800c3d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d016      	beq.n	800c40c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e2:	4a0d      	ldr	r2, [pc, #52]	; (800c418 <HAL_SPI_IRQHandler+0x1fc>)
 800c3e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7f8 ffe8 	bl	80053c0 <HAL_DMA_Abort_IT>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00a      	beq.n	800c40c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c402:	e003      	b.n	800c40c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f809 	bl	800c41c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c40a:	e000      	b.n	800c40e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c40c:	bf00      	nop
    return;
 800c40e:	bf00      	nop
  }
}
 800c410:	3720      	adds	r7, #32
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	0800c431 	.word	0x0800c431

0800c41c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f7ff ffe5 	bl	800c41c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c452:	bf00      	nop
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	603b      	str	r3, [r7, #0]
 800c468:	4613      	mov	r3, r2
 800c46a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c46c:	f7f7 fed4 	bl	8004218 <HAL_GetTick>
 800c470:	4602      	mov	r2, r0
 800c472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	4413      	add	r3, r2
 800c47a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c47c:	f7f7 fecc 	bl	8004218 <HAL_GetTick>
 800c480:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c482:	4b39      	ldr	r3, [pc, #228]	; (800c568 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	015b      	lsls	r3, r3, #5
 800c488:	0d1b      	lsrs	r3, r3, #20
 800c48a:	69fa      	ldr	r2, [r7, #28]
 800c48c:	fb02 f303 	mul.w	r3, r2, r3
 800c490:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c492:	e054      	b.n	800c53e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c49a:	d050      	beq.n	800c53e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c49c:	f7f7 febc 	bl	8004218 <HAL_GetTick>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	69fa      	ldr	r2, [r7, #28]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d902      	bls.n	800c4b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d13d      	bne.n	800c52e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4ca:	d111      	bne.n	800c4f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4d4:	d004      	beq.n	800c4e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4de:	d107      	bne.n	800c4f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4f8:	d10f      	bne.n	800c51a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c518:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e017      	b.n	800c55e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	4013      	ands	r3, r2
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	bf0c      	ite	eq
 800c54e:	2301      	moveq	r3, #1
 800c550:	2300      	movne	r3, #0
 800c552:	b2db      	uxtb	r3, r3
 800c554:	461a      	mov	r2, r3
 800c556:	79fb      	ldrb	r3, [r7, #7]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d19b      	bne.n	800c494 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3720      	adds	r7, #32
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20000010 	.word	0x20000010

0800c56c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	; 0x28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c57e:	f7f7 fe4b 	bl	8004218 <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	4413      	add	r3, r2
 800c58c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c58e:	f7f7 fe43 	bl	8004218 <HAL_GetTick>
 800c592:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	330c      	adds	r3, #12
 800c59a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c59c:	4b3d      	ldr	r3, [pc, #244]	; (800c694 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	00da      	lsls	r2, r3, #3
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	0d1b      	lsrs	r3, r3, #20
 800c5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ae:	fb02 f303 	mul.w	r3, r2, r3
 800c5b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c5b4:	e060      	b.n	800c678 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c5bc:	d107      	bne.n	800c5ce <SPI_WaitFifoStateUntilTimeout+0x62>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5d4:	d050      	beq.n	800c678 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c5d6:	f7f7 fe1f 	bl	8004218 <HAL_GetTick>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d902      	bls.n	800c5ec <SPI_WaitFifoStateUntilTimeout+0x80>
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d13d      	bne.n	800c668 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c604:	d111      	bne.n	800c62a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c60e:	d004      	beq.n	800c61a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c618:	d107      	bne.n	800c62a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c632:	d10f      	bne.n	800c654 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c652:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e010      	b.n	800c68a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	3b01      	subs	r3, #1
 800c676:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	689a      	ldr	r2, [r3, #8]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	4013      	ands	r3, r2
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	429a      	cmp	r2, r3
 800c686:	d196      	bne.n	800c5b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3728      	adds	r7, #40	; 0x28
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20000010 	.word	0x20000010

0800c698 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af02      	add	r7, sp, #8
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff ff5b 	bl	800c56c <SPI_WaitFifoStateUntilTimeout>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d007      	beq.n	800c6cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c0:	f043 0220 	orr.w	r2, r3, #32
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e027      	b.n	800c71c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	2180      	movs	r1, #128	; 0x80
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f7ff fec0 	bl	800c45c <SPI_WaitFlagStateUntilTimeout>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d007      	beq.n	800c6f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6e6:	f043 0220 	orr.w	r2, r3, #32
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e014      	b.n	800c71c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f7ff ff34 	bl	800c56c <SPI_WaitFifoStateUntilTimeout>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d007      	beq.n	800c71a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c70e:	f043 0220 	orr.w	r2, r3, #32
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e000      	b.n	800c71c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e049      	b.n	800c7ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7f7 fb44 	bl	8003dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2202      	movs	r2, #2
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	3304      	adds	r3, #4
 800c760:	4619      	mov	r1, r3
 800c762:	4610      	mov	r0, r2
 800c764:	f000 fcdc 	bl	800d120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
	...

0800c7d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d001      	beq.n	800c7ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e036      	b.n	800c85a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68da      	ldr	r2, [r3, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f042 0201 	orr.w	r2, r2, #1
 800c802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a17      	ldr	r2, [pc, #92]	; (800c868 <HAL_TIM_Base_Start_IT+0x94>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d004      	beq.n	800c818 <HAL_TIM_Base_Start_IT+0x44>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c816:	d115      	bne.n	800c844 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	689a      	ldr	r2, [r3, #8]
 800c81e:	4b13      	ldr	r3, [pc, #76]	; (800c86c <HAL_TIM_Base_Start_IT+0x98>)
 800c820:	4013      	ands	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b06      	cmp	r3, #6
 800c828:	d015      	beq.n	800c856 <HAL_TIM_Base_Start_IT+0x82>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c830:	d011      	beq.n	800c856 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f042 0201 	orr.w	r2, r2, #1
 800c840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c842:	e008      	b.n	800c856 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f042 0201 	orr.w	r2, r2, #1
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e000      	b.n	800c858 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	40012c00 	.word	0x40012c00
 800c86c:	00010007 	.word	0x00010007

0800c870 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	e049      	b.n	800c916 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d106      	bne.n	800c89c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f841 	bl	800c91e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2202      	movs	r2, #2
 800c8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f000 fc36 	bl	800d120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c91e:	b480      	push	{r7}
 800c920:	b083      	sub	sp, #12
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c926:	bf00      	nop
 800c928:	370c      	adds	r7, #12
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	e049      	b.n	800c9d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d106      	bne.n	800c95e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f841 	bl	800c9e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2202      	movs	r2, #2
 800c962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4619      	mov	r1, r3
 800c970:	4610      	mov	r0, r2
 800c972:	f000 fbd5 	bl	800d120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c9e8:	bf00      	nop
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	691b      	ldr	r3, [r3, #16]
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d122      	bne.n	800ca50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	f003 0302 	and.w	r3, r3, #2
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d11b      	bne.n	800ca50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f06f 0202 	mvn.w	r2, #2
 800ca20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fb5d 	bl	800d0f6 <HAL_TIM_IC_CaptureCallback>
 800ca3c:	e005      	b.n	800ca4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fb4f 	bl	800d0e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7f4 fe0d 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	f003 0304 	and.w	r3, r3, #4
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d122      	bne.n	800caa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	f003 0304 	and.w	r3, r3, #4
 800ca68:	2b04      	cmp	r3, #4
 800ca6a:	d11b      	bne.n	800caa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f06f 0204 	mvn.w	r2, #4
 800ca74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2202      	movs	r2, #2
 800ca7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fb33 	bl	800d0f6 <HAL_TIM_IC_CaptureCallback>
 800ca90:	e005      	b.n	800ca9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fb25 	bl	800d0e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7f4 fde3 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	f003 0308 	and.w	r3, r3, #8
 800caae:	2b08      	cmp	r3, #8
 800cab0:	d122      	bne.n	800caf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	f003 0308 	and.w	r3, r3, #8
 800cabc:	2b08      	cmp	r3, #8
 800cabe:	d11b      	bne.n	800caf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f06f 0208 	mvn.w	r2, #8
 800cac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2204      	movs	r2, #4
 800cace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	f003 0303 	and.w	r3, r3, #3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fb09 	bl	800d0f6 <HAL_TIM_IC_CaptureCallback>
 800cae4:	e005      	b.n	800caf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fafb 	bl	800d0e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7f4 fdb9 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	f003 0310 	and.w	r3, r3, #16
 800cb02:	2b10      	cmp	r3, #16
 800cb04:	d122      	bne.n	800cb4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	f003 0310 	and.w	r3, r3, #16
 800cb10:	2b10      	cmp	r3, #16
 800cb12:	d11b      	bne.n	800cb4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f06f 0210 	mvn.w	r2, #16
 800cb1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2208      	movs	r2, #8
 800cb22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	69db      	ldr	r3, [r3, #28]
 800cb2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d003      	beq.n	800cb3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fadf 	bl	800d0f6 <HAL_TIM_IC_CaptureCallback>
 800cb38:	e005      	b.n	800cb46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fad1 	bl	800d0e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7f4 fd8f 	bl	8001664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d10e      	bne.n	800cb78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d107      	bne.n	800cb78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f06f 0201 	mvn.w	r2, #1
 800cb70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7f6 f894 	bl	8002ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb82:	2b80      	cmp	r3, #128	; 0x80
 800cb84:	d10e      	bne.n	800cba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb90:	2b80      	cmp	r3, #128	; 0x80
 800cb92:	d107      	bne.n	800cba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 ff36 	bl	800da10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb2:	d10e      	bne.n	800cbd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbbe:	2b80      	cmp	r3, #128	; 0x80
 800cbc0:	d107      	bne.n	800cbd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cbca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 ff29 	bl	800da24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbdc:	2b40      	cmp	r3, #64	; 0x40
 800cbde:	d10e      	bne.n	800cbfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbea:	2b40      	cmp	r3, #64	; 0x40
 800cbec:	d107      	bne.n	800cbfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 fa86 	bl	800d10a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	f003 0320 	and.w	r3, r3, #32
 800cc08:	2b20      	cmp	r3, #32
 800cc0a:	d10e      	bne.n	800cc2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f003 0320 	and.w	r3, r3, #32
 800cc16:	2b20      	cmp	r3, #32
 800cc18:	d107      	bne.n	800cc2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f06f 0220 	mvn.w	r2, #32
 800cc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fee9 	bl	800d9fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc2a:	bf00      	nop
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
	...

0800cc34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d101      	bne.n	800cc52 <HAL_TIM_OC_ConfigChannel+0x1e>
 800cc4e:	2302      	movs	r3, #2
 800cc50:	e066      	b.n	800cd20 <HAL_TIM_OC_ConfigChannel+0xec>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b14      	cmp	r3, #20
 800cc5e:	d857      	bhi.n	800cd10 <HAL_TIM_OC_ConfigChannel+0xdc>
 800cc60:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <HAL_TIM_OC_ConfigChannel+0x34>)
 800cc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc66:	bf00      	nop
 800cc68:	0800ccbd 	.word	0x0800ccbd
 800cc6c:	0800cd11 	.word	0x0800cd11
 800cc70:	0800cd11 	.word	0x0800cd11
 800cc74:	0800cd11 	.word	0x0800cd11
 800cc78:	0800cccb 	.word	0x0800cccb
 800cc7c:	0800cd11 	.word	0x0800cd11
 800cc80:	0800cd11 	.word	0x0800cd11
 800cc84:	0800cd11 	.word	0x0800cd11
 800cc88:	0800ccd9 	.word	0x0800ccd9
 800cc8c:	0800cd11 	.word	0x0800cd11
 800cc90:	0800cd11 	.word	0x0800cd11
 800cc94:	0800cd11 	.word	0x0800cd11
 800cc98:	0800cce7 	.word	0x0800cce7
 800cc9c:	0800cd11 	.word	0x0800cd11
 800cca0:	0800cd11 	.word	0x0800cd11
 800cca4:	0800cd11 	.word	0x0800cd11
 800cca8:	0800ccf5 	.word	0x0800ccf5
 800ccac:	0800cd11 	.word	0x0800cd11
 800ccb0:	0800cd11 	.word	0x0800cd11
 800ccb4:	0800cd11 	.word	0x0800cd11
 800ccb8:	0800cd03 	.word	0x0800cd03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 fa90 	bl	800d1e8 <TIM_OC1_SetConfig>
      break;
 800ccc8:	e025      	b.n	800cd16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68b9      	ldr	r1, [r7, #8]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 fb05 	bl	800d2e0 <TIM_OC2_SetConfig>
      break;
 800ccd6:	e01e      	b.n	800cd16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68b9      	ldr	r1, [r7, #8]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fb78 	bl	800d3d4 <TIM_OC3_SetConfig>
      break;
 800cce4:	e017      	b.n	800cd16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68b9      	ldr	r1, [r7, #8]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fbe9 	bl	800d4c4 <TIM_OC4_SetConfig>
      break;
 800ccf2:	e010      	b.n	800cd16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68b9      	ldr	r1, [r7, #8]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 fc40 	bl	800d580 <TIM_OC5_SetConfig>
      break;
 800cd00:	e009      	b.n	800cd16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 fc91 	bl	800d630 <TIM_OC6_SetConfig>
      break;
 800cd0e:	e002      	b.n	800cd16 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	75fb      	strb	r3, [r7, #23]
      break;
 800cd14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d101      	bne.n	800cd46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd42:	2302      	movs	r3, #2
 800cd44:	e0ff      	b.n	800cf46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b14      	cmp	r3, #20
 800cd52:	f200 80f0 	bhi.w	800cf36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd56:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5c:	0800cdb1 	.word	0x0800cdb1
 800cd60:	0800cf37 	.word	0x0800cf37
 800cd64:	0800cf37 	.word	0x0800cf37
 800cd68:	0800cf37 	.word	0x0800cf37
 800cd6c:	0800cdf1 	.word	0x0800cdf1
 800cd70:	0800cf37 	.word	0x0800cf37
 800cd74:	0800cf37 	.word	0x0800cf37
 800cd78:	0800cf37 	.word	0x0800cf37
 800cd7c:	0800ce33 	.word	0x0800ce33
 800cd80:	0800cf37 	.word	0x0800cf37
 800cd84:	0800cf37 	.word	0x0800cf37
 800cd88:	0800cf37 	.word	0x0800cf37
 800cd8c:	0800ce73 	.word	0x0800ce73
 800cd90:	0800cf37 	.word	0x0800cf37
 800cd94:	0800cf37 	.word	0x0800cf37
 800cd98:	0800cf37 	.word	0x0800cf37
 800cd9c:	0800ceb5 	.word	0x0800ceb5
 800cda0:	0800cf37 	.word	0x0800cf37
 800cda4:	0800cf37 	.word	0x0800cf37
 800cda8:	0800cf37 	.word	0x0800cf37
 800cdac:	0800cef5 	.word	0x0800cef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fa16 	bl	800d1e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	699a      	ldr	r2, [r3, #24]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f042 0208 	orr.w	r2, r2, #8
 800cdca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	699a      	ldr	r2, [r3, #24]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f022 0204 	bic.w	r2, r2, #4
 800cdda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6999      	ldr	r1, [r3, #24]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	691a      	ldr	r2, [r3, #16]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	619a      	str	r2, [r3, #24]
      break;
 800cdee:	e0a5      	b.n	800cf3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68b9      	ldr	r1, [r7, #8]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fa72 	bl	800d2e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	699a      	ldr	r2, [r3, #24]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	699a      	ldr	r2, [r3, #24]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6999      	ldr	r1, [r3, #24]
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	021a      	lsls	r2, r3, #8
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	619a      	str	r2, [r3, #24]
      break;
 800ce30:	e084      	b.n	800cf3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 facb 	bl	800d3d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69da      	ldr	r2, [r3, #28]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f042 0208 	orr.w	r2, r2, #8
 800ce4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	69da      	ldr	r2, [r3, #28]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f022 0204 	bic.w	r2, r2, #4
 800ce5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	69d9      	ldr	r1, [r3, #28]
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	691a      	ldr	r2, [r3, #16]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	430a      	orrs	r2, r1
 800ce6e:	61da      	str	r2, [r3, #28]
      break;
 800ce70:	e064      	b.n	800cf3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68b9      	ldr	r1, [r7, #8]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fb23 	bl	800d4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	69da      	ldr	r2, [r3, #28]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	69da      	ldr	r2, [r3, #28]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	69d9      	ldr	r1, [r3, #28]
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	021a      	lsls	r2, r3, #8
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	430a      	orrs	r2, r1
 800ceb0:	61da      	str	r2, [r3, #28]
      break;
 800ceb2:	e043      	b.n	800cf3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68b9      	ldr	r1, [r7, #8]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 fb60 	bl	800d580 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f042 0208 	orr.w	r2, r2, #8
 800cece:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f022 0204 	bic.w	r2, r2, #4
 800cede:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	691a      	ldr	r2, [r3, #16]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	430a      	orrs	r2, r1
 800cef0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cef2:	e023      	b.n	800cf3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68b9      	ldr	r1, [r7, #8]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 fb98 	bl	800d630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	691b      	ldr	r3, [r3, #16]
 800cf2a:	021a      	lsls	r2, r3, #8
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	430a      	orrs	r2, r1
 800cf32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf34:	e002      	b.n	800cf3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	75fb      	strb	r3, [r7, #23]
      break;
 800cf3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop

0800cf50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d101      	bne.n	800cf6c <HAL_TIM_ConfigClockSource+0x1c>
 800cf68:	2302      	movs	r3, #2
 800cf6a:	e0b6      	b.n	800d0da <HAL_TIM_ConfigClockSource+0x18a>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800cf8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cf8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfa8:	d03e      	beq.n	800d028 <HAL_TIM_ConfigClockSource+0xd8>
 800cfaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfae:	f200 8087 	bhi.w	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfb6:	f000 8086 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x176>
 800cfba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfbe:	d87f      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfc0:	2b70      	cmp	r3, #112	; 0x70
 800cfc2:	d01a      	beq.n	800cffa <HAL_TIM_ConfigClockSource+0xaa>
 800cfc4:	2b70      	cmp	r3, #112	; 0x70
 800cfc6:	d87b      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfc8:	2b60      	cmp	r3, #96	; 0x60
 800cfca:	d050      	beq.n	800d06e <HAL_TIM_ConfigClockSource+0x11e>
 800cfcc:	2b60      	cmp	r3, #96	; 0x60
 800cfce:	d877      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfd0:	2b50      	cmp	r3, #80	; 0x50
 800cfd2:	d03c      	beq.n	800d04e <HAL_TIM_ConfigClockSource+0xfe>
 800cfd4:	2b50      	cmp	r3, #80	; 0x50
 800cfd6:	d873      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfd8:	2b40      	cmp	r3, #64	; 0x40
 800cfda:	d058      	beq.n	800d08e <HAL_TIM_ConfigClockSource+0x13e>
 800cfdc:	2b40      	cmp	r3, #64	; 0x40
 800cfde:	d86f      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfe0:	2b30      	cmp	r3, #48	; 0x30
 800cfe2:	d064      	beq.n	800d0ae <HAL_TIM_ConfigClockSource+0x15e>
 800cfe4:	2b30      	cmp	r3, #48	; 0x30
 800cfe6:	d86b      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	d060      	beq.n	800d0ae <HAL_TIM_ConfigClockSource+0x15e>
 800cfec:	2b20      	cmp	r3, #32
 800cfee:	d867      	bhi.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d05c      	beq.n	800d0ae <HAL_TIM_ConfigClockSource+0x15e>
 800cff4:	2b10      	cmp	r3, #16
 800cff6:	d05a      	beq.n	800d0ae <HAL_TIM_ConfigClockSource+0x15e>
 800cff8:	e062      	b.n	800d0c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	6899      	ldr	r1, [r3, #8]
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	f000 fbe7 	bl	800d7dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d01c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	609a      	str	r2, [r3, #8]
      break;
 800d026:	e04f      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6818      	ldr	r0, [r3, #0]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	6899      	ldr	r1, [r3, #8]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	f000 fbd0 	bl	800d7dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d04a:	609a      	str	r2, [r3, #8]
      break;
 800d04c:	e03c      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	6859      	ldr	r1, [r3, #4]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	461a      	mov	r2, r3
 800d05c:	f000 fb42 	bl	800d6e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2150      	movs	r1, #80	; 0x50
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fb9b 	bl	800d7a2 <TIM_ITRx_SetConfig>
      break;
 800d06c:	e02c      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	6859      	ldr	r1, [r3, #4]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f000 fb61 	bl	800d742 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2160      	movs	r1, #96	; 0x60
 800d086:	4618      	mov	r0, r3
 800d088:	f000 fb8b 	bl	800d7a2 <TIM_ITRx_SetConfig>
      break;
 800d08c:	e01c      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	6859      	ldr	r1, [r3, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	461a      	mov	r2, r3
 800d09c:	f000 fb22 	bl	800d6e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2140      	movs	r1, #64	; 0x40
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 fb7b 	bl	800d7a2 <TIM_ITRx_SetConfig>
      break;
 800d0ac:	e00c      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	f000 fb72 	bl	800d7a2 <TIM_ITRx_SetConfig>
      break;
 800d0be:	e003      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0c4:	e000      	b.n	800d0c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d0c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b083      	sub	sp, #12
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b083      	sub	sp, #12
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d0fe:	bf00      	nop
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d112:	bf00      	nop
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
	...

0800d120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	4a2a      	ldr	r2, [pc, #168]	; (800d1dc <TIM_Base_SetConfig+0xbc>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d003      	beq.n	800d140 <TIM_Base_SetConfig+0x20>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d13e:	d108      	bne.n	800d152 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	4313      	orrs	r3, r2
 800d150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a21      	ldr	r2, [pc, #132]	; (800d1dc <TIM_Base_SetConfig+0xbc>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d00b      	beq.n	800d172 <TIM_Base_SetConfig+0x52>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d160:	d007      	beq.n	800d172 <TIM_Base_SetConfig+0x52>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a1e      	ldr	r2, [pc, #120]	; (800d1e0 <TIM_Base_SetConfig+0xc0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d003      	beq.n	800d172 <TIM_Base_SetConfig+0x52>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a1d      	ldr	r2, [pc, #116]	; (800d1e4 <TIM_Base_SetConfig+0xc4>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d108      	bne.n	800d184 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	68fa      	ldr	r2, [r7, #12]
 800d180:	4313      	orrs	r3, r2
 800d182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	4313      	orrs	r3, r2
 800d190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	689a      	ldr	r2, [r3, #8]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a0c      	ldr	r2, [pc, #48]	; (800d1dc <TIM_Base_SetConfig+0xbc>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d007      	beq.n	800d1c0 <TIM_Base_SetConfig+0xa0>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a0b      	ldr	r2, [pc, #44]	; (800d1e0 <TIM_Base_SetConfig+0xc0>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d003      	beq.n	800d1c0 <TIM_Base_SetConfig+0xa0>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	4a0a      	ldr	r2, [pc, #40]	; (800d1e4 <TIM_Base_SetConfig+0xc4>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d103      	bne.n	800d1c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	691a      	ldr	r2, [r3, #16]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	615a      	str	r2, [r3, #20]
}
 800d1ce:	bf00      	nop
 800d1d0:	3714      	adds	r7, #20
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	40012c00 	.word	0x40012c00
 800d1e0:	40014400 	.word	0x40014400
 800d1e4:	40014800 	.word	0x40014800

0800d1e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	f023 0201 	bic.w	r2, r3, #1
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	699b      	ldr	r3, [r3, #24]
 800d20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f023 0303 	bic.w	r3, r3, #3
 800d222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f023 0302 	bic.w	r3, r3, #2
 800d234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a24      	ldr	r2, [pc, #144]	; (800d2d4 <TIM_OC1_SetConfig+0xec>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d007      	beq.n	800d258 <TIM_OC1_SetConfig+0x70>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a23      	ldr	r2, [pc, #140]	; (800d2d8 <TIM_OC1_SetConfig+0xf0>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d003      	beq.n	800d258 <TIM_OC1_SetConfig+0x70>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a22      	ldr	r2, [pc, #136]	; (800d2dc <TIM_OC1_SetConfig+0xf4>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d10c      	bne.n	800d272 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	f023 0308 	bic.w	r3, r3, #8
 800d25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	4313      	orrs	r3, r2
 800d268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f023 0304 	bic.w	r3, r3, #4
 800d270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <TIM_OC1_SetConfig+0xec>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d007      	beq.n	800d28a <TIM_OC1_SetConfig+0xa2>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a17      	ldr	r2, [pc, #92]	; (800d2dc <TIM_OC1_SetConfig+0xf4>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d003      	beq.n	800d28a <TIM_OC1_SetConfig+0xa2>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4a14      	ldr	r2, [pc, #80]	; (800d2d8 <TIM_OC1_SetConfig+0xf0>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d111      	bne.n	800d2ae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	621a      	str	r2, [r3, #32]
}
 800d2c8:	bf00      	nop
 800d2ca:	371c      	adds	r7, #28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	40012c00 	.word	0x40012c00
 800d2d8:	40014800 	.word	0x40014800
 800d2dc:	40014400 	.word	0x40014400

0800d2e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b087      	sub	sp, #28
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	f023 0210 	bic.w	r2, r3, #16
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d30e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	021b      	lsls	r3, r3, #8
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	4313      	orrs	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	f023 0320 	bic.w	r3, r3, #32
 800d32e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	011b      	lsls	r3, r3, #4
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	4313      	orrs	r3, r2
 800d33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a22      	ldr	r2, [pc, #136]	; (800d3c8 <TIM_OC2_SetConfig+0xe8>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d10d      	bne.n	800d360 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d34a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	011b      	lsls	r3, r3, #4
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	4313      	orrs	r3, r2
 800d356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d35e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a19      	ldr	r2, [pc, #100]	; (800d3c8 <TIM_OC2_SetConfig+0xe8>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d007      	beq.n	800d378 <TIM_OC2_SetConfig+0x98>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a18      	ldr	r2, [pc, #96]	; (800d3cc <TIM_OC2_SetConfig+0xec>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d003      	beq.n	800d378 <TIM_OC2_SetConfig+0x98>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a17      	ldr	r2, [pc, #92]	; (800d3d0 <TIM_OC2_SetConfig+0xf0>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d113      	bne.n	800d3a0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d37e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	693a      	ldr	r2, [r7, #16]
 800d390:	4313      	orrs	r3, r2
 800d392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	621a      	str	r2, [r3, #32]
}
 800d3ba:	bf00      	nop
 800d3bc:	371c      	adds	r7, #28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	40012c00 	.word	0x40012c00
 800d3cc:	40014400 	.word	0x40014400
 800d3d0:	40014800 	.word	0x40014800

0800d3d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0303 	bic.w	r3, r3, #3
 800d40e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	021b      	lsls	r3, r3, #8
 800d428:	697a      	ldr	r2, [r7, #20]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a21      	ldr	r2, [pc, #132]	; (800d4b8 <TIM_OC3_SetConfig+0xe4>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d10d      	bne.n	800d452 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d43c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	021b      	lsls	r3, r3, #8
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	4313      	orrs	r3, r2
 800d448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a18      	ldr	r2, [pc, #96]	; (800d4b8 <TIM_OC3_SetConfig+0xe4>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d007      	beq.n	800d46a <TIM_OC3_SetConfig+0x96>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a17      	ldr	r2, [pc, #92]	; (800d4bc <TIM_OC3_SetConfig+0xe8>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d003      	beq.n	800d46a <TIM_OC3_SetConfig+0x96>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a16      	ldr	r2, [pc, #88]	; (800d4c0 <TIM_OC3_SetConfig+0xec>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d113      	bne.n	800d492 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	011b      	lsls	r3, r3, #4
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	4313      	orrs	r3, r2
 800d484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	693a      	ldr	r2, [r7, #16]
 800d48e:	4313      	orrs	r3, r2
 800d490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	621a      	str	r2, [r3, #32]
}
 800d4ac:	bf00      	nop
 800d4ae:	371c      	adds	r7, #28
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	40012c00 	.word	0x40012c00
 800d4bc:	40014400 	.word	0x40014400
 800d4c0:	40014800 	.word	0x40014800

0800d4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a1b      	ldr	r3, [r3, #32]
 800d4d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	69db      	ldr	r3, [r3, #28]
 800d4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	021b      	lsls	r3, r3, #8
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	4313      	orrs	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	031b      	lsls	r3, r3, #12
 800d51a:	693a      	ldr	r2, [r7, #16]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a14      	ldr	r2, [pc, #80]	; (800d574 <TIM_OC4_SetConfig+0xb0>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d007      	beq.n	800d538 <TIM_OC4_SetConfig+0x74>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4a13      	ldr	r2, [pc, #76]	; (800d578 <TIM_OC4_SetConfig+0xb4>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d003      	beq.n	800d538 <TIM_OC4_SetConfig+0x74>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a12      	ldr	r2, [pc, #72]	; (800d57c <TIM_OC4_SetConfig+0xb8>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d109      	bne.n	800d54c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d53e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	019b      	lsls	r3, r3, #6
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	4313      	orrs	r3, r2
 800d54a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	621a      	str	r2, [r3, #32]
}
 800d566:	bf00      	nop
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	40012c00 	.word	0x40012c00
 800d578:	40014400 	.word	0x40014400
 800d57c:	40014800 	.word	0x40014800

0800d580 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d580:	b480      	push	{r7}
 800d582:	b087      	sub	sp, #28
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d5c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	041b      	lsls	r3, r3, #16
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	4a13      	ldr	r2, [pc, #76]	; (800d624 <TIM_OC5_SetConfig+0xa4>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d007      	beq.n	800d5ea <TIM_OC5_SetConfig+0x6a>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a12      	ldr	r2, [pc, #72]	; (800d628 <TIM_OC5_SetConfig+0xa8>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d003      	beq.n	800d5ea <TIM_OC5_SetConfig+0x6a>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4a11      	ldr	r2, [pc, #68]	; (800d62c <TIM_OC5_SetConfig+0xac>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d109      	bne.n	800d5fe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	695b      	ldr	r3, [r3, #20]
 800d5f6:	021b      	lsls	r3, r3, #8
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	697a      	ldr	r2, [r7, #20]
 800d602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	621a      	str	r2, [r3, #32]
}
 800d618:	bf00      	nop
 800d61a:	371c      	adds	r7, #28
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	40012c00 	.word	0x40012c00
 800d628:	40014400 	.word	0x40014400
 800d62c:	40014800 	.word	0x40014800

0800d630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d630:	b480      	push	{r7}
 800d632:	b087      	sub	sp, #28
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6a1b      	ldr	r3, [r3, #32]
 800d64a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d65e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	021b      	lsls	r3, r3, #8
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	051b      	lsls	r3, r3, #20
 800d67e:	693a      	ldr	r2, [r7, #16]
 800d680:	4313      	orrs	r3, r2
 800d682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4a14      	ldr	r2, [pc, #80]	; (800d6d8 <TIM_OC6_SetConfig+0xa8>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d007      	beq.n	800d69c <TIM_OC6_SetConfig+0x6c>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a13      	ldr	r2, [pc, #76]	; (800d6dc <TIM_OC6_SetConfig+0xac>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d003      	beq.n	800d69c <TIM_OC6_SetConfig+0x6c>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a12      	ldr	r2, [pc, #72]	; (800d6e0 <TIM_OC6_SetConfig+0xb0>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d109      	bne.n	800d6b0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	695b      	ldr	r3, [r3, #20]
 800d6a8:	029b      	lsls	r3, r3, #10
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	621a      	str	r2, [r3, #32]
}
 800d6ca:	bf00      	nop
 800d6cc:	371c      	adds	r7, #28
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	40012c00 	.word	0x40012c00
 800d6dc:	40014400 	.word	0x40014400
 800d6e0:	40014800 	.word	0x40014800

0800d6e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b087      	sub	sp, #28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6a1b      	ldr	r3, [r3, #32]
 800d6f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	f023 0201 	bic.w	r2, r3, #1
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d70e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	011b      	lsls	r3, r3, #4
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	4313      	orrs	r3, r2
 800d718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	f023 030a 	bic.w	r3, r3, #10
 800d720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	4313      	orrs	r3, r2
 800d728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	697a      	ldr	r2, [r7, #20]
 800d734:	621a      	str	r2, [r3, #32]
}
 800d736:	bf00      	nop
 800d738:	371c      	adds	r7, #28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d742:	b480      	push	{r7}
 800d744:	b087      	sub	sp, #28
 800d746:	af00      	add	r7, sp, #0
 800d748:	60f8      	str	r0, [r7, #12]
 800d74a:	60b9      	str	r1, [r7, #8]
 800d74c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	f023 0210 	bic.w	r2, r3, #16
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d76c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	031b      	lsls	r3, r3, #12
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	4313      	orrs	r3, r2
 800d776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d77e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	011b      	lsls	r3, r3, #4
 800d784:	693a      	ldr	r2, [r7, #16]
 800d786:	4313      	orrs	r3, r2
 800d788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	621a      	str	r2, [r3, #32]
}
 800d796:	bf00      	nop
 800d798:	371c      	adds	r7, #28
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b085      	sub	sp, #20
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d7b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	f043 0307 	orr.w	r3, r3, #7
 800d7c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	609a      	str	r2, [r3, #8]
}
 800d7d0:	bf00      	nop
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b087      	sub	sp, #28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d7f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	021a      	lsls	r2, r3, #8
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	431a      	orrs	r2, r3
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	4313      	orrs	r3, r2
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	4313      	orrs	r3, r2
 800d808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	609a      	str	r2, [r3, #8]
}
 800d810:	bf00      	nop
 800d812:	371c      	adds	r7, #28
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d101      	bne.n	800d834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d830:	2302      	movs	r3, #2
 800d832:	e04a      	b.n	800d8ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2202      	movs	r2, #2
 800d840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a1f      	ldr	r2, [pc, #124]	; (800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d108      	bne.n	800d870 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4313      	orrs	r3, r2
 800d880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a12      	ldr	r2, [pc, #72]	; (800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d004      	beq.n	800d89e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d89c:	d10c      	bne.n	800d8b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	40012c00 	.word	0x40012c00

0800d8dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d101      	bne.n	800d8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e078      	b.n	800d9ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	4313      	orrs	r3, r2
 800d91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	4313      	orrs	r3, r2
 800d928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	4313      	orrs	r3, r2
 800d944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	4313      	orrs	r3, r2
 800d952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	4313      	orrs	r3, r2
 800d960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	4313      	orrs	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a20      	ldr	r2, [pc, #128]	; (800d9f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d106      	bne.n	800d98a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	69db      	ldr	r3, [r3, #28]
 800d986:	4313      	orrs	r3, r2
 800d988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a1a      	ldr	r2, [pc, #104]	; (800d9f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d121      	bne.n	800d9d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99e:	051b      	lsls	r3, r3, #20
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a0c      	ldr	r2, [pc, #48]	; (800d9f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d106      	bne.n	800d9d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	40012c00 	.word	0x40012c00

0800d9fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da04:	bf00      	nop
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da18:	bf00      	nop
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800da48:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800da4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800da66:	b480      	push	{r7}
 800da68:	b085      	sub	sp, #20
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800da6e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800da72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	43db      	mvns	r3, r3
 800da82:	b29b      	uxth	r3, r3
 800da84:	4013      	ands	r3, r2
 800da86:	b29a      	uxth	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800da9c:	b084      	sub	sp, #16
 800da9e:	b480      	push	{r7}
 800daa0:	b083      	sub	sp, #12
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	f107 0014 	add.w	r0, r7, #20
 800daaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	b004      	add	sp, #16
 800dadc:	4770      	bx	lr
	...

0800dae0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b09d      	sub	sp, #116	; 0x74
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800daea:	2300      	movs	r3, #0
 800daec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	881b      	ldrh	r3, [r3, #0]
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800db02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	78db      	ldrb	r3, [r3, #3]
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d81f      	bhi.n	800db52 <USB_ActivateEndpoint+0x72>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <USB_ActivateEndpoint+0x38>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db29 	.word	0x0800db29
 800db1c:	0800db45 	.word	0x0800db45
 800db20:	0800db5b 	.word	0x0800db5b
 800db24:	0800db37 	.word	0x0800db37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800db28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800db2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800db30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800db34:	e012      	b.n	800db5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800db36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800db3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800db3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800db42:	e00b      	b.n	800db5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800db44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800db48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800db4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800db50:	e004      	b.n	800db5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800db52:	2301      	movs	r3, #1
 800db54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800db58:	e000      	b.n	800db5c <USB_ActivateEndpoint+0x7c>
      break;
 800db5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	441a      	add	r2, r3
 800db66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800db6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	4413      	add	r3, r2
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	b21b      	sxth	r3, r3
 800db8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db96:	b21a      	sxth	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	b21b      	sxth	r3, r3
 800db9e:	4313      	orrs	r3, r2
 800dba0:	b21b      	sxth	r3, r3
 800dba2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	441a      	add	r2, r3
 800dbb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800dbb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	7b1b      	ldrb	r3, [r3, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f040 8149 	bne.w	800de64 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f000 8084 	beq.w	800dce4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	61bb      	str	r3, [r7, #24]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	4413      	add	r3, r2
 800dbee:	61bb      	str	r3, [r7, #24]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	00da      	lsls	r2, r3, #3
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbfe:	617b      	str	r3, [r7, #20]
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	88db      	ldrh	r3, [r3, #6]
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	827b      	strh	r3, [r7, #18]
 800dc1e:	8a7b      	ldrh	r3, [r7, #18]
 800dc20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d01b      	beq.n	800dc60 <USB_ActivateEndpoint+0x180>
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc3e:	823b      	strh	r3, [r7, #16]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	441a      	add	r2, r3
 800dc4a:	8a3b      	ldrh	r3, [r7, #16]
 800dc4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	78db      	ldrb	r3, [r3, #3]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d020      	beq.n	800dcaa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	881b      	ldrh	r3, [r3, #0]
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc7e:	81bb      	strh	r3, [r7, #12]
 800dc80:	89bb      	ldrh	r3, [r7, #12]
 800dc82:	f083 0320 	eor.w	r3, r3, #32
 800dc86:	81bb      	strh	r3, [r7, #12]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	441a      	add	r2, r3
 800dc92:	89bb      	ldrh	r3, [r7, #12]
 800dc94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	8013      	strh	r3, [r2, #0]
 800dca8:	e2a6      	b.n	800e1f8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4413      	add	r3, r2
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcc0:	81fb      	strh	r3, [r7, #14]
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	441a      	add	r2, r3
 800dccc:	89fb      	ldrh	r3, [r7, #14]
 800dcce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	8013      	strh	r3, [r2, #0]
 800dce2:	e289      	b.n	800e1f8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	633b      	str	r3, [r7, #48]	; 0x30
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf4:	4413      	add	r3, r2
 800dcf6:	633b      	str	r3, [r7, #48]	; 0x30
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	00da      	lsls	r2, r3, #3
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd00:	4413      	add	r3, r2
 800dd02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dd06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	88db      	ldrh	r3, [r3, #6]
 800dd0c:	085b      	lsrs	r3, r3, #1
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	461a      	mov	r2, r3
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	4413      	add	r3, r2
 800dd2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	00da      	lsls	r2, r3, #3
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	4413      	add	r3, r2
 800dd36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dd3a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	2b3e      	cmp	r3, #62	; 0x3e
 800dd42:	d918      	bls.n	800dd76 <USB_ActivateEndpoint+0x296>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	095b      	lsrs	r3, r3, #5
 800dd4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	f003 031f 	and.w	r3, r3, #31
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d102      	bne.n	800dd5e <USB_ActivateEndpoint+0x27e>
 800dd58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	029b      	lsls	r3, r3, #10
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	801a      	strh	r2, [r3, #0]
 800dd74:	e029      	b.n	800ddca <USB_ActivateEndpoint+0x2ea>
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d112      	bne.n	800dda4 <USB_ActivateEndpoint+0x2c4>
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	881b      	ldrh	r3, [r3, #0]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	801a      	strh	r2, [r3, #0]
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda0:	801a      	strh	r2, [r3, #0]
 800dda2:	e012      	b.n	800ddca <USB_ActivateEndpoint+0x2ea>
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	085b      	lsrs	r3, r3, #1
 800ddaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <USB_ActivateEndpoint+0x2de>
 800ddb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddba:	3301      	adds	r3, #1
 800ddbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800ddbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	029b      	lsls	r3, r3, #10
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	847b      	strh	r3, [r7, #34]	; 0x22
 800ddd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d01b      	beq.n	800de1a <USB_ActivateEndpoint+0x33a>
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddf8:	843b      	strh	r3, [r7, #32]
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	441a      	add	r2, r3
 800de04:	8c3b      	ldrh	r3, [r7, #32]
 800de06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de16:	b29b      	uxth	r3, r3
 800de18:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	881b      	ldrh	r3, [r3, #0]
 800de26:	b29b      	uxth	r3, r3
 800de28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de30:	83fb      	strh	r3, [r7, #30]
 800de32:	8bfb      	ldrh	r3, [r7, #30]
 800de34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800de38:	83fb      	strh	r3, [r7, #30]
 800de3a:	8bfb      	ldrh	r3, [r7, #30]
 800de3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800de40:	83fb      	strh	r3, [r7, #30]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	441a      	add	r2, r3
 800de4c:	8bfb      	ldrh	r3, [r7, #30]
 800de4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5e:	b29b      	uxth	r3, r3
 800de60:	8013      	strh	r3, [r2, #0]
 800de62:	e1c9      	b.n	800e1f8 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	78db      	ldrb	r3, [r3, #3]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d11e      	bne.n	800deaa <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	4413      	add	r3, r2
 800de76:	881b      	ldrh	r3, [r3, #0]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de82:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	441a      	add	r2, r3
 800de90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800de94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800dea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	8013      	strh	r3, [r2, #0]
 800dea8:	e01d      	b.n	800dee6 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800debc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dec0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	441a      	add	r2, r3
 800dece:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ded2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ded6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800deda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800def0:	b29b      	uxth	r3, r3
 800def2:	461a      	mov	r2, r3
 800def4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800def6:	4413      	add	r3, r2
 800def8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	00da      	lsls	r2, r3, #3
 800df00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df02:	4413      	add	r3, r2
 800df04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df08:	65bb      	str	r3, [r7, #88]	; 0x58
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	891b      	ldrh	r3, [r3, #8]
 800df0e:	085b      	lsrs	r3, r3, #1
 800df10:	b29b      	uxth	r3, r3
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	b29a      	uxth	r2, r3
 800df16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df18:	801a      	strh	r2, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	657b      	str	r3, [r7, #84]	; 0x54
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df24:	b29b      	uxth	r3, r3
 800df26:	461a      	mov	r2, r3
 800df28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df2a:	4413      	add	r3, r2
 800df2c:	657b      	str	r3, [r7, #84]	; 0x54
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	00da      	lsls	r2, r3, #3
 800df34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df36:	4413      	add	r3, r2
 800df38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800df3c:	653b      	str	r3, [r7, #80]	; 0x50
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	895b      	ldrh	r3, [r3, #10]
 800df42:	085b      	lsrs	r3, r3, #1
 800df44:	b29b      	uxth	r3, r3
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	b29a      	uxth	r2, r3
 800df4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	785b      	ldrb	r3, [r3, #1]
 800df52:	2b00      	cmp	r3, #0
 800df54:	f040 8093 	bne.w	800e07e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800df68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d01b      	beq.n	800dfac <USB_ActivateEndpoint+0x4cc>
 800df74:	687a      	ldr	r2, [r7, #4]
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	b29b      	uxth	r3, r3
 800df82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	441a      	add	r2, r3
 800df96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800dfba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d01b      	beq.n	800dffc <USB_ActivateEndpoint+0x51c>
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfda:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	441a      	add	r2, r3
 800dfe6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dff4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	881b      	ldrh	r3, [r3, #0]
 800e008:	b29b      	uxth	r3, r3
 800e00a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e012:	873b      	strh	r3, [r7, #56]	; 0x38
 800e014:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e01a:	873b      	strh	r3, [r7, #56]	; 0x38
 800e01c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e01e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e022:	873b      	strh	r3, [r7, #56]	; 0x38
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	441a      	add	r2, r3
 800e02e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e040:	b29b      	uxth	r3, r3
 800e042:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	4413      	add	r3, r2
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	b29b      	uxth	r3, r3
 800e052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e05a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	441a      	add	r2, r3
 800e066:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e06c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e078:	b29b      	uxth	r3, r3
 800e07a:	8013      	strh	r3, [r2, #0]
 800e07c:	e0bc      	b.n	800e1f8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	4413      	add	r3, r2
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e08e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e096:	2b00      	cmp	r3, #0
 800e098:	d01d      	beq.n	800e0d6 <USB_ActivateEndpoint+0x5f6>
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4413      	add	r3, r2
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	441a      	add	r2, r3
 800e0be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800e0c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e0e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d01d      	beq.n	800e12e <USB_ActivateEndpoint+0x64e>
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e108:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	441a      	add	r2, r3
 800e116:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e11a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e11e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	78db      	ldrb	r3, [r3, #3]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d024      	beq.n	800e180 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	4413      	add	r3, r2
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	b29b      	uxth	r3, r3
 800e144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e14c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e154:	f083 0320 	eor.w	r3, r3, #32
 800e158:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	441a      	add	r2, r3
 800e166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e16a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e16e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	8013      	strh	r3, [r2, #0]
 800e17e:	e01d      	b.n	800e1bc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	881b      	ldrh	r3, [r3, #0]
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e196:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	441a      	add	r2, r3
 800e1a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	881b      	ldrh	r3, [r3, #0]
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	441a      	add	r2, r3
 800e1e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e1f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3774      	adds	r7, #116	; 0x74
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b0c2      	sub	sp, #264	; 0x108
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	1d3b      	adds	r3, r7, #4
 800e210:	6018      	str	r0, [r3, #0]
 800e212:	463b      	mov	r3, r7
 800e214:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e216:	463b      	mov	r3, r7
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	785b      	ldrb	r3, [r3, #1]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	f040 8509 	bne.w	800ec34 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e222:	463b      	mov	r3, r7
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	699a      	ldr	r2, [r3, #24]
 800e228:	463b      	mov	r3, r7
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d905      	bls.n	800e23e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800e232:	463b      	mov	r3, r7
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e23c:	e004      	b.n	800e248 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800e23e:	463b      	mov	r3, r7
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e248:	463b      	mov	r3, r7
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	7b1b      	ldrb	r3, [r3, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d128      	bne.n	800e2a4 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e252:	463b      	mov	r3, r7
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	6959      	ldr	r1, [r3, #20]
 800e258:	463b      	mov	r3, r7
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	88da      	ldrh	r2, [r3, #6]
 800e25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e262:	b29b      	uxth	r3, r3
 800e264:	1d38      	adds	r0, r7, #4
 800e266:	6800      	ldr	r0, [r0, #0]
 800e268:	f001 f9ef 	bl	800f64a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e26c:	1d3b      	adds	r3, r7, #4
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	613b      	str	r3, [r7, #16]
 800e272:	1d3b      	adds	r3, r7, #4
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	461a      	mov	r2, r3
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	4413      	add	r3, r2
 800e282:	613b      	str	r3, [r7, #16]
 800e284:	463b      	mov	r3, r7
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	00da      	lsls	r2, r3, #3
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	4413      	add	r3, r2
 800e290:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e294:	60fb      	str	r3, [r7, #12]
 800e296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	801a      	strh	r2, [r3, #0]
 800e2a0:	f000 bc9f 	b.w	800ebe2 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e2a4:	463b      	mov	r3, r7
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	78db      	ldrb	r3, [r3, #3]
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	f040 8347 	bne.w	800e93e <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e2b0:	463b      	mov	r3, r7
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	6a1a      	ldr	r2, [r3, #32]
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	f240 82eb 	bls.w	800e898 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e2c2:	1d3b      	adds	r3, r7, #4
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	463b      	mov	r3, r7
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	881b      	ldrh	r3, [r3, #0]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e2e0:	1d3b      	adds	r3, r7, #4
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	441a      	add	r2, r3
 800e2ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e2f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e2fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e302:	b29b      	uxth	r3, r3
 800e304:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e306:	463b      	mov	r3, r7
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	6a1a      	ldr	r2, [r3, #32]
 800e30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e310:	1ad2      	subs	r2, r2, r3
 800e312:	463b      	mov	r3, r7
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e318:	1d3b      	adds	r3, r7, #4
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	463b      	mov	r3, r7
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f000 8159 	beq.w	800e5e6 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e334:	1d3b      	adds	r3, r7, #4
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	633b      	str	r3, [r7, #48]	; 0x30
 800e33a:	463b      	mov	r3, r7
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d164      	bne.n	800e40e <USB_EPStartXfer+0x206>
 800e344:	1d3b      	adds	r3, r7, #4
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	62bb      	str	r3, [r7, #40]	; 0x28
 800e34a:	1d3b      	adds	r3, r7, #4
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e352:	b29b      	uxth	r3, r3
 800e354:	461a      	mov	r2, r3
 800e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e358:	4413      	add	r3, r2
 800e35a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e35c:	463b      	mov	r3, r7
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	00da      	lsls	r2, r3, #3
 800e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e366:	4413      	add	r3, r2
 800e368:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e36c:	627b      	str	r3, [r7, #36]	; 0x24
 800e36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e372:	2b3e      	cmp	r3, #62	; 0x3e
 800e374:	d91c      	bls.n	800e3b0 <USB_EPStartXfer+0x1a8>
 800e376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e37a:	095b      	lsrs	r3, r3, #5
 800e37c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e384:	f003 031f 	and.w	r3, r3, #31
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d104      	bne.n	800e396 <USB_EPStartXfer+0x18e>
 800e38c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e390:	3b01      	subs	r3, #1
 800e392:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e396:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	029b      	lsls	r3, r3, #10
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3a8:	b29a      	uxth	r2, r3
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	801a      	strh	r2, [r3, #0]
 800e3ae:	e04a      	b.n	800e446 <USB_EPStartXfer+0x23e>
 800e3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d112      	bne.n	800e3de <USB_EPStartXfer+0x1d6>
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	801a      	strh	r2, [r3, #0]
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	881b      	ldrh	r3, [r3, #0]
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	801a      	strh	r2, [r3, #0]
 800e3dc:	e033      	b.n	800e446 <USB_EPStartXfer+0x23e>
 800e3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3e2:	085b      	lsrs	r3, r3, #1
 800e3e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d004      	beq.n	800e3fe <USB_EPStartXfer+0x1f6>
 800e3f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e3fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e402:	b29b      	uxth	r3, r3
 800e404:	029b      	lsls	r3, r3, #10
 800e406:	b29a      	uxth	r2, r3
 800e408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40a:	801a      	strh	r2, [r3, #0]
 800e40c:	e01b      	b.n	800e446 <USB_EPStartXfer+0x23e>
 800e40e:	463b      	mov	r3, r7
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	785b      	ldrb	r3, [r3, #1]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d116      	bne.n	800e446 <USB_EPStartXfer+0x23e>
 800e418:	1d3b      	adds	r3, r7, #4
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e420:	b29b      	uxth	r3, r3
 800e422:	461a      	mov	r2, r3
 800e424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e426:	4413      	add	r3, r2
 800e428:	633b      	str	r3, [r7, #48]	; 0x30
 800e42a:	463b      	mov	r3, r7
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	00da      	lsls	r2, r3, #3
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	4413      	add	r3, r2
 800e436:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e440:	b29a      	uxth	r2, r3
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e446:	463b      	mov	r3, r7
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	895b      	ldrh	r3, [r3, #10]
 800e44c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e450:	463b      	mov	r3, r7
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6959      	ldr	r1, [r3, #20]
 800e456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e460:	1d38      	adds	r0, r7, #4
 800e462:	6800      	ldr	r0, [r0, #0]
 800e464:	f001 f8f1 	bl	800f64a <USB_WritePMA>
            ep->xfer_buff += len;
 800e468:	463b      	mov	r3, r7
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	695a      	ldr	r2, [r3, #20]
 800e46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e472:	441a      	add	r2, r3
 800e474:	463b      	mov	r3, r7
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e47a:	463b      	mov	r3, r7
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6a1a      	ldr	r2, [r3, #32]
 800e480:	463b      	mov	r3, r7
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	429a      	cmp	r2, r3
 800e488:	d909      	bls.n	800e49e <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800e48a:	463b      	mov	r3, r7
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6a1a      	ldr	r2, [r3, #32]
 800e490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e494:	1ad2      	subs	r2, r2, r3
 800e496:	463b      	mov	r3, r7
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	621a      	str	r2, [r3, #32]
 800e49c:	e008      	b.n	800e4b0 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800e49e:	463b      	mov	r3, r7
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e4a8:	463b      	mov	r3, r7
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e4b0:	463b      	mov	r3, r7
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	785b      	ldrb	r3, [r3, #1]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d164      	bne.n	800e584 <USB_EPStartXfer+0x37c>
 800e4ba:	1d3b      	adds	r3, r7, #4
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	61bb      	str	r3, [r7, #24]
 800e4c0:	1d3b      	adds	r3, r7, #4
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	61bb      	str	r3, [r7, #24]
 800e4d2:	463b      	mov	r3, r7
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	00da      	lsls	r2, r3, #3
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	4413      	add	r3, r2
 800e4de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4e8:	2b3e      	cmp	r3, #62	; 0x3e
 800e4ea:	d91c      	bls.n	800e526 <USB_EPStartXfer+0x31e>
 800e4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4f0:	095b      	lsrs	r3, r3, #5
 800e4f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4fa:	f003 031f 	and.w	r3, r3, #31
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d104      	bne.n	800e50c <USB_EPStartXfer+0x304>
 800e502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e506:	3b01      	subs	r3, #1
 800e508:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e50c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e510:	b29b      	uxth	r3, r3
 800e512:	029b      	lsls	r3, r3, #10
 800e514:	b29b      	uxth	r3, r3
 800e516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e51a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e51e:	b29a      	uxth	r2, r3
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	801a      	strh	r2, [r3, #0]
 800e524:	e04d      	b.n	800e5c2 <USB_EPStartXfer+0x3ba>
 800e526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d112      	bne.n	800e554 <USB_EPStartXfer+0x34c>
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	b29b      	uxth	r3, r3
 800e534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e538:	b29a      	uxth	r2, r3
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	801a      	strh	r2, [r3, #0]
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	b29b      	uxth	r3, r3
 800e544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	801a      	strh	r2, [r3, #0]
 800e552:	e036      	b.n	800e5c2 <USB_EPStartXfer+0x3ba>
 800e554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e558:	085b      	lsrs	r3, r3, #1
 800e55a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e562:	f003 0301 	and.w	r3, r3, #1
 800e566:	2b00      	cmp	r3, #0
 800e568:	d004      	beq.n	800e574 <USB_EPStartXfer+0x36c>
 800e56a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e56e:	3301      	adds	r3, #1
 800e570:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e578:	b29b      	uxth	r3, r3
 800e57a:	029b      	lsls	r3, r3, #10
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	801a      	strh	r2, [r3, #0]
 800e582:	e01e      	b.n	800e5c2 <USB_EPStartXfer+0x3ba>
 800e584:	463b      	mov	r3, r7
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	785b      	ldrb	r3, [r3, #1]
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d119      	bne.n	800e5c2 <USB_EPStartXfer+0x3ba>
 800e58e:	1d3b      	adds	r3, r7, #4
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	623b      	str	r3, [r7, #32]
 800e594:	1d3b      	adds	r3, r7, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	623b      	str	r3, [r7, #32]
 800e5a6:	463b      	mov	r3, r7
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	00da      	lsls	r2, r3, #3
 800e5ae:	6a3b      	ldr	r3, [r7, #32]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e5b6:	61fb      	str	r3, [r7, #28]
 800e5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e5c2:	463b      	mov	r3, r7
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	891b      	ldrh	r3, [r3, #8]
 800e5c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e5cc:	463b      	mov	r3, r7
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	6959      	ldr	r1, [r3, #20]
 800e5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e5dc:	1d38      	adds	r0, r7, #4
 800e5de:	6800      	ldr	r0, [r0, #0]
 800e5e0:	f001 f833 	bl	800f64a <USB_WritePMA>
 800e5e4:	e2fd      	b.n	800ebe2 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e5e6:	463b      	mov	r3, r7
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	785b      	ldrb	r3, [r3, #1]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d164      	bne.n	800e6ba <USB_EPStartXfer+0x4b2>
 800e5f0:	1d3b      	adds	r3, r7, #4
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5f6:	1d3b      	adds	r3, r7, #4
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	461a      	mov	r2, r3
 800e602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e604:	4413      	add	r3, r2
 800e606:	64bb      	str	r3, [r7, #72]	; 0x48
 800e608:	463b      	mov	r3, r7
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	00da      	lsls	r2, r3, #3
 800e610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e612:	4413      	add	r3, r2
 800e614:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e618:	647b      	str	r3, [r7, #68]	; 0x44
 800e61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e61e:	2b3e      	cmp	r3, #62	; 0x3e
 800e620:	d91c      	bls.n	800e65c <USB_EPStartXfer+0x454>
 800e622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e626:	095b      	lsrs	r3, r3, #5
 800e628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e630:	f003 031f 	and.w	r3, r3, #31
 800e634:	2b00      	cmp	r3, #0
 800e636:	d104      	bne.n	800e642 <USB_EPStartXfer+0x43a>
 800e638:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e63c:	3b01      	subs	r3, #1
 800e63e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e646:	b29b      	uxth	r3, r3
 800e648:	029b      	lsls	r3, r3, #10
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e654:	b29a      	uxth	r2, r3
 800e656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e658:	801a      	strh	r2, [r3, #0]
 800e65a:	e04d      	b.n	800e6f8 <USB_EPStartXfer+0x4f0>
 800e65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e660:	2b00      	cmp	r3, #0
 800e662:	d112      	bne.n	800e68a <USB_EPStartXfer+0x482>
 800e664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e666:	881b      	ldrh	r3, [r3, #0]
 800e668:	b29b      	uxth	r3, r3
 800e66a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e66e:	b29a      	uxth	r2, r3
 800e670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e672:	801a      	strh	r2, [r3, #0]
 800e674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e682:	b29a      	uxth	r2, r3
 800e684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e686:	801a      	strh	r2, [r3, #0]
 800e688:	e036      	b.n	800e6f8 <USB_EPStartXfer+0x4f0>
 800e68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e68e:	085b      	lsrs	r3, r3, #1
 800e690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <USB_EPStartXfer+0x4a2>
 800e6a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e6aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	029b      	lsls	r3, r3, #10
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6b6:	801a      	strh	r2, [r3, #0]
 800e6b8:	e01e      	b.n	800e6f8 <USB_EPStartXfer+0x4f0>
 800e6ba:	463b      	mov	r3, r7
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	785b      	ldrb	r3, [r3, #1]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d119      	bne.n	800e6f8 <USB_EPStartXfer+0x4f0>
 800e6c4:	1d3b      	adds	r3, r7, #4
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	653b      	str	r3, [r7, #80]	; 0x50
 800e6ca:	1d3b      	adds	r3, r7, #4
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6d8:	4413      	add	r3, r2
 800e6da:	653b      	str	r3, [r7, #80]	; 0x50
 800e6dc:	463b      	mov	r3, r7
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	00da      	lsls	r2, r3, #3
 800e6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e6:	4413      	add	r3, r2
 800e6e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e6ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e6f8:	463b      	mov	r3, r7
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	891b      	ldrh	r3, [r3, #8]
 800e6fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e702:	463b      	mov	r3, r7
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6959      	ldr	r1, [r3, #20]
 800e708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e712:	1d38      	adds	r0, r7, #4
 800e714:	6800      	ldr	r0, [r0, #0]
 800e716:	f000 ff98 	bl	800f64a <USB_WritePMA>
            ep->xfer_buff += len;
 800e71a:	463b      	mov	r3, r7
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	695a      	ldr	r2, [r3, #20]
 800e720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e724:	441a      	add	r2, r3
 800e726:	463b      	mov	r3, r7
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e72c:	463b      	mov	r3, r7
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6a1a      	ldr	r2, [r3, #32]
 800e732:	463b      	mov	r3, r7
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d909      	bls.n	800e750 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800e73c:	463b      	mov	r3, r7
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6a1a      	ldr	r2, [r3, #32]
 800e742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e746:	1ad2      	subs	r2, r2, r3
 800e748:	463b      	mov	r3, r7
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	621a      	str	r2, [r3, #32]
 800e74e:	e008      	b.n	800e762 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800e750:	463b      	mov	r3, r7
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e75a:	463b      	mov	r3, r7
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2200      	movs	r2, #0
 800e760:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e762:	1d3b      	adds	r3, r7, #4
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	643b      	str	r3, [r7, #64]	; 0x40
 800e768:	463b      	mov	r3, r7
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	785b      	ldrb	r3, [r3, #1]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d164      	bne.n	800e83c <USB_EPStartXfer+0x634>
 800e772:	1d3b      	adds	r3, r7, #4
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	63bb      	str	r3, [r7, #56]	; 0x38
 800e778:	1d3b      	adds	r3, r7, #4
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e780:	b29b      	uxth	r3, r3
 800e782:	461a      	mov	r2, r3
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	4413      	add	r3, r2
 800e788:	63bb      	str	r3, [r7, #56]	; 0x38
 800e78a:	463b      	mov	r3, r7
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	00da      	lsls	r2, r3, #3
 800e792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e794:	4413      	add	r3, r2
 800e796:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e79a:	637b      	str	r3, [r7, #52]	; 0x34
 800e79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7a0:	2b3e      	cmp	r3, #62	; 0x3e
 800e7a2:	d91c      	bls.n	800e7de <USB_EPStartXfer+0x5d6>
 800e7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7a8:	095b      	lsrs	r3, r3, #5
 800e7aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7b2:	f003 031f 	and.w	r3, r3, #31
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d104      	bne.n	800e7c4 <USB_EPStartXfer+0x5bc>
 800e7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7be:	3b01      	subs	r3, #1
 800e7c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	029b      	lsls	r3, r3, #10
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7da:	801a      	strh	r2, [r3, #0]
 800e7dc:	e04a      	b.n	800e874 <USB_EPStartXfer+0x66c>
 800e7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d112      	bne.n	800e80c <USB_EPStartXfer+0x604>
 800e7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f4:	801a      	strh	r2, [r3, #0]
 800e7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f8:	881b      	ldrh	r3, [r3, #0]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e804:	b29a      	uxth	r2, r3
 800e806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e808:	801a      	strh	r2, [r3, #0]
 800e80a:	e033      	b.n	800e874 <USB_EPStartXfer+0x66c>
 800e80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e810:	085b      	lsrs	r3, r3, #1
 800e812:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d004      	beq.n	800e82c <USB_EPStartXfer+0x624>
 800e822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e826:	3301      	adds	r3, #1
 800e828:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e830:	b29b      	uxth	r3, r3
 800e832:	029b      	lsls	r3, r3, #10
 800e834:	b29a      	uxth	r2, r3
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	801a      	strh	r2, [r3, #0]
 800e83a:	e01b      	b.n	800e874 <USB_EPStartXfer+0x66c>
 800e83c:	463b      	mov	r3, r7
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	785b      	ldrb	r3, [r3, #1]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d116      	bne.n	800e874 <USB_EPStartXfer+0x66c>
 800e846:	1d3b      	adds	r3, r7, #4
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e84e:	b29b      	uxth	r3, r3
 800e850:	461a      	mov	r2, r3
 800e852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e854:	4413      	add	r3, r2
 800e856:	643b      	str	r3, [r7, #64]	; 0x40
 800e858:	463b      	mov	r3, r7
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	00da      	lsls	r2, r3, #3
 800e860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e862:	4413      	add	r3, r2
 800e864:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e86e:	b29a      	uxth	r2, r3
 800e870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e872:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e874:	463b      	mov	r3, r7
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	895b      	ldrh	r3, [r3, #10]
 800e87a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e87e:	463b      	mov	r3, r7
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	6959      	ldr	r1, [r3, #20]
 800e884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e888:	b29b      	uxth	r3, r3
 800e88a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e88e:	1d38      	adds	r0, r7, #4
 800e890:	6800      	ldr	r0, [r0, #0]
 800e892:	f000 feda 	bl	800f64a <USB_WritePMA>
 800e896:	e1a4      	b.n	800ebe2 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e898:	463b      	mov	r3, r7
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e8a2:	1d3b      	adds	r3, r7, #4
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4413      	add	r3, r2
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e8c0:	1d3b      	adds	r3, r7, #4
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	463b      	mov	r3, r7
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	441a      	add	r2, r3
 800e8ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e8d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e8e6:	1d3b      	adds	r3, r7, #4
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8ec:	1d3b      	adds	r3, r7, #4
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8fa:	4413      	add	r3, r2
 800e8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8fe:	463b      	mov	r3, r7
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	00da      	lsls	r2, r3, #3
 800e906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e908:	4413      	add	r3, r2
 800e90a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e90e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e914:	b29a      	uxth	r2, r3
 800e916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e918:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e91a:	463b      	mov	r3, r7
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	891b      	ldrh	r3, [r3, #8]
 800e920:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e924:	463b      	mov	r3, r7
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	6959      	ldr	r1, [r3, #20]
 800e92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e92e:	b29b      	uxth	r3, r3
 800e930:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e934:	1d38      	adds	r0, r7, #4
 800e936:	6800      	ldr	r0, [r0, #0]
 800e938:	f000 fe87 	bl	800f64a <USB_WritePMA>
 800e93c:	e151      	b.n	800ebe2 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e93e:	463b      	mov	r3, r7
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	6a1a      	ldr	r2, [r3, #32]
 800e944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e948:	1ad2      	subs	r2, r2, r3
 800e94a:	463b      	mov	r3, r7
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e950:	1d3b      	adds	r3, r7, #4
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	463b      	mov	r3, r7
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4413      	add	r3, r2
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	b29b      	uxth	r3, r3
 800e962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e966:	2b00      	cmp	r3, #0
 800e968:	f000 809b 	beq.w	800eaa2 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e96c:	1d3b      	adds	r3, r7, #4
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	673b      	str	r3, [r7, #112]	; 0x70
 800e972:	463b      	mov	r3, r7
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d164      	bne.n	800ea46 <USB_EPStartXfer+0x83e>
 800e97c:	1d3b      	adds	r3, r7, #4
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	66bb      	str	r3, [r7, #104]	; 0x68
 800e982:	1d3b      	adds	r3, r7, #4
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	461a      	mov	r2, r3
 800e98e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e990:	4413      	add	r3, r2
 800e992:	66bb      	str	r3, [r7, #104]	; 0x68
 800e994:	463b      	mov	r3, r7
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	00da      	lsls	r2, r3, #3
 800e99c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e99e:	4413      	add	r3, r2
 800e9a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e9a4:	667b      	str	r3, [r7, #100]	; 0x64
 800e9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9aa:	2b3e      	cmp	r3, #62	; 0x3e
 800e9ac:	d91c      	bls.n	800e9e8 <USB_EPStartXfer+0x7e0>
 800e9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9b2:	095b      	lsrs	r3, r3, #5
 800e9b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9bc:	f003 031f 	and.w	r3, r3, #31
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d104      	bne.n	800e9ce <USB_EPStartXfer+0x7c6>
 800e9c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e9ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	029b      	lsls	r3, r3, #10
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9e4:	801a      	strh	r2, [r3, #0]
 800e9e6:	e04a      	b.n	800ea7e <USB_EPStartXfer+0x876>
 800e9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d112      	bne.n	800ea16 <USB_EPStartXfer+0x80e>
 800e9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e9fe:	801a      	strh	r2, [r3, #0]
 800ea00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea12:	801a      	strh	r2, [r3, #0]
 800ea14:	e033      	b.n	800ea7e <USB_EPStartXfer+0x876>
 800ea16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea1a:	085b      	lsrs	r3, r3, #1
 800ea1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ea20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea24:	f003 0301 	and.w	r3, r3, #1
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d004      	beq.n	800ea36 <USB_EPStartXfer+0x82e>
 800ea2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea30:	3301      	adds	r3, #1
 800ea32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ea36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	029b      	lsls	r3, r3, #10
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea42:	801a      	strh	r2, [r3, #0]
 800ea44:	e01b      	b.n	800ea7e <USB_EPStartXfer+0x876>
 800ea46:	463b      	mov	r3, r7
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	785b      	ldrb	r3, [r3, #1]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d116      	bne.n	800ea7e <USB_EPStartXfer+0x876>
 800ea50:	1d3b      	adds	r3, r7, #4
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea5e:	4413      	add	r3, r2
 800ea60:	673b      	str	r3, [r7, #112]	; 0x70
 800ea62:	463b      	mov	r3, r7
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	00da      	lsls	r2, r3, #3
 800ea6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea6c:	4413      	add	r3, r2
 800ea6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea72:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ea74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ea7e:	463b      	mov	r3, r7
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	895b      	ldrh	r3, [r3, #10]
 800ea84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea88:	463b      	mov	r3, r7
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6959      	ldr	r1, [r3, #20]
 800ea8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ea98:	1d38      	adds	r0, r7, #4
 800ea9a:	6800      	ldr	r0, [r0, #0]
 800ea9c:	f000 fdd5 	bl	800f64a <USB_WritePMA>
 800eaa0:	e09f      	b.n	800ebe2 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eaa2:	463b      	mov	r3, r7
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	785b      	ldrb	r3, [r3, #1]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d164      	bne.n	800eb76 <USB_EPStartXfer+0x96e>
 800eaac:	1d3b      	adds	r3, r7, #4
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eab2:	1d3b      	adds	r3, r7, #4
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	461a      	mov	r2, r3
 800eabe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eac0:	4413      	add	r3, r2
 800eac2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eac4:	463b      	mov	r3, r7
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	00da      	lsls	r2, r3, #3
 800eacc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eace:	4413      	add	r3, r2
 800ead0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ead4:	67bb      	str	r3, [r7, #120]	; 0x78
 800ead6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eada:	2b3e      	cmp	r3, #62	; 0x3e
 800eadc:	d91c      	bls.n	800eb18 <USB_EPStartXfer+0x910>
 800eade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eae2:	095b      	lsrs	r3, r3, #5
 800eae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaec:	f003 031f 	and.w	r3, r3, #31
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d104      	bne.n	800eafe <USB_EPStartXfer+0x8f6>
 800eaf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eafe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	029b      	lsls	r3, r3, #10
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb14:	801a      	strh	r2, [r3, #0]
 800eb16:	e053      	b.n	800ebc0 <USB_EPStartXfer+0x9b8>
 800eb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d112      	bne.n	800eb46 <USB_EPStartXfer+0x93e>
 800eb20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb2e:	801a      	strh	r2, [r3, #0]
 800eb30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb32:	881b      	ldrh	r3, [r3, #0]
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb42:	801a      	strh	r2, [r3, #0]
 800eb44:	e03c      	b.n	800ebc0 <USB_EPStartXfer+0x9b8>
 800eb46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb4a:	085b      	lsrs	r3, r3, #1
 800eb4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d004      	beq.n	800eb66 <USB_EPStartXfer+0x95e>
 800eb5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb60:	3301      	adds	r3, #1
 800eb62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800eb66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	029b      	lsls	r3, r3, #10
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb72:	801a      	strh	r2, [r3, #0]
 800eb74:	e024      	b.n	800ebc0 <USB_EPStartXfer+0x9b8>
 800eb76:	463b      	mov	r3, r7
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	785b      	ldrb	r3, [r3, #1]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d11f      	bne.n	800ebc0 <USB_EPStartXfer+0x9b8>
 800eb80:	1d3b      	adds	r3, r7, #4
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb88:	1d3b      	adds	r3, r7, #4
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	461a      	mov	r2, r3
 800eb94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb98:	4413      	add	r3, r2
 800eb9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb9e:	463b      	mov	r3, r7
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	00da      	lsls	r2, r3, #3
 800eba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ebaa:	4413      	add	r3, r2
 800ebac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ebb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ebb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ebc0:	463b      	mov	r3, r7
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	891b      	ldrh	r3, [r3, #8]
 800ebc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebca:	463b      	mov	r3, r7
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6959      	ldr	r1, [r3, #20]
 800ebd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ebda:	1d38      	adds	r0, r7, #4
 800ebdc:	6800      	ldr	r0, [r0, #0]
 800ebde:	f000 fd34 	bl	800f64a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ebe2:	1d3b      	adds	r3, r7, #4
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	4413      	add	r3, r2
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebfc:	817b      	strh	r3, [r7, #10]
 800ebfe:	897b      	ldrh	r3, [r7, #10]
 800ec00:	f083 0310 	eor.w	r3, r3, #16
 800ec04:	817b      	strh	r3, [r7, #10]
 800ec06:	897b      	ldrh	r3, [r7, #10]
 800ec08:	f083 0320 	eor.w	r3, r3, #32
 800ec0c:	817b      	strh	r3, [r7, #10]
 800ec0e:	1d3b      	adds	r3, r7, #4
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	463b      	mov	r3, r7
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	441a      	add	r2, r3
 800ec1c:	897b      	ldrh	r3, [r7, #10]
 800ec1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	8013      	strh	r3, [r2, #0]
 800ec32:	e3b5      	b.n	800f3a0 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ec34:	463b      	mov	r3, r7
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	7b1b      	ldrb	r3, [r3, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f040 8090 	bne.w	800ed60 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ec40:	463b      	mov	r3, r7
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	699a      	ldr	r2, [r3, #24]
 800ec46:	463b      	mov	r3, r7
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d90e      	bls.n	800ec6e <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800ec50:	463b      	mov	r3, r7
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	691b      	ldr	r3, [r3, #16]
 800ec56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ec5a:	463b      	mov	r3, r7
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	699a      	ldr	r2, [r3, #24]
 800ec60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec64:	1ad2      	subs	r2, r2, r3
 800ec66:	463b      	mov	r3, r7
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	619a      	str	r2, [r3, #24]
 800ec6c:	e008      	b.n	800ec80 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800ec6e:	463b      	mov	r3, r7
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	699b      	ldr	r3, [r3, #24]
 800ec74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ec78:	463b      	mov	r3, r7
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ec80:	1d3b      	adds	r3, r7, #4
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ec88:	1d3b      	adds	r3, r7, #4
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	461a      	mov	r2, r3
 800ec94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ec98:	4413      	add	r3, r2
 800ec9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ec9e:	463b      	mov	r3, r7
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	00da      	lsls	r2, r3, #3
 800eca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecaa:	4413      	add	r3, r2
 800ecac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ecb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ecb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecb8:	2b3e      	cmp	r3, #62	; 0x3e
 800ecba:	d91d      	bls.n	800ecf8 <USB_EPStartXfer+0xaf0>
 800ecbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecc0:	095b      	lsrs	r3, r3, #5
 800ecc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ecc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecca:	f003 031f 	and.w	r3, r3, #31
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d104      	bne.n	800ecdc <USB_EPStartXfer+0xad4>
 800ecd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ecdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	029b      	lsls	r3, r3, #10
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecf4:	801a      	strh	r2, [r3, #0]
 800ecf6:	e325      	b.n	800f344 <USB_EPStartXfer+0x113c>
 800ecf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d116      	bne.n	800ed2e <USB_EPStartXfer+0xb26>
 800ed00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed12:	801a      	strh	r2, [r3, #0]
 800ed14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed2a:	801a      	strh	r2, [r3, #0]
 800ed2c:	e30a      	b.n	800f344 <USB_EPStartXfer+0x113c>
 800ed2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed32:	085b      	lsrs	r3, r3, #1
 800ed34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d004      	beq.n	800ed4e <USB_EPStartXfer+0xb46>
 800ed44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed48:	3301      	adds	r3, #1
 800ed4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ed4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	029b      	lsls	r3, r3, #10
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed5c:	801a      	strh	r2, [r3, #0]
 800ed5e:	e2f1      	b.n	800f344 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ed60:	463b      	mov	r3, r7
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	78db      	ldrb	r3, [r3, #3]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	f040 818f 	bne.w	800f08a <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ed6c:	463b      	mov	r3, r7
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	785b      	ldrb	r3, [r3, #1]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d175      	bne.n	800ee62 <USB_EPStartXfer+0xc5a>
 800ed76:	1d3b      	adds	r3, r7, #4
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ed7e:	1d3b      	adds	r3, r7, #4
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	461a      	mov	r2, r3
 800ed8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ed8e:	4413      	add	r3, r2
 800ed90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ed94:	463b      	mov	r3, r7
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	00da      	lsls	r2, r3, #3
 800ed9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eda0:	4413      	add	r3, r2
 800eda2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eda6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800edaa:	463b      	mov	r3, r7
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	2b3e      	cmp	r3, #62	; 0x3e
 800edb2:	d91f      	bls.n	800edf4 <USB_EPStartXfer+0xbec>
 800edb4:	463b      	mov	r3, r7
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	095b      	lsrs	r3, r3, #5
 800edbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800edc0:	463b      	mov	r3, r7
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	f003 031f 	and.w	r3, r3, #31
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d104      	bne.n	800edd8 <USB_EPStartXfer+0xbd0>
 800edce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edd2:	3b01      	subs	r3, #1
 800edd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800edd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eddc:	b29b      	uxth	r3, r3
 800edde:	029b      	lsls	r3, r3, #10
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ede6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edea:	b29a      	uxth	r2, r3
 800edec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800edf0:	801a      	strh	r2, [r3, #0]
 800edf2:	e05c      	b.n	800eeae <USB_EPStartXfer+0xca6>
 800edf4:	463b      	mov	r3, r7
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	691b      	ldr	r3, [r3, #16]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d116      	bne.n	800ee2c <USB_EPStartXfer+0xc24>
 800edfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee02:	881b      	ldrh	r3, [r3, #0]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee10:	801a      	strh	r2, [r3, #0]
 800ee12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee28:	801a      	strh	r2, [r3, #0]
 800ee2a:	e040      	b.n	800eeae <USB_EPStartXfer+0xca6>
 800ee2c:	463b      	mov	r3, r7
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	691b      	ldr	r3, [r3, #16]
 800ee32:	085b      	lsrs	r3, r3, #1
 800ee34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee38:	463b      	mov	r3, r7
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	f003 0301 	and.w	r3, r3, #1
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d004      	beq.n	800ee50 <USB_EPStartXfer+0xc48>
 800ee46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ee50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	029b      	lsls	r3, r3, #10
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ee5e:	801a      	strh	r2, [r3, #0]
 800ee60:	e025      	b.n	800eeae <USB_EPStartXfer+0xca6>
 800ee62:	463b      	mov	r3, r7
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	785b      	ldrb	r3, [r3, #1]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d120      	bne.n	800eeae <USB_EPStartXfer+0xca6>
 800ee6c:	1d3b      	adds	r3, r7, #4
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee74:	1d3b      	adds	r3, r7, #4
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ee84:	4413      	add	r3, r2
 800ee86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee8a:	463b      	mov	r3, r7
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	00da      	lsls	r2, r3, #3
 800ee92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ee96:	4413      	add	r3, r2
 800ee98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eea0:	463b      	mov	r3, r7
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eeac:	801a      	strh	r2, [r3, #0]
 800eeae:	1d3b      	adds	r3, r7, #4
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	785b      	ldrb	r3, [r3, #1]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d175      	bne.n	800efac <USB_EPStartXfer+0xda4>
 800eec0:	1d3b      	adds	r3, r7, #4
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eec8:	1d3b      	adds	r3, r7, #4
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	461a      	mov	r2, r3
 800eed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eed8:	4413      	add	r3, r2
 800eeda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eede:	463b      	mov	r3, r7
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	00da      	lsls	r2, r3, #3
 800eee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eeea:	4413      	add	r3, r2
 800eeec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eef4:	463b      	mov	r3, r7
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	2b3e      	cmp	r3, #62	; 0x3e
 800eefc:	d91f      	bls.n	800ef3e <USB_EPStartXfer+0xd36>
 800eefe:	463b      	mov	r3, r7
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	095b      	lsrs	r3, r3, #5
 800ef06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef0a:	463b      	mov	r3, r7
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	f003 031f 	and.w	r3, r3, #31
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <USB_EPStartXfer+0xd1a>
 800ef18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	029b      	lsls	r3, r3, #10
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef3a:	801a      	strh	r2, [r3, #0]
 800ef3c:	e058      	b.n	800eff0 <USB_EPStartXfer+0xde8>
 800ef3e:	463b      	mov	r3, r7
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	691b      	ldr	r3, [r3, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d116      	bne.n	800ef76 <USB_EPStartXfer+0xd6e>
 800ef48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef4c:	881b      	ldrh	r3, [r3, #0]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef5a:	801a      	strh	r2, [r3, #0]
 800ef5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef72:	801a      	strh	r2, [r3, #0]
 800ef74:	e03c      	b.n	800eff0 <USB_EPStartXfer+0xde8>
 800ef76:	463b      	mov	r3, r7
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	085b      	lsrs	r3, r3, #1
 800ef7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef82:	463b      	mov	r3, r7
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	f003 0301 	and.w	r3, r3, #1
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d004      	beq.n	800ef9a <USB_EPStartXfer+0xd92>
 800ef90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef94:	3301      	adds	r3, #1
 800ef96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	029b      	lsls	r3, r3, #10
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efa8:	801a      	strh	r2, [r3, #0]
 800efaa:	e021      	b.n	800eff0 <USB_EPStartXfer+0xde8>
 800efac:	463b      	mov	r3, r7
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	785b      	ldrb	r3, [r3, #1]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d11c      	bne.n	800eff0 <USB_EPStartXfer+0xde8>
 800efb6:	1d3b      	adds	r3, r7, #4
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	461a      	mov	r2, r3
 800efc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800efc6:	4413      	add	r3, r2
 800efc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800efcc:	463b      	mov	r3, r7
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	00da      	lsls	r2, r3, #3
 800efd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800efd8:	4413      	add	r3, r2
 800efda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800efde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800efe2:	463b      	mov	r3, r7
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	691b      	ldr	r3, [r3, #16]
 800efe8:	b29a      	uxth	r2, r3
 800efea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800eff0:	463b      	mov	r3, r7
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	f000 81a4 	beq.w	800f344 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800effc:	1d3b      	adds	r3, r7, #4
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	463b      	mov	r3, r7
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	4413      	add	r3, r2
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f010:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d005      	beq.n	800f028 <USB_EPStartXfer+0xe20>
 800f01c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10d      	bne.n	800f044 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f028:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f02c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f030:	2b00      	cmp	r3, #0
 800f032:	f040 8187 	bne.w	800f344 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f036:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f040 8180 	bne.w	800f344 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f044:	1d3b      	adds	r3, r7, #4
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	463b      	mov	r3, r7
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	4413      	add	r3, r2
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	b29b      	uxth	r3, r3
 800f056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f05e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f062:	1d3b      	adds	r3, r7, #4
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	463b      	mov	r3, r7
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	441a      	add	r2, r3
 800f070:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f07c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f084:	b29b      	uxth	r3, r3
 800f086:	8013      	strh	r3, [r2, #0]
 800f088:	e15c      	b.n	800f344 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f08a:	463b      	mov	r3, r7
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	78db      	ldrb	r3, [r3, #3]
 800f090:	2b01      	cmp	r3, #1
 800f092:	f040 8155 	bne.w	800f340 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f096:	463b      	mov	r3, r7
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	699a      	ldr	r2, [r3, #24]
 800f09c:	463b      	mov	r3, r7
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d90e      	bls.n	800f0c4 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800f0a6:	463b      	mov	r3, r7
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f0b0:	463b      	mov	r3, r7
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	699a      	ldr	r2, [r3, #24]
 800f0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0ba:	1ad2      	subs	r2, r2, r3
 800f0bc:	463b      	mov	r3, r7
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	619a      	str	r2, [r3, #24]
 800f0c2:	e008      	b.n	800f0d6 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800f0c4:	463b      	mov	r3, r7
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	699b      	ldr	r3, [r3, #24]
 800f0ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f0ce:	463b      	mov	r3, r7
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f0d6:	463b      	mov	r3, r7
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	785b      	ldrb	r3, [r3, #1]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d16f      	bne.n	800f1c0 <USB_EPStartXfer+0xfb8>
 800f0e0:	1d3b      	adds	r3, r7, #4
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f0e8:	1d3b      	adds	r3, r7, #4
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f0f8:	4413      	add	r3, r2
 800f0fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f0fe:	463b      	mov	r3, r7
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	00da      	lsls	r2, r3, #3
 800f106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f10a:	4413      	add	r3, r2
 800f10c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f118:	2b3e      	cmp	r3, #62	; 0x3e
 800f11a:	d91d      	bls.n	800f158 <USB_EPStartXfer+0xf50>
 800f11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f120:	095b      	lsrs	r3, r3, #5
 800f122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f12a:	f003 031f 	and.w	r3, r3, #31
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d104      	bne.n	800f13c <USB_EPStartXfer+0xf34>
 800f132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f136:	3b01      	subs	r3, #1
 800f138:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f140:	b29b      	uxth	r3, r3
 800f142:	029b      	lsls	r3, r3, #10
 800f144:	b29b      	uxth	r3, r3
 800f146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f14e:	b29a      	uxth	r2, r3
 800f150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f154:	801a      	strh	r2, [r3, #0]
 800f156:	e058      	b.n	800f20a <USB_EPStartXfer+0x1002>
 800f158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d116      	bne.n	800f18e <USB_EPStartXfer+0xf86>
 800f160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	b29b      	uxth	r3, r3
 800f168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f172:	801a      	strh	r2, [r3, #0]
 800f174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f178:	881b      	ldrh	r3, [r3, #0]
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f184:	b29a      	uxth	r2, r3
 800f186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f18a:	801a      	strh	r2, [r3, #0]
 800f18c:	e03d      	b.n	800f20a <USB_EPStartXfer+0x1002>
 800f18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f192:	085b      	lsrs	r3, r3, #1
 800f194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f19c:	f003 0301 	and.w	r3, r3, #1
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d004      	beq.n	800f1ae <USB_EPStartXfer+0xfa6>
 800f1a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f1ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	029b      	lsls	r3, r3, #10
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1bc:	801a      	strh	r2, [r3, #0]
 800f1be:	e024      	b.n	800f20a <USB_EPStartXfer+0x1002>
 800f1c0:	463b      	mov	r3, r7
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	785b      	ldrb	r3, [r3, #1]
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d11f      	bne.n	800f20a <USB_EPStartXfer+0x1002>
 800f1ca:	1d3b      	adds	r3, r7, #4
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f1d2:	1d3b      	adds	r3, r7, #4
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	461a      	mov	r2, r3
 800f1de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f1e8:	463b      	mov	r3, r7
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	00da      	lsls	r2, r3, #3
 800f1f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f1fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f202:	b29a      	uxth	r2, r3
 800f204:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f208:	801a      	strh	r2, [r3, #0]
 800f20a:	1d3b      	adds	r3, r7, #4
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f212:	463b      	mov	r3, r7
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	785b      	ldrb	r3, [r3, #1]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d16f      	bne.n	800f2fc <USB_EPStartXfer+0x10f4>
 800f21c:	1d3b      	adds	r3, r7, #4
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f224:	1d3b      	adds	r3, r7, #4
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	461a      	mov	r2, r3
 800f230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f234:	4413      	add	r3, r2
 800f236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f23a:	463b      	mov	r3, r7
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	00da      	lsls	r2, r3, #3
 800f242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f246:	4413      	add	r3, r2
 800f248:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f24c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f254:	2b3e      	cmp	r3, #62	; 0x3e
 800f256:	d91d      	bls.n	800f294 <USB_EPStartXfer+0x108c>
 800f258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f25c:	095b      	lsrs	r3, r3, #5
 800f25e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f266:	f003 031f 	and.w	r3, r3, #31
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d104      	bne.n	800f278 <USB_EPStartXfer+0x1070>
 800f26e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f272:	3b01      	subs	r3, #1
 800f274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	029b      	lsls	r3, r3, #10
 800f280:	b29b      	uxth	r3, r3
 800f282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f290:	801a      	strh	r2, [r3, #0]
 800f292:	e057      	b.n	800f344 <USB_EPStartXfer+0x113c>
 800f294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d116      	bne.n	800f2ca <USB_EPStartXfer+0x10c2>
 800f29c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2a0:	881b      	ldrh	r3, [r3, #0]
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2ae:	801a      	strh	r2, [r3, #0]
 800f2b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2c0:	b29a      	uxth	r2, r3
 800f2c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2c6:	801a      	strh	r2, [r3, #0]
 800f2c8:	e03c      	b.n	800f344 <USB_EPStartXfer+0x113c>
 800f2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2ce:	085b      	lsrs	r3, r3, #1
 800f2d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d004      	beq.n	800f2ea <USB_EPStartXfer+0x10e2>
 800f2e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f2ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	029b      	lsls	r3, r3, #10
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2f8:	801a      	strh	r2, [r3, #0]
 800f2fa:	e023      	b.n	800f344 <USB_EPStartXfer+0x113c>
 800f2fc:	463b      	mov	r3, r7
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	785b      	ldrb	r3, [r3, #1]
 800f302:	2b01      	cmp	r3, #1
 800f304:	d11e      	bne.n	800f344 <USB_EPStartXfer+0x113c>
 800f306:	1d3b      	adds	r3, r7, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f30e:	b29b      	uxth	r3, r3
 800f310:	461a      	mov	r2, r3
 800f312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f316:	4413      	add	r3, r2
 800f318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f31c:	463b      	mov	r3, r7
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	00da      	lsls	r2, r3, #3
 800f324:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f328:	4413      	add	r3, r2
 800f32a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f32e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f336:	b29a      	uxth	r2, r3
 800f338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f33c:	801a      	strh	r2, [r3, #0]
 800f33e:	e001      	b.n	800f344 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	e02e      	b.n	800f3a2 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f344:	1d3b      	adds	r3, r7, #4
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	463b      	mov	r3, r7
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	4413      	add	r3, r2
 800f352:	881b      	ldrh	r3, [r3, #0]
 800f354:	b29b      	uxth	r3, r3
 800f356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f35e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f362:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f366:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f36a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f36e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f372:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f376:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f37a:	1d3b      	adds	r3, r7, #4
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	463b      	mov	r3, r7
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	441a      	add	r2, r3
 800f388:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f38c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	785b      	ldrb	r3, [r3, #1]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d020      	beq.n	800f400 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	4413      	add	r3, r2
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3d4:	81bb      	strh	r3, [r7, #12]
 800f3d6:	89bb      	ldrh	r3, [r7, #12]
 800f3d8:	f083 0310 	eor.w	r3, r3, #16
 800f3dc:	81bb      	strh	r3, [r7, #12]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	441a      	add	r2, r3
 800f3e8:	89bb      	ldrh	r3, [r7, #12]
 800f3ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	8013      	strh	r3, [r2, #0]
 800f3fe:	e01f      	b.n	800f440 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4413      	add	r3, r2
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f416:	81fb      	strh	r3, [r7, #14]
 800f418:	89fb      	ldrh	r3, [r7, #14]
 800f41a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f41e:	81fb      	strh	r3, [r7, #14]
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	441a      	add	r2, r3
 800f42a:	89fb      	ldrh	r3, [r7, #14]
 800f42c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3714      	adds	r7, #20
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f44e:	b480      	push	{r7}
 800f450:	b087      	sub	sp, #28
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	7b1b      	ldrb	r3, [r3, #12]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f040 809d 	bne.w	800f59c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	785b      	ldrb	r3, [r3, #1]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d04c      	beq.n	800f504 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	4413      	add	r3, r2
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	823b      	strh	r3, [r7, #16]
 800f478:	8a3b      	ldrh	r3, [r7, #16]
 800f47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d01b      	beq.n	800f4ba <USB_EPClearStall+0x6c>
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	4413      	add	r3, r2
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f498:	81fb      	strh	r3, [r7, #14]
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	441a      	add	r2, r3
 800f4a4:	89fb      	ldrh	r3, [r7, #14]
 800f4a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	78db      	ldrb	r3, [r3, #3]
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d06c      	beq.n	800f59c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	4413      	add	r3, r2
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4d8:	81bb      	strh	r3, [r7, #12]
 800f4da:	89bb      	ldrh	r3, [r7, #12]
 800f4dc:	f083 0320 	eor.w	r3, r3, #32
 800f4e0:	81bb      	strh	r3, [r7, #12]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	441a      	add	r2, r3
 800f4ec:	89bb      	ldrh	r3, [r7, #12]
 800f4ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	8013      	strh	r3, [r2, #0]
 800f502:	e04b      	b.n	800f59c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	881b      	ldrh	r3, [r3, #0]
 800f510:	82fb      	strh	r3, [r7, #22]
 800f512:	8afb      	ldrh	r3, [r7, #22]
 800f514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d01b      	beq.n	800f554 <USB_EPClearStall+0x106>
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4413      	add	r3, r2
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	b29b      	uxth	r3, r3
 800f52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f532:	82bb      	strh	r3, [r7, #20]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	441a      	add	r2, r3
 800f53e:	8abb      	ldrh	r3, [r7, #20]
 800f540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f550:	b29b      	uxth	r3, r3
 800f552:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	4413      	add	r3, r2
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	b29b      	uxth	r3, r3
 800f562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f56a:	827b      	strh	r3, [r7, #18]
 800f56c:	8a7b      	ldrh	r3, [r7, #18]
 800f56e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f572:	827b      	strh	r3, [r7, #18]
 800f574:	8a7b      	ldrh	r3, [r7, #18]
 800f576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f57a:	827b      	strh	r3, [r7, #18]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	441a      	add	r2, r3
 800f586:	8a7b      	ldrh	r3, [r7, #18]
 800f588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f58c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f598:	b29b      	uxth	r3, r3
 800f59a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	371c      	adds	r7, #28
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	b083      	sub	sp, #12
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f5b6:	78fb      	ldrb	r3, [r7, #3]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d103      	bne.n	800f5c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2280      	movs	r2, #128	; 0x80
 800f5c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr

0800f5d2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f5d2:	b480      	push	{r7}
 800f5d4:	b083      	sub	sp, #12
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	370c      	adds	r7, #12
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f60e:	b29b      	uxth	r3, r3
 800f610:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f614:	b29a      	uxth	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f62a:	b480      	push	{r7}
 800f62c:	b085      	sub	sp, #20
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f638:	b29b      	uxth	r3, r3
 800f63a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f63c:	68fb      	ldr	r3, [r7, #12]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b08d      	sub	sp, #52	; 0x34
 800f64e:	af00      	add	r7, sp, #0
 800f650:	60f8      	str	r0, [r7, #12]
 800f652:	60b9      	str	r1, [r7, #8]
 800f654:	4611      	mov	r1, r2
 800f656:	461a      	mov	r2, r3
 800f658:	460b      	mov	r3, r1
 800f65a:	80fb      	strh	r3, [r7, #6]
 800f65c:	4613      	mov	r3, r2
 800f65e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f660:	88bb      	ldrh	r3, [r7, #4]
 800f662:	3301      	adds	r3, #1
 800f664:	085b      	lsrs	r3, r3, #1
 800f666:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f670:	88fa      	ldrh	r2, [r7, #6]
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	4413      	add	r3, r2
 800f676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f67a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f680:	e01b      	b.n	800f6ba <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800f682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	3301      	adds	r3, #1
 800f68c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	b29b      	uxth	r3, r3
 800f694:	021b      	lsls	r3, r3, #8
 800f696:	b29b      	uxth	r3, r3
 800f698:	461a      	mov	r2, r3
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	3302      	adds	r3, #2
 800f6ac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1e0      	bne.n	800f682 <USB_WritePMA+0x38>
  }
}
 800f6c0:	bf00      	nop
 800f6c2:	bf00      	nop
 800f6c4:	3734      	adds	r7, #52	; 0x34
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr

0800f6ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b08b      	sub	sp, #44	; 0x2c
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	60f8      	str	r0, [r7, #12]
 800f6d6:	60b9      	str	r1, [r7, #8]
 800f6d8:	4611      	mov	r1, r2
 800f6da:	461a      	mov	r2, r3
 800f6dc:	460b      	mov	r3, r1
 800f6de:	80fb      	strh	r3, [r7, #6]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f6e4:	88bb      	ldrh	r3, [r7, #4]
 800f6e6:	085b      	lsrs	r3, r3, #1
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f6f4:	88fa      	ldrh	r2, [r7, #6]
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f6fe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	627b      	str	r3, [r7, #36]	; 0x24
 800f704:	e018      	b.n	800f738 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800f706:	6a3b      	ldr	r3, [r7, #32]
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f70e:	6a3b      	ldr	r3, [r7, #32]
 800f710:	3302      	adds	r3, #2
 800f712:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	b2da      	uxtb	r2, r3
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	3301      	adds	r3, #1
 800f720:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	0a1b      	lsrs	r3, r3, #8
 800f726:	b2da      	uxtb	r2, r3
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	3301      	adds	r3, #1
 800f730:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f734:	3b01      	subs	r3, #1
 800f736:	627b      	str	r3, [r7, #36]	; 0x24
 800f738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1e3      	bne.n	800f706 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f73e:	88bb      	ldrh	r3, [r7, #4]
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	b29b      	uxth	r3, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	d007      	beq.n	800f75a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800f74a:	6a3b      	ldr	r3, [r7, #32]
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	b2da      	uxtb	r2, r3
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	701a      	strb	r2, [r3, #0]
  }
}
 800f75a:	bf00      	nop
 800f75c:	372c      	adds	r7, #44	; 0x2c
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
	...

0800f768 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f768:	b480      	push	{r7}
 800f76a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f76c:	f3bf 8f4f 	dsb	sy
}
 800f770:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800f772:	4b06      	ldr	r3, [pc, #24]	; (800f78c <__NVIC_SystemReset+0x24>)
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800f77a:	4904      	ldr	r1, [pc, #16]	; (800f78c <__NVIC_SystemReset+0x24>)
 800f77c:	4b04      	ldr	r3, [pc, #16]	; (800f790 <__NVIC_SystemReset+0x28>)
 800f77e:	4313      	orrs	r3, r2
 800f780:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f782:	f3bf 8f4f 	dsb	sy
}
 800f786:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f788:	bf00      	nop
 800f78a:	e7fd      	b.n	800f788 <__NVIC_SystemReset+0x20>
 800f78c:	e000ed00 	.word	0xe000ed00
 800f790:	05fa0004 	.word	0x05fa0004

0800f794 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	460b      	mov	r3, r1
 800f79e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800f7a0:	f240 401c 	movw	r0, #1052	; 0x41c
 800f7a4:	f00a fd0c 	bl	801a1c0 <USBD_static_malloc>
 800f7a8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d105      	bne.n	800f7bc <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e03f      	b.n	800f83c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f7d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2200      	movs	r2, #0
 800f812:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2202      	movs	r2, #2
 800f81a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	4798      	blx	r3
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800f836:	2303      	movs	r3, #3
 800f838:	e000      	b.n	800f83c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f856:	2b00      	cmp	r3, #0
 800f858:	d101      	bne.n	800f85e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800f85a:	2302      	movs	r3, #2
 800f85c:	e027      	b.n	800f8ae <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f864:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2200      	movs	r2, #0
 800f86a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2200      	movs	r2, #0
 800f872:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2202      	movs	r2, #2
 800f87a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2202      	movs	r2, #2
 800f88a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f00a fc9c 	bl	801a1dc <USBD_static_free>
  pdev->pClassData = NULL;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
	...

0800f8b8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b088      	sub	sp, #32
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8c8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800f8e0:	2303      	movs	r3, #3
 800f8e2:	e0d5      	b.n	800fa90 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d03e      	beq.n	800f96e <USBD_DFU_Setup+0xb6>
 800f8f0:	2b20      	cmp	r3, #32
 800f8f2:	f040 80c5 	bne.w	800fa80 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	785b      	ldrb	r3, [r3, #1]
 800f8fa:	2b06      	cmp	r3, #6
 800f8fc:	d82f      	bhi.n	800f95e <USBD_DFU_Setup+0xa6>
 800f8fe:	a201      	add	r2, pc, #4	; (adr r2, 800f904 <USBD_DFU_Setup+0x4c>)
 800f900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f904:	0800f955 	.word	0x0800f955
 800f908:	0800f921 	.word	0x0800f921
 800f90c:	0800f92b 	.word	0x0800f92b
 800f910:	0800f935 	.word	0x0800f935
 800f914:	0800f93d 	.word	0x0800f93d
 800f918:	0800f945 	.word	0x0800f945
 800f91c:	0800f94d 	.word	0x0800f94d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800f920:	6839      	ldr	r1, [r7, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 fa6c 	bl	800fe00 <DFU_Download>
          break;
 800f928:	e020      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fad3 	bl	800fed8 <DFU_Upload>
          break;
 800f932:	e01b      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 fba9 	bl	801008c <DFU_GetStatus>
          break;
 800f93a:	e017      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 fc5b 	bl	80101f8 <DFU_ClearStatus>
          break;
 800f942:	e013      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f000 fcab 	bl	80102a0 <DFU_GetState>
          break;
 800f94a:	e00f      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 fcbf 	bl	80102d0 <DFU_Abort>
          break;
 800f952:	e00b      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f9ee 	bl	800fd38 <DFU_Detach>
          break;
 800f95c:	e006      	b.n	800f96c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f001 fdb1 	bl	80114c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800f966:	2303      	movs	r3, #3
 800f968:	77fb      	strb	r3, [r7, #31]
          break;
 800f96a:	bf00      	nop
      }
      break;
 800f96c:	e08f      	b.n	800fa8e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	785b      	ldrb	r3, [r3, #1]
 800f972:	2b0b      	cmp	r3, #11
 800f974:	d87b      	bhi.n	800fa6e <USBD_DFU_Setup+0x1b6>
 800f976:	a201      	add	r2, pc, #4	; (adr r2, 800f97c <USBD_DFU_Setup+0xc4>)
 800f978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f97c:	0800f9ad 	.word	0x0800f9ad
 800f980:	0800fa7d 	.word	0x0800fa7d
 800f984:	0800fa6f 	.word	0x0800fa6f
 800f988:	0800fa6f 	.word	0x0800fa6f
 800f98c:	0800fa6f 	.word	0x0800fa6f
 800f990:	0800fa6f 	.word	0x0800fa6f
 800f994:	0800f9d7 	.word	0x0800f9d7
 800f998:	0800fa6f 	.word	0x0800fa6f
 800f99c:	0800fa6f 	.word	0x0800fa6f
 800f9a0:	0800fa6f 	.word	0x0800fa6f
 800f9a4:	0800fa01 	.word	0x0800fa01
 800f9a8:	0800fa2d 	.word	0x0800fa2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b03      	cmp	r3, #3
 800f9b6:	d107      	bne.n	800f9c8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f9b8:	f107 030e 	add.w	r3, r7, #14
 800f9bc:	2202      	movs	r2, #2
 800f9be:	4619      	mov	r1, r3
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f001 fdf2 	bl	80115aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f9c6:	e05a      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f001 fd7c 	bl	80114c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800f9d0:	2303      	movs	r3, #3
 800f9d2:	77fb      	strb	r3, [r7, #31]
          break;
 800f9d4:	e053      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	885b      	ldrh	r3, [r3, #2]
 800f9da:	0a1b      	lsrs	r3, r3, #8
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	2b21      	cmp	r3, #33	; 0x21
 800f9e0:	d107      	bne.n	800f9f2 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800f9e2:	4b2d      	ldr	r3, [pc, #180]	; (800fa98 <USBD_DFU_Setup+0x1e0>)
 800f9e4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	88db      	ldrh	r3, [r3, #6]
 800f9ea:	2b09      	cmp	r3, #9
 800f9ec:	bf28      	it	cs
 800f9ee:	2309      	movcs	r3, #9
 800f9f0:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800f9f2:	8afb      	ldrh	r3, [r7, #22]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	69b9      	ldr	r1, [r7, #24]
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f001 fdd6 	bl	80115aa <USBD_CtlSendData>
          break;
 800f9fe:	e03e      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	2b03      	cmp	r3, #3
 800fa0a:	d108      	bne.n	800fa1e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fa12:	2201      	movs	r2, #1
 800fa14:	4619      	mov	r1, r3
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f001 fdc7 	bl	80115aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa1c:	e02f      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f001 fd51 	bl	80114c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa26:	2303      	movs	r3, #3
 800fa28:	77fb      	strb	r3, [r7, #31]
          break;
 800fa2a:	e028      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	885b      	ldrh	r3, [r3, #2]
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d114      	bne.n	800fa60 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b03      	cmp	r3, #3
 800fa40:	d107      	bne.n	800fa52 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	885b      	ldrh	r3, [r3, #2]
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	461a      	mov	r2, r3
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa50:	e015      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f001 fd37 	bl	80114c8 <USBD_CtlError>
              ret = USBD_FAIL;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	77fb      	strb	r3, [r7, #31]
          break;
 800fa5e:	e00e      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f001 fd30 	bl	80114c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800fa68:	2303      	movs	r3, #3
 800fa6a:	77fb      	strb	r3, [r7, #31]
          break;
 800fa6c:	e007      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f001 fd29 	bl	80114c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800fa76:	2303      	movs	r3, #3
 800fa78:	77fb      	strb	r3, [r7, #31]
          break;
 800fa7a:	e000      	b.n	800fa7e <USBD_DFU_Setup+0x1c6>
          break;
 800fa7c:	bf00      	nop
      }
      break;
 800fa7e:	e006      	b.n	800fa8e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f001 fd20 	bl	80114c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800fa88:	2303      	movs	r3, #3
 800fa8a:	77fb      	strb	r3, [r7, #31]
      break;
 800fa8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800fa8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3720      	adds	r7, #32
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	2000006a 	.word	0x2000006a

0800fa9c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	221b      	movs	r2, #27
 800faa8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800faaa:	4b03      	ldr	r3, [pc, #12]	; (800fab8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800faac:	4618      	mov	r0, r3
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr
 800fab8:	20000058 	.word	0x20000058

0800fabc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b088      	sub	sp, #32
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fae0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fae8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800faf0:	2303      	movs	r3, #3
 800faf2:	e0ce      	b.n	800fc92 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fafa:	2b04      	cmp	r3, #4
 800fafc:	f040 80bd 	bne.w	800fc7a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d17c      	bne.n	800fc04 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	f000 8093 	beq.w	800fc3c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fb1c:	2b05      	cmp	r3, #5
 800fb1e:	d15e      	bne.n	800fbde <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	2b21      	cmp	r3, #33	; 0x21
 800fb26:	d124      	bne.n	800fb72 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	785b      	ldrb	r3, [r3, #1]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	789b      	ldrb	r3, [r3, #2]
 800fb3e:	021b      	lsls	r3, r3, #8
 800fb40:	441a      	add	r2, r3
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	78db      	ldrb	r3, [r3, #3]
 800fb52:	041b      	lsls	r3, r3, #16
 800fb54:	441a      	add	r2, r3
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	791b      	ldrb	r3, [r3, #4]
 800fb66:	061b      	lsls	r3, r3, #24
 800fb68:	441a      	add	r2, r3
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800fb70:	e064      	b.n	800fc3c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b41      	cmp	r3, #65	; 0x41
 800fb78:	d12f      	bne.n	800fbda <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	785b      	ldrb	r3, [r3, #1]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	789b      	ldrb	r3, [r3, #2]
 800fb90:	021b      	lsls	r3, r3, #8
 800fb92:	441a      	add	r2, r3
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	78db      	ldrb	r3, [r3, #3]
 800fba4:	041b      	lsls	r3, r3, #16
 800fba6:	441a      	add	r2, r3
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	791b      	ldrb	r3, [r3, #4]
 800fbb8:	061b      	lsls	r3, r3, #24
 800fbba:	441a      	add	r2, r3
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800fbcc:	4610      	mov	r0, r2
 800fbce:	4798      	blx	r3
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d032      	beq.n	800fc3c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800fbd6:	2303      	movs	r3, #3
 800fbd8:	e05b      	b.n	800fc92 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	e059      	b.n	800fc92 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800fbf6:	f107 030c 	add.w	r3, r7, #12
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f001 fc63 	bl	80114c8 <USBD_CtlError>
 800fc02:	e01b      	b.n	800fc3c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d916      	bls.n	800fc3c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800fc14:	3b02      	subs	r3, #2
 800fc16:	029a      	lsls	r2, r3, #10
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800fc1e:	4413      	add	r3, r2
 800fc20:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	69f8      	ldr	r0, [r7, #28]
 800fc28:	6979      	ldr	r1, [r7, #20]
 800fc2a:	69fa      	ldr	r2, [r7, #28]
 800fc2c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800fc30:	4798      	blx	r3
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d001      	beq.n	800fc3c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e02a      	b.n	800fc92 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	2200      	movs	r2, #0
 800fc48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	2203      	movs	r2, #3
 800fc50:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	2200      	movs	r2, #0
 800fc58:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	2200      	movs	r2, #0
 800fc68:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800fc78:	e00a      	b.n	800fc90 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fc80:	2b07      	cmp	r3, #7
 800fc82:	d103      	bne.n	800fc8c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 fb75 	bl	8010374 <DFU_Leave>
 800fc8a:	e001      	b.n	800fc90 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800fc8c:	2303      	movs	r3, #3
 800fc8e:	e000      	b.n	800fc92 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3720      	adds	r7, #32
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b083      	sub	sp, #12
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	220a      	movs	r2, #10
 800fcbc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800fcbe:	4b03      	ldr	r3, [pc, #12]	; (800fccc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	20000074 	.word	0x20000074

0800fcd0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	607a      	str	r2, [r7, #4]
 800fcdc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fce4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800fce6:	7afb      	ldrb	r3, [r7, #11]
 800fce8:	2b06      	cmp	r3, #6
 800fcea:	d808      	bhi.n	800fcfe <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	4905      	ldr	r1, [pc, #20]	; (800fd08 <USBD_DFU_GetUsrStringDesc+0x38>)
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f001 fbf8 	bl	80114ea <USBD_GetString>
    return USBD_StrDesc;
 800fcfa:	4b03      	ldr	r3, [pc, #12]	; (800fd08 <USBD_DFU_GetUsrStringDesc+0x38>)
 800fcfc:	e000      	b.n	800fd00 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800fcfe:	2300      	movs	r3, #0
  }
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3718      	adds	r7, #24
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	20003b00 	.word	0x20003b00

0800fd0c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d101      	bne.n	800fd20 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	e004      	b.n	800fd2a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	683a      	ldr	r2, [r7, #0]
 800fd24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
	...

0800fd38 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd48:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d051      	beq.n	800fdf4 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d013      	beq.n	800fd82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	d00e      	beq.n	800fd82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800fd6a:	2b05      	cmp	r3, #5
 800fd6c:	d009      	beq.n	800fd82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800fd74:	2b06      	cmp	r3, #6
 800fd76:	d004      	beq.n	800fd82 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800fd7e:	2b09      	cmp	r3, #9
 800fd80:	d125      	bne.n	800fdce <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2202      	movs	r2, #2
 800fd86:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800fdce:	4b0b      	ldr	r3, [pc, #44]	; (800fdfc <DFU_Detach+0xc4>)
 800fdd0:	7d5b      	ldrb	r3, [r3, #21]
 800fdd2:	f003 0310 	and.w	r3, r3, #16
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d006      	beq.n	800fde8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 fb7b 	bl	80104d6 <USBD_Stop>
    (void)USBD_Start(pdev);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 fb6c 	bl	80104be <USBD_Start>
 800fde6:	e006      	b.n	800fdf6 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	885b      	ldrh	r3, [r3, #2]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7f1 fb73 	bl	80014d8 <HAL_Delay>
 800fdf2:	e000      	b.n	800fdf6 <DFU_Detach+0xbe>
    return;
 800fdf4:	bf00      	nop
  }
}
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	20000058 	.word	0x20000058

0800fe00 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe10:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d05b      	beq.n	800fed0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	88db      	ldrh	r3, [r3, #6]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d02d      	beq.n	800fe7c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d004      	beq.n	800fe34 <DFU_Download+0x34>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fe30:	2b05      	cmp	r3, #5
 800fe32:	d11e      	bne.n	800fe72 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	885b      	ldrh	r3, [r3, #2]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	88db      	ldrh	r3, [r3, #6]
 800fe44:	461a      	mov	r2, r3
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2203      	movs	r2, #3
 800fe50:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800fe60:	68f9      	ldr	r1, [r7, #12]
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe68:	461a      	mov	r2, r3
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f001 fbc9 	bl	8011602 <USBD_CtlPrepareRx>
 800fe70:	e02f      	b.n	800fed2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f001 fb27 	bl	80114c8 <USBD_CtlError>
 800fe7a:	e02a      	b.n	800fed2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fe82:	2b05      	cmp	r3, #5
 800fe84:	d004      	beq.n	800fe90 <DFU_Download+0x90>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	d11a      	bne.n	800fec6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2201      	movs	r2, #1
 800fe94:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2206      	movs	r2, #6
 800fe9c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800fec4:	e005      	b.n	800fed2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f001 fafd 	bl	80114c8 <USBD_CtlError>
 800fece:	e000      	b.n	800fed2 <DFU_Download+0xd2>
    return;
 800fed0:	bf00      	nop
    }
  }
}
 800fed2:	3710      	adds	r7, #16
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fee8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fef0:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	f000 80c4 	beq.w	8010082 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	88db      	ldrh	r3, [r3, #6]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f000 80a8 	beq.w	8010054 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d005      	beq.n	800ff1a <DFU_Upload+0x42>
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ff14:	2b09      	cmp	r3, #9
 800ff16:	f040 8090 	bne.w	801003a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	885b      	ldrh	r3, [r3, #2]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	88db      	ldrh	r3, [r3, #6]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d12c      	bne.n	800ff96 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff42:	2b03      	cmp	r3, #3
 800ff44:	d901      	bls.n	800ff4a <DFU_Upload+0x72>
 800ff46:	2202      	movs	r2, #2
 800ff48:	e000      	b.n	800ff4c <DFU_Upload+0x74>
 800ff4a:	2209      	movs	r2, #9
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2200      	movs	r2, #0
 800ff66:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2221      	movs	r2, #33	; 0x21
 800ff80:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2241      	movs	r2, #65	; 0x41
 800ff86:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2203      	movs	r2, #3
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f001 fb0b 	bl	80115aa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800ff94:	e076      	b.n	8010084 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d931      	bls.n	8010004 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	2209      	movs	r2, #9
 800ffa4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ffd2:	3b02      	subs	r3, #2
 800ffd4:	029a      	lsls	r2, r3, #10
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ffdc:	4413      	add	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	6979      	ldr	r1, [r7, #20]
 800ffe8:	697a      	ldr	r2, [r7, #20]
 800ffea:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800ffee:	4798      	blx	r3
 800fff0:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fff8:	461a      	mov	r2, r3
 800fffa:	68b9      	ldr	r1, [r7, #8]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f001 fad4 	bl	80115aa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8010002:	e03f      	b.n	8010084 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	220f      	movs	r2, #15
 8010008:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	2200      	movs	r2, #0
 8010010:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	2200      	movs	r2, #0
 8010018:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2200      	movs	r2, #0
 8010020:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8010030:	6839      	ldr	r1, [r7, #0]
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f001 fa48 	bl	80114c8 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8010038:	e024      	b.n	8010084 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	2200      	movs	r2, #0
 801003e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2200      	movs	r2, #0
 8010046:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 801004a:	6839      	ldr	r1, [r7, #0]
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f001 fa3b 	bl	80114c8 <USBD_CtlError>
 8010052:	e017      	b.n	8010084 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	2202      	movs	r2, #2
 8010058:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	2200      	movs	r2, #0
 8010068:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8010080:	e000      	b.n	8010084 <DFU_Upload+0x1ac>
    return;
 8010082:	bf00      	nop
  }
}
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
	...

0801008c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801009a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100a2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f000 80a0 	beq.w	80101ec <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80100b2:	2b03      	cmp	r3, #3
 80100b4:	d002      	beq.n	80100bc <DFU_GetStatus+0x30>
 80100b6:	2b06      	cmp	r3, #6
 80100b8:	d051      	beq.n	801015e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80100ba:	e08e      	b.n	80101da <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d034      	beq.n	8010130 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2204      	movs	r2, #4
 80100ca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2200      	movs	r2, #0
 80100d2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2200      	movs	r2, #0
 80100da:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2200      	movs	r2, #0
 80100e2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d10e      	bne.n	801011a <DFU_GetStatus+0x8e>
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	2b41      	cmp	r3, #65	; 0x41
 8010102:	d10a      	bne.n	801011a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8010114:	2100      	movs	r1, #0
 8010116:	4798      	blx	r3
      break;
 8010118:	e05f      	b.n	80101da <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	699b      	ldr	r3, [r3, #24]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 801012a:	2101      	movs	r1, #1
 801012c:	4798      	blx	r3
      break;
 801012e:	e054      	b.n	80101da <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2205      	movs	r2, #5
 8010134:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2200      	movs	r2, #0
 801013c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2200      	movs	r2, #0
 8010144:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2200      	movs	r2, #0
 801014c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 801015c:	e03d      	b.n	80101da <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8010164:	2b01      	cmp	r3, #1
 8010166:	d116      	bne.n	8010196 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2207      	movs	r2, #7
 801016c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2201      	movs	r2, #1
 8010174:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2200      	movs	r2, #0
 8010184:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8010194:	e020      	b.n	80101d8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 801019c:	2b00      	cmp	r3, #0
 801019e:	d11b      	bne.n	80101d8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80101a0:	4b14      	ldr	r3, [pc, #80]	; (80101f4 <DFU_GetStatus+0x168>)
 80101a2:	7d1b      	ldrb	r3, [r3, #20]
 80101a4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d015      	beq.n	80101d8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2202      	movs	r2, #2
 80101b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80101d8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80101e0:	2206      	movs	r2, #6
 80101e2:	4619      	mov	r1, r3
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f001 f9e0 	bl	80115aa <USBD_CtlSendData>
 80101ea:	e000      	b.n	80101ee <DFU_GetStatus+0x162>
    return;
 80101ec:	bf00      	nop
}
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20000058 	.word	0x20000058

080101f8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010206:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d042      	beq.n	8010294 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8010214:	2b0a      	cmp	r3, #10
 8010216:	d11e      	bne.n	8010256 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2202      	movs	r2, #2
 801021c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2200      	movs	r2, #0
 801022c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2200      	movs	r2, #0
 8010234:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2200      	movs	r2, #0
 801023c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8010254:	e01f      	b.n	8010296 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	220a      	movs	r2, #10
 801025a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	220e      	movs	r2, #14
 8010262:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2200      	movs	r2, #0
 8010272:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2200      	movs	r2, #0
 801028e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8010292:	e000      	b.n	8010296 <DFU_ClearStatus+0x9e>
    return;
 8010294:	bf00      	nop
  }
}
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102ae:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d008      	beq.n	80102c8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80102bc:	2201      	movs	r2, #1
 80102be:	4619      	mov	r1, r3
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f001 f972 	bl	80115aa <USBD_CtlSendData>
 80102c6:	e000      	b.n	80102ca <DFU_GetState+0x2a>
    return;
 80102c8:	bf00      	nop
}
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b085      	sub	sp, #20
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102de:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d03f      	beq.n	8010366 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d013      	beq.n	8010318 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80102f6:	2b03      	cmp	r3, #3
 80102f8:	d00e      	beq.n	8010318 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010300:	2b05      	cmp	r3, #5
 8010302:	d009      	beq.n	8010318 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801030a:	2b06      	cmp	r3, #6
 801030c:	d004      	beq.n	8010318 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010314:	2b09      	cmp	r3, #9
 8010316:	d127      	bne.n	8010368 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2202      	movs	r2, #2
 801031c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2200      	movs	r2, #0
 8010324:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2200      	movs	r2, #0
 801032c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8010364:	e000      	b.n	8010368 <DFU_Abort+0x98>
    return;
 8010366:	bf00      	nop
  }
}
 8010368:	3714      	adds	r7, #20
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
	...

08010374 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010382:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d03b      	beq.n	8010402 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2200      	movs	r2, #0
 801038e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8010392:	4b1e      	ldr	r3, [pc, #120]	; (801040c <DFU_Leave+0x98>)
 8010394:	7d1b      	ldrb	r3, [r3, #20]
 8010396:	f003 0304 	and.w	r3, r3, #4
 801039a:	2b00      	cmp	r3, #0
 801039c:	d016      	beq.n	80103cc <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2206      	movs	r2, #6
 80103a2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2200      	movs	r2, #0
 80103b2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80103ca:	e01b      	b.n	8010404 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2208      	movs	r2, #8
 80103d0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2200      	movs	r2, #0
 80103d8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f86c 	bl	80104d6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80103fe:	f7ff f9b3 	bl	800f768 <__NVIC_SystemReset>
    return;
 8010402:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	20000058 	.word	0x20000058

08010410 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	4613      	mov	r3, r2
 801041c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d101      	bne.n	8010428 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010424:	2303      	movs	r3, #3
 8010426:	e01f      	b.n	8010468 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2200      	movs	r2, #0
 801042c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d003      	beq.n	801044e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	68ba      	ldr	r2, [r7, #8]
 801044a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2201      	movs	r2, #1
 8010452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	79fa      	ldrb	r2, [r7, #7]
 801045a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f009 fd09 	bl	8019e74 <USBD_LL_Init>
 8010462:	4603      	mov	r3, r0
 8010464:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010466:	7dfb      	ldrb	r3, [r7, #23]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3718      	adds	r7, #24
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801047a:	2300      	movs	r3, #0
 801047c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010484:	2303      	movs	r3, #3
 8010486:	e016      	b.n	80104b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	683a      	ldr	r2, [r7, #0]
 801048c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00b      	beq.n	80104b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a4:	f107 020e 	add.w	r2, r7, #14
 80104a8:	4610      	mov	r0, r2
 80104aa:	4798      	blx	r3
 80104ac:	4602      	mov	r2, r0
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80104b4:	2300      	movs	r3, #0
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b082      	sub	sp, #8
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f009 fd1c 	bl	8019f04 <USBD_LL_Start>
 80104cc:	4603      	mov	r3, r0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b082      	sub	sp, #8
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f009 fd2b 	bl	8019f3a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d009      	beq.n	8010502 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	6852      	ldr	r2, [r2, #4]
 80104fa:	b2d2      	uxtb	r2, r2
 80104fc:	4611      	mov	r1, r2
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	4798      	blx	r3
  }

  return USBD_OK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr

08010522 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b084      	sub	sp, #16
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	460b      	mov	r3, r1
 801052c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801052e:	2303      	movs	r3, #3
 8010530:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010538:	2b00      	cmp	r3, #0
 801053a:	d009      	beq.n	8010550 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	78fa      	ldrb	r2, [r7, #3]
 8010546:	4611      	mov	r1, r2
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	4798      	blx	r3
 801054c:	4603      	mov	r3, r0
 801054e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010550:	7bfb      	ldrb	r3, [r7, #15]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b082      	sub	sp, #8
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
 8010562:	460b      	mov	r3, r1
 8010564:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801056c:	2b00      	cmp	r3, #0
 801056e:	d007      	beq.n	8010580 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	78fa      	ldrb	r2, [r7, #3]
 801057a:	4611      	mov	r1, r2
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	4798      	blx	r3
  }

  return USBD_OK;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b084      	sub	sp, #16
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	4618      	mov	r0, r3
 801059e:	f000 ff59 	bl	8011454 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2201      	movs	r2, #1
 80105a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80105b0:	461a      	mov	r2, r3
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80105be:	f003 031f 	and.w	r3, r3, #31
 80105c2:	2b02      	cmp	r3, #2
 80105c4:	d01a      	beq.n	80105fc <USBD_LL_SetupStage+0x72>
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d822      	bhi.n	8010610 <USBD_LL_SetupStage+0x86>
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d002      	beq.n	80105d4 <USBD_LL_SetupStage+0x4a>
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d00a      	beq.n	80105e8 <USBD_LL_SetupStage+0x5e>
 80105d2:	e01d      	b.n	8010610 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80105da:	4619      	mov	r1, r3
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 f9ef 	bl	80109c0 <USBD_StdDevReq>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73fb      	strb	r3, [r7, #15]
      break;
 80105e6:	e020      	b.n	801062a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80105ee:	4619      	mov	r1, r3
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 fa53 	bl	8010a9c <USBD_StdItfReq>
 80105f6:	4603      	mov	r3, r0
 80105f8:	73fb      	strb	r3, [r7, #15]
      break;
 80105fa:	e016      	b.n	801062a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010602:	4619      	mov	r1, r3
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 fa92 	bl	8010b2e <USBD_StdEPReq>
 801060a:	4603      	mov	r3, r0
 801060c:	73fb      	strb	r3, [r7, #15]
      break;
 801060e:	e00c      	b.n	801062a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801061a:	b2db      	uxtb	r3, r3
 801061c:	4619      	mov	r1, r3
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f009 fccc 	bl	8019fbc <USBD_LL_StallEP>
 8010624:	4603      	mov	r3, r0
 8010626:	73fb      	strb	r3, [r7, #15]
      break;
 8010628:	bf00      	nop
  }

  return ret;
 801062a:	7bfb      	ldrb	r3, [r7, #15]
}
 801062c:	4618      	mov	r0, r3
 801062e:	3710      	adds	r7, #16
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	460b      	mov	r3, r1
 801063e:	607a      	str	r2, [r7, #4]
 8010640:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010642:	7afb      	ldrb	r3, [r7, #11]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d138      	bne.n	80106ba <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801064e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010656:	2b03      	cmp	r3, #3
 8010658:	d14a      	bne.n	80106f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	689a      	ldr	r2, [r3, #8]
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	429a      	cmp	r2, r3
 8010664:	d913      	bls.n	801068e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	689a      	ldr	r2, [r3, #8]
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	68db      	ldr	r3, [r3, #12]
 801066e:	1ad2      	subs	r2, r2, r3
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	68da      	ldr	r2, [r3, #12]
 8010678:	693b      	ldr	r3, [r7, #16]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	4293      	cmp	r3, r2
 801067e:	bf28      	it	cs
 8010680:	4613      	movcs	r3, r2
 8010682:	461a      	mov	r2, r3
 8010684:	6879      	ldr	r1, [r7, #4]
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	f000 ffd8 	bl	801163c <USBD_CtlContinueRx>
 801068c:	e030      	b.n	80106f0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b03      	cmp	r3, #3
 8010698:	d10b      	bne.n	80106b2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106a0:	691b      	ldr	r3, [r3, #16]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d005      	beq.n	80106b2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	68f8      	ldr	r0, [r7, #12]
 80106b0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f000 ffd3 	bl	801165e <USBD_CtlSendStatus>
 80106b8:	e01a      	b.n	80106f0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b03      	cmp	r3, #3
 80106c4:	d114      	bne.n	80106f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106cc:	699b      	ldr	r3, [r3, #24]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d00e      	beq.n	80106f0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	7afa      	ldrb	r2, [r7, #11]
 80106dc:	4611      	mov	r1, r2
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	4798      	blx	r3
 80106e2:	4603      	mov	r3, r0
 80106e4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80106e6:	7dfb      	ldrb	r3, [r7, #23]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d001      	beq.n	80106f0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80106ec:	7dfb      	ldrb	r3, [r7, #23]
 80106ee:	e000      	b.n	80106f2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80106f0:	2300      	movs	r3, #0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3718      	adds	r7, #24
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b086      	sub	sp, #24
 80106fe:	af00      	add	r7, sp, #0
 8010700:	60f8      	str	r0, [r7, #12]
 8010702:	460b      	mov	r3, r1
 8010704:	607a      	str	r2, [r7, #4]
 8010706:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010708:	7afb      	ldrb	r3, [r7, #11]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d16b      	bne.n	80107e6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	3314      	adds	r3, #20
 8010712:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801071a:	2b02      	cmp	r3, #2
 801071c:	d156      	bne.n	80107cc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	689a      	ldr	r2, [r3, #8]
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	429a      	cmp	r2, r3
 8010728:	d914      	bls.n	8010754 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	1ad2      	subs	r2, r2, r3
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	461a      	mov	r2, r3
 801073e:	6879      	ldr	r1, [r7, #4]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f000 ff4d 	bl	80115e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010746:	2300      	movs	r3, #0
 8010748:	2200      	movs	r2, #0
 801074a:	2100      	movs	r1, #0
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f009 fce0 	bl	801a112 <USBD_LL_PrepareReceive>
 8010752:	e03b      	b.n	80107cc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	68da      	ldr	r2, [r3, #12]
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	429a      	cmp	r2, r3
 801075e:	d11c      	bne.n	801079a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	685a      	ldr	r2, [r3, #4]
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010768:	429a      	cmp	r2, r3
 801076a:	d316      	bcc.n	801079a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010776:	429a      	cmp	r2, r3
 8010778:	d20f      	bcs.n	801079a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801077a:	2200      	movs	r2, #0
 801077c:	2100      	movs	r1, #0
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f000 ff2e 	bl	80115e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2200      	movs	r2, #0
 8010788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801078c:	2300      	movs	r3, #0
 801078e:	2200      	movs	r2, #0
 8010790:	2100      	movs	r1, #0
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	f009 fcbd 	bl	801a112 <USBD_LL_PrepareReceive>
 8010798:	e018      	b.n	80107cc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	2b03      	cmp	r3, #3
 80107a4:	d10b      	bne.n	80107be <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d005      	beq.n	80107be <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	68f8      	ldr	r0, [r7, #12]
 80107bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80107be:	2180      	movs	r1, #128	; 0x80
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f009 fbfb 	bl	8019fbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f000 ff5c 	bl	8011684 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d122      	bne.n	801081c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f7ff fe98 	bl	801050c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80107e4:	e01a      	b.n	801081c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	2b03      	cmp	r3, #3
 80107f0:	d114      	bne.n	801081c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00e      	beq.n	801081c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010804:	695b      	ldr	r3, [r3, #20]
 8010806:	7afa      	ldrb	r2, [r7, #11]
 8010808:	4611      	mov	r1, r2
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	4798      	blx	r3
 801080e:	4603      	mov	r3, r0
 8010810:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010818:	7dfb      	ldrb	r3, [r7, #23]
 801081a:	e000      	b.n	801081e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3718      	adds	r7, #24
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b082      	sub	sp, #8
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2201      	movs	r2, #1
 8010832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2200      	movs	r2, #0
 801083a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2200      	movs	r2, #0
 8010842:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010852:	2b00      	cmp	r3, #0
 8010854:	d101      	bne.n	801085a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010856:	2303      	movs	r3, #3
 8010858:	e02f      	b.n	80108ba <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00f      	beq.n	8010884 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d009      	beq.n	8010884 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	6852      	ldr	r2, [r2, #4]
 801087c:	b2d2      	uxtb	r2, r2
 801087e:	4611      	mov	r1, r2
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010884:	2340      	movs	r3, #64	; 0x40
 8010886:	2200      	movs	r2, #0
 8010888:	2100      	movs	r1, #0
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f009 fb70 	bl	8019f70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2201      	movs	r2, #1
 8010894:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2240      	movs	r2, #64	; 0x40
 801089c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80108a0:	2340      	movs	r3, #64	; 0x40
 80108a2:	2200      	movs	r2, #0
 80108a4:	2180      	movs	r1, #128	; 0x80
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f009 fb62 	bl	8019f70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2201      	movs	r2, #1
 80108b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2240      	movs	r2, #64	; 0x40
 80108b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3708      	adds	r7, #8
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80108c2:	b480      	push	{r7}
 80108c4:	b083      	sub	sp, #12
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
 80108ca:	460b      	mov	r3, r1
 80108cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	78fa      	ldrb	r2, [r7, #3]
 80108d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr

080108e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80108e2:	b480      	push	{r7}
 80108e4:	b083      	sub	sp, #12
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108f0:	b2da      	uxtb	r2, r3
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2204      	movs	r2, #4
 80108fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	370c      	adds	r7, #12
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801090e:	b480      	push	{r7}
 8010910:	b083      	sub	sp, #12
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801091c:	b2db      	uxtb	r3, r3
 801091e:	2b04      	cmp	r3, #4
 8010920:	d106      	bne.n	8010930 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010928:	b2da      	uxtb	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	370c      	adds	r7, #12
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr

0801093e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b082      	sub	sp, #8
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010950:	2303      	movs	r3, #3
 8010952:	e012      	b.n	801097a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801095a:	b2db      	uxtb	r3, r3
 801095c:	2b03      	cmp	r3, #3
 801095e:	d10b      	bne.n	8010978 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010966:	69db      	ldr	r3, [r3, #28]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d005      	beq.n	8010978 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010982:	b480      	push	{r7}
 8010984:	b087      	sub	sp, #28
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	3301      	adds	r3, #1
 8010998:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80109a0:	8a3b      	ldrh	r3, [r7, #16]
 80109a2:	021b      	lsls	r3, r3, #8
 80109a4:	b21a      	sxth	r2, r3
 80109a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80109aa:	4313      	orrs	r3, r2
 80109ac:	b21b      	sxth	r3, r3
 80109ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80109b0:	89fb      	ldrh	r3, [r7, #14]
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	371c      	adds	r7, #28
 80109b6:	46bd      	mov	sp, r7
 80109b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109bc:	4770      	bx	lr
	...

080109c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109d6:	2b40      	cmp	r3, #64	; 0x40
 80109d8:	d005      	beq.n	80109e6 <USBD_StdDevReq+0x26>
 80109da:	2b40      	cmp	r3, #64	; 0x40
 80109dc:	d853      	bhi.n	8010a86 <USBD_StdDevReq+0xc6>
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00b      	beq.n	80109fa <USBD_StdDevReq+0x3a>
 80109e2:	2b20      	cmp	r3, #32
 80109e4:	d14f      	bne.n	8010a86 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	6839      	ldr	r1, [r7, #0]
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	4798      	blx	r3
 80109f4:	4603      	mov	r3, r0
 80109f6:	73fb      	strb	r3, [r7, #15]
      break;
 80109f8:	e04a      	b.n	8010a90 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	785b      	ldrb	r3, [r3, #1]
 80109fe:	2b09      	cmp	r3, #9
 8010a00:	d83b      	bhi.n	8010a7a <USBD_StdDevReq+0xba>
 8010a02:	a201      	add	r2, pc, #4	; (adr r2, 8010a08 <USBD_StdDevReq+0x48>)
 8010a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a08:	08010a5d 	.word	0x08010a5d
 8010a0c:	08010a71 	.word	0x08010a71
 8010a10:	08010a7b 	.word	0x08010a7b
 8010a14:	08010a67 	.word	0x08010a67
 8010a18:	08010a7b 	.word	0x08010a7b
 8010a1c:	08010a3b 	.word	0x08010a3b
 8010a20:	08010a31 	.word	0x08010a31
 8010a24:	08010a7b 	.word	0x08010a7b
 8010a28:	08010a53 	.word	0x08010a53
 8010a2c:	08010a45 	.word	0x08010a45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010a30:	6839      	ldr	r1, [r7, #0]
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 f9de 	bl	8010df4 <USBD_GetDescriptor>
          break;
 8010a38:	e024      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010a3a:	6839      	ldr	r1, [r7, #0]
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 fb7f 	bl	8011140 <USBD_SetAddress>
          break;
 8010a42:	e01f      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 fbbe 	bl	80111c8 <USBD_SetConfig>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	73fb      	strb	r3, [r7, #15]
          break;
 8010a50:	e018      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 fc5d 	bl	8011314 <USBD_GetConfig>
          break;
 8010a5a:	e013      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010a5c:	6839      	ldr	r1, [r7, #0]
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 fc8e 	bl	8011380 <USBD_GetStatus>
          break;
 8010a64:	e00e      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 fcbd 	bl	80113e8 <USBD_SetFeature>
          break;
 8010a6e:	e009      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010a70:	6839      	ldr	r1, [r7, #0]
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f000 fccc 	bl	8011410 <USBD_ClrFeature>
          break;
 8010a78:	e004      	b.n	8010a84 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010a7a:	6839      	ldr	r1, [r7, #0]
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fd23 	bl	80114c8 <USBD_CtlError>
          break;
 8010a82:	bf00      	nop
      }
      break;
 8010a84:	e004      	b.n	8010a90 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010a86:	6839      	ldr	r1, [r7, #0]
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fd1d 	bl	80114c8 <USBD_CtlError>
      break;
 8010a8e:	bf00      	nop
  }

  return ret;
 8010a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3710      	adds	r7, #16
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop

08010a9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ab2:	2b40      	cmp	r3, #64	; 0x40
 8010ab4:	d005      	beq.n	8010ac2 <USBD_StdItfReq+0x26>
 8010ab6:	2b40      	cmp	r3, #64	; 0x40
 8010ab8:	d82f      	bhi.n	8010b1a <USBD_StdItfReq+0x7e>
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <USBD_StdItfReq+0x26>
 8010abe:	2b20      	cmp	r3, #32
 8010ac0:	d12b      	bne.n	8010b1a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	3b01      	subs	r3, #1
 8010acc:	2b02      	cmp	r3, #2
 8010ace:	d81d      	bhi.n	8010b0c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	889b      	ldrh	r3, [r3, #4]
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d813      	bhi.n	8010b02 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	6839      	ldr	r1, [r7, #0]
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	4798      	blx	r3
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	88db      	ldrh	r3, [r3, #6]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d110      	bne.n	8010b16 <USBD_StdItfReq+0x7a>
 8010af4:	7bfb      	ldrb	r3, [r7, #15]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10d      	bne.n	8010b16 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 fdaf 	bl	801165e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010b00:	e009      	b.n	8010b16 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 fcdf 	bl	80114c8 <USBD_CtlError>
          break;
 8010b0a:	e004      	b.n	8010b16 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010b0c:	6839      	ldr	r1, [r7, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fcda 	bl	80114c8 <USBD_CtlError>
          break;
 8010b14:	e000      	b.n	8010b18 <USBD_StdItfReq+0x7c>
          break;
 8010b16:	bf00      	nop
      }
      break;
 8010b18:	e004      	b.n	8010b24 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8010b1a:	6839      	ldr	r1, [r7, #0]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f000 fcd3 	bl	80114c8 <USBD_CtlError>
      break;
 8010b22:	bf00      	nop
  }

  return ret;
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	889b      	ldrh	r3, [r3, #4]
 8010b40:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b4a:	2b40      	cmp	r3, #64	; 0x40
 8010b4c:	d007      	beq.n	8010b5e <USBD_StdEPReq+0x30>
 8010b4e:	2b40      	cmp	r3, #64	; 0x40
 8010b50:	f200 8145 	bhi.w	8010dde <USBD_StdEPReq+0x2b0>
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d00c      	beq.n	8010b72 <USBD_StdEPReq+0x44>
 8010b58:	2b20      	cmp	r3, #32
 8010b5a:	f040 8140 	bne.w	8010dde <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	4798      	blx	r3
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b70:	e13a      	b.n	8010de8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	785b      	ldrb	r3, [r3, #1]
 8010b76:	2b03      	cmp	r3, #3
 8010b78:	d007      	beq.n	8010b8a <USBD_StdEPReq+0x5c>
 8010b7a:	2b03      	cmp	r3, #3
 8010b7c:	f300 8129 	bgt.w	8010dd2 <USBD_StdEPReq+0x2a4>
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d07f      	beq.n	8010c84 <USBD_StdEPReq+0x156>
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d03c      	beq.n	8010c02 <USBD_StdEPReq+0xd4>
 8010b88:	e123      	b.n	8010dd2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b90:	b2db      	uxtb	r3, r3
 8010b92:	2b02      	cmp	r3, #2
 8010b94:	d002      	beq.n	8010b9c <USBD_StdEPReq+0x6e>
 8010b96:	2b03      	cmp	r3, #3
 8010b98:	d016      	beq.n	8010bc8 <USBD_StdEPReq+0x9a>
 8010b9a:	e02c      	b.n	8010bf6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00d      	beq.n	8010bbe <USBD_StdEPReq+0x90>
 8010ba2:	7bbb      	ldrb	r3, [r7, #14]
 8010ba4:	2b80      	cmp	r3, #128	; 0x80
 8010ba6:	d00a      	beq.n	8010bbe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ba8:	7bbb      	ldrb	r3, [r7, #14]
 8010baa:	4619      	mov	r1, r3
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f009 fa05 	bl	8019fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bb2:	2180      	movs	r1, #128	; 0x80
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f009 fa01 	bl	8019fbc <USBD_LL_StallEP>
 8010bba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010bbc:	e020      	b.n	8010c00 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010bbe:	6839      	ldr	r1, [r7, #0]
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fc81 	bl	80114c8 <USBD_CtlError>
              break;
 8010bc6:	e01b      	b.n	8010c00 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	885b      	ldrh	r3, [r3, #2]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d10e      	bne.n	8010bee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010bd0:	7bbb      	ldrb	r3, [r7, #14]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d00b      	beq.n	8010bee <USBD_StdEPReq+0xc0>
 8010bd6:	7bbb      	ldrb	r3, [r7, #14]
 8010bd8:	2b80      	cmp	r3, #128	; 0x80
 8010bda:	d008      	beq.n	8010bee <USBD_StdEPReq+0xc0>
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	88db      	ldrh	r3, [r3, #6]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d104      	bne.n	8010bee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010be4:	7bbb      	ldrb	r3, [r7, #14]
 8010be6:	4619      	mov	r1, r3
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f009 f9e7 	bl	8019fbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 fd35 	bl	801165e <USBD_CtlSendStatus>

              break;
 8010bf4:	e004      	b.n	8010c00 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8010bf6:	6839      	ldr	r1, [r7, #0]
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f000 fc65 	bl	80114c8 <USBD_CtlError>
              break;
 8010bfe:	bf00      	nop
          }
          break;
 8010c00:	e0ec      	b.n	8010ddc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	2b02      	cmp	r3, #2
 8010c0c:	d002      	beq.n	8010c14 <USBD_StdEPReq+0xe6>
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	d016      	beq.n	8010c40 <USBD_StdEPReq+0x112>
 8010c12:	e030      	b.n	8010c76 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c14:	7bbb      	ldrb	r3, [r7, #14]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00d      	beq.n	8010c36 <USBD_StdEPReq+0x108>
 8010c1a:	7bbb      	ldrb	r3, [r7, #14]
 8010c1c:	2b80      	cmp	r3, #128	; 0x80
 8010c1e:	d00a      	beq.n	8010c36 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c20:	7bbb      	ldrb	r3, [r7, #14]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f009 f9c9 	bl	8019fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c2a:	2180      	movs	r1, #128	; 0x80
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f009 f9c5 	bl	8019fbc <USBD_LL_StallEP>
 8010c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c34:	e025      	b.n	8010c82 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010c36:	6839      	ldr	r1, [r7, #0]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f000 fc45 	bl	80114c8 <USBD_CtlError>
              break;
 8010c3e:	e020      	b.n	8010c82 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	885b      	ldrh	r3, [r3, #2]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d11b      	bne.n	8010c80 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010c48:	7bbb      	ldrb	r3, [r7, #14]
 8010c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d004      	beq.n	8010c5c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010c52:	7bbb      	ldrb	r3, [r7, #14]
 8010c54:	4619      	mov	r1, r3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f009 f9cf 	bl	8019ffa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 fcfe 	bl	801165e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	6839      	ldr	r1, [r7, #0]
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	4798      	blx	r3
 8010c70:	4603      	mov	r3, r0
 8010c72:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010c74:	e004      	b.n	8010c80 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f000 fc25 	bl	80114c8 <USBD_CtlError>
              break;
 8010c7e:	e000      	b.n	8010c82 <USBD_StdEPReq+0x154>
              break;
 8010c80:	bf00      	nop
          }
          break;
 8010c82:	e0ab      	b.n	8010ddc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d002      	beq.n	8010c96 <USBD_StdEPReq+0x168>
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d032      	beq.n	8010cfa <USBD_StdEPReq+0x1cc>
 8010c94:	e097      	b.n	8010dc6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c96:	7bbb      	ldrb	r3, [r7, #14]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d007      	beq.n	8010cac <USBD_StdEPReq+0x17e>
 8010c9c:	7bbb      	ldrb	r3, [r7, #14]
 8010c9e:	2b80      	cmp	r3, #128	; 0x80
 8010ca0:	d004      	beq.n	8010cac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010ca2:	6839      	ldr	r1, [r7, #0]
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 fc0f 	bl	80114c8 <USBD_CtlError>
                break;
 8010caa:	e091      	b.n	8010dd0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	da0b      	bge.n	8010ccc <USBD_StdEPReq+0x19e>
 8010cb4:	7bbb      	ldrb	r3, [r7, #14]
 8010cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010cba:	4613      	mov	r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	3310      	adds	r3, #16
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	3304      	adds	r3, #4
 8010cca:	e00b      	b.n	8010ce4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010ccc:	7bbb      	ldrb	r3, [r7, #14]
 8010cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	3304      	adds	r3, #4
 8010ce4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	2202      	movs	r2, #2
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f000 fc59 	bl	80115aa <USBD_CtlSendData>
              break;
 8010cf8:	e06a      	b.n	8010dd0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010cfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	da11      	bge.n	8010d26 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010d02:	7bbb      	ldrb	r3, [r7, #14]
 8010d04:	f003 020f 	and.w	r2, r3, #15
 8010d08:	6879      	ldr	r1, [r7, #4]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4413      	add	r3, r2
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	440b      	add	r3, r1
 8010d14:	3324      	adds	r3, #36	; 0x24
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d117      	bne.n	8010d4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010d1c:	6839      	ldr	r1, [r7, #0]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 fbd2 	bl	80114c8 <USBD_CtlError>
                  break;
 8010d24:	e054      	b.n	8010dd0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010d26:	7bbb      	ldrb	r3, [r7, #14]
 8010d28:	f003 020f 	and.w	r2, r3, #15
 8010d2c:	6879      	ldr	r1, [r7, #4]
 8010d2e:	4613      	mov	r3, r2
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	4413      	add	r3, r2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	440b      	add	r3, r1
 8010d38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d3c:	881b      	ldrh	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d104      	bne.n	8010d4c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010d42:	6839      	ldr	r1, [r7, #0]
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 fbbf 	bl	80114c8 <USBD_CtlError>
                  break;
 8010d4a:	e041      	b.n	8010dd0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	da0b      	bge.n	8010d6c <USBD_StdEPReq+0x23e>
 8010d54:	7bbb      	ldrb	r3, [r7, #14]
 8010d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	3310      	adds	r3, #16
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	4413      	add	r3, r2
 8010d68:	3304      	adds	r3, #4
 8010d6a:	e00b      	b.n	8010d84 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d6c:	7bbb      	ldrb	r3, [r7, #14]
 8010d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d72:	4613      	mov	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	4413      	add	r3, r2
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	4413      	add	r3, r2
 8010d82:	3304      	adds	r3, #4
 8010d84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010d86:	7bbb      	ldrb	r3, [r7, #14]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <USBD_StdEPReq+0x264>
 8010d8c:	7bbb      	ldrb	r3, [r7, #14]
 8010d8e:	2b80      	cmp	r3, #128	; 0x80
 8010d90:	d103      	bne.n	8010d9a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2200      	movs	r2, #0
 8010d96:	601a      	str	r2, [r3, #0]
 8010d98:	e00e      	b.n	8010db8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010d9a:	7bbb      	ldrb	r3, [r7, #14]
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f009 f94a 	bl	801a038 <USBD_LL_IsStallEP>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d003      	beq.n	8010db2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	2201      	movs	r2, #1
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	e002      	b.n	8010db8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	2200      	movs	r2, #0
 8010db6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 fbf3 	bl	80115aa <USBD_CtlSendData>
              break;
 8010dc4:	e004      	b.n	8010dd0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010dc6:	6839      	ldr	r1, [r7, #0]
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 fb7d 	bl	80114c8 <USBD_CtlError>
              break;
 8010dce:	bf00      	nop
          }
          break;
 8010dd0:	e004      	b.n	8010ddc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010dd2:	6839      	ldr	r1, [r7, #0]
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 fb77 	bl	80114c8 <USBD_CtlError>
          break;
 8010dda:	bf00      	nop
      }
      break;
 8010ddc:	e004      	b.n	8010de8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010dde:	6839      	ldr	r1, [r7, #0]
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 fb71 	bl	80114c8 <USBD_CtlError>
      break;
 8010de6:	bf00      	nop
  }

  return ret;
 8010de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3710      	adds	r7, #16
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
	...

08010df4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010e02:	2300      	movs	r3, #0
 8010e04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010e06:	2300      	movs	r3, #0
 8010e08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	885b      	ldrh	r3, [r3, #2]
 8010e0e:	0a1b      	lsrs	r3, r3, #8
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	3b01      	subs	r3, #1
 8010e14:	2b0e      	cmp	r3, #14
 8010e16:	f200 8165 	bhi.w	80110e4 <USBD_GetDescriptor+0x2f0>
 8010e1a:	a201      	add	r2, pc, #4	; (adr r2, 8010e20 <USBD_GetDescriptor+0x2c>)
 8010e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e20:	08010e91 	.word	0x08010e91
 8010e24:	08010ea9 	.word	0x08010ea9
 8010e28:	08010ee9 	.word	0x08010ee9
 8010e2c:	080110e5 	.word	0x080110e5
 8010e30:	080110e5 	.word	0x080110e5
 8010e34:	08011085 	.word	0x08011085
 8010e38:	080110b1 	.word	0x080110b1
 8010e3c:	080110e5 	.word	0x080110e5
 8010e40:	080110e5 	.word	0x080110e5
 8010e44:	080110e5 	.word	0x080110e5
 8010e48:	080110e5 	.word	0x080110e5
 8010e4c:	080110e5 	.word	0x080110e5
 8010e50:	080110e5 	.word	0x080110e5
 8010e54:	080110e5 	.word	0x080110e5
 8010e58:	08010e5d 	.word	0x08010e5d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e62:	69db      	ldr	r3, [r3, #28]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d00b      	beq.n	8010e80 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e6e:	69db      	ldr	r3, [r3, #28]
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	7c12      	ldrb	r2, [r2, #16]
 8010e74:	f107 0108 	add.w	r1, r7, #8
 8010e78:	4610      	mov	r0, r2
 8010e7a:	4798      	blx	r3
 8010e7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e7e:	e139      	b.n	80110f4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8010e80:	6839      	ldr	r1, [r7, #0]
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f000 fb20 	bl	80114c8 <USBD_CtlError>
        err++;
 8010e88:	7afb      	ldrb	r3, [r7, #11]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	72fb      	strb	r3, [r7, #11]
      break;
 8010e8e:	e131      	b.n	80110f4 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	7c12      	ldrb	r2, [r2, #16]
 8010e9c:	f107 0108 	add.w	r1, r7, #8
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	4798      	blx	r3
 8010ea4:	60f8      	str	r0, [r7, #12]
      break;
 8010ea6:	e125      	b.n	80110f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	7c1b      	ldrb	r3, [r3, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10d      	bne.n	8010ecc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb8:	f107 0208 	add.w	r2, r7, #8
 8010ebc:	4610      	mov	r0, r2
 8010ebe:	4798      	blx	r3
 8010ec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	2202      	movs	r2, #2
 8010ec8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010eca:	e113      	b.n	80110f4 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed4:	f107 0208 	add.w	r2, r7, #8
 8010ed8:	4610      	mov	r0, r2
 8010eda:	4798      	blx	r3
 8010edc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	2202      	movs	r2, #2
 8010ee4:	701a      	strb	r2, [r3, #0]
      break;
 8010ee6:	e105      	b.n	80110f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	885b      	ldrh	r3, [r3, #2]
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b05      	cmp	r3, #5
 8010ef0:	f200 80ac 	bhi.w	801104c <USBD_GetDescriptor+0x258>
 8010ef4:	a201      	add	r2, pc, #4	; (adr r2, 8010efc <USBD_GetDescriptor+0x108>)
 8010ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010efa:	bf00      	nop
 8010efc:	08010f15 	.word	0x08010f15
 8010f00:	08010f49 	.word	0x08010f49
 8010f04:	08010f7d 	.word	0x08010f7d
 8010f08:	08010fb1 	.word	0x08010fb1
 8010f0c:	08010fe5 	.word	0x08010fe5
 8010f10:	08011019 	.word	0x08011019
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00b      	beq.n	8010f38 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	7c12      	ldrb	r2, [r2, #16]
 8010f2c:	f107 0108 	add.w	r1, r7, #8
 8010f30:	4610      	mov	r0, r2
 8010f32:	4798      	blx	r3
 8010f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f36:	e0a4      	b.n	8011082 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010f38:	6839      	ldr	r1, [r7, #0]
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 fac4 	bl	80114c8 <USBD_CtlError>
            err++;
 8010f40:	7afb      	ldrb	r3, [r7, #11]
 8010f42:	3301      	adds	r3, #1
 8010f44:	72fb      	strb	r3, [r7, #11]
          break;
 8010f46:	e09c      	b.n	8011082 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00b      	beq.n	8010f6c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	7c12      	ldrb	r2, [r2, #16]
 8010f60:	f107 0108 	add.w	r1, r7, #8
 8010f64:	4610      	mov	r0, r2
 8010f66:	4798      	blx	r3
 8010f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f6a:	e08a      	b.n	8011082 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010f6c:	6839      	ldr	r1, [r7, #0]
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 faaa 	bl	80114c8 <USBD_CtlError>
            err++;
 8010f74:	7afb      	ldrb	r3, [r7, #11]
 8010f76:	3301      	adds	r3, #1
 8010f78:	72fb      	strb	r3, [r7, #11]
          break;
 8010f7a:	e082      	b.n	8011082 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d00b      	beq.n	8010fa0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	7c12      	ldrb	r2, [r2, #16]
 8010f94:	f107 0108 	add.w	r1, r7, #8
 8010f98:	4610      	mov	r0, r2
 8010f9a:	4798      	blx	r3
 8010f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f9e:	e070      	b.n	8011082 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fa90 	bl	80114c8 <USBD_CtlError>
            err++;
 8010fa8:	7afb      	ldrb	r3, [r7, #11]
 8010faa:	3301      	adds	r3, #1
 8010fac:	72fb      	strb	r3, [r7, #11]
          break;
 8010fae:	e068      	b.n	8011082 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fb6:	691b      	ldr	r3, [r3, #16]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00b      	beq.n	8010fd4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fc2:	691b      	ldr	r3, [r3, #16]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	7c12      	ldrb	r2, [r2, #16]
 8010fc8:	f107 0108 	add.w	r1, r7, #8
 8010fcc:	4610      	mov	r0, r2
 8010fce:	4798      	blx	r3
 8010fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fd2:	e056      	b.n	8011082 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8010fd4:	6839      	ldr	r1, [r7, #0]
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 fa76 	bl	80114c8 <USBD_CtlError>
            err++;
 8010fdc:	7afb      	ldrb	r3, [r7, #11]
 8010fde:	3301      	adds	r3, #1
 8010fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8010fe2:	e04e      	b.n	8011082 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010fea:	695b      	ldr	r3, [r3, #20]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00b      	beq.n	8011008 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ff6:	695b      	ldr	r3, [r3, #20]
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	7c12      	ldrb	r2, [r2, #16]
 8010ffc:	f107 0108 	add.w	r1, r7, #8
 8011000:	4610      	mov	r0, r2
 8011002:	4798      	blx	r3
 8011004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011006:	e03c      	b.n	8011082 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8011008:	6839      	ldr	r1, [r7, #0]
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 fa5c 	bl	80114c8 <USBD_CtlError>
            err++;
 8011010:	7afb      	ldrb	r3, [r7, #11]
 8011012:	3301      	adds	r3, #1
 8011014:	72fb      	strb	r3, [r7, #11]
          break;
 8011016:	e034      	b.n	8011082 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801101e:	699b      	ldr	r3, [r3, #24]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00b      	beq.n	801103c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801102a:	699b      	ldr	r3, [r3, #24]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	7c12      	ldrb	r2, [r2, #16]
 8011030:	f107 0108 	add.w	r1, r7, #8
 8011034:	4610      	mov	r0, r2
 8011036:	4798      	blx	r3
 8011038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801103a:	e022      	b.n	8011082 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fa42 	bl	80114c8 <USBD_CtlError>
            err++;
 8011044:	7afb      	ldrb	r3, [r7, #11]
 8011046:	3301      	adds	r3, #1
 8011048:	72fb      	strb	r3, [r7, #11]
          break;
 801104a:	e01a      	b.n	8011082 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00c      	beq.n	8011072 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801105e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011060:	683a      	ldr	r2, [r7, #0]
 8011062:	8852      	ldrh	r2, [r2, #2]
 8011064:	b2d1      	uxtb	r1, r2
 8011066:	f107 0208 	add.w	r2, r7, #8
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	4798      	blx	r3
 801106e:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8011070:	e006      	b.n	8011080 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 fa27 	bl	80114c8 <USBD_CtlError>
            err++;
 801107a:	7afb      	ldrb	r3, [r7, #11]
 801107c:	3301      	adds	r3, #1
 801107e:	72fb      	strb	r3, [r7, #11]
          break;
 8011080:	bf00      	nop
      }
      break;
 8011082:	e037      	b.n	80110f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	7c1b      	ldrb	r3, [r3, #16]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d109      	bne.n	80110a0 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011094:	f107 0208 	add.w	r2, r7, #8
 8011098:	4610      	mov	r0, r2
 801109a:	4798      	blx	r3
 801109c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801109e:	e029      	b.n	80110f4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f000 fa10 	bl	80114c8 <USBD_CtlError>
        err++;
 80110a8:	7afb      	ldrb	r3, [r7, #11]
 80110aa:	3301      	adds	r3, #1
 80110ac:	72fb      	strb	r3, [r7, #11]
      break;
 80110ae:	e021      	b.n	80110f4 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	7c1b      	ldrb	r3, [r3, #16]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d10d      	bne.n	80110d4 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110c0:	f107 0208 	add.w	r2, r7, #8
 80110c4:	4610      	mov	r0, r2
 80110c6:	4798      	blx	r3
 80110c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3301      	adds	r3, #1
 80110ce:	2207      	movs	r2, #7
 80110d0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80110d2:	e00f      	b.n	80110f4 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80110d4:	6839      	ldr	r1, [r7, #0]
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f000 f9f6 	bl	80114c8 <USBD_CtlError>
        err++;
 80110dc:	7afb      	ldrb	r3, [r7, #11]
 80110de:	3301      	adds	r3, #1
 80110e0:	72fb      	strb	r3, [r7, #11]
      break;
 80110e2:	e007      	b.n	80110f4 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 80110e4:	6839      	ldr	r1, [r7, #0]
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f000 f9ee 	bl	80114c8 <USBD_CtlError>
      err++;
 80110ec:	7afb      	ldrb	r3, [r7, #11]
 80110ee:	3301      	adds	r3, #1
 80110f0:	72fb      	strb	r3, [r7, #11]
      break;
 80110f2:	bf00      	nop
  }

  if (err != 0U)
 80110f4:	7afb      	ldrb	r3, [r7, #11]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d11e      	bne.n	8011138 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	88db      	ldrh	r3, [r3, #6]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d016      	beq.n	8011130 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8011102:	893b      	ldrh	r3, [r7, #8]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d00e      	beq.n	8011126 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	88da      	ldrh	r2, [r3, #6]
 801110c:	893b      	ldrh	r3, [r7, #8]
 801110e:	4293      	cmp	r3, r2
 8011110:	bf28      	it	cs
 8011112:	4613      	movcs	r3, r2
 8011114:	b29b      	uxth	r3, r3
 8011116:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011118:	893b      	ldrh	r3, [r7, #8]
 801111a:	461a      	mov	r2, r3
 801111c:	68f9      	ldr	r1, [r7, #12]
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 fa43 	bl	80115aa <USBD_CtlSendData>
 8011124:	e009      	b.n	801113a <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f9cd 	bl	80114c8 <USBD_CtlError>
 801112e:	e004      	b.n	801113a <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f000 fa94 	bl	801165e <USBD_CtlSendStatus>
 8011136:	e000      	b.n	801113a <USBD_GetDescriptor+0x346>
    return;
 8011138:	bf00      	nop
  }
}
 801113a:	3710      	adds	r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	889b      	ldrh	r3, [r3, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d131      	bne.n	80111b6 <USBD_SetAddress+0x76>
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	88db      	ldrh	r3, [r3, #6]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d12d      	bne.n	80111b6 <USBD_SetAddress+0x76>
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	885b      	ldrh	r3, [r3, #2]
 801115e:	2b7f      	cmp	r3, #127	; 0x7f
 8011160:	d829      	bhi.n	80111b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	885b      	ldrh	r3, [r3, #2]
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801116c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011174:	b2db      	uxtb	r3, r3
 8011176:	2b03      	cmp	r3, #3
 8011178:	d104      	bne.n	8011184 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 f9a3 	bl	80114c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011182:	e01d      	b.n	80111c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	7bfa      	ldrb	r2, [r7, #15]
 8011188:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801118c:	7bfb      	ldrb	r3, [r7, #15]
 801118e:	4619      	mov	r1, r3
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f008 ff7e 	bl	801a092 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 fa61 	bl	801165e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801119c:	7bfb      	ldrb	r3, [r7, #15]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d004      	beq.n	80111ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2202      	movs	r2, #2
 80111a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111aa:	e009      	b.n	80111c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111b4:	e004      	b.n	80111c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80111b6:	6839      	ldr	r1, [r7, #0]
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f000 f985 	bl	80114c8 <USBD_CtlError>
  }
}
 80111be:	bf00      	nop
 80111c0:	bf00      	nop
 80111c2:	3710      	adds	r7, #16
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80111d2:	2300      	movs	r3, #0
 80111d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	885b      	ldrh	r3, [r3, #2]
 80111da:	b2da      	uxtb	r2, r3
 80111dc:	4b4c      	ldr	r3, [pc, #304]	; (8011310 <USBD_SetConfig+0x148>)
 80111de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80111e0:	4b4b      	ldr	r3, [pc, #300]	; (8011310 <USBD_SetConfig+0x148>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d905      	bls.n	80111f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80111e8:	6839      	ldr	r1, [r7, #0]
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 f96c 	bl	80114c8 <USBD_CtlError>
    return USBD_FAIL;
 80111f0:	2303      	movs	r3, #3
 80111f2:	e088      	b.n	8011306 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b02      	cmp	r3, #2
 80111fe:	d002      	beq.n	8011206 <USBD_SetConfig+0x3e>
 8011200:	2b03      	cmp	r3, #3
 8011202:	d025      	beq.n	8011250 <USBD_SetConfig+0x88>
 8011204:	e071      	b.n	80112ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011206:	4b42      	ldr	r3, [pc, #264]	; (8011310 <USBD_SetConfig+0x148>)
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d01c      	beq.n	8011248 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801120e:	4b40      	ldr	r3, [pc, #256]	; (8011310 <USBD_SetConfig+0x148>)
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	461a      	mov	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011218:	4b3d      	ldr	r3, [pc, #244]	; (8011310 <USBD_SetConfig+0x148>)
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	4619      	mov	r1, r3
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff f97f 	bl	8010522 <USBD_SetClassConfig>
 8011224:	4603      	mov	r3, r0
 8011226:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d004      	beq.n	8011238 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801122e:	6839      	ldr	r1, [r7, #0]
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f000 f949 	bl	80114c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011236:	e065      	b.n	8011304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f000 fa10 	bl	801165e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2203      	movs	r2, #3
 8011242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011246:	e05d      	b.n	8011304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 fa08 	bl	801165e <USBD_CtlSendStatus>
      break;
 801124e:	e059      	b.n	8011304 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011250:	4b2f      	ldr	r3, [pc, #188]	; (8011310 <USBD_SetConfig+0x148>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d112      	bne.n	801127e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2202      	movs	r2, #2
 801125c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011260:	4b2b      	ldr	r3, [pc, #172]	; (8011310 <USBD_SetConfig+0x148>)
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	461a      	mov	r2, r3
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801126a:	4b29      	ldr	r3, [pc, #164]	; (8011310 <USBD_SetConfig+0x148>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	4619      	mov	r1, r3
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f7ff f972 	bl	801055a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 f9f1 	bl	801165e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801127c:	e042      	b.n	8011304 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801127e:	4b24      	ldr	r3, [pc, #144]	; (8011310 <USBD_SetConfig+0x148>)
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	429a      	cmp	r2, r3
 801128a:	d02a      	beq.n	80112e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	b2db      	uxtb	r3, r3
 8011292:	4619      	mov	r1, r3
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f7ff f960 	bl	801055a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801129a:	4b1d      	ldr	r3, [pc, #116]	; (8011310 <USBD_SetConfig+0x148>)
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	461a      	mov	r2, r3
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80112a4:	4b1a      	ldr	r3, [pc, #104]	; (8011310 <USBD_SetConfig+0x148>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	4619      	mov	r1, r3
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff f939 	bl	8010522 <USBD_SetClassConfig>
 80112b0:	4603      	mov	r3, r0
 80112b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d00f      	beq.n	80112da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 f903 	bl	80114c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	4619      	mov	r1, r3
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f7ff f945 	bl	801055a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2202      	movs	r2, #2
 80112d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80112d8:	e014      	b.n	8011304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 f9bf 	bl	801165e <USBD_CtlSendStatus>
      break;
 80112e0:	e010      	b.n	8011304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 f9bb 	bl	801165e <USBD_CtlSendStatus>
      break;
 80112e8:	e00c      	b.n	8011304 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80112ea:	6839      	ldr	r1, [r7, #0]
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 f8eb 	bl	80114c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80112f2:	4b07      	ldr	r3, [pc, #28]	; (8011310 <USBD_SetConfig+0x148>)
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	4619      	mov	r1, r3
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff f92e 	bl	801055a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80112fe:	2303      	movs	r3, #3
 8011300:	73fb      	strb	r3, [r7, #15]
      break;
 8011302:	bf00      	nop
  }

  return ret;
 8011304:	7bfb      	ldrb	r3, [r7, #15]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20003bff 	.word	0x20003bff

08011314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	88db      	ldrh	r3, [r3, #6]
 8011322:	2b01      	cmp	r3, #1
 8011324:	d004      	beq.n	8011330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011326:	6839      	ldr	r1, [r7, #0]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f000 f8cd 	bl	80114c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801132e:	e023      	b.n	8011378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011336:	b2db      	uxtb	r3, r3
 8011338:	2b02      	cmp	r3, #2
 801133a:	dc02      	bgt.n	8011342 <USBD_GetConfig+0x2e>
 801133c:	2b00      	cmp	r3, #0
 801133e:	dc03      	bgt.n	8011348 <USBD_GetConfig+0x34>
 8011340:	e015      	b.n	801136e <USBD_GetConfig+0x5a>
 8011342:	2b03      	cmp	r3, #3
 8011344:	d00b      	beq.n	801135e <USBD_GetConfig+0x4a>
 8011346:	e012      	b.n	801136e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	3308      	adds	r3, #8
 8011352:	2201      	movs	r2, #1
 8011354:	4619      	mov	r1, r3
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 f927 	bl	80115aa <USBD_CtlSendData>
        break;
 801135c:	e00c      	b.n	8011378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	3304      	adds	r3, #4
 8011362:	2201      	movs	r2, #1
 8011364:	4619      	mov	r1, r3
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 f91f 	bl	80115aa <USBD_CtlSendData>
        break;
 801136c:	e004      	b.n	8011378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 f8a9 	bl	80114c8 <USBD_CtlError>
        break;
 8011376:	bf00      	nop
}
 8011378:	bf00      	nop
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011390:	b2db      	uxtb	r3, r3
 8011392:	3b01      	subs	r3, #1
 8011394:	2b02      	cmp	r3, #2
 8011396:	d81e      	bhi.n	80113d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	88db      	ldrh	r3, [r3, #6]
 801139c:	2b02      	cmp	r3, #2
 801139e:	d004      	beq.n	80113aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80113a0:	6839      	ldr	r1, [r7, #0]
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f000 f890 	bl	80114c8 <USBD_CtlError>
        break;
 80113a8:	e01a      	b.n	80113e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2201      	movs	r2, #1
 80113ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d005      	beq.n	80113c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	f043 0202 	orr.w	r2, r3, #2
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	330c      	adds	r3, #12
 80113ca:	2202      	movs	r2, #2
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 f8eb 	bl	80115aa <USBD_CtlSendData>
      break;
 80113d4:	e004      	b.n	80113e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80113d6:	6839      	ldr	r1, [r7, #0]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f875 	bl	80114c8 <USBD_CtlError>
      break;
 80113de:	bf00      	nop
  }
}
 80113e0:	bf00      	nop
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	885b      	ldrh	r3, [r3, #2]
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d106      	bne.n	8011408 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2201      	movs	r2, #1
 80113fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 f92b 	bl	801165e <USBD_CtlSendStatus>
  }
}
 8011408:	bf00      	nop
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011420:	b2db      	uxtb	r3, r3
 8011422:	3b01      	subs	r3, #1
 8011424:	2b02      	cmp	r3, #2
 8011426:	d80b      	bhi.n	8011440 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	885b      	ldrh	r3, [r3, #2]
 801142c:	2b01      	cmp	r3, #1
 801142e:	d10c      	bne.n	801144a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2200      	movs	r2, #0
 8011434:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f910 	bl	801165e <USBD_CtlSendStatus>
      }
      break;
 801143e:	e004      	b.n	801144a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011440:	6839      	ldr	r1, [r7, #0]
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 f840 	bl	80114c8 <USBD_CtlError>
      break;
 8011448:	e000      	b.n	801144c <USBD_ClrFeature+0x3c>
      break;
 801144a:	bf00      	nop
  }
}
 801144c:	bf00      	nop
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	781a      	ldrb	r2, [r3, #0]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	3301      	adds	r3, #1
 801146e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	781a      	ldrb	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	3301      	adds	r3, #1
 801147c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f7ff fa7f 	bl	8010982 <SWAPBYTE>
 8011484:	4603      	mov	r3, r0
 8011486:	461a      	mov	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	3301      	adds	r3, #1
 8011490:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	3301      	adds	r3, #1
 8011496:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f7ff fa72 	bl	8010982 <SWAPBYTE>
 801149e:	4603      	mov	r3, r0
 80114a0:	461a      	mov	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	3301      	adds	r3, #1
 80114aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	3301      	adds	r3, #1
 80114b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f7ff fa65 	bl	8010982 <SWAPBYTE>
 80114b8:	4603      	mov	r3, r0
 80114ba:	461a      	mov	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	80da      	strh	r2, [r3, #6]
}
 80114c0:	bf00      	nop
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80114d2:	2180      	movs	r1, #128	; 0x80
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f008 fd71 	bl	8019fbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80114da:	2100      	movs	r1, #0
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f008 fd6d 	bl	8019fbc <USBD_LL_StallEP>
}
 80114e2:	bf00      	nop
 80114e4:	3708      	adds	r7, #8
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b086      	sub	sp, #24
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	60f8      	str	r0, [r7, #12]
 80114f2:	60b9      	str	r1, [r7, #8]
 80114f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80114f6:	2300      	movs	r3, #0
 80114f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d036      	beq.n	801156e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011504:	6938      	ldr	r0, [r7, #16]
 8011506:	f000 f836 	bl	8011576 <USBD_GetLen>
 801150a:	4603      	mov	r3, r0
 801150c:	3301      	adds	r3, #1
 801150e:	b29b      	uxth	r3, r3
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	b29a      	uxth	r2, r3
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011518:	7dfb      	ldrb	r3, [r7, #23]
 801151a:	68ba      	ldr	r2, [r7, #8]
 801151c:	4413      	add	r3, r2
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	7812      	ldrb	r2, [r2, #0]
 8011522:	701a      	strb	r2, [r3, #0]
  idx++;
 8011524:	7dfb      	ldrb	r3, [r7, #23]
 8011526:	3301      	adds	r3, #1
 8011528:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801152a:	7dfb      	ldrb	r3, [r7, #23]
 801152c:	68ba      	ldr	r2, [r7, #8]
 801152e:	4413      	add	r3, r2
 8011530:	2203      	movs	r2, #3
 8011532:	701a      	strb	r2, [r3, #0]
  idx++;
 8011534:	7dfb      	ldrb	r3, [r7, #23]
 8011536:	3301      	adds	r3, #1
 8011538:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801153a:	e013      	b.n	8011564 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801153c:	7dfb      	ldrb	r3, [r7, #23]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	4413      	add	r3, r2
 8011542:	693a      	ldr	r2, [r7, #16]
 8011544:	7812      	ldrb	r2, [r2, #0]
 8011546:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	3301      	adds	r3, #1
 801154c:	613b      	str	r3, [r7, #16]
    idx++;
 801154e:	7dfb      	ldrb	r3, [r7, #23]
 8011550:	3301      	adds	r3, #1
 8011552:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011554:	7dfb      	ldrb	r3, [r7, #23]
 8011556:	68ba      	ldr	r2, [r7, #8]
 8011558:	4413      	add	r3, r2
 801155a:	2200      	movs	r2, #0
 801155c:	701a      	strb	r2, [r3, #0]
    idx++;
 801155e:	7dfb      	ldrb	r3, [r7, #23]
 8011560:	3301      	adds	r3, #1
 8011562:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d1e7      	bne.n	801153c <USBD_GetString+0x52>
 801156c:	e000      	b.n	8011570 <USBD_GetString+0x86>
    return;
 801156e:	bf00      	nop
  }
}
 8011570:	3718      	adds	r7, #24
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011576:	b480      	push	{r7}
 8011578:	b085      	sub	sp, #20
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801157e:	2300      	movs	r3, #0
 8011580:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011586:	e005      	b.n	8011594 <USBD_GetLen+0x1e>
  {
    len++;
 8011588:	7bfb      	ldrb	r3, [r7, #15]
 801158a:	3301      	adds	r3, #1
 801158c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	3301      	adds	r3, #1
 8011592:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d1f5      	bne.n	8011588 <USBD_GetLen+0x12>
  }

  return len;
 801159c:	7bfb      	ldrb	r3, [r7, #15]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3714      	adds	r7, #20
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr

080115aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	60f8      	str	r0, [r7, #12]
 80115b2:	60b9      	str	r1, [r7, #8]
 80115b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2202      	movs	r2, #2
 80115ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	68ba      	ldr	r2, [r7, #8]
 80115ce:	2100      	movs	r1, #0
 80115d0:	68f8      	ldr	r0, [r7, #12]
 80115d2:	f008 fd7d 	bl	801a0d0 <USBD_LL_Transmit>

  return USBD_OK;
 80115d6:	2300      	movs	r3, #0
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3710      	adds	r7, #16
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	68ba      	ldr	r2, [r7, #8]
 80115f0:	2100      	movs	r1, #0
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f008 fd6c 	bl	801a0d0 <USBD_LL_Transmit>

  return USBD_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b084      	sub	sp, #16
 8011606:	af00      	add	r7, sp, #0
 8011608:	60f8      	str	r0, [r7, #12]
 801160a:	60b9      	str	r1, [r7, #8]
 801160c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2203      	movs	r2, #3
 8011612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	2100      	movs	r1, #0
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f008 fd70 	bl	801a112 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011632:	2300      	movs	r3, #0
}
 8011634:	4618      	mov	r0, r3
 8011636:	3710      	adds	r7, #16
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	68ba      	ldr	r2, [r7, #8]
 801164c:	2100      	movs	r1, #0
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f008 fd5f 	bl	801a112 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011654:	2300      	movs	r3, #0
}
 8011656:	4618      	mov	r0, r3
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}

0801165e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801165e:	b580      	push	{r7, lr}
 8011660:	b082      	sub	sp, #8
 8011662:	af00      	add	r7, sp, #0
 8011664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2204      	movs	r2, #4
 801166a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801166e:	2300      	movs	r3, #0
 8011670:	2200      	movs	r2, #0
 8011672:	2100      	movs	r1, #0
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f008 fd2b 	bl	801a0d0 <USBD_LL_Transmit>

  return USBD_OK;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3708      	adds	r7, #8
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2205      	movs	r2, #5
 8011690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011694:	2300      	movs	r3, #0
 8011696:	2200      	movs	r2, #0
 8011698:	2100      	movs	r1, #0
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f008 fd39 	bl	801a112 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b088      	sub	sp, #32
 80116ae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116b4:	f107 0308 	add.w	r3, r7, #8
 80116b8:	2218      	movs	r2, #24
 80116ba:	2100      	movs	r1, #0
 80116bc:	4618      	mov	r0, r3
 80116be:	f001 f8b6 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 80116c2:	233f      	movs	r3, #63	; 0x3f
 80116c4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80116c6:	2381      	movs	r3, #129	; 0x81
 80116c8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80116ca:	1dfb      	adds	r3, r7, #7
 80116cc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80116ce:	2301      	movs	r3, #1
 80116d0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80116d2:	f107 0308 	add.w	r3, r7, #8
 80116d6:	2100      	movs	r1, #0
 80116d8:	4618      	mov	r0, r3
 80116da:	f001 fc53 	bl	8012f84 <hci_send_req>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	da01      	bge.n	80116e8 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80116e4:	23ff      	movs	r3, #255	; 0xff
 80116e6:	e000      	b.n	80116ea <aci_gap_set_non_discoverable+0x40>
  return status;
 80116e8:	79fb      	ldrb	r3, [r7, #7]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3720      	adds	r7, #32
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80116f2:	b5b0      	push	{r4, r5, r7, lr}
 80116f4:	b0ce      	sub	sp, #312	; 0x138
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	4605      	mov	r5, r0
 80116fa:	460c      	mov	r4, r1
 80116fc:	4610      	mov	r0, r2
 80116fe:	4619      	mov	r1, r3
 8011700:	1dfb      	adds	r3, r7, #7
 8011702:	462a      	mov	r2, r5
 8011704:	701a      	strb	r2, [r3, #0]
 8011706:	1d3b      	adds	r3, r7, #4
 8011708:	4622      	mov	r2, r4
 801170a:	801a      	strh	r2, [r3, #0]
 801170c:	1cbb      	adds	r3, r7, #2
 801170e:	4602      	mov	r2, r0
 8011710:	801a      	strh	r2, [r3, #0]
 8011712:	1dbb      	adds	r3, r7, #6
 8011714:	460a      	mov	r2, r1
 8011716:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8011718:	f107 0310 	add.w	r3, r7, #16
 801171c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8011720:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8011724:	3308      	adds	r3, #8
 8011726:	f107 0210 	add.w	r2, r7, #16
 801172a:	4413      	add	r3, r2
 801172c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8011730:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8011734:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8011738:	4413      	add	r3, r2
 801173a:	3309      	adds	r3, #9
 801173c:	f107 0210 	add.w	r2, r7, #16
 8011740:	4413      	add	r3, r2
 8011742:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011746:	f107 030f 	add.w	r3, r7, #15
 801174a:	2200      	movs	r2, #0
 801174c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801174e:	2300      	movs	r3, #0
 8011750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8011754:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011758:	1dfa      	adds	r2, r7, #7
 801175a:	7812      	ldrb	r2, [r2, #0]
 801175c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801175e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011762:	3301      	adds	r3, #1
 8011764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8011768:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801176c:	1d3a      	adds	r2, r7, #4
 801176e:	8812      	ldrh	r2, [r2, #0]
 8011770:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8011774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011778:	3302      	adds	r3, #2
 801177a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 801177e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011782:	1cba      	adds	r2, r7, #2
 8011784:	8812      	ldrh	r2, [r2, #0]
 8011786:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801178a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801178e:	3302      	adds	r3, #2
 8011790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8011794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011798:	1dba      	adds	r2, r7, #6
 801179a:	7812      	ldrb	r2, [r2, #0]
 801179c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801179e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80117a2:	3301      	adds	r3, #1
 80117a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80117a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117ac:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80117b0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80117b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80117b6:	3301      	adds	r3, #1
 80117b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80117bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117c0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80117c4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80117c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80117ca:	3301      	adds	r3, #1
 80117cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80117d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80117d4:	3308      	adds	r3, #8
 80117d6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80117da:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80117de:	4618      	mov	r0, r3
 80117e0:	f001 f815 	bl	801280e <Osal_MemCpy>
    index_input += Local_Name_Length;
 80117e4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80117e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80117ec:	4413      	add	r3, r2
 80117ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80117f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80117f6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80117fa:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80117fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011800:	3301      	adds	r3, #1
 8011802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8011806:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801180a:	3301      	adds	r3, #1
 801180c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8011810:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8011814:	4618      	mov	r0, r3
 8011816:	f000 fffa 	bl	801280e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 801181a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 801181e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011822:	4413      	add	r3, r2
 8011824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8011828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801182c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8011830:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8011832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011836:	3302      	adds	r3, #2
 8011838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 801183c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011840:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8011844:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8011846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801184a:	3302      	adds	r3, #2
 801184c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011850:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011854:	2218      	movs	r2, #24
 8011856:	2100      	movs	r1, #0
 8011858:	4618      	mov	r0, r3
 801185a:	f000 ffe8 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 801185e:	233f      	movs	r3, #63	; 0x3f
 8011860:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8011864:	2383      	movs	r3, #131	; 0x83
 8011866:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801186a:	f107 0310 	add.w	r3, r7, #16
 801186e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801187a:	f107 030f 	add.w	r3, r7, #15
 801187e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011882:	2301      	movs	r3, #1
 8011884:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011888:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801188c:	2100      	movs	r1, #0
 801188e:	4618      	mov	r0, r3
 8011890:	f001 fb78 	bl	8012f84 <hci_send_req>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	da01      	bge.n	801189e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 801189a:	23ff      	movs	r3, #255	; 0xff
 801189c:	e002      	b.n	80118a4 <aci_gap_set_discoverable+0x1b2>
  return status;
 801189e:	f107 030f 	add.w	r3, r7, #15
 80118a2:	781b      	ldrb	r3, [r3, #0]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bdb0      	pop	{r4, r5, r7, pc}

080118ae <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b0cc      	sub	sp, #304	; 0x130
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	4602      	mov	r2, r0
 80118b6:	1dfb      	adds	r3, r7, #7
 80118b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80118ba:	f107 0310 	add.w	r3, r7, #16
 80118be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80118c2:	f107 030f 	add.w	r3, r7, #15
 80118c6:	2200      	movs	r2, #0
 80118c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80118ca:	2300      	movs	r3, #0
 80118cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80118d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80118d4:	1dfa      	adds	r2, r7, #7
 80118d6:	7812      	ldrb	r2, [r2, #0]
 80118d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80118da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118de:	3301      	adds	r3, #1
 80118e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80118e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80118e8:	2218      	movs	r2, #24
 80118ea:	2100      	movs	r1, #0
 80118ec:	4618      	mov	r0, r3
 80118ee:	f000 ff9e 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 80118f2:	233f      	movs	r3, #63	; 0x3f
 80118f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80118f8:	2385      	movs	r3, #133	; 0x85
 80118fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80118fe:	f107 0310 	add.w	r3, r7, #16
 8011902:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801190a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801190e:	f107 030f 	add.w	r3, r7, #15
 8011912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011916:	2301      	movs	r3, #1
 8011918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801191c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011920:	2100      	movs	r1, #0
 8011922:	4618      	mov	r0, r3
 8011924:	f001 fb2e 	bl	8012f84 <hci_send_req>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	da01      	bge.n	8011932 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 801192e:	23ff      	movs	r3, #255	; 0xff
 8011930:	e002      	b.n	8011938 <aci_gap_set_io_capability+0x8a>
  return status;
 8011932:	f107 030f 	add.w	r3, r7, #15
 8011936:	781b      	ldrb	r3, [r3, #0]
}
 8011938:	4618      	mov	r0, r3
 801193a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8011942:	b5b0      	push	{r4, r5, r7, lr}
 8011944:	b0cc      	sub	sp, #304	; 0x130
 8011946:	af00      	add	r7, sp, #0
 8011948:	4605      	mov	r5, r0
 801194a:	460c      	mov	r4, r1
 801194c:	4610      	mov	r0, r2
 801194e:	4619      	mov	r1, r3
 8011950:	1dfb      	adds	r3, r7, #7
 8011952:	462a      	mov	r2, r5
 8011954:	701a      	strb	r2, [r3, #0]
 8011956:	1dbb      	adds	r3, r7, #6
 8011958:	4622      	mov	r2, r4
 801195a:	701a      	strb	r2, [r3, #0]
 801195c:	1d7b      	adds	r3, r7, #5
 801195e:	4602      	mov	r2, r0
 8011960:	701a      	strb	r2, [r3, #0]
 8011962:	1d3b      	adds	r3, r7, #4
 8011964:	460a      	mov	r2, r1
 8011966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8011968:	f107 0310 	add.w	r3, r7, #16
 801196c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011970:	f107 030f 	add.w	r3, r7, #15
 8011974:	2200      	movs	r2, #0
 8011976:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011978:	2300      	movs	r3, #0
 801197a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 801197e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011982:	1dfa      	adds	r2, r7, #7
 8011984:	7812      	ldrb	r2, [r2, #0]
 8011986:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801198c:	3301      	adds	r3, #1
 801198e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8011992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011996:	1dba      	adds	r2, r7, #6
 8011998:	7812      	ldrb	r2, [r2, #0]
 801199a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801199c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119a0:	3301      	adds	r3, #1
 80119a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80119a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119aa:	1d7a      	adds	r2, r7, #5
 80119ac:	7812      	ldrb	r2, [r2, #0]
 80119ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80119b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119b4:	3301      	adds	r3, #1
 80119b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80119ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119be:	1d3a      	adds	r2, r7, #4
 80119c0:	7812      	ldrb	r2, [r2, #0]
 80119c2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80119c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119c8:	3301      	adds	r3, #1
 80119ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80119ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119d2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80119d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80119d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119dc:	3301      	adds	r3, #1
 80119de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80119e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119e6:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80119ea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80119ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119f0:	3301      	adds	r3, #1
 80119f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80119f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80119fa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80119fe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8011a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a04:	3301      	adds	r3, #1
 8011a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8011a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a0e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011a12:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8011a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a1a:	3304      	adds	r3, #4
 8011a1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8011a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a24:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8011a28:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8011a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a2e:	3301      	adds	r3, #1
 8011a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a38:	2218      	movs	r2, #24
 8011a3a:	2100      	movs	r1, #0
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 fef6 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011a42:	233f      	movs	r3, #63	; 0x3f
 8011a44:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8011a48:	2386      	movs	r3, #134	; 0x86
 8011a4a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011a4e:	f107 0310 	add.w	r3, r7, #16
 8011a52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011a5e:	f107 030f 	add.w	r3, r7, #15
 8011a62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011a66:	2301      	movs	r3, #1
 8011a68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a70:	2100      	movs	r1, #0
 8011a72:	4618      	mov	r0, r3
 8011a74:	f001 fa86 	bl	8012f84 <hci_send_req>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	da01      	bge.n	8011a82 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8011a7e:	23ff      	movs	r3, #255	; 0xff
 8011a80:	e002      	b.n	8011a88 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8011a82:	f107 030f 	add.w	r3, r7, #15
 8011a86:	781b      	ldrb	r3, [r3, #0]
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bdb0      	pop	{r4, r5, r7, pc}

08011a92 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8011a92:	b590      	push	{r4, r7, lr}
 8011a94:	b0cd      	sub	sp, #308	; 0x134
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	4604      	mov	r4, r0
 8011a9a:	4608      	mov	r0, r1
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	463a      	mov	r2, r7
 8011aa0:	6013      	str	r3, [r2, #0]
 8011aa2:	1dfb      	adds	r3, r7, #7
 8011aa4:	4622      	mov	r2, r4
 8011aa6:	701a      	strb	r2, [r3, #0]
 8011aa8:	1dbb      	adds	r3, r7, #6
 8011aaa:	4602      	mov	r2, r0
 8011aac:	701a      	strb	r2, [r3, #0]
 8011aae:	1d7b      	adds	r3, r7, #5
 8011ab0:	460a      	mov	r2, r1
 8011ab2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8011ab4:	f107 0310 	add.w	r3, r7, #16
 8011ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011abc:	f107 0308 	add.w	r3, r7, #8
 8011ac0:	2207      	movs	r2, #7
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f000 feb2 	bl	801282e <Osal_MemSet>
  int index_input = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8011ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011ad4:	1dfa      	adds	r2, r7, #7
 8011ad6:	7812      	ldrb	r2, [r2, #0]
 8011ad8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ade:	3301      	adds	r3, #1
 8011ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8011ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011ae8:	1dba      	adds	r2, r7, #6
 8011aea:	7812      	ldrb	r2, [r2, #0]
 8011aec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011af2:	3301      	adds	r3, #1
 8011af4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8011af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011afc:	1d7a      	adds	r2, r7, #5
 8011afe:	7812      	ldrb	r2, [r2, #0]
 8011b00:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b06:	3301      	adds	r3, #1
 8011b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b10:	2218      	movs	r2, #24
 8011b12:	2100      	movs	r1, #0
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 fe8a 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011b1a:	233f      	movs	r3, #63	; 0x3f
 8011b1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8011b20:	238a      	movs	r3, #138	; 0x8a
 8011b22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011b26:	f107 0310 	add.w	r3, r7, #16
 8011b2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8011b36:	f107 0308 	add.w	r3, r7, #8
 8011b3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8011b3e:	2307      	movs	r3, #7
 8011b40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b48:	2100      	movs	r1, #0
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f001 fa1a 	bl	8012f84 <hci_send_req>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	da01      	bge.n	8011b5a <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8011b56:	23ff      	movs	r3, #255	; 0xff
 8011b58:	e021      	b.n	8011b9e <aci_gap_init+0x10c>
  if ( resp.Status )
 8011b5a:	f107 0308 	add.w	r3, r7, #8
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d003      	beq.n	8011b6c <aci_gap_init+0xda>
    return resp.Status;
 8011b64:	f107 0308 	add.w	r3, r7, #8
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	e018      	b.n	8011b9e <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8011b6c:	f107 0308 	add.w	r3, r7, #8
 8011b70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	463b      	mov	r3, r7
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8011b7c:	f107 0308 	add.w	r3, r7, #8
 8011b80:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011b8a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8011b8c:	f107 0308 	add.w	r3, r7, #8
 8011b90:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011b9a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd90      	pop	{r4, r7, pc}

08011ba8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b0cc      	sub	sp, #304	; 0x130
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	4602      	mov	r2, r0
 8011bb0:	463b      	mov	r3, r7
 8011bb2:	6019      	str	r1, [r3, #0]
 8011bb4:	1dfb      	adds	r3, r7, #7
 8011bb6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8011bb8:	f107 0310 	add.w	r3, r7, #16
 8011bbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8011bc0:	f107 030f 	add.w	r3, r7, #15
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8011bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011bd2:	1dfa      	adds	r2, r7, #7
 8011bd4:	7812      	ldrb	r2, [r2, #0]
 8011bd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011bdc:	3301      	adds	r3, #1
 8011bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8011be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011be6:	1c58      	adds	r0, r3, #1
 8011be8:	1dfb      	adds	r3, r7, #7
 8011bea:	781a      	ldrb	r2, [r3, #0]
 8011bec:	463b      	mov	r3, r7
 8011bee:	6819      	ldr	r1, [r3, #0]
 8011bf0:	f000 fe0d 	bl	801280e <Osal_MemCpy>
  index_input += AdvDataLen;
 8011bf4:	1dfb      	adds	r3, r7, #7
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011bfc:	4413      	add	r3, r2
 8011bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c06:	2218      	movs	r2, #24
 8011c08:	2100      	movs	r1, #0
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 fe0f 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011c10:	233f      	movs	r3, #63	; 0x3f
 8011c12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8011c16:	238e      	movs	r3, #142	; 0x8e
 8011c18:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011c1c:	f107 0310 	add.w	r3, r7, #16
 8011c20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8011c2c:	f107 030f 	add.w	r3, r7, #15
 8011c30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8011c34:	2301      	movs	r3, #1
 8011c36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c3e:	2100      	movs	r1, #0
 8011c40:	4618      	mov	r0, r3
 8011c42:	f001 f99f 	bl	8012f84 <hci_send_req>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	da01      	bge.n	8011c50 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8011c4c:	23ff      	movs	r3, #255	; 0xff
 8011c4e:	e002      	b.n	8011c56 <aci_gap_update_adv_data+0xae>
  return status;
 8011c50:	f107 030f 	add.w	r3, r7, #15
 8011c54:	781b      	ldrb	r3, [r3, #0]
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b088      	sub	sp, #32
 8011c64:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c6a:	f107 0308 	add.w	r3, r7, #8
 8011c6e:	2218      	movs	r2, #24
 8011c70:	2100      	movs	r1, #0
 8011c72:	4618      	mov	r0, r3
 8011c74:	f000 fddb 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011c78:	233f      	movs	r3, #63	; 0x3f
 8011c7a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8011c7c:	2392      	movs	r3, #146	; 0x92
 8011c7e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8011c80:	1dfb      	adds	r3, r7, #7
 8011c82:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011c84:	2301      	movs	r3, #1
 8011c86:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c88:	f107 0308 	add.w	r3, r7, #8
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f001 f978 	bl	8012f84 <hci_send_req>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	da01      	bge.n	8011c9e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8011c9a:	23ff      	movs	r3, #255	; 0xff
 8011c9c:	e000      	b.n	8011ca0 <aci_gap_configure_whitelist+0x40>
  return status;
 8011c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3720      	adds	r7, #32
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b088      	sub	sp, #32
 8011cac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011cb2:	f107 0308 	add.w	r3, r7, #8
 8011cb6:	2218      	movs	r2, #24
 8011cb8:	2100      	movs	r1, #0
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 fdb7 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011cc0:	233f      	movs	r3, #63	; 0x3f
 8011cc2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8011cc4:	f240 1301 	movw	r3, #257	; 0x101
 8011cc8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8011cca:	1dfb      	adds	r3, r7, #7
 8011ccc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011cd2:	f107 0308 	add.w	r3, r7, #8
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f001 f953 	bl	8012f84 <hci_send_req>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	da01      	bge.n	8011ce8 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8011ce4:	23ff      	movs	r3, #255	; 0xff
 8011ce6:	e000      	b.n	8011cea <aci_gatt_init+0x42>
  return status;
 8011ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3720      	adds	r7, #32
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8011cf2:	b590      	push	{r4, r7, lr}
 8011cf4:	b0cf      	sub	sp, #316	; 0x13c
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	6001      	str	r1, [r0, #0]
 8011cfe:	4610      	mov	r0, r2
 8011d00:	4619      	mov	r1, r3
 8011d02:	1dfb      	adds	r3, r7, #7
 8011d04:	4622      	mov	r2, r4
 8011d06:	701a      	strb	r2, [r3, #0]
 8011d08:	1dbb      	adds	r3, r7, #6
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	701a      	strb	r2, [r3, #0]
 8011d0e:	1d7b      	adds	r3, r7, #5
 8011d10:	460a      	mov	r2, r1
 8011d12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8011d14:	f107 0310 	add.w	r3, r7, #16
 8011d18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8011d1c:	1dfb      	adds	r3, r7, #7
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	d007      	beq.n	8011d34 <aci_gatt_add_service+0x42>
 8011d24:	1dfb      	adds	r3, r7, #7
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	2b02      	cmp	r3, #2
 8011d2a:	d101      	bne.n	8011d30 <aci_gatt_add_service+0x3e>
 8011d2c:	2311      	movs	r3, #17
 8011d2e:	e002      	b.n	8011d36 <aci_gatt_add_service+0x44>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e000      	b.n	8011d36 <aci_gatt_add_service+0x44>
 8011d34:	2303      	movs	r3, #3
 8011d36:	f107 0210 	add.w	r2, r7, #16
 8011d3a:	4413      	add	r3, r2
 8011d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011d40:	f107 030c 	add.w	r3, r7, #12
 8011d44:	2203      	movs	r2, #3
 8011d46:	2100      	movs	r1, #0
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f000 fd70 	bl	801282e <Osal_MemSet>
  int index_input = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8011d54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011d58:	1dfa      	adds	r2, r7, #7
 8011d5a:	7812      	ldrb	r2, [r2, #0]
 8011d5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011d62:	3301      	adds	r3, #1
 8011d64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8011d68:	1dfb      	adds	r3, r7, #7
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	d002      	beq.n	8011d76 <aci_gatt_add_service+0x84>
 8011d70:	2b02      	cmp	r3, #2
 8011d72:	d004      	beq.n	8011d7e <aci_gatt_add_service+0x8c>
 8011d74:	e007      	b.n	8011d86 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8011d76:	2302      	movs	r3, #2
 8011d78:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8011d7c:	e005      	b.n	8011d8a <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8011d7e:	2310      	movs	r3, #16
 8011d80:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8011d84:	e001      	b.n	8011d8a <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8011d86:	2397      	movs	r3, #151	; 0x97
 8011d88:	e05d      	b.n	8011e46 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8011d8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011d8e:	1c58      	adds	r0, r3, #1
 8011d90:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8011d94:	463b      	mov	r3, r7
 8011d96:	6819      	ldr	r1, [r3, #0]
 8011d98:	f000 fd39 	bl	801280e <Osal_MemCpy>
    index_input += size;
 8011d9c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8011da0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011da4:	4413      	add	r3, r2
 8011da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8011daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011dae:	1dba      	adds	r2, r7, #6
 8011db0:	7812      	ldrb	r2, [r2, #0]
 8011db2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8011db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011db8:	3301      	adds	r3, #1
 8011dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8011dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011dc2:	1d7a      	adds	r2, r7, #5
 8011dc4:	7812      	ldrb	r2, [r2, #0]
 8011dc6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8011dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011dcc:	3301      	adds	r3, #1
 8011dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011dd6:	2218      	movs	r2, #24
 8011dd8:	2100      	movs	r1, #0
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 fd27 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011de0:	233f      	movs	r3, #63	; 0x3f
 8011de2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8011de6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011dea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8011dee:	f107 0310 	add.w	r3, r7, #16
 8011df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8011df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8011dfe:	f107 030c 	add.w	r3, r7, #12
 8011e02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8011e06:	2303      	movs	r3, #3
 8011e08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011e0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e10:	2100      	movs	r1, #0
 8011e12:	4618      	mov	r0, r3
 8011e14:	f001 f8b6 	bl	8012f84 <hci_send_req>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	da01      	bge.n	8011e22 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8011e1e:	23ff      	movs	r3, #255	; 0xff
 8011e20:	e011      	b.n	8011e46 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8011e22:	f107 030c 	add.w	r3, r7, #12
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d003      	beq.n	8011e34 <aci_gatt_add_service+0x142>
    return resp.Status;
 8011e2c:	f107 030c 	add.w	r3, r7, #12
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	e008      	b.n	8011e46 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8011e34:	f107 030c 	add.w	r3, r7, #12
 8011e38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011e42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd90      	pop	{r4, r7, pc}

08011e50 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8011e50:	b590      	push	{r4, r7, lr}
 8011e52:	b0d1      	sub	sp, #324	; 0x144
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	4604      	mov	r4, r0
 8011e58:	4608      	mov	r0, r1
 8011e5a:	f107 0108 	add.w	r1, r7, #8
 8011e5e:	600a      	str	r2, [r1, #0]
 8011e60:	4619      	mov	r1, r3
 8011e62:	f107 030e 	add.w	r3, r7, #14
 8011e66:	4622      	mov	r2, r4
 8011e68:	801a      	strh	r2, [r3, #0]
 8011e6a:	f107 030d 	add.w	r3, r7, #13
 8011e6e:	4602      	mov	r2, r0
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	1dbb      	adds	r3, r7, #6
 8011e74:	460a      	mov	r2, r1
 8011e76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8011e78:	f107 0318 	add.w	r3, r7, #24
 8011e7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8011e80:	f107 030d 	add.w	r3, r7, #13
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d008      	beq.n	8011e9c <aci_gatt_add_char+0x4c>
 8011e8a:	f107 030d 	add.w	r3, r7, #13
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	2b02      	cmp	r3, #2
 8011e92:	d101      	bne.n	8011e98 <aci_gatt_add_char+0x48>
 8011e94:	2313      	movs	r3, #19
 8011e96:	e002      	b.n	8011e9e <aci_gatt_add_char+0x4e>
 8011e98:	2303      	movs	r3, #3
 8011e9a:	e000      	b.n	8011e9e <aci_gatt_add_char+0x4e>
 8011e9c:	2305      	movs	r3, #5
 8011e9e:	f107 0218 	add.w	r2, r7, #24
 8011ea2:	4413      	add	r3, r2
 8011ea4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011ea8:	f107 0314 	add.w	r3, r7, #20
 8011eac:	2203      	movs	r2, #3
 8011eae:	2100      	movs	r1, #0
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f000 fcbc 	bl	801282e <Osal_MemSet>
  int index_input = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8011ebc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011ec0:	f107 020e 	add.w	r2, r7, #14
 8011ec4:	8812      	ldrh	r2, [r2, #0]
 8011ec6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011ec8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011ecc:	3302      	adds	r3, #2
 8011ece:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8011ed2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011ed6:	f107 020d 	add.w	r2, r7, #13
 8011eda:	7812      	ldrb	r2, [r2, #0]
 8011edc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011ede:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8011ee8:	f107 030d 	add.w	r3, r7, #13
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d002      	beq.n	8011ef8 <aci_gatt_add_char+0xa8>
 8011ef2:	2b02      	cmp	r3, #2
 8011ef4:	d004      	beq.n	8011f00 <aci_gatt_add_char+0xb0>
 8011ef6:	e007      	b.n	8011f08 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8011ef8:	2302      	movs	r3, #2
 8011efa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8011efe:	e005      	b.n	8011f0c <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8011f00:	2310      	movs	r3, #16
 8011f02:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8011f06:	e001      	b.n	8011f0c <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8011f08:	2397      	movs	r3, #151	; 0x97
 8011f0a:	e086      	b.n	801201a <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8011f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011f10:	1cd8      	adds	r0, r3, #3
 8011f12:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8011f16:	f107 0308 	add.w	r3, r7, #8
 8011f1a:	6819      	ldr	r1, [r3, #0]
 8011f1c:	f000 fc77 	bl	801280e <Osal_MemCpy>
    index_input += size;
 8011f20:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011f24:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011f28:	4413      	add	r3, r2
 8011f2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8011f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f32:	1dba      	adds	r2, r7, #6
 8011f34:	8812      	ldrh	r2, [r2, #0]
 8011f36:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8011f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011f3c:	3302      	adds	r3, #2
 8011f3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8011f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f46:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8011f4a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8011f4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011f50:	3301      	adds	r3, #1
 8011f52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8011f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f5a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8011f5e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8011f60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011f64:	3301      	adds	r3, #1
 8011f66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8011f6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f6e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8011f72:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8011f74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011f78:	3301      	adds	r3, #1
 8011f7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8011f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f82:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8011f86:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8011f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8011f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011f96:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8011f9a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8011f9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011fa6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011faa:	2218      	movs	r2, #24
 8011fac:	2100      	movs	r1, #0
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 fc3d 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8011fb4:	233f      	movs	r3, #63	; 0x3f
 8011fb6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8011fba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8011fbe:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8011fc2:	f107 0318 	add.w	r3, r7, #24
 8011fc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8011fca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011fce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8011fd2:	f107 0314 	add.w	r3, r7, #20
 8011fd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8011fda:	2303      	movs	r3, #3
 8011fdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011fe0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011fe4:	2100      	movs	r1, #0
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f000 ffcc 	bl	8012f84 <hci_send_req>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	da01      	bge.n	8011ff6 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8011ff2:	23ff      	movs	r3, #255	; 0xff
 8011ff4:	e011      	b.n	801201a <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8011ff6:	f107 0314 	add.w	r3, r7, #20
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d003      	beq.n	8012008 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8012000:	f107 0314 	add.w	r3, r7, #20
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	e008      	b.n	801201a <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8012008:	f107 0314 	add.w	r3, r7, #20
 801200c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012010:	b29a      	uxth	r2, r3
 8012012:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8012016:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8012018:	2300      	movs	r3, #0
}
 801201a:	4618      	mov	r0, r3
 801201c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8012020:	46bd      	mov	sp, r7
 8012022:	bd90      	pop	{r4, r7, pc}

08012024 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8012024:	b5b0      	push	{r4, r5, r7, lr}
 8012026:	b0cc      	sub	sp, #304	; 0x130
 8012028:	af00      	add	r7, sp, #0
 801202a:	4605      	mov	r5, r0
 801202c:	460c      	mov	r4, r1
 801202e:	4610      	mov	r0, r2
 8012030:	4619      	mov	r1, r3
 8012032:	1dbb      	adds	r3, r7, #6
 8012034:	462a      	mov	r2, r5
 8012036:	801a      	strh	r2, [r3, #0]
 8012038:	1d3b      	adds	r3, r7, #4
 801203a:	4622      	mov	r2, r4
 801203c:	801a      	strh	r2, [r3, #0]
 801203e:	1cfb      	adds	r3, r7, #3
 8012040:	4602      	mov	r2, r0
 8012042:	701a      	strb	r2, [r3, #0]
 8012044:	1cbb      	adds	r3, r7, #2
 8012046:	460a      	mov	r2, r1
 8012048:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 801204a:	f107 0310 	add.w	r3, r7, #16
 801204e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012052:	f107 030f 	add.w	r3, r7, #15
 8012056:	2200      	movs	r2, #0
 8012058:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801205a:	2300      	movs	r3, #0
 801205c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8012060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012064:	1dba      	adds	r2, r7, #6
 8012066:	8812      	ldrh	r2, [r2, #0]
 8012068:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801206a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801206e:	3302      	adds	r3, #2
 8012070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8012074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012078:	1d3a      	adds	r2, r7, #4
 801207a:	8812      	ldrh	r2, [r2, #0]
 801207c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801207e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012082:	3302      	adds	r3, #2
 8012084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8012088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801208c:	1cfa      	adds	r2, r7, #3
 801208e:	7812      	ldrb	r2, [r2, #0]
 8012090:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8012092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012096:	3301      	adds	r3, #1
 8012098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 801209c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80120a0:	1cba      	adds	r2, r7, #2
 80120a2:	7812      	ldrb	r2, [r2, #0]
 80120a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80120a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80120aa:	3301      	adds	r3, #1
 80120ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80120b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80120b4:	1d98      	adds	r0, r3, #6
 80120b6:	1cbb      	adds	r3, r7, #2
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	461a      	mov	r2, r3
 80120bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80120c0:	f000 fba5 	bl	801280e <Osal_MemCpy>
  index_input += Char_Value_Length;
 80120c4:	1cbb      	adds	r3, r7, #2
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80120cc:	4413      	add	r3, r2
 80120ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80120d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80120d6:	2218      	movs	r2, #24
 80120d8:	2100      	movs	r1, #0
 80120da:	4618      	mov	r0, r3
 80120dc:	f000 fba7 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 80120e0:	233f      	movs	r3, #63	; 0x3f
 80120e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80120e6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80120ea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80120ee:	f107 0310 	add.w	r3, r7, #16
 80120f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80120f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80120fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80120fe:	f107 030f 	add.w	r3, r7, #15
 8012102:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012106:	2301      	movs	r3, #1
 8012108:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801210c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012110:	2100      	movs	r1, #0
 8012112:	4618      	mov	r0, r3
 8012114:	f000 ff36 	bl	8012f84 <hci_send_req>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	da01      	bge.n	8012122 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 801211e:	23ff      	movs	r3, #255	; 0xff
 8012120:	e002      	b.n	8012128 <aci_gatt_update_char_value+0x104>
  return status;
 8012122:	f107 030f 	add.w	r3, r7, #15
 8012126:	781b      	ldrb	r3, [r3, #0]
}
 8012128:	4618      	mov	r0, r3
 801212a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801212e:	46bd      	mov	sp, r7
 8012130:	bdb0      	pop	{r4, r5, r7, pc}

08012132 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 8012132:	b5b0      	push	{r4, r5, r7, lr}
 8012134:	b0cc      	sub	sp, #304	; 0x130
 8012136:	af00      	add	r7, sp, #0
 8012138:	4605      	mov	r5, r0
 801213a:	460c      	mov	r4, r1
 801213c:	4610      	mov	r0, r2
 801213e:	4619      	mov	r1, r3
 8012140:	1dbb      	adds	r3, r7, #6
 8012142:	462a      	mov	r2, r5
 8012144:	801a      	strh	r2, [r3, #0]
 8012146:	1d3b      	adds	r3, r7, #4
 8012148:	4622      	mov	r2, r4
 801214a:	801a      	strh	r2, [r3, #0]
 801214c:	1cfb      	adds	r3, r7, #3
 801214e:	4602      	mov	r2, r0
 8012150:	701a      	strb	r2, [r3, #0]
 8012152:	1cbb      	adds	r3, r7, #2
 8012154:	460a      	mov	r2, r1
 8012156:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 8012158:	f107 0310 	add.w	r3, r7, #16
 801215c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012160:	f107 030f 	add.w	r3, r7, #15
 8012164:	2200      	movs	r2, #0
 8012166:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012168:	2300      	movs	r3, #0
 801216a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 801216e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012172:	1dba      	adds	r2, r7, #6
 8012174:	8812      	ldrh	r2, [r2, #0]
 8012176:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8012178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801217c:	3302      	adds	r3, #2
 801217e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attr_Handle = Attr_Handle;
 8012182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012186:	1d3a      	adds	r2, r7, #4
 8012188:	8812      	ldrh	r2, [r2, #0]
 801218a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801218c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012190:	3302      	adds	r3, #2
 8012192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Write_status = Write_status;
 8012196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801219a:	1cfa      	adds	r2, r7, #3
 801219c:	7812      	ldrb	r2, [r2, #0]
 801219e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80121a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80121a4:	3301      	adds	r3, #1
 80121a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Error_Code = Error_Code;
 80121aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80121ae:	1cba      	adds	r2, r7, #2
 80121b0:	7812      	ldrb	r2, [r2, #0]
 80121b2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80121b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80121b8:	3301      	adds	r3, #1
 80121ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80121be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80121c2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80121c6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80121c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80121cc:	3301      	adds	r3, #1
 80121ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80121d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80121d6:	3307      	adds	r3, #7
 80121d8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80121dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80121e0:	4618      	mov	r0, r3
 80121e2:	f000 fb14 	bl	801280e <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80121e6:	f897 3140 	ldrb.w	r3, [r7, #320]	; 0x140
 80121ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80121ee:	4413      	add	r3, r2
 80121f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80121f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80121f8:	2218      	movs	r2, #24
 80121fa:	2100      	movs	r1, #0
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 fb16 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8012202:	233f      	movs	r3, #63	; 0x3f
 8012204:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x126;
 8012208:	f44f 7393 	mov.w	r3, #294	; 0x126
 801220c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012210:	f107 0310 	add.w	r3, r7, #16
 8012214:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801221c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012220:	f107 030f 	add.w	r3, r7, #15
 8012224:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012228:	2301      	movs	r3, #1
 801222a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801222e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012232:	2100      	movs	r1, #0
 8012234:	4618      	mov	r0, r3
 8012236:	f000 fea5 	bl	8012f84 <hci_send_req>
 801223a:	4603      	mov	r3, r0
 801223c:	2b00      	cmp	r3, #0
 801223e:	da01      	bge.n	8012244 <aci_gatt_write_resp+0x112>
    return BLE_STATUS_TIMEOUT;
 8012240:	23ff      	movs	r3, #255	; 0xff
 8012242:	e002      	b.n	801224a <aci_gatt_write_resp+0x118>
  return status;
 8012244:	f107 030f 	add.w	r3, r7, #15
 8012248:	781b      	ldrb	r3, [r3, #0]
}
 801224a:	4618      	mov	r0, r3
 801224c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012250:	46bd      	mov	sp, r7
 8012252:	bdb0      	pop	{r4, r5, r7, pc}

08012254 <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 8012254:	b5b0      	push	{r4, r5, r7, lr}
 8012256:	b0cc      	sub	sp, #304	; 0x130
 8012258:	af00      	add	r7, sp, #0
 801225a:	4605      	mov	r5, r0
 801225c:	460c      	mov	r4, r1
 801225e:	4610      	mov	r0, r2
 8012260:	4619      	mov	r1, r3
 8012262:	1dbb      	adds	r3, r7, #6
 8012264:	462a      	mov	r2, r5
 8012266:	801a      	strh	r2, [r3, #0]
 8012268:	1d3b      	adds	r3, r7, #4
 801226a:	4622      	mov	r2, r4
 801226c:	801a      	strh	r2, [r3, #0]
 801226e:	1cbb      	adds	r3, r7, #2
 8012270:	4602      	mov	r2, r0
 8012272:	801a      	strh	r2, [r3, #0]
 8012274:	1c7b      	adds	r3, r7, #1
 8012276:	460a      	mov	r2, r1
 8012278:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 801227a:	f107 0310 	add.w	r3, r7, #16
 801227e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012282:	f107 030f 	add.w	r3, r7, #15
 8012286:	2200      	movs	r2, #0
 8012288:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801228a:	2300      	movs	r3, #0
 801228c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8012290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012294:	1dba      	adds	r2, r7, #6
 8012296:	8812      	ldrh	r2, [r2, #0]
 8012298:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801229a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801229e:	3302      	adds	r3, #2
 80122a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80122a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122a8:	1d3a      	adds	r2, r7, #4
 80122aa:	8812      	ldrh	r2, [r2, #0]
 80122ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80122ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122b2:	3302      	adds	r3, #2
 80122b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80122b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122bc:	1cba      	adds	r2, r7, #2
 80122be:	8812      	ldrh	r2, [r2, #0]
 80122c0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80122c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122c6:	3302      	adds	r3, #2
 80122c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Update_Type = Update_Type;
 80122cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122d0:	1c7a      	adds	r2, r7, #1
 80122d2:	7812      	ldrb	r2, [r2, #0]
 80122d4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80122d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122da:	3301      	adds	r3, #1
 80122dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Length = Char_Length;
 80122e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122e4:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80122e8:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 80122ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80122f0:	3302      	adds	r3, #2
 80122f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Value_Offset = Value_Offset;
 80122f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80122fa:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 80122fe:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 8012302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012306:	3302      	adds	r3, #2
 8012308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Value_Length = Value_Length;
 801230c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012310:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8012314:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8012316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801231a:	3301      	adds	r3, #1
 801231c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 8012320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012324:	330c      	adds	r3, #12
 8012326:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 801232a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 801232e:	4618      	mov	r0, r3
 8012330:	f000 fa6d 	bl	801280e <Osal_MemCpy>
  index_input += Value_Length;
 8012334:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 8012338:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801233c:	4413      	add	r3, r2
 801233e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012342:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012346:	2218      	movs	r2, #24
 8012348:	2100      	movs	r1, #0
 801234a:	4618      	mov	r0, r3
 801234c:	f000 fa6f 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8012350:	233f      	movs	r3, #63	; 0x3f
 8012352:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x12c;
 8012356:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801235a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801235e:	f107 0310 	add.w	r3, r7, #16
 8012362:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801236a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801236e:	f107 030f 	add.w	r3, r7, #15
 8012372:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012376:	2301      	movs	r3, #1
 8012378:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801237c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012380:	2100      	movs	r1, #0
 8012382:	4618      	mov	r0, r3
 8012384:	f000 fdfe 	bl	8012f84 <hci_send_req>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	da01      	bge.n	8012392 <aci_gatt_update_char_value_ext+0x13e>
    return BLE_STATUS_TIMEOUT;
 801238e:	23ff      	movs	r3, #255	; 0xff
 8012390:	e002      	b.n	8012398 <aci_gatt_update_char_value_ext+0x144>
  return status;
 8012392:	f107 030f 	add.w	r3, r7, #15
 8012396:	781b      	ldrb	r3, [r3, #0]
}
 8012398:	4618      	mov	r0, r3
 801239a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801239e:	46bd      	mov	sp, r7
 80123a0:	bdb0      	pop	{r4, r5, r7, pc}

080123a2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b0cc      	sub	sp, #304	; 0x130
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	463b      	mov	r3, r7
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	1dfb      	adds	r3, r7, #7
 80123ae:	4602      	mov	r2, r0
 80123b0:	701a      	strb	r2, [r3, #0]
 80123b2:	1dbb      	adds	r3, r7, #6
 80123b4:	460a      	mov	r2, r1
 80123b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80123b8:	f107 0310 	add.w	r3, r7, #16
 80123bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80123c0:	f107 030f 	add.w	r3, r7, #15
 80123c4:	2200      	movs	r2, #0
 80123c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80123c8:	2300      	movs	r3, #0
 80123ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80123ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80123d2:	1dfa      	adds	r2, r7, #7
 80123d4:	7812      	ldrb	r2, [r2, #0]
 80123d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80123d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80123dc:	3301      	adds	r3, #1
 80123de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80123e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80123e6:	1dba      	adds	r2, r7, #6
 80123e8:	7812      	ldrb	r2, [r2, #0]
 80123ea:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80123ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80123f0:	3301      	adds	r3, #1
 80123f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80123f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80123fa:	1c98      	adds	r0, r3, #2
 80123fc:	1dbb      	adds	r3, r7, #6
 80123fe:	781a      	ldrb	r2, [r3, #0]
 8012400:	463b      	mov	r3, r7
 8012402:	6819      	ldr	r1, [r3, #0]
 8012404:	f000 fa03 	bl	801280e <Osal_MemCpy>
  index_input += Length;
 8012408:	1dbb      	adds	r3, r7, #6
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012410:	4413      	add	r3, r2
 8012412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801241a:	2218      	movs	r2, #24
 801241c:	2100      	movs	r1, #0
 801241e:	4618      	mov	r0, r3
 8012420:	f000 fa05 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 8012424:	233f      	movs	r3, #63	; 0x3f
 8012426:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 801242a:	230c      	movs	r3, #12
 801242c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8012430:	f107 0310 	add.w	r3, r7, #16
 8012434:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8012438:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801243c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8012440:	f107 030f 	add.w	r3, r7, #15
 8012444:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8012448:	2301      	movs	r3, #1
 801244a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801244e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012452:	2100      	movs	r1, #0
 8012454:	4618      	mov	r0, r3
 8012456:	f000 fd95 	bl	8012f84 <hci_send_req>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	da01      	bge.n	8012464 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8012460:	23ff      	movs	r3, #255	; 0xff
 8012462:	e002      	b.n	801246a <aci_hal_write_config_data+0xc8>
  return status;
 8012464:	f107 030f 	add.w	r3, r7, #15
 8012468:	781b      	ldrb	r3, [r3, #0]
}
 801246a:	4618      	mov	r0, r3
 801246c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b0cc      	sub	sp, #304	; 0x130
 8012478:	af00      	add	r7, sp, #0
 801247a:	4602      	mov	r2, r0
 801247c:	1dfb      	adds	r3, r7, #7
 801247e:	701a      	strb	r2, [r3, #0]
 8012480:	1dbb      	adds	r3, r7, #6
 8012482:	460a      	mov	r2, r1
 8012484:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8012486:	f107 0310 	add.w	r3, r7, #16
 801248a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801248e:	f107 030f 	add.w	r3, r7, #15
 8012492:	2200      	movs	r2, #0
 8012494:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012496:	2300      	movs	r3, #0
 8012498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 801249c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124a0:	1dfa      	adds	r2, r7, #7
 80124a2:	7812      	ldrb	r2, [r2, #0]
 80124a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80124a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124aa:	3301      	adds	r3, #1
 80124ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80124b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124b4:	1dba      	adds	r2, r7, #6
 80124b6:	7812      	ldrb	r2, [r2, #0]
 80124b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80124ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124be:	3301      	adds	r3, #1
 80124c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80124c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80124c8:	2218      	movs	r2, #24
 80124ca:	2100      	movs	r1, #0
 80124cc:	4618      	mov	r0, r3
 80124ce:	f000 f9ae 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 80124d2:	233f      	movs	r3, #63	; 0x3f
 80124d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80124d8:	230f      	movs	r3, #15
 80124da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80124de:	f107 0310 	add.w	r3, r7, #16
 80124e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80124e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80124ee:	f107 030f 	add.w	r3, r7, #15
 80124f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80124f6:	2301      	movs	r3, #1
 80124f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80124fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012500:	2100      	movs	r1, #0
 8012502:	4618      	mov	r0, r3
 8012504:	f000 fd3e 	bl	8012f84 <hci_send_req>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	da01      	bge.n	8012512 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 801250e:	23ff      	movs	r3, #255	; 0xff
 8012510:	e002      	b.n	8012518 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8012512:	f107 030f 	add.w	r3, r7, #15
 8012516:	781b      	ldrb	r3, [r3, #0]
}
 8012518:	4618      	mov	r0, r3
 801251a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b088      	sub	sp, #32
 8012526:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8012528:	2300      	movs	r3, #0
 801252a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801252c:	f107 0308 	add.w	r3, r7, #8
 8012530:	2218      	movs	r2, #24
 8012532:	2100      	movs	r1, #0
 8012534:	4618      	mov	r0, r3
 8012536:	f000 f97a 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x03;
 801253a:	2303      	movs	r3, #3
 801253c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 801253e:	2303      	movs	r3, #3
 8012540:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8012542:	1dfb      	adds	r3, r7, #7
 8012544:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8012546:	2301      	movs	r3, #1
 8012548:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801254a:	f107 0308 	add.w	r3, r7, #8
 801254e:	2100      	movs	r1, #0
 8012550:	4618      	mov	r0, r3
 8012552:	f000 fd17 	bl	8012f84 <hci_send_req>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	da01      	bge.n	8012560 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 801255c:	23ff      	movs	r3, #255	; 0xff
 801255e:	e000      	b.n	8012562 <hci_reset+0x40>
  return status;
 8012560:	79fb      	ldrb	r3, [r7, #7]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3720      	adds	r7, #32
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 801256a:	b580      	push	{r7, lr}
 801256c:	b0ce      	sub	sp, #312	; 0x138
 801256e:	af00      	add	r7, sp, #0
 8012570:	f107 0308 	add.w	r3, r7, #8
 8012574:	6019      	str	r1, [r3, #0]
 8012576:	1d3b      	adds	r3, r7, #4
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	f107 030e 	add.w	r3, r7, #14
 801257e:	4602      	mov	r2, r0
 8012580:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8012582:	f107 0318 	add.w	r3, r7, #24
 8012586:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801258a:	f107 0310 	add.w	r3, r7, #16
 801258e:	2205      	movs	r2, #5
 8012590:	2100      	movs	r1, #0
 8012592:	4618      	mov	r0, r3
 8012594:	f000 f94b 	bl	801282e <Osal_MemSet>
  int index_input = 0;
 8012598:	2300      	movs	r3, #0
 801259a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 801259e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80125a2:	f107 020e 	add.w	r2, r7, #14
 80125a6:	8812      	ldrh	r2, [r2, #0]
 80125a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80125aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80125ae:	3302      	adds	r3, #2
 80125b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80125b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80125b8:	2218      	movs	r2, #24
 80125ba:	2100      	movs	r1, #0
 80125bc:	4618      	mov	r0, r3
 80125be:	f000 f936 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x08;
 80125c2:	2308      	movs	r3, #8
 80125c4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 80125c8:	2330      	movs	r3, #48	; 0x30
 80125ca:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80125ce:	f107 0318 	add.w	r3, r7, #24
 80125d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80125d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80125da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80125de:	f107 0310 	add.w	r3, r7, #16
 80125e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80125e6:	2305      	movs	r3, #5
 80125e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80125ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80125f0:	2100      	movs	r1, #0
 80125f2:	4618      	mov	r0, r3
 80125f4:	f000 fcc6 	bl	8012f84 <hci_send_req>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	da01      	bge.n	8012602 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80125fe:	23ff      	movs	r3, #255	; 0xff
 8012600:	e016      	b.n	8012630 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8012602:	f107 0310 	add.w	r3, r7, #16
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d003      	beq.n	8012614 <hci_le_read_phy+0xaa>
    return resp.Status;
 801260c:	f107 0310 	add.w	r3, r7, #16
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	e00d      	b.n	8012630 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8012614:	f107 0310 	add.w	r3, r7, #16
 8012618:	78da      	ldrb	r2, [r3, #3]
 801261a:	f107 0308 	add.w	r3, r7, #8
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8012622:	f107 0310 	add.w	r3, r7, #16
 8012626:	791a      	ldrb	r2, [r3, #4]
 8012628:	1d3b      	adds	r3, r7, #4
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 801263a:	b590      	push	{r4, r7, lr}
 801263c:	b0cd      	sub	sp, #308	; 0x134
 801263e:	af00      	add	r7, sp, #0
 8012640:	4604      	mov	r4, r0
 8012642:	4608      	mov	r0, r1
 8012644:	4611      	mov	r1, r2
 8012646:	1dfb      	adds	r3, r7, #7
 8012648:	4622      	mov	r2, r4
 801264a:	701a      	strb	r2, [r3, #0]
 801264c:	1dbb      	adds	r3, r7, #6
 801264e:	4602      	mov	r2, r0
 8012650:	701a      	strb	r2, [r3, #0]
 8012652:	1d7b      	adds	r3, r7, #5
 8012654:	460a      	mov	r2, r1
 8012656:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8012658:	f107 0310 	add.w	r3, r7, #16
 801265c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012660:	f107 030f 	add.w	r3, r7, #15
 8012664:	2200      	movs	r2, #0
 8012666:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012668:	2300      	movs	r3, #0
 801266a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 801266e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012672:	1dfa      	adds	r2, r7, #7
 8012674:	7812      	ldrb	r2, [r2, #0]
 8012676:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012678:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801267c:	3301      	adds	r3, #1
 801267e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8012682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012686:	1dba      	adds	r2, r7, #6
 8012688:	7812      	ldrb	r2, [r2, #0]
 801268a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801268c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012690:	3301      	adds	r3, #1
 8012692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8012696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801269a:	1d7a      	adds	r2, r7, #5
 801269c:	7812      	ldrb	r2, [r2, #0]
 801269e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80126a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80126a4:	3301      	adds	r3, #1
 80126a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80126aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80126ae:	2218      	movs	r2, #24
 80126b0:	2100      	movs	r1, #0
 80126b2:	4618      	mov	r0, r3
 80126b4:	f000 f8bb 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x08;
 80126b8:	2308      	movs	r3, #8
 80126ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80126be:	2331      	movs	r3, #49	; 0x31
 80126c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80126c4:	f107 0310 	add.w	r3, r7, #16
 80126c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80126cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80126d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80126d4:	f107 030f 	add.w	r3, r7, #15
 80126d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80126dc:	2301      	movs	r3, #1
 80126de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80126e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80126e6:	2100      	movs	r1, #0
 80126e8:	4618      	mov	r0, r3
 80126ea:	f000 fc4b 	bl	8012f84 <hci_send_req>
 80126ee:	4603      	mov	r3, r0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	da01      	bge.n	80126f8 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80126f4:	23ff      	movs	r3, #255	; 0xff
 80126f6:	e002      	b.n	80126fe <hci_le_set_default_phy+0xc4>
  return status;
 80126f8:	f107 030f 	add.w	r3, r7, #15
 80126fc:	781b      	ldrb	r3, [r3, #0]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8012704:	46bd      	mov	sp, r7
 8012706:	bd90      	pop	{r4, r7, pc}

08012708 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8012708:	b5b0      	push	{r4, r5, r7, lr}
 801270a:	b0cc      	sub	sp, #304	; 0x130
 801270c:	af00      	add	r7, sp, #0
 801270e:	4605      	mov	r5, r0
 8012710:	460c      	mov	r4, r1
 8012712:	4610      	mov	r0, r2
 8012714:	4619      	mov	r1, r3
 8012716:	1dbb      	adds	r3, r7, #6
 8012718:	462a      	mov	r2, r5
 801271a:	801a      	strh	r2, [r3, #0]
 801271c:	1d3b      	adds	r3, r7, #4
 801271e:	4622      	mov	r2, r4
 8012720:	801a      	strh	r2, [r3, #0]
 8012722:	1cbb      	adds	r3, r7, #2
 8012724:	4602      	mov	r2, r0
 8012726:	801a      	strh	r2, [r3, #0]
 8012728:	463b      	mov	r3, r7
 801272a:	460a      	mov	r2, r1
 801272c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 801272e:	f107 0310 	add.w	r3, r7, #16
 8012732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8012736:	f107 030f 	add.w	r3, r7, #15
 801273a:	2200      	movs	r2, #0
 801273c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8012744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012748:	1dba      	adds	r2, r7, #6
 801274a:	8812      	ldrh	r2, [r2, #0]
 801274c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801274e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012752:	3302      	adds	r3, #2
 8012754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8012758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801275c:	1d3a      	adds	r2, r7, #4
 801275e:	8812      	ldrh	r2, [r2, #0]
 8012760:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8012762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012766:	3302      	adds	r3, #2
 8012768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 801276c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012770:	1cba      	adds	r2, r7, #2
 8012772:	8812      	ldrh	r2, [r2, #0]
 8012774:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8012776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801277a:	3302      	adds	r3, #2
 801277c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8012780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012784:	463a      	mov	r2, r7
 8012786:	8812      	ldrh	r2, [r2, #0]
 8012788:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 801278a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801278e:	3302      	adds	r3, #2
 8012790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8012794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012798:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 801279c:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 801279e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80127a2:	3302      	adds	r3, #2
 80127a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80127a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127ac:	2218      	movs	r2, #24
 80127ae:	2100      	movs	r1, #0
 80127b0:	4618      	mov	r0, r3
 80127b2:	f000 f83c 	bl	801282e <Osal_MemSet>
  rq.ogf = 0x3f;
 80127b6:	233f      	movs	r3, #63	; 0x3f
 80127b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 80127bc:	f240 1381 	movw	r3, #385	; 0x181
 80127c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80127c4:	230f      	movs	r3, #15
 80127c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80127ca:	f107 0310 	add.w	r3, r7, #16
 80127ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80127d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80127d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80127da:	f107 030f 	add.w	r3, r7, #15
 80127de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80127e2:	2301      	movs	r3, #1
 80127e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80127e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80127ec:	2100      	movs	r1, #0
 80127ee:	4618      	mov	r0, r3
 80127f0:	f000 fbc8 	bl	8012f84 <hci_send_req>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	da01      	bge.n	80127fe <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 80127fa:	23ff      	movs	r3, #255	; 0xff
 80127fc:	e002      	b.n	8012804 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 80127fe:	f107 030f 	add.w	r3, r7, #15
 8012802:	781b      	ldrb	r3, [r3, #0]
}
 8012804:	4618      	mov	r0, r3
 8012806:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801280a:	46bd      	mov	sp, r7
 801280c:	bdb0      	pop	{r4, r5, r7, pc}

0801280e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 801280e:	b580      	push	{r7, lr}
 8012810:	b084      	sub	sp, #16
 8012812:	af00      	add	r7, sp, #0
 8012814:	60f8      	str	r0, [r7, #12]
 8012816:	60b9      	str	r1, [r7, #8]
 8012818:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	68b9      	ldr	r1, [r7, #8]
 801281e:	68f8      	ldr	r0, [r7, #12]
 8012820:	f007 fd80 	bl	801a324 <memcpy>
 8012824:	4603      	mov	r3, r0
}
 8012826:	4618      	mov	r0, r3
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}

0801282e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 801282e:	b580      	push	{r7, lr}
 8012830:	b084      	sub	sp, #16
 8012832:	af00      	add	r7, sp, #0
 8012834:	60f8      	str	r0, [r7, #12]
 8012836:	60b9      	str	r1, [r7, #8]
 8012838:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	68b9      	ldr	r1, [r7, #8]
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f007 fd7e 	bl	801a340 <memset>
 8012844:	4603      	mov	r3, r0
}
 8012846:	4618      	mov	r0, r3
 8012848:	3710      	adds	r7, #16
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
	...

08012850 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b088      	sub	sp, #32
 8012854:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 8012856:	2204      	movs	r2, #4
 8012858:	2100      	movs	r1, #0
 801285a:	4816      	ldr	r0, [pc, #88]	; (80128b4 <DIS_Init+0x64>)
 801285c:	f007 fd70 	bl	801a340 <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 8012860:	f641 030a 	movw	r3, #6154	; 0x180a
 8012864:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 8012866:	1d39      	adds	r1, r7, #4
 8012868:	4b12      	ldr	r3, [pc, #72]	; (80128b4 <DIS_Init+0x64>)
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	2303      	movs	r3, #3
 801286e:	2201      	movs	r2, #1
 8012870:	2001      	movs	r0, #1
 8012872:	f7ff fa3e 	bl	8011cf2 <aci_gatt_add_service>
 8012876:	4603      	mov	r3, r0
 8012878:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 801287a:	f642 2329 	movw	r3, #10793	; 0x2a29
 801287e:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 8012880:	4b0c      	ldr	r3, [pc, #48]	; (80128b4 <DIS_Init+0x64>)
 8012882:	8818      	ldrh	r0, [r3, #0]
 8012884:	1d3a      	adds	r2, r7, #4
 8012886:	4b0c      	ldr	r3, [pc, #48]	; (80128b8 <DIS_Init+0x68>)
 8012888:	9305      	str	r3, [sp, #20]
 801288a:	2301      	movs	r3, #1
 801288c:	9304      	str	r3, [sp, #16]
 801288e:	230a      	movs	r3, #10
 8012890:	9303      	str	r3, [sp, #12]
 8012892:	2300      	movs	r3, #0
 8012894:	9302      	str	r3, [sp, #8]
 8012896:	2300      	movs	r3, #0
 8012898:	9301      	str	r3, [sp, #4]
 801289a:	2302      	movs	r3, #2
 801289c:	9300      	str	r3, [sp, #0]
 801289e:	2320      	movs	r3, #32
 80128a0:	2101      	movs	r1, #1
 80128a2:	f7ff fad5 	bl	8011e50 <aci_gatt_add_char>
 80128a6:	4603      	mov	r3, r0
 80128a8:	71fb      	strb	r3, [r7, #7]
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 80128aa:	bf00      	nop
}
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	20000208 	.word	0x20000208
 80128b8:	2000020a 	.word	0x2000020a

080128bc <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b08e      	sub	sp, #56	; 0x38
 80128c0:	af02      	add	r7, sp, #8
 80128c2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 80128c4:	2300      	movs	r3, #0
 80128c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	3301      	adds	r3, #1
 80128ce:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 80128d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2bff      	cmp	r3, #255	; 0xff
 80128d6:	d174      	bne.n	80129c2 <HeartRate_Event_Handler+0x106>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80128d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128da:	3302      	adds	r3, #2
 80128dc:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 80128de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e0:	881b      	ldrh	r3, [r3, #0]
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	f640 4201 	movw	r2, #3073	; 0xc01
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d03f      	beq.n	801296c <HeartRate_Event_Handler+0xb0>
 80128ec:	f640 4213 	movw	r2, #3091	; 0xc13
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d160      	bne.n	80129b6 <HeartRate_Event_Handler+0xfa>
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 80128f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f6:	3302      	adds	r3, #2
 80128f8:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 80128fa:	6a3b      	ldr	r3, [r7, #32]
 80128fc:	885b      	ldrh	r3, [r3, #2]
 80128fe:	b29b      	uxth	r3, r3
 8012900:	461a      	mov	r2, r3
 8012902:	4b33      	ldr	r3, [pc, #204]	; (80129d0 <HeartRate_Event_Handler+0x114>)
 8012904:	88db      	ldrh	r3, [r3, #6]
 8012906:	3301      	adds	r3, #1
 8012908:	429a      	cmp	r2, r3
 801290a:	d156      	bne.n	80129ba <HeartRate_Event_Handler+0xfe>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801290c:	2301      	movs	r3, #1
 801290e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	795b      	ldrb	r3, [r3, #5]
 8012916:	2b01      	cmp	r3, #1
 8012918:	d117      	bne.n	801294a <HeartRate_Event_Handler+0x8e>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 801291a:	6a3b      	ldr	r3, [r7, #32]
 801291c:	881b      	ldrh	r3, [r3, #0]
 801291e:	b298      	uxth	r0, r3
 8012920:	6a3b      	ldr	r3, [r7, #32]
 8012922:	885b      	ldrh	r3, [r3, #2]
 8012924:	b299      	uxth	r1, r3
 8012926:	6a3b      	ldr	r3, [r7, #32]
 8012928:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 801292a:	6a3a      	ldr	r2, [r7, #32]
 801292c:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 801292e:	9201      	str	r2, [sp, #4]
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	2300      	movs	r3, #0
 8012934:	2200      	movs	r2, #0
 8012936:	f7ff fbfc 	bl	8012132 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 801293a:	2300      	movs	r3, #0
 801293c:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 801293e:	f107 030c 	add.w	r3, r7, #12
 8012942:	4618      	mov	r0, r3
 8012944:	f006 fd7b 	bl	801943e <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 8012948:	e037      	b.n	80129ba <HeartRate_Event_Handler+0xfe>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 801294a:	6a3b      	ldr	r3, [r7, #32]
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	b298      	uxth	r0, r3
 8012950:	6a3b      	ldr	r3, [r7, #32]
 8012952:	885b      	ldrh	r3, [r3, #2]
 8012954:	b299      	uxth	r1, r3
 8012956:	6a3b      	ldr	r3, [r7, #32]
 8012958:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 801295a:	6a3a      	ldr	r2, [r7, #32]
 801295c:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 801295e:	9201      	str	r2, [sp, #4]
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	2380      	movs	r3, #128	; 0x80
 8012964:	2201      	movs	r2, #1
 8012966:	f7ff fbe4 	bl	8012132 <aci_gatt_write_resp>
        break;
 801296a:	e026      	b.n	80129ba <HeartRate_Event_Handler+0xfe>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 801296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296e:	3302      	adds	r3, #2
 8012970:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	885b      	ldrh	r3, [r3, #2]
 8012976:	b29b      	uxth	r3, r3
 8012978:	461a      	mov	r2, r3
 801297a:	4b15      	ldr	r3, [pc, #84]	; (80129d0 <HeartRate_Event_Handler+0x114>)
 801297c:	885b      	ldrh	r3, [r3, #2]
 801297e:	3302      	adds	r3, #2
 8012980:	429a      	cmp	r2, r3
 8012982:	d11c      	bne.n	80129be <HeartRate_Event_Handler+0x102>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8012984:	2301      	movs	r3, #1
 8012986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	7a1b      	ldrb	r3, [r3, #8]
 801298e:	f003 0301 	and.w	r3, r3, #1
 8012992:	2b00      	cmp	r3, #0
 8012994:	d007      	beq.n	80129a6 <HeartRate_Event_Handler+0xea>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 8012996:	2301      	movs	r3, #1
 8012998:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 801299a:	f107 030c 	add.w	r3, r7, #12
 801299e:	4618      	mov	r0, r3
 80129a0:	f006 fd4d 	bl	801943e <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 80129a4:	e00b      	b.n	80129be <HeartRate_Event_Handler+0x102>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 80129a6:	2302      	movs	r3, #2
 80129a8:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 80129aa:	f107 030c 	add.w	r3, r7, #12
 80129ae:	4618      	mov	r0, r3
 80129b0:	f006 fd45 	bl	801943e <HRS_Notification>
        break;
 80129b4:	e003      	b.n	80129be <HeartRate_Event_Handler+0x102>

        default:
          break;
 80129b6:	bf00      	nop
 80129b8:	e004      	b.n	80129c4 <HeartRate_Event_Handler+0x108>
        break;
 80129ba:	bf00      	nop
 80129bc:	e002      	b.n	80129c4 <HeartRate_Event_Handler+0x108>
        break;
 80129be:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80129c0:	e000      	b.n	80129c4 <HeartRate_Event_Handler+0x108>

    default:
      break;
 80129c2:	bf00      	nop
  }

  return(return_value);
 80129c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end HeartRate_Event_Handler */
 80129c8:	4618      	mov	r0, r3
 80129ca:	3730      	adds	r7, #48	; 0x30
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	2000020c 	.word	0x2000020c

080129d4 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b088      	sub	sp, #32
 80129d8:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 80129da:	2300      	movs	r3, #0
 80129dc:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 80129de:	482e      	ldr	r0, [pc, #184]	; (8012a98 <HRS_Init+0xc4>)
 80129e0:	f000 f906 	bl	8012bf0 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 80129e4:	f641 030d 	movw	r3, #6157	; 0x180d
 80129e8:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 80129ea:	1d39      	adds	r1, r7, #4
 80129ec:	4b2b      	ldr	r3, [pc, #172]	; (8012a9c <HRS_Init+0xc8>)
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	2308      	movs	r3, #8
 80129f2:	2201      	movs	r2, #1
 80129f4:	2001      	movs	r0, #1
 80129f6:	f7ff f97c 	bl	8011cf2 <aci_gatt_add_service>
 80129fa:	4603      	mov	r3, r0
 80129fc:	71fb      	strb	r3, [r7, #7]
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 80129fe:	f642 2337 	movw	r3, #10807	; 0x2a37
 8012a02:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8012a04:	4b25      	ldr	r3, [pc, #148]	; (8012a9c <HRS_Init+0xc8>)
 8012a06:	8818      	ldrh	r0, [r3, #0]
 8012a08:	1d3a      	adds	r2, r7, #4
 8012a0a:	4b25      	ldr	r3, [pc, #148]	; (8012aa0 <HRS_Init+0xcc>)
 8012a0c:	9305      	str	r3, [sp, #20]
 8012a0e:	2301      	movs	r3, #1
 8012a10:	9304      	str	r3, [sp, #16]
 8012a12:	230a      	movs	r3, #10
 8012a14:	9303      	str	r3, [sp, #12]
 8012a16:	2300      	movs	r3, #0
 8012a18:	9302      	str	r3, [sp, #8]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	2310      	movs	r3, #16
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	2307      	movs	r3, #7
 8012a24:	2101      	movs	r1, #1
 8012a26:	f7ff fa13 	bl	8011e50 <aci_gatt_add_char>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	71fb      	strb	r3, [r7, #7]

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 8012a2e:	f642 2338 	movw	r3, #10808	; 0x2a38
 8012a32:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8012a34:	4b19      	ldr	r3, [pc, #100]	; (8012a9c <HRS_Init+0xc8>)
 8012a36:	8818      	ldrh	r0, [r3, #0]
 8012a38:	1d3a      	adds	r2, r7, #4
 8012a3a:	4b1a      	ldr	r3, [pc, #104]	; (8012aa4 <HRS_Init+0xd0>)
 8012a3c:	9305      	str	r3, [sp, #20]
 8012a3e:	2300      	movs	r3, #0
 8012a40:	9304      	str	r3, [sp, #16]
 8012a42:	230a      	movs	r3, #10
 8012a44:	9303      	str	r3, [sp, #12]
 8012a46:	2300      	movs	r3, #0
 8012a48:	9302      	str	r3, [sp, #8]
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	9301      	str	r3, [sp, #4]
 8012a4e:	2302      	movs	r3, #2
 8012a50:	9300      	str	r3, [sp, #0]
 8012a52:	2301      	movs	r3, #1
 8012a54:	2101      	movs	r1, #1
 8012a56:	f7ff f9fb 	bl	8011e50 <aci_gatt_add_char>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	71fb      	strb	r3, [r7, #7]
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 8012a5e:	f642 2339 	movw	r3, #10809	; 0x2a39
 8012a62:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 8012a64:	4b0d      	ldr	r3, [pc, #52]	; (8012a9c <HRS_Init+0xc8>)
 8012a66:	8818      	ldrh	r0, [r3, #0]
 8012a68:	1d3a      	adds	r2, r7, #4
 8012a6a:	4b0f      	ldr	r3, [pc, #60]	; (8012aa8 <HRS_Init+0xd4>)
 8012a6c:	9305      	str	r3, [sp, #20]
 8012a6e:	2300      	movs	r3, #0
 8012a70:	9304      	str	r3, [sp, #16]
 8012a72:	230a      	movs	r3, #10
 8012a74:	9303      	str	r3, [sp, #12]
 8012a76:	2302      	movs	r3, #2
 8012a78:	9302      	str	r3, [sp, #8]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	9301      	str	r3, [sp, #4]
 8012a7e:	2308      	movs	r3, #8
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	2301      	movs	r3, #1
 8012a84:	2101      	movs	r1, #1
 8012a86:	f7ff f9e3 	bl	8011e50 <aci_gatt_add_char>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	71fb      	strb	r3, [r7, #7]
  }
#endif
  
  
  
  return;
 8012a8e:	bf00      	nop
}
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	080128bd 	.word	0x080128bd
 8012a9c:	2000020c 	.word	0x2000020c
 8012aa0:	2000020e 	.word	0x2000020e
 8012aa4:	20000210 	.word	0x20000210
 8012aa8:	20000212 	.word	0x20000212

08012aac <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8012aac:	b480      	push	{r7}
 8012aae:	af00      	add	r7, sp, #0
  return;
 8012ab0:	bf00      	nop
}
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr

08012aba <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8012aba:	b480      	push	{r7}
 8012abc:	af00      	add	r7, sp, #0
  return;
 8012abe:	bf00      	nop
}
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	af00      	add	r7, sp, #0
  return;
 8012acc:	bf00      	nop
}
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr

08012ad6 <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 8012ad6:	b480      	push	{r7}
 8012ad8:	af00      	add	r7, sp, #0
  return;
 8012ada:	bf00      	nop
}
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr

08012ae4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	af00      	add	r7, sp, #0
  return;
 8012ae8:	bf00      	nop
}
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr

08012af2 <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 8012af2:	b480      	push	{r7}
 8012af4:	af00      	add	r7, sp, #0
  return;
 8012af6:	bf00      	nop
}
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr

08012b00 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8012b00:	b480      	push	{r7}
 8012b02:	af00      	add	r7, sp, #0
  return;
 8012b04:	bf00      	nop
}
 8012b06:	46bd      	mov	sp, r7
 8012b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0c:	4770      	bx	lr

08012b0e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8012b0e:	b480      	push	{r7}
 8012b10:	af00      	add	r7, sp, #0
  return;
 8012b12:	bf00      	nop
}
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr

08012b1c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	af00      	add	r7, sp, #0
  return;
 8012b20:	bf00      	nop
}
 8012b22:	46bd      	mov	sp, r7
 8012b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b28:	4770      	bx	lr

08012b2a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8012b2a:	b480      	push	{r7}
 8012b2c:	af00      	add	r7, sp, #0
  return;
 8012b2e:	bf00      	nop
}
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8012b38:	b480      	push	{r7}
 8012b3a:	af00      	add	r7, sp, #0
  return;
 8012b3c:	bf00      	nop
}
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr

08012b46 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8012b46:	b480      	push	{r7}
 8012b48:	af00      	add	r7, sp, #0
  return;
 8012b4a:	bf00      	nop
}
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b52:	4770      	bx	lr

08012b54 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8012b54:	b480      	push	{r7}
 8012b56:	af00      	add	r7, sp, #0
  return;
 8012b58:	bf00      	nop
}
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8012b62:	b480      	push	{r7}
 8012b64:	af00      	add	r7, sp, #0
  return;
 8012b66:	bf00      	nop
}
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8012b70:	b480      	push	{r7}
 8012b72:	af00      	add	r7, sp, #0
  return;
 8012b74:	bf00      	nop
}
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr
	...

08012b80 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8012b84:	4b04      	ldr	r3, [pc, #16]	; (8012b98 <SVCCTL_Init+0x18>)
 8012b86:	2200      	movs	r2, #0
 8012b88:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8012b8a:	4b04      	ldr	r3, [pc, #16]	; (8012b9c <SVCCTL_Init+0x1c>)
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8012b90:	f000 f806 	bl	8012ba0 <SVCCTL_SvcInit>

  return;
 8012b94:	bf00      	nop
}
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	20000214 	.word	0x20000214
 8012b9c:	20000234 	.word	0x20000234

08012ba0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	af00      	add	r7, sp, #0
  BAS_Init();
 8012ba4:	f7ff ff82 	bl	8012aac <BAS_Init>

  BLS_Init();
 8012ba8:	f7ff ff87 	bl	8012aba <BLS_Init>

  CRS_STM_Init();
 8012bac:	f7ff ff8c 	bl	8012ac8 <CRS_STM_Init>

  DIS_Init();
 8012bb0:	f7ff fe4e 	bl	8012850 <DIS_Init>

  EDS_STM_Init();
 8012bb4:	f7ff ff8f 	bl	8012ad6 <EDS_STM_Init>

  HIDS_Init();
 8012bb8:	f7ff ff94 	bl	8012ae4 <HIDS_Init>

  HRS_Init();
 8012bbc:	f7ff ff0a 	bl	80129d4 <HRS_Init>

  HTS_Init();
 8012bc0:	f7ff ff97 	bl	8012af2 <HTS_Init>

  IAS_Init();
 8012bc4:	f7ff ff9c 	bl	8012b00 <IAS_Init>

  LLS_Init();
 8012bc8:	f7ff ffa1 	bl	8012b0e <LLS_Init>

  TPS_Init();
 8012bcc:	f7ff ffa6 	bl	8012b1c <TPS_Init>

  MOTENV_STM_Init();
 8012bd0:	f7ff ffab 	bl	8012b2a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8012bd4:	f7ff ffb0 	bl	8012b38 <P2PS_STM_Init>

  ZDD_STM_Init();
 8012bd8:	f7ff ffb5 	bl	8012b46 <ZDD_STM_Init>

  OTAS_STM_Init();
 8012bdc:	f7ff ffba 	bl	8012b54 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8012be0:	f7ff ffc6 	bl	8012b70 <BVOPUS_STM_Init>

  MESH_Init();
 8012be4:	f7ff ffbd 	bl	8012b62 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8012be8:	f006 f9c8 	bl	8018f7c <SVCCTL_InitCustomSvc>
  
  return;
 8012bec:	bf00      	nop
}
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8012bf8:	4b09      	ldr	r3, [pc, #36]	; (8012c20 <SVCCTL_RegisterSvcHandler+0x30>)
 8012bfa:	7f1b      	ldrb	r3, [r3, #28]
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4a08      	ldr	r2, [pc, #32]	; (8012c20 <SVCCTL_RegisterSvcHandler+0x30>)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8012c06:	4b06      	ldr	r3, [pc, #24]	; (8012c20 <SVCCTL_RegisterSvcHandler+0x30>)
 8012c08:	7f1b      	ldrb	r3, [r3, #28]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	b2da      	uxtb	r2, r3
 8012c0e:	4b04      	ldr	r3, [pc, #16]	; (8012c20 <SVCCTL_RegisterSvcHandler+0x30>)
 8012c10:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8012c12:	bf00      	nop
}
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr
 8012c1e:	bf00      	nop
 8012c20:	20000214 	.word	0x20000214

08012c24 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b086      	sub	sp, #24
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8012c32:	2300      	movs	r3, #0
 8012c34:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8012c36:	693b      	ldr	r3, [r7, #16]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	2bff      	cmp	r3, #255	; 0xff
 8012c3c:	d125      	bne.n	8012c8a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	3302      	adds	r3, #2
 8012c42:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012c4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012c52:	d118      	bne.n	8012c86 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8012c54:	2300      	movs	r3, #0
 8012c56:	757b      	strb	r3, [r7, #21]
 8012c58:	e00d      	b.n	8012c76 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8012c5a:	7d7b      	ldrb	r3, [r7, #21]
 8012c5c:	4a1a      	ldr	r2, [pc, #104]	; (8012cc8 <SVCCTL_UserEvtRx+0xa4>)
 8012c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	4798      	blx	r3
 8012c66:	4603      	mov	r3, r0
 8012c68:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8012c6a:	7dfb      	ldrb	r3, [r7, #23]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d108      	bne.n	8012c82 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8012c70:	7d7b      	ldrb	r3, [r7, #21]
 8012c72:	3301      	adds	r3, #1
 8012c74:	757b      	strb	r3, [r7, #21]
 8012c76:	4b14      	ldr	r3, [pc, #80]	; (8012cc8 <SVCCTL_UserEvtRx+0xa4>)
 8012c78:	7f1b      	ldrb	r3, [r3, #28]
 8012c7a:	7d7a      	ldrb	r2, [r7, #21]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d3ec      	bcc.n	8012c5a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8012c80:	e002      	b.n	8012c88 <SVCCTL_UserEvtRx+0x64>
              break;
 8012c82:	bf00      	nop
          break;
 8012c84:	e000      	b.n	8012c88 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8012c86:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8012c88:	e000      	b.n	8012c8c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8012c8a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8012c8c:	7dfb      	ldrb	r3, [r7, #23]
 8012c8e:	2b02      	cmp	r3, #2
 8012c90:	d00f      	beq.n	8012cb2 <SVCCTL_UserEvtRx+0x8e>
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	dc10      	bgt.n	8012cb8 <SVCCTL_UserEvtRx+0x94>
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d002      	beq.n	8012ca0 <SVCCTL_UserEvtRx+0x7c>
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d006      	beq.n	8012cac <SVCCTL_UserEvtRx+0x88>
 8012c9e:	e00b      	b.n	8012cb8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f005 fddf 	bl	8018864 <SVCCTL_App_Notification>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	75bb      	strb	r3, [r7, #22]
      break;
 8012caa:	e008      	b.n	8012cbe <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8012cac:	2301      	movs	r3, #1
 8012cae:	75bb      	strb	r3, [r7, #22]
      break;
 8012cb0:	e005      	b.n	8012cbe <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	75bb      	strb	r3, [r7, #22]
      break;
 8012cb6:	e002      	b.n	8012cbe <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8012cb8:	2301      	movs	r3, #1
 8012cba:	75bb      	strb	r3, [r7, #22]
      break;
 8012cbc:	bf00      	nop
  }

  return (return_status);
 8012cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3718      	adds	r7, #24
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	20000214 	.word	0x20000214

08012ccc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b088      	sub	sp, #32
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012cd4:	f107 030c 	add.w	r3, r7, #12
 8012cd8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	2125      	movs	r1, #37	; 0x25
 8012ce4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8012ce8:	f000 fae2 	bl	80132b0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	330b      	adds	r3, #11
 8012cf0:	78db      	ldrb	r3, [r3, #3]
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3720      	adds	r7, #32
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}

08012cfa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b088      	sub	sp, #32
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012d02:	f107 030c 	add.w	r3, r7, #12
 8012d06:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	210f      	movs	r1, #15
 8012d12:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8012d16:	f000 facb 	bl	80132b0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	330b      	adds	r3, #11
 8012d1e:	78db      	ldrb	r3, [r3, #3]
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3720      	adds	r7, #32
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012d30:	f107 030c 	add.w	r3, r7, #12
 8012d34:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	687a      	ldr	r2, [r7, #4]
 8012d3a:	210e      	movs	r1, #14
 8012d3c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8012d40:	f000 fab6 	bl	80132b0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	330b      	adds	r3, #11
 8012d48:	78db      	ldrb	r3, [r3, #3]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3720      	adds	r7, #32
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
	...

08012d54 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012d54:	b480      	push	{r7}
 8012d56:	b08b      	sub	sp, #44	; 0x2c
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8012d60:	2300      	movs	r3, #0
 8012d62:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8012d64:	2300      	movs	r3, #0
 8012d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8012d68:	2300      	movs	r3, #0
 8012d6a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8012d74:	2300      	movs	r3, #0
 8012d76:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012d7c:	4b4a      	ldr	r3, [pc, #296]	; (8012ea8 <SHCI_GetWirelessFwInfo+0x154>)
 8012d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d80:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012d84:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012d8e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	4a44      	ldr	r2, [pc, #272]	; (8012eac <SHCI_GetWirelessFwInfo+0x158>)
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d10f      	bne.n	8012dc0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	695b      	ldr	r3, [r3, #20]
 8012da4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	699b      	ldr	r3, [r3, #24]
 8012daa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	69db      	ldr	r3, [r3, #28]
 8012db0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	691b      	ldr	r3, [r3, #16]
 8012dbc:	617b      	str	r3, [r7, #20]
 8012dbe:	e01a      	b.n	8012df6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8012dc8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8012dcc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	691b      	ldr	r3, [r3, #16]
 8012dd4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	695b      	ldr	r3, [r3, #20]
 8012ddc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	699b      	ldr	r3, [r3, #24]
 8012de4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	0e1b      	lsrs	r3, r3, #24
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	0c1b      	lsrs	r3, r3, #16
 8012e04:	b2da      	uxtb	r2, r3
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0c:	0a1b      	lsrs	r3, r3, #8
 8012e0e:	b2da      	uxtb	r2, r3
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e16:	091b      	lsrs	r3, r3, #4
 8012e18:	b2db      	uxtb	r3, r3
 8012e1a:	f003 030f 	and.w	r3, r3, #15
 8012e1e:	b2da      	uxtb	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	f003 030f 	and.w	r3, r3, #15
 8012e2c:	b2da      	uxtb	r2, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012e32:	6a3b      	ldr	r3, [r7, #32]
 8012e34:	0e1b      	lsrs	r3, r3, #24
 8012e36:	b2da      	uxtb	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012e3c:	6a3b      	ldr	r3, [r7, #32]
 8012e3e:	0c1b      	lsrs	r3, r3, #16
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8012e46:	6a3b      	ldr	r3, [r7, #32]
 8012e48:	0a1b      	lsrs	r3, r3, #8
 8012e4a:	b2da      	uxtb	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012e50:	6a3b      	ldr	r3, [r7, #32]
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	b2da      	uxtb	r2, r3
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	0e1b      	lsrs	r3, r3, #24
 8012e64:	b2da      	uxtb	r2, r3
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	0c1b      	lsrs	r3, r3, #16
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	0a1b      	lsrs	r3, r3, #8
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	0e1b      	lsrs	r3, r3, #24
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	0c1b      	lsrs	r3, r3, #16
 8012e8c:	b2da      	uxtb	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	b2da      	uxtb	r2, r3
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	372c      	adds	r7, #44	; 0x2c
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr
 8012ea8:	58004000 	.word	0x58004000
 8012eac:	a94656b9 	.word	0xa94656b9

08012eb0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	4a08      	ldr	r2, [pc, #32]	; (8012ee0 <hci_init+0x30>)
 8012ec0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8012ec2:	4a08      	ldr	r2, [pc, #32]	; (8012ee4 <hci_init+0x34>)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8012ec8:	4806      	ldr	r0, [pc, #24]	; (8012ee4 <hci_init+0x34>)
 8012eca:	f000 f973 	bl	80131b4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 f8d4 	bl	8013080 <TlInit>

  return;
 8012ed8:	bf00      	nop
}
 8012eda:	3708      	adds	r7, #8
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	20003c28 	.word	0x20003c28
 8012ee4:	20003c00 	.word	0x20003c00

08012ee8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8012eee:	4822      	ldr	r0, [pc, #136]	; (8012f78 <hci_user_evt_proc+0x90>)
 8012ef0:	f000 fd28 	bl	8013944 <LST_is_empty>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d12b      	bne.n	8012f52 <hci_user_evt_proc+0x6a>
 8012efa:	4b20      	ldr	r3, [pc, #128]	; (8012f7c <hci_user_evt_proc+0x94>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d027      	beq.n	8012f52 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012f02:	f107 030c 	add.w	r3, r7, #12
 8012f06:	4619      	mov	r1, r3
 8012f08:	481b      	ldr	r0, [pc, #108]	; (8012f78 <hci_user_evt_proc+0x90>)
 8012f0a:	f000 fdaa 	bl	8013a62 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8012f0e:	4b1c      	ldr	r3, [pc, #112]	; (8012f80 <hci_user_evt_proc+0x98>)
 8012f10:	69db      	ldr	r3, [r3, #28]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00c      	beq.n	8012f30 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012f1e:	4b18      	ldr	r3, [pc, #96]	; (8012f80 <hci_user_evt_proc+0x98>)
 8012f20:	69db      	ldr	r3, [r3, #28]
 8012f22:	1d3a      	adds	r2, r7, #4
 8012f24:	4610      	mov	r0, r2
 8012f26:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8012f28:	793a      	ldrb	r2, [r7, #4]
 8012f2a:	4b14      	ldr	r3, [pc, #80]	; (8012f7c <hci_user_evt_proc+0x94>)
 8012f2c:	701a      	strb	r2, [r3, #0]
 8012f2e:	e002      	b.n	8012f36 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8012f30:	4b12      	ldr	r3, [pc, #72]	; (8012f7c <hci_user_evt_proc+0x94>)
 8012f32:	2201      	movs	r2, #1
 8012f34:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8012f36:	4b11      	ldr	r3, [pc, #68]	; (8012f7c <hci_user_evt_proc+0x94>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d004      	beq.n	8012f48 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	4618      	mov	r0, r3
 8012f42:	f000 fc03 	bl	801374c <TL_MM_EvtDone>
 8012f46:	e004      	b.n	8012f52 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	480a      	ldr	r0, [pc, #40]	; (8012f78 <hci_user_evt_proc+0x90>)
 8012f4e:	f000 fd1b 	bl	8013988 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8012f52:	4809      	ldr	r0, [pc, #36]	; (8012f78 <hci_user_evt_proc+0x90>)
 8012f54:	f000 fcf6 	bl	8013944 <LST_is_empty>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d107      	bne.n	8012f6e <hci_user_evt_proc+0x86>
 8012f5e:	4b07      	ldr	r3, [pc, #28]	; (8012f7c <hci_user_evt_proc+0x94>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d003      	beq.n	8012f6e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8012f66:	4804      	ldr	r0, [pc, #16]	; (8012f78 <hci_user_evt_proc+0x90>)
 8012f68:	f005 ff9a 	bl	8018ea0 <hci_notify_asynch_evt>
  }


  return;
 8012f6c:	bf00      	nop
 8012f6e:	bf00      	nop
}
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	2000023c 	.word	0x2000023c
 8012f7c:	20000248 	.word	0x20000248
 8012f80:	20003c00 	.word	0x20003c00

08012f84 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b088      	sub	sp, #32
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8012f90:	2000      	movs	r0, #0
 8012f92:	f000 f8cb 	bl	801312c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8012f96:	2300      	movs	r3, #0
 8012f98:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	885b      	ldrh	r3, [r3, #2]
 8012f9e:	b21b      	sxth	r3, r3
 8012fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012fa4:	b21a      	sxth	r2, r3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	029b      	lsls	r3, r3, #10
 8012fac:	b21b      	sxth	r3, r3
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	b21b      	sxth	r3, r3
 8012fb2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	b2d9      	uxtb	r1, r3
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	689a      	ldr	r2, [r3, #8]
 8012fbe:	8bbb      	ldrh	r3, [r7, #28]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f000 f88d 	bl	80130e0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8012fc6:	e04e      	b.n	8013066 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8012fc8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8012fcc:	f005 ff88 	bl	8018ee0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8012fd0:	e043      	b.n	801305a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8012fd2:	f107 030c 	add.w	r3, r7, #12
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	4828      	ldr	r0, [pc, #160]	; (801307c <hci_send_req+0xf8>)
 8012fda:	f000 fd42 	bl	8013a62 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	7a5b      	ldrb	r3, [r3, #9]
 8012fe2:	2b0f      	cmp	r3, #15
 8012fe4:	d114      	bne.n	8013010 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	330b      	adds	r3, #11
 8012fea:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	885b      	ldrh	r3, [r3, #2]
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	8bba      	ldrh	r2, [r7, #28]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d104      	bne.n	8013002 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	693a      	ldr	r2, [r7, #16]
 8012ffe:	7812      	ldrb	r2, [r2, #0]
 8013000:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	785b      	ldrb	r3, [r3, #1]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d027      	beq.n	801305a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801300a:	2301      	movs	r3, #1
 801300c:	77fb      	strb	r3, [r7, #31]
 801300e:	e024      	b.n	801305a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	330b      	adds	r3, #11
 8013014:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801301c:	b29b      	uxth	r3, r3
 801301e:	8bba      	ldrh	r2, [r7, #28]
 8013020:	429a      	cmp	r2, r3
 8013022:	d114      	bne.n	801304e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	7a9b      	ldrb	r3, [r3, #10]
 8013028:	3b03      	subs	r3, #3
 801302a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	695a      	ldr	r2, [r3, #20]
 8013030:	7dfb      	ldrb	r3, [r7, #23]
 8013032:	429a      	cmp	r2, r3
 8013034:	bfa8      	it	ge
 8013036:	461a      	movge	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6918      	ldr	r0, [r3, #16]
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	1cd9      	adds	r1, r3, #3
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	695b      	ldr	r3, [r3, #20]
 8013048:	461a      	mov	r2, r3
 801304a:	f007 f96b 	bl	801a324 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d001      	beq.n	801305a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8013056:	2301      	movs	r3, #1
 8013058:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801305a:	4808      	ldr	r0, [pc, #32]	; (801307c <hci_send_req+0xf8>)
 801305c:	f000 fc72 	bl	8013944 <LST_is_empty>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d0b5      	beq.n	8012fd2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8013066:	7ffb      	ldrb	r3, [r7, #31]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d0ad      	beq.n	8012fc8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801306c:	2001      	movs	r0, #1
 801306e:	f000 f85d 	bl	801312c <NotifyCmdStatus>

  return 0;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	3720      	adds	r7, #32
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	20003c20 	.word	0x20003c20

08013080 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b086      	sub	sp, #24
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8013088:	480f      	ldr	r0, [pc, #60]	; (80130c8 <TlInit+0x48>)
 801308a:	f000 fc4b 	bl	8013924 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801308e:	4a0f      	ldr	r2, [pc, #60]	; (80130cc <TlInit+0x4c>)
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8013094:	480e      	ldr	r0, [pc, #56]	; (80130d0 <TlInit+0x50>)
 8013096:	f000 fc45 	bl	8013924 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801309a:	4b0e      	ldr	r3, [pc, #56]	; (80130d4 <TlInit+0x54>)
 801309c:	2201      	movs	r2, #1
 801309e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80130a0:	4b0d      	ldr	r3, [pc, #52]	; (80130d8 <TlInit+0x58>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d00a      	beq.n	80130be <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80130ac:	4b0b      	ldr	r3, [pc, #44]	; (80130dc <TlInit+0x5c>)
 80130ae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80130b0:	4b09      	ldr	r3, [pc, #36]	; (80130d8 <TlInit+0x58>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	f107 0208 	add.w	r2, r7, #8
 80130b8:	4610      	mov	r0, r2
 80130ba:	4798      	blx	r3
  }

  return;
 80130bc:	bf00      	nop
 80130be:	bf00      	nop
}
 80130c0:	3718      	adds	r7, #24
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	20003c20 	.word	0x20003c20
 80130cc:	20000244 	.word	0x20000244
 80130d0:	2000023c 	.word	0x2000023c
 80130d4:	20000248 	.word	0x20000248
 80130d8:	20003c00 	.word	0x20003c00
 80130dc:	0801316d 	.word	0x0801316d

080130e0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	4603      	mov	r3, r0
 80130e8:	603a      	str	r2, [r7, #0]
 80130ea:	80fb      	strh	r3, [r7, #6]
 80130ec:	460b      	mov	r3, r1
 80130ee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80130f0:	4b0c      	ldr	r3, [pc, #48]	; (8013124 <SendCmd+0x44>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	88fa      	ldrh	r2, [r7, #6]
 80130f6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80130fa:	4b0a      	ldr	r3, [pc, #40]	; (8013124 <SendCmd+0x44>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	797a      	ldrb	r2, [r7, #5]
 8013100:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8013102:	4b08      	ldr	r3, [pc, #32]	; (8013124 <SendCmd+0x44>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	330c      	adds	r3, #12
 8013108:	797a      	ldrb	r2, [r7, #5]
 801310a:	6839      	ldr	r1, [r7, #0]
 801310c:	4618      	mov	r0, r3
 801310e:	f007 f909 	bl	801a324 <memcpy>

  hciContext.io.Send(0,0);
 8013112:	4b05      	ldr	r3, [pc, #20]	; (8013128 <SendCmd+0x48>)
 8013114:	691b      	ldr	r3, [r3, #16]
 8013116:	2100      	movs	r1, #0
 8013118:	2000      	movs	r0, #0
 801311a:	4798      	blx	r3

  return;
 801311c:	bf00      	nop
}
 801311e:	3708      	adds	r7, #8
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	20000244 	.word	0x20000244
 8013128:	20003c00 	.word	0x20003c00

0801312c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	4603      	mov	r3, r0
 8013134:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8013136:	79fb      	ldrb	r3, [r7, #7]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d108      	bne.n	801314e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 801313c:	4b0a      	ldr	r3, [pc, #40]	; (8013168 <NotifyCmdStatus+0x3c>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d00d      	beq.n	8013160 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8013144:	4b08      	ldr	r3, [pc, #32]	; (8013168 <NotifyCmdStatus+0x3c>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2000      	movs	r0, #0
 801314a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 801314c:	e008      	b.n	8013160 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801314e:	4b06      	ldr	r3, [pc, #24]	; (8013168 <NotifyCmdStatus+0x3c>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d004      	beq.n	8013160 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8013156:	4b04      	ldr	r3, [pc, #16]	; (8013168 <NotifyCmdStatus+0x3c>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2001      	movs	r0, #1
 801315c:	4798      	blx	r3
  return;
 801315e:	bf00      	nop
 8013160:	bf00      	nop
}
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	20003c28 	.word	0x20003c28

0801316c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	7a5b      	ldrb	r3, [r3, #9]
 8013178:	2b0f      	cmp	r3, #15
 801317a:	d003      	beq.n	8013184 <TlEvtReceived+0x18>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	7a5b      	ldrb	r3, [r3, #9]
 8013180:	2b0e      	cmp	r3, #14
 8013182:	d107      	bne.n	8013194 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8013184:	6879      	ldr	r1, [r7, #4]
 8013186:	4809      	ldr	r0, [pc, #36]	; (80131ac <TlEvtReceived+0x40>)
 8013188:	f000 fc24 	bl	80139d4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 801318c:	2000      	movs	r0, #0
 801318e:	f005 fe97 	bl	8018ec0 <hci_cmd_resp_release>
 8013192:	e006      	b.n	80131a2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8013194:	6879      	ldr	r1, [r7, #4]
 8013196:	4806      	ldr	r0, [pc, #24]	; (80131b0 <TlEvtReceived+0x44>)
 8013198:	f000 fc1c 	bl	80139d4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801319c:	4804      	ldr	r0, [pc, #16]	; (80131b0 <TlEvtReceived+0x44>)
 801319e:	f005 fe7f 	bl	8018ea0 <hci_notify_asynch_evt>
  }

  return;
 80131a2:	bf00      	nop
}
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	20003c20 	.word	0x20003c20
 80131b0:	2000023c 	.word	0x2000023c

080131b4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	4a05      	ldr	r2, [pc, #20]	; (80131d4 <hci_register_io_bus+0x20>)
 80131c0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	4a04      	ldr	r2, [pc, #16]	; (80131d8 <hci_register_io_bus+0x24>)
 80131c6:	611a      	str	r2, [r3, #16]

  return;
 80131c8:	bf00      	nop
}
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr
 80131d4:	080134c5 	.word	0x080134c5
 80131d8:	0801352d 	.word	0x0801352d

080131dc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
 80131e4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	4a08      	ldr	r2, [pc, #32]	; (801320c <shci_init+0x30>)
 80131ec:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80131ee:	4a08      	ldr	r2, [pc, #32]	; (8013210 <shci_init+0x34>)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80131f4:	4806      	ldr	r0, [pc, #24]	; (8013210 <shci_init+0x34>)
 80131f6:	f000 f911 	bl	801341c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4618      	mov	r0, r3
 8013200:	f000 f894 	bl	801332c <TlInit>

  return;
 8013204:	bf00      	nop
}
 8013206:	3708      	adds	r7, #8
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	20003c4c 	.word	0x20003c4c
 8013210:	20003c2c 	.word	0x20003c2c

08013214 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801321a:	4822      	ldr	r0, [pc, #136]	; (80132a4 <shci_user_evt_proc+0x90>)
 801321c:	f000 fb92 	bl	8013944 <LST_is_empty>
 8013220:	4603      	mov	r3, r0
 8013222:	2b00      	cmp	r3, #0
 8013224:	d12b      	bne.n	801327e <shci_user_evt_proc+0x6a>
 8013226:	4b20      	ldr	r3, [pc, #128]	; (80132a8 <shci_user_evt_proc+0x94>)
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d027      	beq.n	801327e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801322e:	f107 030c 	add.w	r3, r7, #12
 8013232:	4619      	mov	r1, r3
 8013234:	481b      	ldr	r0, [pc, #108]	; (80132a4 <shci_user_evt_proc+0x90>)
 8013236:	f000 fc14 	bl	8013a62 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801323a:	4b1c      	ldr	r3, [pc, #112]	; (80132ac <shci_user_evt_proc+0x98>)
 801323c:	69db      	ldr	r3, [r3, #28]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d00c      	beq.n	801325c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8013246:	2301      	movs	r3, #1
 8013248:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801324a:	4b18      	ldr	r3, [pc, #96]	; (80132ac <shci_user_evt_proc+0x98>)
 801324c:	69db      	ldr	r3, [r3, #28]
 801324e:	1d3a      	adds	r2, r7, #4
 8013250:	4610      	mov	r0, r2
 8013252:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8013254:	793a      	ldrb	r2, [r7, #4]
 8013256:	4b14      	ldr	r3, [pc, #80]	; (80132a8 <shci_user_evt_proc+0x94>)
 8013258:	701a      	strb	r2, [r3, #0]
 801325a:	e002      	b.n	8013262 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801325c:	4b12      	ldr	r3, [pc, #72]	; (80132a8 <shci_user_evt_proc+0x94>)
 801325e:	2201      	movs	r2, #1
 8013260:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8013262:	4b11      	ldr	r3, [pc, #68]	; (80132a8 <shci_user_evt_proc+0x94>)
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d004      	beq.n	8013274 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	4618      	mov	r0, r3
 801326e:	f000 fa6d 	bl	801374c <TL_MM_EvtDone>
 8013272:	e004      	b.n	801327e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4619      	mov	r1, r3
 8013278:	480a      	ldr	r0, [pc, #40]	; (80132a4 <shci_user_evt_proc+0x90>)
 801327a:	f000 fb85 	bl	8013988 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801327e:	4809      	ldr	r0, [pc, #36]	; (80132a4 <shci_user_evt_proc+0x90>)
 8013280:	f000 fb60 	bl	8013944 <LST_is_empty>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d107      	bne.n	801329a <shci_user_evt_proc+0x86>
 801328a:	4b07      	ldr	r3, [pc, #28]	; (80132a8 <shci_user_evt_proc+0x94>)
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d003      	beq.n	801329a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8013292:	4804      	ldr	r0, [pc, #16]	; (80132a4 <shci_user_evt_proc+0x90>)
 8013294:	f7ee f946 	bl	8001524 <shci_notify_asynch_evt>
  }


  return;
 8013298:	bf00      	nop
 801329a:	bf00      	nop
}
 801329c:	3710      	adds	r7, #16
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop
 80132a4:	2000024c 	.word	0x2000024c
 80132a8:	2000025c 	.word	0x2000025c
 80132ac:	20003c2c 	.word	0x20003c2c

080132b0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60ba      	str	r2, [r7, #8]
 80132b8:	607b      	str	r3, [r7, #4]
 80132ba:	4603      	mov	r3, r0
 80132bc:	81fb      	strh	r3, [r7, #14]
 80132be:	460b      	mov	r3, r1
 80132c0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80132c2:	2000      	movs	r0, #0
 80132c4:	f000 f864 	bl	8013390 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80132c8:	4b16      	ldr	r3, [pc, #88]	; (8013324 <shci_send+0x74>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	89fa      	ldrh	r2, [r7, #14]
 80132ce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80132d2:	4b14      	ldr	r3, [pc, #80]	; (8013324 <shci_send+0x74>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	7b7a      	ldrb	r2, [r7, #13]
 80132d8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80132da:	4b12      	ldr	r3, [pc, #72]	; (8013324 <shci_send+0x74>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	330c      	adds	r3, #12
 80132e0:	7b7a      	ldrb	r2, [r7, #13]
 80132e2:	68b9      	ldr	r1, [r7, #8]
 80132e4:	4618      	mov	r0, r3
 80132e6:	f007 f81d 	bl	801a324 <memcpy>

  shciContext.io.Send(0,0);
 80132ea:	4b0f      	ldr	r3, [pc, #60]	; (8013328 <shci_send+0x78>)
 80132ec:	691b      	ldr	r3, [r3, #16]
 80132ee:	2100      	movs	r1, #0
 80132f0:	2000      	movs	r0, #0
 80132f2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80132f4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80132f8:	f7ee f934 	bl	8001564 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f103 0008 	add.w	r0, r3, #8
 8013302:	4b08      	ldr	r3, [pc, #32]	; (8013324 <shci_send+0x74>)
 8013304:	6819      	ldr	r1, [r3, #0]
 8013306:	4b07      	ldr	r3, [pc, #28]	; (8013324 <shci_send+0x74>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	789b      	ldrb	r3, [r3, #2]
 801330c:	3303      	adds	r3, #3
 801330e:	461a      	mov	r2, r3
 8013310:	f007 f808 	bl	801a324 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013314:	2001      	movs	r0, #1
 8013316:	f000 f83b 	bl	8013390 <Cmd_SetStatus>

  return;
 801331a:	bf00      	nop
}
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	20000258 	.word	0x20000258
 8013328:	20003c2c 	.word	0x20003c2c

0801332c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b086      	sub	sp, #24
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013334:	4a10      	ldr	r2, [pc, #64]	; (8013378 <TlInit+0x4c>)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801333a:	4810      	ldr	r0, [pc, #64]	; (801337c <TlInit+0x50>)
 801333c:	f000 faf2 	bl	8013924 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013340:	2001      	movs	r0, #1
 8013342:	f000 f825 	bl	8013390 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013346:	4b0e      	ldr	r3, [pc, #56]	; (8013380 <TlInit+0x54>)
 8013348:	2201      	movs	r2, #1
 801334a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801334c:	4b0d      	ldr	r3, [pc, #52]	; (8013384 <TlInit+0x58>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00c      	beq.n	801336e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013358:	4b0b      	ldr	r3, [pc, #44]	; (8013388 <TlInit+0x5c>)
 801335a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801335c:	4b0b      	ldr	r3, [pc, #44]	; (801338c <TlInit+0x60>)
 801335e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013360:	4b08      	ldr	r3, [pc, #32]	; (8013384 <TlInit+0x58>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	f107 020c 	add.w	r2, r7, #12
 8013368:	4610      	mov	r0, r2
 801336a:	4798      	blx	r3
  }

  return;
 801336c:	bf00      	nop
 801336e:	bf00      	nop
}
 8013370:	3718      	adds	r7, #24
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
 8013376:	bf00      	nop
 8013378:	20000258 	.word	0x20000258
 801337c:	2000024c 	.word	0x2000024c
 8013380:	2000025c 	.word	0x2000025c
 8013384:	20003c2c 	.word	0x20003c2c
 8013388:	080133e1 	.word	0x080133e1
 801338c:	080133f9 	.word	0x080133f9

08013390 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	4603      	mov	r3, r0
 8013398:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801339a:	79fb      	ldrb	r3, [r7, #7]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10b      	bne.n	80133b8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80133a0:	4b0d      	ldr	r3, [pc, #52]	; (80133d8 <Cmd_SetStatus+0x48>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d003      	beq.n	80133b0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80133a8:	4b0b      	ldr	r3, [pc, #44]	; (80133d8 <Cmd_SetStatus+0x48>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	2000      	movs	r0, #0
 80133ae:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80133b0:	4b0a      	ldr	r3, [pc, #40]	; (80133dc <Cmd_SetStatus+0x4c>)
 80133b2:	2200      	movs	r2, #0
 80133b4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80133b6:	e00b      	b.n	80133d0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80133b8:	4b08      	ldr	r3, [pc, #32]	; (80133dc <Cmd_SetStatus+0x4c>)
 80133ba:	2201      	movs	r2, #1
 80133bc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80133be:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <Cmd_SetStatus+0x48>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d004      	beq.n	80133d0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80133c6:	4b04      	ldr	r3, [pc, #16]	; (80133d8 <Cmd_SetStatus+0x48>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2001      	movs	r0, #1
 80133cc:	4798      	blx	r3
  return;
 80133ce:	bf00      	nop
 80133d0:	bf00      	nop
}
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	20003c4c 	.word	0x20003c4c
 80133dc:	20000254 	.word	0x20000254

080133e0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80133e8:	2000      	movs	r0, #0
 80133ea:	f7ee f8ab 	bl	8001544 <shci_cmd_resp_release>

  return;
 80133ee:	bf00      	nop
}
 80133f0:	3708      	adds	r7, #8
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
	...

080133f8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013400:	6879      	ldr	r1, [r7, #4]
 8013402:	4805      	ldr	r0, [pc, #20]	; (8013418 <TlUserEvtReceived+0x20>)
 8013404:	f000 fae6 	bl	80139d4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013408:	4803      	ldr	r0, [pc, #12]	; (8013418 <TlUserEvtReceived+0x20>)
 801340a:	f7ee f88b 	bl	8001524 <shci_notify_asynch_evt>

  return;
 801340e:	bf00      	nop
}
 8013410:	3708      	adds	r7, #8
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	2000024c 	.word	0x2000024c

0801341c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801341c:	b480      	push	{r7}
 801341e:	b083      	sub	sp, #12
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	4a05      	ldr	r2, [pc, #20]	; (801343c <shci_register_io_bus+0x20>)
 8013428:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	4a04      	ldr	r2, [pc, #16]	; (8013440 <shci_register_io_bus+0x24>)
 801342e:	611a      	str	r2, [r3, #16]

  return;
 8013430:	bf00      	nop
}
 8013432:	370c      	adds	r7, #12
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr
 801343c:	080135d9 	.word	0x080135d9
 8013440:	0801362d 	.word	0x0801362d

08013444 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013448:	f006 f992 	bl	8019770 <HW_IPCC_Enable>

  return;
 801344c:	bf00      	nop
}
 801344e:	bd80      	pop	{r7, pc}

08013450 <TL_Init>:


void TL_Init( void )
{
 8013450:	b580      	push	{r7, lr}
 8013452:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8013454:	4b10      	ldr	r3, [pc, #64]	; (8013498 <TL_Init+0x48>)
 8013456:	4a11      	ldr	r2, [pc, #68]	; (801349c <TL_Init+0x4c>)
 8013458:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801345a:	4b0f      	ldr	r3, [pc, #60]	; (8013498 <TL_Init+0x48>)
 801345c:	4a10      	ldr	r2, [pc, #64]	; (80134a0 <TL_Init+0x50>)
 801345e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013460:	4b0d      	ldr	r3, [pc, #52]	; (8013498 <TL_Init+0x48>)
 8013462:	4a10      	ldr	r2, [pc, #64]	; (80134a4 <TL_Init+0x54>)
 8013464:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013466:	4b0c      	ldr	r3, [pc, #48]	; (8013498 <TL_Init+0x48>)
 8013468:	4a0f      	ldr	r2, [pc, #60]	; (80134a8 <TL_Init+0x58>)
 801346a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801346c:	4b0a      	ldr	r3, [pc, #40]	; (8013498 <TL_Init+0x48>)
 801346e:	4a0f      	ldr	r2, [pc, #60]	; (80134ac <TL_Init+0x5c>)
 8013470:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013472:	4b09      	ldr	r3, [pc, #36]	; (8013498 <TL_Init+0x48>)
 8013474:	4a0e      	ldr	r2, [pc, #56]	; (80134b0 <TL_Init+0x60>)
 8013476:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013478:	4b07      	ldr	r3, [pc, #28]	; (8013498 <TL_Init+0x48>)
 801347a:	4a0e      	ldr	r2, [pc, #56]	; (80134b4 <TL_Init+0x64>)
 801347c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801347e:	4b06      	ldr	r3, [pc, #24]	; (8013498 <TL_Init+0x48>)
 8013480:	4a0d      	ldr	r2, [pc, #52]	; (80134b8 <TL_Init+0x68>)
 8013482:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013484:	4b04      	ldr	r3, [pc, #16]	; (8013498 <TL_Init+0x48>)
 8013486:	4a0d      	ldr	r2, [pc, #52]	; (80134bc <TL_Init+0x6c>)
 8013488:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801348a:	4b03      	ldr	r3, [pc, #12]	; (8013498 <TL_Init+0x48>)
 801348c:	4a0c      	ldr	r2, [pc, #48]	; (80134c0 <TL_Init+0x70>)
 801348e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013490:	f006 f982 	bl	8019798 <HW_IPCC_Init>

  return;
 8013494:	bf00      	nop
}
 8013496:	bd80      	pop	{r7, pc}
 8013498:	20030000 	.word	0x20030000
 801349c:	20030028 	.word	0x20030028
 80134a0:	20030048 	.word	0x20030048
 80134a4:	20030058 	.word	0x20030058
 80134a8:	20030064 	.word	0x20030064
 80134ac:	2003006c 	.word	0x2003006c
 80134b0:	20030074 	.word	0x20030074
 80134b4:	2003007c 	.word	0x2003007c
 80134b8:	20030098 	.word	0x20030098
 80134bc:	2003009c 	.word	0x2003009c
 80134c0:	200300a8 	.word	0x200300a8

080134c4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b084      	sub	sp, #16
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80134d0:	4811      	ldr	r0, [pc, #68]	; (8013518 <TL_BLE_Init+0x54>)
 80134d2:	f000 fa27 	bl	8013924 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80134d6:	4b11      	ldr	r3, [pc, #68]	; (801351c <TL_BLE_Init+0x58>)
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	689a      	ldr	r2, [r3, #8]
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	68da      	ldr	r2, [r3, #12]
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	4a0c      	ldr	r2, [pc, #48]	; (8013520 <TL_BLE_Init+0x5c>)
 80134f0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	4a08      	ldr	r2, [pc, #32]	; (8013518 <TL_BLE_Init+0x54>)
 80134f6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80134f8:	f006 f964 	bl	80197c4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4a08      	ldr	r2, [pc, #32]	; (8013524 <TL_BLE_Init+0x60>)
 8013502:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	4a07      	ldr	r2, [pc, #28]	; (8013528 <TL_BLE_Init+0x64>)
 801350a:	6013      	str	r3, [r2, #0]

  return 0;
 801350c:	2300      	movs	r3, #0
}
 801350e:	4618      	mov	r0, r3
 8013510:	3710      	adds	r7, #16
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
 8013516:	bf00      	nop
 8013518:	200300c4 	.word	0x200300c4
 801351c:	20030000 	.word	0x20030000
 8013520:	20030a48 	.word	0x20030a48
 8013524:	20003c58 	.word	0x20003c58
 8013528:	20003c5c 	.word	0x20003c5c

0801352c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	460b      	mov	r3, r1
 8013536:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8013538:	4b09      	ldr	r3, [pc, #36]	; (8013560 <TL_BLE_SendCmd+0x34>)
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	2201      	movs	r2, #1
 8013540:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8013542:	4b07      	ldr	r3, [pc, #28]	; (8013560 <TL_BLE_SendCmd+0x34>)
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	4619      	mov	r1, r3
 801354a:	2001      	movs	r0, #1
 801354c:	f000 f96c 	bl	8013828 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8013550:	f006 f942 	bl	80197d8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8013554:	2300      	movs	r3, #0
}
 8013556:	4618      	mov	r0, r3
 8013558:	3708      	adds	r7, #8
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	20030000 	.word	0x20030000

08013564 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801356a:	e01c      	b.n	80135a6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801356c:	1d3b      	adds	r3, r7, #4
 801356e:	4619      	mov	r1, r3
 8013570:	4812      	ldr	r0, [pc, #72]	; (80135bc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013572:	f000 fa76 	bl	8013a62 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	7a5b      	ldrb	r3, [r3, #9]
 801357a:	2b0f      	cmp	r3, #15
 801357c:	d003      	beq.n	8013586 <HW_IPCC_BLE_RxEvtNot+0x22>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	7a5b      	ldrb	r3, [r3, #9]
 8013582:	2b0e      	cmp	r3, #14
 8013584:	d105      	bne.n	8013592 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4619      	mov	r1, r3
 801358a:	2002      	movs	r0, #2
 801358c:	f000 f94c 	bl	8013828 <OutputDbgTrace>
 8013590:	e004      	b.n	801359c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4619      	mov	r1, r3
 8013596:	2003      	movs	r0, #3
 8013598:	f000 f946 	bl	8013828 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 801359c:	4b08      	ldr	r3, [pc, #32]	; (80135c0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	4610      	mov	r0, r2
 80135a4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80135a6:	4805      	ldr	r0, [pc, #20]	; (80135bc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80135a8:	f000 f9cc 	bl	8013944 <LST_is_empty>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d0dc      	beq.n	801356c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80135b2:	bf00      	nop
}
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	200300c4 	.word	0x200300c4
 80135c0:	20003c58 	.word	0x20003c58

080135c4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80135c8:	4b02      	ldr	r3, [pc, #8]	; (80135d4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	4798      	blx	r3

  return;
 80135ce:	bf00      	nop
}
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	20003c5c 	.word	0x20003c5c

080135d8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80135e4:	480d      	ldr	r0, [pc, #52]	; (801361c <TL_SYS_Init+0x44>)
 80135e6:	f000 f99d 	bl	8013924 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80135ea:	4b0d      	ldr	r3, [pc, #52]	; (8013620 <TL_SYS_Init+0x48>)
 80135ec:	68db      	ldr	r3, [r3, #12]
 80135ee:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	689a      	ldr	r2, [r3, #8]
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	4a08      	ldr	r2, [pc, #32]	; (801361c <TL_SYS_Init+0x44>)
 80135fc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80135fe:	f006 f90d 	bl	801981c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4a07      	ldr	r2, [pc, #28]	; (8013624 <TL_SYS_Init+0x4c>)
 8013608:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	4a06      	ldr	r2, [pc, #24]	; (8013628 <TL_SYS_Init+0x50>)
 8013610:	6013      	str	r3, [r2, #0]

  return 0;
 8013612:	2300      	movs	r3, #0
}
 8013614:	4618      	mov	r0, r3
 8013616:	3710      	adds	r7, #16
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	200300cc 	.word	0x200300cc
 8013620:	20030000 	.word	0x20030000
 8013624:	20003c60 	.word	0x20003c60
 8013628:	20003c64 	.word	0x20003c64

0801362c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	460b      	mov	r3, r1
 8013636:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013638:	4b09      	ldr	r3, [pc, #36]	; (8013660 <TL_SYS_SendCmd+0x34>)
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2210      	movs	r2, #16
 8013640:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8013642:	4b07      	ldr	r3, [pc, #28]	; (8013660 <TL_SYS_SendCmd+0x34>)
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4619      	mov	r1, r3
 801364a:	2004      	movs	r0, #4
 801364c:	f000 f8ec 	bl	8013828 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8013650:	f006 f8ee 	bl	8019830 <HW_IPCC_SYS_SendCmd>

  return 0;
 8013654:	2300      	movs	r3, #0
}
 8013656:	4618      	mov	r0, r3
 8013658:	3708      	adds	r7, #8
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
 801365e:	bf00      	nop
 8013660:	20030000 	.word	0x20030000

08013664 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013668:	4b07      	ldr	r3, [pc, #28]	; (8013688 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4619      	mov	r1, r3
 8013670:	2005      	movs	r0, #5
 8013672:	f000 f8d9 	bl	8013828 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013676:	4b05      	ldr	r3, [pc, #20]	; (801368c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	4a03      	ldr	r2, [pc, #12]	; (8013688 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801367c:	68d2      	ldr	r2, [r2, #12]
 801367e:	6812      	ldr	r2, [r2, #0]
 8013680:	4610      	mov	r0, r2
 8013682:	4798      	blx	r3

  return;
 8013684:	bf00      	nop
}
 8013686:	bd80      	pop	{r7, pc}
 8013688:	20030000 	.word	0x20030000
 801368c:	20003c60 	.word	0x20003c60

08013690 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013696:	e00e      	b.n	80136b6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8013698:	1d3b      	adds	r3, r7, #4
 801369a:	4619      	mov	r1, r3
 801369c:	480b      	ldr	r0, [pc, #44]	; (80136cc <HW_IPCC_SYS_EvtNot+0x3c>)
 801369e:	f000 f9e0 	bl	8013a62 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	4619      	mov	r1, r3
 80136a6:	2006      	movs	r0, #6
 80136a8:	f000 f8be 	bl	8013828 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80136ac:	4b08      	ldr	r3, [pc, #32]	; (80136d0 <HW_IPCC_SYS_EvtNot+0x40>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	4610      	mov	r0, r2
 80136b4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80136b6:	4805      	ldr	r0, [pc, #20]	; (80136cc <HW_IPCC_SYS_EvtNot+0x3c>)
 80136b8:	f000 f944 	bl	8013944 <LST_is_empty>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d0ea      	beq.n	8013698 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80136c2:	bf00      	nop
}
 80136c4:	3708      	adds	r7, #8
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	200300cc 	.word	0x200300cc
 80136d0:	20003c64 	.word	0x20003c64

080136d4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80136dc:	4817      	ldr	r0, [pc, #92]	; (801373c <TL_MM_Init+0x68>)
 80136de:	f000 f921 	bl	8013924 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80136e2:	4817      	ldr	r0, [pc, #92]	; (8013740 <TL_MM_Init+0x6c>)
 80136e4:	f000 f91e 	bl	8013924 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80136e8:	4b16      	ldr	r3, [pc, #88]	; (8013744 <TL_MM_Init+0x70>)
 80136ea:	691b      	ldr	r3, [r3, #16]
 80136ec:	4a16      	ldr	r2, [pc, #88]	; (8013748 <TL_MM_Init+0x74>)
 80136ee:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80136f0:	4b15      	ldr	r3, [pc, #84]	; (8013748 <TL_MM_Init+0x74>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	687a      	ldr	r2, [r7, #4]
 80136f6:	6892      	ldr	r2, [r2, #8]
 80136f8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80136fa:	4b13      	ldr	r3, [pc, #76]	; (8013748 <TL_MM_Init+0x74>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	68d2      	ldr	r2, [r2, #12]
 8013702:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8013704:	4b10      	ldr	r3, [pc, #64]	; (8013748 <TL_MM_Init+0x74>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	4a0c      	ldr	r2, [pc, #48]	; (801373c <TL_MM_Init+0x68>)
 801370a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 801370c:	4b0e      	ldr	r3, [pc, #56]	; (8013748 <TL_MM_Init+0x74>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	6812      	ldr	r2, [r2, #0]
 8013714:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8013716:	4b0c      	ldr	r3, [pc, #48]	; (8013748 <TL_MM_Init+0x74>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	6852      	ldr	r2, [r2, #4]
 801371e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8013720:	4b09      	ldr	r3, [pc, #36]	; (8013748 <TL_MM_Init+0x74>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	6912      	ldr	r2, [r2, #16]
 8013728:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801372a:	4b07      	ldr	r3, [pc, #28]	; (8013748 <TL_MM_Init+0x74>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	6952      	ldr	r2, [r2, #20]
 8013732:	619a      	str	r2, [r3, #24]

  return;
 8013734:	bf00      	nop
}
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}
 801373c:	200300b4 	.word	0x200300b4
 8013740:	20003c50 	.word	0x20003c50
 8013744:	20030000 	.word	0x20030000
 8013748:	20003c68 	.word	0x20003c68

0801374c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8013754:	6879      	ldr	r1, [r7, #4]
 8013756:	4807      	ldr	r0, [pc, #28]	; (8013774 <TL_MM_EvtDone+0x28>)
 8013758:	f000 f93c 	bl	80139d4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 801375c:	6879      	ldr	r1, [r7, #4]
 801375e:	2000      	movs	r0, #0
 8013760:	f000 f862 	bl	8013828 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8013764:	4804      	ldr	r0, [pc, #16]	; (8013778 <TL_MM_EvtDone+0x2c>)
 8013766:	f006 f889 	bl	801987c <HW_IPCC_MM_SendFreeBuf>

  return;
 801376a:	bf00      	nop
}
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	20003c50 	.word	0x20003c50
 8013778:	0801377d 	.word	0x0801377d

0801377c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8013782:	e00c      	b.n	801379e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8013784:	1d3b      	adds	r3, r7, #4
 8013786:	4619      	mov	r1, r3
 8013788:	480a      	ldr	r0, [pc, #40]	; (80137b4 <SendFreeBuf+0x38>)
 801378a:	f000 f96a 	bl	8013a62 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801378e:	4b0a      	ldr	r3, [pc, #40]	; (80137b8 <SendFreeBuf+0x3c>)
 8013790:	691b      	ldr	r3, [r3, #16]
 8013792:	691b      	ldr	r3, [r3, #16]
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	4611      	mov	r1, r2
 8013798:	4618      	mov	r0, r3
 801379a:	f000 f91b 	bl	80139d4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801379e:	4805      	ldr	r0, [pc, #20]	; (80137b4 <SendFreeBuf+0x38>)
 80137a0:	f000 f8d0 	bl	8013944 <LST_is_empty>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d0ec      	beq.n	8013784 <SendFreeBuf+0x8>
  }

  return;
 80137aa:	bf00      	nop
}
 80137ac:	3708      	adds	r7, #8
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
 80137b2:	bf00      	nop
 80137b4:	20003c50 	.word	0x20003c50
 80137b8:	20030000 	.word	0x20030000

080137bc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80137c0:	4805      	ldr	r0, [pc, #20]	; (80137d8 <TL_TRACES_Init+0x1c>)
 80137c2:	f000 f8af 	bl	8013924 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80137c6:	4b05      	ldr	r3, [pc, #20]	; (80137dc <TL_TRACES_Init+0x20>)
 80137c8:	695b      	ldr	r3, [r3, #20]
 80137ca:	4a03      	ldr	r2, [pc, #12]	; (80137d8 <TL_TRACES_Init+0x1c>)
 80137cc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80137ce:	f006 f88b 	bl	80198e8 <HW_IPCC_TRACES_Init>

  return;
 80137d2:	bf00      	nop
}
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	200300bc 	.word	0x200300bc
 80137dc:	20030000 	.word	0x20030000

080137e0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80137e6:	e008      	b.n	80137fa <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80137e8:	1d3b      	adds	r3, r7, #4
 80137ea:	4619      	mov	r1, r3
 80137ec:	4808      	ldr	r0, [pc, #32]	; (8013810 <HW_IPCC_TRACES_EvtNot+0x30>)
 80137ee:	f000 f938 	bl	8013a62 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f000 f80d 	bl	8013814 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80137fa:	4805      	ldr	r0, [pc, #20]	; (8013810 <HW_IPCC_TRACES_EvtNot+0x30>)
 80137fc:	f000 f8a2 	bl	8013944 <LST_is_empty>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d0f0      	beq.n	80137e8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8013806:	bf00      	nop
}
 8013808:	3708      	adds	r7, #8
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	200300bc 	.word	0x200300bc

08013814 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 801381c:	bf00      	nop
 801381e:	370c      	adds	r7, #12
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8013828:	b480      	push	{r7}
 801382a:	b085      	sub	sp, #20
 801382c:	af00      	add	r7, sp, #0
 801382e:	4603      	mov	r3, r0
 8013830:	6039      	str	r1, [r7, #0]
 8013832:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8013834:	79fb      	ldrb	r3, [r7, #7]
 8013836:	2b06      	cmp	r3, #6
 8013838:	d845      	bhi.n	80138c6 <OutputDbgTrace+0x9e>
 801383a:	a201      	add	r2, pc, #4	; (adr r2, 8013840 <OutputDbgTrace+0x18>)
 801383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013840:	0801385d 	.word	0x0801385d
 8013844:	08013881 	.word	0x08013881
 8013848:	08013887 	.word	0x08013887
 801384c:	0801389b 	.word	0x0801389b
 8013850:	080138a7 	.word	0x080138a7
 8013854:	080138ad 	.word	0x080138ad
 8013858:	080138bb 	.word	0x080138bb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	7a5b      	ldrb	r3, [r3, #9]
 8013864:	2bff      	cmp	r3, #255	; 0xff
 8013866:	d005      	beq.n	8013874 <OutputDbgTrace+0x4c>
 8013868:	2bff      	cmp	r3, #255	; 0xff
 801386a:	dc05      	bgt.n	8013878 <OutputDbgTrace+0x50>
 801386c:	2b0e      	cmp	r3, #14
 801386e:	d005      	beq.n	801387c <OutputDbgTrace+0x54>
 8013870:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8013872:	e001      	b.n	8013878 <OutputDbgTrace+0x50>
          break;
 8013874:	bf00      	nop
 8013876:	e027      	b.n	80138c8 <OutputDbgTrace+0xa0>
          break;
 8013878:	bf00      	nop
 801387a:	e025      	b.n	80138c8 <OutputDbgTrace+0xa0>
          break;
 801387c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801387e:	e023      	b.n	80138c8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8013884:	e020      	b.n	80138c8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	7a5b      	ldrb	r3, [r3, #9]
 801388e:	2b0e      	cmp	r3, #14
 8013890:	d001      	beq.n	8013896 <OutputDbgTrace+0x6e>
 8013892:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8013894:	e000      	b.n	8013898 <OutputDbgTrace+0x70>
          break;
 8013896:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013898:	e016      	b.n	80138c8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	7a5b      	ldrb	r3, [r3, #9]
 80138a2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80138a4:	e010      	b.n	80138c8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80138aa:	e00d      	b.n	80138c8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	7a5b      	ldrb	r3, [r3, #9]
 80138b4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80138b6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80138b8:	e006      	b.n	80138c8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	7a5b      	ldrb	r3, [r3, #9]
 80138c2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80138c4:	e000      	b.n	80138c8 <OutputDbgTrace+0xa0>

    default:
      break;
 80138c6:	bf00      	nop
  }

  return;
 80138c8:	bf00      	nop
}
 80138ca:	3714      	adds	r7, #20
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80138d4:	b480      	push	{r7}
 80138d6:	b085      	sub	sp, #20
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80138de:	4b0f      	ldr	r3, [pc, #60]	; (801391c <OTP_Read+0x48>)
 80138e0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80138e2:	e002      	b.n	80138ea <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	3b08      	subs	r3, #8
 80138e8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	3307      	adds	r3, #7
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	79fa      	ldrb	r2, [r7, #7]
 80138f2:	429a      	cmp	r2, r3
 80138f4:	d003      	beq.n	80138fe <OTP_Read+0x2a>
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	4a09      	ldr	r2, [pc, #36]	; (8013920 <OTP_Read+0x4c>)
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d1f2      	bne.n	80138e4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	3307      	adds	r3, #7
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	79fa      	ldrb	r2, [r7, #7]
 8013906:	429a      	cmp	r2, r3
 8013908:	d001      	beq.n	801390e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 801390a:	2300      	movs	r3, #0
 801390c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801390e:	68fb      	ldr	r3, [r7, #12]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3714      	adds	r7, #20
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr
 801391c:	1fff73f8 	.word	0x1fff73f8
 8013920:	1fff7000 	.word	0x1fff7000

08013924 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8013924:	b480      	push	{r7}
 8013926:	b083      	sub	sp, #12
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	605a      	str	r2, [r3, #4]
}
 8013938:	bf00      	nop
 801393a:	370c      	adds	r7, #12
 801393c:	46bd      	mov	sp, r7
 801393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013942:	4770      	bx	lr

08013944 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8013944:	b480      	push	{r7}
 8013946:	b087      	sub	sp, #28
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801394c:	f3ef 8310 	mrs	r3, PRIMASK
 8013950:	60fb      	str	r3, [r7, #12]
  return(result);
 8013952:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013956:	b672      	cpsid	i
}
 8013958:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	429a      	cmp	r2, r3
 8013962:	d102      	bne.n	801396a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8013964:	2301      	movs	r3, #1
 8013966:	75fb      	strb	r3, [r7, #23]
 8013968:	e001      	b.n	801396e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801396a:	2300      	movs	r3, #0
 801396c:	75fb      	strb	r3, [r7, #23]
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	f383 8810 	msr	PRIMASK, r3
}
 8013978:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801397a:	7dfb      	ldrb	r3, [r7, #23]
}
 801397c:	4618      	mov	r0, r3
 801397e:	371c      	adds	r7, #28
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr

08013988 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8013988:	b480      	push	{r7}
 801398a:	b087      	sub	sp, #28
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013992:	f3ef 8310 	mrs	r3, PRIMASK
 8013996:	60fb      	str	r3, [r7, #12]
  return(result);
 8013998:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801399a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801399c:	b672      	cpsid	i
}
 801399e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	683a      	ldr	r2, [r7, #0]
 80139b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	605a      	str	r2, [r3, #4]
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	f383 8810 	msr	PRIMASK, r3
}
 80139c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80139c8:	bf00      	nop
 80139ca:	371c      	adds	r7, #28
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b087      	sub	sp, #28
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139de:	f3ef 8310 	mrs	r3, PRIMASK
 80139e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80139e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80139e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80139e8:	b672      	cpsid	i
}
 80139ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	685a      	ldr	r2, [r3, #4]
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	683a      	ldr	r2, [r7, #0]
 80139fe:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	601a      	str	r2, [r3, #0]
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	f383 8810 	msr	PRIMASK, r3
}
 8013a12:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013a14:	bf00      	nop
 8013a16:	371c      	adds	r7, #28
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b087      	sub	sp, #28
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a28:	f3ef 8310 	mrs	r3, PRIMASK
 8013a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a32:	b672      	cpsid	i
}
 8013a34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	685b      	ldr	r3, [r3, #4]
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	6812      	ldr	r2, [r2, #0]
 8013a3e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	6852      	ldr	r2, [r2, #4]
 8013a48:	605a      	str	r2, [r3, #4]
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	f383 8810 	msr	PRIMASK, r3
}
 8013a54:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013a56:	bf00      	nop
 8013a58:	371c      	adds	r7, #28
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr

08013a62 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8013a62:	b580      	push	{r7, lr}
 8013a64:	b086      	sub	sp, #24
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
 8013a6a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8013a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a76:	b672      	cpsid	i
}
 8013a78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7ff ffca 	bl	8013a20 <LST_remove_node>
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	f383 8810 	msr	PRIMASK, r3
}
 8013a96:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8013a98:	bf00      	nop
 8013a9a:	3718      	adds	r7, #24
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {
 8013aa0:	4a03      	ldr	r2, [pc, #12]	; (8013ab0 <_ZN15Adafruit_AS7341C1Ev+0x10>)
 8013aa2:	6002      	str	r2, [r0, #0]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	7102      	strb	r2, [r0, #4]
 8013aa8:	6082      	str	r2, [r0, #8]
 8013aaa:	7302      	strb	r2, [r0, #12]
}
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop
 8013ab0:	0801aab4 	.word	0x0801aab4

08013ab4 <_ZN15Adafruit_AS7341D1Ev>:
Adafruit_AS7341::~Adafruit_AS7341(void) {
	//   if (temp_sensor)
	//     delete temp_sensor;
	//   if (pressure_sensor)
	//     delete pressure_sensor;
}
 8013ab4:	4770      	bx	lr

08013ab6 <_ZN15Adafruit_AS734117writeRegisterByteEhh>:
	} else {
		return false;
	}
}

bool Adafruit_AS7341::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 8013ab6:	b500      	push	{lr}
 8013ab8:	b087      	sub	sp, #28
 8013aba:	f88d 2017 	strb.w	r2, [sp, #23]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, &val, 1, 10)) {
 8013abe:	230a      	movs	r3, #10
 8013ac0:	9302      	str	r3, [sp, #8]
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	9301      	str	r3, [sp, #4]
 8013ac6:	f10d 0217 	add.w	r2, sp, #23
 8013aca:	9200      	str	r2, [sp, #0]
 8013acc:	460a      	mov	r2, r1
 8013ace:	7b01      	ldrb	r1, [r0, #12]
 8013ad0:	6880      	ldr	r0, [r0, #8]
 8013ad2:	f7f2 f83b 	bl	8005b4c <HAL_I2C_Mem_Write>
	if (HAL_OK
 8013ad6:	b918      	cbnz	r0, 8013ae0 <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x2a>
		return true;
 8013ad8:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
 8013ada:	b007      	add	sp, #28
 8013adc:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	e7fa      	b.n	8013ada <_ZN15Adafruit_AS734117writeRegisterByteEhh+0x24>

08013ae4 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>:

uint8_t Adafruit_AS7341::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
	uint8_t mask = 1 << pos;
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	4098      	lsls	r0, r3
	return ((var & ~mask) | (value << pos));
 8013ae8:	ea21 0100 	bic.w	r1, r1, r0
 8013aec:	b249      	sxtb	r1, r1
 8013aee:	fa02 f303 	lsl.w	r3, r2, r3
 8013af2:	4319      	orrs	r1, r3
}
 8013af4:	b2c8      	uxtb	r0, r1
 8013af6:	4770      	bx	lr

08013af8 <_ZN15Adafruit_AS734116readRegisterByteEt>:
	register_value |= value << pos; // and add in the new data

	return writeRegisterByte(reg, register_value);
}

uint8_t Adafruit_AS7341::readRegisterByte(uint16_t mem_addr) {
 8013af8:	b500      	push	{lr}
 8013afa:	b087      	sub	sp, #28
 8013afc:	460a      	mov	r2, r1
	uint8_t data;
	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
 8013afe:	230a      	movs	r3, #10
 8013b00:	9302      	str	r3, [sp, #8]
 8013b02:	2301      	movs	r3, #1
 8013b04:	9301      	str	r3, [sp, #4]
 8013b06:	f10d 0117 	add.w	r1, sp, #23
 8013b0a:	9100      	str	r1, [sp, #0]
 8013b0c:	7b01      	ldrb	r1, [r0, #12]
 8013b0e:	6880      	ldr	r0, [r0, #8]
 8013b10:	f7f2 f930 	bl	8005d74 <HAL_I2C_Mem_Read>
	return data;
}
 8013b14:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8013b18:	b007      	add	sp, #28
 8013b1a:	f85d fb04 	ldr.w	pc, [sp], #4

08013b1e <_ZN15Adafruit_AS734111powerEnableEb>:
void Adafruit_AS7341::powerEnable(bool enable_power) {
 8013b1e:	b538      	push	{r3, r4, r5, lr}
 8013b20:	4604      	mov	r4, r0
 8013b22:	460d      	mov	r5, r1
	uint8_t enable_reg = readRegisterByte(AS7341_ENABLE);
 8013b24:	2180      	movs	r1, #128	; 0x80
 8013b26:	f7ff ffe7 	bl	8013af8 <_ZN15Adafruit_AS734116readRegisterByteEt>
 8013b2a:	4601      	mov	r1, r0
	enable_reg = modifyBitInByte(enable_reg, (uint8_t) enable_power, 0);
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	462a      	mov	r2, r5
 8013b30:	4620      	mov	r0, r4
 8013b32:	f7ff ffd7 	bl	8013ae4 <_ZN15Adafruit_AS734115modifyBitInByteEhhh>
 8013b36:	4602      	mov	r2, r0
	writeRegisterByte(AS7341_ENABLE, enable_reg);
 8013b38:	2180      	movs	r1, #128	; 0x80
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f7ff ffbb 	bl	8013ab6 <_ZN15Adafruit_AS734117writeRegisterByteEhh>
}
 8013b40:	bd38      	pop	{r3, r4, r5, pc}

08013b42 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
 8013b42:	b510      	push	{r4, lr}
 8013b44:	4604      	mov	r4, r0
	if ((readRegisterByte(AS7341_WHOAMI) & 0xFC) != (AS7341_CHIP_ID << 2)) {
 8013b46:	2192      	movs	r1, #146	; 0x92
 8013b48:	f7ff ffd6 	bl	8013af8 <_ZN15Adafruit_AS734116readRegisterByteEt>
 8013b4c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8013b50:	2b24      	cmp	r3, #36	; 0x24
 8013b52:	d001      	beq.n	8013b58 <_ZN15Adafruit_AS73415_initEl+0x16>
		return false;
 8013b54:	2000      	movs	r0, #0
}
 8013b56:	bd10      	pop	{r4, pc}
	powerEnable(true);
 8013b58:	2101      	movs	r1, #1
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	f7ff ffdf 	bl	8013b1e <_ZN15Adafruit_AS734111powerEnableEb>
	return true;
 8013b60:	2001      	movs	r0, #1
 8013b62:	e7f8      	b.n	8013b56 <_ZN15Adafruit_AS73415_initEl+0x14>

08013b64 <_ZN15Adafruit_BME680C1Ev>:
 *  @brief  Instantiates sensor with i2c.
 *  @param  *theWire
 *          optional Wire object
 */
Adafruit_BME680::Adafruit_BME680(void)
    : _meas_start(0), _meas_period(0) {
 8013b64:	2200      	movs	r2, #0
 8013b66:	f8c0 2160 	str.w	r2, [r0, #352]	; 0x160
 8013b6a:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
 8013b6e:	f8c0 2174 	str.w	r2, [r0, #372]	; 0x174
 8013b72:	f8a0 2178 	strh.w	r2, [r0, #376]	; 0x178
}
 8013b76:	4770      	bx	lr

08013b78 <_ZN17Adafruit_ICM2094811scaleValuesEv>:

bool Adafruit_ICM20948::writeMagRegister(uint8_t mag_reg_addr, uint8_t value) {
	return writeExternalRegister(0x0C, mag_reg_addr, value);
}

void Adafruit_ICM20948::scaleValues(void) {
 8013b78:	b510      	push	{r4, lr}
 8013b7a:	4604      	mov	r4, r0

	icm20948_gyro_range_t gyro_range = (icm20948_gyro_range_t) current_gyro_range;
 8013b7c:	f242 0375 	movw	r3, #8309	; 0x2075
 8013b80:	5cc2      	ldrb	r2, [r0, r3]
	icm20948_accel_range_t accel_range =
 8013b82:	f242 0374 	movw	r3, #8308	; 0x2074
 8013b86:	5cc3      	ldrb	r3, [r0, r3]
			(icm20948_accel_range_t) current_accel_range;

	float accel_scale = 1.0;
	float gyro_scale = 1.0;

	if (gyro_range == ICM20948_GYRO_RANGE_250_DPS)
 8013b88:	2a00      	cmp	r2, #0
 8013b8a:	f000 8095 	beq.w	8013cb8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x140>
	float gyro_scale = 1.0;
 8013b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		gyro_scale = 131.0;
	if (gyro_range == ICM20948_GYRO_RANGE_500_DPS)
 8013b92:	2a01      	cmp	r2, #1
 8013b94:	f000 8093 	beq.w	8013cbe <_ZN17Adafruit_ICM2094811scaleValuesEv+0x146>
		gyro_scale = 65.5;
	if (gyro_range == ICM20948_GYRO_RANGE_1000_DPS)
 8013b98:	2a02      	cmp	r2, #2
 8013b9a:	f000 8093 	beq.w	8013cc4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x14c>
		gyro_scale = 32.8;
	if (gyro_range == ICM20948_GYRO_RANGE_2000_DPS)
 8013b9e:	2a03      	cmp	r2, #3
 8013ba0:	f000 8093 	beq.w	8013cca <_ZN17Adafruit_ICM2094811scaleValuesEv+0x152>
		gyro_scale = 16.4;

	if (accel_range == ICM20948_ACCEL_RANGE_2_G)
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f000 8093 	beq.w	8013cd0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x158>
	float accel_scale = 1.0;
 8013baa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		accel_scale = 16384.0;
	if (accel_range == ICM20948_ACCEL_RANGE_4_G)
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	f000 8091 	beq.w	8013cd6 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x15e>
		accel_scale = 8192.0;
	if (accel_range == ICM20948_ACCEL_RANGE_8_G)
 8013bb4:	2b02      	cmp	r3, #2
 8013bb6:	f000 8091 	beq.w	8013cdc <_ZN17Adafruit_ICM2094811scaleValuesEv+0x164>
		accel_scale = 4096.0;
	if (accel_range == ICM20948_ACCEL_RANGE_16_G)
 8013bba:	2b03      	cmp	r3, #3
 8013bbc:	f000 8091 	beq.w	8013ce2 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x16a>
		accel_scale = 2048.0;

	gyroX = rawGyroX / gyro_scale;
 8013bc0:	f242 0368 	movw	r3, #8296	; 0x2068
 8013bc4:	5ee3      	ldrsh	r3, [r4, r3]
 8013bc6:	ee06 3a90 	vmov	s13, r3
 8013bca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013bce:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8013bd2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013bd6:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
	gyroY = rawGyroY / gyro_scale;
 8013bda:	f242 036a 	movw	r3, #8298	; 0x206a
 8013bde:	5ee3      	ldrsh	r3, [r4, r3]
 8013be0:	ee06 3a90 	vmov	s13, r3
 8013be4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013be8:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8013bec:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013bf0:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
	gyroZ = rawGyroZ / gyro_scale;
 8013bf4:	f242 036c 	movw	r3, #8300	; 0x206c
 8013bf8:	5ee3      	ldrsh	r3, [r4, r3]
 8013bfa:	ee06 3a90 	vmov	s13, r3
 8013bfe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013c02:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8013c06:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013c0a:	ed83 6a0c 	vstr	s12, [r3, #48]	; 0x30

	accX = rawAccX / accel_scale;
 8013c0e:	f242 0360 	movw	r3, #8288	; 0x2060
 8013c12:	5ee3      	ldrsh	r3, [r4, r3]
 8013c14:	ee07 3a10 	vmov	s14, r3
 8013c18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013c20:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013c24:	edc3 6a07 	vstr	s13, [r3, #28]
	accY = rawAccY / accel_scale;
 8013c28:	f242 0362 	movw	r3, #8290	; 0x2062
 8013c2c:	5ee3      	ldrsh	r3, [r4, r3]
 8013c2e:	ee07 3a10 	vmov	s14, r3
 8013c32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013c3a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013c3e:	edc3 6a08 	vstr	s13, [r3, #32]
	accZ = rawAccZ / accel_scale;
 8013c42:	f242 0364 	movw	r3, #8292	; 0x2064
 8013c46:	5ee3      	ldrsh	r3, [r4, r3]
 8013c48:	ee07 3a10 	vmov	s14, r3
 8013c4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013c54:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013c58:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24

	magX = rawMagX * ICM20948_UT_PER_LSB;
 8013c5c:	f242 036e 	movw	r3, #8302	; 0x206e
 8013c60:	5ee0      	ldrsh	r0, [r4, r3]
 8013c62:	f7ec fbe7 	bl	8000434 <__aeabi_i2d>
 8013c66:	a328      	add	r3, pc, #160	; (adr r3, 8013d08 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x190>)
 8013c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6c:	f7ec fc4c 	bl	8000508 <__aeabi_dmul>
 8013c70:	f7ec fe5c 	bl	800092c <__aeabi_d2f>
 8013c74:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013c78:	6358      	str	r0, [r3, #52]	; 0x34
	magY = rawMagY * ICM20948_UT_PER_LSB;
 8013c7a:	f242 0370 	movw	r3, #8304	; 0x2070
 8013c7e:	5ee0      	ldrsh	r0, [r4, r3]
 8013c80:	f7ec fbd8 	bl	8000434 <__aeabi_i2d>
 8013c84:	a320      	add	r3, pc, #128	; (adr r3, 8013d08 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x190>)
 8013c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8a:	f7ec fc3d 	bl	8000508 <__aeabi_dmul>
 8013c8e:	f7ec fe4d 	bl	800092c <__aeabi_d2f>
 8013c92:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8013c96:	6398      	str	r0, [r3, #56]	; 0x38
	magZ = rawMagZ * ICM20948_UT_PER_LSB;
 8013c98:	f242 0372 	movw	r3, #8306	; 0x2072
 8013c9c:	5ee0      	ldrsh	r0, [r4, r3]
 8013c9e:	f7ec fbc9 	bl	8000434 <__aeabi_i2d>
 8013ca2:	a319      	add	r3, pc, #100	; (adr r3, 8013d08 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x190>)
 8013ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca8:	f7ec fc2e 	bl	8000508 <__aeabi_dmul>
 8013cac:	f7ec fe3e 	bl	800092c <__aeabi_d2f>
 8013cb0:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8013cb4:	63e0      	str	r0, [r4, #60]	; 0x3c
}
 8013cb6:	bd10      	pop	{r4, pc}
		gyro_scale = 131.0;
 8013cb8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013ce8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x170>
 8013cbc:	e769      	b.n	8013b92 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a>
		gyro_scale = 65.5;
 8013cbe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013cec <_ZN17Adafruit_ICM2094811scaleValuesEv+0x174>
 8013cc2:	e769      	b.n	8013b98 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x20>
		gyro_scale = 32.8;
 8013cc4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013cf0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x178>
 8013cc8:	e769      	b.n	8013b9e <_ZN17Adafruit_ICM2094811scaleValuesEv+0x26>
		gyro_scale = 16.4;
 8013cca:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013cf4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x17c>
 8013cce:	e769      	b.n	8013ba4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x2c>
		accel_scale = 16384.0;
 8013cd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013cf8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x180>
 8013cd4:	e76b      	b.n	8013bae <_ZN17Adafruit_ICM2094811scaleValuesEv+0x36>
		accel_scale = 8192.0;
 8013cd6:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013cfc <_ZN17Adafruit_ICM2094811scaleValuesEv+0x184>
 8013cda:	e76b      	b.n	8013bb4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x3c>
		accel_scale = 4096.0;
 8013cdc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013d00 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x188>
 8013ce0:	e76b      	b.n	8013bba <_ZN17Adafruit_ICM2094811scaleValuesEv+0x42>
		accel_scale = 2048.0;
 8013ce2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013d04 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x18c>
 8013ce6:	e76b      	b.n	8013bc0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x48>
 8013ce8:	43030000 	.word	0x43030000
 8013cec:	42830000 	.word	0x42830000
 8013cf0:	42033333 	.word	0x42033333
 8013cf4:	41833333 	.word	0x41833333
 8013cf8:	46800000 	.word	0x46800000
 8013cfc:	46000000 	.word	0x46000000
 8013d00:	45800000 	.word	0x45800000
 8013d04:	45000000 	.word	0x45000000
 8013d08:	33333333 	.word	0x33333333
 8013d0c:	3fc33333 	.word	0x3fc33333

08013d10 <_ZN17Adafruit_ICM209489begin_I2CEhP19__I2C_HandleTypeDefl>:
bool Adafruit_ICM20948::begin_I2C(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, int32_t sensor_id) {
 8013d10:	b538      	push	{r3, r4, r5, lr}
	i2c_han = &hi2c3;
 8013d12:	f500 5401 	add.w	r4, r0, #8256	; 0x2040
 8013d16:	4d05      	ldr	r5, [pc, #20]	; (8013d2c <_ZN17Adafruit_ICM209489begin_I2CEhP19__I2C_HandleTypeDefl+0x1c>)
 8013d18:	6025      	str	r5, [r4, #0]
	i2c_addr = i2c_address << 1;
 8013d1a:	004c      	lsls	r4, r1, #1
 8013d1c:	f242 0144 	movw	r1, #8260	; 0x2044
 8013d20:	5444      	strb	r4, [r0, r1]
	bool init_success = _init(sensor_id);
 8013d22:	4619      	mov	r1, r3
 8013d24:	f000 fa21 	bl	801416a <_ZN15Adafruit_ICM20X5_initEl>
}
 8013d28:	bd38      	pop	{r3, r4, r5, pc}
 8013d2a:	bf00      	nop
 8013d2c:	20009d84 	.word	0x20009d84

08013d30 <_ZN17Adafruit_ICM20948C1Ev>:
Adafruit_ICM20948::Adafruit_ICM20948(void) {
 8013d30:	b510      	push	{r4, lr}
 8013d32:	4604      	mov	r4, r0
 8013d34:	f000 f80a 	bl	8013d4c <_ZN15Adafruit_ICM20XC1Ev>
 8013d38:	4b01      	ldr	r3, [pc, #4]	; (8013d40 <_ZN17Adafruit_ICM20948C1Ev+0x10>)
 8013d3a:	6023      	str	r3, [r4, #0]
}
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	bd10      	pop	{r4, pc}
 8013d40:	0801aac0 	.word	0x0801aac0

08013d44 <_ZN15Adafruit_ICM20X9begin_I2CEhP19__I2C_HandleTypeDefl>:
		int32_t sensor_id) {
	(void) i2c_addr;
	(void) i2c_handle;
	(void) sensor_id;
	return false;
}
 8013d44:	2000      	movs	r0, #0
 8013d46:	4770      	bx	lr

08013d48 <_ZN15Adafruit_ICM20X11scaleValuesEv>:
/*!
 * @brief Scales the raw variables based on the current measurement range
 *
 */
void Adafruit_ICM20X::scaleValues(void) {
}
 8013d48:	4770      	bx	lr
	...

08013d4c <_ZN15Adafruit_ICM20XC1Ev>:
Adafruit_ICM20X::Adafruit_ICM20X(void) {
 8013d4c:	b538      	push	{r3, r4, r5, lr}
 8013d4e:	4604      	mov	r4, r0
 8013d50:	4b12      	ldr	r3, [pc, #72]	; (8013d9c <_ZN15Adafruit_ICM20XC1Ev+0x50>)
 8013d52:	f840 3b04 	str.w	r3, [r0], #4
 8013d56:	f241 0501 	movw	r5, #4097	; 0x1001
 8013d5a:	462a      	mov	r2, r5
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	f006 faef 	bl	801a340 <memset>
 8013d62:	462a      	mov	r2, r5
 8013d64:	2100      	movs	r1, #0
 8013d66:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8013d6a:	3005      	adds	r0, #5
 8013d6c:	f006 fae8 	bl	801a340 <memset>
 8013d70:	f504 5201 	add.w	r2, r4, #8256	; 0x2040
 8013d74:	2300      	movs	r3, #0
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	f242 0244 	movw	r2, #8260	; 0x2044
 8013d7c:	54a3      	strb	r3, [r4, r2]
 8013d7e:	f242 0248 	movw	r2, #8264	; 0x2048
 8013d82:	50a3      	str	r3, [r4, r2]
 8013d84:	f242 024c 	movw	r2, #8268	; 0x204c
 8013d88:	50a3      	str	r3, [r4, r2]
 8013d8a:	f242 0250 	movw	r2, #8272	; 0x2050
 8013d8e:	50a3      	str	r3, [r4, r2]
 8013d90:	f242 0254 	movw	r2, #8276	; 0x2054
 8013d94:	50a3      	str	r3, [r4, r2]
}
 8013d96:	4620      	mov	r0, r4
 8013d98:	bd38      	pop	{r3, r4, r5, pc}
 8013d9a:	bf00      	nop
 8013d9c:	0801aad0 	.word	0x0801aad0

08013da0 <_ZN15Adafruit_ICM20XD1Ev>:
Adafruit_ICM20X::~Adafruit_ICM20X(void) {
 8013da0:	b510      	push	{r4, lr}
 8013da2:	4604      	mov	r4, r0
 8013da4:	4b0f      	ldr	r3, [pc, #60]	; (8013de4 <_ZN15Adafruit_ICM20XD1Ev+0x44>)
 8013da6:	6003      	str	r3, [r0, #0]
	if (accel_sensor)
 8013da8:	f242 0348 	movw	r3, #8264	; 0x2048
 8013dac:	58c0      	ldr	r0, [r0, r3]
 8013dae:	b110      	cbz	r0, 8013db6 <_ZN15Adafruit_ICM20XD1Ev+0x16>
		delete accel_sensor;
 8013db0:	6803      	ldr	r3, [r0, #0]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	4798      	blx	r3
	if (gyro_sensor)
 8013db6:	f242 034c 	movw	r3, #8268	; 0x204c
 8013dba:	58e0      	ldr	r0, [r4, r3]
 8013dbc:	b110      	cbz	r0, 8013dc4 <_ZN15Adafruit_ICM20XD1Ev+0x24>
		delete gyro_sensor;
 8013dbe:	6803      	ldr	r3, [r0, #0]
 8013dc0:	685b      	ldr	r3, [r3, #4]
 8013dc2:	4798      	blx	r3
	if (mag_sensor)
 8013dc4:	f242 0350 	movw	r3, #8272	; 0x2050
 8013dc8:	58e0      	ldr	r0, [r4, r3]
 8013dca:	b110      	cbz	r0, 8013dd2 <_ZN15Adafruit_ICM20XD1Ev+0x32>
		delete mag_sensor;
 8013dcc:	6803      	ldr	r3, [r0, #0]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	4798      	blx	r3
	if (temp_sensor)
 8013dd2:	f242 0354 	movw	r3, #8276	; 0x2054
 8013dd6:	58e0      	ldr	r0, [r4, r3]
 8013dd8:	b110      	cbz	r0, 8013de0 <_ZN15Adafruit_ICM20XD1Ev+0x40>
		delete temp_sensor;
 8013dda:	6803      	ldr	r3, [r0, #0]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	4798      	blx	r3
}
 8013de0:	4620      	mov	r0, r4
 8013de2:	bd10      	pop	{r4, pc}
 8013de4:	0801aad0 	.word	0x0801aad0

08013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>:
void Adafruit_ICM20X::cs_active(bool state) {
 8013de8:	b508      	push	{r3, lr}
	if (state) {
 8013dea:	b149      	cbz	r1, 8013e00 <_ZN15Adafruit_ICM20X9cs_activeEb+0x18>
		HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8013dec:	2200      	movs	r2, #0
 8013dee:	f242 0314 	movw	r3, #8212	; 0x2014
 8013df2:	5ac1      	ldrh	r1, [r0, r3]
 8013df4:	f242 0310 	movw	r3, #8208	; 0x2010
 8013df8:	58c0      	ldr	r0, [r0, r3]
 8013dfa:	f7f1 fdc3 	bl	8005984 <HAL_GPIO_WritePin>
}
 8013dfe:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8013e00:	2201      	movs	r2, #1
 8013e02:	f242 0314 	movw	r3, #8212	; 0x2014
 8013e06:	5ac1      	ldrh	r1, [r0, r3]
 8013e08:	f242 0310 	movw	r3, #8208	; 0x2010
 8013e0c:	58c0      	ldr	r0, [r0, r3]
 8013e0e:	f7f1 fdb9 	bl	8005984 <HAL_GPIO_WritePin>
}
 8013e12:	e7f4      	b.n	8013dfe <_ZN15Adafruit_ICM20X9cs_activeEb+0x16>

08013e14 <_ZN15Adafruit_ICM20X16readRegisterByteEt>:
		cs_active(false);
		return false;
	}
}

uint8_t Adafruit_ICM20X::readRegisterByte(uint16_t mem_addr) {
 8013e14:	b510      	push	{r4, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	4604      	mov	r4, r0
//	uint8_t tx_data[2];
//	uint8_t rx_data[2];
	tx_data[0] = (mem_addr & 0x7F) | 0x80;
 8013e1a:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8013e1e:	7101      	strb	r1, [r0, #4]
	tx_data[1] = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	7143      	strb	r3, [r0, #5]

	HAL_StatusTypeDef test;
	cs_active(true);
 8013e24:	2101      	movs	r1, #1
 8013e26:	f7ff ffdf 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>

	test = HAL_SPI_TransmitReceive(spi_han, tx_data, rx_data, 2, 100);
 8013e2a:	2364      	movs	r3, #100	; 0x64
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	2302      	movs	r3, #2
 8013e30:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8013e34:	3205      	adds	r2, #5
 8013e36:	1d21      	adds	r1, r4, #4
 8013e38:	f242 000c 	movw	r0, #8204	; 0x200c
 8013e3c:	5820      	ldr	r0, [r4, r0]
 8013e3e:	f7f7 ffda 	bl	800bdf6 <HAL_SPI_TransmitReceive>

	if (HAL_OK == test) {
 8013e42:	b940      	cbnz	r0, 8013e56 <_ZN15Adafruit_ICM20X16readRegisterByteEt+0x42>
		cs_active(false);
 8013e44:	2100      	movs	r1, #0
 8013e46:	4620      	mov	r0, r4
 8013e48:	f7ff ffce 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
		return rx_data[1];
 8013e4c:	f241 0306 	movw	r3, #4102	; 0x1006
 8013e50:	5ce0      	ldrb	r0, [r4, r3]
	} else {
		cs_active(false);
		return 0;
	}
}
 8013e52:	b002      	add	sp, #8
 8013e54:	bd10      	pop	{r4, pc}
		cs_active(false);
 8013e56:	2100      	movs	r1, #0
 8013e58:	4620      	mov	r0, r4
 8013e5a:	f7ff ffc5 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
		return 0;
 8013e5e:	2000      	movs	r0, #0
 8013e60:	e7f7      	b.n	8013e52 <_ZN15Adafruit_ICM20X16readRegisterByteEt+0x3e>

08013e62 <_ZN15Adafruit_ICM20X13writeRegisterEhPht>:

bool Adafruit_ICM20X::writeRegister(uint8_t mem_addr, uint8_t *val,
		uint16_t size) {
 8013e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	4605      	mov	r5, r0
 8013e6a:	4614      	mov	r4, r2
 8013e6c:	461e      	mov	r6, r3

	uint8_t data[1 + size];
 8013e6e:	3308      	adds	r3, #8
 8013e70:	08db      	lsrs	r3, r3, #3
 8013e72:	466a      	mov	r2, sp
 8013e74:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8013e78:	469d      	mov	sp, r3
 8013e7a:	46e8      	mov	r8, sp
	data[0] = (mem_addr & 0x7F) | 0x00;
 8013e7c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013e80:	4668      	mov	r0, sp
 8013e82:	f800 3b01 	strb.w	r3, [r0], #1
	uint8_t error = 0;
	memcpy(&data[1], val, size);
 8013e86:	4632      	mov	r2, r6
 8013e88:	4621      	mov	r1, r4
 8013e8a:	f006 fa4b 	bl	801a324 <memcpy>
	cs_active(true);
 8013e8e:	2101      	movs	r1, #1
 8013e90:	4628      	mov	r0, r5
 8013e92:	f7ff ffa9 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>

	cs_active(true);
 8013e96:	2101      	movs	r1, #1
 8013e98:	4628      	mov	r0, r5
 8013e9a:	f7ff ffa5 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
	uint8_t error = 0;
 8013e9e:	2400      	movs	r4, #0
	while (HAL_OK != HAL_SPI_Transmit(spi_han, data, 1 + size, 10)) {
 8013ea0:	1c72      	adds	r2, r6, #1
 8013ea2:	230a      	movs	r3, #10
 8013ea4:	b292      	uxth	r2, r2
 8013ea6:	4641      	mov	r1, r8
 8013ea8:	f242 000c 	movw	r0, #8204	; 0x200c
 8013eac:	5828      	ldr	r0, [r5, r0]
 8013eae:	f7f7 fe34 	bl	800bb1a <HAL_SPI_Transmit>
 8013eb2:	b158      	cbz	r0, 8013ecc <_ZN15Adafruit_ICM20X13writeRegisterEhPht+0x6a>
		error++;
 8013eb4:	3401      	adds	r4, #1
 8013eb6:	b2e4      	uxtb	r4, r4
		if(error > 5){
 8013eb8:	2c05      	cmp	r4, #5
 8013eba:	d9f1      	bls.n	8013ea0 <_ZN15Adafruit_ICM20X13writeRegisterEhPht+0x3e>
			cs_active(false);
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	f7ff ff92 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
			return false;
 8013ec4:	2000      	movs	r0, #0
//		return true;
//	} else {
//		cs_active(false);
//		return false;
//	}
}
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	cs_active(false);
 8013ecc:	2100      	movs	r1, #0
 8013ece:	4628      	mov	r0, r5
 8013ed0:	f7ff ff8a 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
	return true;
 8013ed4:	2001      	movs	r0, #1
 8013ed6:	e7f6      	b.n	8013ec6 <_ZN15Adafruit_ICM20X13writeRegisterEhPht+0x64>

08013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>:

bool Adafruit_ICM20X::writeRegisterByte(uint8_t mem_addr, uint8_t val) {
 8013ed8:	b570      	push	{r4, r5, r6, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	4606      	mov	r6, r0
	uint8_t data[2];
	data[0] = (mem_addr & 0x7F) | 0x00;
 8013ede:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8013ee2:	f88d 1004 	strb.w	r1, [sp, #4]
	data[1] = val;
 8013ee6:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t error = 0;

	cs_active(true);
 8013eea:	2101      	movs	r1, #1
 8013eec:	f7ff ff7c 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
	uint8_t error = 0;
 8013ef0:	2400      	movs	r4, #0
	while (HAL_OK != HAL_SPI_Transmit(spi_han, data, 2, 10)) {
 8013ef2:	230a      	movs	r3, #10
 8013ef4:	2202      	movs	r2, #2
 8013ef6:	a901      	add	r1, sp, #4
 8013ef8:	f242 050c 	movw	r5, #8204	; 0x200c
 8013efc:	5970      	ldr	r0, [r6, r5]
 8013efe:	f7f7 fe0c 	bl	800bb1a <HAL_SPI_Transmit>
 8013f02:	b150      	cbz	r0, 8013f1a <_ZN15Adafruit_ICM20X17writeRegisterByteEhh+0x42>
		error++;
 8013f04:	3401      	adds	r4, #1
 8013f06:	b2e4      	uxtb	r4, r4
		if(error > 5){
 8013f08:	2c05      	cmp	r4, #5
 8013f0a:	d9f2      	bls.n	8013ef2 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh+0x1a>
			cs_active(false);
 8013f0c:	2100      	movs	r1, #0
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f7ff ff6a 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
			return false;
 8013f14:	2000      	movs	r0, #0
//		return true;
//	} else {
//		cs_active(false);
//		return false;
//	}
}
 8013f16:	b002      	add	sp, #8
 8013f18:	bd70      	pop	{r4, r5, r6, pc}
	cs_active(false);
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f7ff ff63 	bl	8013de8 <_ZN15Adafruit_ICM20X9cs_activeEb>
	return true;
 8013f22:	2001      	movs	r0, #1
 8013f24:	e7f7      	b.n	8013f16 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh+0x3e>

08013f26 <_ZN15Adafruit_ICM20X8_setBankEh>:
void Adafruit_ICM20X::_setBank(uint8_t bank_number) {
 8013f26:	b508      	push	{r3, lr}
	writeRegisterByte(ICM20X_B0_REG_BANK_SEL, (bank_number << 4) & 0x30);
 8013f28:	010a      	lsls	r2, r1, #4
 8013f2a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8013f2e:	217f      	movs	r1, #127	; 0x7f
 8013f30:	f7ff ffd2 	bl	8013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
}
 8013f34:	bd08      	pop	{r3, pc}

08013f36 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>:
void Adafruit_ICM20X::setAccelRateDivisor(uint16_t new_accel_divisor) {
 8013f36:	b530      	push	{r4, r5, lr}
 8013f38:	b083      	sub	sp, #12
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	460d      	mov	r5, r1
	_setBank(2);
 8013f3e:	2102      	movs	r1, #2
 8013f40:	f7ff fff1 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	data[0] = new_accel_divisor >> 8;
 8013f44:	122b      	asrs	r3, r5, #8
 8013f46:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = new_accel_divisor & 0xFF;
 8013f4a:	f88d 5005 	strb.w	r5, [sp, #5]
	writeRegister(ICM20X_B2_ACCEL_SMPLRT_DIV_1, data,
 8013f4e:	2302      	movs	r3, #2
 8013f50:	aa01      	add	r2, sp, #4
 8013f52:	2110      	movs	r1, #16
 8013f54:	4620      	mov	r0, r4
 8013f56:	f7ff ff84 	bl	8013e62 <_ZN15Adafruit_ICM20X13writeRegisterEhPht>
	_setBank(0);
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f7ff ffe2 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8013f62:	b003      	add	sp, #12
 8013f64:	bd30      	pop	{r4, r5, pc}

08013f66 <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>:
void Adafruit_ICM20X::setGyroRateDivisor(uint8_t new_gyro_divisor) {
 8013f66:	b538      	push	{r3, r4, r5, lr}
 8013f68:	4604      	mov	r4, r0
 8013f6a:	460d      	mov	r5, r1
	_setBank(2);
 8013f6c:	2102      	movs	r1, #2
 8013f6e:	f7ff ffda 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	writeRegisterByte(ICM20X_B2_GYRO_SMPLRT_DIV, new_gyro_divisor);
 8013f72:	462a      	mov	r2, r5
 8013f74:	2100      	movs	r1, #0
 8013f76:	4620      	mov	r0, r4
 8013f78:	f7ff ffae 	bl	8013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
	_setBank(0);
 8013f7c:	2100      	movs	r1, #0
 8013f7e:	4620      	mov	r0, r4
 8013f80:	f7ff ffd1 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8013f84:	bd38      	pop	{r3, r4, r5, pc}

08013f86 <_ZN15Adafruit_ICM20X15modifyBitInByteEhhh>:

uint8_t Adafruit_ICM20X::modifyBitInByte(uint8_t var, uint8_t value,
		uint8_t pos) {
	uint8_t mask = 1 << pos;
 8013f86:	2001      	movs	r0, #1
 8013f88:	4098      	lsls	r0, r3
	return ((var & ~mask) | (value << pos));
 8013f8a:	ea21 0100 	bic.w	r1, r1, r0
 8013f8e:	b249      	sxtb	r1, r1
 8013f90:	fa02 f303 	lsl.w	r3, r2, r3
 8013f94:	4319      	orrs	r1, r3
}
 8013f96:	b2c8      	uxtb	r0, r1
 8013f98:	4770      	bx	lr

08013f9a <_ZN15Adafruit_ICM20X16checkRegisterBitEth>:
//	uint8_t data;
//	HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, &data, 1, 10);
//	return data;
//}

uint8_t Adafruit_ICM20X::checkRegisterBit(uint16_t reg, uint8_t pos) {
 8013f9a:	b510      	push	{r4, lr}
 8013f9c:	4614      	mov	r4, r2
	return (uint8_t) ((readRegisterByte(reg) >> pos) & 0x01);
 8013f9e:	f7ff ff39 	bl	8013e14 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
 8013fa2:	4120      	asrs	r0, r4
}
 8013fa4:	f000 0001 	and.w	r0, r0, #1
 8013fa8:	bd10      	pop	{r4, pc}

08013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>:

bool Adafruit_ICM20X::modifyRegisterBit(uint16_t reg, bool value, uint8_t pos) {
 8013faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fac:	4604      	mov	r4, r0
 8013fae:	460d      	mov	r5, r1
 8013fb0:	4616      	mov	r6, r2
 8013fb2:	461f      	mov	r7, r3
	uint8_t register_value = readRegisterByte(reg);
 8013fb4:	f7ff ff2e 	bl	8013e14 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
 8013fb8:	4601      	mov	r1, r0
	register_value = modifyBitInByte(register_value, (uint8_t) value, pos);
 8013fba:	463b      	mov	r3, r7
 8013fbc:	4632      	mov	r2, r6
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f7ff ffe1 	bl	8013f86 <_ZN15Adafruit_ICM20X15modifyBitInByteEhhh>
 8013fc4:	4602      	mov	r2, r0

	return writeRegisterByte(reg, register_value);
 8013fc6:	b2e9      	uxtb	r1, r5
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f7ff ff85 	bl	8013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
}
 8013fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013fd0 <_ZN15Adafruit_ICM20X5resetEv>:
void Adafruit_ICM20X::reset(void) {
 8013fd0:	b510      	push	{r4, lr}
 8013fd2:	4604      	mov	r4, r0
	_setBank(0);
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	f7ff ffa6 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	modifyRegisterBit(ICM20X_B0_PWR_MGMT_1, 1, 7);
 8013fda:	2307      	movs	r3, #7
 8013fdc:	2201      	movs	r2, #1
 8013fde:	2106      	movs	r1, #6
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	f7ff ffe2 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(20);
 8013fe6:	2014      	movs	r0, #20
 8013fe8:	f000 fbc7 	bl	801477a <osDelay>
	while (checkRegisterBit(ICM20X_B0_PWR_MGMT_1, 7)) {
 8013fec:	2207      	movs	r2, #7
 8013fee:	2106      	movs	r1, #6
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	f7ff ffd2 	bl	8013f9a <_ZN15Adafruit_ICM20X16checkRegisterBitEth>
 8013ff6:	b118      	cbz	r0, 8014000 <_ZN15Adafruit_ICM20X5resetEv+0x30>
		delay(10);
 8013ff8:	200a      	movs	r0, #10
 8013ffa:	f000 fbbe 	bl	801477a <osDelay>
	while (checkRegisterBit(ICM20X_B0_PWR_MGMT_1, 7)) {
 8013ffe:	e7f5      	b.n	8013fec <_ZN15Adafruit_ICM20X5resetEv+0x1c>
	delay(50);
 8014000:	2032      	movs	r0, #50	; 0x32
 8014002:	f000 fbba 	bl	801477a <osDelay>
}
 8014006:	bd10      	pop	{r4, pc}

08014008 <_ZN15Adafruit_ICM20X16setInt1ActiveLowEb>:
void Adafruit_ICM20X::setInt1ActiveLow(bool active_low) {
 8014008:	b538      	push	{r3, r4, r5, lr}
 801400a:	4604      	mov	r4, r0
 801400c:	460d      	mov	r5, r1
	_setBank(0);
 801400e:	2100      	movs	r1, #0
 8014010:	f7ff ff89 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, true, 6); //open drain
 8014014:	2306      	movs	r3, #6
 8014016:	2201      	movs	r2, #1
 8014018:	210f      	movs	r1, #15
 801401a:	4620      	mov	r0, r4
 801401c:	f7ff ffc5 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, active_low, 7); //active low
 8014020:	2307      	movs	r3, #7
 8014022:	462a      	mov	r2, r5
 8014024:	210f      	movs	r1, #15
 8014026:	4620      	mov	r0, r4
 8014028:	f7ff ffbf 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
}
 801402c:	bd38      	pop	{r3, r4, r5, pc}

0801402e <_ZN15Adafruit_ICM20X12setInt1LatchEb>:
void Adafruit_ICM20X::setInt1Latch(bool latch) {
 801402e:	b538      	push	{r3, r4, r5, lr}
 8014030:	4604      	mov	r4, r0
 8014032:	460d      	mov	r5, r1
	_setBank(0);
 8014034:	2100      	movs	r1, #0
 8014036:	f7ff ff76 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, latch, 5); //active low
 801403a:	2305      	movs	r3, #5
 801403c:	462a      	mov	r2, r5
 801403e:	210f      	movs	r1, #15
 8014040:	4620      	mov	r0, r4
 8014042:	f7ff ffb2 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
}
 8014046:	bd38      	pop	{r3, r4, r5, pc}

08014048 <_ZN15Adafruit_ICM20X14clearIntOnReadEb>:
void Adafruit_ICM20X::clearIntOnRead(bool enable) {
 8014048:	b538      	push	{r3, r4, r5, lr}
 801404a:	4604      	mov	r4, r0
 801404c:	460d      	mov	r5, r1
	_setBank(0);
 801404e:	2100      	movs	r1, #0
 8014050:	f7ff ff69 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	modifyRegisterBit(ICM20X_B0_REG_INT_PIN_CFG, enable, 4); //active low
 8014054:	2304      	movs	r3, #4
 8014056:	462a      	mov	r2, r5
 8014058:	210f      	movs	r1, #15
 801405a:	4620      	mov	r0, r4
 801405c:	f7ff ffa5 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
}
 8014060:	bd38      	pop	{r3, r4, r5, pc}

08014062 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>:

bool Adafruit_ICM20X::modifyRegisterMultipleBit(uint16_t reg, uint8_t value,
		uint8_t pos, uint8_t bits) {
 8014062:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014066:	4606      	mov	r6, r0
 8014068:	460f      	mov	r7, r1
 801406a:	4691      	mov	r9, r2
 801406c:	4698      	mov	r8, r3

	uint8_t register_value = readRegisterByte(reg);
 801406e:	f7ff fed1 	bl	8013e14 <_ZN15Adafruit_ICM20X16readRegisterByteEt>

	uint8_t mask = (1 << (bits)) - 1;
 8014072:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8014076:	2501      	movs	r5, #1
 8014078:	40a5      	lsls	r5, r4
 801407a:	b2ed      	uxtb	r5, r5
 801407c:	1e6c      	subs	r4, r5, #1
 801407e:	b2e2      	uxtb	r2, r4
	value &= mask;
 8014080:	ea04 0409 	and.w	r4, r4, r9

	mask <<= pos;
 8014084:	fa02 f208 	lsl.w	r2, r2, r8
	register_value &= ~mask;          // remove the current data at that spot
 8014088:	ea20 0202 	bic.w	r2, r0, r2
 801408c:	b252      	sxtb	r2, r2
	register_value |= value << pos; // and add in the new data
 801408e:	fa04 f408 	lsl.w	r4, r4, r8
 8014092:	4322      	orrs	r2, r4

	return writeRegisterByte(reg, register_value);
 8014094:	b2d2      	uxtb	r2, r2
 8014096:	b2f9      	uxtb	r1, r7
 8014098:	4630      	mov	r0, r6
 801409a:	f7ff ff1d 	bl	8013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
}
 801409e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080140a2 <_ZN15Adafruit_ICM20X15writeAccelRangeEh>:
void Adafruit_ICM20X::writeAccelRange(uint8_t new_accel_range) {
 80140a2:	b530      	push	{r4, r5, lr}
 80140a4:	b083      	sub	sp, #12
 80140a6:	4604      	mov	r4, r0
 80140a8:	460d      	mov	r5, r1
	_setBank(2);
 80140aa:	2102      	movs	r1, #2
 80140ac:	f7ff ff3b 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	modifyRegisterMultipleBit(ICM20X_B2_ACCEL_CONFIG_1, new_accel_range, 1, 2);
 80140b0:	2302      	movs	r3, #2
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	2301      	movs	r3, #1
 80140b6:	462a      	mov	r2, r5
 80140b8:	2114      	movs	r1, #20
 80140ba:	4620      	mov	r0, r4
 80140bc:	f7ff ffd1 	bl	8014062 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
	current_accel_range = new_accel_range;
 80140c0:	f242 0374 	movw	r3, #8308	; 0x2074
 80140c4:	54e5      	strb	r5, [r4, r3]
	_setBank(0);
 80140c6:	2100      	movs	r1, #0
 80140c8:	4620      	mov	r0, r4
 80140ca:	f7ff ff2c 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 80140ce:	b003      	add	sp, #12
 80140d0:	bd30      	pop	{r4, r5, pc}

080140d2 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>:
void Adafruit_ICM20X::writeGyroRange(uint8_t new_gyro_range) {
 80140d2:	b530      	push	{r4, r5, lr}
 80140d4:	b083      	sub	sp, #12
 80140d6:	4604      	mov	r4, r0
 80140d8:	460d      	mov	r5, r1
	_setBank(2);
 80140da:	2102      	movs	r1, #2
 80140dc:	f7ff ff23 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	modifyRegisterMultipleBit(ICM20X_B2_GYRO_CONFIG_1, new_gyro_range, 1, 2);
 80140e0:	2302      	movs	r3, #2
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	2301      	movs	r3, #1
 80140e6:	462a      	mov	r2, r5
 80140e8:	4619      	mov	r1, r3
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7ff ffb9 	bl	8014062 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
	current_gyro_range = new_gyro_range;
 80140f0:	f242 0375 	movw	r3, #8309	; 0x2075
 80140f4:	54e5      	strb	r5, [r4, r3]
	_setBank(0);
 80140f6:	2100      	movs	r1, #0
 80140f8:	4620      	mov	r0, r4
 80140fa:	f7ff ff14 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 80140fe:	b003      	add	sp, #12
 8014100:	bd30      	pop	{r4, r5, pc}

08014102 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t>:
		icm20x_accel_cutoff_t cutoff_freq) {
 8014102:	b570      	push	{r4, r5, r6, lr}
 8014104:	b082      	sub	sp, #8
 8014106:	4605      	mov	r5, r0
 8014108:	460c      	mov	r4, r1
 801410a:	4616      	mov	r6, r2
	_setBank(2);
 801410c:	2102      	movs	r1, #2
 801410e:	f7ff ff0a 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	if (!modifyRegisterBit(ICM20X_B2_ACCEL_CONFIG_1, enable, 0)) {
 8014112:	2300      	movs	r3, #0
 8014114:	4622      	mov	r2, r4
 8014116:	2114      	movs	r1, #20
 8014118:	4628      	mov	r0, r5
 801411a:	f7ff ff46 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
 801411e:	b100      	cbz	r0, 8014122 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x20>
	if (!enable) {
 8014120:	b90c      	cbnz	r4, 8014126 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x24>
}
 8014122:	b002      	add	sp, #8
 8014124:	bd70      	pop	{r4, r5, r6, pc}
	if (!modifyRegisterMultipleBit(ICM20X_B2_ACCEL_CONFIG_1, cutoff_freq, 3,
 8014126:	2303      	movs	r3, #3
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	4632      	mov	r2, r6
 801412c:	2114      	movs	r1, #20
 801412e:	4628      	mov	r0, r5
 8014130:	f7ff ff97 	bl	8014062 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
 8014134:	e7f5      	b.n	8014122 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t+0x20>

08014136 <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t>:
		icm20x_gyro_cutoff_t cutoff_freq) {
 8014136:	b570      	push	{r4, r5, r6, lr}
 8014138:	b082      	sub	sp, #8
 801413a:	4605      	mov	r5, r0
 801413c:	460c      	mov	r4, r1
 801413e:	4616      	mov	r6, r2
	_setBank(2);
 8014140:	2102      	movs	r1, #2
 8014142:	f7ff fef0 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	if (!modifyRegisterBit(ICM20X_B2_ACCEL_CONFIG_1, enable, 0)) {
 8014146:	2300      	movs	r3, #0
 8014148:	4622      	mov	r2, r4
 801414a:	2114      	movs	r1, #20
 801414c:	4628      	mov	r0, r5
 801414e:	f7ff ff2c 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
 8014152:	b100      	cbz	r0, 8014156 <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x20>
	if (!enable) {
 8014154:	b90c      	cbnz	r4, 801415a <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x24>
}
 8014156:	b002      	add	sp, #8
 8014158:	bd70      	pop	{r4, r5, r6, pc}
	if (!modifyRegisterMultipleBit(ICM20X_B2_ACCEL_CONFIG_1, cutoff_freq, 3,
 801415a:	2303      	movs	r3, #3
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	4632      	mov	r2, r6
 8014160:	2114      	movs	r1, #20
 8014162:	4628      	mov	r0, r5
 8014164:	f7ff ff7d 	bl	8014062 <_ZN15Adafruit_ICM20X25modifyRegisterMultipleBitEthhh>
 8014168:	e7f5      	b.n	8014156 <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t+0x20>

0801416a <_ZN15Adafruit_ICM20X5_initEl>:
bool Adafruit_ICM20X::_init(int32_t sensor_id) {
 801416a:	b538      	push	{r3, r4, r5, lr}
 801416c:	4604      	mov	r4, r0
 801416e:	460d      	mov	r5, r1
	_setBank(0);
 8014170:	2100      	movs	r1, #0
 8014172:	f7ff fed8 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	uint8_t chip_id_ = readRegisterByte(ICM20X_B0_WHOAMI);
 8014176:	2100      	movs	r1, #0
 8014178:	4620      	mov	r0, r4
 801417a:	f7ff fe4b 	bl	8013e14 <_ZN15Adafruit_ICM20X16readRegisterByteEt>
	if ((chip_id_ != ICM20649_CHIP_ID) && (chip_id_ != ICM20948_CHIP_ID)) {
 801417e:	28e1      	cmp	r0, #225	; 0xe1
 8014180:	d002      	beq.n	8014188 <_ZN15Adafruit_ICM20X5_initEl+0x1e>
 8014182:	28ea      	cmp	r0, #234	; 0xea
 8014184:	f040 80b0 	bne.w	80142e8 <_ZN15Adafruit_ICM20X5_initEl+0x17e>
	_sensorid_accel = sensor_id;
 8014188:	b2a9      	uxth	r1, r5
 801418a:	f242 0358 	movw	r3, #8280	; 0x2058
 801418e:	52e1      	strh	r1, [r4, r3]
	_sensorid_gyro = sensor_id + 1;
 8014190:	1c4a      	adds	r2, r1, #1
 8014192:	f242 035a 	movw	r3, #8282	; 0x205a
 8014196:	52e2      	strh	r2, [r4, r3]
	_sensorid_mag = sensor_id + 2;
 8014198:	1c8a      	adds	r2, r1, #2
 801419a:	f242 035c 	movw	r3, #8284	; 0x205c
 801419e:	52e2      	strh	r2, [r4, r3]
	_sensorid_temp = sensor_id + 3;
 80141a0:	3103      	adds	r1, #3
 80141a2:	f242 035e 	movw	r3, #8286	; 0x205e
 80141a6:	52e1      	strh	r1, [r4, r3]
	reset();
 80141a8:	4620      	mov	r0, r4
 80141aa:	f7ff ff11 	bl	8013fd0 <_ZN15Adafruit_ICM20X5resetEv>
	modifyRegisterBit(ICM20X_B0_PWR_MGMT_1, 0, 6); // take out of default sleep state
 80141ae:	2306      	movs	r3, #6
 80141b0:	2200      	movs	r2, #0
 80141b2:	4619      	mov	r1, r3
 80141b4:	4620      	mov	r0, r4
 80141b6:	f7ff fef8 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(1);
 80141ba:	2001      	movs	r0, #1
 80141bc:	f000 fadd 	bl	801477a <osDelay>
	_setBank(0);
 80141c0:	2100      	movs	r1, #0
 80141c2:	4620      	mov	r0, r4
 80141c4:	f7ff feaf 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	delay(1);
 80141c8:	2001      	movs	r0, #1
 80141ca:	f000 fad6 	bl	801477a <osDelay>
	modifyRegisterBit(ICM20X_BO_FIFO_EN_2, 1, 4); // Enable accelerometer data to be saved to FIFO
 80141ce:	2304      	movs	r3, #4
 80141d0:	2201      	movs	r2, #1
 80141d2:	2167      	movs	r1, #103	; 0x67
 80141d4:	4620      	mov	r0, r4
 80141d6:	f7ff fee8 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(1);
 80141da:	2001      	movs	r0, #1
 80141dc:	f000 facd 	bl	801477a <osDelay>
	modifyRegisterBit(ICM20X_BO_FIFO_EN_2, 1, 3); // Enable gyro Z
 80141e0:	2303      	movs	r3, #3
 80141e2:	2201      	movs	r2, #1
 80141e4:	2167      	movs	r1, #103	; 0x67
 80141e6:	4620      	mov	r0, r4
 80141e8:	f7ff fedf 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(1);
 80141ec:	2001      	movs	r0, #1
 80141ee:	f000 fac4 	bl	801477a <osDelay>
	modifyRegisterBit(ICM20X_BO_FIFO_EN_2, 1, 2); // Enable gyro Y
 80141f2:	2302      	movs	r3, #2
 80141f4:	2201      	movs	r2, #1
 80141f6:	2167      	movs	r1, #103	; 0x67
 80141f8:	4620      	mov	r0, r4
 80141fa:	f7ff fed6 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(1);
 80141fe:	2001      	movs	r0, #1
 8014200:	f000 fabb 	bl	801477a <osDelay>
	modifyRegisterBit(ICM20X_BO_FIFO_EN_2, 1, 1); // Enable gyro X
 8014204:	2301      	movs	r3, #1
 8014206:	461a      	mov	r2, r3
 8014208:	2167      	movs	r1, #103	; 0x67
 801420a:	4620      	mov	r0, r4
 801420c:	f7ff fecd 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(1);
 8014210:	2001      	movs	r0, #1
 8014212:	f000 fab2 	bl	801477a <osDelay>
	setInt1ActiveLow(true);
 8014216:	2101      	movs	r1, #1
 8014218:	4620      	mov	r0, r4
 801421a:	f7ff fef5 	bl	8014008 <_ZN15Adafruit_ICM20X16setInt1ActiveLowEb>
	delay(1);
 801421e:	2001      	movs	r0, #1
 8014220:	f000 faab 	bl	801477a <osDelay>
	setInt1Latch(false);
 8014224:	2100      	movs	r1, #0
 8014226:	4620      	mov	r0, r4
 8014228:	f7ff ff01 	bl	801402e <_ZN15Adafruit_ICM20X12setInt1LatchEb>
	delay(1);
 801422c:	2001      	movs	r0, #1
 801422e:	f000 faa4 	bl	801477a <osDelay>
	clearIntOnRead(true);
 8014232:	2101      	movs	r1, #1
 8014234:	4620      	mov	r0, r4
 8014236:	f7ff ff07 	bl	8014048 <_ZN15Adafruit_ICM20X14clearIntOnReadEb>
	delay(1);
 801423a:	2001      	movs	r0, #1
 801423c:	f000 fa9d 	bl	801477a <osDelay>
	enableGyrolDLPF(true, ICM20X_GYRO_FREQ_196_6_HZ);
 8014240:	2200      	movs	r2, #0
 8014242:	2101      	movs	r1, #1
 8014244:	4620      	mov	r0, r4
 8014246:	f7ff ff76 	bl	8014136 <_ZN15Adafruit_ICM20X15enableGyrolDLPFEb20icm20x_gyro_cutoff_t>
	delay(1);
 801424a:	2001      	movs	r0, #1
 801424c:	f000 fa95 	bl	801477a <osDelay>
	writeGyroRange(3);
 8014250:	2103      	movs	r1, #3
 8014252:	4620      	mov	r0, r4
 8014254:	f7ff ff3d 	bl	80140d2 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>
	delay(1);
 8014258:	2001      	movs	r0, #1
 801425a:	f000 fa8e 	bl	801477a <osDelay>
	enableAccelDLPF(true, ICM20X_ACCEL_FREQ_246_0_HZ);
 801425e:	2201      	movs	r2, #1
 8014260:	4611      	mov	r1, r2
 8014262:	4620      	mov	r0, r4
 8014264:	f7ff ff4d 	bl	8014102 <_ZN15Adafruit_ICM20X15enableAccelDLPFEb21icm20x_accel_cutoff_t>
	delay(1);
 8014268:	2001      	movs	r0, #1
 801426a:	f000 fa86 	bl	801477a <osDelay>
	writeAccelRange(3);
 801426e:	2103      	movs	r1, #3
 8014270:	4620      	mov	r0, r4
 8014272:	f7ff ff16 	bl	80140a2 <_ZN15Adafruit_ICM20X15writeAccelRangeEh>
	delay(1);
 8014276:	2001      	movs	r0, #1
 8014278:	f000 fa7f 	bl	801477a <osDelay>
	setGyroRateDivisor(1); //550hz
 801427c:	2101      	movs	r1, #1
 801427e:	4620      	mov	r0, r4
 8014280:	f7ff fe71 	bl	8013f66 <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>
	delay(1);
 8014284:	2001      	movs	r0, #1
 8014286:	f000 fa78 	bl	801477a <osDelay>
	setAccelRateDivisor(1); // 562.5Hz
 801428a:	2101      	movs	r1, #1
 801428c:	4620      	mov	r0, r4
 801428e:	f7ff fe52 	bl	8013f36 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>
	delay(1);
 8014292:	2001      	movs	r0, #1
 8014294:	f000 fa71 	bl	801477a <osDelay>
	_setBank(0);
 8014298:	2100      	movs	r1, #0
 801429a:	4620      	mov	r0, r4
 801429c:	f7ff fe43 	bl	8013f26 <_ZN15Adafruit_ICM20X8_setBankEh>
	delay(1);
 80142a0:	2001      	movs	r0, #1
 80142a2:	f000 fa6a 	bl	801477a <osDelay>
	writeRegisterByte(ICM20X_BO_FIFO_RST, 0x0F); // reset FIFO
 80142a6:	220f      	movs	r2, #15
 80142a8:	2168      	movs	r1, #104	; 0x68
 80142aa:	4620      	mov	r0, r4
 80142ac:	f7ff fe14 	bl	8013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
	delay(1);
 80142b0:	2001      	movs	r0, #1
 80142b2:	f000 fa62 	bl	801477a <osDelay>
	writeRegisterByte(ICM20X_BO_FIFO_RST, 0x00);
 80142b6:	2200      	movs	r2, #0
 80142b8:	2168      	movs	r1, #104	; 0x68
 80142ba:	4620      	mov	r0, r4
 80142bc:	f7ff fe0c 	bl	8013ed8 <_ZN15Adafruit_ICM20X17writeRegisterByteEhh>
	delay(1);
 80142c0:	2001      	movs	r0, #1
 80142c2:	f000 fa5a 	bl	801477a <osDelay>
	modifyRegisterBit(ICM20X_B0_USER_CTRL, 1, 7); // Enable digital motion processor (dmp)
 80142c6:	2307      	movs	r3, #7
 80142c8:	2201      	movs	r2, #1
 80142ca:	2103      	movs	r1, #3
 80142cc:	4620      	mov	r0, r4
 80142ce:	f7ff fe6c 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	delay(1);
 80142d2:	2001      	movs	r0, #1
 80142d4:	f000 fa51 	bl	801477a <osDelay>
	modifyRegisterBit(ICM20X_B0_USER_CTRL, 1, 6); // Enable FIFO
 80142d8:	2306      	movs	r3, #6
 80142da:	2201      	movs	r2, #1
 80142dc:	2103      	movs	r1, #3
 80142de:	4620      	mov	r0, r4
 80142e0:	f7ff fe63 	bl	8013faa <_ZN15Adafruit_ICM20X17modifyRegisterBitEtbh>
	return true;
 80142e4:	2001      	movs	r0, #1
}
 80142e6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 80142e8:	2000      	movs	r0, #0
 80142ea:	e7fc      	b.n	80142e6 <_ZN15Adafruit_ICM20X5_initEl+0x17c>

080142ec <_ZN17SensirionI2CSgp41C1Ev>:
#include "../Sensirion_Core/src/SensirionCore.h"
#include "cmsis_os2.h"

#define SGP41_I2C_ADDRESS 0x59

SensirionI2CSgp41::SensirionI2CSgp41() {
 80142ec:	2200      	movs	r2, #0
 80142ee:	6002      	str	r2, [r0, #0]
 80142f0:	7102      	strb	r2, [r0, #4]
}
 80142f2:	4770      	bx	lr

080142f4 <_ZN14Adafruit_SHT4xC1Ev>:
static uint8_t crc8(const uint8_t *data, int len);

/*!
 * @brief  SHT4x constructor
 */
Adafruit_SHT4x::Adafruit_SHT4x(void) {}
 80142f4:	2200      	movs	r2, #0
 80142f6:	7302      	strb	r2, [r0, #12]
 80142f8:	6102      	str	r2, [r0, #16]
 80142fa:	6142      	str	r2, [r0, #20]
 80142fc:	6182      	str	r2, [r0, #24]
 80142fe:	7702      	strb	r2, [r0, #28]
 8014300:	7742      	strb	r2, [r0, #29]
 8014302:	4770      	bx	lr

08014304 <_ZN14Adafruit_SHT4xD1Ev>:

/*!
 * @brief  SHT4x destructor
 */
Adafruit_SHT4x::~Adafruit_SHT4x(void) {
 8014304:	b510      	push	{r4, lr}
 8014306:	4604      	mov	r4, r0
  if (temp_sensor) {
 8014308:	6940      	ldr	r0, [r0, #20]
 801430a:	b110      	cbz	r0, 8014312 <_ZN14Adafruit_SHT4xD1Ev+0xe>
    delete temp_sensor;
 801430c:	6803      	ldr	r3, [r0, #0]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	4798      	blx	r3
  }
  if (humidity_sensor) {
 8014312:	69a0      	ldr	r0, [r4, #24]
 8014314:	b110      	cbz	r0, 801431c <_ZN14Adafruit_SHT4xD1Ev+0x18>
    delete humidity_sensor;
 8014316:	6803      	ldr	r3, [r0, #0]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	4798      	blx	r3
  }
}
 801431c:	4620      	mov	r0, r4
 801431e:	bd10      	pop	{r4, pc}

08014320 <_ZN7TSL2772C1Ev>:
#define TSL27721_CMD_NORMAL				CMD_REG_W | CMD_REG_TYPE_AUTO_INC
/**
 * @brief Construct a new TSL2772::TSL2772 object
 *
 */
TSL2772::TSL2772(void) {
 8014320:	2200      	movs	r2, #0
 8014322:	6002      	str	r2, [r0, #0]
 8014324:	7102      	strb	r2, [r0, #4]
 8014326:	7282      	strb	r2, [r0, #10]
 8014328:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801432c:	60c2      	str	r2, [r0, #12]
 801432e:	4a02      	ldr	r2, [pc, #8]	; (8014338 <_ZN7TSL2772C1Ev+0x18>)
 8014330:	6102      	str	r2, [r0, #16]
 8014332:	2201      	movs	r2, #1
 8014334:	6142      	str	r2, [r0, #20]
}
 8014336:	4770      	bx	lr
 8014338:	402eb852 	.word	0x402eb852

0801433c <_ZN7TSL2772D1Ev>:
/**
 * @brief Destroy the TSL2772::TSL2772 object
 *
 */
TSL2772::~TSL2772(void) {
}
 801433c:	4770      	bx	lr
	...

08014340 <__NVIC_SetPriority>:
{
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
 8014346:	4603      	mov	r3, r0
 8014348:	6039      	str	r1, [r7, #0]
 801434a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014350:	2b00      	cmp	r3, #0
 8014352:	db0a      	blt.n	801436a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	b2da      	uxtb	r2, r3
 8014358:	490c      	ldr	r1, [pc, #48]	; (801438c <__NVIC_SetPriority+0x4c>)
 801435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801435e:	0112      	lsls	r2, r2, #4
 8014360:	b2d2      	uxtb	r2, r2
 8014362:	440b      	add	r3, r1
 8014364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014368:	e00a      	b.n	8014380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	b2da      	uxtb	r2, r3
 801436e:	4908      	ldr	r1, [pc, #32]	; (8014390 <__NVIC_SetPriority+0x50>)
 8014370:	79fb      	ldrb	r3, [r7, #7]
 8014372:	f003 030f 	and.w	r3, r3, #15
 8014376:	3b04      	subs	r3, #4
 8014378:	0112      	lsls	r2, r2, #4
 801437a:	b2d2      	uxtb	r2, r2
 801437c:	440b      	add	r3, r1
 801437e:	761a      	strb	r2, [r3, #24]
}
 8014380:	bf00      	nop
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	e000e100 	.word	0xe000e100
 8014390:	e000ed00 	.word	0xe000ed00

08014394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014394:	b580      	push	{r7, lr}
 8014396:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014398:	4b05      	ldr	r3, [pc, #20]	; (80143b0 <SysTick_Handler+0x1c>)
 801439a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801439c:	f002 fe66 	bl	801706c <xTaskGetSchedulerState>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d001      	beq.n	80143aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80143a6:	f003 ff4f 	bl	8018248 <xPortSysTickHandler>
  }
}
 80143aa:	bf00      	nop
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	e000e010 	.word	0xe000e010

080143b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80143b4:	b580      	push	{r7, lr}
 80143b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80143b8:	2100      	movs	r1, #0
 80143ba:	f06f 0004 	mvn.w	r0, #4
 80143be:	f7ff ffbf 	bl	8014340 <__NVIC_SetPriority>
#endif
}
 80143c2:	bf00      	nop
 80143c4:	bd80      	pop	{r7, pc}
	...

080143c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143ce:	f3ef 8305 	mrs	r3, IPSR
 80143d2:	603b      	str	r3, [r7, #0]
  return(result);
 80143d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d003      	beq.n	80143e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80143da:	f06f 0305 	mvn.w	r3, #5
 80143de:	607b      	str	r3, [r7, #4]
 80143e0:	e00c      	b.n	80143fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80143e2:	4b0a      	ldr	r3, [pc, #40]	; (801440c <osKernelInitialize+0x44>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d105      	bne.n	80143f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80143ea:	4b08      	ldr	r3, [pc, #32]	; (801440c <osKernelInitialize+0x44>)
 80143ec:	2201      	movs	r2, #1
 80143ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80143f0:	2300      	movs	r3, #0
 80143f2:	607b      	str	r3, [r7, #4]
 80143f4:	e002      	b.n	80143fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80143f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80143fc:	687b      	ldr	r3, [r7, #4]
}
 80143fe:	4618      	mov	r0, r3
 8014400:	370c      	adds	r7, #12
 8014402:	46bd      	mov	sp, r7
 8014404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014408:	4770      	bx	lr
 801440a:	bf00      	nop
 801440c:	20003c6c 	.word	0x20003c6c

08014410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014416:	f3ef 8305 	mrs	r3, IPSR
 801441a:	603b      	str	r3, [r7, #0]
  return(result);
 801441c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801441e:	2b00      	cmp	r3, #0
 8014420:	d003      	beq.n	801442a <osKernelStart+0x1a>
    stat = osErrorISR;
 8014422:	f06f 0305 	mvn.w	r3, #5
 8014426:	607b      	str	r3, [r7, #4]
 8014428:	e010      	b.n	801444c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801442a:	4b0b      	ldr	r3, [pc, #44]	; (8014458 <osKernelStart+0x48>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	2b01      	cmp	r3, #1
 8014430:	d109      	bne.n	8014446 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014432:	f7ff ffbf 	bl	80143b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014436:	4b08      	ldr	r3, [pc, #32]	; (8014458 <osKernelStart+0x48>)
 8014438:	2202      	movs	r2, #2
 801443a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801443c:	f002 f98c 	bl	8016758 <vTaskStartScheduler>
      stat = osOK;
 8014440:	2300      	movs	r3, #0
 8014442:	607b      	str	r3, [r7, #4]
 8014444:	e002      	b.n	801444c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801444a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801444c:	687b      	ldr	r3, [r7, #4]
}
 801444e:	4618      	mov	r0, r3
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	20003c6c 	.word	0x20003c6c

0801445c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801445c:	b580      	push	{r7, lr}
 801445e:	b08e      	sub	sp, #56	; 0x38
 8014460:	af04      	add	r7, sp, #16
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	60b9      	str	r1, [r7, #8]
 8014466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014468:	2300      	movs	r3, #0
 801446a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801446c:	f3ef 8305 	mrs	r3, IPSR
 8014470:	617b      	str	r3, [r7, #20]
  return(result);
 8014472:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014474:	2b00      	cmp	r3, #0
 8014476:	d17e      	bne.n	8014576 <osThreadNew+0x11a>
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d07b      	beq.n	8014576 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801447e:	2380      	movs	r3, #128	; 0x80
 8014480:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014482:	2318      	movs	r3, #24
 8014484:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014486:	2300      	movs	r3, #0
 8014488:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801448a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801448e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d045      	beq.n	8014522 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d002      	beq.n	80144a4 <osThreadNew+0x48>
        name = attr->name;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d002      	beq.n	80144b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	699b      	ldr	r3, [r3, #24]
 80144b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80144b2:	69fb      	ldr	r3, [r7, #28]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d008      	beq.n	80144ca <osThreadNew+0x6e>
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	2b38      	cmp	r3, #56	; 0x38
 80144bc:	d805      	bhi.n	80144ca <osThreadNew+0x6e>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	f003 0301 	and.w	r3, r3, #1
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d001      	beq.n	80144ce <osThreadNew+0x72>
        return (NULL);
 80144ca:	2300      	movs	r3, #0
 80144cc:	e054      	b.n	8014578 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	695b      	ldr	r3, [r3, #20]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d003      	beq.n	80144de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	695b      	ldr	r3, [r3, #20]
 80144da:	089b      	lsrs	r3, r3, #2
 80144dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	689b      	ldr	r3, [r3, #8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d00e      	beq.n	8014504 <osThreadNew+0xa8>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	2bbf      	cmp	r3, #191	; 0xbf
 80144ec:	d90a      	bls.n	8014504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d006      	beq.n	8014504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	695b      	ldr	r3, [r3, #20]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d002      	beq.n	8014504 <osThreadNew+0xa8>
        mem = 1;
 80144fe:	2301      	movs	r3, #1
 8014500:	61bb      	str	r3, [r7, #24]
 8014502:	e010      	b.n	8014526 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	689b      	ldr	r3, [r3, #8]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d10c      	bne.n	8014526 <osThreadNew+0xca>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d108      	bne.n	8014526 <osThreadNew+0xca>
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	691b      	ldr	r3, [r3, #16]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d104      	bne.n	8014526 <osThreadNew+0xca>
          mem = 0;
 801451c:	2300      	movs	r3, #0
 801451e:	61bb      	str	r3, [r7, #24]
 8014520:	e001      	b.n	8014526 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	2b01      	cmp	r3, #1
 801452a:	d110      	bne.n	801454e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014534:	9202      	str	r2, [sp, #8]
 8014536:	9301      	str	r3, [sp, #4]
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	9300      	str	r3, [sp, #0]
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	6a3a      	ldr	r2, [r7, #32]
 8014540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f001 fe40 	bl	80161c8 <xTaskCreateStatic>
 8014548:	4603      	mov	r3, r0
 801454a:	613b      	str	r3, [r7, #16]
 801454c:	e013      	b.n	8014576 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d110      	bne.n	8014576 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014554:	6a3b      	ldr	r3, [r7, #32]
 8014556:	b29a      	uxth	r2, r3
 8014558:	f107 0310 	add.w	r3, r7, #16
 801455c:	9301      	str	r3, [sp, #4]
 801455e:	69fb      	ldr	r3, [r7, #28]
 8014560:	9300      	str	r3, [sp, #0]
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f001 fe8b 	bl	8016282 <xTaskCreate>
 801456c:	4603      	mov	r3, r0
 801456e:	2b01      	cmp	r3, #1
 8014570:	d001      	beq.n	8014576 <osThreadNew+0x11a>
            hTask = NULL;
 8014572:	2300      	movs	r3, #0
 8014574:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014576:	693b      	ldr	r3, [r7, #16]
}
 8014578:	4618      	mov	r0, r3
 801457a:	3728      	adds	r7, #40	; 0x28
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8014580:	b580      	push	{r7, lr}
 8014582:	b086      	sub	sp, #24
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801458c:	f3ef 8305 	mrs	r3, IPSR
 8014590:	60bb      	str	r3, [r7, #8]
  return(result);
 8014592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8014594:	2b00      	cmp	r3, #0
 8014596:	d003      	beq.n	80145a0 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8014598:	f06f 0305 	mvn.w	r3, #5
 801459c:	617b      	str	r3, [r7, #20]
 801459e:	e017      	b.n	80145d0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 80145a0:	693b      	ldr	r3, [r7, #16]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d103      	bne.n	80145ae <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80145a6:	f06f 0303 	mvn.w	r3, #3
 80145aa:	617b      	str	r3, [r7, #20]
 80145ac:	e010      	b.n	80145d0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80145ae:	6938      	ldr	r0, [r7, #16]
 80145b0:	f002 f86c 	bl	801668c <eTaskGetState>
 80145b4:	4603      	mov	r3, r0
 80145b6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80145b8:	7bfb      	ldrb	r3, [r7, #15]
 80145ba:	2b04      	cmp	r3, #4
 80145bc:	d005      	beq.n	80145ca <osThreadTerminate+0x4a>
      stat = osOK;
 80145be:	2300      	movs	r3, #0
 80145c0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80145c2:	6938      	ldr	r0, [r7, #16]
 80145c4:	f001 ffbc 	bl	8016540 <vTaskDelete>
 80145c8:	e002      	b.n	80145d0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80145ca:	f06f 0302 	mvn.w	r3, #2
 80145ce:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80145d0:	697b      	ldr	r3, [r7, #20]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3718      	adds	r7, #24
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
	...

080145dc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80145dc:	b580      	push	{r7, lr}
 80145de:	b088      	sub	sp, #32
 80145e0:	af02      	add	r7, sp, #8
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d002      	beq.n	80145f6 <osThreadFlagsSet+0x1a>
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	da03      	bge.n	80145fe <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80145f6:	f06f 0303 	mvn.w	r3, #3
 80145fa:	60fb      	str	r3, [r7, #12]
 80145fc:	e035      	b.n	801466a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80145fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014602:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014604:	f3ef 8305 	mrs	r3, IPSR
 8014608:	613b      	str	r3, [r7, #16]
  return(result);
 801460a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 801460c:	2b00      	cmp	r3, #0
 801460e:	d01f      	beq.n	8014650 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8014610:	2300      	movs	r3, #0
 8014612:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8014614:	f107 0308 	add.w	r3, r7, #8
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	2300      	movs	r3, #0
 801461c:	2201      	movs	r2, #1
 801461e:	6839      	ldr	r1, [r7, #0]
 8014620:	6978      	ldr	r0, [r7, #20]
 8014622:	f002 ffcb 	bl	80175bc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8014626:	f107 030c 	add.w	r3, r7, #12
 801462a:	2200      	movs	r2, #0
 801462c:	9200      	str	r2, [sp, #0]
 801462e:	2200      	movs	r2, #0
 8014630:	2100      	movs	r1, #0
 8014632:	6978      	ldr	r0, [r7, #20]
 8014634:	f002 ffc2 	bl	80175bc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d015      	beq.n	801466a <osThreadFlagsSet+0x8e>
 801463e:	4b0d      	ldr	r3, [pc, #52]	; (8014674 <osThreadFlagsSet+0x98>)
 8014640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014644:	601a      	str	r2, [r3, #0]
 8014646:	f3bf 8f4f 	dsb	sy
 801464a:	f3bf 8f6f 	isb	sy
 801464e:	e00c      	b.n	801466a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8014650:	2300      	movs	r3, #0
 8014652:	2201      	movs	r2, #1
 8014654:	6839      	ldr	r1, [r7, #0]
 8014656:	6978      	ldr	r0, [r7, #20]
 8014658:	f002 fef2 	bl	8017440 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801465c:	f107 030c 	add.w	r3, r7, #12
 8014660:	2200      	movs	r2, #0
 8014662:	2100      	movs	r1, #0
 8014664:	6978      	ldr	r0, [r7, #20]
 8014666:	f002 feeb 	bl	8017440 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801466a:	68fb      	ldr	r3, [r7, #12]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3718      	adds	r7, #24
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	e000ed04 	.word	0xe000ed04

08014678 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8014678:	b580      	push	{r7, lr}
 801467a:	b08c      	sub	sp, #48	; 0x30
 801467c:	af00      	add	r7, sp, #0
 801467e:	60f8      	str	r0, [r7, #12]
 8014680:	60b9      	str	r1, [r7, #8]
 8014682:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014684:	f3ef 8305 	mrs	r3, IPSR
 8014688:	617b      	str	r3, [r7, #20]
  return(result);
 801468a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801468c:	2b00      	cmp	r3, #0
 801468e:	d003      	beq.n	8014698 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8014690:	f06f 0305 	mvn.w	r3, #5
 8014694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014696:	e06b      	b.n	8014770 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	da03      	bge.n	80146a6 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 801469e:	f06f 0303 	mvn.w	r3, #3
 80146a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146a4:	e064      	b.n	8014770 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	f003 0302 	and.w	r3, r3, #2
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <osThreadFlagsWait+0x3e>
      clear = 0U;
 80146b0:	2300      	movs	r3, #0
 80146b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80146b4:	e001      	b.n	80146ba <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80146ba:	2300      	movs	r3, #0
 80146bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80146c2:	f002 f967 	bl	8016994 <xTaskGetTickCount>
 80146c6:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80146c8:	f107 0210 	add.w	r2, r7, #16
 80146cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146d0:	2000      	movs	r0, #0
 80146d2:	f002 fe55 	bl	8017380 <xTaskNotifyWait>
 80146d6:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d137      	bne.n	801474e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80146de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	4013      	ands	r3, r2
 80146e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146ea:	4313      	orrs	r3, r2
 80146ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00c      	beq.n	8014712 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fc:	4013      	ands	r3, r2
 80146fe:	68fa      	ldr	r2, [r7, #12]
 8014700:	429a      	cmp	r2, r3
 8014702:	d032      	beq.n	801476a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d10f      	bne.n	801472a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 801470a:	f06f 0302 	mvn.w	r3, #2
 801470e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8014710:	e02e      	b.n	8014770 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014716:	4013      	ands	r3, r2
 8014718:	2b00      	cmp	r3, #0
 801471a:	d128      	bne.n	801476e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d103      	bne.n	801472a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8014722:	f06f 0302 	mvn.w	r3, #2
 8014726:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8014728:	e022      	b.n	8014770 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801472a:	f002 f933 	bl	8016994 <xTaskGetTickCount>
 801472e:	4602      	mov	r2, r0
 8014730:	6a3b      	ldr	r3, [r7, #32]
 8014732:	1ad3      	subs	r3, r2, r3
 8014734:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8014736:	69ba      	ldr	r2, [r7, #24]
 8014738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473a:	429a      	cmp	r2, r3
 801473c:	d902      	bls.n	8014744 <osThreadFlagsWait+0xcc>
          tout  = 0;
 801473e:	2300      	movs	r3, #0
 8014740:	627b      	str	r3, [r7, #36]	; 0x24
 8014742:	e00e      	b.n	8014762 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8014744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014746:	69bb      	ldr	r3, [r7, #24]
 8014748:	1ad3      	subs	r3, r2, r3
 801474a:	627b      	str	r3, [r7, #36]	; 0x24
 801474c:	e009      	b.n	8014762 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d103      	bne.n	801475c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8014754:	f06f 0302 	mvn.w	r3, #2
 8014758:	62fb      	str	r3, [r7, #44]	; 0x2c
 801475a:	e002      	b.n	8014762 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801475c:	f06f 0301 	mvn.w	r3, #1
 8014760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8014762:	69fb      	ldr	r3, [r7, #28]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d1af      	bne.n	80146c8 <osThreadFlagsWait+0x50>
 8014768:	e002      	b.n	8014770 <osThreadFlagsWait+0xf8>
            break;
 801476a:	bf00      	nop
 801476c:	e000      	b.n	8014770 <osThreadFlagsWait+0xf8>
            break;
 801476e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8014770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014772:	4618      	mov	r0, r3
 8014774:	3730      	adds	r7, #48	; 0x30
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}

0801477a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801477a:	b580      	push	{r7, lr}
 801477c:	b084      	sub	sp, #16
 801477e:	af00      	add	r7, sp, #0
 8014780:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014782:	f3ef 8305 	mrs	r3, IPSR
 8014786:	60bb      	str	r3, [r7, #8]
  return(result);
 8014788:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801478a:	2b00      	cmp	r3, #0
 801478c:	d003      	beq.n	8014796 <osDelay+0x1c>
    stat = osErrorISR;
 801478e:	f06f 0305 	mvn.w	r3, #5
 8014792:	60fb      	str	r3, [r7, #12]
 8014794:	e007      	b.n	80147a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014796:	2300      	movs	r3, #0
 8014798:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f001 ff3f 	bl	8016624 <vTaskDelay>
    }
  }

  return (stat);
 80147a6:	68fb      	ldr	r3, [r7, #12]
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3710      	adds	r7, #16
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}

080147b0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b088      	sub	sp, #32
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80147b8:	2300      	movs	r3, #0
 80147ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80147bc:	f3ef 8305 	mrs	r3, IPSR
 80147c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80147c2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d174      	bne.n	80148b2 <osMutexNew+0x102>
    if (attr != NULL) {
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d003      	beq.n	80147d6 <osMutexNew+0x26>
      type = attr->attr_bits;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	61bb      	str	r3, [r7, #24]
 80147d4:	e001      	b.n	80147da <osMutexNew+0x2a>
    } else {
      type = 0U;
 80147d6:	2300      	movs	r3, #0
 80147d8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	f003 0301 	and.w	r3, r3, #1
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d002      	beq.n	80147ea <osMutexNew+0x3a>
      rmtx = 1U;
 80147e4:	2301      	movs	r3, #1
 80147e6:	617b      	str	r3, [r7, #20]
 80147e8:	e001      	b.n	80147ee <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80147ea:	2300      	movs	r3, #0
 80147ec:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80147ee:	69bb      	ldr	r3, [r7, #24]
 80147f0:	f003 0308 	and.w	r3, r3, #8
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d15c      	bne.n	80148b2 <osMutexNew+0x102>
      mem = -1;
 80147f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147fc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d015      	beq.n	8014830 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d006      	beq.n	801481a <osMutexNew+0x6a>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	2b4f      	cmp	r3, #79	; 0x4f
 8014812:	d902      	bls.n	801481a <osMutexNew+0x6a>
          mem = 1;
 8014814:	2301      	movs	r3, #1
 8014816:	613b      	str	r3, [r7, #16]
 8014818:	e00c      	b.n	8014834 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	689b      	ldr	r3, [r3, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d108      	bne.n	8014834 <osMutexNew+0x84>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d104      	bne.n	8014834 <osMutexNew+0x84>
            mem = 0;
 801482a:	2300      	movs	r3, #0
 801482c:	613b      	str	r3, [r7, #16]
 801482e:	e001      	b.n	8014834 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8014830:	2300      	movs	r3, #0
 8014832:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	2b01      	cmp	r3, #1
 8014838:	d112      	bne.n	8014860 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d007      	beq.n	8014850 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	689b      	ldr	r3, [r3, #8]
 8014844:	4619      	mov	r1, r3
 8014846:	2004      	movs	r0, #4
 8014848:	f000 fd69 	bl	801531e <xQueueCreateMutexStatic>
 801484c:	61f8      	str	r0, [r7, #28]
 801484e:	e016      	b.n	801487e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	689b      	ldr	r3, [r3, #8]
 8014854:	4619      	mov	r1, r3
 8014856:	2001      	movs	r0, #1
 8014858:	f000 fd61 	bl	801531e <xQueueCreateMutexStatic>
 801485c:	61f8      	str	r0, [r7, #28]
 801485e:	e00e      	b.n	801487e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d10b      	bne.n	801487e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d004      	beq.n	8014876 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801486c:	2004      	movs	r0, #4
 801486e:	f000 fd3e 	bl	80152ee <xQueueCreateMutex>
 8014872:	61f8      	str	r0, [r7, #28]
 8014874:	e003      	b.n	801487e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8014876:	2001      	movs	r0, #1
 8014878:	f000 fd39 	bl	80152ee <xQueueCreateMutex>
 801487c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d00c      	beq.n	801489e <osMutexNew+0xee>
        if (attr != NULL) {
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d003      	beq.n	8014892 <osMutexNew+0xe2>
          name = attr->name;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	60fb      	str	r3, [r7, #12]
 8014890:	e001      	b.n	8014896 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8014892:	2300      	movs	r3, #0
 8014894:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8014896:	68f9      	ldr	r1, [r7, #12]
 8014898:	69f8      	ldr	r0, [r7, #28]
 801489a:	f001 fc0d 	bl	80160b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801489e:	69fb      	ldr	r3, [r7, #28]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d006      	beq.n	80148b2 <osMutexNew+0x102>
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d003      	beq.n	80148b2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	f043 0301 	orr.w	r3, r3, #1
 80148b0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80148b2:	69fb      	ldr	r3, [r7, #28]
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	3720      	adds	r7, #32
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80148bc:	b580      	push	{r7, lr}
 80148be:	b086      	sub	sp, #24
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f023 0301 	bic.w	r3, r3, #1
 80148cc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f003 0301 	and.w	r3, r3, #1
 80148d4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80148d6:	2300      	movs	r3, #0
 80148d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80148da:	f3ef 8305 	mrs	r3, IPSR
 80148de:	60bb      	str	r3, [r7, #8]
  return(result);
 80148e0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d003      	beq.n	80148ee <osMutexAcquire+0x32>
    stat = osErrorISR;
 80148e6:	f06f 0305 	mvn.w	r3, #5
 80148ea:	617b      	str	r3, [r7, #20]
 80148ec:	e02c      	b.n	8014948 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d103      	bne.n	80148fc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80148f4:	f06f 0303 	mvn.w	r3, #3
 80148f8:	617b      	str	r3, [r7, #20]
 80148fa:	e025      	b.n	8014948 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d011      	beq.n	8014926 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	6938      	ldr	r0, [r7, #16]
 8014906:	f000 fd59 	bl	80153bc <xQueueTakeMutexRecursive>
 801490a:	4603      	mov	r3, r0
 801490c:	2b01      	cmp	r3, #1
 801490e:	d01b      	beq.n	8014948 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d003      	beq.n	801491e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8014916:	f06f 0301 	mvn.w	r3, #1
 801491a:	617b      	str	r3, [r7, #20]
 801491c:	e014      	b.n	8014948 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 801491e:	f06f 0302 	mvn.w	r3, #2
 8014922:	617b      	str	r3, [r7, #20]
 8014924:	e010      	b.n	8014948 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8014926:	6839      	ldr	r1, [r7, #0]
 8014928:	6938      	ldr	r0, [r7, #16]
 801492a:	f001 f8ed 	bl	8015b08 <xQueueSemaphoreTake>
 801492e:	4603      	mov	r3, r0
 8014930:	2b01      	cmp	r3, #1
 8014932:	d009      	beq.n	8014948 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d003      	beq.n	8014942 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801493a:	f06f 0301 	mvn.w	r3, #1
 801493e:	617b      	str	r3, [r7, #20]
 8014940:	e002      	b.n	8014948 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8014942:	f06f 0302 	mvn.w	r3, #2
 8014946:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8014948:	697b      	ldr	r3, [r7, #20]
}
 801494a:	4618      	mov	r0, r3
 801494c:	3718      	adds	r7, #24
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}

08014952 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8014952:	b580      	push	{r7, lr}
 8014954:	b086      	sub	sp, #24
 8014956:	af00      	add	r7, sp, #0
 8014958:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f023 0301 	bic.w	r3, r3, #1
 8014960:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f003 0301 	and.w	r3, r3, #1
 8014968:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801496a:	2300      	movs	r3, #0
 801496c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801496e:	f3ef 8305 	mrs	r3, IPSR
 8014972:	60bb      	str	r3, [r7, #8]
  return(result);
 8014974:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014976:	2b00      	cmp	r3, #0
 8014978:	d003      	beq.n	8014982 <osMutexRelease+0x30>
    stat = osErrorISR;
 801497a:	f06f 0305 	mvn.w	r3, #5
 801497e:	617b      	str	r3, [r7, #20]
 8014980:	e01f      	b.n	80149c2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8014982:	693b      	ldr	r3, [r7, #16]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d103      	bne.n	8014990 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8014988:	f06f 0303 	mvn.w	r3, #3
 801498c:	617b      	str	r3, [r7, #20]
 801498e:	e018      	b.n	80149c2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d009      	beq.n	80149aa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014996:	6938      	ldr	r0, [r7, #16]
 8014998:	f000 fcdc 	bl	8015354 <xQueueGiveMutexRecursive>
 801499c:	4603      	mov	r3, r0
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d00f      	beq.n	80149c2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80149a2:	f06f 0302 	mvn.w	r3, #2
 80149a6:	617b      	str	r3, [r7, #20]
 80149a8:	e00b      	b.n	80149c2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80149aa:	2300      	movs	r3, #0
 80149ac:	2200      	movs	r2, #0
 80149ae:	2100      	movs	r1, #0
 80149b0:	6938      	ldr	r0, [r7, #16]
 80149b2:	f000 fda3 	bl	80154fc <xQueueGenericSend>
 80149b6:	4603      	mov	r3, r0
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d002      	beq.n	80149c2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80149bc:	f06f 0302 	mvn.w	r3, #2
 80149c0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80149c2:	697b      	ldr	r3, [r7, #20]
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3718      	adds	r7, #24
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b08a      	sub	sp, #40	; 0x28
 80149d0:	af02      	add	r7, sp, #8
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80149d8:	2300      	movs	r3, #0
 80149da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149dc:	f3ef 8305 	mrs	r3, IPSR
 80149e0:	613b      	str	r3, [r7, #16]
  return(result);
 80149e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d175      	bne.n	8014ad4 <osSemaphoreNew+0x108>
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d072      	beq.n	8014ad4 <osSemaphoreNew+0x108>
 80149ee:	68ba      	ldr	r2, [r7, #8]
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d86e      	bhi.n	8014ad4 <osSemaphoreNew+0x108>
    mem = -1;
 80149f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d015      	beq.n	8014a2e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	689b      	ldr	r3, [r3, #8]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d006      	beq.n	8014a18 <osSemaphoreNew+0x4c>
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	68db      	ldr	r3, [r3, #12]
 8014a0e:	2b4f      	cmp	r3, #79	; 0x4f
 8014a10:	d902      	bls.n	8014a18 <osSemaphoreNew+0x4c>
        mem = 1;
 8014a12:	2301      	movs	r3, #1
 8014a14:	61bb      	str	r3, [r7, #24]
 8014a16:	e00c      	b.n	8014a32 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d108      	bne.n	8014a32 <osSemaphoreNew+0x66>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	68db      	ldr	r3, [r3, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d104      	bne.n	8014a32 <osSemaphoreNew+0x66>
          mem = 0;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	61bb      	str	r3, [r7, #24]
 8014a2c:	e001      	b.n	8014a32 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014a32:	69bb      	ldr	r3, [r7, #24]
 8014a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a38:	d04c      	beq.n	8014ad4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d128      	bne.n	8014a92 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d10a      	bne.n	8014a5c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	689b      	ldr	r3, [r3, #8]
 8014a4a:	2203      	movs	r2, #3
 8014a4c:	9200      	str	r2, [sp, #0]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	2100      	movs	r1, #0
 8014a52:	2001      	movs	r0, #1
 8014a54:	f000 fb5c 	bl	8015110 <xQueueGenericCreateStatic>
 8014a58:	61f8      	str	r0, [r7, #28]
 8014a5a:	e005      	b.n	8014a68 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8014a5c:	2203      	movs	r2, #3
 8014a5e:	2100      	movs	r1, #0
 8014a60:	2001      	movs	r0, #1
 8014a62:	f000 fbcd 	bl	8015200 <xQueueGenericCreate>
 8014a66:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d022      	beq.n	8014ab4 <osSemaphoreNew+0xe8>
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d01f      	beq.n	8014ab4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014a74:	2300      	movs	r3, #0
 8014a76:	2200      	movs	r2, #0
 8014a78:	2100      	movs	r1, #0
 8014a7a:	69f8      	ldr	r0, [r7, #28]
 8014a7c:	f000 fd3e 	bl	80154fc <xQueueGenericSend>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d016      	beq.n	8014ab4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8014a86:	69f8      	ldr	r0, [r7, #28]
 8014a88:	f001 f9ca 	bl	8015e20 <vQueueDelete>
            hSemaphore = NULL;
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	61fb      	str	r3, [r7, #28]
 8014a90:	e010      	b.n	8014ab4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014a92:	69bb      	ldr	r3, [r7, #24]
 8014a94:	2b01      	cmp	r3, #1
 8014a96:	d108      	bne.n	8014aaa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	68b9      	ldr	r1, [r7, #8]
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f000 fcc1 	bl	8015428 <xQueueCreateCountingSemaphoreStatic>
 8014aa6:	61f8      	str	r0, [r7, #28]
 8014aa8:	e004      	b.n	8014ab4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014aaa:	68b9      	ldr	r1, [r7, #8]
 8014aac:	68f8      	ldr	r0, [r7, #12]
 8014aae:	f000 fcf2 	bl	8015496 <xQueueCreateCountingSemaphore>
 8014ab2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d00c      	beq.n	8014ad4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d003      	beq.n	8014ac8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	617b      	str	r3, [r7, #20]
 8014ac6:	e001      	b.n	8014acc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014acc:	6979      	ldr	r1, [r7, #20]
 8014ace:	69f8      	ldr	r0, [r7, #28]
 8014ad0:	f001 faf2 	bl	80160b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014ad4:	69fb      	ldr	r3, [r7, #28]
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	3720      	adds	r7, #32
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
	...

08014ae0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b086      	sub	sp, #24
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014aee:	2300      	movs	r3, #0
 8014af0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d103      	bne.n	8014b00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014af8:	f06f 0303 	mvn.w	r3, #3
 8014afc:	617b      	str	r3, [r7, #20]
 8014afe:	e039      	b.n	8014b74 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014b00:	f3ef 8305 	mrs	r3, IPSR
 8014b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8014b06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d022      	beq.n	8014b52 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d003      	beq.n	8014b1a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014b12:	f06f 0303 	mvn.w	r3, #3
 8014b16:	617b      	str	r3, [r7, #20]
 8014b18:	e02c      	b.n	8014b74 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014b1e:	f107 0308 	add.w	r3, r7, #8
 8014b22:	461a      	mov	r2, r3
 8014b24:	2100      	movs	r1, #0
 8014b26:	6938      	ldr	r0, [r7, #16]
 8014b28:	f001 f8fa 	bl	8015d20 <xQueueReceiveFromISR>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d003      	beq.n	8014b3a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014b32:	f06f 0302 	mvn.w	r3, #2
 8014b36:	617b      	str	r3, [r7, #20]
 8014b38:	e01c      	b.n	8014b74 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d019      	beq.n	8014b74 <osSemaphoreAcquire+0x94>
 8014b40:	4b0f      	ldr	r3, [pc, #60]	; (8014b80 <osSemaphoreAcquire+0xa0>)
 8014b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b46:	601a      	str	r2, [r3, #0]
 8014b48:	f3bf 8f4f 	dsb	sy
 8014b4c:	f3bf 8f6f 	isb	sy
 8014b50:	e010      	b.n	8014b74 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8014b52:	6839      	ldr	r1, [r7, #0]
 8014b54:	6938      	ldr	r0, [r7, #16]
 8014b56:	f000 ffd7 	bl	8015b08 <xQueueSemaphoreTake>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	d009      	beq.n	8014b74 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d003      	beq.n	8014b6e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8014b66:	f06f 0301 	mvn.w	r3, #1
 8014b6a:	617b      	str	r3, [r7, #20]
 8014b6c:	e002      	b.n	8014b74 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8014b6e:	f06f 0302 	mvn.w	r3, #2
 8014b72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014b74:	697b      	ldr	r3, [r7, #20]
}
 8014b76:	4618      	mov	r0, r3
 8014b78:	3718      	adds	r7, #24
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	e000ed04 	.word	0xe000ed04

08014b84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b086      	sub	sp, #24
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d103      	bne.n	8014ba2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014b9a:	f06f 0303 	mvn.w	r3, #3
 8014b9e:	617b      	str	r3, [r7, #20]
 8014ba0:	e02c      	b.n	8014bfc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ba2:	f3ef 8305 	mrs	r3, IPSR
 8014ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d01a      	beq.n	8014be4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014bb2:	f107 0308 	add.w	r3, r7, #8
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	6938      	ldr	r0, [r7, #16]
 8014bba:	f000 fe38 	bl	801582e <xQueueGiveFromISR>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	d003      	beq.n	8014bcc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014bc4:	f06f 0302 	mvn.w	r3, #2
 8014bc8:	617b      	str	r3, [r7, #20]
 8014bca:	e017      	b.n	8014bfc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d014      	beq.n	8014bfc <osSemaphoreRelease+0x78>
 8014bd2:	4b0d      	ldr	r3, [pc, #52]	; (8014c08 <osSemaphoreRelease+0x84>)
 8014bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bd8:	601a      	str	r2, [r3, #0]
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	f3bf 8f6f 	isb	sy
 8014be2:	e00b      	b.n	8014bfc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014be4:	2300      	movs	r3, #0
 8014be6:	2200      	movs	r2, #0
 8014be8:	2100      	movs	r1, #0
 8014bea:	6938      	ldr	r0, [r7, #16]
 8014bec:	f000 fc86 	bl	80154fc <xQueueGenericSend>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b01      	cmp	r3, #1
 8014bf4:	d002      	beq.n	8014bfc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014bf6:	f06f 0302 	mvn.w	r3, #2
 8014bfa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014bfc:	697b      	ldr	r3, [r7, #20]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3718      	adds	r7, #24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	e000ed04 	.word	0xe000ed04

08014c0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b08a      	sub	sp, #40	; 0x28
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c1c:	f3ef 8305 	mrs	r3, IPSR
 8014c20:	613b      	str	r3, [r7, #16]
  return(result);
 8014c22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d15f      	bne.n	8014ce8 <osMessageQueueNew+0xdc>
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d05c      	beq.n	8014ce8 <osMessageQueueNew+0xdc>
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d059      	beq.n	8014ce8 <osMessageQueueNew+0xdc>
    mem = -1;
 8014c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d029      	beq.n	8014c94 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d012      	beq.n	8014c6e <osMessageQueueNew+0x62>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	2b4f      	cmp	r3, #79	; 0x4f
 8014c4e:	d90e      	bls.n	8014c6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d00a      	beq.n	8014c6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	695a      	ldr	r2, [r3, #20]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	68b9      	ldr	r1, [r7, #8]
 8014c60:	fb01 f303 	mul.w	r3, r1, r3
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d302      	bcc.n	8014c6e <osMessageQueueNew+0x62>
        mem = 1;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	61bb      	str	r3, [r7, #24]
 8014c6c:	e014      	b.n	8014c98 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	689b      	ldr	r3, [r3, #8]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d110      	bne.n	8014c98 <osMessageQueueNew+0x8c>
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	68db      	ldr	r3, [r3, #12]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d10c      	bne.n	8014c98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d108      	bne.n	8014c98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	695b      	ldr	r3, [r3, #20]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d104      	bne.n	8014c98 <osMessageQueueNew+0x8c>
          mem = 0;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	61bb      	str	r3, [r7, #24]
 8014c92:	e001      	b.n	8014c98 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014c94:	2300      	movs	r3, #0
 8014c96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014c98:	69bb      	ldr	r3, [r7, #24]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d10b      	bne.n	8014cb6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	691a      	ldr	r2, [r3, #16]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	689b      	ldr	r3, [r3, #8]
 8014ca6:	2100      	movs	r1, #0
 8014ca8:	9100      	str	r1, [sp, #0]
 8014caa:	68b9      	ldr	r1, [r7, #8]
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f000 fa2f 	bl	8015110 <xQueueGenericCreateStatic>
 8014cb2:	61f8      	str	r0, [r7, #28]
 8014cb4:	e008      	b.n	8014cc8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014cb6:	69bb      	ldr	r3, [r7, #24]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d105      	bne.n	8014cc8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	68b9      	ldr	r1, [r7, #8]
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	f000 fa9d 	bl	8015200 <xQueueGenericCreate>
 8014cc6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014cc8:	69fb      	ldr	r3, [r7, #28]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d00c      	beq.n	8014ce8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d003      	beq.n	8014cdc <osMessageQueueNew+0xd0>
        name = attr->name;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	617b      	str	r3, [r7, #20]
 8014cda:	e001      	b.n	8014ce0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014ce0:	6979      	ldr	r1, [r7, #20]
 8014ce2:	69f8      	ldr	r0, [r7, #28]
 8014ce4:	f001 f9e8 	bl	80160b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014ce8:	69fb      	ldr	r3, [r7, #28]
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3720      	adds	r7, #32
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
	...

08014cf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b088      	sub	sp, #32
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	603b      	str	r3, [r7, #0]
 8014d00:	4613      	mov	r3, r2
 8014d02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d0c:	f3ef 8305 	mrs	r3, IPSR
 8014d10:	617b      	str	r3, [r7, #20]
  return(result);
 8014d12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d028      	beq.n	8014d6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d005      	beq.n	8014d2a <osMessageQueuePut+0x36>
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d002      	beq.n	8014d2a <osMessageQueuePut+0x36>
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d003      	beq.n	8014d32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014d2a:	f06f 0303 	mvn.w	r3, #3
 8014d2e:	61fb      	str	r3, [r7, #28]
 8014d30:	e038      	b.n	8014da4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014d32:	2300      	movs	r3, #0
 8014d34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8014d36:	f107 0210 	add.w	r2, r7, #16
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	68b9      	ldr	r1, [r7, #8]
 8014d3e:	69b8      	ldr	r0, [r7, #24]
 8014d40:	f000 fcda 	bl	80156f8 <xQueueGenericSendFromISR>
 8014d44:	4603      	mov	r3, r0
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d003      	beq.n	8014d52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014d4a:	f06f 0302 	mvn.w	r3, #2
 8014d4e:	61fb      	str	r3, [r7, #28]
 8014d50:	e028      	b.n	8014da4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d025      	beq.n	8014da4 <osMessageQueuePut+0xb0>
 8014d58:	4b15      	ldr	r3, [pc, #84]	; (8014db0 <osMessageQueuePut+0xbc>)
 8014d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d5e:	601a      	str	r2, [r3, #0]
 8014d60:	f3bf 8f4f 	dsb	sy
 8014d64:	f3bf 8f6f 	isb	sy
 8014d68:	e01c      	b.n	8014da4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014d6a:	69bb      	ldr	r3, [r7, #24]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d002      	beq.n	8014d76 <osMessageQueuePut+0x82>
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d103      	bne.n	8014d7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8014d76:	f06f 0303 	mvn.w	r3, #3
 8014d7a:	61fb      	str	r3, [r7, #28]
 8014d7c:	e012      	b.n	8014da4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014d7e:	2300      	movs	r3, #0
 8014d80:	683a      	ldr	r2, [r7, #0]
 8014d82:	68b9      	ldr	r1, [r7, #8]
 8014d84:	69b8      	ldr	r0, [r7, #24]
 8014d86:	f000 fbb9 	bl	80154fc <xQueueGenericSend>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	d009      	beq.n	8014da4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d003      	beq.n	8014d9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8014d96:	f06f 0301 	mvn.w	r3, #1
 8014d9a:	61fb      	str	r3, [r7, #28]
 8014d9c:	e002      	b.n	8014da4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014d9e:	f06f 0302 	mvn.w	r3, #2
 8014da2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014da4:	69fb      	ldr	r3, [r7, #28]
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3720      	adds	r7, #32
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	e000ed04 	.word	0xe000ed04

08014db4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b088      	sub	sp, #32
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	607a      	str	r2, [r7, #4]
 8014dc0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014dca:	f3ef 8305 	mrs	r3, IPSR
 8014dce:	617b      	str	r3, [r7, #20]
  return(result);
 8014dd0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d028      	beq.n	8014e28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d005      	beq.n	8014de8 <osMessageQueueGet+0x34>
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d002      	beq.n	8014de8 <osMessageQueueGet+0x34>
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d003      	beq.n	8014df0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014de8:	f06f 0303 	mvn.w	r3, #3
 8014dec:	61fb      	str	r3, [r7, #28]
 8014dee:	e037      	b.n	8014e60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014df0:	2300      	movs	r3, #0
 8014df2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014df4:	f107 0310 	add.w	r3, r7, #16
 8014df8:	461a      	mov	r2, r3
 8014dfa:	68b9      	ldr	r1, [r7, #8]
 8014dfc:	69b8      	ldr	r0, [r7, #24]
 8014dfe:	f000 ff8f 	bl	8015d20 <xQueueReceiveFromISR>
 8014e02:	4603      	mov	r3, r0
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d003      	beq.n	8014e10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014e08:	f06f 0302 	mvn.w	r3, #2
 8014e0c:	61fb      	str	r3, [r7, #28]
 8014e0e:	e027      	b.n	8014e60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d024      	beq.n	8014e60 <osMessageQueueGet+0xac>
 8014e16:	4b15      	ldr	r3, [pc, #84]	; (8014e6c <osMessageQueueGet+0xb8>)
 8014e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e1c:	601a      	str	r2, [r3, #0]
 8014e1e:	f3bf 8f4f 	dsb	sy
 8014e22:	f3bf 8f6f 	isb	sy
 8014e26:	e01b      	b.n	8014e60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d002      	beq.n	8014e34 <osMessageQueueGet+0x80>
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d103      	bne.n	8014e3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014e34:	f06f 0303 	mvn.w	r3, #3
 8014e38:	61fb      	str	r3, [r7, #28]
 8014e3a:	e011      	b.n	8014e60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014e3c:	683a      	ldr	r2, [r7, #0]
 8014e3e:	68b9      	ldr	r1, [r7, #8]
 8014e40:	69b8      	ldr	r0, [r7, #24]
 8014e42:	f000 fd81 	bl	8015948 <xQueueReceive>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d009      	beq.n	8014e60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d003      	beq.n	8014e5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8014e52:	f06f 0301 	mvn.w	r3, #1
 8014e56:	61fb      	str	r3, [r7, #28]
 8014e58:	e002      	b.n	8014e60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8014e5a:	f06f 0302 	mvn.w	r3, #2
 8014e5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014e60:	69fb      	ldr	r3, [r7, #28]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3720      	adds	r7, #32
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	e000ed04 	.word	0xe000ed04

08014e70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014e70:	b480      	push	{r7}
 8014e72:	b085      	sub	sp, #20
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	4a07      	ldr	r2, [pc, #28]	; (8014e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8014e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	4a06      	ldr	r2, [pc, #24]	; (8014ea0 <vApplicationGetIdleTaskMemory+0x30>)
 8014e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2280      	movs	r2, #128	; 0x80
 8014e8c:	601a      	str	r2, [r3, #0]
}
 8014e8e:	bf00      	nop
 8014e90:	3714      	adds	r7, #20
 8014e92:	46bd      	mov	sp, r7
 8014e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e98:	4770      	bx	lr
 8014e9a:	bf00      	nop
 8014e9c:	20003c70 	.word	0x20003c70
 8014ea0:	20003d30 	.word	0x20003d30

08014ea4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014ea4:	b480      	push	{r7}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	4a07      	ldr	r2, [pc, #28]	; (8014ed0 <vApplicationGetTimerTaskMemory+0x2c>)
 8014eb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	4a06      	ldr	r2, [pc, #24]	; (8014ed4 <vApplicationGetTimerTaskMemory+0x30>)
 8014eba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014ec2:	601a      	str	r2, [r3, #0]
}
 8014ec4:	bf00      	nop
 8014ec6:	3714      	adds	r7, #20
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ece:	4770      	bx	lr
 8014ed0:	20003f30 	.word	0x20003f30
 8014ed4:	20003ff0 	.word	0x20003ff0

08014ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014ed8:	b480      	push	{r7}
 8014eda:	b083      	sub	sp, #12
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f103 0208 	add.w	r2, r3, #8
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f103 0208 	add.w	r2, r3, #8
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f103 0208 	add.w	r2, r3, #8
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2200      	movs	r2, #0
 8014f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014f0c:	bf00      	nop
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr

08014f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2200      	movs	r2, #0
 8014f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014f26:	bf00      	nop
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr

08014f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014f32:	b480      	push	{r7}
 8014f34:	b085      	sub	sp, #20
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	6078      	str	r0, [r7, #4]
 8014f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	689a      	ldr	r2, [r3, #8]
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	689b      	ldr	r3, [r3, #8]
 8014f54:	683a      	ldr	r2, [r7, #0]
 8014f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	683a      	ldr	r2, [r7, #0]
 8014f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	1c5a      	adds	r2, r3, #1
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	601a      	str	r2, [r3, #0]
}
 8014f6e:	bf00      	nop
 8014f70:	3714      	adds	r7, #20
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr

08014f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014f7a:	b480      	push	{r7}
 8014f7c:	b085      	sub	sp, #20
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
 8014f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f90:	d103      	bne.n	8014f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	691b      	ldr	r3, [r3, #16]
 8014f96:	60fb      	str	r3, [r7, #12]
 8014f98:	e00c      	b.n	8014fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	3308      	adds	r3, #8
 8014f9e:	60fb      	str	r3, [r7, #12]
 8014fa0:	e002      	b.n	8014fa8 <vListInsert+0x2e>
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	60fb      	str	r3, [r7, #12]
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d2f6      	bcs.n	8014fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	685a      	ldr	r2, [r3, #4]
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	683a      	ldr	r2, [r7, #0]
 8014fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	68fa      	ldr	r2, [r7, #12]
 8014fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	683a      	ldr	r2, [r7, #0]
 8014fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	1c5a      	adds	r2, r3, #1
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	601a      	str	r2, [r3, #0]
}
 8014fe0:	bf00      	nop
 8014fe2:	3714      	adds	r7, #20
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fea:	4770      	bx	lr

08014fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014fec:	b480      	push	{r7}
 8014fee:	b085      	sub	sp, #20
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	691b      	ldr	r3, [r3, #16]
 8014ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	6892      	ldr	r2, [r2, #8]
 8015002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	689b      	ldr	r3, [r3, #8]
 8015008:	687a      	ldr	r2, [r7, #4]
 801500a:	6852      	ldr	r2, [r2, #4]
 801500c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	429a      	cmp	r2, r3
 8015016:	d103      	bne.n	8015020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	689a      	ldr	r2, [r3, #8]
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2200      	movs	r2, #0
 8015024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	1e5a      	subs	r2, r3, #1
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	681b      	ldr	r3, [r3, #0]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3714      	adds	r7, #20
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr

08015040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b084      	sub	sp, #16
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d10a      	bne.n	801506a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015058:	f383 8811 	msr	BASEPRI, r3
 801505c:	f3bf 8f6f 	isb	sy
 8015060:	f3bf 8f4f 	dsb	sy
 8015064:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015066:	bf00      	nop
 8015068:	e7fe      	b.n	8015068 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801506a:	f003 f85b 	bl	8018124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015076:	68f9      	ldr	r1, [r7, #12]
 8015078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801507a:	fb01 f303 	mul.w	r3, r1, r3
 801507e:	441a      	add	r2, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2200      	movs	r2, #0
 8015088:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	681a      	ldr	r2, [r3, #0]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801509a:	3b01      	subs	r3, #1
 801509c:	68f9      	ldr	r1, [r7, #12]
 801509e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80150a0:	fb01 f303 	mul.w	r3, r1, r3
 80150a4:	441a      	add	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	22ff      	movs	r2, #255	; 0xff
 80150ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	22ff      	movs	r2, #255	; 0xff
 80150b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d114      	bne.n	80150ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	691b      	ldr	r3, [r3, #16]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d01a      	beq.n	80150fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	3310      	adds	r3, #16
 80150cc:	4618      	mov	r0, r3
 80150ce:	f001 fdfb 	bl	8016cc8 <xTaskRemoveFromEventList>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d012      	beq.n	80150fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80150d8:	4b0c      	ldr	r3, [pc, #48]	; (801510c <xQueueGenericReset+0xcc>)
 80150da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150de:	601a      	str	r2, [r3, #0]
 80150e0:	f3bf 8f4f 	dsb	sy
 80150e4:	f3bf 8f6f 	isb	sy
 80150e8:	e009      	b.n	80150fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	3310      	adds	r3, #16
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7ff fef2 	bl	8014ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	3324      	adds	r3, #36	; 0x24
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7ff feed 	bl	8014ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80150fe:	f003 f841 	bl	8018184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015102:	2301      	movs	r3, #1
}
 8015104:	4618      	mov	r0, r3
 8015106:	3710      	adds	r7, #16
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	e000ed04 	.word	0xe000ed04

08015110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015110:	b580      	push	{r7, lr}
 8015112:	b08e      	sub	sp, #56	; 0x38
 8015114:	af02      	add	r7, sp, #8
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d10a      	bne.n	801513a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015128:	f383 8811 	msr	BASEPRI, r3
 801512c:	f3bf 8f6f 	isb	sy
 8015130:	f3bf 8f4f 	dsb	sy
 8015134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015136:	bf00      	nop
 8015138:	e7fe      	b.n	8015138 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d10a      	bne.n	8015156 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015152:	bf00      	nop
 8015154:	e7fe      	b.n	8015154 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d002      	beq.n	8015162 <xQueueGenericCreateStatic+0x52>
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <xQueueGenericCreateStatic+0x56>
 8015162:	2301      	movs	r3, #1
 8015164:	e000      	b.n	8015168 <xQueueGenericCreateStatic+0x58>
 8015166:	2300      	movs	r3, #0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d10a      	bne.n	8015182 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015170:	f383 8811 	msr	BASEPRI, r3
 8015174:	f3bf 8f6f 	isb	sy
 8015178:	f3bf 8f4f 	dsb	sy
 801517c:	623b      	str	r3, [r7, #32]
}
 801517e:	bf00      	nop
 8015180:	e7fe      	b.n	8015180 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d102      	bne.n	801518e <xQueueGenericCreateStatic+0x7e>
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d101      	bne.n	8015192 <xQueueGenericCreateStatic+0x82>
 801518e:	2301      	movs	r3, #1
 8015190:	e000      	b.n	8015194 <xQueueGenericCreateStatic+0x84>
 8015192:	2300      	movs	r3, #0
 8015194:	2b00      	cmp	r3, #0
 8015196:	d10a      	bne.n	80151ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519c:	f383 8811 	msr	BASEPRI, r3
 80151a0:	f3bf 8f6f 	isb	sy
 80151a4:	f3bf 8f4f 	dsb	sy
 80151a8:	61fb      	str	r3, [r7, #28]
}
 80151aa:	bf00      	nop
 80151ac:	e7fe      	b.n	80151ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80151ae:	2350      	movs	r3, #80	; 0x50
 80151b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	2b50      	cmp	r3, #80	; 0x50
 80151b6:	d00a      	beq.n	80151ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80151b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151bc:	f383 8811 	msr	BASEPRI, r3
 80151c0:	f3bf 8f6f 	isb	sy
 80151c4:	f3bf 8f4f 	dsb	sy
 80151c8:	61bb      	str	r3, [r7, #24]
}
 80151ca:	bf00      	nop
 80151cc:	e7fe      	b.n	80151cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80151ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80151d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00d      	beq.n	80151f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80151da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151dc:	2201      	movs	r2, #1
 80151de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80151e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80151e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	4613      	mov	r3, r2
 80151ec:	687a      	ldr	r2, [r7, #4]
 80151ee:	68b9      	ldr	r1, [r7, #8]
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f000 f83f 	bl	8015274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80151f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3730      	adds	r7, #48	; 0x30
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015200:	b580      	push	{r7, lr}
 8015202:	b08a      	sub	sp, #40	; 0x28
 8015204:	af02      	add	r7, sp, #8
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	4613      	mov	r3, r2
 801520c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d10a      	bne.n	801522a <xQueueGenericCreate+0x2a>
	__asm volatile
 8015214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015218:	f383 8811 	msr	BASEPRI, r3
 801521c:	f3bf 8f6f 	isb	sy
 8015220:	f3bf 8f4f 	dsb	sy
 8015224:	613b      	str	r3, [r7, #16]
}
 8015226:	bf00      	nop
 8015228:	e7fe      	b.n	8015228 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	68ba      	ldr	r2, [r7, #8]
 801522e:	fb02 f303 	mul.w	r3, r2, r3
 8015232:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015234:	69fb      	ldr	r3, [r7, #28]
 8015236:	3350      	adds	r3, #80	; 0x50
 8015238:	4618      	mov	r0, r3
 801523a:	f003 f895 	bl	8018368 <pvPortMalloc>
 801523e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d011      	beq.n	801526a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015246:	69bb      	ldr	r3, [r7, #24]
 8015248:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	3350      	adds	r3, #80	; 0x50
 801524e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015250:	69bb      	ldr	r3, [r7, #24]
 8015252:	2200      	movs	r2, #0
 8015254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015258:	79fa      	ldrb	r2, [r7, #7]
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	9300      	str	r3, [sp, #0]
 801525e:	4613      	mov	r3, r2
 8015260:	697a      	ldr	r2, [r7, #20]
 8015262:	68b9      	ldr	r1, [r7, #8]
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f000 f805 	bl	8015274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801526a:	69bb      	ldr	r3, [r7, #24]
	}
 801526c:	4618      	mov	r0, r3
 801526e:	3720      	adds	r7, #32
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	60f8      	str	r0, [r7, #12]
 801527c:	60b9      	str	r1, [r7, #8]
 801527e:	607a      	str	r2, [r7, #4]
 8015280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d103      	bne.n	8015290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015288:	69bb      	ldr	r3, [r7, #24]
 801528a:	69ba      	ldr	r2, [r7, #24]
 801528c:	601a      	str	r2, [r3, #0]
 801528e:	e002      	b.n	8015296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	68fa      	ldr	r2, [r7, #12]
 801529a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	68ba      	ldr	r2, [r7, #8]
 80152a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80152a2:	2101      	movs	r1, #1
 80152a4:	69b8      	ldr	r0, [r7, #24]
 80152a6:	f7ff fecb 	bl	8015040 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	78fa      	ldrb	r2, [r7, #3]
 80152ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80152b2:	bf00      	nop
 80152b4:	3710      	adds	r7, #16
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}

080152ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80152ba:	b580      	push	{r7, lr}
 80152bc:	b082      	sub	sp, #8
 80152be:	af00      	add	r7, sp, #0
 80152c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d00e      	beq.n	80152e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2200      	movs	r2, #0
 80152cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2200      	movs	r2, #0
 80152d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2200      	movs	r2, #0
 80152d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80152da:	2300      	movs	r3, #0
 80152dc:	2200      	movs	r2, #0
 80152de:	2100      	movs	r1, #0
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f000 f90b 	bl	80154fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80152e6:	bf00      	nop
 80152e8:	3708      	adds	r7, #8
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b086      	sub	sp, #24
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	4603      	mov	r3, r0
 80152f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80152f8:	2301      	movs	r3, #1
 80152fa:	617b      	str	r3, [r7, #20]
 80152fc:	2300      	movs	r3, #0
 80152fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015300:	79fb      	ldrb	r3, [r7, #7]
 8015302:	461a      	mov	r2, r3
 8015304:	6939      	ldr	r1, [r7, #16]
 8015306:	6978      	ldr	r0, [r7, #20]
 8015308:	f7ff ff7a 	bl	8015200 <xQueueGenericCreate>
 801530c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801530e:	68f8      	ldr	r0, [r7, #12]
 8015310:	f7ff ffd3 	bl	80152ba <prvInitialiseMutex>

		return xNewQueue;
 8015314:	68fb      	ldr	r3, [r7, #12]
	}
 8015316:	4618      	mov	r0, r3
 8015318:	3718      	adds	r7, #24
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}

0801531e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801531e:	b580      	push	{r7, lr}
 8015320:	b088      	sub	sp, #32
 8015322:	af02      	add	r7, sp, #8
 8015324:	4603      	mov	r3, r0
 8015326:	6039      	str	r1, [r7, #0]
 8015328:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801532a:	2301      	movs	r3, #1
 801532c:	617b      	str	r3, [r7, #20]
 801532e:	2300      	movs	r3, #0
 8015330:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015332:	79fb      	ldrb	r3, [r7, #7]
 8015334:	9300      	str	r3, [sp, #0]
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	2200      	movs	r2, #0
 801533a:	6939      	ldr	r1, [r7, #16]
 801533c:	6978      	ldr	r0, [r7, #20]
 801533e:	f7ff fee7 	bl	8015110 <xQueueGenericCreateStatic>
 8015342:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f7ff ffb8 	bl	80152ba <prvInitialiseMutex>

		return xNewQueue;
 801534a:	68fb      	ldr	r3, [r7, #12]
	}
 801534c:	4618      	mov	r0, r3
 801534e:	3718      	adds	r7, #24
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015354:	b590      	push	{r4, r7, lr}
 8015356:	b087      	sub	sp, #28
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d10a      	bne.n	801537c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8015366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801536a:	f383 8811 	msr	BASEPRI, r3
 801536e:	f3bf 8f6f 	isb	sy
 8015372:	f3bf 8f4f 	dsb	sy
 8015376:	60fb      	str	r3, [r7, #12]
}
 8015378:	bf00      	nop
 801537a:	e7fe      	b.n	801537a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	689c      	ldr	r4, [r3, #8]
 8015380:	f001 fe64 	bl	801704c <xTaskGetCurrentTaskHandle>
 8015384:	4603      	mov	r3, r0
 8015386:	429c      	cmp	r4, r3
 8015388:	d111      	bne.n	80153ae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	68db      	ldr	r3, [r3, #12]
 801538e:	1e5a      	subs	r2, r3, #1
 8015390:	693b      	ldr	r3, [r7, #16]
 8015392:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d105      	bne.n	80153a8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801539c:	2300      	movs	r3, #0
 801539e:	2200      	movs	r2, #0
 80153a0:	2100      	movs	r1, #0
 80153a2:	6938      	ldr	r0, [r7, #16]
 80153a4:	f000 f8aa 	bl	80154fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80153a8:	2301      	movs	r3, #1
 80153aa:	617b      	str	r3, [r7, #20]
 80153ac:	e001      	b.n	80153b2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80153ae:	2300      	movs	r3, #0
 80153b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80153b2:	697b      	ldr	r3, [r7, #20]
	}
 80153b4:	4618      	mov	r0, r3
 80153b6:	371c      	adds	r7, #28
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd90      	pop	{r4, r7, pc}

080153bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80153bc:	b590      	push	{r4, r7, lr}
 80153be:	b087      	sub	sp, #28
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d10a      	bne.n	80153e6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80153d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d4:	f383 8811 	msr	BASEPRI, r3
 80153d8:	f3bf 8f6f 	isb	sy
 80153dc:	f3bf 8f4f 	dsb	sy
 80153e0:	60fb      	str	r3, [r7, #12]
}
 80153e2:	bf00      	nop
 80153e4:	e7fe      	b.n	80153e4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	689c      	ldr	r4, [r3, #8]
 80153ea:	f001 fe2f 	bl	801704c <xTaskGetCurrentTaskHandle>
 80153ee:	4603      	mov	r3, r0
 80153f0:	429c      	cmp	r4, r3
 80153f2:	d107      	bne.n	8015404 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	68db      	ldr	r3, [r3, #12]
 80153f8:	1c5a      	adds	r2, r3, #1
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80153fe:	2301      	movs	r3, #1
 8015400:	617b      	str	r3, [r7, #20]
 8015402:	e00c      	b.n	801541e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015404:	6839      	ldr	r1, [r7, #0]
 8015406:	6938      	ldr	r0, [r7, #16]
 8015408:	f000 fb7e 	bl	8015b08 <xQueueSemaphoreTake>
 801540c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d004      	beq.n	801541e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	68db      	ldr	r3, [r3, #12]
 8015418:	1c5a      	adds	r2, r3, #1
 801541a:	693b      	ldr	r3, [r7, #16]
 801541c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801541e:	697b      	ldr	r3, [r7, #20]
	}
 8015420:	4618      	mov	r0, r3
 8015422:	371c      	adds	r7, #28
 8015424:	46bd      	mov	sp, r7
 8015426:	bd90      	pop	{r4, r7, pc}

08015428 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015428:	b580      	push	{r7, lr}
 801542a:	b08a      	sub	sp, #40	; 0x28
 801542c:	af02      	add	r7, sp, #8
 801542e:	60f8      	str	r0, [r7, #12]
 8015430:	60b9      	str	r1, [r7, #8]
 8015432:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10a      	bne.n	8015450 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801543e:	f383 8811 	msr	BASEPRI, r3
 8015442:	f3bf 8f6f 	isb	sy
 8015446:	f3bf 8f4f 	dsb	sy
 801544a:	61bb      	str	r3, [r7, #24]
}
 801544c:	bf00      	nop
 801544e:	e7fe      	b.n	801544e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015450:	68ba      	ldr	r2, [r7, #8]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	429a      	cmp	r2, r3
 8015456:	d90a      	bls.n	801546e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801545c:	f383 8811 	msr	BASEPRI, r3
 8015460:	f3bf 8f6f 	isb	sy
 8015464:	f3bf 8f4f 	dsb	sy
 8015468:	617b      	str	r3, [r7, #20]
}
 801546a:	bf00      	nop
 801546c:	e7fe      	b.n	801546c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801546e:	2302      	movs	r3, #2
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2200      	movs	r2, #0
 8015476:	2100      	movs	r1, #0
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	f7ff fe49 	bl	8015110 <xQueueGenericCreateStatic>
 801547e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015480:	69fb      	ldr	r3, [r7, #28]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d002      	beq.n	801548c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	68ba      	ldr	r2, [r7, #8]
 801548a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801548c:	69fb      	ldr	r3, [r7, #28]
	}
 801548e:	4618      	mov	r0, r3
 8015490:	3720      	adds	r7, #32
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}

08015496 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015496:	b580      	push	{r7, lr}
 8015498:	b086      	sub	sp, #24
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
 801549e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d10a      	bne.n	80154bc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80154a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154aa:	f383 8811 	msr	BASEPRI, r3
 80154ae:	f3bf 8f6f 	isb	sy
 80154b2:	f3bf 8f4f 	dsb	sy
 80154b6:	613b      	str	r3, [r7, #16]
}
 80154b8:	bf00      	nop
 80154ba:	e7fe      	b.n	80154ba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80154bc:	683a      	ldr	r2, [r7, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d90a      	bls.n	80154da <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80154c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c8:	f383 8811 	msr	BASEPRI, r3
 80154cc:	f3bf 8f6f 	isb	sy
 80154d0:	f3bf 8f4f 	dsb	sy
 80154d4:	60fb      	str	r3, [r7, #12]
}
 80154d6:	bf00      	nop
 80154d8:	e7fe      	b.n	80154d8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80154da:	2202      	movs	r2, #2
 80154dc:	2100      	movs	r1, #0
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f7ff fe8e 	bl	8015200 <xQueueGenericCreate>
 80154e4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d002      	beq.n	80154f2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	683a      	ldr	r2, [r7, #0]
 80154f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80154f2:	697b      	ldr	r3, [r7, #20]
	}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3718      	adds	r7, #24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b08e      	sub	sp, #56	; 0x38
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801550a:	2300      	movs	r3, #0
 801550c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015514:	2b00      	cmp	r3, #0
 8015516:	d10a      	bne.n	801552e <xQueueGenericSend+0x32>
	__asm volatile
 8015518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551c:	f383 8811 	msr	BASEPRI, r3
 8015520:	f3bf 8f6f 	isb	sy
 8015524:	f3bf 8f4f 	dsb	sy
 8015528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801552a:	bf00      	nop
 801552c:	e7fe      	b.n	801552c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d103      	bne.n	801553c <xQueueGenericSend+0x40>
 8015534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015538:	2b00      	cmp	r3, #0
 801553a:	d101      	bne.n	8015540 <xQueueGenericSend+0x44>
 801553c:	2301      	movs	r3, #1
 801553e:	e000      	b.n	8015542 <xQueueGenericSend+0x46>
 8015540:	2300      	movs	r3, #0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10a      	bne.n	801555c <xQueueGenericSend+0x60>
	__asm volatile
 8015546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801554a:	f383 8811 	msr	BASEPRI, r3
 801554e:	f3bf 8f6f 	isb	sy
 8015552:	f3bf 8f4f 	dsb	sy
 8015556:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015558:	bf00      	nop
 801555a:	e7fe      	b.n	801555a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	2b02      	cmp	r3, #2
 8015560:	d103      	bne.n	801556a <xQueueGenericSend+0x6e>
 8015562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015566:	2b01      	cmp	r3, #1
 8015568:	d101      	bne.n	801556e <xQueueGenericSend+0x72>
 801556a:	2301      	movs	r3, #1
 801556c:	e000      	b.n	8015570 <xQueueGenericSend+0x74>
 801556e:	2300      	movs	r3, #0
 8015570:	2b00      	cmp	r3, #0
 8015572:	d10a      	bne.n	801558a <xQueueGenericSend+0x8e>
	__asm volatile
 8015574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015578:	f383 8811 	msr	BASEPRI, r3
 801557c:	f3bf 8f6f 	isb	sy
 8015580:	f3bf 8f4f 	dsb	sy
 8015584:	623b      	str	r3, [r7, #32]
}
 8015586:	bf00      	nop
 8015588:	e7fe      	b.n	8015588 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801558a:	f001 fd6f 	bl	801706c <xTaskGetSchedulerState>
 801558e:	4603      	mov	r3, r0
 8015590:	2b00      	cmp	r3, #0
 8015592:	d102      	bne.n	801559a <xQueueGenericSend+0x9e>
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d101      	bne.n	801559e <xQueueGenericSend+0xa2>
 801559a:	2301      	movs	r3, #1
 801559c:	e000      	b.n	80155a0 <xQueueGenericSend+0xa4>
 801559e:	2300      	movs	r3, #0
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d10a      	bne.n	80155ba <xQueueGenericSend+0xbe>
	__asm volatile
 80155a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a8:	f383 8811 	msr	BASEPRI, r3
 80155ac:	f3bf 8f6f 	isb	sy
 80155b0:	f3bf 8f4f 	dsb	sy
 80155b4:	61fb      	str	r3, [r7, #28]
}
 80155b6:	bf00      	nop
 80155b8:	e7fe      	b.n	80155b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80155ba:	f002 fdb3 	bl	8018124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80155c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d302      	bcc.n	80155d0 <xQueueGenericSend+0xd4>
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	2b02      	cmp	r3, #2
 80155ce:	d129      	bne.n	8015624 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80155d0:	683a      	ldr	r2, [r7, #0]
 80155d2:	68b9      	ldr	r1, [r7, #8]
 80155d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155d6:	f000 fc5e 	bl	8015e96 <prvCopyDataToQueue>
 80155da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80155dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d010      	beq.n	8015606 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80155e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e6:	3324      	adds	r3, #36	; 0x24
 80155e8:	4618      	mov	r0, r3
 80155ea:	f001 fb6d 	bl	8016cc8 <xTaskRemoveFromEventList>
 80155ee:	4603      	mov	r3, r0
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d013      	beq.n	801561c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80155f4:	4b3f      	ldr	r3, [pc, #252]	; (80156f4 <xQueueGenericSend+0x1f8>)
 80155f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155fa:	601a      	str	r2, [r3, #0]
 80155fc:	f3bf 8f4f 	dsb	sy
 8015600:	f3bf 8f6f 	isb	sy
 8015604:	e00a      	b.n	801561c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015608:	2b00      	cmp	r3, #0
 801560a:	d007      	beq.n	801561c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801560c:	4b39      	ldr	r3, [pc, #228]	; (80156f4 <xQueueGenericSend+0x1f8>)
 801560e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015612:	601a      	str	r2, [r3, #0]
 8015614:	f3bf 8f4f 	dsb	sy
 8015618:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801561c:	f002 fdb2 	bl	8018184 <vPortExitCritical>
				return pdPASS;
 8015620:	2301      	movs	r3, #1
 8015622:	e063      	b.n	80156ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d103      	bne.n	8015632 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801562a:	f002 fdab 	bl	8018184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801562e:	2300      	movs	r3, #0
 8015630:	e05c      	b.n	80156ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015634:	2b00      	cmp	r3, #0
 8015636:	d106      	bne.n	8015646 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015638:	f107 0314 	add.w	r3, r7, #20
 801563c:	4618      	mov	r0, r3
 801563e:	f001 fba7 	bl	8016d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015642:	2301      	movs	r3, #1
 8015644:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015646:	f002 fd9d 	bl	8018184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801564a:	f001 f8f7 	bl	801683c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801564e:	f002 fd69 	bl	8018124 <vPortEnterCritical>
 8015652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015658:	b25b      	sxtb	r3, r3
 801565a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801565e:	d103      	bne.n	8015668 <xQueueGenericSend+0x16c>
 8015660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015662:	2200      	movs	r2, #0
 8015664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801566a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801566e:	b25b      	sxtb	r3, r3
 8015670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015674:	d103      	bne.n	801567e <xQueueGenericSend+0x182>
 8015676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015678:	2200      	movs	r2, #0
 801567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801567e:	f002 fd81 	bl	8018184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015682:	1d3a      	adds	r2, r7, #4
 8015684:	f107 0314 	add.w	r3, r7, #20
 8015688:	4611      	mov	r1, r2
 801568a:	4618      	mov	r0, r3
 801568c:	f001 fb96 	bl	8016dbc <xTaskCheckForTimeOut>
 8015690:	4603      	mov	r3, r0
 8015692:	2b00      	cmp	r3, #0
 8015694:	d124      	bne.n	80156e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015698:	f000 fcf5 	bl	8016086 <prvIsQueueFull>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d018      	beq.n	80156d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80156a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a4:	3310      	adds	r3, #16
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	4611      	mov	r1, r2
 80156aa:	4618      	mov	r0, r3
 80156ac:	f001 fabc 	bl	8016c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80156b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156b2:	f000 fc80 	bl	8015fb6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80156b6:	f001 f8cf 	bl	8016858 <xTaskResumeAll>
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	f47f af7c 	bne.w	80155ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80156c2:	4b0c      	ldr	r3, [pc, #48]	; (80156f4 <xQueueGenericSend+0x1f8>)
 80156c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156c8:	601a      	str	r2, [r3, #0]
 80156ca:	f3bf 8f4f 	dsb	sy
 80156ce:	f3bf 8f6f 	isb	sy
 80156d2:	e772      	b.n	80155ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80156d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156d6:	f000 fc6e 	bl	8015fb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80156da:	f001 f8bd 	bl	8016858 <xTaskResumeAll>
 80156de:	e76c      	b.n	80155ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80156e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156e2:	f000 fc68 	bl	8015fb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80156e6:	f001 f8b7 	bl	8016858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80156ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3738      	adds	r7, #56	; 0x38
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	e000ed04 	.word	0xe000ed04

080156f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b090      	sub	sp, #64	; 0x40
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
 8015704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801570c:	2b00      	cmp	r3, #0
 801570e:	d10a      	bne.n	8015726 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015714:	f383 8811 	msr	BASEPRI, r3
 8015718:	f3bf 8f6f 	isb	sy
 801571c:	f3bf 8f4f 	dsb	sy
 8015720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015722:	bf00      	nop
 8015724:	e7fe      	b.n	8015724 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d103      	bne.n	8015734 <xQueueGenericSendFromISR+0x3c>
 801572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015730:	2b00      	cmp	r3, #0
 8015732:	d101      	bne.n	8015738 <xQueueGenericSendFromISR+0x40>
 8015734:	2301      	movs	r3, #1
 8015736:	e000      	b.n	801573a <xQueueGenericSendFromISR+0x42>
 8015738:	2300      	movs	r3, #0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d10a      	bne.n	8015754 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015742:	f383 8811 	msr	BASEPRI, r3
 8015746:	f3bf 8f6f 	isb	sy
 801574a:	f3bf 8f4f 	dsb	sy
 801574e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015750:	bf00      	nop
 8015752:	e7fe      	b.n	8015752 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	2b02      	cmp	r3, #2
 8015758:	d103      	bne.n	8015762 <xQueueGenericSendFromISR+0x6a>
 801575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801575e:	2b01      	cmp	r3, #1
 8015760:	d101      	bne.n	8015766 <xQueueGenericSendFromISR+0x6e>
 8015762:	2301      	movs	r3, #1
 8015764:	e000      	b.n	8015768 <xQueueGenericSendFromISR+0x70>
 8015766:	2300      	movs	r3, #0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d10a      	bne.n	8015782 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015770:	f383 8811 	msr	BASEPRI, r3
 8015774:	f3bf 8f6f 	isb	sy
 8015778:	f3bf 8f4f 	dsb	sy
 801577c:	623b      	str	r3, [r7, #32]
}
 801577e:	bf00      	nop
 8015780:	e7fe      	b.n	8015780 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015782:	f002 fdb1 	bl	80182e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015786:	f3ef 8211 	mrs	r2, BASEPRI
 801578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578e:	f383 8811 	msr	BASEPRI, r3
 8015792:	f3bf 8f6f 	isb	sy
 8015796:	f3bf 8f4f 	dsb	sy
 801579a:	61fa      	str	r2, [r7, #28]
 801579c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801579e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80157a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d302      	bcc.n	80157b4 <xQueueGenericSendFromISR+0xbc>
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	2b02      	cmp	r3, #2
 80157b2:	d12f      	bne.n	8015814 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80157b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80157ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80157c4:	683a      	ldr	r2, [r7, #0]
 80157c6:	68b9      	ldr	r1, [r7, #8]
 80157c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80157ca:	f000 fb64 	bl	8015e96 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80157ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80157d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157d6:	d112      	bne.n	80157fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d016      	beq.n	801580e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157e2:	3324      	adds	r3, #36	; 0x24
 80157e4:	4618      	mov	r0, r3
 80157e6:	f001 fa6f 	bl	8016cc8 <xTaskRemoveFromEventList>
 80157ea:	4603      	mov	r3, r0
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d00e      	beq.n	801580e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d00b      	beq.n	801580e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2201      	movs	r2, #1
 80157fa:	601a      	str	r2, [r3, #0]
 80157fc:	e007      	b.n	801580e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80157fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015802:	3301      	adds	r3, #1
 8015804:	b2db      	uxtb	r3, r3
 8015806:	b25a      	sxtb	r2, r3
 8015808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801580a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801580e:	2301      	movs	r3, #1
 8015810:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015812:	e001      	b.n	8015818 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015814:	2300      	movs	r3, #0
 8015816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801581a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015822:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015826:	4618      	mov	r0, r3
 8015828:	3740      	adds	r7, #64	; 0x40
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}

0801582e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b08e      	sub	sp, #56	; 0x38
 8015832:	af00      	add	r7, sp, #0
 8015834:	6078      	str	r0, [r7, #4]
 8015836:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801583e:	2b00      	cmp	r3, #0
 8015840:	d10a      	bne.n	8015858 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015846:	f383 8811 	msr	BASEPRI, r3
 801584a:	f3bf 8f6f 	isb	sy
 801584e:	f3bf 8f4f 	dsb	sy
 8015852:	623b      	str	r3, [r7, #32]
}
 8015854:	bf00      	nop
 8015856:	e7fe      	b.n	8015856 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801585c:	2b00      	cmp	r3, #0
 801585e:	d00a      	beq.n	8015876 <xQueueGiveFromISR+0x48>
	__asm volatile
 8015860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015864:	f383 8811 	msr	BASEPRI, r3
 8015868:	f3bf 8f6f 	isb	sy
 801586c:	f3bf 8f4f 	dsb	sy
 8015870:	61fb      	str	r3, [r7, #28]
}
 8015872:	bf00      	nop
 8015874:	e7fe      	b.n	8015874 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d103      	bne.n	8015886 <xQueueGiveFromISR+0x58>
 801587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015880:	689b      	ldr	r3, [r3, #8]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d101      	bne.n	801588a <xQueueGiveFromISR+0x5c>
 8015886:	2301      	movs	r3, #1
 8015888:	e000      	b.n	801588c <xQueueGiveFromISR+0x5e>
 801588a:	2300      	movs	r3, #0
 801588c:	2b00      	cmp	r3, #0
 801588e:	d10a      	bne.n	80158a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8015890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015894:	f383 8811 	msr	BASEPRI, r3
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	61bb      	str	r3, [r7, #24]
}
 80158a2:	bf00      	nop
 80158a4:	e7fe      	b.n	80158a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80158a6:	f002 fd1f 	bl	80182e8 <vPortValidateInterruptPriority>
	__asm volatile
 80158aa:	f3ef 8211 	mrs	r2, BASEPRI
 80158ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b2:	f383 8811 	msr	BASEPRI, r3
 80158b6:	f3bf 8f6f 	isb	sy
 80158ba:	f3bf 8f4f 	dsb	sy
 80158be:	617a      	str	r2, [r7, #20]
 80158c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80158c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80158c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80158c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80158cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d22b      	bcs.n	801592e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80158d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80158e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e2:	1c5a      	adds	r2, r3, #1
 80158e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80158e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80158ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158f0:	d112      	bne.n	8015918 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d016      	beq.n	8015928 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fc:	3324      	adds	r3, #36	; 0x24
 80158fe:	4618      	mov	r0, r3
 8015900:	f001 f9e2 	bl	8016cc8 <xTaskRemoveFromEventList>
 8015904:	4603      	mov	r3, r0
 8015906:	2b00      	cmp	r3, #0
 8015908:	d00e      	beq.n	8015928 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d00b      	beq.n	8015928 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	2201      	movs	r2, #1
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	e007      	b.n	8015928 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801591c:	3301      	adds	r3, #1
 801591e:	b2db      	uxtb	r3, r3
 8015920:	b25a      	sxtb	r2, r3
 8015922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015928:	2301      	movs	r3, #1
 801592a:	637b      	str	r3, [r7, #52]	; 0x34
 801592c:	e001      	b.n	8015932 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801592e:	2300      	movs	r3, #0
 8015930:	637b      	str	r3, [r7, #52]	; 0x34
 8015932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015934:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	f383 8811 	msr	BASEPRI, r3
}
 801593c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015940:	4618      	mov	r0, r3
 8015942:	3738      	adds	r7, #56	; 0x38
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b08c      	sub	sp, #48	; 0x30
 801594c:	af00      	add	r7, sp, #0
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015954:	2300      	movs	r3, #0
 8015956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801595e:	2b00      	cmp	r3, #0
 8015960:	d10a      	bne.n	8015978 <xQueueReceive+0x30>
	__asm volatile
 8015962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015966:	f383 8811 	msr	BASEPRI, r3
 801596a:	f3bf 8f6f 	isb	sy
 801596e:	f3bf 8f4f 	dsb	sy
 8015972:	623b      	str	r3, [r7, #32]
}
 8015974:	bf00      	nop
 8015976:	e7fe      	b.n	8015976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d103      	bne.n	8015986 <xQueueReceive+0x3e>
 801597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015982:	2b00      	cmp	r3, #0
 8015984:	d101      	bne.n	801598a <xQueueReceive+0x42>
 8015986:	2301      	movs	r3, #1
 8015988:	e000      	b.n	801598c <xQueueReceive+0x44>
 801598a:	2300      	movs	r3, #0
 801598c:	2b00      	cmp	r3, #0
 801598e:	d10a      	bne.n	80159a6 <xQueueReceive+0x5e>
	__asm volatile
 8015990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015994:	f383 8811 	msr	BASEPRI, r3
 8015998:	f3bf 8f6f 	isb	sy
 801599c:	f3bf 8f4f 	dsb	sy
 80159a0:	61fb      	str	r3, [r7, #28]
}
 80159a2:	bf00      	nop
 80159a4:	e7fe      	b.n	80159a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80159a6:	f001 fb61 	bl	801706c <xTaskGetSchedulerState>
 80159aa:	4603      	mov	r3, r0
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d102      	bne.n	80159b6 <xQueueReceive+0x6e>
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d101      	bne.n	80159ba <xQueueReceive+0x72>
 80159b6:	2301      	movs	r3, #1
 80159b8:	e000      	b.n	80159bc <xQueueReceive+0x74>
 80159ba:	2300      	movs	r3, #0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d10a      	bne.n	80159d6 <xQueueReceive+0x8e>
	__asm volatile
 80159c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159c4:	f383 8811 	msr	BASEPRI, r3
 80159c8:	f3bf 8f6f 	isb	sy
 80159cc:	f3bf 8f4f 	dsb	sy
 80159d0:	61bb      	str	r3, [r7, #24]
}
 80159d2:	bf00      	nop
 80159d4:	e7fe      	b.n	80159d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80159d6:	f002 fba5 	bl	8018124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80159da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80159e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d01f      	beq.n	8015a26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80159e6:	68b9      	ldr	r1, [r7, #8]
 80159e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159ea:	f000 fabe 	bl	8015f6a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	1e5a      	subs	r2, r3, #1
 80159f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f8:	691b      	ldr	r3, [r3, #16]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d00f      	beq.n	8015a1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80159fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a00:	3310      	adds	r3, #16
 8015a02:	4618      	mov	r0, r3
 8015a04:	f001 f960 	bl	8016cc8 <xTaskRemoveFromEventList>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d007      	beq.n	8015a1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015a0e:	4b3d      	ldr	r3, [pc, #244]	; (8015b04 <xQueueReceive+0x1bc>)
 8015a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a14:	601a      	str	r2, [r3, #0]
 8015a16:	f3bf 8f4f 	dsb	sy
 8015a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015a1e:	f002 fbb1 	bl	8018184 <vPortExitCritical>
				return pdPASS;
 8015a22:	2301      	movs	r3, #1
 8015a24:	e069      	b.n	8015afa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d103      	bne.n	8015a34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015a2c:	f002 fbaa 	bl	8018184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015a30:	2300      	movs	r3, #0
 8015a32:	e062      	b.n	8015afa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d106      	bne.n	8015a48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015a3a:	f107 0310 	add.w	r3, r7, #16
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f001 f9a6 	bl	8016d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015a44:	2301      	movs	r3, #1
 8015a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015a48:	f002 fb9c 	bl	8018184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015a4c:	f000 fef6 	bl	801683c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015a50:	f002 fb68 	bl	8018124 <vPortEnterCritical>
 8015a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015a5a:	b25b      	sxtb	r3, r3
 8015a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a60:	d103      	bne.n	8015a6a <xQueueReceive+0x122>
 8015a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a64:	2200      	movs	r2, #0
 8015a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a70:	b25b      	sxtb	r3, r3
 8015a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a76:	d103      	bne.n	8015a80 <xQueueReceive+0x138>
 8015a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a80:	f002 fb80 	bl	8018184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a84:	1d3a      	adds	r2, r7, #4
 8015a86:	f107 0310 	add.w	r3, r7, #16
 8015a8a:	4611      	mov	r1, r2
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f001 f995 	bl	8016dbc <xTaskCheckForTimeOut>
 8015a92:	4603      	mov	r3, r0
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d123      	bne.n	8015ae0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a9a:	f000 fade 	bl	801605a <prvIsQueueEmpty>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d017      	beq.n	8015ad4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa6:	3324      	adds	r3, #36	; 0x24
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	4611      	mov	r1, r2
 8015aac:	4618      	mov	r0, r3
 8015aae:	f001 f8bb 	bl	8016c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ab4:	f000 fa7f 	bl	8015fb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015ab8:	f000 fece 	bl	8016858 <xTaskResumeAll>
 8015abc:	4603      	mov	r3, r0
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d189      	bne.n	80159d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015ac2:	4b10      	ldr	r3, [pc, #64]	; (8015b04 <xQueueReceive+0x1bc>)
 8015ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ac8:	601a      	str	r2, [r3, #0]
 8015aca:	f3bf 8f4f 	dsb	sy
 8015ace:	f3bf 8f6f 	isb	sy
 8015ad2:	e780      	b.n	80159d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ad6:	f000 fa6e 	bl	8015fb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015ada:	f000 febd 	bl	8016858 <xTaskResumeAll>
 8015ade:	e77a      	b.n	80159d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ae2:	f000 fa68 	bl	8015fb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ae6:	f000 feb7 	bl	8016858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015aec:	f000 fab5 	bl	801605a <prvIsQueueEmpty>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f43f af6f 	beq.w	80159d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3730      	adds	r7, #48	; 0x30
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}
 8015b02:	bf00      	nop
 8015b04:	e000ed04 	.word	0xe000ed04

08015b08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b08e      	sub	sp, #56	; 0x38
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015b12:	2300      	movs	r3, #0
 8015b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10a      	bne.n	8015b3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	623b      	str	r3, [r7, #32]
}
 8015b36:	bf00      	nop
 8015b38:	e7fe      	b.n	8015b38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00a      	beq.n	8015b58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b46:	f383 8811 	msr	BASEPRI, r3
 8015b4a:	f3bf 8f6f 	isb	sy
 8015b4e:	f3bf 8f4f 	dsb	sy
 8015b52:	61fb      	str	r3, [r7, #28]
}
 8015b54:	bf00      	nop
 8015b56:	e7fe      	b.n	8015b56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b58:	f001 fa88 	bl	801706c <xTaskGetSchedulerState>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d102      	bne.n	8015b68 <xQueueSemaphoreTake+0x60>
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d101      	bne.n	8015b6c <xQueueSemaphoreTake+0x64>
 8015b68:	2301      	movs	r3, #1
 8015b6a:	e000      	b.n	8015b6e <xQueueSemaphoreTake+0x66>
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d10a      	bne.n	8015b88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b76:	f383 8811 	msr	BASEPRI, r3
 8015b7a:	f3bf 8f6f 	isb	sy
 8015b7e:	f3bf 8f4f 	dsb	sy
 8015b82:	61bb      	str	r3, [r7, #24]
}
 8015b84:	bf00      	nop
 8015b86:	e7fe      	b.n	8015b86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b88:	f002 facc 	bl	8018124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d024      	beq.n	8015be2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9a:	1e5a      	subs	r2, r3, #1
 8015b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d104      	bne.n	8015bb2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015ba8:	f001 fbd6 	bl	8017358 <pvTaskIncrementMutexHeldCount>
 8015bac:	4602      	mov	r2, r0
 8015bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb4:	691b      	ldr	r3, [r3, #16]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d00f      	beq.n	8015bda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bbc:	3310      	adds	r3, #16
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f001 f882 	bl	8016cc8 <xTaskRemoveFromEventList>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d007      	beq.n	8015bda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015bca:	4b54      	ldr	r3, [pc, #336]	; (8015d1c <xQueueSemaphoreTake+0x214>)
 8015bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bd0:	601a      	str	r2, [r3, #0]
 8015bd2:	f3bf 8f4f 	dsb	sy
 8015bd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015bda:	f002 fad3 	bl	8018184 <vPortExitCritical>
				return pdPASS;
 8015bde:	2301      	movs	r3, #1
 8015be0:	e097      	b.n	8015d12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d111      	bne.n	8015c0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d00a      	beq.n	8015c04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	617b      	str	r3, [r7, #20]
}
 8015c00:	bf00      	nop
 8015c02:	e7fe      	b.n	8015c02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015c04:	f002 fabe 	bl	8018184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	e082      	b.n	8015d12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d106      	bne.n	8015c20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c12:	f107 030c 	add.w	r3, r7, #12
 8015c16:	4618      	mov	r0, r3
 8015c18:	f001 f8ba 	bl	8016d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c20:	f002 fab0 	bl	8018184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c24:	f000 fe0a 	bl	801683c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c28:	f002 fa7c 	bl	8018124 <vPortEnterCritical>
 8015c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c32:	b25b      	sxtb	r3, r3
 8015c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c38:	d103      	bne.n	8015c42 <xQueueSemaphoreTake+0x13a>
 8015c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c48:	b25b      	sxtb	r3, r3
 8015c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c4e:	d103      	bne.n	8015c58 <xQueueSemaphoreTake+0x150>
 8015c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c52:	2200      	movs	r2, #0
 8015c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c58:	f002 fa94 	bl	8018184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c5c:	463a      	mov	r2, r7
 8015c5e:	f107 030c 	add.w	r3, r7, #12
 8015c62:	4611      	mov	r1, r2
 8015c64:	4618      	mov	r0, r3
 8015c66:	f001 f8a9 	bl	8016dbc <xTaskCheckForTimeOut>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d132      	bne.n	8015cd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c72:	f000 f9f2 	bl	801605a <prvIsQueueEmpty>
 8015c76:	4603      	mov	r3, r0
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d026      	beq.n	8015cca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d109      	bne.n	8015c98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015c84:	f002 fa4e 	bl	8018124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8a:	689b      	ldr	r3, [r3, #8]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f001 fa0b 	bl	80170a8 <xTaskPriorityInherit>
 8015c92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015c94:	f002 fa76 	bl	8018184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9a:	3324      	adds	r3, #36	; 0x24
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	4611      	mov	r1, r2
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f000 ffc1 	bl	8016c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ca8:	f000 f985 	bl	8015fb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015cac:	f000 fdd4 	bl	8016858 <xTaskResumeAll>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	f47f af68 	bne.w	8015b88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015cb8:	4b18      	ldr	r3, [pc, #96]	; (8015d1c <xQueueSemaphoreTake+0x214>)
 8015cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cbe:	601a      	str	r2, [r3, #0]
 8015cc0:	f3bf 8f4f 	dsb	sy
 8015cc4:	f3bf 8f6f 	isb	sy
 8015cc8:	e75e      	b.n	8015b88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ccc:	f000 f973 	bl	8015fb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015cd0:	f000 fdc2 	bl	8016858 <xTaskResumeAll>
 8015cd4:	e758      	b.n	8015b88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cd8:	f000 f96d 	bl	8015fb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015cdc:	f000 fdbc 	bl	8016858 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ce2:	f000 f9ba 	bl	801605a <prvIsQueueEmpty>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f43f af4d 	beq.w	8015b88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d00d      	beq.n	8015d10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015cf4:	f002 fa16 	bl	8018124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cfa:	f000 f8b4 	bl	8015e66 <prvGetDisinheritPriorityAfterTimeout>
 8015cfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	689b      	ldr	r3, [r3, #8]
 8015d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d06:	4618      	mov	r0, r3
 8015d08:	f001 faa4 	bl	8017254 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015d0c:	f002 fa3a 	bl	8018184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015d10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3738      	adds	r7, #56	; 0x38
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	e000ed04 	.word	0xe000ed04

08015d20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b08e      	sub	sp, #56	; 0x38
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	60f8      	str	r0, [r7, #12]
 8015d28:	60b9      	str	r1, [r7, #8]
 8015d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d10a      	bne.n	8015d4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d3a:	f383 8811 	msr	BASEPRI, r3
 8015d3e:	f3bf 8f6f 	isb	sy
 8015d42:	f3bf 8f4f 	dsb	sy
 8015d46:	623b      	str	r3, [r7, #32]
}
 8015d48:	bf00      	nop
 8015d4a:	e7fe      	b.n	8015d4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d103      	bne.n	8015d5a <xQueueReceiveFromISR+0x3a>
 8015d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d101      	bne.n	8015d5e <xQueueReceiveFromISR+0x3e>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	e000      	b.n	8015d60 <xQueueReceiveFromISR+0x40>
 8015d5e:	2300      	movs	r3, #0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d10a      	bne.n	8015d7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	61fb      	str	r3, [r7, #28]
}
 8015d76:	bf00      	nop
 8015d78:	e7fe      	b.n	8015d78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d7a:	f002 fab5 	bl	80182e8 <vPortValidateInterruptPriority>
	__asm volatile
 8015d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8015d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d86:	f383 8811 	msr	BASEPRI, r3
 8015d8a:	f3bf 8f6f 	isb	sy
 8015d8e:	f3bf 8f4f 	dsb	sy
 8015d92:	61ba      	str	r2, [r7, #24]
 8015d94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015d96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d02f      	beq.n	8015e06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015db0:	68b9      	ldr	r1, [r7, #8]
 8015db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015db4:	f000 f8d9 	bl	8015f6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dba:	1e5a      	subs	r2, r3, #1
 8015dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015dc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015dc8:	d112      	bne.n	8015df0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dcc:	691b      	ldr	r3, [r3, #16]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d016      	beq.n	8015e00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	3310      	adds	r3, #16
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f000 ff76 	bl	8016cc8 <xTaskRemoveFromEventList>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00e      	beq.n	8015e00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00b      	beq.n	8015e00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2201      	movs	r2, #1
 8015dec:	601a      	str	r2, [r3, #0]
 8015dee:	e007      	b.n	8015e00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015df4:	3301      	adds	r3, #1
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	b25a      	sxtb	r2, r3
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015e00:	2301      	movs	r3, #1
 8015e02:	637b      	str	r3, [r7, #52]	; 0x34
 8015e04:	e001      	b.n	8015e0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	637b      	str	r3, [r7, #52]	; 0x34
 8015e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	f383 8811 	msr	BASEPRI, r3
}
 8015e14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3738      	adds	r7, #56	; 0x38
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d10a      	bne.n	8015e48 <vQueueDelete+0x28>
	__asm volatile
 8015e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e36:	f383 8811 	msr	BASEPRI, r3
 8015e3a:	f3bf 8f6f 	isb	sy
 8015e3e:	f3bf 8f4f 	dsb	sy
 8015e42:	60bb      	str	r3, [r7, #8]
}
 8015e44:	bf00      	nop
 8015e46:	e7fe      	b.n	8015e46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015e48:	68f8      	ldr	r0, [r7, #12]
 8015e4a:	f000 f95f 	bl	801610c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d102      	bne.n	8015e5e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8015e58:	68f8      	ldr	r0, [r7, #12]
 8015e5a:	f002 fb51 	bl	8018500 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015e5e:	bf00      	nop
 8015e60:	3710      	adds	r7, #16
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015e66:	b480      	push	{r7}
 8015e68:	b085      	sub	sp, #20
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d006      	beq.n	8015e84 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8015e80:	60fb      	str	r3, [r7, #12]
 8015e82:	e001      	b.n	8015e88 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015e84:	2300      	movs	r3, #0
 8015e86:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015e88:	68fb      	ldr	r3, [r7, #12]
	}
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	3714      	adds	r7, #20
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e94:	4770      	bx	lr

08015e96 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b086      	sub	sp, #24
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	60f8      	str	r0, [r7, #12]
 8015e9e:	60b9      	str	r1, [r7, #8]
 8015ea0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eaa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d10d      	bne.n	8015ed0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d14d      	bne.n	8015f58 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	689b      	ldr	r3, [r3, #8]
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f001 f959 	bl	8017178 <xTaskPriorityDisinherit>
 8015ec6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	609a      	str	r2, [r3, #8]
 8015ece:	e043      	b.n	8015f58 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d119      	bne.n	8015f0a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	6858      	ldr	r0, [r3, #4]
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ede:	461a      	mov	r2, r3
 8015ee0:	68b9      	ldr	r1, [r7, #8]
 8015ee2:	f004 fa1f 	bl	801a324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	685a      	ldr	r2, [r3, #4]
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eee:	441a      	add	r2, r3
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	685a      	ldr	r2, [r3, #4]
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	689b      	ldr	r3, [r3, #8]
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d32b      	bcc.n	8015f58 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	681a      	ldr	r2, [r3, #0]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	605a      	str	r2, [r3, #4]
 8015f08:	e026      	b.n	8015f58 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	68d8      	ldr	r0, [r3, #12]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f12:	461a      	mov	r2, r3
 8015f14:	68b9      	ldr	r1, [r7, #8]
 8015f16:	f004 fa05 	bl	801a324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	68da      	ldr	r2, [r3, #12]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f22:	425b      	negs	r3, r3
 8015f24:	441a      	add	r2, r3
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	68da      	ldr	r2, [r3, #12]
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d207      	bcs.n	8015f46 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	689a      	ldr	r2, [r3, #8]
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f3e:	425b      	negs	r3, r3
 8015f40:	441a      	add	r2, r3
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d105      	bne.n	8015f58 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d002      	beq.n	8015f58 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f52:	693b      	ldr	r3, [r7, #16]
 8015f54:	3b01      	subs	r3, #1
 8015f56:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015f58:	693b      	ldr	r3, [r7, #16]
 8015f5a:	1c5a      	adds	r2, r3, #1
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f60:	697b      	ldr	r3, [r7, #20]
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3718      	adds	r7, #24
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}

08015f6a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f6a:	b580      	push	{r7, lr}
 8015f6c:	b082      	sub	sp, #8
 8015f6e:	af00      	add	r7, sp, #0
 8015f70:	6078      	str	r0, [r7, #4]
 8015f72:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d018      	beq.n	8015fae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	68da      	ldr	r2, [r3, #12]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f84:	441a      	add	r2, r3
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	68da      	ldr	r2, [r3, #12]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	689b      	ldr	r3, [r3, #8]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d303      	bcc.n	8015f9e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	68d9      	ldr	r1, [r3, #12]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	6838      	ldr	r0, [r7, #0]
 8015faa:	f004 f9bb 	bl	801a324 <memcpy>
	}
}
 8015fae:	bf00      	nop
 8015fb0:	3708      	adds	r7, #8
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}

08015fb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015fb6:	b580      	push	{r7, lr}
 8015fb8:	b084      	sub	sp, #16
 8015fba:	af00      	add	r7, sp, #0
 8015fbc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015fbe:	f002 f8b1 	bl	8018124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fc8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fca:	e011      	b.n	8015ff0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d012      	beq.n	8015ffa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	3324      	adds	r3, #36	; 0x24
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f000 fe75 	bl	8016cc8 <xTaskRemoveFromEventList>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d001      	beq.n	8015fe8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015fe4:	f000 ff4c 	bl	8016e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015fe8:	7bfb      	ldrb	r3, [r7, #15]
 8015fea:	3b01      	subs	r3, #1
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	dce9      	bgt.n	8015fcc <prvUnlockQueue+0x16>
 8015ff8:	e000      	b.n	8015ffc <prvUnlockQueue+0x46>
					break;
 8015ffa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	22ff      	movs	r2, #255	; 0xff
 8016000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016004:	f002 f8be 	bl	8018184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016008:	f002 f88c 	bl	8018124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016012:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016014:	e011      	b.n	801603a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	691b      	ldr	r3, [r3, #16]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d012      	beq.n	8016044 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	3310      	adds	r3, #16
 8016022:	4618      	mov	r0, r3
 8016024:	f000 fe50 	bl	8016cc8 <xTaskRemoveFromEventList>
 8016028:	4603      	mov	r3, r0
 801602a:	2b00      	cmp	r3, #0
 801602c:	d001      	beq.n	8016032 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801602e:	f000 ff27 	bl	8016e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016032:	7bbb      	ldrb	r3, [r7, #14]
 8016034:	3b01      	subs	r3, #1
 8016036:	b2db      	uxtb	r3, r3
 8016038:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801603a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801603e:	2b00      	cmp	r3, #0
 8016040:	dce9      	bgt.n	8016016 <prvUnlockQueue+0x60>
 8016042:	e000      	b.n	8016046 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016044:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	22ff      	movs	r2, #255	; 0xff
 801604a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801604e:	f002 f899 	bl	8018184 <vPortExitCritical>
}
 8016052:	bf00      	nop
 8016054:	3710      	adds	r7, #16
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b084      	sub	sp, #16
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016062:	f002 f85f 	bl	8018124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801606a:	2b00      	cmp	r3, #0
 801606c:	d102      	bne.n	8016074 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801606e:	2301      	movs	r3, #1
 8016070:	60fb      	str	r3, [r7, #12]
 8016072:	e001      	b.n	8016078 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016074:	2300      	movs	r3, #0
 8016076:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016078:	f002 f884 	bl	8018184 <vPortExitCritical>

	return xReturn;
 801607c:	68fb      	ldr	r3, [r7, #12]
}
 801607e:	4618      	mov	r0, r3
 8016080:	3710      	adds	r7, #16
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}

08016086 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016086:	b580      	push	{r7, lr}
 8016088:	b084      	sub	sp, #16
 801608a:	af00      	add	r7, sp, #0
 801608c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801608e:	f002 f849 	bl	8018124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801609a:	429a      	cmp	r2, r3
 801609c:	d102      	bne.n	80160a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801609e:	2301      	movs	r3, #1
 80160a0:	60fb      	str	r3, [r7, #12]
 80160a2:	e001      	b.n	80160a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80160a4:	2300      	movs	r3, #0
 80160a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80160a8:	f002 f86c 	bl	8018184 <vPortExitCritical>

	return xReturn;
 80160ac:	68fb      	ldr	r3, [r7, #12]
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3710      	adds	r7, #16
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
	...

080160b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80160b8:	b480      	push	{r7}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160c2:	2300      	movs	r3, #0
 80160c4:	60fb      	str	r3, [r7, #12]
 80160c6:	e014      	b.n	80160f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80160c8:	4a0f      	ldr	r2, [pc, #60]	; (8016108 <vQueueAddToRegistry+0x50>)
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d10b      	bne.n	80160ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80160d4:	490c      	ldr	r1, [pc, #48]	; (8016108 <vQueueAddToRegistry+0x50>)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	683a      	ldr	r2, [r7, #0]
 80160da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80160de:	4a0a      	ldr	r2, [pc, #40]	; (8016108 <vQueueAddToRegistry+0x50>)
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	00db      	lsls	r3, r3, #3
 80160e4:	4413      	add	r3, r2
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80160ea:	e006      	b.n	80160fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	3301      	adds	r3, #1
 80160f0:	60fb      	str	r3, [r7, #12]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2b07      	cmp	r3, #7
 80160f6:	d9e7      	bls.n	80160c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80160f8:	bf00      	nop
 80160fa:	bf00      	nop
 80160fc:	3714      	adds	r7, #20
 80160fe:	46bd      	mov	sp, r7
 8016100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016104:	4770      	bx	lr
 8016106:	bf00      	nop
 8016108:	2000a1c8 	.word	0x2000a1c8

0801610c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801610c:	b480      	push	{r7}
 801610e:	b085      	sub	sp, #20
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016114:	2300      	movs	r3, #0
 8016116:	60fb      	str	r3, [r7, #12]
 8016118:	e016      	b.n	8016148 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801611a:	4a10      	ldr	r2, [pc, #64]	; (801615c <vQueueUnregisterQueue+0x50>)
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	00db      	lsls	r3, r3, #3
 8016120:	4413      	add	r3, r2
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	429a      	cmp	r2, r3
 8016128:	d10b      	bne.n	8016142 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801612a:	4a0c      	ldr	r2, [pc, #48]	; (801615c <vQueueUnregisterQueue+0x50>)
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	2100      	movs	r1, #0
 8016130:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016134:	4a09      	ldr	r2, [pc, #36]	; (801615c <vQueueUnregisterQueue+0x50>)
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	00db      	lsls	r3, r3, #3
 801613a:	4413      	add	r3, r2
 801613c:	2200      	movs	r2, #0
 801613e:	605a      	str	r2, [r3, #4]
				break;
 8016140:	e006      	b.n	8016150 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	3301      	adds	r3, #1
 8016146:	60fb      	str	r3, [r7, #12]
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2b07      	cmp	r3, #7
 801614c:	d9e5      	bls.n	801611a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801614e:	bf00      	nop
 8016150:	bf00      	nop
 8016152:	3714      	adds	r7, #20
 8016154:	46bd      	mov	sp, r7
 8016156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615a:	4770      	bx	lr
 801615c:	2000a1c8 	.word	0x2000a1c8

08016160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016170:	f001 ffd8 	bl	8018124 <vPortEnterCritical>
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801617a:	b25b      	sxtb	r3, r3
 801617c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016180:	d103      	bne.n	801618a <vQueueWaitForMessageRestricted+0x2a>
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2200      	movs	r2, #0
 8016186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016190:	b25b      	sxtb	r3, r3
 8016192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016196:	d103      	bne.n	80161a0 <vQueueWaitForMessageRestricted+0x40>
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	2200      	movs	r2, #0
 801619c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161a0:	f001 fff0 	bl	8018184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d106      	bne.n	80161ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	3324      	adds	r3, #36	; 0x24
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	68b9      	ldr	r1, [r7, #8]
 80161b4:	4618      	mov	r0, r3
 80161b6:	f000 fd5b 	bl	8016c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	f7ff fefb 	bl	8015fb6 <prvUnlockQueue>
	}
 80161c0:	bf00      	nop
 80161c2:	3718      	adds	r7, #24
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08e      	sub	sp, #56	; 0x38
 80161cc:	af04      	add	r7, sp, #16
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	607a      	str	r2, [r7, #4]
 80161d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80161d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d10a      	bne.n	80161f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80161dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e0:	f383 8811 	msr	BASEPRI, r3
 80161e4:	f3bf 8f6f 	isb	sy
 80161e8:	f3bf 8f4f 	dsb	sy
 80161ec:	623b      	str	r3, [r7, #32]
}
 80161ee:	bf00      	nop
 80161f0:	e7fe      	b.n	80161f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80161f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d10a      	bne.n	801620e <xTaskCreateStatic+0x46>
	__asm volatile
 80161f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161fc:	f383 8811 	msr	BASEPRI, r3
 8016200:	f3bf 8f6f 	isb	sy
 8016204:	f3bf 8f4f 	dsb	sy
 8016208:	61fb      	str	r3, [r7, #28]
}
 801620a:	bf00      	nop
 801620c:	e7fe      	b.n	801620c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801620e:	23c0      	movs	r3, #192	; 0xc0
 8016210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016212:	693b      	ldr	r3, [r7, #16]
 8016214:	2bc0      	cmp	r3, #192	; 0xc0
 8016216:	d00a      	beq.n	801622e <xTaskCreateStatic+0x66>
	__asm volatile
 8016218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801621c:	f383 8811 	msr	BASEPRI, r3
 8016220:	f3bf 8f6f 	isb	sy
 8016224:	f3bf 8f4f 	dsb	sy
 8016228:	61bb      	str	r3, [r7, #24]
}
 801622a:	bf00      	nop
 801622c:	e7fe      	b.n	801622c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801622e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016232:	2b00      	cmp	r3, #0
 8016234:	d01e      	beq.n	8016274 <xTaskCreateStatic+0xac>
 8016236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016238:	2b00      	cmp	r3, #0
 801623a:	d01b      	beq.n	8016274 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016244:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016248:	2202      	movs	r2, #2
 801624a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801624e:	2300      	movs	r3, #0
 8016250:	9303      	str	r3, [sp, #12]
 8016252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016254:	9302      	str	r3, [sp, #8]
 8016256:	f107 0314 	add.w	r3, r7, #20
 801625a:	9301      	str	r3, [sp, #4]
 801625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625e:	9300      	str	r3, [sp, #0]
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	68b9      	ldr	r1, [r7, #8]
 8016266:	68f8      	ldr	r0, [r7, #12]
 8016268:	f000 f850 	bl	801630c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801626c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801626e:	f000 f8f7 	bl	8016460 <prvAddNewTaskToReadyList>
 8016272:	e001      	b.n	8016278 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016274:	2300      	movs	r3, #0
 8016276:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016278:	697b      	ldr	r3, [r7, #20]
	}
 801627a:	4618      	mov	r0, r3
 801627c:	3728      	adds	r7, #40	; 0x28
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016282:	b580      	push	{r7, lr}
 8016284:	b08c      	sub	sp, #48	; 0x30
 8016286:	af04      	add	r7, sp, #16
 8016288:	60f8      	str	r0, [r7, #12]
 801628a:	60b9      	str	r1, [r7, #8]
 801628c:	603b      	str	r3, [r7, #0]
 801628e:	4613      	mov	r3, r2
 8016290:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016292:	88fb      	ldrh	r3, [r7, #6]
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	4618      	mov	r0, r3
 8016298:	f002 f866 	bl	8018368 <pvPortMalloc>
 801629c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d00e      	beq.n	80162c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80162a4:	20c0      	movs	r0, #192	; 0xc0
 80162a6:	f002 f85f 	bl	8018368 <pvPortMalloc>
 80162aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d003      	beq.n	80162ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	697a      	ldr	r2, [r7, #20]
 80162b6:	631a      	str	r2, [r3, #48]	; 0x30
 80162b8:	e005      	b.n	80162c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80162ba:	6978      	ldr	r0, [r7, #20]
 80162bc:	f002 f920 	bl	8018500 <vPortFree>
 80162c0:	e001      	b.n	80162c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d017      	beq.n	80162fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	2200      	movs	r2, #0
 80162d0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80162d4:	88fa      	ldrh	r2, [r7, #6]
 80162d6:	2300      	movs	r3, #0
 80162d8:	9303      	str	r3, [sp, #12]
 80162da:	69fb      	ldr	r3, [r7, #28]
 80162dc:	9302      	str	r3, [sp, #8]
 80162de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e4:	9300      	str	r3, [sp, #0]
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	68b9      	ldr	r1, [r7, #8]
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f000 f80e 	bl	801630c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80162f0:	69f8      	ldr	r0, [r7, #28]
 80162f2:	f000 f8b5 	bl	8016460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80162f6:	2301      	movs	r3, #1
 80162f8:	61bb      	str	r3, [r7, #24]
 80162fa:	e002      	b.n	8016302 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80162fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016300:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016302:	69bb      	ldr	r3, [r7, #24]
	}
 8016304:	4618      	mov	r0, r3
 8016306:	3720      	adds	r7, #32
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b088      	sub	sp, #32
 8016310:	af00      	add	r7, sp, #0
 8016312:	60f8      	str	r0, [r7, #12]
 8016314:	60b9      	str	r1, [r7, #8]
 8016316:	607a      	str	r2, [r7, #4]
 8016318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	009b      	lsls	r3, r3, #2
 8016322:	461a      	mov	r2, r3
 8016324:	21a5      	movs	r1, #165	; 0xa5
 8016326:	f004 f80b 	bl	801a340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016334:	3b01      	subs	r3, #1
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	4413      	add	r3, r2
 801633a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	f023 0307 	bic.w	r3, r3, #7
 8016342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016344:	69bb      	ldr	r3, [r7, #24]
 8016346:	f003 0307 	and.w	r3, r3, #7
 801634a:	2b00      	cmp	r3, #0
 801634c:	d00a      	beq.n	8016364 <prvInitialiseNewTask+0x58>
	__asm volatile
 801634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016352:	f383 8811 	msr	BASEPRI, r3
 8016356:	f3bf 8f6f 	isb	sy
 801635a:	f3bf 8f4f 	dsb	sy
 801635e:	617b      	str	r3, [r7, #20]
}
 8016360:	bf00      	nop
 8016362:	e7fe      	b.n	8016362 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d01f      	beq.n	80163aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801636a:	2300      	movs	r3, #0
 801636c:	61fb      	str	r3, [r7, #28]
 801636e:	e012      	b.n	8016396 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016370:	68ba      	ldr	r2, [r7, #8]
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	4413      	add	r3, r2
 8016376:	7819      	ldrb	r1, [r3, #0]
 8016378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	4413      	add	r3, r2
 801637e:	3334      	adds	r3, #52	; 0x34
 8016380:	460a      	mov	r2, r1
 8016382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016384:	68ba      	ldr	r2, [r7, #8]
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	4413      	add	r3, r2
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d006      	beq.n	801639e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	3301      	adds	r3, #1
 8016394:	61fb      	str	r3, [r7, #28]
 8016396:	69fb      	ldr	r3, [r7, #28]
 8016398:	2b0f      	cmp	r3, #15
 801639a:	d9e9      	bls.n	8016370 <prvInitialiseNewTask+0x64>
 801639c:	e000      	b.n	80163a0 <prvInitialiseNewTask+0x94>
			{
				break;
 801639e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80163a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a2:	2200      	movs	r2, #0
 80163a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80163a8:	e003      	b.n	80163b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80163aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ac:	2200      	movs	r2, #0
 80163ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80163b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b4:	2b37      	cmp	r3, #55	; 0x37
 80163b6:	d901      	bls.n	80163bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80163b8:	2337      	movs	r3, #55	; 0x37
 80163ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80163bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80163c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80163c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ca:	2200      	movs	r2, #0
 80163cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80163ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d0:	3304      	adds	r3, #4
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7fe fda0 	bl	8014f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80163d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163da:	3318      	adds	r3, #24
 80163dc:	4618      	mov	r0, r3
 80163de:	f7fe fd9b 	bl	8014f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80163e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80163ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80163f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80163f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163fa:	2200      	movs	r2, #0
 80163fc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80163fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016400:	2200      	movs	r2, #0
 8016402:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016408:	2200      	movs	r2, #0
 801640a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	3358      	adds	r3, #88	; 0x58
 8016412:	2260      	movs	r2, #96	; 0x60
 8016414:	2100      	movs	r1, #0
 8016416:	4618      	mov	r0, r3
 8016418:	f003 ff92 	bl	801a340 <memset>
 801641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641e:	4a0d      	ldr	r2, [pc, #52]	; (8016454 <prvInitialiseNewTask+0x148>)
 8016420:	65da      	str	r2, [r3, #92]	; 0x5c
 8016422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016424:	4a0c      	ldr	r2, [pc, #48]	; (8016458 <prvInitialiseNewTask+0x14c>)
 8016426:	661a      	str	r2, [r3, #96]	; 0x60
 8016428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642a:	4a0c      	ldr	r2, [pc, #48]	; (801645c <prvInitialiseNewTask+0x150>)
 801642c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801642e:	683a      	ldr	r2, [r7, #0]
 8016430:	68f9      	ldr	r1, [r7, #12]
 8016432:	69b8      	ldr	r0, [r7, #24]
 8016434:	f001 fd48 	bl	8017ec8 <pxPortInitialiseStack>
 8016438:	4602      	mov	r2, r0
 801643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801643c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016440:	2b00      	cmp	r3, #0
 8016442:	d002      	beq.n	801644a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801644a:	bf00      	nop
 801644c:	3720      	adds	r7, #32
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop
 8016454:	0801ab70 	.word	0x0801ab70
 8016458:	0801ab90 	.word	0x0801ab90
 801645c:	0801ab50 	.word	0x0801ab50

08016460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016468:	f001 fe5c 	bl	8018124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801646c:	4b2d      	ldr	r3, [pc, #180]	; (8016524 <prvAddNewTaskToReadyList+0xc4>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	3301      	adds	r3, #1
 8016472:	4a2c      	ldr	r2, [pc, #176]	; (8016524 <prvAddNewTaskToReadyList+0xc4>)
 8016474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016476:	4b2c      	ldr	r3, [pc, #176]	; (8016528 <prvAddNewTaskToReadyList+0xc8>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d109      	bne.n	8016492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801647e:	4a2a      	ldr	r2, [pc, #168]	; (8016528 <prvAddNewTaskToReadyList+0xc8>)
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016484:	4b27      	ldr	r3, [pc, #156]	; (8016524 <prvAddNewTaskToReadyList+0xc4>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2b01      	cmp	r3, #1
 801648a:	d110      	bne.n	80164ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801648c:	f000 fd1c 	bl	8016ec8 <prvInitialiseTaskLists>
 8016490:	e00d      	b.n	80164ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016492:	4b26      	ldr	r3, [pc, #152]	; (801652c <prvAddNewTaskToReadyList+0xcc>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d109      	bne.n	80164ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801649a:	4b23      	ldr	r3, [pc, #140]	; (8016528 <prvAddNewTaskToReadyList+0xc8>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d802      	bhi.n	80164ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80164a8:	4a1f      	ldr	r2, [pc, #124]	; (8016528 <prvAddNewTaskToReadyList+0xc8>)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80164ae:	4b20      	ldr	r3, [pc, #128]	; (8016530 <prvAddNewTaskToReadyList+0xd0>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	3301      	adds	r3, #1
 80164b4:	4a1e      	ldr	r2, [pc, #120]	; (8016530 <prvAddNewTaskToReadyList+0xd0>)
 80164b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80164b8:	4b1d      	ldr	r3, [pc, #116]	; (8016530 <prvAddNewTaskToReadyList+0xd0>)
 80164ba:	681a      	ldr	r2, [r3, #0]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164c4:	4b1b      	ldr	r3, [pc, #108]	; (8016534 <prvAddNewTaskToReadyList+0xd4>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d903      	bls.n	80164d4 <prvAddNewTaskToReadyList+0x74>
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164d0:	4a18      	ldr	r2, [pc, #96]	; (8016534 <prvAddNewTaskToReadyList+0xd4>)
 80164d2:	6013      	str	r3, [r2, #0]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164d8:	4613      	mov	r3, r2
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	4413      	add	r3, r2
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	4a15      	ldr	r2, [pc, #84]	; (8016538 <prvAddNewTaskToReadyList+0xd8>)
 80164e2:	441a      	add	r2, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	3304      	adds	r3, #4
 80164e8:	4619      	mov	r1, r3
 80164ea:	4610      	mov	r0, r2
 80164ec:	f7fe fd21 	bl	8014f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80164f0:	f001 fe48 	bl	8018184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80164f4:	4b0d      	ldr	r3, [pc, #52]	; (801652c <prvAddNewTaskToReadyList+0xcc>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00e      	beq.n	801651a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80164fc:	4b0a      	ldr	r3, [pc, #40]	; (8016528 <prvAddNewTaskToReadyList+0xc8>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016506:	429a      	cmp	r2, r3
 8016508:	d207      	bcs.n	801651a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801650a:	4b0c      	ldr	r3, [pc, #48]	; (801653c <prvAddNewTaskToReadyList+0xdc>)
 801650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016510:	601a      	str	r2, [r3, #0]
 8016512:	f3bf 8f4f 	dsb	sy
 8016516:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801651a:	bf00      	nop
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	200048c4 	.word	0x200048c4
 8016528:	200043f0 	.word	0x200043f0
 801652c:	200048d0 	.word	0x200048d0
 8016530:	200048e0 	.word	0x200048e0
 8016534:	200048cc 	.word	0x200048cc
 8016538:	200043f4 	.word	0x200043f4
 801653c:	e000ed04 	.word	0xe000ed04

08016540 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016548:	f001 fdec 	bl	8018124 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d102      	bne.n	8016558 <vTaskDelete+0x18>
 8016552:	4b2c      	ldr	r3, [pc, #176]	; (8016604 <vTaskDelete+0xc4>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	e000      	b.n	801655a <vTaskDelete+0x1a>
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	3304      	adds	r3, #4
 8016560:	4618      	mov	r0, r3
 8016562:	f7fe fd43 	bl	8014fec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801656a:	2b00      	cmp	r3, #0
 801656c:	d004      	beq.n	8016578 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	3318      	adds	r3, #24
 8016572:	4618      	mov	r0, r3
 8016574:	f7fe fd3a 	bl	8014fec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016578:	4b23      	ldr	r3, [pc, #140]	; (8016608 <vTaskDelete+0xc8>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	3301      	adds	r3, #1
 801657e:	4a22      	ldr	r2, [pc, #136]	; (8016608 <vTaskDelete+0xc8>)
 8016580:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016582:	4b20      	ldr	r3, [pc, #128]	; (8016604 <vTaskDelete+0xc4>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	68fa      	ldr	r2, [r7, #12]
 8016588:	429a      	cmp	r2, r3
 801658a:	d10b      	bne.n	80165a4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	3304      	adds	r3, #4
 8016590:	4619      	mov	r1, r3
 8016592:	481e      	ldr	r0, [pc, #120]	; (801660c <vTaskDelete+0xcc>)
 8016594:	f7fe fccd 	bl	8014f32 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016598:	4b1d      	ldr	r3, [pc, #116]	; (8016610 <vTaskDelete+0xd0>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	3301      	adds	r3, #1
 801659e:	4a1c      	ldr	r2, [pc, #112]	; (8016610 <vTaskDelete+0xd0>)
 80165a0:	6013      	str	r3, [r2, #0]
 80165a2:	e009      	b.n	80165b8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80165a4:	4b1b      	ldr	r3, [pc, #108]	; (8016614 <vTaskDelete+0xd4>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	3b01      	subs	r3, #1
 80165aa:	4a1a      	ldr	r2, [pc, #104]	; (8016614 <vTaskDelete+0xd4>)
 80165ac:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	f000 fcf8 	bl	8016fa4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80165b4:	f000 fd2a 	bl	801700c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80165b8:	f001 fde4 	bl	8018184 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80165bc:	4b16      	ldr	r3, [pc, #88]	; (8016618 <vTaskDelete+0xd8>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d01b      	beq.n	80165fc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80165c4:	4b0f      	ldr	r3, [pc, #60]	; (8016604 <vTaskDelete+0xc4>)
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	68fa      	ldr	r2, [r7, #12]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d116      	bne.n	80165fc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80165ce:	4b13      	ldr	r3, [pc, #76]	; (801661c <vTaskDelete+0xdc>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d00a      	beq.n	80165ec <vTaskDelete+0xac>
	__asm volatile
 80165d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165da:	f383 8811 	msr	BASEPRI, r3
 80165de:	f3bf 8f6f 	isb	sy
 80165e2:	f3bf 8f4f 	dsb	sy
 80165e6:	60bb      	str	r3, [r7, #8]
}
 80165e8:	bf00      	nop
 80165ea:	e7fe      	b.n	80165ea <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80165ec:	4b0c      	ldr	r3, [pc, #48]	; (8016620 <vTaskDelete+0xe0>)
 80165ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165f2:	601a      	str	r2, [r3, #0]
 80165f4:	f3bf 8f4f 	dsb	sy
 80165f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80165fc:	bf00      	nop
 80165fe:	3710      	adds	r7, #16
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	200043f0 	.word	0x200043f0
 8016608:	200048e0 	.word	0x200048e0
 801660c:	20004898 	.word	0x20004898
 8016610:	200048ac 	.word	0x200048ac
 8016614:	200048c4 	.word	0x200048c4
 8016618:	200048d0 	.word	0x200048d0
 801661c:	200048ec 	.word	0x200048ec
 8016620:	e000ed04 	.word	0xe000ed04

08016624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801662c:	2300      	movs	r3, #0
 801662e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d017      	beq.n	8016666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016636:	4b13      	ldr	r3, [pc, #76]	; (8016684 <vTaskDelay+0x60>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d00a      	beq.n	8016654 <vTaskDelay+0x30>
	__asm volatile
 801663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016642:	f383 8811 	msr	BASEPRI, r3
 8016646:	f3bf 8f6f 	isb	sy
 801664a:	f3bf 8f4f 	dsb	sy
 801664e:	60bb      	str	r3, [r7, #8]
}
 8016650:	bf00      	nop
 8016652:	e7fe      	b.n	8016652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016654:	f000 f8f2 	bl	801683c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016658:	2100      	movs	r1, #0
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f001 f892 	bl	8017784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016660:	f000 f8fa 	bl	8016858 <xTaskResumeAll>
 8016664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d107      	bne.n	801667c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801666c:	4b06      	ldr	r3, [pc, #24]	; (8016688 <vTaskDelay+0x64>)
 801666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016672:	601a      	str	r2, [r3, #0]
 8016674:	f3bf 8f4f 	dsb	sy
 8016678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801667c:	bf00      	nop
 801667e:	3710      	adds	r7, #16
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}
 8016684:	200048ec 	.word	0x200048ec
 8016688:	e000ed04 	.word	0xe000ed04

0801668c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801668c:	b580      	push	{r7, lr}
 801668e:	b088      	sub	sp, #32
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8016698:	69bb      	ldr	r3, [r7, #24]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d10a      	bne.n	80166b4 <eTaskGetState+0x28>
	__asm volatile
 801669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a2:	f383 8811 	msr	BASEPRI, r3
 80166a6:	f3bf 8f6f 	isb	sy
 80166aa:	f3bf 8f4f 	dsb	sy
 80166ae:	60bb      	str	r3, [r7, #8]
}
 80166b0:	bf00      	nop
 80166b2:	e7fe      	b.n	80166b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80166b4:	4b23      	ldr	r3, [pc, #140]	; (8016744 <eTaskGetState+0xb8>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	69ba      	ldr	r2, [r7, #24]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d102      	bne.n	80166c4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80166be:	2300      	movs	r3, #0
 80166c0:	77fb      	strb	r3, [r7, #31]
 80166c2:	e03a      	b.n	801673a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80166c4:	f001 fd2e 	bl	8018124 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	695b      	ldr	r3, [r3, #20]
 80166cc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80166ce:	4b1e      	ldr	r3, [pc, #120]	; (8016748 <eTaskGetState+0xbc>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80166d4:	4b1d      	ldr	r3, [pc, #116]	; (801674c <eTaskGetState+0xc0>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80166da:	f001 fd53 	bl	8018184 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80166de:	697a      	ldr	r2, [r7, #20]
 80166e0:	693b      	ldr	r3, [r7, #16]
 80166e2:	429a      	cmp	r2, r3
 80166e4:	d003      	beq.n	80166ee <eTaskGetState+0x62>
 80166e6:	697a      	ldr	r2, [r7, #20]
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d102      	bne.n	80166f4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80166ee:	2302      	movs	r3, #2
 80166f0:	77fb      	strb	r3, [r7, #31]
 80166f2:	e022      	b.n	801673a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	4a16      	ldr	r2, [pc, #88]	; (8016750 <eTaskGetState+0xc4>)
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d112      	bne.n	8016722 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016700:	2b00      	cmp	r3, #0
 8016702:	d10b      	bne.n	801671c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8016704:	69bb      	ldr	r3, [r7, #24]
 8016706:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801670a:	b2db      	uxtb	r3, r3
 801670c:	2b01      	cmp	r3, #1
 801670e:	d102      	bne.n	8016716 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8016710:	2302      	movs	r3, #2
 8016712:	77fb      	strb	r3, [r7, #31]
 8016714:	e011      	b.n	801673a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8016716:	2303      	movs	r3, #3
 8016718:	77fb      	strb	r3, [r7, #31]
 801671a:	e00e      	b.n	801673a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801671c:	2302      	movs	r3, #2
 801671e:	77fb      	strb	r3, [r7, #31]
 8016720:	e00b      	b.n	801673a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	4a0b      	ldr	r2, [pc, #44]	; (8016754 <eTaskGetState+0xc8>)
 8016726:	4293      	cmp	r3, r2
 8016728:	d002      	beq.n	8016730 <eTaskGetState+0xa4>
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d102      	bne.n	8016736 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8016730:	2304      	movs	r3, #4
 8016732:	77fb      	strb	r3, [r7, #31]
 8016734:	e001      	b.n	801673a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8016736:	2301      	movs	r3, #1
 8016738:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801673a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801673c:	4618      	mov	r0, r3
 801673e:	3720      	adds	r7, #32
 8016740:	46bd      	mov	sp, r7
 8016742:	bd80      	pop	{r7, pc}
 8016744:	200043f0 	.word	0x200043f0
 8016748:	2000487c 	.word	0x2000487c
 801674c:	20004880 	.word	0x20004880
 8016750:	200048b0 	.word	0x200048b0
 8016754:	20004898 	.word	0x20004898

08016758 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b08a      	sub	sp, #40	; 0x28
 801675c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801675e:	2300      	movs	r3, #0
 8016760:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016762:	2300      	movs	r3, #0
 8016764:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016766:	463a      	mov	r2, r7
 8016768:	1d39      	adds	r1, r7, #4
 801676a:	f107 0308 	add.w	r3, r7, #8
 801676e:	4618      	mov	r0, r3
 8016770:	f7fe fb7e 	bl	8014e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016774:	6839      	ldr	r1, [r7, #0]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	68ba      	ldr	r2, [r7, #8]
 801677a:	9202      	str	r2, [sp, #8]
 801677c:	9301      	str	r3, [sp, #4]
 801677e:	2300      	movs	r3, #0
 8016780:	9300      	str	r3, [sp, #0]
 8016782:	2300      	movs	r3, #0
 8016784:	460a      	mov	r2, r1
 8016786:	4925      	ldr	r1, [pc, #148]	; (801681c <vTaskStartScheduler+0xc4>)
 8016788:	4825      	ldr	r0, [pc, #148]	; (8016820 <vTaskStartScheduler+0xc8>)
 801678a:	f7ff fd1d 	bl	80161c8 <xTaskCreateStatic>
 801678e:	4603      	mov	r3, r0
 8016790:	4a24      	ldr	r2, [pc, #144]	; (8016824 <vTaskStartScheduler+0xcc>)
 8016792:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016794:	4b23      	ldr	r3, [pc, #140]	; (8016824 <vTaskStartScheduler+0xcc>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d002      	beq.n	80167a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801679c:	2301      	movs	r3, #1
 801679e:	617b      	str	r3, [r7, #20]
 80167a0:	e001      	b.n	80167a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80167a2:	2300      	movs	r3, #0
 80167a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	d102      	bne.n	80167b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80167ac:	f001 f83e 	bl	801782c <xTimerCreateTimerTask>
 80167b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	2b01      	cmp	r3, #1
 80167b6:	d11d      	bne.n	80167f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 80167b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167bc:	f383 8811 	msr	BASEPRI, r3
 80167c0:	f3bf 8f6f 	isb	sy
 80167c4:	f3bf 8f4f 	dsb	sy
 80167c8:	613b      	str	r3, [r7, #16]
}
 80167ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80167cc:	4b16      	ldr	r3, [pc, #88]	; (8016828 <vTaskStartScheduler+0xd0>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	3358      	adds	r3, #88	; 0x58
 80167d2:	4a16      	ldr	r2, [pc, #88]	; (801682c <vTaskStartScheduler+0xd4>)
 80167d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80167d6:	4b16      	ldr	r3, [pc, #88]	; (8016830 <vTaskStartScheduler+0xd8>)
 80167d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80167de:	4b15      	ldr	r3, [pc, #84]	; (8016834 <vTaskStartScheduler+0xdc>)
 80167e0:	2201      	movs	r2, #1
 80167e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80167e4:	4b14      	ldr	r3, [pc, #80]	; (8016838 <vTaskStartScheduler+0xe0>)
 80167e6:	2200      	movs	r2, #0
 80167e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80167ea:	f7ec fa47 	bl	8002c7c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80167ee:	f001 fbf7 	bl	8017fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80167f2:	e00e      	b.n	8016812 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80167fa:	d10a      	bne.n	8016812 <vTaskStartScheduler+0xba>
	__asm volatile
 80167fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016800:	f383 8811 	msr	BASEPRI, r3
 8016804:	f3bf 8f6f 	isb	sy
 8016808:	f3bf 8f4f 	dsb	sy
 801680c:	60fb      	str	r3, [r7, #12]
}
 801680e:	bf00      	nop
 8016810:	e7fe      	b.n	8016810 <vTaskStartScheduler+0xb8>
}
 8016812:	bf00      	nop
 8016814:	3718      	adds	r7, #24
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	0801a554 	.word	0x0801a554
 8016820:	08016e99 	.word	0x08016e99
 8016824:	200048e8 	.word	0x200048e8
 8016828:	200043f0 	.word	0x200043f0
 801682c:	20000108 	.word	0x20000108
 8016830:	200048e4 	.word	0x200048e4
 8016834:	200048d0 	.word	0x200048d0
 8016838:	200048c8 	.word	0x200048c8

0801683c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801683c:	b480      	push	{r7}
 801683e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016840:	4b04      	ldr	r3, [pc, #16]	; (8016854 <vTaskSuspendAll+0x18>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	3301      	adds	r3, #1
 8016846:	4a03      	ldr	r2, [pc, #12]	; (8016854 <vTaskSuspendAll+0x18>)
 8016848:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801684a:	bf00      	nop
 801684c:	46bd      	mov	sp, r7
 801684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016852:	4770      	bx	lr
 8016854:	200048ec 	.word	0x200048ec

08016858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b084      	sub	sp, #16
 801685c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801685e:	2300      	movs	r3, #0
 8016860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016862:	2300      	movs	r3, #0
 8016864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016866:	4b42      	ldr	r3, [pc, #264]	; (8016970 <xTaskResumeAll+0x118>)
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d10a      	bne.n	8016884 <xTaskResumeAll+0x2c>
	__asm volatile
 801686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016872:	f383 8811 	msr	BASEPRI, r3
 8016876:	f3bf 8f6f 	isb	sy
 801687a:	f3bf 8f4f 	dsb	sy
 801687e:	603b      	str	r3, [r7, #0]
}
 8016880:	bf00      	nop
 8016882:	e7fe      	b.n	8016882 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016884:	f001 fc4e 	bl	8018124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016888:	4b39      	ldr	r3, [pc, #228]	; (8016970 <xTaskResumeAll+0x118>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	3b01      	subs	r3, #1
 801688e:	4a38      	ldr	r2, [pc, #224]	; (8016970 <xTaskResumeAll+0x118>)
 8016890:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016892:	4b37      	ldr	r3, [pc, #220]	; (8016970 <xTaskResumeAll+0x118>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d162      	bne.n	8016960 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801689a:	4b36      	ldr	r3, [pc, #216]	; (8016974 <xTaskResumeAll+0x11c>)
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d05e      	beq.n	8016960 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80168a2:	e02f      	b.n	8016904 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168a4:	4b34      	ldr	r3, [pc, #208]	; (8016978 <xTaskResumeAll+0x120>)
 80168a6:	68db      	ldr	r3, [r3, #12]
 80168a8:	68db      	ldr	r3, [r3, #12]
 80168aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	3318      	adds	r3, #24
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7fe fb9b 	bl	8014fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	3304      	adds	r3, #4
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fe fb96 	bl	8014fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168c4:	4b2d      	ldr	r3, [pc, #180]	; (801697c <xTaskResumeAll+0x124>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	429a      	cmp	r2, r3
 80168ca:	d903      	bls.n	80168d4 <xTaskResumeAll+0x7c>
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168d0:	4a2a      	ldr	r2, [pc, #168]	; (801697c <xTaskResumeAll+0x124>)
 80168d2:	6013      	str	r3, [r2, #0]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168d8:	4613      	mov	r3, r2
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	4413      	add	r3, r2
 80168de:	009b      	lsls	r3, r3, #2
 80168e0:	4a27      	ldr	r2, [pc, #156]	; (8016980 <xTaskResumeAll+0x128>)
 80168e2:	441a      	add	r2, r3
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	3304      	adds	r3, #4
 80168e8:	4619      	mov	r1, r3
 80168ea:	4610      	mov	r0, r2
 80168ec:	f7fe fb21 	bl	8014f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168f4:	4b23      	ldr	r3, [pc, #140]	; (8016984 <xTaskResumeAll+0x12c>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d302      	bcc.n	8016904 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80168fe:	4b22      	ldr	r3, [pc, #136]	; (8016988 <xTaskResumeAll+0x130>)
 8016900:	2201      	movs	r2, #1
 8016902:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016904:	4b1c      	ldr	r3, [pc, #112]	; (8016978 <xTaskResumeAll+0x120>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1cb      	bne.n	80168a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d001      	beq.n	8016916 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016912:	f000 fb7b 	bl	801700c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016916:	4b1d      	ldr	r3, [pc, #116]	; (801698c <xTaskResumeAll+0x134>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d010      	beq.n	8016944 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016922:	f000 f847 	bl	80169b4 <xTaskIncrementTick>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d002      	beq.n	8016932 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801692c:	4b16      	ldr	r3, [pc, #88]	; (8016988 <xTaskResumeAll+0x130>)
 801692e:	2201      	movs	r2, #1
 8016930:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	3b01      	subs	r3, #1
 8016936:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d1f1      	bne.n	8016922 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801693e:	4b13      	ldr	r3, [pc, #76]	; (801698c <xTaskResumeAll+0x134>)
 8016940:	2200      	movs	r2, #0
 8016942:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016944:	4b10      	ldr	r3, [pc, #64]	; (8016988 <xTaskResumeAll+0x130>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d009      	beq.n	8016960 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801694c:	2301      	movs	r3, #1
 801694e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016950:	4b0f      	ldr	r3, [pc, #60]	; (8016990 <xTaskResumeAll+0x138>)
 8016952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016956:	601a      	str	r2, [r3, #0]
 8016958:	f3bf 8f4f 	dsb	sy
 801695c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016960:	f001 fc10 	bl	8018184 <vPortExitCritical>

	return xAlreadyYielded;
 8016964:	68bb      	ldr	r3, [r7, #8]
}
 8016966:	4618      	mov	r0, r3
 8016968:	3710      	adds	r7, #16
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	200048ec 	.word	0x200048ec
 8016974:	200048c4 	.word	0x200048c4
 8016978:	20004884 	.word	0x20004884
 801697c:	200048cc 	.word	0x200048cc
 8016980:	200043f4 	.word	0x200043f4
 8016984:	200043f0 	.word	0x200043f0
 8016988:	200048d8 	.word	0x200048d8
 801698c:	200048d4 	.word	0x200048d4
 8016990:	e000ed04 	.word	0xe000ed04

08016994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801699a:	4b05      	ldr	r3, [pc, #20]	; (80169b0 <xTaskGetTickCount+0x1c>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80169a0:	687b      	ldr	r3, [r7, #4]
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	370c      	adds	r7, #12
 80169a6:	46bd      	mov	sp, r7
 80169a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ac:	4770      	bx	lr
 80169ae:	bf00      	nop
 80169b0:	200048c8 	.word	0x200048c8

080169b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b086      	sub	sp, #24
 80169b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80169ba:	2300      	movs	r3, #0
 80169bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169be:	4b4f      	ldr	r3, [pc, #316]	; (8016afc <xTaskIncrementTick+0x148>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	f040 808f 	bne.w	8016ae6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80169c8:	4b4d      	ldr	r3, [pc, #308]	; (8016b00 <xTaskIncrementTick+0x14c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	3301      	adds	r3, #1
 80169ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80169d0:	4a4b      	ldr	r2, [pc, #300]	; (8016b00 <xTaskIncrementTick+0x14c>)
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d120      	bne.n	8016a1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80169dc:	4b49      	ldr	r3, [pc, #292]	; (8016b04 <xTaskIncrementTick+0x150>)
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d00a      	beq.n	80169fc <xTaskIncrementTick+0x48>
	__asm volatile
 80169e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ea:	f383 8811 	msr	BASEPRI, r3
 80169ee:	f3bf 8f6f 	isb	sy
 80169f2:	f3bf 8f4f 	dsb	sy
 80169f6:	603b      	str	r3, [r7, #0]
}
 80169f8:	bf00      	nop
 80169fa:	e7fe      	b.n	80169fa <xTaskIncrementTick+0x46>
 80169fc:	4b41      	ldr	r3, [pc, #260]	; (8016b04 <xTaskIncrementTick+0x150>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	60fb      	str	r3, [r7, #12]
 8016a02:	4b41      	ldr	r3, [pc, #260]	; (8016b08 <xTaskIncrementTick+0x154>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	4a3f      	ldr	r2, [pc, #252]	; (8016b04 <xTaskIncrementTick+0x150>)
 8016a08:	6013      	str	r3, [r2, #0]
 8016a0a:	4a3f      	ldr	r2, [pc, #252]	; (8016b08 <xTaskIncrementTick+0x154>)
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	6013      	str	r3, [r2, #0]
 8016a10:	4b3e      	ldr	r3, [pc, #248]	; (8016b0c <xTaskIncrementTick+0x158>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	3301      	adds	r3, #1
 8016a16:	4a3d      	ldr	r2, [pc, #244]	; (8016b0c <xTaskIncrementTick+0x158>)
 8016a18:	6013      	str	r3, [r2, #0]
 8016a1a:	f000 faf7 	bl	801700c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016a1e:	4b3c      	ldr	r3, [pc, #240]	; (8016b10 <xTaskIncrementTick+0x15c>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	693a      	ldr	r2, [r7, #16]
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d349      	bcc.n	8016abc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a28:	4b36      	ldr	r3, [pc, #216]	; (8016b04 <xTaskIncrementTick+0x150>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d104      	bne.n	8016a3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a32:	4b37      	ldr	r3, [pc, #220]	; (8016b10 <xTaskIncrementTick+0x15c>)
 8016a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a38:	601a      	str	r2, [r3, #0]
					break;
 8016a3a:	e03f      	b.n	8016abc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a3c:	4b31      	ldr	r3, [pc, #196]	; (8016b04 <xTaskIncrementTick+0x150>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	68db      	ldr	r3, [r3, #12]
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016a4c:	693a      	ldr	r2, [r7, #16]
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d203      	bcs.n	8016a5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016a54:	4a2e      	ldr	r2, [pc, #184]	; (8016b10 <xTaskIncrementTick+0x15c>)
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016a5a:	e02f      	b.n	8016abc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	3304      	adds	r3, #4
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7fe fac3 	bl	8014fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d004      	beq.n	8016a78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	3318      	adds	r3, #24
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7fe faba 	bl	8014fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a7c:	4b25      	ldr	r3, [pc, #148]	; (8016b14 <xTaskIncrementTick+0x160>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d903      	bls.n	8016a8c <xTaskIncrementTick+0xd8>
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a88:	4a22      	ldr	r2, [pc, #136]	; (8016b14 <xTaskIncrementTick+0x160>)
 8016a8a:	6013      	str	r3, [r2, #0]
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a90:	4613      	mov	r3, r2
 8016a92:	009b      	lsls	r3, r3, #2
 8016a94:	4413      	add	r3, r2
 8016a96:	009b      	lsls	r3, r3, #2
 8016a98:	4a1f      	ldr	r2, [pc, #124]	; (8016b18 <xTaskIncrementTick+0x164>)
 8016a9a:	441a      	add	r2, r3
 8016a9c:	68bb      	ldr	r3, [r7, #8]
 8016a9e:	3304      	adds	r3, #4
 8016aa0:	4619      	mov	r1, r3
 8016aa2:	4610      	mov	r0, r2
 8016aa4:	f7fe fa45 	bl	8014f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aac:	4b1b      	ldr	r3, [pc, #108]	; (8016b1c <xTaskIncrementTick+0x168>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d3b8      	bcc.n	8016a28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016aba:	e7b5      	b.n	8016a28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016abc:	4b17      	ldr	r3, [pc, #92]	; (8016b1c <xTaskIncrementTick+0x168>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ac2:	4915      	ldr	r1, [pc, #84]	; (8016b18 <xTaskIncrementTick+0x164>)
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	009b      	lsls	r3, r3, #2
 8016ac8:	4413      	add	r3, r2
 8016aca:	009b      	lsls	r3, r3, #2
 8016acc:	440b      	add	r3, r1
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	2b01      	cmp	r3, #1
 8016ad2:	d901      	bls.n	8016ad8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016ad4:	2301      	movs	r3, #1
 8016ad6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016ad8:	4b11      	ldr	r3, [pc, #68]	; (8016b20 <xTaskIncrementTick+0x16c>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d007      	beq.n	8016af0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	617b      	str	r3, [r7, #20]
 8016ae4:	e004      	b.n	8016af0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016ae6:	4b0f      	ldr	r3, [pc, #60]	; (8016b24 <xTaskIncrementTick+0x170>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	3301      	adds	r3, #1
 8016aec:	4a0d      	ldr	r2, [pc, #52]	; (8016b24 <xTaskIncrementTick+0x170>)
 8016aee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016af0:	697b      	ldr	r3, [r7, #20]
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3718      	adds	r7, #24
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	200048ec 	.word	0x200048ec
 8016b00:	200048c8 	.word	0x200048c8
 8016b04:	2000487c 	.word	0x2000487c
 8016b08:	20004880 	.word	0x20004880
 8016b0c:	200048dc 	.word	0x200048dc
 8016b10:	200048e4 	.word	0x200048e4
 8016b14:	200048cc 	.word	0x200048cc
 8016b18:	200043f4 	.word	0x200043f4
 8016b1c:	200043f0 	.word	0x200043f0
 8016b20:	200048d8 	.word	0x200048d8
 8016b24:	200048d4 	.word	0x200048d4

08016b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016b2e:	4b36      	ldr	r3, [pc, #216]	; (8016c08 <vTaskSwitchContext+0xe0>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d003      	beq.n	8016b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016b36:	4b35      	ldr	r3, [pc, #212]	; (8016c0c <vTaskSwitchContext+0xe4>)
 8016b38:	2201      	movs	r2, #1
 8016b3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016b3c:	e05f      	b.n	8016bfe <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8016b3e:	4b33      	ldr	r3, [pc, #204]	; (8016c0c <vTaskSwitchContext+0xe4>)
 8016b40:	2200      	movs	r2, #0
 8016b42:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8016b44:	f7ec f8a6 	bl	8002c94 <getRunTimeCounterValue>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	4a31      	ldr	r2, [pc, #196]	; (8016c10 <vTaskSwitchContext+0xe8>)
 8016b4c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8016b4e:	4b30      	ldr	r3, [pc, #192]	; (8016c10 <vTaskSwitchContext+0xe8>)
 8016b50:	681a      	ldr	r2, [r3, #0]
 8016b52:	4b30      	ldr	r3, [pc, #192]	; (8016c14 <vTaskSwitchContext+0xec>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d909      	bls.n	8016b6e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8016b5a:	4b2f      	ldr	r3, [pc, #188]	; (8016c18 <vTaskSwitchContext+0xf0>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016b60:	4a2b      	ldr	r2, [pc, #172]	; (8016c10 <vTaskSwitchContext+0xe8>)
 8016b62:	6810      	ldr	r0, [r2, #0]
 8016b64:	4a2b      	ldr	r2, [pc, #172]	; (8016c14 <vTaskSwitchContext+0xec>)
 8016b66:	6812      	ldr	r2, [r2, #0]
 8016b68:	1a82      	subs	r2, r0, r2
 8016b6a:	440a      	add	r2, r1
 8016b6c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8016b6e:	4b28      	ldr	r3, [pc, #160]	; (8016c10 <vTaskSwitchContext+0xe8>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	4a28      	ldr	r2, [pc, #160]	; (8016c14 <vTaskSwitchContext+0xec>)
 8016b74:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b76:	4b29      	ldr	r3, [pc, #164]	; (8016c1c <vTaskSwitchContext+0xf4>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	60fb      	str	r3, [r7, #12]
 8016b7c:	e010      	b.n	8016ba0 <vTaskSwitchContext+0x78>
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d10a      	bne.n	8016b9a <vTaskSwitchContext+0x72>
	__asm volatile
 8016b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b88:	f383 8811 	msr	BASEPRI, r3
 8016b8c:	f3bf 8f6f 	isb	sy
 8016b90:	f3bf 8f4f 	dsb	sy
 8016b94:	607b      	str	r3, [r7, #4]
}
 8016b96:	bf00      	nop
 8016b98:	e7fe      	b.n	8016b98 <vTaskSwitchContext+0x70>
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	3b01      	subs	r3, #1
 8016b9e:	60fb      	str	r3, [r7, #12]
 8016ba0:	491f      	ldr	r1, [pc, #124]	; (8016c20 <vTaskSwitchContext+0xf8>)
 8016ba2:	68fa      	ldr	r2, [r7, #12]
 8016ba4:	4613      	mov	r3, r2
 8016ba6:	009b      	lsls	r3, r3, #2
 8016ba8:	4413      	add	r3, r2
 8016baa:	009b      	lsls	r3, r3, #2
 8016bac:	440b      	add	r3, r1
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d0e4      	beq.n	8016b7e <vTaskSwitchContext+0x56>
 8016bb4:	68fa      	ldr	r2, [r7, #12]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	009b      	lsls	r3, r3, #2
 8016bba:	4413      	add	r3, r2
 8016bbc:	009b      	lsls	r3, r3, #2
 8016bbe:	4a18      	ldr	r2, [pc, #96]	; (8016c20 <vTaskSwitchContext+0xf8>)
 8016bc0:	4413      	add	r3, r2
 8016bc2:	60bb      	str	r3, [r7, #8]
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	685a      	ldr	r2, [r3, #4]
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	605a      	str	r2, [r3, #4]
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	685a      	ldr	r2, [r3, #4]
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	3308      	adds	r3, #8
 8016bd6:	429a      	cmp	r2, r3
 8016bd8:	d104      	bne.n	8016be4 <vTaskSwitchContext+0xbc>
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	685b      	ldr	r3, [r3, #4]
 8016bde:	685a      	ldr	r2, [r3, #4]
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	605a      	str	r2, [r3, #4]
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	685b      	ldr	r3, [r3, #4]
 8016be8:	68db      	ldr	r3, [r3, #12]
 8016bea:	4a0b      	ldr	r2, [pc, #44]	; (8016c18 <vTaskSwitchContext+0xf0>)
 8016bec:	6013      	str	r3, [r2, #0]
 8016bee:	4a0b      	ldr	r2, [pc, #44]	; (8016c1c <vTaskSwitchContext+0xf4>)
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016bf4:	4b08      	ldr	r3, [pc, #32]	; (8016c18 <vTaskSwitchContext+0xf0>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	3358      	adds	r3, #88	; 0x58
 8016bfa:	4a0a      	ldr	r2, [pc, #40]	; (8016c24 <vTaskSwitchContext+0xfc>)
 8016bfc:	6013      	str	r3, [r2, #0]
}
 8016bfe:	bf00      	nop
 8016c00:	3710      	adds	r7, #16
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bd80      	pop	{r7, pc}
 8016c06:	bf00      	nop
 8016c08:	200048ec 	.word	0x200048ec
 8016c0c:	200048d8 	.word	0x200048d8
 8016c10:	200048f4 	.word	0x200048f4
 8016c14:	200048f0 	.word	0x200048f0
 8016c18:	200043f0 	.word	0x200043f0
 8016c1c:	200048cc 	.word	0x200048cc
 8016c20:	200043f4 	.word	0x200043f4
 8016c24:	20000108 	.word	0x20000108

08016c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b084      	sub	sp, #16
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d10a      	bne.n	8016c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c3c:	f383 8811 	msr	BASEPRI, r3
 8016c40:	f3bf 8f6f 	isb	sy
 8016c44:	f3bf 8f4f 	dsb	sy
 8016c48:	60fb      	str	r3, [r7, #12]
}
 8016c4a:	bf00      	nop
 8016c4c:	e7fe      	b.n	8016c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016c4e:	4b07      	ldr	r3, [pc, #28]	; (8016c6c <vTaskPlaceOnEventList+0x44>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	3318      	adds	r3, #24
 8016c54:	4619      	mov	r1, r3
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f7fe f98f 	bl	8014f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016c5c:	2101      	movs	r1, #1
 8016c5e:	6838      	ldr	r0, [r7, #0]
 8016c60:	f000 fd90 	bl	8017784 <prvAddCurrentTaskToDelayedList>
}
 8016c64:	bf00      	nop
 8016c66:	3710      	adds	r7, #16
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}
 8016c6c:	200043f0 	.word	0x200043f0

08016c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b086      	sub	sp, #24
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d10a      	bne.n	8016c98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c86:	f383 8811 	msr	BASEPRI, r3
 8016c8a:	f3bf 8f6f 	isb	sy
 8016c8e:	f3bf 8f4f 	dsb	sy
 8016c92:	617b      	str	r3, [r7, #20]
}
 8016c94:	bf00      	nop
 8016c96:	e7fe      	b.n	8016c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016c98:	4b0a      	ldr	r3, [pc, #40]	; (8016cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	3318      	adds	r3, #24
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	68f8      	ldr	r0, [r7, #12]
 8016ca2:	f7fe f946 	bl	8014f32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d002      	beq.n	8016cb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016cb2:	6879      	ldr	r1, [r7, #4]
 8016cb4:	68b8      	ldr	r0, [r7, #8]
 8016cb6:	f000 fd65 	bl	8017784 <prvAddCurrentTaskToDelayedList>
	}
 8016cba:	bf00      	nop
 8016cbc:	3718      	adds	r7, #24
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
 8016cc2:	bf00      	nop
 8016cc4:	200043f0 	.word	0x200043f0

08016cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b086      	sub	sp, #24
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d10a      	bne.n	8016cf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce2:	f383 8811 	msr	BASEPRI, r3
 8016ce6:	f3bf 8f6f 	isb	sy
 8016cea:	f3bf 8f4f 	dsb	sy
 8016cee:	60fb      	str	r3, [r7, #12]
}
 8016cf0:	bf00      	nop
 8016cf2:	e7fe      	b.n	8016cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	3318      	adds	r3, #24
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7fe f977 	bl	8014fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016cfe:	4b1e      	ldr	r3, [pc, #120]	; (8016d78 <xTaskRemoveFromEventList+0xb0>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d11d      	bne.n	8016d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	3304      	adds	r3, #4
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f7fe f96e 	bl	8014fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d14:	4b19      	ldr	r3, [pc, #100]	; (8016d7c <xTaskRemoveFromEventList+0xb4>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d903      	bls.n	8016d24 <xTaskRemoveFromEventList+0x5c>
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d20:	4a16      	ldr	r2, [pc, #88]	; (8016d7c <xTaskRemoveFromEventList+0xb4>)
 8016d22:	6013      	str	r3, [r2, #0]
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d28:	4613      	mov	r3, r2
 8016d2a:	009b      	lsls	r3, r3, #2
 8016d2c:	4413      	add	r3, r2
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	4a13      	ldr	r2, [pc, #76]	; (8016d80 <xTaskRemoveFromEventList+0xb8>)
 8016d32:	441a      	add	r2, r3
 8016d34:	693b      	ldr	r3, [r7, #16]
 8016d36:	3304      	adds	r3, #4
 8016d38:	4619      	mov	r1, r3
 8016d3a:	4610      	mov	r0, r2
 8016d3c:	f7fe f8f9 	bl	8014f32 <vListInsertEnd>
 8016d40:	e005      	b.n	8016d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	3318      	adds	r3, #24
 8016d46:	4619      	mov	r1, r3
 8016d48:	480e      	ldr	r0, [pc, #56]	; (8016d84 <xTaskRemoveFromEventList+0xbc>)
 8016d4a:	f7fe f8f2 	bl	8014f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d52:	4b0d      	ldr	r3, [pc, #52]	; (8016d88 <xTaskRemoveFromEventList+0xc0>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d905      	bls.n	8016d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016d5c:	2301      	movs	r3, #1
 8016d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016d60:	4b0a      	ldr	r3, [pc, #40]	; (8016d8c <xTaskRemoveFromEventList+0xc4>)
 8016d62:	2201      	movs	r2, #1
 8016d64:	601a      	str	r2, [r3, #0]
 8016d66:	e001      	b.n	8016d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016d6c:	697b      	ldr	r3, [r7, #20]
}
 8016d6e:	4618      	mov	r0, r3
 8016d70:	3718      	adds	r7, #24
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	200048ec 	.word	0x200048ec
 8016d7c:	200048cc 	.word	0x200048cc
 8016d80:	200043f4 	.word	0x200043f4
 8016d84:	20004884 	.word	0x20004884
 8016d88:	200043f0 	.word	0x200043f0
 8016d8c:	200048d8 	.word	0x200048d8

08016d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016d90:	b480      	push	{r7}
 8016d92:	b083      	sub	sp, #12
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016d98:	4b06      	ldr	r3, [pc, #24]	; (8016db4 <vTaskInternalSetTimeOutState+0x24>)
 8016d9a:	681a      	ldr	r2, [r3, #0]
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016da0:	4b05      	ldr	r3, [pc, #20]	; (8016db8 <vTaskInternalSetTimeOutState+0x28>)
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	605a      	str	r2, [r3, #4]
}
 8016da8:	bf00      	nop
 8016daa:	370c      	adds	r7, #12
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr
 8016db4:	200048dc 	.word	0x200048dc
 8016db8:	200048c8 	.word	0x200048c8

08016dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b088      	sub	sp, #32
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d10a      	bne.n	8016de2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dd0:	f383 8811 	msr	BASEPRI, r3
 8016dd4:	f3bf 8f6f 	isb	sy
 8016dd8:	f3bf 8f4f 	dsb	sy
 8016ddc:	613b      	str	r3, [r7, #16]
}
 8016dde:	bf00      	nop
 8016de0:	e7fe      	b.n	8016de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d10a      	bne.n	8016dfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dec:	f383 8811 	msr	BASEPRI, r3
 8016df0:	f3bf 8f6f 	isb	sy
 8016df4:	f3bf 8f4f 	dsb	sy
 8016df8:	60fb      	str	r3, [r7, #12]
}
 8016dfa:	bf00      	nop
 8016dfc:	e7fe      	b.n	8016dfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016dfe:	f001 f991 	bl	8018124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e02:	4b1d      	ldr	r3, [pc, #116]	; (8016e78 <xTaskCheckForTimeOut+0xbc>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	69ba      	ldr	r2, [r7, #24]
 8016e0e:	1ad3      	subs	r3, r2, r3
 8016e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e1a:	d102      	bne.n	8016e22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	61fb      	str	r3, [r7, #28]
 8016e20:	e023      	b.n	8016e6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681a      	ldr	r2, [r3, #0]
 8016e26:	4b15      	ldr	r3, [pc, #84]	; (8016e7c <xTaskCheckForTimeOut+0xc0>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d007      	beq.n	8016e3e <xTaskCheckForTimeOut+0x82>
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	69ba      	ldr	r2, [r7, #24]
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d302      	bcc.n	8016e3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	61fb      	str	r3, [r7, #28]
 8016e3c:	e015      	b.n	8016e6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	697a      	ldr	r2, [r7, #20]
 8016e44:	429a      	cmp	r2, r3
 8016e46:	d20b      	bcs.n	8016e60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	681a      	ldr	r2, [r3, #0]
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	1ad2      	subs	r2, r2, r3
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7ff ff9b 	bl	8016d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	61fb      	str	r3, [r7, #28]
 8016e5e:	e004      	b.n	8016e6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	2200      	movs	r2, #0
 8016e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016e66:	2301      	movs	r3, #1
 8016e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016e6a:	f001 f98b 	bl	8018184 <vPortExitCritical>

	return xReturn;
 8016e6e:	69fb      	ldr	r3, [r7, #28]
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	3720      	adds	r7, #32
 8016e74:	46bd      	mov	sp, r7
 8016e76:	bd80      	pop	{r7, pc}
 8016e78:	200048c8 	.word	0x200048c8
 8016e7c:	200048dc 	.word	0x200048dc

08016e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016e80:	b480      	push	{r7}
 8016e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016e84:	4b03      	ldr	r3, [pc, #12]	; (8016e94 <vTaskMissedYield+0x14>)
 8016e86:	2201      	movs	r2, #1
 8016e88:	601a      	str	r2, [r3, #0]
}
 8016e8a:	bf00      	nop
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e92:	4770      	bx	lr
 8016e94:	200048d8 	.word	0x200048d8

08016e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b082      	sub	sp, #8
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016ea0:	f000 f852 	bl	8016f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016ea4:	4b06      	ldr	r3, [pc, #24]	; (8016ec0 <prvIdleTask+0x28>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2b01      	cmp	r3, #1
 8016eaa:	d9f9      	bls.n	8016ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016eac:	4b05      	ldr	r3, [pc, #20]	; (8016ec4 <prvIdleTask+0x2c>)
 8016eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016eb2:	601a      	str	r2, [r3, #0]
 8016eb4:	f3bf 8f4f 	dsb	sy
 8016eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016ebc:	e7f0      	b.n	8016ea0 <prvIdleTask+0x8>
 8016ebe:	bf00      	nop
 8016ec0:	200043f4 	.word	0x200043f4
 8016ec4:	e000ed04 	.word	0xe000ed04

08016ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b082      	sub	sp, #8
 8016ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ece:	2300      	movs	r3, #0
 8016ed0:	607b      	str	r3, [r7, #4]
 8016ed2:	e00c      	b.n	8016eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	009b      	lsls	r3, r3, #2
 8016eda:	4413      	add	r3, r2
 8016edc:	009b      	lsls	r3, r3, #2
 8016ede:	4a12      	ldr	r2, [pc, #72]	; (8016f28 <prvInitialiseTaskLists+0x60>)
 8016ee0:	4413      	add	r3, r2
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fd fff8 	bl	8014ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	3301      	adds	r3, #1
 8016eec:	607b      	str	r3, [r7, #4]
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2b37      	cmp	r3, #55	; 0x37
 8016ef2:	d9ef      	bls.n	8016ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016ef4:	480d      	ldr	r0, [pc, #52]	; (8016f2c <prvInitialiseTaskLists+0x64>)
 8016ef6:	f7fd ffef 	bl	8014ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016efa:	480d      	ldr	r0, [pc, #52]	; (8016f30 <prvInitialiseTaskLists+0x68>)
 8016efc:	f7fd ffec 	bl	8014ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f00:	480c      	ldr	r0, [pc, #48]	; (8016f34 <prvInitialiseTaskLists+0x6c>)
 8016f02:	f7fd ffe9 	bl	8014ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f06:	480c      	ldr	r0, [pc, #48]	; (8016f38 <prvInitialiseTaskLists+0x70>)
 8016f08:	f7fd ffe6 	bl	8014ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016f0c:	480b      	ldr	r0, [pc, #44]	; (8016f3c <prvInitialiseTaskLists+0x74>)
 8016f0e:	f7fd ffe3 	bl	8014ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016f12:	4b0b      	ldr	r3, [pc, #44]	; (8016f40 <prvInitialiseTaskLists+0x78>)
 8016f14:	4a05      	ldr	r2, [pc, #20]	; (8016f2c <prvInitialiseTaskLists+0x64>)
 8016f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016f18:	4b0a      	ldr	r3, [pc, #40]	; (8016f44 <prvInitialiseTaskLists+0x7c>)
 8016f1a:	4a05      	ldr	r2, [pc, #20]	; (8016f30 <prvInitialiseTaskLists+0x68>)
 8016f1c:	601a      	str	r2, [r3, #0]
}
 8016f1e:	bf00      	nop
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	200043f4 	.word	0x200043f4
 8016f2c:	20004854 	.word	0x20004854
 8016f30:	20004868 	.word	0x20004868
 8016f34:	20004884 	.word	0x20004884
 8016f38:	20004898 	.word	0x20004898
 8016f3c:	200048b0 	.word	0x200048b0
 8016f40:	2000487c 	.word	0x2000487c
 8016f44:	20004880 	.word	0x20004880

08016f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b082      	sub	sp, #8
 8016f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016f4e:	e019      	b.n	8016f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016f50:	f001 f8e8 	bl	8018124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f54:	4b10      	ldr	r3, [pc, #64]	; (8016f98 <prvCheckTasksWaitingTermination+0x50>)
 8016f56:	68db      	ldr	r3, [r3, #12]
 8016f58:	68db      	ldr	r3, [r3, #12]
 8016f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	3304      	adds	r3, #4
 8016f60:	4618      	mov	r0, r3
 8016f62:	f7fe f843 	bl	8014fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016f66:	4b0d      	ldr	r3, [pc, #52]	; (8016f9c <prvCheckTasksWaitingTermination+0x54>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	3b01      	subs	r3, #1
 8016f6c:	4a0b      	ldr	r2, [pc, #44]	; (8016f9c <prvCheckTasksWaitingTermination+0x54>)
 8016f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016f70:	4b0b      	ldr	r3, [pc, #44]	; (8016fa0 <prvCheckTasksWaitingTermination+0x58>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	3b01      	subs	r3, #1
 8016f76:	4a0a      	ldr	r2, [pc, #40]	; (8016fa0 <prvCheckTasksWaitingTermination+0x58>)
 8016f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016f7a:	f001 f903 	bl	8018184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f000 f810 	bl	8016fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016f84:	4b06      	ldr	r3, [pc, #24]	; (8016fa0 <prvCheckTasksWaitingTermination+0x58>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d1e1      	bne.n	8016f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016f8c:	bf00      	nop
 8016f8e:	bf00      	nop
 8016f90:	3708      	adds	r7, #8
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	20004898 	.word	0x20004898
 8016f9c:	200048c4 	.word	0x200048c4
 8016fa0:	200048ac 	.word	0x200048ac

08016fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	3358      	adds	r3, #88	; 0x58
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f003 fa2b 	bl	801a40c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d108      	bne.n	8016fd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f001 fa9b 	bl	8018500 <vPortFree>
				vPortFree( pxTCB );
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f001 fa98 	bl	8018500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016fd0:	e018      	b.n	8017004 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	d103      	bne.n	8016fe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f001 fa8f 	bl	8018500 <vPortFree>
	}
 8016fe2:	e00f      	b.n	8017004 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8016fea:	2b02      	cmp	r3, #2
 8016fec:	d00a      	beq.n	8017004 <prvDeleteTCB+0x60>
	__asm volatile
 8016fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff2:	f383 8811 	msr	BASEPRI, r3
 8016ff6:	f3bf 8f6f 	isb	sy
 8016ffa:	f3bf 8f4f 	dsb	sy
 8016ffe:	60fb      	str	r3, [r7, #12]
}
 8017000:	bf00      	nop
 8017002:	e7fe      	b.n	8017002 <prvDeleteTCB+0x5e>
	}
 8017004:	bf00      	nop
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801700c:	b480      	push	{r7}
 801700e:	b083      	sub	sp, #12
 8017010:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017012:	4b0c      	ldr	r3, [pc, #48]	; (8017044 <prvResetNextTaskUnblockTime+0x38>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d104      	bne.n	8017026 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801701c:	4b0a      	ldr	r3, [pc, #40]	; (8017048 <prvResetNextTaskUnblockTime+0x3c>)
 801701e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017022:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017024:	e008      	b.n	8017038 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017026:	4b07      	ldr	r3, [pc, #28]	; (8017044 <prvResetNextTaskUnblockTime+0x38>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	68db      	ldr	r3, [r3, #12]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	685b      	ldr	r3, [r3, #4]
 8017034:	4a04      	ldr	r2, [pc, #16]	; (8017048 <prvResetNextTaskUnblockTime+0x3c>)
 8017036:	6013      	str	r3, [r2, #0]
}
 8017038:	bf00      	nop
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017042:	4770      	bx	lr
 8017044:	2000487c 	.word	0x2000487c
 8017048:	200048e4 	.word	0x200048e4

0801704c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801704c:	b480      	push	{r7}
 801704e:	b083      	sub	sp, #12
 8017050:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017052:	4b05      	ldr	r3, [pc, #20]	; (8017068 <xTaskGetCurrentTaskHandle+0x1c>)
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017058:	687b      	ldr	r3, [r7, #4]
	}
 801705a:	4618      	mov	r0, r3
 801705c:	370c      	adds	r7, #12
 801705e:	46bd      	mov	sp, r7
 8017060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017064:	4770      	bx	lr
 8017066:	bf00      	nop
 8017068:	200043f0 	.word	0x200043f0

0801706c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801706c:	b480      	push	{r7}
 801706e:	b083      	sub	sp, #12
 8017070:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017072:	4b0b      	ldr	r3, [pc, #44]	; (80170a0 <xTaskGetSchedulerState+0x34>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d102      	bne.n	8017080 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801707a:	2301      	movs	r3, #1
 801707c:	607b      	str	r3, [r7, #4]
 801707e:	e008      	b.n	8017092 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017080:	4b08      	ldr	r3, [pc, #32]	; (80170a4 <xTaskGetSchedulerState+0x38>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d102      	bne.n	801708e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017088:	2302      	movs	r3, #2
 801708a:	607b      	str	r3, [r7, #4]
 801708c:	e001      	b.n	8017092 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801708e:	2300      	movs	r3, #0
 8017090:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017092:	687b      	ldr	r3, [r7, #4]
	}
 8017094:	4618      	mov	r0, r3
 8017096:	370c      	adds	r7, #12
 8017098:	46bd      	mov	sp, r7
 801709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709e:	4770      	bx	lr
 80170a0:	200048d0 	.word	0x200048d0
 80170a4:	200048ec 	.word	0x200048ec

080170a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80170b4:	2300      	movs	r3, #0
 80170b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d051      	beq.n	8017162 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170c2:	4b2a      	ldr	r3, [pc, #168]	; (801716c <xTaskPriorityInherit+0xc4>)
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c8:	429a      	cmp	r2, r3
 80170ca:	d241      	bcs.n	8017150 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	699b      	ldr	r3, [r3, #24]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	db06      	blt.n	80170e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170d4:	4b25      	ldr	r3, [pc, #148]	; (801716c <xTaskPriorityInherit+0xc4>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	6959      	ldr	r1, [r3, #20]
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ea:	4613      	mov	r3, r2
 80170ec:	009b      	lsls	r3, r3, #2
 80170ee:	4413      	add	r3, r2
 80170f0:	009b      	lsls	r3, r3, #2
 80170f2:	4a1f      	ldr	r2, [pc, #124]	; (8017170 <xTaskPriorityInherit+0xc8>)
 80170f4:	4413      	add	r3, r2
 80170f6:	4299      	cmp	r1, r3
 80170f8:	d122      	bne.n	8017140 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	3304      	adds	r3, #4
 80170fe:	4618      	mov	r0, r3
 8017100:	f7fd ff74 	bl	8014fec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017104:	4b19      	ldr	r3, [pc, #100]	; (801716c <xTaskPriorityInherit+0xc4>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017112:	4b18      	ldr	r3, [pc, #96]	; (8017174 <xTaskPriorityInherit+0xcc>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	429a      	cmp	r2, r3
 8017118:	d903      	bls.n	8017122 <xTaskPriorityInherit+0x7a>
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801711e:	4a15      	ldr	r2, [pc, #84]	; (8017174 <xTaskPriorityInherit+0xcc>)
 8017120:	6013      	str	r3, [r2, #0]
 8017122:	68bb      	ldr	r3, [r7, #8]
 8017124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017126:	4613      	mov	r3, r2
 8017128:	009b      	lsls	r3, r3, #2
 801712a:	4413      	add	r3, r2
 801712c:	009b      	lsls	r3, r3, #2
 801712e:	4a10      	ldr	r2, [pc, #64]	; (8017170 <xTaskPriorityInherit+0xc8>)
 8017130:	441a      	add	r2, r3
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	3304      	adds	r3, #4
 8017136:	4619      	mov	r1, r3
 8017138:	4610      	mov	r0, r2
 801713a:	f7fd fefa 	bl	8014f32 <vListInsertEnd>
 801713e:	e004      	b.n	801714a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017140:	4b0a      	ldr	r3, [pc, #40]	; (801716c <xTaskPriorityInherit+0xc4>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801714a:	2301      	movs	r3, #1
 801714c:	60fb      	str	r3, [r7, #12]
 801714e:	e008      	b.n	8017162 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017154:	4b05      	ldr	r3, [pc, #20]	; (801716c <xTaskPriorityInherit+0xc4>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801715a:	429a      	cmp	r2, r3
 801715c:	d201      	bcs.n	8017162 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801715e:	2301      	movs	r3, #1
 8017160:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017162:	68fb      	ldr	r3, [r7, #12]
	}
 8017164:	4618      	mov	r0, r3
 8017166:	3710      	adds	r7, #16
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}
 801716c:	200043f0 	.word	0x200043f0
 8017170:	200043f4 	.word	0x200043f4
 8017174:	200048cc 	.word	0x200048cc

08017178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017178:	b580      	push	{r7, lr}
 801717a:	b086      	sub	sp, #24
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017184:	2300      	movs	r3, #0
 8017186:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d056      	beq.n	801723c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801718e:	4b2e      	ldr	r3, [pc, #184]	; (8017248 <xTaskPriorityDisinherit+0xd0>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	693a      	ldr	r2, [r7, #16]
 8017194:	429a      	cmp	r2, r3
 8017196:	d00a      	beq.n	80171ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801719c:	f383 8811 	msr	BASEPRI, r3
 80171a0:	f3bf 8f6f 	isb	sy
 80171a4:	f3bf 8f4f 	dsb	sy
 80171a8:	60fb      	str	r3, [r7, #12]
}
 80171aa:	bf00      	nop
 80171ac:	e7fe      	b.n	80171ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80171ae:	693b      	ldr	r3, [r7, #16]
 80171b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d10a      	bne.n	80171cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80171b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ba:	f383 8811 	msr	BASEPRI, r3
 80171be:	f3bf 8f6f 	isb	sy
 80171c2:	f3bf 8f4f 	dsb	sy
 80171c6:	60bb      	str	r3, [r7, #8]
}
 80171c8:	bf00      	nop
 80171ca:	e7fe      	b.n	80171ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80171cc:	693b      	ldr	r3, [r7, #16]
 80171ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171d0:	1e5a      	subs	r2, r3, #1
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171de:	429a      	cmp	r2, r3
 80171e0:	d02c      	beq.n	801723c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d128      	bne.n	801723c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80171ea:	693b      	ldr	r3, [r7, #16]
 80171ec:	3304      	adds	r3, #4
 80171ee:	4618      	mov	r0, r3
 80171f0:	f7fd fefc 	bl	8014fec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017200:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017204:	693b      	ldr	r3, [r7, #16]
 8017206:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801720c:	4b0f      	ldr	r3, [pc, #60]	; (801724c <xTaskPriorityDisinherit+0xd4>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	429a      	cmp	r2, r3
 8017212:	d903      	bls.n	801721c <xTaskPriorityDisinherit+0xa4>
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017218:	4a0c      	ldr	r2, [pc, #48]	; (801724c <xTaskPriorityDisinherit+0xd4>)
 801721a:	6013      	str	r3, [r2, #0]
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017220:	4613      	mov	r3, r2
 8017222:	009b      	lsls	r3, r3, #2
 8017224:	4413      	add	r3, r2
 8017226:	009b      	lsls	r3, r3, #2
 8017228:	4a09      	ldr	r2, [pc, #36]	; (8017250 <xTaskPriorityDisinherit+0xd8>)
 801722a:	441a      	add	r2, r3
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	3304      	adds	r3, #4
 8017230:	4619      	mov	r1, r3
 8017232:	4610      	mov	r0, r2
 8017234:	f7fd fe7d 	bl	8014f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017238:	2301      	movs	r3, #1
 801723a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801723c:	697b      	ldr	r3, [r7, #20]
	}
 801723e:	4618      	mov	r0, r3
 8017240:	3718      	adds	r7, #24
 8017242:	46bd      	mov	sp, r7
 8017244:	bd80      	pop	{r7, pc}
 8017246:	bf00      	nop
 8017248:	200043f0 	.word	0x200043f0
 801724c:	200048cc 	.word	0x200048cc
 8017250:	200043f4 	.word	0x200043f4

08017254 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017254:	b580      	push	{r7, lr}
 8017256:	b088      	sub	sp, #32
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017262:	2301      	movs	r3, #1
 8017264:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d06a      	beq.n	8017342 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801726c:	69bb      	ldr	r3, [r7, #24]
 801726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017270:	2b00      	cmp	r3, #0
 8017272:	d10a      	bne.n	801728a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017278:	f383 8811 	msr	BASEPRI, r3
 801727c:	f3bf 8f6f 	isb	sy
 8017280:	f3bf 8f4f 	dsb	sy
 8017284:	60fb      	str	r3, [r7, #12]
}
 8017286:	bf00      	nop
 8017288:	e7fe      	b.n	8017288 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801728a:	69bb      	ldr	r3, [r7, #24]
 801728c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801728e:	683a      	ldr	r2, [r7, #0]
 8017290:	429a      	cmp	r2, r3
 8017292:	d902      	bls.n	801729a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017294:	683b      	ldr	r3, [r7, #0]
 8017296:	61fb      	str	r3, [r7, #28]
 8017298:	e002      	b.n	80172a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801729a:	69bb      	ldr	r3, [r7, #24]
 801729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801729e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80172a0:	69bb      	ldr	r3, [r7, #24]
 80172a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172a4:	69fa      	ldr	r2, [r7, #28]
 80172a6:	429a      	cmp	r2, r3
 80172a8:	d04b      	beq.n	8017342 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80172aa:	69bb      	ldr	r3, [r7, #24]
 80172ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172ae:	697a      	ldr	r2, [r7, #20]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d146      	bne.n	8017342 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80172b4:	4b25      	ldr	r3, [pc, #148]	; (801734c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	69ba      	ldr	r2, [r7, #24]
 80172ba:	429a      	cmp	r2, r3
 80172bc:	d10a      	bne.n	80172d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80172be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c2:	f383 8811 	msr	BASEPRI, r3
 80172c6:	f3bf 8f6f 	isb	sy
 80172ca:	f3bf 8f4f 	dsb	sy
 80172ce:	60bb      	str	r3, [r7, #8]
}
 80172d0:	bf00      	nop
 80172d2:	e7fe      	b.n	80172d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80172d4:	69bb      	ldr	r3, [r7, #24]
 80172d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	69fa      	ldr	r2, [r7, #28]
 80172de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	699b      	ldr	r3, [r3, #24]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	db04      	blt.n	80172f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	6959      	ldr	r1, [r3, #20]
 80172f6:	693a      	ldr	r2, [r7, #16]
 80172f8:	4613      	mov	r3, r2
 80172fa:	009b      	lsls	r3, r3, #2
 80172fc:	4413      	add	r3, r2
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	4a13      	ldr	r2, [pc, #76]	; (8017350 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017302:	4413      	add	r3, r2
 8017304:	4299      	cmp	r1, r3
 8017306:	d11c      	bne.n	8017342 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017308:	69bb      	ldr	r3, [r7, #24]
 801730a:	3304      	adds	r3, #4
 801730c:	4618      	mov	r0, r3
 801730e:	f7fd fe6d 	bl	8014fec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017312:	69bb      	ldr	r3, [r7, #24]
 8017314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017316:	4b0f      	ldr	r3, [pc, #60]	; (8017354 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	429a      	cmp	r2, r3
 801731c:	d903      	bls.n	8017326 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801731e:	69bb      	ldr	r3, [r7, #24]
 8017320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017322:	4a0c      	ldr	r2, [pc, #48]	; (8017354 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017324:	6013      	str	r3, [r2, #0]
 8017326:	69bb      	ldr	r3, [r7, #24]
 8017328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801732a:	4613      	mov	r3, r2
 801732c:	009b      	lsls	r3, r3, #2
 801732e:	4413      	add	r3, r2
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	4a07      	ldr	r2, [pc, #28]	; (8017350 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017334:	441a      	add	r2, r3
 8017336:	69bb      	ldr	r3, [r7, #24]
 8017338:	3304      	adds	r3, #4
 801733a:	4619      	mov	r1, r3
 801733c:	4610      	mov	r0, r2
 801733e:	f7fd fdf8 	bl	8014f32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017342:	bf00      	nop
 8017344:	3720      	adds	r7, #32
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	200043f0 	.word	0x200043f0
 8017350:	200043f4 	.word	0x200043f4
 8017354:	200048cc 	.word	0x200048cc

08017358 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017358:	b480      	push	{r7}
 801735a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801735c:	4b07      	ldr	r3, [pc, #28]	; (801737c <pvTaskIncrementMutexHeldCount+0x24>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d004      	beq.n	801736e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017364:	4b05      	ldr	r3, [pc, #20]	; (801737c <pvTaskIncrementMutexHeldCount+0x24>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801736a:	3201      	adds	r2, #1
 801736c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801736e:	4b03      	ldr	r3, [pc, #12]	; (801737c <pvTaskIncrementMutexHeldCount+0x24>)
 8017370:	681b      	ldr	r3, [r3, #0]
	}
 8017372:	4618      	mov	r0, r3
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr
 801737c:	200043f0 	.word	0x200043f0

08017380 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8017380:	b580      	push	{r7, lr}
 8017382:	b086      	sub	sp, #24
 8017384:	af00      	add	r7, sp, #0
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
 801738c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801738e:	f000 fec9 	bl	8018124 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017392:	4b29      	ldr	r3, [pc, #164]	; (8017438 <xTaskNotifyWait+0xb8>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801739a:	b2db      	uxtb	r3, r3
 801739c:	2b02      	cmp	r3, #2
 801739e:	d01c      	beq.n	80173da <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80173a0:	4b25      	ldr	r3, [pc, #148]	; (8017438 <xTaskNotifyWait+0xb8>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80173a8:	68fa      	ldr	r2, [r7, #12]
 80173aa:	43d2      	mvns	r2, r2
 80173ac:	400a      	ands	r2, r1
 80173ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80173b2:	4b21      	ldr	r3, [pc, #132]	; (8017438 <xTaskNotifyWait+0xb8>)
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	2201      	movs	r2, #1
 80173b8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d00b      	beq.n	80173da <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80173c2:	2101      	movs	r1, #1
 80173c4:	6838      	ldr	r0, [r7, #0]
 80173c6:	f000 f9dd 	bl	8017784 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80173ca:	4b1c      	ldr	r3, [pc, #112]	; (801743c <xTaskNotifyWait+0xbc>)
 80173cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173d0:	601a      	str	r2, [r3, #0]
 80173d2:	f3bf 8f4f 	dsb	sy
 80173d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80173da:	f000 fed3 	bl	8018184 <vPortExitCritical>

		taskENTER_CRITICAL();
 80173de:	f000 fea1 	bl	8018124 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d005      	beq.n	80173f4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80173e8:	4b13      	ldr	r3, [pc, #76]	; (8017438 <xTaskNotifyWait+0xb8>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80173f4:	4b10      	ldr	r3, [pc, #64]	; (8017438 <xTaskNotifyWait+0xb8>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	2b02      	cmp	r3, #2
 8017400:	d002      	beq.n	8017408 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8017402:	2300      	movs	r3, #0
 8017404:	617b      	str	r3, [r7, #20]
 8017406:	e00a      	b.n	801741e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8017408:	4b0b      	ldr	r3, [pc, #44]	; (8017438 <xTaskNotifyWait+0xb8>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8017410:	68ba      	ldr	r2, [r7, #8]
 8017412:	43d2      	mvns	r2, r2
 8017414:	400a      	ands	r2, r1
 8017416:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801741a:	2301      	movs	r3, #1
 801741c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801741e:	4b06      	ldr	r3, [pc, #24]	; (8017438 <xTaskNotifyWait+0xb8>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2200      	movs	r2, #0
 8017424:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8017428:	f000 feac 	bl	8018184 <vPortExitCritical>

		return xReturn;
 801742c:	697b      	ldr	r3, [r7, #20]
	}
 801742e:	4618      	mov	r0, r3
 8017430:	3718      	adds	r7, #24
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}
 8017436:	bf00      	nop
 8017438:	200043f0 	.word	0x200043f0
 801743c:	e000ed04 	.word	0xe000ed04

08017440 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8017440:	b580      	push	{r7, lr}
 8017442:	b08a      	sub	sp, #40	; 0x28
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	603b      	str	r3, [r7, #0]
 801744c:	4613      	mov	r3, r2
 801744e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8017450:	2301      	movs	r3, #1
 8017452:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d10a      	bne.n	8017470 <xTaskGenericNotify+0x30>
	__asm volatile
 801745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801745e:	f383 8811 	msr	BASEPRI, r3
 8017462:	f3bf 8f6f 	isb	sy
 8017466:	f3bf 8f4f 	dsb	sy
 801746a:	61bb      	str	r3, [r7, #24]
}
 801746c:	bf00      	nop
 801746e:	e7fe      	b.n	801746e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8017474:	f000 fe56 	bl	8018124 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d004      	beq.n	8017488 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801747e:	6a3b      	ldr	r3, [r7, #32]
 8017480:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017488:	6a3b      	ldr	r3, [r7, #32]
 801748a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801748e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017490:	6a3b      	ldr	r3, [r7, #32]
 8017492:	2202      	movs	r2, #2
 8017494:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8017498:	79fb      	ldrb	r3, [r7, #7]
 801749a:	2b04      	cmp	r3, #4
 801749c:	d82d      	bhi.n	80174fa <xTaskGenericNotify+0xba>
 801749e:	a201      	add	r2, pc, #4	; (adr r2, 80174a4 <xTaskGenericNotify+0x64>)
 80174a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174a4:	0801751d 	.word	0x0801751d
 80174a8:	080174b9 	.word	0x080174b9
 80174ac:	080174cb 	.word	0x080174cb
 80174b0:	080174db 	.word	0x080174db
 80174b4:	080174e5 	.word	0x080174e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80174b8:	6a3b      	ldr	r3, [r7, #32]
 80174ba:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	431a      	orrs	r2, r3
 80174c2:	6a3b      	ldr	r3, [r7, #32]
 80174c4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80174c8:	e02b      	b.n	8017522 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80174ca:	6a3b      	ldr	r3, [r7, #32]
 80174cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80174d0:	1c5a      	adds	r2, r3, #1
 80174d2:	6a3b      	ldr	r3, [r7, #32]
 80174d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80174d8:	e023      	b.n	8017522 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80174da:	6a3b      	ldr	r3, [r7, #32]
 80174dc:	68ba      	ldr	r2, [r7, #8]
 80174de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80174e2:	e01e      	b.n	8017522 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80174e4:	7ffb      	ldrb	r3, [r7, #31]
 80174e6:	2b02      	cmp	r3, #2
 80174e8:	d004      	beq.n	80174f4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80174ea:	6a3b      	ldr	r3, [r7, #32]
 80174ec:	68ba      	ldr	r2, [r7, #8]
 80174ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80174f2:	e016      	b.n	8017522 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80174f4:	2300      	movs	r3, #0
 80174f6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80174f8:	e013      	b.n	8017522 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80174fa:	6a3b      	ldr	r3, [r7, #32]
 80174fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017504:	d00c      	beq.n	8017520 <xTaskGenericNotify+0xe0>
	__asm volatile
 8017506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801750a:	f383 8811 	msr	BASEPRI, r3
 801750e:	f3bf 8f6f 	isb	sy
 8017512:	f3bf 8f4f 	dsb	sy
 8017516:	617b      	str	r3, [r7, #20]
}
 8017518:	bf00      	nop
 801751a:	e7fe      	b.n	801751a <xTaskGenericNotify+0xda>
					break;
 801751c:	bf00      	nop
 801751e:	e000      	b.n	8017522 <xTaskGenericNotify+0xe2>

					break;
 8017520:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017522:	7ffb      	ldrb	r3, [r7, #31]
 8017524:	2b01      	cmp	r3, #1
 8017526:	d13a      	bne.n	801759e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017528:	6a3b      	ldr	r3, [r7, #32]
 801752a:	3304      	adds	r3, #4
 801752c:	4618      	mov	r0, r3
 801752e:	f7fd fd5d 	bl	8014fec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8017532:	6a3b      	ldr	r3, [r7, #32]
 8017534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017536:	4b1d      	ldr	r3, [pc, #116]	; (80175ac <xTaskGenericNotify+0x16c>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	429a      	cmp	r2, r3
 801753c:	d903      	bls.n	8017546 <xTaskGenericNotify+0x106>
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017542:	4a1a      	ldr	r2, [pc, #104]	; (80175ac <xTaskGenericNotify+0x16c>)
 8017544:	6013      	str	r3, [r2, #0]
 8017546:	6a3b      	ldr	r3, [r7, #32]
 8017548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801754a:	4613      	mov	r3, r2
 801754c:	009b      	lsls	r3, r3, #2
 801754e:	4413      	add	r3, r2
 8017550:	009b      	lsls	r3, r3, #2
 8017552:	4a17      	ldr	r2, [pc, #92]	; (80175b0 <xTaskGenericNotify+0x170>)
 8017554:	441a      	add	r2, r3
 8017556:	6a3b      	ldr	r3, [r7, #32]
 8017558:	3304      	adds	r3, #4
 801755a:	4619      	mov	r1, r3
 801755c:	4610      	mov	r0, r2
 801755e:	f7fd fce8 	bl	8014f32 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017562:	6a3b      	ldr	r3, [r7, #32]
 8017564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017566:	2b00      	cmp	r3, #0
 8017568:	d00a      	beq.n	8017580 <xTaskGenericNotify+0x140>
	__asm volatile
 801756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801756e:	f383 8811 	msr	BASEPRI, r3
 8017572:	f3bf 8f6f 	isb	sy
 8017576:	f3bf 8f4f 	dsb	sy
 801757a:	613b      	str	r3, [r7, #16]
}
 801757c:	bf00      	nop
 801757e:	e7fe      	b.n	801757e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017580:	6a3b      	ldr	r3, [r7, #32]
 8017582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017584:	4b0b      	ldr	r3, [pc, #44]	; (80175b4 <xTaskGenericNotify+0x174>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801758a:	429a      	cmp	r2, r3
 801758c:	d907      	bls.n	801759e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801758e:	4b0a      	ldr	r3, [pc, #40]	; (80175b8 <xTaskGenericNotify+0x178>)
 8017590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017594:	601a      	str	r2, [r3, #0]
 8017596:	f3bf 8f4f 	dsb	sy
 801759a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801759e:	f000 fdf1 	bl	8018184 <vPortExitCritical>

		return xReturn;
 80175a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80175a4:	4618      	mov	r0, r3
 80175a6:	3728      	adds	r7, #40	; 0x28
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}
 80175ac:	200048cc 	.word	0x200048cc
 80175b0:	200043f4 	.word	0x200043f4
 80175b4:	200043f0 	.word	0x200043f0
 80175b8:	e000ed04 	.word	0xe000ed04

080175bc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b08e      	sub	sp, #56	; 0x38
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	603b      	str	r3, [r7, #0]
 80175c8:	4613      	mov	r3, r2
 80175ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80175cc:	2301      	movs	r3, #1
 80175ce:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d10a      	bne.n	80175ec <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80175d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175da:	f383 8811 	msr	BASEPRI, r3
 80175de:	f3bf 8f6f 	isb	sy
 80175e2:	f3bf 8f4f 	dsb	sy
 80175e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80175e8:	bf00      	nop
 80175ea:	e7fe      	b.n	80175ea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80175ec:	f000 fe7c 	bl	80182e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80175f4:	f3ef 8211 	mrs	r2, BASEPRI
 80175f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175fc:	f383 8811 	msr	BASEPRI, r3
 8017600:	f3bf 8f6f 	isb	sy
 8017604:	f3bf 8f4f 	dsb	sy
 8017608:	623a      	str	r2, [r7, #32]
 801760a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801760c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801760e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d004      	beq.n	8017620 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017618:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017622:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8017626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801762c:	2202      	movs	r2, #2
 801762e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8017632:	79fb      	ldrb	r3, [r7, #7]
 8017634:	2b04      	cmp	r3, #4
 8017636:	d82f      	bhi.n	8017698 <xTaskGenericNotifyFromISR+0xdc>
 8017638:	a201      	add	r2, pc, #4	; (adr r2, 8017640 <xTaskGenericNotifyFromISR+0x84>)
 801763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801763e:	bf00      	nop
 8017640:	080176bb 	.word	0x080176bb
 8017644:	08017655 	.word	0x08017655
 8017648:	08017667 	.word	0x08017667
 801764c:	08017677 	.word	0x08017677
 8017650:	08017681 	.word	0x08017681
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017656:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	431a      	orrs	r2, r3
 801765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017660:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8017664:	e02c      	b.n	80176c0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017668:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801766c:	1c5a      	adds	r2, r3, #1
 801766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017670:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8017674:	e024      	b.n	80176c0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017678:	68ba      	ldr	r2, [r7, #8]
 801767a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801767e:	e01f      	b.n	80176c0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017684:	2b02      	cmp	r3, #2
 8017686:	d004      	beq.n	8017692 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768a:	68ba      	ldr	r2, [r7, #8]
 801768c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017690:	e016      	b.n	80176c0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8017692:	2300      	movs	r3, #0
 8017694:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8017696:	e013      	b.n	80176c0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801769e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176a2:	d00c      	beq.n	80176be <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80176a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a8:	f383 8811 	msr	BASEPRI, r3
 80176ac:	f3bf 8f6f 	isb	sy
 80176b0:	f3bf 8f4f 	dsb	sy
 80176b4:	61bb      	str	r3, [r7, #24]
}
 80176b6:	bf00      	nop
 80176b8:	e7fe      	b.n	80176b8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80176ba:	bf00      	nop
 80176bc:	e000      	b.n	80176c0 <xTaskGenericNotifyFromISR+0x104>
					break;
 80176be:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80176c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80176c4:	2b01      	cmp	r3, #1
 80176c6:	d146      	bne.n	8017756 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80176c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d00a      	beq.n	80176e6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80176d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d4:	f383 8811 	msr	BASEPRI, r3
 80176d8:	f3bf 8f6f 	isb	sy
 80176dc:	f3bf 8f4f 	dsb	sy
 80176e0:	617b      	str	r3, [r7, #20]
}
 80176e2:	bf00      	nop
 80176e4:	e7fe      	b.n	80176e4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80176e6:	4b21      	ldr	r3, [pc, #132]	; (801776c <xTaskGenericNotifyFromISR+0x1b0>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d11d      	bne.n	801772a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80176ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f0:	3304      	adds	r3, #4
 80176f2:	4618      	mov	r0, r3
 80176f4:	f7fd fc7a 	bl	8014fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80176f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176fc:	4b1c      	ldr	r3, [pc, #112]	; (8017770 <xTaskGenericNotifyFromISR+0x1b4>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	429a      	cmp	r2, r3
 8017702:	d903      	bls.n	801770c <xTaskGenericNotifyFromISR+0x150>
 8017704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017708:	4a19      	ldr	r2, [pc, #100]	; (8017770 <xTaskGenericNotifyFromISR+0x1b4>)
 801770a:	6013      	str	r3, [r2, #0]
 801770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017710:	4613      	mov	r3, r2
 8017712:	009b      	lsls	r3, r3, #2
 8017714:	4413      	add	r3, r2
 8017716:	009b      	lsls	r3, r3, #2
 8017718:	4a16      	ldr	r2, [pc, #88]	; (8017774 <xTaskGenericNotifyFromISR+0x1b8>)
 801771a:	441a      	add	r2, r3
 801771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771e:	3304      	adds	r3, #4
 8017720:	4619      	mov	r1, r3
 8017722:	4610      	mov	r0, r2
 8017724:	f7fd fc05 	bl	8014f32 <vListInsertEnd>
 8017728:	e005      	b.n	8017736 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772c:	3318      	adds	r3, #24
 801772e:	4619      	mov	r1, r3
 8017730:	4811      	ldr	r0, [pc, #68]	; (8017778 <xTaskGenericNotifyFromISR+0x1bc>)
 8017732:	f7fd fbfe 	bl	8014f32 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801773a:	4b10      	ldr	r3, [pc, #64]	; (801777c <xTaskGenericNotifyFromISR+0x1c0>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017740:	429a      	cmp	r2, r3
 8017742:	d908      	bls.n	8017756 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017746:	2b00      	cmp	r3, #0
 8017748:	d002      	beq.n	8017750 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801774a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801774c:	2201      	movs	r2, #1
 801774e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017750:	4b0b      	ldr	r3, [pc, #44]	; (8017780 <xTaskGenericNotifyFromISR+0x1c4>)
 8017752:	2201      	movs	r2, #1
 8017754:	601a      	str	r2, [r3, #0]
 8017756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017758:	613b      	str	r3, [r7, #16]
	__asm volatile
 801775a:	693b      	ldr	r3, [r7, #16]
 801775c:	f383 8811 	msr	BASEPRI, r3
}
 8017760:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8017762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8017764:	4618      	mov	r0, r3
 8017766:	3738      	adds	r7, #56	; 0x38
 8017768:	46bd      	mov	sp, r7
 801776a:	bd80      	pop	{r7, pc}
 801776c:	200048ec 	.word	0x200048ec
 8017770:	200048cc 	.word	0x200048cc
 8017774:	200043f4 	.word	0x200043f4
 8017778:	20004884 	.word	0x20004884
 801777c:	200043f0 	.word	0x200043f0
 8017780:	200048d8 	.word	0x200048d8

08017784 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801778e:	4b21      	ldr	r3, [pc, #132]	; (8017814 <prvAddCurrentTaskToDelayedList+0x90>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017794:	4b20      	ldr	r3, [pc, #128]	; (8017818 <prvAddCurrentTaskToDelayedList+0x94>)
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	3304      	adds	r3, #4
 801779a:	4618      	mov	r0, r3
 801779c:	f7fd fc26 	bl	8014fec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177a6:	d10a      	bne.n	80177be <prvAddCurrentTaskToDelayedList+0x3a>
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d007      	beq.n	80177be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80177ae:	4b1a      	ldr	r3, [pc, #104]	; (8017818 <prvAddCurrentTaskToDelayedList+0x94>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	3304      	adds	r3, #4
 80177b4:	4619      	mov	r1, r3
 80177b6:	4819      	ldr	r0, [pc, #100]	; (801781c <prvAddCurrentTaskToDelayedList+0x98>)
 80177b8:	f7fd fbbb 	bl	8014f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80177bc:	e026      	b.n	801780c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80177be:	68fa      	ldr	r2, [r7, #12]
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	4413      	add	r3, r2
 80177c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80177c6:	4b14      	ldr	r3, [pc, #80]	; (8017818 <prvAddCurrentTaskToDelayedList+0x94>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	68ba      	ldr	r2, [r7, #8]
 80177cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80177ce:	68ba      	ldr	r2, [r7, #8]
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d209      	bcs.n	80177ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80177d6:	4b12      	ldr	r3, [pc, #72]	; (8017820 <prvAddCurrentTaskToDelayedList+0x9c>)
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	4b0f      	ldr	r3, [pc, #60]	; (8017818 <prvAddCurrentTaskToDelayedList+0x94>)
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	3304      	adds	r3, #4
 80177e0:	4619      	mov	r1, r3
 80177e2:	4610      	mov	r0, r2
 80177e4:	f7fd fbc9 	bl	8014f7a <vListInsert>
}
 80177e8:	e010      	b.n	801780c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80177ea:	4b0e      	ldr	r3, [pc, #56]	; (8017824 <prvAddCurrentTaskToDelayedList+0xa0>)
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	4b0a      	ldr	r3, [pc, #40]	; (8017818 <prvAddCurrentTaskToDelayedList+0x94>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	3304      	adds	r3, #4
 80177f4:	4619      	mov	r1, r3
 80177f6:	4610      	mov	r0, r2
 80177f8:	f7fd fbbf 	bl	8014f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80177fc:	4b0a      	ldr	r3, [pc, #40]	; (8017828 <prvAddCurrentTaskToDelayedList+0xa4>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	68ba      	ldr	r2, [r7, #8]
 8017802:	429a      	cmp	r2, r3
 8017804:	d202      	bcs.n	801780c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017806:	4a08      	ldr	r2, [pc, #32]	; (8017828 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017808:	68bb      	ldr	r3, [r7, #8]
 801780a:	6013      	str	r3, [r2, #0]
}
 801780c:	bf00      	nop
 801780e:	3710      	adds	r7, #16
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}
 8017814:	200048c8 	.word	0x200048c8
 8017818:	200043f0 	.word	0x200043f0
 801781c:	200048b0 	.word	0x200048b0
 8017820:	20004880 	.word	0x20004880
 8017824:	2000487c 	.word	0x2000487c
 8017828:	200048e4 	.word	0x200048e4

0801782c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b08a      	sub	sp, #40	; 0x28
 8017830:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017832:	2300      	movs	r3, #0
 8017834:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017836:	f000 fb07 	bl	8017e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801783a:	4b1c      	ldr	r3, [pc, #112]	; (80178ac <xTimerCreateTimerTask+0x80>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d021      	beq.n	8017886 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017842:	2300      	movs	r3, #0
 8017844:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017846:	2300      	movs	r3, #0
 8017848:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801784a:	1d3a      	adds	r2, r7, #4
 801784c:	f107 0108 	add.w	r1, r7, #8
 8017850:	f107 030c 	add.w	r3, r7, #12
 8017854:	4618      	mov	r0, r3
 8017856:	f7fd fb25 	bl	8014ea4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801785a:	6879      	ldr	r1, [r7, #4]
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	68fa      	ldr	r2, [r7, #12]
 8017860:	9202      	str	r2, [sp, #8]
 8017862:	9301      	str	r3, [sp, #4]
 8017864:	2302      	movs	r3, #2
 8017866:	9300      	str	r3, [sp, #0]
 8017868:	2300      	movs	r3, #0
 801786a:	460a      	mov	r2, r1
 801786c:	4910      	ldr	r1, [pc, #64]	; (80178b0 <xTimerCreateTimerTask+0x84>)
 801786e:	4811      	ldr	r0, [pc, #68]	; (80178b4 <xTimerCreateTimerTask+0x88>)
 8017870:	f7fe fcaa 	bl	80161c8 <xTaskCreateStatic>
 8017874:	4603      	mov	r3, r0
 8017876:	4a10      	ldr	r2, [pc, #64]	; (80178b8 <xTimerCreateTimerTask+0x8c>)
 8017878:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801787a:	4b0f      	ldr	r3, [pc, #60]	; (80178b8 <xTimerCreateTimerTask+0x8c>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d001      	beq.n	8017886 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017882:	2301      	movs	r3, #1
 8017884:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d10a      	bne.n	80178a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017890:	f383 8811 	msr	BASEPRI, r3
 8017894:	f3bf 8f6f 	isb	sy
 8017898:	f3bf 8f4f 	dsb	sy
 801789c:	613b      	str	r3, [r7, #16]
}
 801789e:	bf00      	nop
 80178a0:	e7fe      	b.n	80178a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80178a2:	697b      	ldr	r3, [r7, #20]
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3718      	adds	r7, #24
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}
 80178ac:	20004928 	.word	0x20004928
 80178b0:	0801a584 	.word	0x0801a584
 80178b4:	080179f1 	.word	0x080179f1
 80178b8:	2000492c 	.word	0x2000492c

080178bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b08a      	sub	sp, #40	; 0x28
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	60b9      	str	r1, [r7, #8]
 80178c6:	607a      	str	r2, [r7, #4]
 80178c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80178ca:	2300      	movs	r3, #0
 80178cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d10a      	bne.n	80178ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80178d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178d8:	f383 8811 	msr	BASEPRI, r3
 80178dc:	f3bf 8f6f 	isb	sy
 80178e0:	f3bf 8f4f 	dsb	sy
 80178e4:	623b      	str	r3, [r7, #32]
}
 80178e6:	bf00      	nop
 80178e8:	e7fe      	b.n	80178e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80178ea:	4b1a      	ldr	r3, [pc, #104]	; (8017954 <xTimerGenericCommand+0x98>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d02a      	beq.n	8017948 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80178fe:	68bb      	ldr	r3, [r7, #8]
 8017900:	2b05      	cmp	r3, #5
 8017902:	dc18      	bgt.n	8017936 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017904:	f7ff fbb2 	bl	801706c <xTaskGetSchedulerState>
 8017908:	4603      	mov	r3, r0
 801790a:	2b02      	cmp	r3, #2
 801790c:	d109      	bne.n	8017922 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801790e:	4b11      	ldr	r3, [pc, #68]	; (8017954 <xTimerGenericCommand+0x98>)
 8017910:	6818      	ldr	r0, [r3, #0]
 8017912:	f107 0110 	add.w	r1, r7, #16
 8017916:	2300      	movs	r3, #0
 8017918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801791a:	f7fd fdef 	bl	80154fc <xQueueGenericSend>
 801791e:	6278      	str	r0, [r7, #36]	; 0x24
 8017920:	e012      	b.n	8017948 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017922:	4b0c      	ldr	r3, [pc, #48]	; (8017954 <xTimerGenericCommand+0x98>)
 8017924:	6818      	ldr	r0, [r3, #0]
 8017926:	f107 0110 	add.w	r1, r7, #16
 801792a:	2300      	movs	r3, #0
 801792c:	2200      	movs	r2, #0
 801792e:	f7fd fde5 	bl	80154fc <xQueueGenericSend>
 8017932:	6278      	str	r0, [r7, #36]	; 0x24
 8017934:	e008      	b.n	8017948 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017936:	4b07      	ldr	r3, [pc, #28]	; (8017954 <xTimerGenericCommand+0x98>)
 8017938:	6818      	ldr	r0, [r3, #0]
 801793a:	f107 0110 	add.w	r1, r7, #16
 801793e:	2300      	movs	r3, #0
 8017940:	683a      	ldr	r2, [r7, #0]
 8017942:	f7fd fed9 	bl	80156f8 <xQueueGenericSendFromISR>
 8017946:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801794a:	4618      	mov	r0, r3
 801794c:	3728      	adds	r7, #40	; 0x28
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
 8017952:	bf00      	nop
 8017954:	20004928 	.word	0x20004928

08017958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b088      	sub	sp, #32
 801795c:	af02      	add	r7, sp, #8
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017962:	4b22      	ldr	r3, [pc, #136]	; (80179ec <prvProcessExpiredTimer+0x94>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	68db      	ldr	r3, [r3, #12]
 8017968:	68db      	ldr	r3, [r3, #12]
 801796a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801796c:	697b      	ldr	r3, [r7, #20]
 801796e:	3304      	adds	r3, #4
 8017970:	4618      	mov	r0, r3
 8017972:	f7fd fb3b 	bl	8014fec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017976:	697b      	ldr	r3, [r7, #20]
 8017978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801797c:	f003 0304 	and.w	r3, r3, #4
 8017980:	2b00      	cmp	r3, #0
 8017982:	d022      	beq.n	80179ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	699a      	ldr	r2, [r3, #24]
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	18d1      	adds	r1, r2, r3
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	683a      	ldr	r2, [r7, #0]
 8017990:	6978      	ldr	r0, [r7, #20]
 8017992:	f000 f8d1 	bl	8017b38 <prvInsertTimerInActiveList>
 8017996:	4603      	mov	r3, r0
 8017998:	2b00      	cmp	r3, #0
 801799a:	d01f      	beq.n	80179dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801799c:	2300      	movs	r3, #0
 801799e:	9300      	str	r3, [sp, #0]
 80179a0:	2300      	movs	r3, #0
 80179a2:	687a      	ldr	r2, [r7, #4]
 80179a4:	2100      	movs	r1, #0
 80179a6:	6978      	ldr	r0, [r7, #20]
 80179a8:	f7ff ff88 	bl	80178bc <xTimerGenericCommand>
 80179ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d113      	bne.n	80179dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80179b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179b8:	f383 8811 	msr	BASEPRI, r3
 80179bc:	f3bf 8f6f 	isb	sy
 80179c0:	f3bf 8f4f 	dsb	sy
 80179c4:	60fb      	str	r3, [r7, #12]
}
 80179c6:	bf00      	nop
 80179c8:	e7fe      	b.n	80179c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179d0:	f023 0301 	bic.w	r3, r3, #1
 80179d4:	b2da      	uxtb	r2, r3
 80179d6:	697b      	ldr	r3, [r7, #20]
 80179d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	6a1b      	ldr	r3, [r3, #32]
 80179e0:	6978      	ldr	r0, [r7, #20]
 80179e2:	4798      	blx	r3
}
 80179e4:	bf00      	nop
 80179e6:	3718      	adds	r7, #24
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	20004920 	.word	0x20004920

080179f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80179f8:	f107 0308 	add.w	r3, r7, #8
 80179fc:	4618      	mov	r0, r3
 80179fe:	f000 f857 	bl	8017ab0 <prvGetNextExpireTime>
 8017a02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	4619      	mov	r1, r3
 8017a08:	68f8      	ldr	r0, [r7, #12]
 8017a0a:	f000 f803 	bl	8017a14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017a0e:	f000 f8d5 	bl	8017bbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a12:	e7f1      	b.n	80179f8 <prvTimerTask+0x8>

08017a14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b084      	sub	sp, #16
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017a1e:	f7fe ff0d 	bl	801683c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017a22:	f107 0308 	add.w	r3, r7, #8
 8017a26:	4618      	mov	r0, r3
 8017a28:	f000 f866 	bl	8017af8 <prvSampleTimeNow>
 8017a2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d130      	bne.n	8017a96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017a34:	683b      	ldr	r3, [r7, #0]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d10a      	bne.n	8017a50 <prvProcessTimerOrBlockTask+0x3c>
 8017a3a:	687a      	ldr	r2, [r7, #4]
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d806      	bhi.n	8017a50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017a42:	f7fe ff09 	bl	8016858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017a46:	68f9      	ldr	r1, [r7, #12]
 8017a48:	6878      	ldr	r0, [r7, #4]
 8017a4a:	f7ff ff85 	bl	8017958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017a4e:	e024      	b.n	8017a9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017a50:	683b      	ldr	r3, [r7, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d008      	beq.n	8017a68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017a56:	4b13      	ldr	r3, [pc, #76]	; (8017aa4 <prvProcessTimerOrBlockTask+0x90>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d101      	bne.n	8017a64 <prvProcessTimerOrBlockTask+0x50>
 8017a60:	2301      	movs	r3, #1
 8017a62:	e000      	b.n	8017a66 <prvProcessTimerOrBlockTask+0x52>
 8017a64:	2300      	movs	r3, #0
 8017a66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017a68:	4b0f      	ldr	r3, [pc, #60]	; (8017aa8 <prvProcessTimerOrBlockTask+0x94>)
 8017a6a:	6818      	ldr	r0, [r3, #0]
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	1ad3      	subs	r3, r2, r3
 8017a72:	683a      	ldr	r2, [r7, #0]
 8017a74:	4619      	mov	r1, r3
 8017a76:	f7fe fb73 	bl	8016160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017a7a:	f7fe feed 	bl	8016858 <xTaskResumeAll>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d10a      	bne.n	8017a9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017a84:	4b09      	ldr	r3, [pc, #36]	; (8017aac <prvProcessTimerOrBlockTask+0x98>)
 8017a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a8a:	601a      	str	r2, [r3, #0]
 8017a8c:	f3bf 8f4f 	dsb	sy
 8017a90:	f3bf 8f6f 	isb	sy
}
 8017a94:	e001      	b.n	8017a9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017a96:	f7fe fedf 	bl	8016858 <xTaskResumeAll>
}
 8017a9a:	bf00      	nop
 8017a9c:	3710      	adds	r7, #16
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	20004924 	.word	0x20004924
 8017aa8:	20004928 	.word	0x20004928
 8017aac:	e000ed04 	.word	0xe000ed04

08017ab0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017ab0:	b480      	push	{r7}
 8017ab2:	b085      	sub	sp, #20
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017ab8:	4b0e      	ldr	r3, [pc, #56]	; (8017af4 <prvGetNextExpireTime+0x44>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d101      	bne.n	8017ac6 <prvGetNextExpireTime+0x16>
 8017ac2:	2201      	movs	r2, #1
 8017ac4:	e000      	b.n	8017ac8 <prvGetNextExpireTime+0x18>
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d105      	bne.n	8017ae0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017ad4:	4b07      	ldr	r3, [pc, #28]	; (8017af4 <prvGetNextExpireTime+0x44>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	60fb      	str	r3, [r7, #12]
 8017ade:	e001      	b.n	8017ae4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3714      	adds	r7, #20
 8017aea:	46bd      	mov	sp, r7
 8017aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af0:	4770      	bx	lr
 8017af2:	bf00      	nop
 8017af4:	20004920 	.word	0x20004920

08017af8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b084      	sub	sp, #16
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017b00:	f7fe ff48 	bl	8016994 <xTaskGetTickCount>
 8017b04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017b06:	4b0b      	ldr	r3, [pc, #44]	; (8017b34 <prvSampleTimeNow+0x3c>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	68fa      	ldr	r2, [r7, #12]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d205      	bcs.n	8017b1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017b10:	f000 f936 	bl	8017d80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	2201      	movs	r2, #1
 8017b18:	601a      	str	r2, [r3, #0]
 8017b1a:	e002      	b.n	8017b22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017b22:	4a04      	ldr	r2, [pc, #16]	; (8017b34 <prvSampleTimeNow+0x3c>)
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017b28:	68fb      	ldr	r3, [r7, #12]
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3710      	adds	r7, #16
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
 8017b32:	bf00      	nop
 8017b34:	20004930 	.word	0x20004930

08017b38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b086      	sub	sp, #24
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	607a      	str	r2, [r7, #4]
 8017b44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017b46:	2300      	movs	r3, #0
 8017b48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	68ba      	ldr	r2, [r7, #8]
 8017b4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	68fa      	ldr	r2, [r7, #12]
 8017b54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017b56:	68ba      	ldr	r2, [r7, #8]
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d812      	bhi.n	8017b84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b5e:	687a      	ldr	r2, [r7, #4]
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	1ad2      	subs	r2, r2, r3
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	699b      	ldr	r3, [r3, #24]
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d302      	bcc.n	8017b72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	617b      	str	r3, [r7, #20]
 8017b70:	e01b      	b.n	8017baa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017b72:	4b10      	ldr	r3, [pc, #64]	; (8017bb4 <prvInsertTimerInActiveList+0x7c>)
 8017b74:	681a      	ldr	r2, [r3, #0]
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	3304      	adds	r3, #4
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	4610      	mov	r0, r2
 8017b7e:	f7fd f9fc 	bl	8014f7a <vListInsert>
 8017b82:	e012      	b.n	8017baa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017b84:	687a      	ldr	r2, [r7, #4]
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d206      	bcs.n	8017b9a <prvInsertTimerInActiveList+0x62>
 8017b8c:	68ba      	ldr	r2, [r7, #8]
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d302      	bcc.n	8017b9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017b94:	2301      	movs	r3, #1
 8017b96:	617b      	str	r3, [r7, #20]
 8017b98:	e007      	b.n	8017baa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017b9a:	4b07      	ldr	r3, [pc, #28]	; (8017bb8 <prvInsertTimerInActiveList+0x80>)
 8017b9c:	681a      	ldr	r2, [r3, #0]
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	3304      	adds	r3, #4
 8017ba2:	4619      	mov	r1, r3
 8017ba4:	4610      	mov	r0, r2
 8017ba6:	f7fd f9e8 	bl	8014f7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017baa:	697b      	ldr	r3, [r7, #20]
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	3718      	adds	r7, #24
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}
 8017bb4:	20004924 	.word	0x20004924
 8017bb8:	20004920 	.word	0x20004920

08017bbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b08e      	sub	sp, #56	; 0x38
 8017bc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017bc2:	e0ca      	b.n	8017d5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	da18      	bge.n	8017bfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017bca:	1d3b      	adds	r3, r7, #4
 8017bcc:	3304      	adds	r3, #4
 8017bce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d10a      	bne.n	8017bec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bda:	f383 8811 	msr	BASEPRI, r3
 8017bde:	f3bf 8f6f 	isb	sy
 8017be2:	f3bf 8f4f 	dsb	sy
 8017be6:	61fb      	str	r3, [r7, #28]
}
 8017be8:	bf00      	nop
 8017bea:	e7fe      	b.n	8017bea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bf2:	6850      	ldr	r0, [r2, #4]
 8017bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bf6:	6892      	ldr	r2, [r2, #8]
 8017bf8:	4611      	mov	r1, r2
 8017bfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	f2c0 80aa 	blt.w	8017d58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c0a:	695b      	ldr	r3, [r3, #20]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d004      	beq.n	8017c1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c12:	3304      	adds	r3, #4
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fd f9e9 	bl	8014fec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017c1a:	463b      	mov	r3, r7
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7ff ff6b 	bl	8017af8 <prvSampleTimeNow>
 8017c22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2b09      	cmp	r3, #9
 8017c28:	f200 8097 	bhi.w	8017d5a <prvProcessReceivedCommands+0x19e>
 8017c2c:	a201      	add	r2, pc, #4	; (adr r2, 8017c34 <prvProcessReceivedCommands+0x78>)
 8017c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c32:	bf00      	nop
 8017c34:	08017c5d 	.word	0x08017c5d
 8017c38:	08017c5d 	.word	0x08017c5d
 8017c3c:	08017c5d 	.word	0x08017c5d
 8017c40:	08017cd1 	.word	0x08017cd1
 8017c44:	08017ce5 	.word	0x08017ce5
 8017c48:	08017d2f 	.word	0x08017d2f
 8017c4c:	08017c5d 	.word	0x08017c5d
 8017c50:	08017c5d 	.word	0x08017c5d
 8017c54:	08017cd1 	.word	0x08017cd1
 8017c58:	08017ce5 	.word	0x08017ce5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c62:	f043 0301 	orr.w	r3, r3, #1
 8017c66:	b2da      	uxtb	r2, r3
 8017c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017c6e:	68ba      	ldr	r2, [r7, #8]
 8017c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c72:	699b      	ldr	r3, [r3, #24]
 8017c74:	18d1      	adds	r1, r2, r3
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c7c:	f7ff ff5c 	bl	8017b38 <prvInsertTimerInActiveList>
 8017c80:	4603      	mov	r3, r0
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d069      	beq.n	8017d5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c88:	6a1b      	ldr	r3, [r3, #32]
 8017c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017c94:	f003 0304 	and.w	r3, r3, #4
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d05e      	beq.n	8017d5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017c9c:	68ba      	ldr	r2, [r7, #8]
 8017c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca0:	699b      	ldr	r3, [r3, #24]
 8017ca2:	441a      	add	r2, r3
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	9300      	str	r3, [sp, #0]
 8017ca8:	2300      	movs	r3, #0
 8017caa:	2100      	movs	r1, #0
 8017cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cae:	f7ff fe05 	bl	80178bc <xTimerGenericCommand>
 8017cb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017cb4:	6a3b      	ldr	r3, [r7, #32]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d14f      	bne.n	8017d5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8017cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cbe:	f383 8811 	msr	BASEPRI, r3
 8017cc2:	f3bf 8f6f 	isb	sy
 8017cc6:	f3bf 8f4f 	dsb	sy
 8017cca:	61bb      	str	r3, [r7, #24]
}
 8017ccc:	bf00      	nop
 8017cce:	e7fe      	b.n	8017cce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cd6:	f023 0301 	bic.w	r3, r3, #1
 8017cda:	b2da      	uxtb	r2, r3
 8017cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017ce2:	e03a      	b.n	8017d5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cea:	f043 0301 	orr.w	r3, r3, #1
 8017cee:	b2da      	uxtb	r2, r3
 8017cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017cf6:	68ba      	ldr	r2, [r7, #8]
 8017cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfe:	699b      	ldr	r3, [r3, #24]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d10a      	bne.n	8017d1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d08:	f383 8811 	msr	BASEPRI, r3
 8017d0c:	f3bf 8f6f 	isb	sy
 8017d10:	f3bf 8f4f 	dsb	sy
 8017d14:	617b      	str	r3, [r7, #20]
}
 8017d16:	bf00      	nop
 8017d18:	e7fe      	b.n	8017d18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1c:	699a      	ldr	r2, [r3, #24]
 8017d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d20:	18d1      	adds	r1, r2, r3
 8017d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d28:	f7ff ff06 	bl	8017b38 <prvInsertTimerInActiveList>
					break;
 8017d2c:	e015      	b.n	8017d5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d34:	f003 0302 	and.w	r3, r3, #2
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d103      	bne.n	8017d44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d3e:	f000 fbdf 	bl	8018500 <vPortFree>
 8017d42:	e00a      	b.n	8017d5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d4a:	f023 0301 	bic.w	r3, r3, #1
 8017d4e:	b2da      	uxtb	r2, r3
 8017d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017d56:	e000      	b.n	8017d5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017d58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017d5a:	4b08      	ldr	r3, [pc, #32]	; (8017d7c <prvProcessReceivedCommands+0x1c0>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	1d39      	adds	r1, r7, #4
 8017d60:	2200      	movs	r2, #0
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7fd fdf0 	bl	8015948 <xQueueReceive>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	f47f af2a 	bne.w	8017bc4 <prvProcessReceivedCommands+0x8>
	}
}
 8017d70:	bf00      	nop
 8017d72:	bf00      	nop
 8017d74:	3730      	adds	r7, #48	; 0x30
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	20004928 	.word	0x20004928

08017d80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b088      	sub	sp, #32
 8017d84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017d86:	e048      	b.n	8017e1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017d88:	4b2d      	ldr	r3, [pc, #180]	; (8017e40 <prvSwitchTimerLists+0xc0>)
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d92:	4b2b      	ldr	r3, [pc, #172]	; (8017e40 <prvSwitchTimerLists+0xc0>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	68db      	ldr	r3, [r3, #12]
 8017d98:	68db      	ldr	r3, [r3, #12]
 8017d9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	3304      	adds	r3, #4
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7fd f923 	bl	8014fec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	6a1b      	ldr	r3, [r3, #32]
 8017daa:	68f8      	ldr	r0, [r7, #12]
 8017dac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017db4:	f003 0304 	and.w	r3, r3, #4
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d02e      	beq.n	8017e1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	699b      	ldr	r3, [r3, #24]
 8017dc0:	693a      	ldr	r2, [r7, #16]
 8017dc2:	4413      	add	r3, r2
 8017dc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017dc6:	68ba      	ldr	r2, [r7, #8]
 8017dc8:	693b      	ldr	r3, [r7, #16]
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d90e      	bls.n	8017dec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	68ba      	ldr	r2, [r7, #8]
 8017dd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	68fa      	ldr	r2, [r7, #12]
 8017dd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017dda:	4b19      	ldr	r3, [pc, #100]	; (8017e40 <prvSwitchTimerLists+0xc0>)
 8017ddc:	681a      	ldr	r2, [r3, #0]
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	3304      	adds	r3, #4
 8017de2:	4619      	mov	r1, r3
 8017de4:	4610      	mov	r0, r2
 8017de6:	f7fd f8c8 	bl	8014f7a <vListInsert>
 8017dea:	e016      	b.n	8017e1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017dec:	2300      	movs	r3, #0
 8017dee:	9300      	str	r3, [sp, #0]
 8017df0:	2300      	movs	r3, #0
 8017df2:	693a      	ldr	r2, [r7, #16]
 8017df4:	2100      	movs	r1, #0
 8017df6:	68f8      	ldr	r0, [r7, #12]
 8017df8:	f7ff fd60 	bl	80178bc <xTimerGenericCommand>
 8017dfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d10a      	bne.n	8017e1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e08:	f383 8811 	msr	BASEPRI, r3
 8017e0c:	f3bf 8f6f 	isb	sy
 8017e10:	f3bf 8f4f 	dsb	sy
 8017e14:	603b      	str	r3, [r7, #0]
}
 8017e16:	bf00      	nop
 8017e18:	e7fe      	b.n	8017e18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017e1a:	4b09      	ldr	r3, [pc, #36]	; (8017e40 <prvSwitchTimerLists+0xc0>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d1b1      	bne.n	8017d88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017e24:	4b06      	ldr	r3, [pc, #24]	; (8017e40 <prvSwitchTimerLists+0xc0>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017e2a:	4b06      	ldr	r3, [pc, #24]	; (8017e44 <prvSwitchTimerLists+0xc4>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	4a04      	ldr	r2, [pc, #16]	; (8017e40 <prvSwitchTimerLists+0xc0>)
 8017e30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017e32:	4a04      	ldr	r2, [pc, #16]	; (8017e44 <prvSwitchTimerLists+0xc4>)
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	6013      	str	r3, [r2, #0]
}
 8017e38:	bf00      	nop
 8017e3a:	3718      	adds	r7, #24
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}
 8017e40:	20004920 	.word	0x20004920
 8017e44:	20004924 	.word	0x20004924

08017e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b082      	sub	sp, #8
 8017e4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017e4e:	f000 f969 	bl	8018124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017e52:	4b15      	ldr	r3, [pc, #84]	; (8017ea8 <prvCheckForValidListAndQueue+0x60>)
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d120      	bne.n	8017e9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017e5a:	4814      	ldr	r0, [pc, #80]	; (8017eac <prvCheckForValidListAndQueue+0x64>)
 8017e5c:	f7fd f83c 	bl	8014ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017e60:	4813      	ldr	r0, [pc, #76]	; (8017eb0 <prvCheckForValidListAndQueue+0x68>)
 8017e62:	f7fd f839 	bl	8014ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017e66:	4b13      	ldr	r3, [pc, #76]	; (8017eb4 <prvCheckForValidListAndQueue+0x6c>)
 8017e68:	4a10      	ldr	r2, [pc, #64]	; (8017eac <prvCheckForValidListAndQueue+0x64>)
 8017e6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017e6c:	4b12      	ldr	r3, [pc, #72]	; (8017eb8 <prvCheckForValidListAndQueue+0x70>)
 8017e6e:	4a10      	ldr	r2, [pc, #64]	; (8017eb0 <prvCheckForValidListAndQueue+0x68>)
 8017e70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017e72:	2300      	movs	r3, #0
 8017e74:	9300      	str	r3, [sp, #0]
 8017e76:	4b11      	ldr	r3, [pc, #68]	; (8017ebc <prvCheckForValidListAndQueue+0x74>)
 8017e78:	4a11      	ldr	r2, [pc, #68]	; (8017ec0 <prvCheckForValidListAndQueue+0x78>)
 8017e7a:	2110      	movs	r1, #16
 8017e7c:	200a      	movs	r0, #10
 8017e7e:	f7fd f947 	bl	8015110 <xQueueGenericCreateStatic>
 8017e82:	4603      	mov	r3, r0
 8017e84:	4a08      	ldr	r2, [pc, #32]	; (8017ea8 <prvCheckForValidListAndQueue+0x60>)
 8017e86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017e88:	4b07      	ldr	r3, [pc, #28]	; (8017ea8 <prvCheckForValidListAndQueue+0x60>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d005      	beq.n	8017e9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017e90:	4b05      	ldr	r3, [pc, #20]	; (8017ea8 <prvCheckForValidListAndQueue+0x60>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	490b      	ldr	r1, [pc, #44]	; (8017ec4 <prvCheckForValidListAndQueue+0x7c>)
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fe f90e 	bl	80160b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017e9c:	f000 f972 	bl	8018184 <vPortExitCritical>
}
 8017ea0:	bf00      	nop
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	20004928 	.word	0x20004928
 8017eac:	200048f8 	.word	0x200048f8
 8017eb0:	2000490c 	.word	0x2000490c
 8017eb4:	20004920 	.word	0x20004920
 8017eb8:	20004924 	.word	0x20004924
 8017ebc:	200049d4 	.word	0x200049d4
 8017ec0:	20004934 	.word	0x20004934
 8017ec4:	0801a58c 	.word	0x0801a58c

08017ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b085      	sub	sp, #20
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	60f8      	str	r0, [r7, #12]
 8017ed0:	60b9      	str	r1, [r7, #8]
 8017ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	3b04      	subs	r3, #4
 8017ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	3b04      	subs	r3, #4
 8017ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	f023 0201 	bic.w	r2, r3, #1
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	3b04      	subs	r3, #4
 8017ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017ef8:	4a0c      	ldr	r2, [pc, #48]	; (8017f2c <pxPortInitialiseStack+0x64>)
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	3b14      	subs	r3, #20
 8017f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017f04:	687a      	ldr	r2, [r7, #4]
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	3b04      	subs	r3, #4
 8017f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	f06f 0202 	mvn.w	r2, #2
 8017f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	3b20      	subs	r3, #32
 8017f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
}
 8017f20:	4618      	mov	r0, r3
 8017f22:	3714      	adds	r7, #20
 8017f24:	46bd      	mov	sp, r7
 8017f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2a:	4770      	bx	lr
 8017f2c:	08017f31 	.word	0x08017f31

08017f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017f30:	b480      	push	{r7}
 8017f32:	b085      	sub	sp, #20
 8017f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017f36:	2300      	movs	r3, #0
 8017f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017f3a:	4b12      	ldr	r3, [pc, #72]	; (8017f84 <prvTaskExitError+0x54>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f42:	d00a      	beq.n	8017f5a <prvTaskExitError+0x2a>
	__asm volatile
 8017f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f48:	f383 8811 	msr	BASEPRI, r3
 8017f4c:	f3bf 8f6f 	isb	sy
 8017f50:	f3bf 8f4f 	dsb	sy
 8017f54:	60fb      	str	r3, [r7, #12]
}
 8017f56:	bf00      	nop
 8017f58:	e7fe      	b.n	8017f58 <prvTaskExitError+0x28>
	__asm volatile
 8017f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f5e:	f383 8811 	msr	BASEPRI, r3
 8017f62:	f3bf 8f6f 	isb	sy
 8017f66:	f3bf 8f4f 	dsb	sy
 8017f6a:	60bb      	str	r3, [r7, #8]
}
 8017f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017f6e:	bf00      	nop
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d0fc      	beq.n	8017f70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017f76:	bf00      	nop
 8017f78:	bf00      	nop
 8017f7a:	3714      	adds	r7, #20
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f82:	4770      	bx	lr
 8017f84:	20000080 	.word	0x20000080
	...

08017f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017f90:	4b07      	ldr	r3, [pc, #28]	; (8017fb0 <pxCurrentTCBConst2>)
 8017f92:	6819      	ldr	r1, [r3, #0]
 8017f94:	6808      	ldr	r0, [r1, #0]
 8017f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f9a:	f380 8809 	msr	PSP, r0
 8017f9e:	f3bf 8f6f 	isb	sy
 8017fa2:	f04f 0000 	mov.w	r0, #0
 8017fa6:	f380 8811 	msr	BASEPRI, r0
 8017faa:	4770      	bx	lr
 8017fac:	f3af 8000 	nop.w

08017fb0 <pxCurrentTCBConst2>:
 8017fb0:	200043f0 	.word	0x200043f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017fb4:	bf00      	nop
 8017fb6:	bf00      	nop

08017fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017fb8:	4808      	ldr	r0, [pc, #32]	; (8017fdc <prvPortStartFirstTask+0x24>)
 8017fba:	6800      	ldr	r0, [r0, #0]
 8017fbc:	6800      	ldr	r0, [r0, #0]
 8017fbe:	f380 8808 	msr	MSP, r0
 8017fc2:	f04f 0000 	mov.w	r0, #0
 8017fc6:	f380 8814 	msr	CONTROL, r0
 8017fca:	b662      	cpsie	i
 8017fcc:	b661      	cpsie	f
 8017fce:	f3bf 8f4f 	dsb	sy
 8017fd2:	f3bf 8f6f 	isb	sy
 8017fd6:	df00      	svc	0
 8017fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017fda:	bf00      	nop
 8017fdc:	e000ed08 	.word	0xe000ed08

08017fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b086      	sub	sp, #24
 8017fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017fe6:	4b46      	ldr	r3, [pc, #280]	; (8018100 <xPortStartScheduler+0x120>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	4a46      	ldr	r2, [pc, #280]	; (8018104 <xPortStartScheduler+0x124>)
 8017fec:	4293      	cmp	r3, r2
 8017fee:	d10a      	bne.n	8018006 <xPortStartScheduler+0x26>
	__asm volatile
 8017ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ff4:	f383 8811 	msr	BASEPRI, r3
 8017ff8:	f3bf 8f6f 	isb	sy
 8017ffc:	f3bf 8f4f 	dsb	sy
 8018000:	613b      	str	r3, [r7, #16]
}
 8018002:	bf00      	nop
 8018004:	e7fe      	b.n	8018004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018006:	4b3e      	ldr	r3, [pc, #248]	; (8018100 <xPortStartScheduler+0x120>)
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	4a3f      	ldr	r2, [pc, #252]	; (8018108 <xPortStartScheduler+0x128>)
 801800c:	4293      	cmp	r3, r2
 801800e:	d10a      	bne.n	8018026 <xPortStartScheduler+0x46>
	__asm volatile
 8018010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018014:	f383 8811 	msr	BASEPRI, r3
 8018018:	f3bf 8f6f 	isb	sy
 801801c:	f3bf 8f4f 	dsb	sy
 8018020:	60fb      	str	r3, [r7, #12]
}
 8018022:	bf00      	nop
 8018024:	e7fe      	b.n	8018024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018026:	4b39      	ldr	r3, [pc, #228]	; (801810c <xPortStartScheduler+0x12c>)
 8018028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	b2db      	uxtb	r3, r3
 8018030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	22ff      	movs	r2, #255	; 0xff
 8018036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018038:	697b      	ldr	r3, [r7, #20]
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	b2db      	uxtb	r3, r3
 801803e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018040:	78fb      	ldrb	r3, [r7, #3]
 8018042:	b2db      	uxtb	r3, r3
 8018044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018048:	b2da      	uxtb	r2, r3
 801804a:	4b31      	ldr	r3, [pc, #196]	; (8018110 <xPortStartScheduler+0x130>)
 801804c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801804e:	4b31      	ldr	r3, [pc, #196]	; (8018114 <xPortStartScheduler+0x134>)
 8018050:	2207      	movs	r2, #7
 8018052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018054:	e009      	b.n	801806a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018056:	4b2f      	ldr	r3, [pc, #188]	; (8018114 <xPortStartScheduler+0x134>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	3b01      	subs	r3, #1
 801805c:	4a2d      	ldr	r2, [pc, #180]	; (8018114 <xPortStartScheduler+0x134>)
 801805e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018060:	78fb      	ldrb	r3, [r7, #3]
 8018062:	b2db      	uxtb	r3, r3
 8018064:	005b      	lsls	r3, r3, #1
 8018066:	b2db      	uxtb	r3, r3
 8018068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801806a:	78fb      	ldrb	r3, [r7, #3]
 801806c:	b2db      	uxtb	r3, r3
 801806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018072:	2b80      	cmp	r3, #128	; 0x80
 8018074:	d0ef      	beq.n	8018056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018076:	4b27      	ldr	r3, [pc, #156]	; (8018114 <xPortStartScheduler+0x134>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	f1c3 0307 	rsb	r3, r3, #7
 801807e:	2b04      	cmp	r3, #4
 8018080:	d00a      	beq.n	8018098 <xPortStartScheduler+0xb8>
	__asm volatile
 8018082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018086:	f383 8811 	msr	BASEPRI, r3
 801808a:	f3bf 8f6f 	isb	sy
 801808e:	f3bf 8f4f 	dsb	sy
 8018092:	60bb      	str	r3, [r7, #8]
}
 8018094:	bf00      	nop
 8018096:	e7fe      	b.n	8018096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018098:	4b1e      	ldr	r3, [pc, #120]	; (8018114 <xPortStartScheduler+0x134>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	021b      	lsls	r3, r3, #8
 801809e:	4a1d      	ldr	r2, [pc, #116]	; (8018114 <xPortStartScheduler+0x134>)
 80180a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80180a2:	4b1c      	ldr	r3, [pc, #112]	; (8018114 <xPortStartScheduler+0x134>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80180aa:	4a1a      	ldr	r2, [pc, #104]	; (8018114 <xPortStartScheduler+0x134>)
 80180ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	b2da      	uxtb	r2, r3
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80180b6:	4b18      	ldr	r3, [pc, #96]	; (8018118 <xPortStartScheduler+0x138>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	4a17      	ldr	r2, [pc, #92]	; (8018118 <xPortStartScheduler+0x138>)
 80180bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80180c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80180c2:	4b15      	ldr	r3, [pc, #84]	; (8018118 <xPortStartScheduler+0x138>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	4a14      	ldr	r2, [pc, #80]	; (8018118 <xPortStartScheduler+0x138>)
 80180c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80180cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80180ce:	f000 f8dd 	bl	801828c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80180d2:	4b12      	ldr	r3, [pc, #72]	; (801811c <xPortStartScheduler+0x13c>)
 80180d4:	2200      	movs	r2, #0
 80180d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80180d8:	f000 f8fc 	bl	80182d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80180dc:	4b10      	ldr	r3, [pc, #64]	; (8018120 <xPortStartScheduler+0x140>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a0f      	ldr	r2, [pc, #60]	; (8018120 <xPortStartScheduler+0x140>)
 80180e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80180e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80180e8:	f7ff ff66 	bl	8017fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80180ec:	f7fe fd1c 	bl	8016b28 <vTaskSwitchContext>
	prvTaskExitError();
 80180f0:	f7ff ff1e 	bl	8017f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80180f4:	2300      	movs	r3, #0
}
 80180f6:	4618      	mov	r0, r3
 80180f8:	3718      	adds	r7, #24
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	e000ed00 	.word	0xe000ed00
 8018104:	410fc271 	.word	0x410fc271
 8018108:	410fc270 	.word	0x410fc270
 801810c:	e000e400 	.word	0xe000e400
 8018110:	20004a24 	.word	0x20004a24
 8018114:	20004a28 	.word	0x20004a28
 8018118:	e000ed20 	.word	0xe000ed20
 801811c:	20000080 	.word	0x20000080
 8018120:	e000ef34 	.word	0xe000ef34

08018124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018124:	b480      	push	{r7}
 8018126:	b083      	sub	sp, #12
 8018128:	af00      	add	r7, sp, #0
	__asm volatile
 801812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801812e:	f383 8811 	msr	BASEPRI, r3
 8018132:	f3bf 8f6f 	isb	sy
 8018136:	f3bf 8f4f 	dsb	sy
 801813a:	607b      	str	r3, [r7, #4]
}
 801813c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801813e:	4b0f      	ldr	r3, [pc, #60]	; (801817c <vPortEnterCritical+0x58>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	3301      	adds	r3, #1
 8018144:	4a0d      	ldr	r2, [pc, #52]	; (801817c <vPortEnterCritical+0x58>)
 8018146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018148:	4b0c      	ldr	r3, [pc, #48]	; (801817c <vPortEnterCritical+0x58>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	2b01      	cmp	r3, #1
 801814e:	d10f      	bne.n	8018170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018150:	4b0b      	ldr	r3, [pc, #44]	; (8018180 <vPortEnterCritical+0x5c>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	b2db      	uxtb	r3, r3
 8018156:	2b00      	cmp	r3, #0
 8018158:	d00a      	beq.n	8018170 <vPortEnterCritical+0x4c>
	__asm volatile
 801815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801815e:	f383 8811 	msr	BASEPRI, r3
 8018162:	f3bf 8f6f 	isb	sy
 8018166:	f3bf 8f4f 	dsb	sy
 801816a:	603b      	str	r3, [r7, #0]
}
 801816c:	bf00      	nop
 801816e:	e7fe      	b.n	801816e <vPortEnterCritical+0x4a>
	}
}
 8018170:	bf00      	nop
 8018172:	370c      	adds	r7, #12
 8018174:	46bd      	mov	sp, r7
 8018176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817a:	4770      	bx	lr
 801817c:	20000080 	.word	0x20000080
 8018180:	e000ed04 	.word	0xe000ed04

08018184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018184:	b480      	push	{r7}
 8018186:	b083      	sub	sp, #12
 8018188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801818a:	4b12      	ldr	r3, [pc, #72]	; (80181d4 <vPortExitCritical+0x50>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d10a      	bne.n	80181a8 <vPortExitCritical+0x24>
	__asm volatile
 8018192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018196:	f383 8811 	msr	BASEPRI, r3
 801819a:	f3bf 8f6f 	isb	sy
 801819e:	f3bf 8f4f 	dsb	sy
 80181a2:	607b      	str	r3, [r7, #4]
}
 80181a4:	bf00      	nop
 80181a6:	e7fe      	b.n	80181a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80181a8:	4b0a      	ldr	r3, [pc, #40]	; (80181d4 <vPortExitCritical+0x50>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	3b01      	subs	r3, #1
 80181ae:	4a09      	ldr	r2, [pc, #36]	; (80181d4 <vPortExitCritical+0x50>)
 80181b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80181b2:	4b08      	ldr	r3, [pc, #32]	; (80181d4 <vPortExitCritical+0x50>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d105      	bne.n	80181c6 <vPortExitCritical+0x42>
 80181ba:	2300      	movs	r3, #0
 80181bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	f383 8811 	msr	BASEPRI, r3
}
 80181c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80181c6:	bf00      	nop
 80181c8:	370c      	adds	r7, #12
 80181ca:	46bd      	mov	sp, r7
 80181cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d0:	4770      	bx	lr
 80181d2:	bf00      	nop
 80181d4:	20000080 	.word	0x20000080
	...

080181e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80181e0:	f3ef 8009 	mrs	r0, PSP
 80181e4:	f3bf 8f6f 	isb	sy
 80181e8:	4b15      	ldr	r3, [pc, #84]	; (8018240 <pxCurrentTCBConst>)
 80181ea:	681a      	ldr	r2, [r3, #0]
 80181ec:	f01e 0f10 	tst.w	lr, #16
 80181f0:	bf08      	it	eq
 80181f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80181f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fa:	6010      	str	r0, [r2, #0]
 80181fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018204:	f380 8811 	msr	BASEPRI, r0
 8018208:	f3bf 8f4f 	dsb	sy
 801820c:	f3bf 8f6f 	isb	sy
 8018210:	f7fe fc8a 	bl	8016b28 <vTaskSwitchContext>
 8018214:	f04f 0000 	mov.w	r0, #0
 8018218:	f380 8811 	msr	BASEPRI, r0
 801821c:	bc09      	pop	{r0, r3}
 801821e:	6819      	ldr	r1, [r3, #0]
 8018220:	6808      	ldr	r0, [r1, #0]
 8018222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018226:	f01e 0f10 	tst.w	lr, #16
 801822a:	bf08      	it	eq
 801822c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018230:	f380 8809 	msr	PSP, r0
 8018234:	f3bf 8f6f 	isb	sy
 8018238:	4770      	bx	lr
 801823a:	bf00      	nop
 801823c:	f3af 8000 	nop.w

08018240 <pxCurrentTCBConst>:
 8018240:	200043f0 	.word	0x200043f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018244:	bf00      	nop
 8018246:	bf00      	nop

08018248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b082      	sub	sp, #8
 801824c:	af00      	add	r7, sp, #0
	__asm volatile
 801824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018252:	f383 8811 	msr	BASEPRI, r3
 8018256:	f3bf 8f6f 	isb	sy
 801825a:	f3bf 8f4f 	dsb	sy
 801825e:	607b      	str	r3, [r7, #4]
}
 8018260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018262:	f7fe fba7 	bl	80169b4 <xTaskIncrementTick>
 8018266:	4603      	mov	r3, r0
 8018268:	2b00      	cmp	r3, #0
 801826a:	d003      	beq.n	8018274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801826c:	4b06      	ldr	r3, [pc, #24]	; (8018288 <xPortSysTickHandler+0x40>)
 801826e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018272:	601a      	str	r2, [r3, #0]
 8018274:	2300      	movs	r3, #0
 8018276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	f383 8811 	msr	BASEPRI, r3
}
 801827e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018280:	bf00      	nop
 8018282:	3708      	adds	r7, #8
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}
 8018288:	e000ed04 	.word	0xe000ed04

0801828c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801828c:	b480      	push	{r7}
 801828e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018290:	4b0b      	ldr	r3, [pc, #44]	; (80182c0 <vPortSetupTimerInterrupt+0x34>)
 8018292:	2200      	movs	r2, #0
 8018294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018296:	4b0b      	ldr	r3, [pc, #44]	; (80182c4 <vPortSetupTimerInterrupt+0x38>)
 8018298:	2200      	movs	r2, #0
 801829a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801829c:	4b0a      	ldr	r3, [pc, #40]	; (80182c8 <vPortSetupTimerInterrupt+0x3c>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a0a      	ldr	r2, [pc, #40]	; (80182cc <vPortSetupTimerInterrupt+0x40>)
 80182a2:	fba2 2303 	umull	r2, r3, r2, r3
 80182a6:	099b      	lsrs	r3, r3, #6
 80182a8:	4a09      	ldr	r2, [pc, #36]	; (80182d0 <vPortSetupTimerInterrupt+0x44>)
 80182aa:	3b01      	subs	r3, #1
 80182ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80182ae:	4b04      	ldr	r3, [pc, #16]	; (80182c0 <vPortSetupTimerInterrupt+0x34>)
 80182b0:	2207      	movs	r2, #7
 80182b2:	601a      	str	r2, [r3, #0]
}
 80182b4:	bf00      	nop
 80182b6:	46bd      	mov	sp, r7
 80182b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182bc:	4770      	bx	lr
 80182be:	bf00      	nop
 80182c0:	e000e010 	.word	0xe000e010
 80182c4:	e000e018 	.word	0xe000e018
 80182c8:	20000010 	.word	0x20000010
 80182cc:	10624dd3 	.word	0x10624dd3
 80182d0:	e000e014 	.word	0xe000e014

080182d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80182d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80182e4 <vPortEnableVFP+0x10>
 80182d8:	6801      	ldr	r1, [r0, #0]
 80182da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80182de:	6001      	str	r1, [r0, #0]
 80182e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80182e2:	bf00      	nop
 80182e4:	e000ed88 	.word	0xe000ed88

080182e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80182e8:	b480      	push	{r7}
 80182ea:	b085      	sub	sp, #20
 80182ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80182ee:	f3ef 8305 	mrs	r3, IPSR
 80182f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	2b0f      	cmp	r3, #15
 80182f8:	d914      	bls.n	8018324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80182fa:	4a17      	ldr	r2, [pc, #92]	; (8018358 <vPortValidateInterruptPriority+0x70>)
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	4413      	add	r3, r2
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018304:	4b15      	ldr	r3, [pc, #84]	; (801835c <vPortValidateInterruptPriority+0x74>)
 8018306:	781b      	ldrb	r3, [r3, #0]
 8018308:	7afa      	ldrb	r2, [r7, #11]
 801830a:	429a      	cmp	r2, r3
 801830c:	d20a      	bcs.n	8018324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018312:	f383 8811 	msr	BASEPRI, r3
 8018316:	f3bf 8f6f 	isb	sy
 801831a:	f3bf 8f4f 	dsb	sy
 801831e:	607b      	str	r3, [r7, #4]
}
 8018320:	bf00      	nop
 8018322:	e7fe      	b.n	8018322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018324:	4b0e      	ldr	r3, [pc, #56]	; (8018360 <vPortValidateInterruptPriority+0x78>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801832c:	4b0d      	ldr	r3, [pc, #52]	; (8018364 <vPortValidateInterruptPriority+0x7c>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	429a      	cmp	r2, r3
 8018332:	d90a      	bls.n	801834a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018338:	f383 8811 	msr	BASEPRI, r3
 801833c:	f3bf 8f6f 	isb	sy
 8018340:	f3bf 8f4f 	dsb	sy
 8018344:	603b      	str	r3, [r7, #0]
}
 8018346:	bf00      	nop
 8018348:	e7fe      	b.n	8018348 <vPortValidateInterruptPriority+0x60>
	}
 801834a:	bf00      	nop
 801834c:	3714      	adds	r7, #20
 801834e:	46bd      	mov	sp, r7
 8018350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop
 8018358:	e000e3f0 	.word	0xe000e3f0
 801835c:	20004a24 	.word	0x20004a24
 8018360:	e000ed0c 	.word	0xe000ed0c
 8018364:	20004a28 	.word	0x20004a28

08018368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b08a      	sub	sp, #40	; 0x28
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018370:	2300      	movs	r3, #0
 8018372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018374:	f7fe fa62 	bl	801683c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018378:	4b5b      	ldr	r3, [pc, #364]	; (80184e8 <pvPortMalloc+0x180>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d101      	bne.n	8018384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018380:	f000 f920 	bl	80185c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018384:	4b59      	ldr	r3, [pc, #356]	; (80184ec <pvPortMalloc+0x184>)
 8018386:	681a      	ldr	r2, [r3, #0]
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	4013      	ands	r3, r2
 801838c:	2b00      	cmp	r3, #0
 801838e:	f040 8093 	bne.w	80184b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2b00      	cmp	r3, #0
 8018396:	d01d      	beq.n	80183d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018398:	2208      	movs	r2, #8
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	4413      	add	r3, r2
 801839e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	f003 0307 	and.w	r3, r3, #7
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d014      	beq.n	80183d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	f023 0307 	bic.w	r3, r3, #7
 80183b0:	3308      	adds	r3, #8
 80183b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f003 0307 	and.w	r3, r3, #7
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d00a      	beq.n	80183d4 <pvPortMalloc+0x6c>
	__asm volatile
 80183be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183c2:	f383 8811 	msr	BASEPRI, r3
 80183c6:	f3bf 8f6f 	isb	sy
 80183ca:	f3bf 8f4f 	dsb	sy
 80183ce:	617b      	str	r3, [r7, #20]
}
 80183d0:	bf00      	nop
 80183d2:	e7fe      	b.n	80183d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d06e      	beq.n	80184b8 <pvPortMalloc+0x150>
 80183da:	4b45      	ldr	r3, [pc, #276]	; (80184f0 <pvPortMalloc+0x188>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	687a      	ldr	r2, [r7, #4]
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d869      	bhi.n	80184b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80183e4:	4b43      	ldr	r3, [pc, #268]	; (80184f4 <pvPortMalloc+0x18c>)
 80183e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80183e8:	4b42      	ldr	r3, [pc, #264]	; (80184f4 <pvPortMalloc+0x18c>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80183ee:	e004      	b.n	80183fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80183f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80183f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80183fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183fc:	685b      	ldr	r3, [r3, #4]
 80183fe:	687a      	ldr	r2, [r7, #4]
 8018400:	429a      	cmp	r2, r3
 8018402:	d903      	bls.n	801840c <pvPortMalloc+0xa4>
 8018404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d1f1      	bne.n	80183f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801840c:	4b36      	ldr	r3, [pc, #216]	; (80184e8 <pvPortMalloc+0x180>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018412:	429a      	cmp	r2, r3
 8018414:	d050      	beq.n	80184b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018416:	6a3b      	ldr	r3, [r7, #32]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2208      	movs	r2, #8
 801841c:	4413      	add	r3, r2
 801841e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018422:	681a      	ldr	r2, [r3, #0]
 8018424:	6a3b      	ldr	r3, [r7, #32]
 8018426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801842a:	685a      	ldr	r2, [r3, #4]
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	1ad2      	subs	r2, r2, r3
 8018430:	2308      	movs	r3, #8
 8018432:	005b      	lsls	r3, r3, #1
 8018434:	429a      	cmp	r2, r3
 8018436:	d91f      	bls.n	8018478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	4413      	add	r3, r2
 801843e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018440:	69bb      	ldr	r3, [r7, #24]
 8018442:	f003 0307 	and.w	r3, r3, #7
 8018446:	2b00      	cmp	r3, #0
 8018448:	d00a      	beq.n	8018460 <pvPortMalloc+0xf8>
	__asm volatile
 801844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844e:	f383 8811 	msr	BASEPRI, r3
 8018452:	f3bf 8f6f 	isb	sy
 8018456:	f3bf 8f4f 	dsb	sy
 801845a:	613b      	str	r3, [r7, #16]
}
 801845c:	bf00      	nop
 801845e:	e7fe      	b.n	801845e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018462:	685a      	ldr	r2, [r3, #4]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	1ad2      	subs	r2, r2, r3
 8018468:	69bb      	ldr	r3, [r7, #24]
 801846a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801846e:	687a      	ldr	r2, [r7, #4]
 8018470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018472:	69b8      	ldr	r0, [r7, #24]
 8018474:	f000 f908 	bl	8018688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018478:	4b1d      	ldr	r3, [pc, #116]	; (80184f0 <pvPortMalloc+0x188>)
 801847a:	681a      	ldr	r2, [r3, #0]
 801847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	4a1b      	ldr	r2, [pc, #108]	; (80184f0 <pvPortMalloc+0x188>)
 8018484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018486:	4b1a      	ldr	r3, [pc, #104]	; (80184f0 <pvPortMalloc+0x188>)
 8018488:	681a      	ldr	r2, [r3, #0]
 801848a:	4b1b      	ldr	r3, [pc, #108]	; (80184f8 <pvPortMalloc+0x190>)
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	429a      	cmp	r2, r3
 8018490:	d203      	bcs.n	801849a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018492:	4b17      	ldr	r3, [pc, #92]	; (80184f0 <pvPortMalloc+0x188>)
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	4a18      	ldr	r2, [pc, #96]	; (80184f8 <pvPortMalloc+0x190>)
 8018498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849c:	685a      	ldr	r2, [r3, #4]
 801849e:	4b13      	ldr	r3, [pc, #76]	; (80184ec <pvPortMalloc+0x184>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	431a      	orrs	r2, r3
 80184a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80184a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184aa:	2200      	movs	r2, #0
 80184ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80184ae:	4b13      	ldr	r3, [pc, #76]	; (80184fc <pvPortMalloc+0x194>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	3301      	adds	r3, #1
 80184b4:	4a11      	ldr	r2, [pc, #68]	; (80184fc <pvPortMalloc+0x194>)
 80184b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80184b8:	f7fe f9ce 	bl	8016858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	f003 0307 	and.w	r3, r3, #7
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d00a      	beq.n	80184dc <pvPortMalloc+0x174>
	__asm volatile
 80184c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ca:	f383 8811 	msr	BASEPRI, r3
 80184ce:	f3bf 8f6f 	isb	sy
 80184d2:	f3bf 8f4f 	dsb	sy
 80184d6:	60fb      	str	r3, [r7, #12]
}
 80184d8:	bf00      	nop
 80184da:	e7fe      	b.n	80184da <pvPortMalloc+0x172>
	return pvReturn;
 80184dc:	69fb      	ldr	r3, [r7, #28]
}
 80184de:	4618      	mov	r0, r3
 80184e0:	3728      	adds	r7, #40	; 0x28
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}
 80184e6:	bf00      	nop
 80184e8:	20009854 	.word	0x20009854
 80184ec:	20009868 	.word	0x20009868
 80184f0:	20009858 	.word	0x20009858
 80184f4:	2000984c 	.word	0x2000984c
 80184f8:	2000985c 	.word	0x2000985c
 80184fc:	20009860 	.word	0x20009860

08018500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b086      	sub	sp, #24
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d04d      	beq.n	80185ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018512:	2308      	movs	r3, #8
 8018514:	425b      	negs	r3, r3
 8018516:	697a      	ldr	r2, [r7, #20]
 8018518:	4413      	add	r3, r2
 801851a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801851c:	697b      	ldr	r3, [r7, #20]
 801851e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018520:	693b      	ldr	r3, [r7, #16]
 8018522:	685a      	ldr	r2, [r3, #4]
 8018524:	4b24      	ldr	r3, [pc, #144]	; (80185b8 <vPortFree+0xb8>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	4013      	ands	r3, r2
 801852a:	2b00      	cmp	r3, #0
 801852c:	d10a      	bne.n	8018544 <vPortFree+0x44>
	__asm volatile
 801852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018532:	f383 8811 	msr	BASEPRI, r3
 8018536:	f3bf 8f6f 	isb	sy
 801853a:	f3bf 8f4f 	dsb	sy
 801853e:	60fb      	str	r3, [r7, #12]
}
 8018540:	bf00      	nop
 8018542:	e7fe      	b.n	8018542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018544:	693b      	ldr	r3, [r7, #16]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d00a      	beq.n	8018562 <vPortFree+0x62>
	__asm volatile
 801854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018550:	f383 8811 	msr	BASEPRI, r3
 8018554:	f3bf 8f6f 	isb	sy
 8018558:	f3bf 8f4f 	dsb	sy
 801855c:	60bb      	str	r3, [r7, #8]
}
 801855e:	bf00      	nop
 8018560:	e7fe      	b.n	8018560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	685a      	ldr	r2, [r3, #4]
 8018566:	4b14      	ldr	r3, [pc, #80]	; (80185b8 <vPortFree+0xb8>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4013      	ands	r3, r2
 801856c:	2b00      	cmp	r3, #0
 801856e:	d01e      	beq.n	80185ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d11a      	bne.n	80185ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018578:	693b      	ldr	r3, [r7, #16]
 801857a:	685a      	ldr	r2, [r3, #4]
 801857c:	4b0e      	ldr	r3, [pc, #56]	; (80185b8 <vPortFree+0xb8>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	43db      	mvns	r3, r3
 8018582:	401a      	ands	r2, r3
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018588:	f7fe f958 	bl	801683c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801858c:	693b      	ldr	r3, [r7, #16]
 801858e:	685a      	ldr	r2, [r3, #4]
 8018590:	4b0a      	ldr	r3, [pc, #40]	; (80185bc <vPortFree+0xbc>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	4413      	add	r3, r2
 8018596:	4a09      	ldr	r2, [pc, #36]	; (80185bc <vPortFree+0xbc>)
 8018598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801859a:	6938      	ldr	r0, [r7, #16]
 801859c:	f000 f874 	bl	8018688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80185a0:	4b07      	ldr	r3, [pc, #28]	; (80185c0 <vPortFree+0xc0>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	3301      	adds	r3, #1
 80185a6:	4a06      	ldr	r2, [pc, #24]	; (80185c0 <vPortFree+0xc0>)
 80185a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80185aa:	f7fe f955 	bl	8016858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80185ae:	bf00      	nop
 80185b0:	3718      	adds	r7, #24
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	bf00      	nop
 80185b8:	20009868 	.word	0x20009868
 80185bc:	20009858 	.word	0x20009858
 80185c0:	20009864 	.word	0x20009864

080185c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80185c4:	b480      	push	{r7}
 80185c6:	b085      	sub	sp, #20
 80185c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80185ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80185ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80185d0:	4b27      	ldr	r3, [pc, #156]	; (8018670 <prvHeapInit+0xac>)
 80185d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	f003 0307 	and.w	r3, r3, #7
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d00c      	beq.n	80185f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	3307      	adds	r3, #7
 80185e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f023 0307 	bic.w	r3, r3, #7
 80185ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80185ec:	68ba      	ldr	r2, [r7, #8]
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	1ad3      	subs	r3, r2, r3
 80185f2:	4a1f      	ldr	r2, [pc, #124]	; (8018670 <prvHeapInit+0xac>)
 80185f4:	4413      	add	r3, r2
 80185f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80185fc:	4a1d      	ldr	r2, [pc, #116]	; (8018674 <prvHeapInit+0xb0>)
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018602:	4b1c      	ldr	r3, [pc, #112]	; (8018674 <prvHeapInit+0xb0>)
 8018604:	2200      	movs	r2, #0
 8018606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	68ba      	ldr	r2, [r7, #8]
 801860c:	4413      	add	r3, r2
 801860e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018610:	2208      	movs	r2, #8
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	1a9b      	subs	r3, r3, r2
 8018616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	f023 0307 	bic.w	r3, r3, #7
 801861e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	4a15      	ldr	r2, [pc, #84]	; (8018678 <prvHeapInit+0xb4>)
 8018624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018626:	4b14      	ldr	r3, [pc, #80]	; (8018678 <prvHeapInit+0xb4>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	2200      	movs	r2, #0
 801862c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801862e:	4b12      	ldr	r3, [pc, #72]	; (8018678 <prvHeapInit+0xb4>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2200      	movs	r2, #0
 8018634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	68fa      	ldr	r2, [r7, #12]
 801863e:	1ad2      	subs	r2, r2, r3
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018644:	4b0c      	ldr	r3, [pc, #48]	; (8018678 <prvHeapInit+0xb4>)
 8018646:	681a      	ldr	r2, [r3, #0]
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	685b      	ldr	r3, [r3, #4]
 8018650:	4a0a      	ldr	r2, [pc, #40]	; (801867c <prvHeapInit+0xb8>)
 8018652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018654:	683b      	ldr	r3, [r7, #0]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	4a09      	ldr	r2, [pc, #36]	; (8018680 <prvHeapInit+0xbc>)
 801865a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801865c:	4b09      	ldr	r3, [pc, #36]	; (8018684 <prvHeapInit+0xc0>)
 801865e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018662:	601a      	str	r2, [r3, #0]
}
 8018664:	bf00      	nop
 8018666:	3714      	adds	r7, #20
 8018668:	46bd      	mov	sp, r7
 801866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866e:	4770      	bx	lr
 8018670:	20004a2c 	.word	0x20004a2c
 8018674:	2000984c 	.word	0x2000984c
 8018678:	20009854 	.word	0x20009854
 801867c:	2000985c 	.word	0x2000985c
 8018680:	20009858 	.word	0x20009858
 8018684:	20009868 	.word	0x20009868

08018688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018688:	b480      	push	{r7}
 801868a:	b085      	sub	sp, #20
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018690:	4b28      	ldr	r3, [pc, #160]	; (8018734 <prvInsertBlockIntoFreeList+0xac>)
 8018692:	60fb      	str	r3, [r7, #12]
 8018694:	e002      	b.n	801869c <prvInsertBlockIntoFreeList+0x14>
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	60fb      	str	r3, [r7, #12]
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	687a      	ldr	r2, [r7, #4]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d8f7      	bhi.n	8018696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	68ba      	ldr	r2, [r7, #8]
 80186b0:	4413      	add	r3, r2
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	429a      	cmp	r2, r3
 80186b6:	d108      	bne.n	80186ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	685a      	ldr	r2, [r3, #4]
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	441a      	add	r2, r3
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	685b      	ldr	r3, [r3, #4]
 80186d2:	68ba      	ldr	r2, [r7, #8]
 80186d4:	441a      	add	r2, r3
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	429a      	cmp	r2, r3
 80186dc:	d118      	bne.n	8018710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	681a      	ldr	r2, [r3, #0]
 80186e2:	4b15      	ldr	r3, [pc, #84]	; (8018738 <prvInsertBlockIntoFreeList+0xb0>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	429a      	cmp	r2, r3
 80186e8:	d00d      	beq.n	8018706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	685a      	ldr	r2, [r3, #4]
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	685b      	ldr	r3, [r3, #4]
 80186f4:	441a      	add	r2, r3
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	681a      	ldr	r2, [r3, #0]
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	601a      	str	r2, [r3, #0]
 8018704:	e008      	b.n	8018718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018706:	4b0c      	ldr	r3, [pc, #48]	; (8018738 <prvInsertBlockIntoFreeList+0xb0>)
 8018708:	681a      	ldr	r2, [r3, #0]
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	601a      	str	r2, [r3, #0]
 801870e:	e003      	b.n	8018718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	681a      	ldr	r2, [r3, #0]
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018718:	68fa      	ldr	r2, [r7, #12]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	429a      	cmp	r2, r3
 801871e:	d002      	beq.n	8018726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018726:	bf00      	nop
 8018728:	3714      	adds	r7, #20
 801872a:	46bd      	mov	sp, r7
 801872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018730:	4770      	bx	lr
 8018732:	bf00      	nop
 8018734:	2000984c 	.word	0x2000984c
 8018738:	20009854 	.word	0x20009854

0801873c <LL_FLASH_GetUDN>:
{
 801873c:	b480      	push	{r7}
 801873e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8018740:	4b03      	ldr	r3, [pc, #12]	; (8018750 <LL_FLASH_GetUDN+0x14>)
 8018742:	681b      	ldr	r3, [r3, #0]
}
 8018744:	4618      	mov	r0, r3
 8018746:	46bd      	mov	sp, r7
 8018748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874c:	4770      	bx	lr
 801874e:	bf00      	nop
 8018750:	1fff7580 	.word	0x1fff7580

08018754 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8018754:	b480      	push	{r7}
 8018756:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8018758:	4b03      	ldr	r3, [pc, #12]	; (8018768 <LL_FLASH_GetDeviceID+0x14>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	b2db      	uxtb	r3, r3
}
 801875e:	4618      	mov	r0, r3
 8018760:	46bd      	mov	sp, r7
 8018762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018766:	4770      	bx	lr
 8018768:	1fff7584 	.word	0x1fff7584

0801876c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 801876c:	b480      	push	{r7}
 801876e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8018770:	4b03      	ldr	r3, [pc, #12]	; (8018780 <LL_FLASH_GetSTCompanyID+0x14>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	0a1b      	lsrs	r3, r3, #8
}
 8018776:	4618      	mov	r0, r3
 8018778:	46bd      	mov	sp, r7
 801877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877e:	4770      	bx	lr
 8018780:	1fff7584 	.word	0x1fff7584

08018784 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8018784:	b5b0      	push	{r4, r5, r7, lr}
 8018786:	b08e      	sub	sp, #56	; 0x38
 8018788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
//#ifndef CUSTOM_BT_PARAMETERS
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 801878a:	4b2a      	ldr	r3, [pc, #168]	; (8018834 <APP_BLE_Init+0xb0>)
 801878c:	1d3c      	adds	r4, r7, #4
 801878e:	461d      	mov	r5, r3
 8018790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801879a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801879c:	682b      	ldr	r3, [r5, #0]
 801879e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80187a0:	f000 f918 	bl	80189d4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80187a4:	2101      	movs	r1, #1
 80187a6:	2002      	movs	r0, #2
 80187a8:	f001 fd66 	bl	801a278 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 80187ac:	4a22      	ldr	r2, [pc, #136]	; (8018838 <APP_BLE_Init+0xb4>)
 80187ae:	2100      	movs	r1, #0
 80187b0:	4822      	ldr	r0, [pc, #136]	; (801883c <APP_BLE_Init+0xb8>)
 80187b2:	f7fb fe53 	bl	801445c <osThreadNew>
 80187b6:	4603      	mov	r3, r0
 80187b8:	4a21      	ldr	r2, [pc, #132]	; (8018840 <APP_BLE_Init+0xbc>)
 80187ba:	6013      	str	r3, [r2, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80187bc:	1d3b      	adds	r3, r7, #4
 80187be:	4618      	mov	r0, r3
 80187c0:	f7fa fa84 	bl	8012ccc <SHCI_C2_BLE_Init>
 80187c4:	4603      	mov	r3, r0
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d001      	beq.n	80187ce <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 80187ca:	f7ea fa75 	bl	8002cb8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80187ce:	f000 f929 	bl	8018a24 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80187d2:	f7fa f9d5 	bl	8012b80 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80187d6:	4b1b      	ldr	r3, [pc, #108]	; (8018844 <APP_BLE_Init+0xc0>)
 80187d8:	2200      	movs	r2, #0
 80187da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80187de:	4b19      	ldr	r3, [pc, #100]	; (8018844 <APP_BLE_Init+0xc0>)
 80187e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187e4:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 80187e6:	4a18      	ldr	r2, [pc, #96]	; (8018848 <APP_BLE_Init+0xc4>)
 80187e8:	2100      	movs	r1, #0
 80187ea:	4818      	ldr	r0, [pc, #96]	; (801884c <APP_BLE_Init+0xc8>)
 80187ec:	f7fb fe36 	bl	801445c <osThreadNew>
 80187f0:	4603      	mov	r3, r0
 80187f2:	4a17      	ldr	r2, [pc, #92]	; (8018850 <APP_BLE_Init+0xcc>)
 80187f4:	6013      	str	r3, [r2, #0]

/* USER CODE BEGIN APP_BLE_Init_3 */
//  DTS_STM_Init();
//  DTC_App_Init();
//  startThreads();
  startInitThread();
 80187f6:	f7e8 ff25 	bl	8001644 <startInitThread>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 80187fa:	4b16      	ldr	r3, [pc, #88]	; (8018854 <APP_BLE_Init+0xd0>)
 80187fc:	2200      	movs	r2, #0
 80187fe:	4916      	ldr	r1, [pc, #88]	; (8018858 <APP_BLE_Init+0xd4>)
 8018800:	2000      	movs	r0, #0
 8018802:	f7e9 fcab 	bl	800215c <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 8018806:	4b0f      	ldr	r3, [pc, #60]	; (8018844 <APP_BLE_Init+0xc0>)
 8018808:	2202      	movs	r2, #2
 801880a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 801880c:	4b0d      	ldr	r3, [pc, #52]	; (8018844 <APP_BLE_Init+0xc0>)
 801880e:	2201      	movs	r2, #1
 8018810:	761a      	strb	r2, [r3, #24]

//  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_128_BIT_SERV_UUID;
//  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;

    Add_Advertisment_Service_UUID(DATA_TRANSFER_SERVICE_UUID);
 8018812:	f64f 6080 	movw	r0, #65152	; 0xfe80
 8018816:	f000 fae9 	bl	8018dec <Add_Advertisment_Service_UUID>
//  Add_Advertisment_Service_UUID_128(DT_REQ_CHAR_UUID);


  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 801881a:	4b10      	ldr	r3, [pc, #64]	; (801885c <APP_BLE_Init+0xd8>)
 801881c:	2280      	movs	r2, #128	; 0x80
 801881e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8018820:	4b0f      	ldr	r3, [pc, #60]	; (8018860 <APP_BLE_Init+0xdc>)
 8018822:	22a0      	movs	r2, #160	; 0xa0
 8018824:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8018826:	2001      	movs	r0, #1
 8018828:	f000 f9d4 	bl	8018bd4 <Adv_Request>
//	Adv_Request(APP_BLE_FAST_ADV);
//
////	InitThreads();
//#endif
/* USER CODE END APP_BLE_Init_2 */
  return;
 801882c:	bf00      	nop
}
 801882e:	3738      	adds	r7, #56	; 0x38
 8018830:	46bd      	mov	sp, r7
 8018832:	bdb0      	pop	{r4, r5, r7, pc}
 8018834:	0801a5cc 	.word	0x0801a5cc
 8018838:	0801ab24 	.word	0x0801ab24
 801883c:	08018e85 	.word	0x08018e85
 8018840:	2000a20c 	.word	0x2000a20c
 8018844:	20000260 	.word	0x20000260
 8018848:	0801ab00 	.word	0x0801ab00
 801884c:	08018e5d 	.word	0x08018e5d
 8018850:	2000a224 	.word	0x2000a224
 8018854:	08018e45 	.word	0x08018e45
 8018858:	200002e1 	.word	0x200002e1
 801885c:	200002e4 	.word	0x200002e4
 8018860:	200002e6 	.word	0x200002e6

08018864 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b08a      	sub	sp, #40	; 0x28
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801886c:	2392      	movs	r3, #146	; 0x92
 801886e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	3301      	adds	r3, #1
 8018876:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */
//#ifndef CUSTOM_BT_PARAMETERS
  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8018878:	6a3b      	ldr	r3, [r7, #32]
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	2bff      	cmp	r3, #255	; 0xff
 801887e:	d068      	beq.n	8018952 <SVCCTL_App_Notification+0xee>
 8018880:	2bff      	cmp	r3, #255	; 0xff
 8018882:	dc73      	bgt.n	801896c <SVCCTL_App_Notification+0x108>
 8018884:	2b05      	cmp	r3, #5
 8018886:	d002      	beq.n	801888e <SVCCTL_App_Notification+0x2a>
 8018888:	2b3e      	cmp	r3, #62	; 0x3e
 801888a:	d01b      	beq.n	80188c4 <SVCCTL_App_Notification+0x60>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801888c:	e06e      	b.n	801896c <SVCCTL_App_Notification+0x108>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 801888e:	6a3b      	ldr	r3, [r7, #32]
 8018890:	3302      	adds	r3, #2
 8018892:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801889a:	b29a      	uxth	r2, r3
 801889c:	4b37      	ldr	r3, [pc, #220]	; (801897c <SVCCTL_App_Notification+0x118>)
 801889e:	8adb      	ldrh	r3, [r3, #22]
 80188a0:	429a      	cmp	r2, r3
 80188a2:	d106      	bne.n	80188b2 <SVCCTL_App_Notification+0x4e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80188a4:	4b35      	ldr	r3, [pc, #212]	; (801897c <SVCCTL_App_Notification+0x118>)
 80188a6:	2200      	movs	r2, #0
 80188a8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80188aa:	4b34      	ldr	r3, [pc, #208]	; (801897c <SVCCTL_App_Notification+0x118>)
 80188ac:	2200      	movs	r2, #0
 80188ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ledDisconnectNotification();
 80188b2:	f7ea f947 	bl	8002b44 <ledDisconnectNotification>
		osThreadFlagsSet(AdvUpdateProcessId, 1);
 80188b6:	4b32      	ldr	r3, [pc, #200]	; (8018980 <SVCCTL_App_Notification+0x11c>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2101      	movs	r1, #1
 80188bc:	4618      	mov	r0, r3
 80188be:	f7fb fe8d 	bl	80145dc <osThreadFlagsSet>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80188c2:	e056      	b.n	8018972 <SVCCTL_App_Notification+0x10e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80188c4:	6a3b      	ldr	r3, [r7, #32]
 80188c6:	3302      	adds	r3, #2
 80188c8:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 80188ca:	69bb      	ldr	r3, [r7, #24]
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	2b0c      	cmp	r3, #12
 80188d0:	d005      	beq.n	80188de <SVCCTL_App_Notification+0x7a>
 80188d2:	2b0c      	cmp	r3, #12
 80188d4:	dc39      	bgt.n	801894a <SVCCTL_App_Notification+0xe6>
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d017      	beq.n	801890a <SVCCTL_App_Notification+0xa6>
 80188da:	2b03      	cmp	r3, #3
          break;
 80188dc:	e035      	b.n	801894a <SVCCTL_App_Notification+0xe6>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 80188de:	69bb      	ldr	r3, [r7, #24]
 80188e0:	3301      	adds	r3, #1
 80188e2:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80188e4:	4b25      	ldr	r3, [pc, #148]	; (801897c <SVCCTL_App_Notification+0x118>)
 80188e6:	8adb      	ldrh	r3, [r3, #22]
 80188e8:	f107 020a 	add.w	r2, r7, #10
 80188ec:	f107 010b 	add.w	r1, r7, #11
 80188f0:	4618      	mov	r0, r3
 80188f2:	f7f9 fe3a 	bl	801256a <hci_le_read_phy>
 80188f6:	4603      	mov	r3, r0
 80188f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 80188fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018900:	2b00      	cmp	r3, #0
 8018902:	d124      	bne.n	801894e <SVCCTL_App_Notification+0xea>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8018904:	7afb      	ldrb	r3, [r7, #11]
 8018906:	2b02      	cmp	r3, #2
          break;
 8018908:	e021      	b.n	801894e <SVCCTL_App_Notification+0xea>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 801890a:	69bb      	ldr	r3, [r7, #24]
 801890c:	3301      	adds	r3, #1
 801890e:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8018910:	4b1a      	ldr	r3, [pc, #104]	; (801897c <SVCCTL_App_Notification+0x118>)
 8018912:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8018916:	4618      	mov	r0, r3
 8018918:	f7e9 fc9a 	bl	8002250 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801891c:	4b17      	ldr	r3, [pc, #92]	; (801897c <SVCCTL_App_Notification+0x118>)
 801891e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018922:	2b04      	cmp	r3, #4
 8018924:	d104      	bne.n	8018930 <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8018926:	4b15      	ldr	r3, [pc, #84]	; (801897c <SVCCTL_App_Notification+0x118>)
 8018928:	2206      	movs	r2, #6
 801892a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 801892e:	e003      	b.n	8018938 <SVCCTL_App_Notification+0xd4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8018930:	4b12      	ldr	r3, [pc, #72]	; (801897c <SVCCTL_App_Notification+0x118>)
 8018932:	2205      	movs	r2, #5
 8018934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801893e:	b29a      	uxth	r2, r3
 8018940:	4b0e      	ldr	r3, [pc, #56]	; (801897c <SVCCTL_App_Notification+0x118>)
 8018942:	82da      	strh	r2, [r3, #22]
          ledConnectNotification();
 8018944:	f7ea f926 	bl	8002b94 <ledConnectNotification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8018948:	e002      	b.n	8018950 <SVCCTL_App_Notification+0xec>
          break;
 801894a:	bf00      	nop
 801894c:	e011      	b.n	8018972 <SVCCTL_App_Notification+0x10e>
          break;
 801894e:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8018950:	e00f      	b.n	8018972 <SVCCTL_App_Notification+0x10e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8018952:	6a3b      	ldr	r3, [r7, #32]
 8018954:	3302      	adds	r3, #2
 8018956:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8018958:	69fb      	ldr	r3, [r7, #28]
 801895a:	881b      	ldrh	r3, [r3, #0]
 801895c:	b29b      	uxth	r3, r3
 801895e:	461a      	mov	r2, r3
 8018960:	f240 4307 	movw	r3, #1031	; 0x407
 8018964:	429a      	cmp	r2, r3
 8018966:	d103      	bne.n	8018970 <SVCCTL_App_Notification+0x10c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8018968:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801896a:	e001      	b.n	8018970 <SVCCTL_App_Notification+0x10c>
      break;
 801896c:	bf00      	nop
 801896e:	e000      	b.n	8018972 <SVCCTL_App_Notification+0x10e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8018970:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8018972:	2301      	movs	r3, #1
}
 8018974:	4618      	mov	r0, r3
 8018976:	3728      	adds	r7, #40	; 0x28
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	20000260 	.word	0x20000260
 8018980:	2000a224 	.word	0x2000a224

08018984 <BLE_SVC_L2CAP_Conn_Update_7_5>:
	}
	return (CRC8);
}

uint8_t index_con_int, mutex;
void BLE_SVC_L2CAP_Conn_Update_7_5(void) {
 8018984:	b590      	push	{r4, r7, lr}
 8018986:	b087      	sub	sp, #28
 8018988:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
	if (mutex == 1) {
 801898a:	4b10      	ldr	r3, [pc, #64]	; (80189cc <BLE_SVC_L2CAP_Conn_Update_7_5+0x48>)
 801898c:	781b      	ldrb	r3, [r3, #0]
 801898e:	2b01      	cmp	r3, #1
 8018990:	d118      	bne.n	80189c4 <BLE_SVC_L2CAP_Conn_Update_7_5+0x40>
		mutex = 0;
 8018992:	4b0e      	ldr	r3, [pc, #56]	; (80189cc <BLE_SVC_L2CAP_Conn_Update_7_5+0x48>)
 8018994:	2200      	movs	r2, #0
 8018996:	701a      	strb	r2, [r3, #0]
		uint16_t interval_min = CONN_P(7.5);
 8018998:	2306      	movs	r3, #6
 801899a:	81fb      	strh	r3, [r7, #14]
		uint16_t interval_max = CONN_P(7.5);
 801899c:	2306      	movs	r3, #6
 801899e:	81bb      	strh	r3, [r7, #12]
		uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 80189a0:	2300      	movs	r3, #0
 80189a2:	817b      	strh	r3, [r7, #10]
		uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80189a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80189a8:	813b      	strh	r3, [r7, #8]
		tBleStatus result;

		result = aci_l2cap_connection_parameter_update_req(
 80189aa:	4b09      	ldr	r3, [pc, #36]	; (80189d0 <BLE_SVC_L2CAP_Conn_Update_7_5+0x4c>)
 80189ac:	8ad8      	ldrh	r0, [r3, #22]
 80189ae:	897c      	ldrh	r4, [r7, #10]
 80189b0:	89ba      	ldrh	r2, [r7, #12]
 80189b2:	89f9      	ldrh	r1, [r7, #14]
 80189b4:	893b      	ldrh	r3, [r7, #8]
 80189b6:	9300      	str	r3, [sp, #0]
 80189b8:	4623      	mov	r3, r4
 80189ba:	f7f9 fea5 	bl	8012708 <aci_l2cap_connection_parameter_update_req>
 80189be:	4603      	mov	r3, r0
 80189c0:	71fb      	strb	r3, [r7, #7]
		}
	}
	/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

	/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
	return;
 80189c2:	bf00      	nop
 80189c4:	bf00      	nop
}
 80189c6:	3714      	adds	r7, #20
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd90      	pop	{r4, r7, pc}
 80189cc:	2000a218 	.word	0x2000a218
 80189d0:	20000260 	.word	0x20000260

080189d4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 80189da:	2000      	movs	r0, #0
 80189dc:	f7fb fee8 	bl	80147b0 <osMutexNew>
 80189e0:	4603      	mov	r3, r0
 80189e2:	4a0b      	ldr	r2, [pc, #44]	; (8018a10 <Ble_Tl_Init+0x3c>)
 80189e4:	6013      	str	r3, [r2, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 80189e6:	2200      	movs	r2, #0
 80189e8:	2100      	movs	r1, #0
 80189ea:	2001      	movs	r0, #1
 80189ec:	f7fb ffee 	bl	80149cc <osSemaphoreNew>
 80189f0:	4603      	mov	r3, r0
 80189f2:	4a08      	ldr	r2, [pc, #32]	; (8018a14 <Ble_Tl_Init+0x40>)
 80189f4:	6013      	str	r3, [r2, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80189f6:	4b08      	ldr	r3, [pc, #32]	; (8018a18 <Ble_Tl_Init+0x44>)
 80189f8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80189fa:	4b08      	ldr	r3, [pc, #32]	; (8018a1c <Ble_Tl_Init+0x48>)
 80189fc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80189fe:	463b      	mov	r3, r7
 8018a00:	4619      	mov	r1, r3
 8018a02:	4807      	ldr	r0, [pc, #28]	; (8018a20 <Ble_Tl_Init+0x4c>)
 8018a04:	f7fa fa54 	bl	8012eb0 <hci_init>

  return;
 8018a08:	bf00      	nop
}
 8018a0a:	3708      	adds	r7, #8
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}
 8018a10:	2000a21c 	.word	0x2000a21c
 8018a14:	2000a208 	.word	0x2000a208
 8018a18:	200300d4 	.word	0x200300d4
 8018a1c:	08018f3d 	.word	0x08018f3d
 8018a20:	08018f05 	.word	0x08018f05

08018a24 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8018a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a26:	b08d      	sub	sp, #52	; 0x34
 8018a28:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8018a2a:	f44f 7350 	mov.w	r3, #832	; 0x340
 8018a2e:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8018a30:	f7f9 fd77 	bl	8012522 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8018a34:	f000 f996 	bl	8018d64 <BleGetBdAddress>
 8018a38:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8018a3a:	697a      	ldr	r2, [r7, #20]
 8018a3c:	2106      	movs	r1, #6
 8018a3e:	2000      	movs	r0, #0
 8018a40:	f7f9 fcaf 	bl	80123a2 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8018a44:	697b      	ldr	r3, [r7, #20]
 8018a46:	795a      	ldrb	r2, [r3, #5]
 8018a48:	4b4f      	ldr	r3, [pc, #316]	; (8018b88 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8018a4a:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	791a      	ldrb	r2, [r3, #4]
 8018a50:	4b4d      	ldr	r3, [pc, #308]	; (8018b88 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8018a52:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8018a54:	697b      	ldr	r3, [r7, #20]
 8018a56:	78da      	ldrb	r2, [r3, #3]
 8018a58:	4b4b      	ldr	r3, [pc, #300]	; (8018b88 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8018a5a:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8018a5c:	697b      	ldr	r3, [r7, #20]
 8018a5e:	789a      	ldrb	r2, [r3, #2]
 8018a60:	4b49      	ldr	r3, [pc, #292]	; (8018b88 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8018a62:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	785a      	ldrb	r2, [r3, #1]
 8018a68:	4b47      	ldr	r3, [pc, #284]	; (8018b88 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8018a6a:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	781a      	ldrb	r2, [r3, #0]
 8018a70:	4b45      	ldr	r3, [pc, #276]	; (8018b88 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8018a72:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 8018a74:	4a45      	ldr	r2, [pc, #276]	; (8018b8c <Ble_Hci_Gap_Gatt_Init+0x168>)
 8018a76:	2110      	movs	r1, #16
 8018a78:	2018      	movs	r0, #24
 8018a7a:	f7f9 fc92 	bl	80123a2 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8018a7e:	4a44      	ldr	r2, [pc, #272]	; (8018b90 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8018a80:	2110      	movs	r1, #16
 8018a82:	2008      	movs	r0, #8
 8018a84:	f7f9 fc8d 	bl	80123a2 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8018a88:	4a40      	ldr	r2, [pc, #256]	; (8018b8c <Ble_Hci_Gap_Gatt_Init+0x168>)
 8018a8a:	2110      	movs	r1, #16
 8018a8c:	2018      	movs	r0, #24
 8018a8e:	f7f9 fc88 	bl	80123a2 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8018a92:	4a3f      	ldr	r2, [pc, #252]	; (8018b90 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8018a94:	2110      	movs	r1, #16
 8018a96:	2008      	movs	r0, #8
 8018a98:	f7f9 fc83 	bl	80123a2 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8018a9c:	211b      	movs	r1, #27
 8018a9e:	2001      	movs	r0, #1
 8018aa0:	f7f9 fce8 	bl	8012474 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8018aa4:	f7f9 f900 	bl	8011ca8 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8018aac:	7cfb      	ldrb	r3, [r7, #19]
 8018aae:	f043 0301 	orr.w	r3, r3, #1
 8018ab2:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8018ab4:	7cfb      	ldrb	r3, [r7, #19]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d01d      	beq.n	8018af6 <Ble_Hci_Gap_Gatt_Init+0xd2>
  {
    const char *name = "STM32WB";
 8018aba:	4b36      	ldr	r3, [pc, #216]	; (8018b94 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8018abc:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8018abe:	f107 020a 	add.w	r2, r7, #10
 8018ac2:	7cf8      	ldrb	r0, [r7, #19]
 8018ac4:	1dbb      	adds	r3, r7, #6
 8018ac6:	9301      	str	r3, [sp, #4]
 8018ac8:	f107 0308 	add.w	r3, r7, #8
 8018acc:	9300      	str	r3, [sp, #0]
 8018ace:	4613      	mov	r3, r2
 8018ad0:	2207      	movs	r2, #7
 8018ad2:	2100      	movs	r1, #0
 8018ad4:	f7f8 ffdd 	bl	8011a92 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8018ad8:	897c      	ldrh	r4, [r7, #10]
 8018ada:	893d      	ldrh	r5, [r7, #8]
 8018adc:	68f8      	ldr	r0, [r7, #12]
 8018ade:	f7e7 fb4f 	bl	8000180 <strlen>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	b2da      	uxtb	r2, r3
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	9300      	str	r3, [sp, #0]
 8018aea:	4613      	mov	r3, r2
 8018aec:	2200      	movs	r2, #0
 8018aee:	4629      	mov	r1, r5
 8018af0:	4620      	mov	r0, r4
 8018af2:	f7f9 fa97 	bl	8012024 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8018af6:	8978      	ldrh	r0, [r7, #10]
 8018af8:	88f9      	ldrh	r1, [r7, #6]
 8018afa:	1d3b      	adds	r3, r7, #4
 8018afc:	9300      	str	r3, [sp, #0]
 8018afe:	2302      	movs	r3, #2
 8018b00:	2200      	movs	r2, #0
 8018b02:	f7f9 fa8f 	bl	8012024 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8018b06:	2202      	movs	r2, #2
 8018b08:	2102      	movs	r1, #2
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f7f9 fd95 	bl	801263a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8018b10:	4b21      	ldr	r3, [pc, #132]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b12:	2201      	movs	r2, #1
 8018b14:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8018b16:	4b20      	ldr	r3, [pc, #128]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b18:	781b      	ldrb	r3, [r3, #0]
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	f7f8 fec7 	bl	80118ae <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8018b20:	4b1d      	ldr	r3, [pc, #116]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b22:	2201      	movs	r2, #1
 8018b24:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8018b26:	4b1c      	ldr	r3, [pc, #112]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b28:	2208      	movs	r2, #8
 8018b2a:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8018b2c:	4b1a      	ldr	r3, [pc, #104]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b2e:	2210      	movs	r2, #16
 8018b30:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8018b32:	4b19      	ldr	r3, [pc, #100]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b34:	2200      	movs	r2, #0
 8018b36:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8018b38:	4b17      	ldr	r3, [pc, #92]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b3a:	4a18      	ldr	r2, [pc, #96]	; (8018b9c <Ble_Hci_Gap_Gatt_Init+0x178>)
 8018b3c:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8018b3e:	4b16      	ldr	r3, [pc, #88]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b40:	2201      	movs	r2, #1
 8018b42:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8018b44:	4b14      	ldr	r3, [pc, #80]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b46:	789c      	ldrb	r4, [r3, #2]
 8018b48:	4b13      	ldr	r3, [pc, #76]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b4a:	785d      	ldrb	r5, [r3, #1]
 8018b4c:	4b12      	ldr	r3, [pc, #72]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b4e:	791b      	ldrb	r3, [r3, #4]
 8018b50:	4a11      	ldr	r2, [pc, #68]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b52:	7952      	ldrb	r2, [r2, #5]
 8018b54:	4910      	ldr	r1, [pc, #64]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b56:	78c9      	ldrb	r1, [r1, #3]
 8018b58:	480f      	ldr	r0, [pc, #60]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b5a:	6880      	ldr	r0, [r0, #8]
 8018b5c:	2600      	movs	r6, #0
 8018b5e:	9604      	str	r6, [sp, #16]
 8018b60:	9003      	str	r0, [sp, #12]
 8018b62:	9102      	str	r1, [sp, #8]
 8018b64:	9201      	str	r2, [sp, #4]
 8018b66:	9300      	str	r3, [sp, #0]
 8018b68:	2300      	movs	r3, #0
 8018b6a:	2201      	movs	r2, #1
 8018b6c:	4629      	mov	r1, r5
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f7f8 fee7 	bl	8011942 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8018b74:	4b08      	ldr	r3, [pc, #32]	; (8018b98 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8018b76:	789b      	ldrb	r3, [r3, #2]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d001      	beq.n	8018b80 <Ble_Hci_Gap_Gatt_Init+0x15c>
   {
     aci_gap_configure_whitelist();
 8018b7c:	f7f9 f870 	bl	8011c60 <aci_gap_configure_whitelist>
   }
}
 8018b80:	bf00      	nop
 8018b82:	371c      	adds	r7, #28
 8018b84:	46bd      	mov	sp, r7
 8018b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b88:	20000084 	.word	0x20000084
 8018b8c:	0801aae0 	.word	0x0801aae0
 8018b90:	0801aaf0 	.word	0x0801aaf0
 8018b94:	0801a600 	.word	0x0801a600
 8018b98:	20000260 	.word	0x20000260
 8018b9c:	0001b207 	.word	0x0001b207

08018ba0 <hexToAscii>:

char hexToAscii(uint8_t val){
 8018ba0:	b480      	push	{r7}
 8018ba2:	b083      	sub	sp, #12
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	71fb      	strb	r3, [r7, #7]
	// only look at first 4 bits
	val = val & (0x0F);
 8018baa:	79fb      	ldrb	r3, [r7, #7]
 8018bac:	f003 030f 	and.w	r3, r3, #15
 8018bb0:	71fb      	strb	r3, [r7, #7]
	if(val<10) return val+48;
 8018bb2:	79fb      	ldrb	r3, [r7, #7]
 8018bb4:	2b09      	cmp	r3, #9
 8018bb6:	d803      	bhi.n	8018bc0 <hexToAscii+0x20>
 8018bb8:	79fb      	ldrb	r3, [r7, #7]
 8018bba:	3330      	adds	r3, #48	; 0x30
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	e002      	b.n	8018bc6 <hexToAscii+0x26>
	else return val+87;
 8018bc0:	79fb      	ldrb	r3, [r7, #7]
 8018bc2:	3357      	adds	r3, #87	; 0x57
 8018bc4:	b2db      	uxtb	r3, r3
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	370c      	adds	r7, #12
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd0:	4770      	bx	lr
	...

08018bd4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b092      	sub	sp, #72	; 0x48
 8018bd8:	af08      	add	r7, sp, #32
 8018bda:	4603      	mov	r3, r0
 8018bdc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018bde:	2392      	movs	r3, #146	; 0x92
 8018be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8018be4:	79fb      	ldrb	r3, [r7, #7]
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d106      	bne.n	8018bf8 <Adv_Request+0x24>
  {
    Min_Inter = AdvIntervalMin;
 8018bea:	4b58      	ldr	r3, [pc, #352]	; (8018d4c <Adv_Request+0x178>)
 8018bec:	881b      	ldrh	r3, [r3, #0]
 8018bee:	84fb      	strh	r3, [r7, #38]	; 0x26
    Max_Inter = AdvIntervalMax;
 8018bf0:	4b57      	ldr	r3, [pc, #348]	; (8018d50 <Adv_Request+0x17c>)
 8018bf2:	881b      	ldrh	r3, [r3, #0]
 8018bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018bf6:	e005      	b.n	8018c04 <Adv_Request+0x30>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8018bf8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8018bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8018bfe:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018c02:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  uint32_t UID = LL_FLASH_GetUDN();
 8018c04:	f7ff fd9a 	bl	801873c <LL_FLASH_GetUDN>
 8018c08:	61f8      	str	r0, [r7, #28]

  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c0a:	2309      	movs	r3, #9
 8018c0c:	723b      	strb	r3, [r7, #8]
 8018c0e:	2341      	movs	r3, #65	; 0x41
 8018c10:	727b      	strb	r3, [r7, #9]
 8018c12:	2369      	movs	r3, #105	; 0x69
 8018c14:	72bb      	strb	r3, [r7, #10]
 8018c16:	2372      	movs	r3, #114	; 0x72
 8018c18:	72fb      	strb	r3, [r7, #11]
 8018c1a:	2353      	movs	r3, #83	; 0x53
 8018c1c:	733b      	strb	r3, [r7, #12]
 8018c1e:	2370      	movs	r3, #112	; 0x70
 8018c20:	737b      	strb	r3, [r7, #13]
 8018c22:	2365      	movs	r3, #101	; 0x65
 8018c24:	73bb      	strb	r3, [r7, #14]
 8018c26:	2363      	movs	r3, #99	; 0x63
 8018c28:	73fb      	strb	r3, [r7, #15]
 8018c2a:	235f      	movs	r3, #95	; 0x5f
 8018c2c:	743b      	strb	r3, [r7, #16]
		  hexToAscii(UID >> 28),
 8018c2e:	69fb      	ldr	r3, [r7, #28]
 8018c30:	0f1b      	lsrs	r3, r3, #28
 8018c32:	b2db      	uxtb	r3, r3
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7ff ffb3 	bl	8018ba0 <hexToAscii>
 8018c3a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c3c:	747b      	strb	r3, [r7, #17]
		  hexToAscii(UID >> 24),
 8018c3e:	69fb      	ldr	r3, [r7, #28]
 8018c40:	0e1b      	lsrs	r3, r3, #24
 8018c42:	b2db      	uxtb	r3, r3
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7ff ffab 	bl	8018ba0 <hexToAscii>
 8018c4a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c4c:	74bb      	strb	r3, [r7, #18]
		  hexToAscii(UID >> 20),
 8018c4e:	69fb      	ldr	r3, [r7, #28]
 8018c50:	0d1b      	lsrs	r3, r3, #20
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7ff ffa3 	bl	8018ba0 <hexToAscii>
 8018c5a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c5c:	74fb      	strb	r3, [r7, #19]
		  hexToAscii(UID >> 16),
 8018c5e:	69fb      	ldr	r3, [r7, #28]
 8018c60:	0c1b      	lsrs	r3, r3, #16
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7ff ff9b 	bl	8018ba0 <hexToAscii>
 8018c6a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c6c:	753b      	strb	r3, [r7, #20]
		  hexToAscii(UID >> 12),
 8018c6e:	69fb      	ldr	r3, [r7, #28]
 8018c70:	0b1b      	lsrs	r3, r3, #12
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7ff ff93 	bl	8018ba0 <hexToAscii>
 8018c7a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c7c:	757b      	strb	r3, [r7, #21]
		  hexToAscii(UID >> 8),
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	0a1b      	lsrs	r3, r3, #8
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7ff ff8b 	bl	8018ba0 <hexToAscii>
 8018c8a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c8c:	75bb      	strb	r3, [r7, #22]
		  hexToAscii(UID >> 4),
 8018c8e:	69fb      	ldr	r3, [r7, #28]
 8018c90:	091b      	lsrs	r3, r3, #4
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7ff ff83 	bl	8018ba0 <hexToAscii>
 8018c9a:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018c9c:	75fb      	strb	r3, [r7, #23]
		  hexToAscii(UID)};
 8018c9e:	69fb      	ldr	r3, [r7, #28]
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7ff ff7c 	bl	8018ba0 <hexToAscii>
 8018ca8:	4603      	mov	r3, r0
  const char local_name[] = { AD_TYPE_COMPLETE_LOCAL_NAME, 'A','i','r','S','p','e','c','_',
 8018caa:	763b      	strb	r3, [r7, #24]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8018cac:	4b29      	ldr	r3, [pc, #164]	; (8018d54 <Adv_Request+0x180>)
 8018cae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7e9 facc 	bl	8002250 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8018cb8:	79fb      	ldrb	r3, [r7, #7]
 8018cba:	2b02      	cmp	r3, #2
 8018cbc:	d10e      	bne.n	8018cdc <Adv_Request+0x108>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8018cbe:	4b25      	ldr	r3, [pc, #148]	; (8018d54 <Adv_Request+0x180>)
 8018cc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018cc4:	2b01      	cmp	r3, #1
 8018cc6:	d004      	beq.n	8018cd2 <Adv_Request+0xfe>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8018cc8:	4b22      	ldr	r3, [pc, #136]	; (8018d54 <Adv_Request+0x180>)
 8018cca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8018cce:	2b02      	cmp	r3, #2
 8018cd0:	d104      	bne.n	8018cdc <Adv_Request+0x108>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8018cd2:	f7f8 fcea 	bl	80116aa <aci_gap_set_non_discoverable>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8018cdc:	4a1d      	ldr	r2, [pc, #116]	; (8018d54 <Adv_Request+0x180>)
 8018cde:	79fb      	ldrb	r3, [r7, #7]
 8018ce0:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8018ce4:	4b1b      	ldr	r3, [pc, #108]	; (8018d54 <Adv_Request+0x180>)
 8018ce6:	7e1b      	ldrb	r3, [r3, #24]
 8018ce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018cea:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8018cec:	2000      	movs	r0, #0
 8018cee:	9006      	str	r0, [sp, #24]
 8018cf0:	2000      	movs	r0, #0
 8018cf2:	9005      	str	r0, [sp, #20]
 8018cf4:	4818      	ldr	r0, [pc, #96]	; (8018d58 <Adv_Request+0x184>)
 8018cf6:	9004      	str	r0, [sp, #16]
 8018cf8:	9303      	str	r3, [sp, #12]
 8018cfa:	f107 0308 	add.w	r3, r7, #8
 8018cfe:	9302      	str	r3, [sp, #8]
 8018d00:	2311      	movs	r3, #17
 8018d02:	9301      	str	r3, [sp, #4]
 8018d04:	2300      	movs	r3, #0
 8018d06:	9300      	str	r3, [sp, #0]
 8018d08:	2300      	movs	r3, #0
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	f7f8 fcf1 	bl	80116f2 <aci_gap_set_discoverable>
 8018d10:	4603      	mov	r3, r0
 8018d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8018d16:	4911      	ldr	r1, [pc, #68]	; (8018d5c <Adv_Request+0x188>)
 8018d18:	200e      	movs	r0, #14
 8018d1a:	f7f8 ff45 	bl	8011ba8 <aci_gap_update_adv_data>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == BLE_STATUS_SUCCESS)
 8018d24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d10a      	bne.n	8018d42 <Adv_Request+0x16e>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8018d2c:	79fb      	ldrb	r3, [r7, #7]
 8018d2e:	2b01      	cmp	r3, #1
 8018d30:	d107      	bne.n	8018d42 <Adv_Request+0x16e>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8018d32:	4b08      	ldr	r3, [pc, #32]	; (8018d54 <Adv_Request+0x180>)
 8018d34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8018d38:	4909      	ldr	r1, [pc, #36]	; (8018d60 <Adv_Request+0x18c>)
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	f7e9 fb14 	bl	8002368 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8018d40:	bf00      	nop
 8018d42:	bf00      	nop
}
 8018d44:	3728      	adds	r7, #40	; 0x28
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	200002e4 	.word	0x200002e4
 8018d50:	200002e6 	.word	0x200002e6
 8018d54:	20000260 	.word	0x20000260
 8018d58:	20000279 	.word	0x20000279
 8018d5c:	20000084 	.word	0x20000084
 8018d60:	0001e046 	.word	0x0001e046

08018d64 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b086      	sub	sp, #24
 8018d68:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8018d6a:	f7ff fce7 	bl	801873c <LL_FLASH_GetUDN>
 8018d6e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8018d70:	693b      	ldr	r3, [r7, #16]
 8018d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018d76:	d023      	beq.n	8018dc0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8018d78:	f7ff fcf8 	bl	801876c <LL_FLASH_GetSTCompanyID>
 8018d7c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8018d7e:	f7ff fce9 	bl	8018754 <LL_FLASH_GetDeviceID>
 8018d82:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8018d84:	693b      	ldr	r3, [r7, #16]
 8018d86:	b2da      	uxtb	r2, r3
 8018d88:	4b16      	ldr	r3, [pc, #88]	; (8018de4 <BleGetBdAddress+0x80>)
 8018d8a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	0a1b      	lsrs	r3, r3, #8
 8018d90:	b2da      	uxtb	r2, r3
 8018d92:	4b14      	ldr	r3, [pc, #80]	; (8018de4 <BleGetBdAddress+0x80>)
 8018d94:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	b2da      	uxtb	r2, r3
 8018d9a:	4b12      	ldr	r3, [pc, #72]	; (8018de4 <BleGetBdAddress+0x80>)
 8018d9c:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	b2da      	uxtb	r2, r3
 8018da2:	4b10      	ldr	r3, [pc, #64]	; (8018de4 <BleGetBdAddress+0x80>)
 8018da4:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	0a1b      	lsrs	r3, r3, #8
 8018daa:	b2da      	uxtb	r2, r3
 8018dac:	4b0d      	ldr	r3, [pc, #52]	; (8018de4 <BleGetBdAddress+0x80>)
 8018dae:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	0c1b      	lsrs	r3, r3, #16
 8018db4:	b2da      	uxtb	r2, r3
 8018db6:	4b0b      	ldr	r3, [pc, #44]	; (8018de4 <BleGetBdAddress+0x80>)
 8018db8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8018dba:	4b0a      	ldr	r3, [pc, #40]	; (8018de4 <BleGetBdAddress+0x80>)
 8018dbc:	617b      	str	r3, [r7, #20]
 8018dbe:	e00b      	b.n	8018dd8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	f7fa fd87 	bl	80138d4 <OTP_Read>
 8018dc6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d002      	beq.n	8018dd4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	617b      	str	r3, [r7, #20]
 8018dd2:	e001      	b.n	8018dd8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8018dd4:	4b04      	ldr	r3, [pc, #16]	; (8018de8 <BleGetBdAddress+0x84>)
 8018dd6:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8018dd8:	697b      	ldr	r3, [r7, #20]
}
 8018dda:	4618      	mov	r0, r3
 8018ddc:	3718      	adds	r7, #24
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
 8018de2:	bf00      	nop
 8018de4:	2000986c 	.word	0x2000986c
 8018de8:	0801aad8 	.word	0x0801aad8

08018dec <Add_Advertisment_Service_UUID>:

  return;
}

static void Add_Advertisment_Service_UUID( uint16_t servUUID )
{
 8018dec:	b480      	push	{r7}
 8018dee:	b083      	sub	sp, #12
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	4603      	mov	r3, r0
 8018df4:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8018df6:	4b12      	ldr	r3, [pc, #72]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018df8:	7e1b      	ldrb	r3, [r3, #24]
 8018dfa:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 8018dfc:	88fb      	ldrh	r3, [r7, #6]
 8018dfe:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8018e00:	4b0f      	ldr	r3, [pc, #60]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e02:	440b      	add	r3, r1
 8018e04:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 8018e06:	4b0e      	ldr	r3, [pc, #56]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e08:	7e1b      	ldrb	r3, [r3, #24]
 8018e0a:	3301      	adds	r3, #1
 8018e0c:	b2da      	uxtb	r2, r3
 8018e0e:	4b0c      	ldr	r3, [pc, #48]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e10:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 8018e12:	88fb      	ldrh	r3, [r7, #6]
 8018e14:	0a1b      	lsrs	r3, r3, #8
 8018e16:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8018e18:	4b09      	ldr	r3, [pc, #36]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e1a:	7e1b      	ldrb	r3, [r3, #24]
 8018e1c:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 8018e1e:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 8018e20:	4b07      	ldr	r3, [pc, #28]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e22:	440b      	add	r3, r1
 8018e24:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 8018e26:	4b06      	ldr	r3, [pc, #24]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e28:	7e1b      	ldrb	r3, [r3, #24]
 8018e2a:	3301      	adds	r3, #1
 8018e2c:	b2da      	uxtb	r2, r3
 8018e2e:	4b04      	ldr	r3, [pc, #16]	; (8018e40 <Add_Advertisment_Service_UUID+0x54>)
 8018e30:	761a      	strb	r2, [r3, #24]

  return;
 8018e32:	bf00      	nop
}
 8018e34:	370c      	adds	r7, #12
 8018e36:	46bd      	mov	sp, r7
 8018e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3c:	4770      	bx	lr
 8018e3e:	bf00      	nop
 8018e40:	20000260 	.word	0x20000260

08018e44 <Adv_Mgr>:

static void Adv_Mgr( void )
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 8018e48:	4b03      	ldr	r3, [pc, #12]	; (8018e58 <Adv_Mgr+0x14>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2101      	movs	r1, #1
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f7fb fbc4 	bl	80145dc <osThreadFlagsSet>

  return;
 8018e54:	bf00      	nop
}
 8018e56:	bd80      	pop	{r7, pc}
 8018e58:	2000a224 	.word	0x2000a224

08018e5c <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8018e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e68:	2100      	movs	r1, #0
 8018e6a:	2001      	movs	r0, #1
 8018e6c:	f7fb fc04 	bl	8014678 <osThreadFlagsWait>
    Adv_Update( );
 8018e70:	f000 f801 	bl	8018e76 <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8018e74:	e7f6      	b.n	8018e64 <AdvUpdateProcess+0x8>

08018e76 <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 8018e76:	b580      	push	{r7, lr}
 8018e78:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 8018e7a:	2002      	movs	r0, #2
 8018e7c:	f7ff feaa 	bl	8018bd4 <Adv_Request>

  return;
 8018e80:	bf00      	nop
}
 8018e82:	bd80      	pop	{r7, pc}

08018e84 <HciUserEvtProcess>:

static void HciUserEvtProcess(void *argument)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8018e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e90:	2100      	movs	r1, #0
 8018e92:	2001      	movs	r0, #1
 8018e94:	f7fb fbf0 	bl	8014678 <osThreadFlagsWait>
    hci_user_evt_proc( );
 8018e98:	f7fa f826 	bl	8012ee8 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8018e9c:	e7f6      	b.n	8018e8c <HciUserEvtProcess+0x8>
	...

08018ea0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b082      	sub	sp, #8
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 8018ea8:	4b04      	ldr	r3, [pc, #16]	; (8018ebc <hci_notify_asynch_evt+0x1c>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	2101      	movs	r1, #1
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7fb fb94 	bl	80145dc <osThreadFlagsSet>
  return;
 8018eb4:	bf00      	nop
}
 8018eb6:	3708      	adds	r7, #8
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bd80      	pop	{r7, pc}
 8018ebc:	2000a20c 	.word	0x2000a20c

08018ec0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b082      	sub	sp, #8
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 8018ec8:	4b04      	ldr	r3, [pc, #16]	; (8018edc <hci_cmd_resp_release+0x1c>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7fb fe59 	bl	8014b84 <osSemaphoreRelease>
  return;
 8018ed2:	bf00      	nop
}
 8018ed4:	3708      	adds	r7, #8
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}
 8018eda:	bf00      	nop
 8018edc:	2000a208 	.word	0x2000a208

08018ee0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b082      	sub	sp, #8
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 8018ee8:	4b05      	ldr	r3, [pc, #20]	; (8018f00 <hci_cmd_resp_wait+0x20>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7fb fdf5 	bl	8014ae0 <osSemaphoreAcquire>
  return;
 8018ef6:	bf00      	nop
}
 8018ef8:	3708      	adds	r7, #8
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}
 8018efe:	bf00      	nop
 8018f00:	2000a208 	.word	0x2000a208

08018f04 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b084      	sub	sp, #16
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	685b      	ldr	r3, [r3, #4]
 8018f14:	3308      	adds	r3, #8
 8018f16:	4618      	mov	r0, r3
 8018f18:	f7f9 fe84 	bl	8012c24 <SVCCTL_UserEvtRx>
 8018f1c:	4603      	mov	r3, r0
 8018f1e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8018f20:	7afb      	ldrb	r3, [r7, #11]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d003      	beq.n	8018f2e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	2201      	movs	r2, #1
 8018f2a:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8018f2c:	e003      	b.n	8018f36 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	2200      	movs	r2, #0
 8018f32:	701a      	strb	r2, [r3, #0]
  return;
 8018f34:	bf00      	nop
}
 8018f36:	3710      	adds	r7, #16
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}

08018f3c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b082      	sub	sp, #8
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	4603      	mov	r3, r0
 8018f44:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8018f46:	79fb      	ldrb	r3, [r7, #7]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d002      	beq.n	8018f52 <BLE_StatusNot+0x16>
 8018f4c:	2b01      	cmp	r3, #1
 8018f4e:	d008      	beq.n	8018f62 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 8018f50:	e00d      	b.n	8018f6e <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 8018f52:	4b09      	ldr	r3, [pc, #36]	; (8018f78 <BLE_StatusNot+0x3c>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7fb fcae 	bl	80148bc <osMutexAcquire>
      break;
 8018f60:	e005      	b.n	8018f6e <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 8018f62:	4b05      	ldr	r3, [pc, #20]	; (8018f78 <BLE_StatusNot+0x3c>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	4618      	mov	r0, r3
 8018f68:	f7fb fcf3 	bl	8014952 <osMutexRelease>
      break;
 8018f6c:	bf00      	nop
  }
  return;
 8018f6e:	bf00      	nop
}
 8018f70:	3708      	adds	r7, #8
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}
 8018f76:	bf00      	nop
 8018f78:	2000a21c 	.word	0x2000a21c

08018f7c <SVCCTL_InitCustomSvc>:
  hci_resume_flow();
  return;
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void SVCCTL_InitCustomSvc(void) {
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	af00      	add	r7, sp, #0
	DTS_STM_Init();
 8018f80:	f000 f9f4 	bl	801936c <DTS_STM_Init>
}
 8018f84:	bf00      	nop
 8018f86:	bd80      	pop	{r7, pc}

08018f88 <DTS_Notification>:
/*************************************************************
 *
 * CALLBACK FUNCTIONS
 *
 *************************************************************/
void DTS_Notification(DTS_STM_App_Notification_evt_t *pNotification) {
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b082      	sub	sp, #8
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
	switch (pNotification->Evt_Opcode) {
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	785b      	ldrb	r3, [r3, #1]
 8018f94:	2b05      	cmp	r3, #5
 8018f96:	d832      	bhi.n	8018ffe <DTS_Notification+0x76>
 8018f98:	a201      	add	r2, pc, #4	; (adr r2, 8018fa0 <DTS_Notification+0x18>)
 8018f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f9e:	bf00      	nop
 8018fa0:	08018fb9 	.word	0x08018fb9
 8018fa4:	08018fc1 	.word	0x08018fc1
 8018fa8:	08018ff7 	.word	0x08018ff7
 8018fac:	08018fc9 	.word	0x08018fc9
 8018fb0:	08018fff 	.word	0x08018fff
 8018fb4:	08018fcf 	.word	0x08018fcf
	case DTS_STM__NOTIFICATION_ENABLED:
		DataTransferServerContext.NotificationTransferReq =
 8018fb8:	4b13      	ldr	r3, [pc, #76]	; (8019008 <DTS_Notification+0x80>)
 8018fba:	2201      	movs	r2, #1
 8018fbc:	741a      	strb	r2, [r3, #16]
				DTS_APP_TRANSFER_REQ_ON;
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
//		osThreadFlagsSet(DataTransferProcessId, 1);
		break;
 8018fbe:	e01f      	b.n	8019000 <DTS_Notification+0x78>

	case DTS_STM_NOTIFICATION_DISABLED:
		DataTransferServerContext.NotificationTransferReq =
 8018fc0:	4b11      	ldr	r3, [pc, #68]	; (8019008 <DTS_Notification+0x80>)
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	741a      	strb	r2, [r3, #16]
				DTS_APP_TRANSFER_REQ_OFF;
		break;
 8018fc6:	e01b      	b.n	8019000 <DTS_Notification+0x78>

	case DTC_NOTIFICATION_ENABLED:
		BLE_SVC_L2CAP_Conn_Update_7_5();
 8018fc8:	f7ff fcdc 	bl	8018984 <BLE_SVC_L2CAP_Conn_Update_7_5>
//      BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);

//DataTransferServerContext.NotificationClientTransferFlag = 0x01;
		break;
 8018fcc:	e018      	b.n	8019000 <DTS_Notification+0x78>
		//DataTransferServerContext.NotificationClientTransferFlag = 0x00;
		APP_DBG_MSG("write data notification disabled \n");
		break;

	case DTS_STM_DATA_RECEIVED:
		if (DataReceived == 0) {
 8018fce:	4b0f      	ldr	r3, [pc, #60]	; (801900c <DTS_Notification+0x84>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d107      	bne.n	8018fe6 <DTS_Notification+0x5e>
			/* start timer */
			DataReceived += pNotification->DataTransfered.Length;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	691a      	ldr	r2, [r3, #16]
 8018fda:	4b0c      	ldr	r3, [pc, #48]	; (801900c <DTS_Notification+0x84>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	4413      	add	r3, r2
 8018fe0:	4a0a      	ldr	r2, [pc, #40]	; (801900c <DTS_Notification+0x84>)
 8018fe2:	6013      	str	r3, [r2, #0]
//			HW_TS_Start(TimerDataThroughputWrite_Id, DELAY_1s);
		} else {
			DataReceived += pNotification->DataTransfered.Length;
		}
		break;
 8018fe4:	e00c      	b.n	8019000 <DTS_Notification+0x78>
			DataReceived += pNotification->DataTransfered.Length;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	691a      	ldr	r2, [r3, #16]
 8018fea:	4b08      	ldr	r3, [pc, #32]	; (801900c <DTS_Notification+0x84>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	4413      	add	r3, r2
 8018ff0:	4a06      	ldr	r2, [pc, #24]	; (801900c <DTS_Notification+0x84>)
 8018ff2:	6013      	str	r3, [r2, #0]
		break;
 8018ff4:	e004      	b.n	8019000 <DTS_Notification+0x78>

	case DTS_STM_GATT_TX_POOL_AVAILABLE:
		DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8018ff6:	4b04      	ldr	r3, [pc, #16]	; (8019008 <DTS_Notification+0x80>)
 8018ff8:	2201      	movs	r2, #1
 8018ffa:	749a      	strb	r2, [r3, #18]
//      UTIL_SEQ_SetTask(1 << CFG_TASK_DATA_TRANSFER_UPDATE_ID, CFG_SCH_PRIO_0);
//		osThreadFlagsSet(DataTransferProcessId, 1);
		break;
 8018ffc:	e000      	b.n	8019000 <DTS_Notification+0x78>

	default:
		break;
 8018ffe:	bf00      	nop
	}

	return;
 8019000:	bf00      	nop
}
 8019002:	3708      	adds	r7, #8
 8019004:	46bd      	mov	sp, r7
 8019006:	bd80      	pop	{r7, pc}
 8019008:	2000a23c 	.word	0x2000a23c
 801900c:	2000a238 	.word	0x2000a238

08019010 <Resume_Notification>:
	}else{
	    return PACKET_UNDEFINED_ERR;
	}
}

void Resume_Notification(void) {
 8019010:	b480      	push	{r7}
 8019012:	af00      	add	r7, sp, #0
	DataTransferServerContext.DtFlowStatus = DTS_APP_FLOW_ON;
 8019014:	4b03      	ldr	r3, [pc, #12]	; (8019024 <Resume_Notification+0x14>)
 8019016:	2201      	movs	r2, #1
 8019018:	749a      	strb	r2, [r3, #18]
}
 801901a:	bf00      	nop
 801901c:	46bd      	mov	sp, r7
 801901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019022:	4770      	bx	lr
 8019024:	2000a23c 	.word	0x2000a23c

08019028 <__NVIC_SystemReset>:
{
 8019028:	b480      	push	{r7}
 801902a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801902c:	f3bf 8f4f 	dsb	sy
}
 8019030:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8019032:	4b06      	ldr	r3, [pc, #24]	; (801904c <__NVIC_SystemReset+0x24>)
 8019034:	68db      	ldr	r3, [r3, #12]
 8019036:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801903a:	4904      	ldr	r1, [pc, #16]	; (801904c <__NVIC_SystemReset+0x24>)
 801903c:	4b04      	ldr	r3, [pc, #16]	; (8019050 <__NVIC_SystemReset+0x28>)
 801903e:	4313      	orrs	r3, r2
 8019040:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019042:	f3bf 8f4f 	dsb	sy
}
 8019046:	bf00      	nop
    __NOP();
 8019048:	bf00      	nop
 801904a:	e7fd      	b.n	8019048 <__NVIC_SystemReset+0x20>
 801904c:	e000ed00 	.word	0xe000ed00
 8019050:	05fa0004 	.word	0x05fa0004

08019054 <DTS_Event_Handler>:
/**
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t DTS_Event_Handler(void *Event) {
 8019054:	b580      	push	{r7, lr}
 8019056:	b090      	sub	sp, #64	; 0x40
 8019058:	af02      	add	r7, sp, #8
 801905a:	6078      	str	r0, [r7, #4]
	aci_att_exchange_mtu_resp_event_rp0 *exchange_mtu_resp;
	aci_gatt_write_permit_req_event_rp0 *write_permit_req;

	DTS_STM_App_Notification_evt_t Notification;

	return_value = SVCCTL_EvtNotAck;
 801905c:	2300      	movs	r3, #0
 801905e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	event_pckt = (hci_event_pckt*) (((hci_uart_pckt*) Event)->data);
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	3301      	adds	r3, #1
 8019066:	633b      	str	r3, [r7, #48]	; 0x30

	switch (event_pckt->evt) {
 8019068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	2bff      	cmp	r3, #255	; 0xff
 801906e:	f040 80f2 	bne.w	8019256 <DTS_Event_Handler+0x202>
	case EVT_VENDOR: {
		blue_evt = (evt_blue_aci*) event_pckt->data;
 8019072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019074:	3302      	adds	r3, #2
 8019076:	62fb      	str	r3, [r7, #44]	; 0x2c

		switch (blue_evt->ecode) {
 8019078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801907a:	881b      	ldrh	r3, [r3, #0]
 801907c:	b29b      	uxth	r3, r3
 801907e:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8019082:	2b15      	cmp	r3, #21
 8019084:	f200 80e3 	bhi.w	801924e <DTS_Event_Handler+0x1fa>
 8019088:	a201      	add	r2, pc, #4	; (adr r2, 8019090 <DTS_Event_Handler+0x3c>)
 801908a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801908e:	bf00      	nop
 8019090:	080190fb 	.word	0x080190fb
 8019094:	0801924f 	.word	0x0801924f
 8019098:	080190e9 	.word	0x080190e9
 801909c:	0801924f 	.word	0x0801924f
 80190a0:	0801924f 	.word	0x0801924f
 80190a4:	0801924f 	.word	0x0801924f
 80190a8:	0801924f 	.word	0x0801924f
 80190ac:	0801924f 	.word	0x0801924f
 80190b0:	0801924f 	.word	0x0801924f
 80190b4:	0801924f 	.word	0x0801924f
 80190b8:	0801924f 	.word	0x0801924f
 80190bc:	0801924f 	.word	0x0801924f
 80190c0:	0801924f 	.word	0x0801924f
 80190c4:	0801924f 	.word	0x0801924f
 80190c8:	0801924f 	.word	0x0801924f
 80190cc:	0801924f 	.word	0x0801924f
 80190d0:	0801924f 	.word	0x0801924f
 80190d4:	0801924f 	.word	0x0801924f
 80190d8:	08019227 	.word	0x08019227
 80190dc:	0801924f 	.word	0x0801924f
 80190e0:	0801924f 	.word	0x0801924f
 80190e4:	08019221 	.word	0x08019221
		case EVT_BLUE_ATT_EXCHANGE_MTU_RESP:
#ifdef NUCLEO_LED_ACTIVE
        	 BSP_LED_On(LED_BLUE);
#endif
			APP_DBG_MSG("EVT_BLUE_ATT_EXCHANGE_MTU_RESP \n");
			exchange_mtu_resp =
 80190e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ea:	3302      	adds	r3, #2
 80190ec:	627b      	str	r3, [r7, #36]	; 0x24
					(aci_att_exchange_mtu_resp_event_rp0*) blue_evt->data;
			APP_DBG_MSG("MTU_size = %d \n",exchange_mtu_resp->Server_RX_MTU );
			Att_Mtu_Exchanged = exchange_mtu_resp->Server_RX_MTU;
 80190ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f0:	885b      	ldrh	r3, [r3, #2]
 80190f2:	b29a      	uxth	r2, r3
 80190f4:	4b5b      	ldr	r3, [pc, #364]	; (8019264 <DTS_Event_Handler+0x210>)
 80190f6:	801a      	strh	r2, [r3, #0]
#ifdef NUCLEO_LED_ACTIVE
     	 BSP_LED_On(LED_GREEN);
#endif
			break;
 80190f8:	e0ac      	b.n	8019254 <DTS_Event_Handler+0x200>
			/* server */
		case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED: {
			attribute_modified =
 80190fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fc:	3302      	adds	r3, #2
 80190fe:	623b      	str	r3, [r7, #32]
					(aci_gatt_attribute_modified_event_rp0*) blue_evt->data;
			if (attribute_modified->Attr_Handle
 8019100:	6a3b      	ldr	r3, [r7, #32]
 8019102:	885b      	ldrh	r3, [r3, #2]
 8019104:	b29b      	uxth	r3, r3
 8019106:	461a      	mov	r2, r3
					== (aDataTransferContext.DataTransferTxCharHdle + 2)) {
 8019108:	4b57      	ldr	r3, [pc, #348]	; (8019268 <DTS_Event_Handler+0x214>)
 801910a:	885b      	ldrh	r3, [r3, #2]
 801910c:	3302      	adds	r3, #2
			if (attribute_modified->Attr_Handle
 801910e:	429a      	cmp	r2, r3
 8019110:	d114      	bne.n	801913c <DTS_Event_Handler+0xe8>
				/**
				 * Notify to application to start measurement
				 */
				if (attribute_modified->Attr_Data[0]
 8019112:	6a3b      	ldr	r3, [r7, #32]
 8019114:	7a1b      	ldrb	r3, [r3, #8]
						& DTS_STM_NOTIFICATION_MASK) {
 8019116:	f003 0301 	and.w	r3, r3, #1
				if (attribute_modified->Attr_Data[0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d007      	beq.n	801912e <DTS_Event_Handler+0xda>
					APP_DBG_MSG("notification enabled\n");
					Notification.Evt_Opcode = DTS_STM__NOTIFICATION_ENABLED;
 801911e:	2300      	movs	r3, #0
 8019120:	737b      	strb	r3, [r7, #13]
					DTS_Notification(&Notification);
 8019122:	f107 030c 	add.w	r3, r7, #12
 8019126:	4618      	mov	r0, r3
 8019128:	f7ff ff2e 	bl	8018f88 <DTS_Notification>
 801912c:	e006      	b.n	801913c <DTS_Event_Handler+0xe8>
				} else {
					APP_DBG_MSG("notification disabled\n");
					Notification.Evt_Opcode = DTS_STM_NOTIFICATION_DISABLED;
 801912e:	2301      	movs	r3, #1
 8019130:	737b      	strb	r3, [r7, #13]
					DTS_Notification(&Notification);
 8019132:	f107 030c 	add.w	r3, r7, #12
 8019136:	4618      	mov	r0, r3
 8019138:	f7ff ff26 	bl	8018f88 <DTS_Notification>
				}
			}

			if (attribute_modified->Attr_Handle
 801913c:	6a3b      	ldr	r3, [r7, #32]
 801913e:	885b      	ldrh	r3, [r3, #2]
 8019140:	b29b      	uxth	r3, r3
 8019142:	461a      	mov	r2, r3
					== (aDataTransferContext.DataTransferRxCharHdle + 1)) {
 8019144:	4b48      	ldr	r3, [pc, #288]	; (8019268 <DTS_Event_Handler+0x214>)
 8019146:	889b      	ldrh	r3, [r3, #4]
 8019148:	3301      	adds	r3, #1
			if (attribute_modified->Attr_Handle
 801914a:	429a      	cmp	r2, r3
 801914c:	f040 8081 	bne.w	8019252 <DTS_Event_Handler+0x1fe>
				return_value = SVCCTL_EvtAckFlowEnable;
 8019150:	2301      	movs	r3, #1
 8019152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				Notification.Evt_Opcode = DTS_STM_DATA_RECEIVED;
 8019156:	2305      	movs	r3, #5
 8019158:	737b      	strb	r3, [r7, #13]
				Notification.DataTransfered.Length =
						attribute_modified->Attr_Data_Length;
 801915a:	6a3b      	ldr	r3, [r7, #32]
 801915c:	88db      	ldrh	r3, [r3, #6]
 801915e:	b29b      	uxth	r3, r3
				Notification.DataTransfered.Length =
 8019160:	61fb      	str	r3, [r7, #28]
				DTS_Notification(&Notification);
 8019162:	f107 030c 	add.w	r3, r7, #12
 8019166:	4618      	mov	r0, r3
 8019168:	f7ff ff0e 	bl	8018f88 <DTS_Notification>

				// parse header
				memcpy(&rxPacketHeader, attribute_modified->Attr_Data, sizeof(RX_PacketHeader));
 801916c:	6a3b      	ldr	r3, [r7, #32]
 801916e:	3308      	adds	r3, #8
 8019170:	2208      	movs	r2, #8
 8019172:	4619      	mov	r1, r3
 8019174:	483d      	ldr	r0, [pc, #244]	; (801926c <DTS_Event_Handler+0x218>)
 8019176:	f001 f8d5 	bl	801a324 <memcpy>

				/* make sure whatever mechanism is used below, it copies the memory of the payload
						because there's a chance it can be overwritten before a thread can handle
						the data */
				if(rxPacketHeader.packetType == CONTROL_LED_PKT_TYPE){
 801917a:	4b3c      	ldr	r3, [pc, #240]	; (801926c <DTS_Event_Handler+0x218>)
 801917c:	881b      	ldrh	r3, [r3, #0]
 801917e:	2b01      	cmp	r3, #1
 8019180:	d10a      	bne.n	8019198 <DTS_Event_Handler+0x144>
					osMessageQueuePut(lightsComplexQueueHandle,
 8019182:	4b3b      	ldr	r3, [pc, #236]	; (8019270 <DTS_Event_Handler+0x21c>)
 8019184:	6818      	ldr	r0, [r3, #0]
							(attribute_modified->Attr_Data + sizeof(RX_PacketHeader)), 0, 0);
 8019186:	6a3b      	ldr	r3, [r7, #32]
 8019188:	3308      	adds	r3, #8
					osMessageQueuePut(lightsComplexQueueHandle,
 801918a:	f103 0108 	add.w	r1, r3, #8
 801918e:	2300      	movs	r3, #0
 8019190:	2200      	movs	r2, #0
 8019192:	f7fb fdaf 	bl	8014cf4 <osMessageQueuePut>
 8019196:	e039      	b.n	801920c <DTS_Event_Handler+0x1b8>
				}
				else if(rxPacketHeader.packetType == SET_CLK_PKT_TYPE){
 8019198:	4b34      	ldr	r3, [pc, #208]	; (801926c <DTS_Event_Handler+0x218>)
 801919a:	881b      	ldrh	r3, [r3, #0]
 801919c:	2b02      	cmp	r3, #2
 801919e:	d035      	beq.n	801920c <DTS_Event_Handler+0x1b8>
					// do nothing since this will get handled at the end
				}
				else if(rxPacketHeader.packetType == CNTRL_SENSORS_PKT_TYPE){
 80191a0:	4b32      	ldr	r3, [pc, #200]	; (801926c <DTS_Event_Handler+0x218>)
 80191a2:	881b      	ldrh	r3, [r3, #0]
 80191a4:	2b03      	cmp	r3, #3
 80191a6:	d031      	beq.n	801920c <DTS_Event_Handler+0x1b8>

				}
				else if(rxPacketHeader.packetType == CONFIG_SENSORS_PKT_TYPE){
 80191a8:	4b30      	ldr	r3, [pc, #192]	; (801926c <DTS_Event_Handler+0x218>)
 80191aa:	881b      	ldrh	r3, [r3, #0]
 80191ac:	2b04      	cmp	r3, #4
 80191ae:	d02d      	beq.n	801920c <DTS_Event_Handler+0x1b8>

				}
				else if(rxPacketHeader.packetType == TRIGGER_FUNC_PKT_TYPE){
 80191b0:	4b2e      	ldr	r3, [pc, #184]	; (801926c <DTS_Event_Handler+0x218>)
 80191b2:	881b      	ldrh	r3, [r3, #0]
 80191b4:	2b05      	cmp	r3, #5
 80191b6:	d129      	bne.n	801920c <DTS_Event_Handler+0x1b8>
					uint8_t functionIdentifier;
					memcpy(&functionIdentifier,
							attribute_modified->Attr_Data + sizeof(RX_PacketHeader),
 80191b8:	6a3b      	ldr	r3, [r7, #32]
 80191ba:	3308      	adds	r3, #8
					memcpy(&functionIdentifier,
 80191bc:	3308      	adds	r3, #8
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	72fb      	strb	r3, [r7, #11]
							sizeof(uint8_t));

					if(functionIdentifier == ENTER_DFU_MODE_UPON_RESET){
 80191c2:	7afb      	ldrb	r3, [r7, #11]
 80191c4:	2b01      	cmp	r3, #1
 80191c6:	d104      	bne.n	80191d2 <DTS_Event_Handler+0x17e>
						ledEnterDFUNotification();
 80191c8:	f7e9 fc82 	bl	8002ad0 <ledEnterDFUNotification>
						enterDFUMode();
 80191cc:	f000 f85a 	bl	8019284 <enterDFUMode>
 80191d0:	e01c      	b.n	801920c <DTS_Event_Handler+0x1b8>
					}
					else if(functionIdentifier == ENTER_BLUE_GREEN_TRANSITION){
 80191d2:	7afb      	ldrb	r3, [r7, #11]
 80191d4:	2b02      	cmp	r3, #2
 80191d6:	d119      	bne.n	801920c <DTS_Event_Handler+0x1b8>
						memcpy(&blueGreenTranRX, attribute_modified->Attr_Data + sizeof(RX_PacketHeader) + 1, sizeof(union BlueGreenTransition));
 80191d8:	6a3b      	ldr	r3, [r7, #32]
 80191da:	3308      	adds	r3, #8
 80191dc:	f103 0209 	add.w	r2, r3, #9
 80191e0:	4b24      	ldr	r3, [pc, #144]	; (8019274 <DTS_Event_Handler+0x220>)
 80191e2:	6811      	ldr	r1, [r2, #0]
 80191e4:	6019      	str	r1, [r3, #0]
 80191e6:	8892      	ldrh	r2, [r2, #4]
 80191e8:	809a      	strh	r2, [r3, #4]
						osThreadTerminate(blueGreenTranTaskHandle); // terminate any existing running thread
 80191ea:	4b23      	ldr	r3, [pc, #140]	; (8019278 <DTS_Event_Handler+0x224>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	4618      	mov	r0, r3
 80191f0:	f7fb f9c6 	bl	8014580 <osThreadTerminate>
						if(blueGreenTranRX.val.start_bit == 1){
 80191f4:	4b1f      	ldr	r3, [pc, #124]	; (8019274 <DTS_Event_Handler+0x220>)
 80191f6:	781b      	ldrb	r3, [r3, #0]
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d107      	bne.n	801920c <DTS_Event_Handler+0x1b8>
							blueGreenTranTaskHandle = osThreadNew(BlueGreenTransitionTask, &blueGreenTranRX, &blueGreenTask_attributes);
 80191fc:	4a1f      	ldr	r2, [pc, #124]	; (801927c <DTS_Event_Handler+0x228>)
 80191fe:	491d      	ldr	r1, [pc, #116]	; (8019274 <DTS_Event_Handler+0x220>)
 8019200:	481f      	ldr	r0, [pc, #124]	; (8019280 <DTS_Event_Handler+0x22c>)
 8019202:	f7fb f92b 	bl	801445c <osThreadNew>
 8019206:	4603      	mov	r3, r0
 8019208:	4a1b      	ldr	r2, [pc, #108]	; (8019278 <DTS_Event_Handler+0x224>)
 801920a:	6013      	str	r3, [r2, #0]
						}
					}
				}

				// update RTC with header's timestamp
				if(rxPacketHeader.epoch != 0){
 801920c:	4b17      	ldr	r3, [pc, #92]	; (801926c <DTS_Event_Handler+0x218>)
 801920e:	685b      	ldr	r3, [r3, #4]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d01e      	beq.n	8019252 <DTS_Event_Handler+0x1fe>
					updateRTC(rxPacketHeader.epoch);
 8019214:	4b15      	ldr	r3, [pc, #84]	; (801926c <DTS_Event_Handler+0x218>)
 8019216:	685b      	ldr	r3, [r3, #4]
 8019218:	4618      	mov	r0, r3
 801921a:	f7e9 fec9 	bl	8002fb0 <updateRTC>
////				updateRTC(receivedEpoch);
//
//			}

		}
			break;
 801921e:	e018      	b.n	8019252 <DTS_Event_Handler+0x1fe>
		case EVT_BLUE_GATT_TX_POOL_AVAILABLE:
			Resume_Notification();
 8019220:	f7ff fef6 	bl	8019010 <Resume_Notification>
			break;
 8019224:	e016      	b.n	8019254 <DTS_Event_Handler+0x200>

		case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
			APP_DBG_MSG("write permit req\r\n");
			write_permit_req =
 8019226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019228:	3302      	adds	r3, #2
 801922a:	62bb      	str	r3, [r7, #40]	; 0x28
					(aci_gatt_write_permit_req_event_rp0*) blue_evt->data;
			aci_gatt_write_resp(write_permit_req->Connection_Handle,
 801922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801922e:	881b      	ldrh	r3, [r3, #0]
 8019230:	b298      	uxth	r0, r3
 8019232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019234:	885b      	ldrh	r3, [r3, #2]
 8019236:	b299      	uxth	r1, r3
 8019238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923a:	791b      	ldrb	r3, [r3, #4]
					write_permit_req->Attribute_Handle, 0, 0,
					write_permit_req->Data_Length, write_permit_req->Data);
 801923c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801923e:	3205      	adds	r2, #5
			aci_gatt_write_resp(write_permit_req->Connection_Handle,
 8019240:	9201      	str	r2, [sp, #4]
 8019242:	9300      	str	r3, [sp, #0]
 8019244:	2300      	movs	r3, #0
 8019246:	2200      	movs	r2, #0
 8019248:	f7f8 ff73 	bl	8012132 <aci_gatt_write_resp>
			break;
 801924c:	e002      	b.n	8019254 <DTS_Event_Handler+0x200>

		default:
			break;
 801924e:	bf00      	nop
 8019250:	e002      	b.n	8019258 <DTS_Event_Handler+0x204>
			break;
 8019252:	bf00      	nop
		}
	}
		break; /* HCI_EVT_VENDOR_SPECIFIC */
 8019254:	e000      	b.n	8019258 <DTS_Event_Handler+0x204>

	default:
		break;
 8019256:	bf00      	nop
	}

	return (return_value);
 8019258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}/* end SVCCTL_EvtAckStatus_t */
 801925c:	4618      	mov	r0, r3
 801925e:	3738      	adds	r7, #56	; 0x38
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}
 8019264:	2000a228 	.word	0x2000a228
 8019268:	20009874 	.word	0x20009874
 801926c:	2000a260 	.word	0x2000a260
 8019270:	20000310 	.word	0x20000310
 8019274:	2000a268 	.word	0x2000a268
 8019278:	20000304 	.word	0x20000304
 801927c:	0801a968 	.word	0x0801a968
 8019280:	080029b1 	.word	0x080029b1

08019284 <enterDFUMode>:
 */
//https://www.st.com/resource/en/programming_manual/pm0271-stm32wb-ble-stack-programming-guidelines-stmicroelectronics.pdf
# define MAX_PACKET_LENGTH	243 // https://www.compel.ru/wordpress/wp-content/uploads/2019/12/en.dm00598033.pdf
//# define MAX_PACKET_LENGTH	500 // https://www.compel.ru/wordpress/wp-content/uploads/2019/12/en.dm00598033.pdf

void enterDFUMode(void){
 8019284:	b580      	push	{r7, lr}
 8019286:	af00      	add	r7, sp, #0
	*((unsigned long *)0x2000020c) = 0xDEADBEEF;
 8019288:	4b03      	ldr	r3, [pc, #12]	; (8019298 <enterDFUMode+0x14>)
 801928a:	4a04      	ldr	r2, [pc, #16]	; (801929c <enterDFUMode+0x18>)
 801928c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801928e:	b672      	cpsid	i
}
 8019290:	bf00      	nop
	__disable_irq();
	NVIC_SystemReset();
 8019292:	f7ff fec9 	bl	8019028 <__NVIC_SystemReset>
 8019296:	bf00      	nop
 8019298:	2000020c 	.word	0x2000020c
 801929c:	deadbeef 	.word	0xdeadbeef

080192a0 <TX_Update_Char>:
}

static tBleStatus TX_Update_Char(DTS_STM_Payload_t *pDataValue) {
 80192a0:	b5b0      	push	{r4, r5, r7, lr}
 80192a2:	b088      	sub	sp, #32
 80192a4:	af04      	add	r7, sp, #16
 80192a6:	6078      	str	r0, [r7, #4]
	tBleStatus ret;

	/**
	 *  Notification Data Transfer Packet
	 */
	if(pDataValue->Length < MAX_PACKET_LENGTH){
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	68db      	ldr	r3, [r3, #12]
 80192ac:	2bf2      	cmp	r3, #242	; 0xf2
 80192ae:	d810      	bhi.n	80192d2 <TX_Update_Char+0x32>
	  ret = aci_gatt_update_char_value(aDataTransferContext.DataTransferSvcHdle,
 80192b0:	4b2d      	ldr	r3, [pc, #180]	; (8019368 <TX_Update_Char+0xc8>)
 80192b2:	8818      	ldrh	r0, [r3, #0]
 80192b4:	4b2c      	ldr	r3, [pc, #176]	; (8019368 <TX_Update_Char+0xc8>)
 80192b6:	8859      	ldrh	r1, [r3, #2]
			  aDataTransferContext.DataTransferTxCharHdle, 0, /* charValOffset */
			  pDataValue->Length, /* charValueLen */
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	68db      	ldr	r3, [r3, #12]
	  ret = aci_gatt_update_char_value(aDataTransferContext.DataTransferSvcHdle,
 80192bc:	b2da      	uxtb	r2, r3
			  (uint8_t*) pDataValue->pPayload);
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	681b      	ldr	r3, [r3, #0]
	  ret = aci_gatt_update_char_value(aDataTransferContext.DataTransferSvcHdle,
 80192c2:	9300      	str	r3, [sp, #0]
 80192c4:	4613      	mov	r3, r2
 80192c6:	2200      	movs	r2, #0
 80192c8:	f7f8 feac 	bl	8012024 <aci_gatt_update_char_value>
 80192cc:	4603      	mov	r3, r0
 80192ce:	73fb      	strb	r3, [r7, #15]
 80192d0:	e044      	b.n	801935c <TX_Update_Char+0xbc>
	}
	else if(pDataValue->Length <= DATA_NOTIFICATION_MAX_PACKET_SIZE){
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	68db      	ldr	r3, [r3, #12]
 80192d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192da:	d83f      	bhi.n	801935c <TX_Update_Char+0xbc>

	    uint16_t packetLen = pDataValue->Length;
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	68db      	ldr	r3, [r3, #12]
 80192e0:	81bb      	strh	r3, [r7, #12]
	    uint16_t offset = 0;
 80192e2:	2300      	movs	r3, #0
 80192e4:	817b      	strh	r3, [r7, #10]

	    while(packetLen > MAX_PACKET_LENGTH){
 80192e6:	e01c      	b.n	8019322 <TX_Update_Char+0x82>
	      aci_gatt_update_char_value_ext (0,
 80192e8:	4b1f      	ldr	r3, [pc, #124]	; (8019368 <TX_Update_Char+0xc8>)
 80192ea:	8818      	ldrh	r0, [r3, #0]
 80192ec:	4b1e      	ldr	r3, [pc, #120]	; (8019368 <TX_Update_Char+0xc8>)
 80192ee:	885c      	ldrh	r4, [r3, #2]
				       aDataTransferContext.DataTransferSvcHdle,
				       aDataTransferContext.DataTransferTxCharHdle,
					0x00, //dont notify
					pDataValue->Length,
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	68db      	ldr	r3, [r3, #12]
	      aci_gatt_update_char_value_ext (0,
 80192f4:	b29b      	uxth	r3, r3
					offset,
					MAX_PACKET_LENGTH,
					((uint8_t*) pDataValue->pPayload) + offset);
 80192f6:	687a      	ldr	r2, [r7, #4]
 80192f8:	6811      	ldr	r1, [r2, #0]
	      aci_gatt_update_char_value_ext (0,
 80192fa:	897a      	ldrh	r2, [r7, #10]
					((uint8_t*) pDataValue->pPayload) + offset);
 80192fc:	440a      	add	r2, r1
	      aci_gatt_update_char_value_ext (0,
 80192fe:	9203      	str	r2, [sp, #12]
 8019300:	22f3      	movs	r2, #243	; 0xf3
 8019302:	9202      	str	r2, [sp, #8]
 8019304:	897a      	ldrh	r2, [r7, #10]
 8019306:	9201      	str	r2, [sp, #4]
 8019308:	9300      	str	r3, [sp, #0]
 801930a:	2300      	movs	r3, #0
 801930c:	4622      	mov	r2, r4
 801930e:	4601      	mov	r1, r0
 8019310:	2000      	movs	r0, #0
 8019312:	f7f8 ff9f 	bl	8012254 <aci_gatt_update_char_value_ext>
	      offset += MAX_PACKET_LENGTH;
 8019316:	897b      	ldrh	r3, [r7, #10]
 8019318:	33f3      	adds	r3, #243	; 0xf3
 801931a:	817b      	strh	r3, [r7, #10]
	      packetLen -= MAX_PACKET_LENGTH;
 801931c:	89bb      	ldrh	r3, [r7, #12]
 801931e:	3bf3      	subs	r3, #243	; 0xf3
 8019320:	81bb      	strh	r3, [r7, #12]
	    while(packetLen > MAX_PACKET_LENGTH){
 8019322:	89bb      	ldrh	r3, [r7, #12]
 8019324:	2bf3      	cmp	r3, #243	; 0xf3
 8019326:	d8df      	bhi.n	80192e8 <TX_Update_Char+0x48>
	    }

	    ret = aci_gatt_update_char_value_ext (0,
 8019328:	4b0f      	ldr	r3, [pc, #60]	; (8019368 <TX_Update_Char+0xc8>)
 801932a:	881c      	ldrh	r4, [r3, #0]
 801932c:	4b0e      	ldr	r3, [pc, #56]	; (8019368 <TX_Update_Char+0xc8>)
 801932e:	885d      	ldrh	r5, [r3, #2]
	    					     aDataTransferContext.DataTransferSvcHdle,
	    					     aDataTransferContext.DataTransferTxCharHdle,
	    	0x01, //notify
		pDataValue->Length,
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	68db      	ldr	r3, [r3, #12]
	    ret = aci_gatt_update_char_value_ext (0,
 8019334:	b29b      	uxth	r3, r3
 8019336:	89ba      	ldrh	r2, [r7, #12]
 8019338:	b2d2      	uxtb	r2, r2
		offset,
		packetLen,
	    	((uint8_t*) pDataValue->pPayload) + offset);
 801933a:	6879      	ldr	r1, [r7, #4]
 801933c:	6808      	ldr	r0, [r1, #0]
	    ret = aci_gatt_update_char_value_ext (0,
 801933e:	8979      	ldrh	r1, [r7, #10]
	    	((uint8_t*) pDataValue->pPayload) + offset);
 8019340:	4401      	add	r1, r0
	    ret = aci_gatt_update_char_value_ext (0,
 8019342:	9103      	str	r1, [sp, #12]
 8019344:	9202      	str	r2, [sp, #8]
 8019346:	897a      	ldrh	r2, [r7, #10]
 8019348:	9201      	str	r2, [sp, #4]
 801934a:	9300      	str	r3, [sp, #0]
 801934c:	2301      	movs	r3, #1
 801934e:	462a      	mov	r2, r5
 8019350:	4621      	mov	r1, r4
 8019352:	2000      	movs	r0, #0
 8019354:	f7f8 ff7e 	bl	8012254 <aci_gatt_update_char_value_ext>
 8019358:	4603      	mov	r3, r0
 801935a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801935c:	7bfb      	ldrb	r3, [r7, #15]
}/* end TX_Update_Char() */
 801935e:	4618      	mov	r0, r3
 8019360:	3710      	adds	r7, #16
 8019362:	46bd      	mov	sp, r7
 8019364:	bdb0      	pop	{r4, r5, r7, pc}
 8019366:	bf00      	nop
 8019368:	20009874 	.word	0x20009874

0801936c <DTS_STM_Init>:
/**
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DTS_STM_Init(void) {
 801936c:	b580      	push	{r7, lr}
 801936e:	b088      	sub	sp, #32
 8019370:	af06      	add	r7, sp, #24
	tBleStatus hciCmdResult = BLE_STATUS_FAILED;
 8019372:	2391      	movs	r3, #145	; 0x91
 8019374:	71fb      	strb	r3, [r7, #7]

	/**
	 *	Register the event handler to the BLE controller
	 */
	SVCCTL_RegisterSvcHandler(DTS_Event_Handler);
 8019376:	481e      	ldr	r0, [pc, #120]	; (80193f0 <DTS_STM_Init+0x84>)
 8019378:	f7f9 fc3a 	bl	8012bf0 <SVCCTL_RegisterSvcHandler>
	/* DT service and characteristics */
//	hciCmdResult = aci_gatt_add_service(DT_UUID_LENGTH,
//				(Service_UUID_t*) DATA_TRANSFER_SERVICE_UUID,
//				PRIMARY_SERVICE, 1 + 3 * NUM_OF_CHARACTERISTICS,
//				&(aDataTransferContext.DataTransferSvcHdle));
	hciCmdResult = aci_gatt_add_service(DT_UUID_LENGTH,
 801937c:	4b1d      	ldr	r3, [pc, #116]	; (80193f4 <DTS_STM_Init+0x88>)
 801937e:	9300      	str	r3, [sp, #0]
 8019380:	2313      	movs	r3, #19
 8019382:	2201      	movs	r2, #1
 8019384:	491c      	ldr	r1, [pc, #112]	; (80193f8 <DTS_STM_Init+0x8c>)
 8019386:	2001      	movs	r0, #1
 8019388:	f7f8 fcb3 	bl	8011cf2 <aci_gatt_add_service>
 801938c:	4603      	mov	r3, r0
 801938e:	71fb      	strb	r3, [r7, #7]
	}

	/**
	 *  Add Data Transfer TX Characteristic (characteristic that is used to send data)
	 */
	hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 8019390:	4b18      	ldr	r3, [pc, #96]	; (80193f4 <DTS_STM_Init+0x88>)
 8019392:	8818      	ldrh	r0, [r3, #0]
 8019394:	4b19      	ldr	r3, [pc, #100]	; (80193fc <DTS_STM_Init+0x90>)
 8019396:	9305      	str	r3, [sp, #20]
 8019398:	2301      	movs	r3, #1
 801939a:	9304      	str	r3, [sp, #16]
 801939c:	230a      	movs	r3, #10
 801939e:	9303      	str	r3, [sp, #12]
 80193a0:	2301      	movs	r3, #1
 80193a2:	9302      	str	r3, [sp, #8]
 80193a4:	2300      	movs	r3, #0
 80193a6:	9301      	str	r3, [sp, #4]
 80193a8:	2310      	movs	r3, #16
 80193aa:	9300      	str	r3, [sp, #0]
 80193ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80193b0:	4a13      	ldr	r2, [pc, #76]	; (8019400 <DTS_STM_Init+0x94>)
 80193b2:	2101      	movs	r1, #1
 80193b4:	f7f8 fd4c 	bl	8011e50 <aci_gatt_add_char>
 80193b8:	4603      	mov	r3, r0
 80193ba:	71fb      	strb	r3, [r7, #7]
	}

	/**
	 *  Add Data Transfer RX Characteristic (not intended to be used in the end)
	 */
	hciCmdResult = aci_gatt_add_char(aDataTransferContext.DataTransferSvcHdle,
 80193bc:	4b0d      	ldr	r3, [pc, #52]	; (80193f4 <DTS_STM_Init+0x88>)
 80193be:	8818      	ldrh	r0, [r3, #0]
 80193c0:	4b10      	ldr	r3, [pc, #64]	; (8019404 <DTS_STM_Init+0x98>)
 80193c2:	9305      	str	r3, [sp, #20]
 80193c4:	2301      	movs	r3, #1
 80193c6:	9304      	str	r3, [sp, #16]
 80193c8:	230a      	movs	r3, #10
 80193ca:	9303      	str	r3, [sp, #12]
 80193cc:	2301      	movs	r3, #1
 80193ce:	9302      	str	r3, [sp, #8]
 80193d0:	2300      	movs	r3, #0
 80193d2:	9301      	str	r3, [sp, #4]
 80193d4:	2304      	movs	r3, #4
 80193d6:	9300      	str	r3, [sp, #0]
 80193d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80193dc:	4a0a      	ldr	r2, [pc, #40]	; (8019408 <DTS_STM_Init+0x9c>)
 80193de:	2101      	movs	r1, #1
 80193e0:	f7f8 fd36 	bl	8011e50 <aci_gatt_add_char>
 80193e4:	4603      	mov	r3, r0
 80193e6:	71fb      	strb	r3, [r7, #7]
//#ifdef NUCLEO_LED_ACTIVE
//      BSP_LED_On(LED_RED);
//  #endif
//	}

	return;
 80193e8:	bf00      	nop
}
 80193ea:	3708      	adds	r7, #8
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	08019055 	.word	0x08019055
 80193f4:	20009874 	.word	0x20009874
 80193f8:	0801ab4c 	.word	0x0801ab4c
 80193fc:	20009876 	.word	0x20009876
 8019400:	20000094 	.word	0x20000094
 8019404:	20009878 	.word	0x20009878
 8019408:	0801ab48 	.word	0x0801ab48

0801940c <DTS_STM_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus DTS_STM_UpdateChar(uint16_t UUID, uint8_t *pPayload) {
 801940c:	b580      	push	{r7, lr}
 801940e:	b084      	sub	sp, #16
 8019410:	af00      	add	r7, sp, #0
 8019412:	4603      	mov	r3, r0
 8019414:	6039      	str	r1, [r7, #0]
 8019416:	80fb      	strh	r3, [r7, #6]
	tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8019418:	2392      	movs	r3, #146	; 0x92
 801941a:	73fb      	strb	r3, [r7, #15]
	switch (UUID) {
 801941c:	88fb      	ldrh	r3, [r7, #6]
 801941e:	f64f 6281 	movw	r2, #65153	; 0xfe81
 8019422:	4293      	cmp	r3, r2
 8019424:	d105      	bne.n	8019432 <DTS_STM_UpdateChar+0x26>
	case DATA_TRANSFER_TX_CHAR_UUID:
		result = TX_Update_Char((DTS_STM_Payload_t*) pPayload);
 8019426:	6838      	ldr	r0, [r7, #0]
 8019428:	f7ff ff3a 	bl	80192a0 <TX_Update_Char>
 801942c:	4603      	mov	r3, r0
 801942e:	73fb      	strb	r3, [r7, #15]
		break;
 8019430:	e000      	b.n	8019434 <DTS_STM_UpdateChar+0x28>

	default:
		break;
 8019432:	bf00      	nop
	}
	return result;
 8019434:	7bfb      	ldrb	r3, [r7, #15]
}/* end DTS_STM_UpdateChar() */
 8019436:	4618      	mov	r0, r3
 8019438:	3710      	adds	r7, #16
 801943a:	46bd      	mov	sp, r7
 801943c:	bd80      	pop	{r7, pc}

0801943e <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 801943e:	b480      	push	{r7}
 8019440:	b083      	sub	sp, #12
 8019442:	af00      	add	r7, sp, #0
 8019444:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	781b      	ldrb	r3, [r3, #0]
 801944a:	2b02      	cmp	r3, #2
 801944c:	d006      	beq.n	801945c <HRS_Notification+0x1e>
 801944e:	2b02      	cmp	r3, #2
 8019450:	dc06      	bgt.n	8019460 <HRS_Notification+0x22>
 8019452:	2b00      	cmp	r3, #0
 8019454:	d006      	beq.n	8019464 <HRS_Notification+0x26>
 8019456:	2b01      	cmp	r3, #1
 8019458:	d006      	beq.n	8019468 <HRS_Notification+0x2a>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 801945a:	e001      	b.n	8019460 <HRS_Notification+0x22>
      break;
 801945c:	bf00      	nop
 801945e:	e004      	b.n	801946a <HRS_Notification+0x2c>
      break;
 8019460:	bf00      	nop
 8019462:	e002      	b.n	801946a <HRS_Notification+0x2c>
      break;
 8019464:	bf00      	nop
 8019466:	e000      	b.n	801946a <HRS_Notification+0x2c>
      break;
 8019468:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 801946a:	bf00      	nop
}
 801946c:	370c      	adds	r7, #12
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	4770      	bx	lr
	...

08019478 <LL_PWR_EnableBootC2>:
{
 8019478:	b480      	push	{r7}
 801947a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801947c:	4b05      	ldr	r3, [pc, #20]	; (8019494 <LL_PWR_EnableBootC2+0x1c>)
 801947e:	68db      	ldr	r3, [r3, #12]
 8019480:	4a04      	ldr	r2, [pc, #16]	; (8019494 <LL_PWR_EnableBootC2+0x1c>)
 8019482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019486:	60d3      	str	r3, [r2, #12]
}
 8019488:	bf00      	nop
 801948a:	46bd      	mov	sp, r7
 801948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop
 8019494:	58000400 	.word	0x58000400

08019498 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8019498:	b480      	push	{r7}
 801949a:	b083      	sub	sp, #12
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80194a0:	4b06      	ldr	r3, [pc, #24]	; (80194bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80194a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80194a6:	4905      	ldr	r1, [pc, #20]	; (80194bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	4313      	orrs	r3, r2
 80194ac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80194b0:	bf00      	nop
 80194b2:	370c      	adds	r7, #12
 80194b4:	46bd      	mov	sp, r7
 80194b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ba:	4770      	bx	lr
 80194bc:	58000800 	.word	0x58000800

080194c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80194c0:	b480      	push	{r7}
 80194c2:	b083      	sub	sp, #12
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80194c8:	4b05      	ldr	r3, [pc, #20]	; (80194e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80194ca:	6a1a      	ldr	r2, [r3, #32]
 80194cc:	4904      	ldr	r1, [pc, #16]	; (80194e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	4313      	orrs	r3, r2
 80194d2:	620b      	str	r3, [r1, #32]
}
 80194d4:	bf00      	nop
 80194d6:	370c      	adds	r7, #12
 80194d8:	46bd      	mov	sp, r7
 80194da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194de:	4770      	bx	lr
 80194e0:	58000800 	.word	0x58000800

080194e4 <LL_AHB3_GRP1_EnableClock>:
{
 80194e4:	b480      	push	{r7}
 80194e6:	b085      	sub	sp, #20
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80194ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80194f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80194f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	4313      	orrs	r3, r2
 80194fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80194fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	4013      	ands	r3, r2
 8019506:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019508:	68fb      	ldr	r3, [r7, #12]
}
 801950a:	bf00      	nop
 801950c:	3714      	adds	r7, #20
 801950e:	46bd      	mov	sp, r7
 8019510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019514:	4770      	bx	lr

08019516 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8019516:	b480      	push	{r7}
 8019518:	b085      	sub	sp, #20
 801951a:	af00      	add	r7, sp, #0
 801951c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801951e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019522:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8019526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	4313      	orrs	r3, r2
 801952e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8019532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019536:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	4013      	ands	r3, r2
 801953e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019540:	68fb      	ldr	r3, [r7, #12]
}
 8019542:	bf00      	nop
 8019544:	3714      	adds	r7, #20
 8019546:	46bd      	mov	sp, r7
 8019548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954c:	4770      	bx	lr

0801954e <LL_C1_IPCC_EnableIT_TXF>:
{
 801954e:	b480      	push	{r7}
 8019550:	b083      	sub	sp, #12
 8019552:	af00      	add	r7, sp, #0
 8019554:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	601a      	str	r2, [r3, #0]
}
 8019562:	bf00      	nop
 8019564:	370c      	adds	r7, #12
 8019566:	46bd      	mov	sp, r7
 8019568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956c:	4770      	bx	lr

0801956e <LL_C1_IPCC_EnableIT_RXO>:
{
 801956e:	b480      	push	{r7}
 8019570:	b083      	sub	sp, #12
 8019572:	af00      	add	r7, sp, #0
 8019574:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	f043 0201 	orr.w	r2, r3, #1
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	601a      	str	r2, [r3, #0]
}
 8019582:	bf00      	nop
 8019584:	370c      	adds	r7, #12
 8019586:	46bd      	mov	sp, r7
 8019588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958c:	4770      	bx	lr

0801958e <LL_C1_IPCC_EnableTransmitChannel>:
{
 801958e:	b480      	push	{r7}
 8019590:	b083      	sub	sp, #12
 8019592:	af00      	add	r7, sp, #0
 8019594:	6078      	str	r0, [r7, #4]
 8019596:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	685a      	ldr	r2, [r3, #4]
 801959c:	683b      	ldr	r3, [r7, #0]
 801959e:	041b      	lsls	r3, r3, #16
 80195a0:	43db      	mvns	r3, r3
 80195a2:	401a      	ands	r2, r3
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	605a      	str	r2, [r3, #4]
}
 80195a8:	bf00      	nop
 80195aa:	370c      	adds	r7, #12
 80195ac:	46bd      	mov	sp, r7
 80195ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b2:	4770      	bx	lr

080195b4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80195b4:	b480      	push	{r7}
 80195b6:	b083      	sub	sp, #12
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	685a      	ldr	r2, [r3, #4]
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	041b      	lsls	r3, r3, #16
 80195c6:	431a      	orrs	r2, r3
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	605a      	str	r2, [r3, #4]
}
 80195cc:	bf00      	nop
 80195ce:	370c      	adds	r7, #12
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr

080195d8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80195d8:	b480      	push	{r7}
 80195da:	b083      	sub	sp, #12
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
 80195e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	685a      	ldr	r2, [r3, #4]
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	43db      	mvns	r3, r3
 80195ea:	401a      	ands	r2, r3
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	605a      	str	r2, [r3, #4]
}
 80195f0:	bf00      	nop
 80195f2:	370c      	adds	r7, #12
 80195f4:	46bd      	mov	sp, r7
 80195f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195fa:	4770      	bx	lr

080195fc <LL_C1_IPCC_ClearFlag_CHx>:
{
 80195fc:	b480      	push	{r7}
 80195fe:	b083      	sub	sp, #12
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
 8019604:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	683a      	ldr	r2, [r7, #0]
 801960a:	609a      	str	r2, [r3, #8]
}
 801960c:	bf00      	nop
 801960e:	370c      	adds	r7, #12
 8019610:	46bd      	mov	sp, r7
 8019612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019616:	4770      	bx	lr

08019618 <LL_C1_IPCC_SetFlag_CHx>:
{
 8019618:	b480      	push	{r7}
 801961a:	b083      	sub	sp, #12
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
 8019620:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	041a      	lsls	r2, r3, #16
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	609a      	str	r2, [r3, #8]
}
 801962a:	bf00      	nop
 801962c:	370c      	adds	r7, #12
 801962e:	46bd      	mov	sp, r7
 8019630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019634:	4770      	bx	lr

08019636 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8019636:	b480      	push	{r7}
 8019638:	b083      	sub	sp, #12
 801963a:	af00      	add	r7, sp, #0
 801963c:	6078      	str	r0, [r7, #4]
 801963e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	68da      	ldr	r2, [r3, #12]
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	4013      	ands	r3, r2
 8019648:	683a      	ldr	r2, [r7, #0]
 801964a:	429a      	cmp	r2, r3
 801964c:	d101      	bne.n	8019652 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801964e:	2301      	movs	r3, #1
 8019650:	e000      	b.n	8019654 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8019652:	2300      	movs	r3, #0
}
 8019654:	4618      	mov	r0, r3
 8019656:	370c      	adds	r7, #12
 8019658:	46bd      	mov	sp, r7
 801965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965e:	4770      	bx	lr

08019660 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8019660:	b480      	push	{r7}
 8019662:	b083      	sub	sp, #12
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	69da      	ldr	r2, [r3, #28]
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	4013      	ands	r3, r2
 8019672:	683a      	ldr	r2, [r7, #0]
 8019674:	429a      	cmp	r2, r3
 8019676:	d101      	bne.n	801967c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8019678:	2301      	movs	r3, #1
 801967a:	e000      	b.n	801967e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801967c:	2300      	movs	r3, #0
}
 801967e:	4618      	mov	r0, r3
 8019680:	370c      	adds	r7, #12
 8019682:	46bd      	mov	sp, r7
 8019684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019688:	4770      	bx	lr
	...

0801968c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801968c:	b580      	push	{r7, lr}
 801968e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8019690:	2102      	movs	r1, #2
 8019692:	4819      	ldr	r0, [pc, #100]	; (80196f8 <HW_IPCC_Rx_Handler+0x6c>)
 8019694:	f7ff ffe4 	bl	8019660 <LL_C2_IPCC_IsActiveFlag_CHx>
 8019698:	4603      	mov	r3, r0
 801969a:	2b00      	cmp	r3, #0
 801969c:	d009      	beq.n	80196b2 <HW_IPCC_Rx_Handler+0x26>
 801969e:	4b16      	ldr	r3, [pc, #88]	; (80196f8 <HW_IPCC_Rx_Handler+0x6c>)
 80196a0:	685b      	ldr	r3, [r3, #4]
 80196a2:	43db      	mvns	r3, r3
 80196a4:	f003 0302 	and.w	r3, r3, #2
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d002      	beq.n	80196b2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80196ac:	f000 f8da 	bl	8019864 <HW_IPCC_SYS_EvtHandler>
 80196b0:	e01f      	b.n	80196f2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80196b2:	2101      	movs	r1, #1
 80196b4:	4810      	ldr	r0, [pc, #64]	; (80196f8 <HW_IPCC_Rx_Handler+0x6c>)
 80196b6:	f7ff ffd3 	bl	8019660 <LL_C2_IPCC_IsActiveFlag_CHx>
 80196ba:	4603      	mov	r3, r0
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d008      	beq.n	80196d2 <HW_IPCC_Rx_Handler+0x46>
 80196c0:	4b0d      	ldr	r3, [pc, #52]	; (80196f8 <HW_IPCC_Rx_Handler+0x6c>)
 80196c2:	685b      	ldr	r3, [r3, #4]
 80196c4:	f003 0301 	and.w	r3, r3, #1
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d102      	bne.n	80196d2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80196cc:	f000 f88e 	bl	80197ec <HW_IPCC_BLE_EvtHandler>
 80196d0:	e00f      	b.n	80196f2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80196d2:	2108      	movs	r1, #8
 80196d4:	4808      	ldr	r0, [pc, #32]	; (80196f8 <HW_IPCC_Rx_Handler+0x6c>)
 80196d6:	f7ff ffc3 	bl	8019660 <LL_C2_IPCC_IsActiveFlag_CHx>
 80196da:	4603      	mov	r3, r0
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d009      	beq.n	80196f4 <HW_IPCC_Rx_Handler+0x68>
 80196e0:	4b05      	ldr	r3, [pc, #20]	; (80196f8 <HW_IPCC_Rx_Handler+0x6c>)
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	43db      	mvns	r3, r3
 80196e6:	f003 0308 	and.w	r3, r3, #8
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d002      	beq.n	80196f4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80196ee:	f000 f905 	bl	80198fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80196f2:	bf00      	nop
 80196f4:	bf00      	nop
}
 80196f6:	bd80      	pop	{r7, pc}
 80196f8:	58000c00 	.word	0x58000c00

080196fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8019700:	2102      	movs	r1, #2
 8019702:	481a      	ldr	r0, [pc, #104]	; (801976c <HW_IPCC_Tx_Handler+0x70>)
 8019704:	f7ff ff97 	bl	8019636 <LL_C1_IPCC_IsActiveFlag_CHx>
 8019708:	4603      	mov	r3, r0
 801970a:	2b00      	cmp	r3, #0
 801970c:	d109      	bne.n	8019722 <HW_IPCC_Tx_Handler+0x26>
 801970e:	4b17      	ldr	r3, [pc, #92]	; (801976c <HW_IPCC_Tx_Handler+0x70>)
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	43db      	mvns	r3, r3
 8019714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019718:	2b00      	cmp	r3, #0
 801971a:	d002      	beq.n	8019722 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801971c:	f000 f896 	bl	801984c <HW_IPCC_SYS_CmdEvtHandler>
 8019720:	e020      	b.n	8019764 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8019722:	2108      	movs	r1, #8
 8019724:	4811      	ldr	r0, [pc, #68]	; (801976c <HW_IPCC_Tx_Handler+0x70>)
 8019726:	f7ff ff86 	bl	8019636 <LL_C1_IPCC_IsActiveFlag_CHx>
 801972a:	4603      	mov	r3, r0
 801972c:	2b00      	cmp	r3, #0
 801972e:	d109      	bne.n	8019744 <HW_IPCC_Tx_Handler+0x48>
 8019730:	4b0e      	ldr	r3, [pc, #56]	; (801976c <HW_IPCC_Tx_Handler+0x70>)
 8019732:	685b      	ldr	r3, [r3, #4]
 8019734:	43db      	mvns	r3, r3
 8019736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801973a:	2b00      	cmp	r3, #0
 801973c:	d002      	beq.n	8019744 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 801973e:	f000 f8bf 	bl	80198c0 <HW_IPCC_MM_FreeBufHandler>
 8019742:	e00f      	b.n	8019764 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8019744:	2120      	movs	r1, #32
 8019746:	4809      	ldr	r0, [pc, #36]	; (801976c <HW_IPCC_Tx_Handler+0x70>)
 8019748:	f7ff ff75 	bl	8019636 <LL_C1_IPCC_IsActiveFlag_CHx>
 801974c:	4603      	mov	r3, r0
 801974e:	2b00      	cmp	r3, #0
 8019750:	d109      	bne.n	8019766 <HW_IPCC_Tx_Handler+0x6a>
 8019752:	4b06      	ldr	r3, [pc, #24]	; (801976c <HW_IPCC_Tx_Handler+0x70>)
 8019754:	685b      	ldr	r3, [r3, #4]
 8019756:	43db      	mvns	r3, r3
 8019758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801975c:	2b00      	cmp	r3, #0
 801975e:	d002      	beq.n	8019766 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8019760:	f000 f850 	bl	8019804 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8019764:	bf00      	nop
 8019766:	bf00      	nop
}
 8019768:	bd80      	pop	{r7, pc}
 801976a:	bf00      	nop
 801976c:	58000c00 	.word	0x58000c00

08019770 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8019770:	b580      	push	{r7, lr}
 8019772:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8019774:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8019778:	f7ff fecd 	bl	8019516 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801977c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019780:	f7ff fe8a 	bl	8019498 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8019784:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019788:	f7ff fe9a 	bl	80194c0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801978c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801978e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8019790:	f7ff fe72 	bl	8019478 <LL_PWR_EnableBootC2>

  return;
 8019794:	bf00      	nop
}
 8019796:	bd80      	pop	{r7, pc}

08019798 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8019798:	b580      	push	{r7, lr}
 801979a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801979c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80197a0:	f7ff fea0 	bl	80194e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80197a4:	4806      	ldr	r0, [pc, #24]	; (80197c0 <HW_IPCC_Init+0x28>)
 80197a6:	f7ff fee2 	bl	801956e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80197aa:	4805      	ldr	r0, [pc, #20]	; (80197c0 <HW_IPCC_Init+0x28>)
 80197ac:	f7ff fecf 	bl	801954e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80197b0:	202c      	movs	r0, #44	; 0x2c
 80197b2:	f7eb fd25 	bl	8005200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80197b6:	202d      	movs	r0, #45	; 0x2d
 80197b8:	f7eb fd22 	bl	8005200 <HAL_NVIC_EnableIRQ>

  return;
 80197bc:	bf00      	nop
}
 80197be:	bd80      	pop	{r7, pc}
 80197c0:	58000c00 	.word	0x58000c00

080197c4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80197c8:	2101      	movs	r1, #1
 80197ca:	4802      	ldr	r0, [pc, #8]	; (80197d4 <HW_IPCC_BLE_Init+0x10>)
 80197cc:	f7ff ff04 	bl	80195d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80197d0:	bf00      	nop
}
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	58000c00 	.word	0x58000c00

080197d8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80197dc:	2101      	movs	r1, #1
 80197de:	4802      	ldr	r0, [pc, #8]	; (80197e8 <HW_IPCC_BLE_SendCmd+0x10>)
 80197e0:	f7ff ff1a 	bl	8019618 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80197e4:	bf00      	nop
}
 80197e6:	bd80      	pop	{r7, pc}
 80197e8:	58000c00 	.word	0x58000c00

080197ec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80197f0:	f7f9 feb8 	bl	8013564 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80197f4:	2101      	movs	r1, #1
 80197f6:	4802      	ldr	r0, [pc, #8]	; (8019800 <HW_IPCC_BLE_EvtHandler+0x14>)
 80197f8:	f7ff ff00 	bl	80195fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80197fc:	bf00      	nop
}
 80197fe:	bd80      	pop	{r7, pc}
 8019800:	58000c00 	.word	0x58000c00

08019804 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8019804:	b580      	push	{r7, lr}
 8019806:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8019808:	2120      	movs	r1, #32
 801980a:	4803      	ldr	r0, [pc, #12]	; (8019818 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801980c:	f7ff fed2 	bl	80195b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8019810:	f7f9 fed8 	bl	80135c4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8019814:	bf00      	nop
}
 8019816:	bd80      	pop	{r7, pc}
 8019818:	58000c00 	.word	0x58000c00

0801981c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801981c:	b580      	push	{r7, lr}
 801981e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8019820:	2102      	movs	r1, #2
 8019822:	4802      	ldr	r0, [pc, #8]	; (801982c <HW_IPCC_SYS_Init+0x10>)
 8019824:	f7ff fed8 	bl	80195d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8019828:	bf00      	nop
}
 801982a:	bd80      	pop	{r7, pc}
 801982c:	58000c00 	.word	0x58000c00

08019830 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8019830:	b580      	push	{r7, lr}
 8019832:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019834:	2102      	movs	r1, #2
 8019836:	4804      	ldr	r0, [pc, #16]	; (8019848 <HW_IPCC_SYS_SendCmd+0x18>)
 8019838:	f7ff feee 	bl	8019618 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801983c:	2102      	movs	r1, #2
 801983e:	4802      	ldr	r0, [pc, #8]	; (8019848 <HW_IPCC_SYS_SendCmd+0x18>)
 8019840:	f7ff fea5 	bl	801958e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8019844:	bf00      	nop
}
 8019846:	bd80      	pop	{r7, pc}
 8019848:	58000c00 	.word	0x58000c00

0801984c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801984c:	b580      	push	{r7, lr}
 801984e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8019850:	2102      	movs	r1, #2
 8019852:	4803      	ldr	r0, [pc, #12]	; (8019860 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8019854:	f7ff feae 	bl	80195b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8019858:	f7f9 ff04 	bl	8013664 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801985c:	bf00      	nop
}
 801985e:	bd80      	pop	{r7, pc}
 8019860:	58000c00 	.word	0x58000c00

08019864 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8019864:	b580      	push	{r7, lr}
 8019866:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8019868:	f7f9 ff12 	bl	8013690 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801986c:	2102      	movs	r1, #2
 801986e:	4802      	ldr	r0, [pc, #8]	; (8019878 <HW_IPCC_SYS_EvtHandler+0x14>)
 8019870:	f7ff fec4 	bl	80195fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8019874:	bf00      	nop
}
 8019876:	bd80      	pop	{r7, pc}
 8019878:	58000c00 	.word	0x58000c00

0801987c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8019884:	2108      	movs	r1, #8
 8019886:	480c      	ldr	r0, [pc, #48]	; (80198b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8019888:	f7ff fed5 	bl	8019636 <LL_C1_IPCC_IsActiveFlag_CHx>
 801988c:	4603      	mov	r3, r0
 801988e:	2b00      	cmp	r3, #0
 8019890:	d007      	beq.n	80198a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8019892:	4a0a      	ldr	r2, [pc, #40]	; (80198bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8019898:	2108      	movs	r1, #8
 801989a:	4807      	ldr	r0, [pc, #28]	; (80198b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801989c:	f7ff fe77 	bl	801958e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80198a0:	e006      	b.n	80198b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80198a6:	2108      	movs	r1, #8
 80198a8:	4803      	ldr	r0, [pc, #12]	; (80198b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80198aa:	f7ff feb5 	bl	8019618 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80198ae:	bf00      	nop
}
 80198b0:	3708      	adds	r7, #8
 80198b2:	46bd      	mov	sp, r7
 80198b4:	bd80      	pop	{r7, pc}
 80198b6:	bf00      	nop
 80198b8:	58000c00 	.word	0x58000c00
 80198bc:	20009884 	.word	0x20009884

080198c0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80198c4:	2108      	movs	r1, #8
 80198c6:	4806      	ldr	r0, [pc, #24]	; (80198e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80198c8:	f7ff fe74 	bl	80195b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80198cc:	4b05      	ldr	r3, [pc, #20]	; (80198e4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80198d2:	2108      	movs	r1, #8
 80198d4:	4802      	ldr	r0, [pc, #8]	; (80198e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80198d6:	f7ff fe9f 	bl	8019618 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80198da:	bf00      	nop
}
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop
 80198e0:	58000c00 	.word	0x58000c00
 80198e4:	20009884 	.word	0x20009884

080198e8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80198ec:	2108      	movs	r1, #8
 80198ee:	4802      	ldr	r0, [pc, #8]	; (80198f8 <HW_IPCC_TRACES_Init+0x10>)
 80198f0:	f7ff fe72 	bl	80195d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80198f4:	bf00      	nop
}
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	58000c00 	.word	0x58000c00

080198fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8019900:	f7f9 ff6e 	bl	80137e0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8019904:	2108      	movs	r1, #8
 8019906:	4802      	ldr	r0, [pc, #8]	; (8019910 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8019908:	f7ff fe78 	bl	80195fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801990c:	bf00      	nop
}
 801990e:	bd80      	pop	{r7, pc}
 8019910:	58000c00 	.word	0x58000c00

08019914 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 8019918:	2200      	movs	r2, #0
 801991a:	4912      	ldr	r1, [pc, #72]	; (8019964 <MX_USB_Device_Init+0x50>)
 801991c:	4812      	ldr	r0, [pc, #72]	; (8019968 <MX_USB_Device_Init+0x54>)
 801991e:	f7f6 fd77 	bl	8010410 <USBD_Init>
 8019922:	4603      	mov	r3, r0
 8019924:	2b00      	cmp	r3, #0
 8019926:	d001      	beq.n	801992c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8019928:	f7e9 f9c6 	bl	8002cb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 801992c:	490f      	ldr	r1, [pc, #60]	; (801996c <MX_USB_Device_Init+0x58>)
 801992e:	480e      	ldr	r0, [pc, #56]	; (8019968 <MX_USB_Device_Init+0x54>)
 8019930:	f7f6 fd9e 	bl	8010470 <USBD_RegisterClass>
 8019934:	4603      	mov	r3, r0
 8019936:	2b00      	cmp	r3, #0
 8019938:	d001      	beq.n	801993e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801993a:	f7e9 f9bd 	bl	8002cb8 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 801993e:	490c      	ldr	r1, [pc, #48]	; (8019970 <MX_USB_Device_Init+0x5c>)
 8019940:	4809      	ldr	r0, [pc, #36]	; (8019968 <MX_USB_Device_Init+0x54>)
 8019942:	f7f6 f9e3 	bl	800fd0c <USBD_DFU_RegisterMedia>
 8019946:	4603      	mov	r3, r0
 8019948:	2b00      	cmp	r3, #0
 801994a:	d001      	beq.n	8019950 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801994c:	f7e9 f9b4 	bl	8002cb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8019950:	4805      	ldr	r0, [pc, #20]	; (8019968 <MX_USB_Device_Init+0x54>)
 8019952:	f7f6 fdb4 	bl	80104be <USBD_Start>
 8019956:	4603      	mov	r3, r0
 8019958:	2b00      	cmp	r3, #0
 801995a:	d001      	beq.n	8019960 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801995c:	f7e9 f9ac 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8019960:	bf00      	nop
 8019962:	bd80      	pop	{r7, pc}
 8019964:	20000098 	.word	0x20000098
 8019968:	2000a270 	.word	0x2000a270
 801996c:	2000001c 	.word	0x2000001c
 8019970:	200000ec 	.word	0x200000ec

08019974 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019974:	b480      	push	{r7}
 8019976:	b083      	sub	sp, #12
 8019978:	af00      	add	r7, sp, #0
 801997a:	4603      	mov	r3, r0
 801997c:	6039      	str	r1, [r7, #0]
 801997e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	2212      	movs	r2, #18
 8019984:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8019986:	4b03      	ldr	r3, [pc, #12]	; (8019994 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8019988:	4618      	mov	r0, r3
 801998a:	370c      	adds	r7, #12
 801998c:	46bd      	mov	sp, r7
 801998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019992:	4770      	bx	lr
 8019994:	200000b8 	.word	0x200000b8

08019998 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019998:	b480      	push	{r7}
 801999a:	b083      	sub	sp, #12
 801999c:	af00      	add	r7, sp, #0
 801999e:	4603      	mov	r3, r0
 80199a0:	6039      	str	r1, [r7, #0]
 80199a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80199a4:	683b      	ldr	r3, [r7, #0]
 80199a6:	2204      	movs	r2, #4
 80199a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80199aa:	4b03      	ldr	r3, [pc, #12]	; (80199b8 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 80199ac:	4618      	mov	r0, r3
 80199ae:	370c      	adds	r7, #12
 80199b0:	46bd      	mov	sp, r7
 80199b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b6:	4770      	bx	lr
 80199b8:	200000cc 	.word	0x200000cc

080199bc <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b082      	sub	sp, #8
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	4603      	mov	r3, r0
 80199c4:	6039      	str	r1, [r7, #0]
 80199c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80199c8:	79fb      	ldrb	r3, [r7, #7]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d105      	bne.n	80199da <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80199ce:	683a      	ldr	r2, [r7, #0]
 80199d0:	4907      	ldr	r1, [pc, #28]	; (80199f0 <USBD_DFU_ProductStrDescriptor+0x34>)
 80199d2:	4808      	ldr	r0, [pc, #32]	; (80199f4 <USBD_DFU_ProductStrDescriptor+0x38>)
 80199d4:	f7f7 fd89 	bl	80114ea <USBD_GetString>
 80199d8:	e004      	b.n	80199e4 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80199da:	683a      	ldr	r2, [r7, #0]
 80199dc:	4904      	ldr	r1, [pc, #16]	; (80199f0 <USBD_DFU_ProductStrDescriptor+0x34>)
 80199de:	4805      	ldr	r0, [pc, #20]	; (80199f4 <USBD_DFU_ProductStrDescriptor+0x38>)
 80199e0:	f7f7 fd83 	bl	80114ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80199e4:	4b02      	ldr	r3, [pc, #8]	; (80199f0 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3708      	adds	r7, #8
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
 80199ee:	bf00      	nop
 80199f0:	2000a540 	.word	0x2000a540
 80199f4:	0801a608 	.word	0x0801a608

080199f8 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b082      	sub	sp, #8
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	4603      	mov	r3, r0
 8019a00:	6039      	str	r1, [r7, #0]
 8019a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019a04:	683a      	ldr	r2, [r7, #0]
 8019a06:	4904      	ldr	r1, [pc, #16]	; (8019a18 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 8019a08:	4804      	ldr	r0, [pc, #16]	; (8019a1c <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 8019a0a:	f7f7 fd6e 	bl	80114ea <USBD_GetString>
  return USBD_StrDesc;
 8019a0e:	4b02      	ldr	r3, [pc, #8]	; (8019a18 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	2000a540 	.word	0x2000a540
 8019a1c:	0801a628 	.word	0x0801a628

08019a20 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b082      	sub	sp, #8
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	4603      	mov	r3, r0
 8019a28:	6039      	str	r1, [r7, #0]
 8019a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	221a      	movs	r2, #26
 8019a30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019a32:	f000 f843 	bl	8019abc <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8019a36:	4b02      	ldr	r3, [pc, #8]	; (8019a40 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	3708      	adds	r7, #8
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	200000d0 	.word	0x200000d0

08019a44 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b082      	sub	sp, #8
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	6039      	str	r1, [r7, #0]
 8019a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019a50:	79fb      	ldrb	r3, [r7, #7]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d105      	bne.n	8019a62 <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019a56:	683a      	ldr	r2, [r7, #0]
 8019a58:	4907      	ldr	r1, [pc, #28]	; (8019a78 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8019a5a:	4808      	ldr	r0, [pc, #32]	; (8019a7c <USBD_DFU_ConfigStrDescriptor+0x38>)
 8019a5c:	f7f7 fd45 	bl	80114ea <USBD_GetString>
 8019a60:	e004      	b.n	8019a6c <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019a62:	683a      	ldr	r2, [r7, #0]
 8019a64:	4904      	ldr	r1, [pc, #16]	; (8019a78 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8019a66:	4805      	ldr	r0, [pc, #20]	; (8019a7c <USBD_DFU_ConfigStrDescriptor+0x38>)
 8019a68:	f7f7 fd3f 	bl	80114ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a6c:	4b02      	ldr	r3, [pc, #8]	; (8019a78 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	3708      	adds	r7, #8
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	2000a540 	.word	0x2000a540
 8019a7c:	0801a63c 	.word	0x0801a63c

08019a80 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	4603      	mov	r3, r0
 8019a88:	6039      	str	r1, [r7, #0]
 8019a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a8c:	79fb      	ldrb	r3, [r7, #7]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d105      	bne.n	8019a9e <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019a92:	683a      	ldr	r2, [r7, #0]
 8019a94:	4907      	ldr	r1, [pc, #28]	; (8019ab4 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8019a96:	4808      	ldr	r0, [pc, #32]	; (8019ab8 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8019a98:	f7f7 fd27 	bl	80114ea <USBD_GetString>
 8019a9c:	e004      	b.n	8019aa8 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8019a9e:	683a      	ldr	r2, [r7, #0]
 8019aa0:	4904      	ldr	r1, [pc, #16]	; (8019ab4 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8019aa2:	4805      	ldr	r0, [pc, #20]	; (8019ab8 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8019aa4:	f7f7 fd21 	bl	80114ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8019aa8:	4b02      	ldr	r3, [pc, #8]	; (8019ab4 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 8019aaa:	4618      	mov	r0, r3
 8019aac:	3708      	adds	r7, #8
 8019aae:	46bd      	mov	sp, r7
 8019ab0:	bd80      	pop	{r7, pc}
 8019ab2:	bf00      	nop
 8019ab4:	2000a540 	.word	0x2000a540
 8019ab8:	0801a648 	.word	0x0801a648

08019abc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019ac2:	4b0f      	ldr	r3, [pc, #60]	; (8019b00 <Get_SerialNum+0x44>)
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019ac8:	4b0e      	ldr	r3, [pc, #56]	; (8019b04 <Get_SerialNum+0x48>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019ace:	4b0e      	ldr	r3, [pc, #56]	; (8019b08 <Get_SerialNum+0x4c>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019ad4:	68fa      	ldr	r2, [r7, #12]
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	4413      	add	r3, r2
 8019ada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d009      	beq.n	8019af6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019ae2:	2208      	movs	r2, #8
 8019ae4:	4909      	ldr	r1, [pc, #36]	; (8019b0c <Get_SerialNum+0x50>)
 8019ae6:	68f8      	ldr	r0, [r7, #12]
 8019ae8:	f000 f814 	bl	8019b14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019aec:	2204      	movs	r2, #4
 8019aee:	4908      	ldr	r1, [pc, #32]	; (8019b10 <Get_SerialNum+0x54>)
 8019af0:	68b8      	ldr	r0, [r7, #8]
 8019af2:	f000 f80f 	bl	8019b14 <IntToUnicode>
  }
}
 8019af6:	bf00      	nop
 8019af8:	3710      	adds	r7, #16
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}
 8019afe:	bf00      	nop
 8019b00:	1fff7590 	.word	0x1fff7590
 8019b04:	1fff7594 	.word	0x1fff7594
 8019b08:	1fff7598 	.word	0x1fff7598
 8019b0c:	200000d2 	.word	0x200000d2
 8019b10:	200000e2 	.word	0x200000e2

08019b14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019b14:	b480      	push	{r7}
 8019b16:	b087      	sub	sp, #28
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	4613      	mov	r3, r2
 8019b20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019b22:	2300      	movs	r3, #0
 8019b24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019b26:	2300      	movs	r3, #0
 8019b28:	75fb      	strb	r3, [r7, #23]
 8019b2a:	e027      	b.n	8019b7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	0f1b      	lsrs	r3, r3, #28
 8019b30:	2b09      	cmp	r3, #9
 8019b32:	d80b      	bhi.n	8019b4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	0f1b      	lsrs	r3, r3, #28
 8019b38:	b2da      	uxtb	r2, r3
 8019b3a:	7dfb      	ldrb	r3, [r7, #23]
 8019b3c:	005b      	lsls	r3, r3, #1
 8019b3e:	4619      	mov	r1, r3
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	440b      	add	r3, r1
 8019b44:	3230      	adds	r2, #48	; 0x30
 8019b46:	b2d2      	uxtb	r2, r2
 8019b48:	701a      	strb	r2, [r3, #0]
 8019b4a:	e00a      	b.n	8019b62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	0f1b      	lsrs	r3, r3, #28
 8019b50:	b2da      	uxtb	r2, r3
 8019b52:	7dfb      	ldrb	r3, [r7, #23]
 8019b54:	005b      	lsls	r3, r3, #1
 8019b56:	4619      	mov	r1, r3
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	440b      	add	r3, r1
 8019b5c:	3237      	adds	r2, #55	; 0x37
 8019b5e:	b2d2      	uxtb	r2, r2
 8019b60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	011b      	lsls	r3, r3, #4
 8019b66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019b68:	7dfb      	ldrb	r3, [r7, #23]
 8019b6a:	005b      	lsls	r3, r3, #1
 8019b6c:	3301      	adds	r3, #1
 8019b6e:	68ba      	ldr	r2, [r7, #8]
 8019b70:	4413      	add	r3, r2
 8019b72:	2200      	movs	r2, #0
 8019b74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019b76:	7dfb      	ldrb	r3, [r7, #23]
 8019b78:	3301      	adds	r3, #1
 8019b7a:	75fb      	strb	r3, [r7, #23]
 8019b7c:	7dfa      	ldrb	r2, [r7, #23]
 8019b7e:	79fb      	ldrb	r3, [r7, #7]
 8019b80:	429a      	cmp	r2, r3
 8019b82:	d3d3      	bcc.n	8019b2c <IntToUnicode+0x18>
  }
}
 8019b84:	bf00      	nop
 8019b86:	bf00      	nop
 8019b88:	371c      	adds	r7, #28
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b90:	4770      	bx	lr

08019b92 <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 8019b92:	b480      	push	{r7}
 8019b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8019b96:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8019b98:	4618      	mov	r0, r3
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba0:	4770      	bx	lr

08019ba2 <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 8019ba2:	b480      	push	{r7}
 8019ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8019ba6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8019ba8:	4618      	mov	r0, r3
 8019baa:	46bd      	mov	sp, r7
 8019bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb0:	4770      	bx	lr

08019bb2 <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 8019bb2:	b480      	push	{r7}
 8019bb4:	b083      	sub	sp, #12
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8019bba:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	370c      	adds	r7, #12
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc6:	4770      	bx	lr

08019bc8 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8019bc8:	b480      	push	{r7}
 8019bca:	b085      	sub	sp, #20
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	60f8      	str	r0, [r7, #12]
 8019bd0:	60b9      	str	r1, [r7, #8]
 8019bd2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8019bd4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	3714      	adds	r7, #20
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be0:	4770      	bx	lr

08019be2 <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8019be2:	b480      	push	{r7}
 8019be4:	b085      	sub	sp, #20
 8019be6:	af00      	add	r7, sp, #0
 8019be8:	60f8      	str	r0, [r7, #12]
 8019bea:	60b9      	str	r1, [r7, #8]
 8019bec:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8019bee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3714      	adds	r7, #20
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bfa:	4770      	bx	lr

08019bfc <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8019bfc:	b480      	push	{r7}
 8019bfe:	b085      	sub	sp, #20
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	60f8      	str	r0, [r7, #12]
 8019c04:	460b      	mov	r3, r1
 8019c06:	607a      	str	r2, [r7, #4]
 8019c08:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8019c0a:	7afb      	ldrb	r3, [r7, #11]
 8019c0c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8019c0e:	bf00      	nop
  }
  return (USBD_OK);
 8019c10:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019c12:	4618      	mov	r0, r3
 8019c14:	3714      	adds	r7, #20
 8019c16:	46bd      	mov	sp, r7
 8019c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1c:	4770      	bx	lr

08019c1e <LL_AHB2_GRP1_EnableClock>:
{
 8019c1e:	b480      	push	{r7}
 8019c20:	b085      	sub	sp, #20
 8019c22:	af00      	add	r7, sp, #0
 8019c24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8019c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	4313      	orrs	r3, r2
 8019c34:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8019c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	4013      	ands	r3, r2
 8019c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019c42:	68fb      	ldr	r3, [r7, #12]
}
 8019c44:	bf00      	nop
 8019c46:	3714      	adds	r7, #20
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c4e:	4770      	bx	lr

08019c50 <LL_APB1_GRP1_EnableClock>:
{
 8019c50:	b480      	push	{r7}
 8019c52:	b085      	sub	sp, #20
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8019c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	4313      	orrs	r3, r2
 8019c66:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8019c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8019c6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4013      	ands	r3, r2
 8019c72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019c74:	68fb      	ldr	r3, [r7, #12]
}
 8019c76:	bf00      	nop
 8019c78:	3714      	adds	r7, #20
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c80:	4770      	bx	lr
	...

08019c84 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b088      	sub	sp, #32
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019c8c:	f107 030c 	add.w	r3, r7, #12
 8019c90:	2200      	movs	r2, #0
 8019c92:	601a      	str	r2, [r3, #0]
 8019c94:	605a      	str	r2, [r3, #4]
 8019c96:	609a      	str	r2, [r3, #8]
 8019c98:	60da      	str	r2, [r3, #12]
 8019c9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	4a1d      	ldr	r2, [pc, #116]	; (8019d18 <HAL_PCD_MspInit+0x94>)
 8019ca2:	4293      	cmp	r3, r2
 8019ca4:	d134      	bne.n	8019d10 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019ca6:	2001      	movs	r0, #1
 8019ca8:	f7ff ffb9 	bl	8019c1e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8019cac:	2004      	movs	r0, #4
 8019cae:	f7ff ffb6 	bl	8019c1e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8019cb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019cb8:	2302      	movs	r3, #2
 8019cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019cc4:	230a      	movs	r3, #10
 8019cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019cc8:	f107 030c 	add.w	r3, r7, #12
 8019ccc:	4619      	mov	r1, r3
 8019cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019cd2:	f7eb fce7 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8019cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019cdc:	2302      	movs	r3, #2
 8019cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8019ce8:	230a      	movs	r3, #10
 8019cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019cec:	f107 030c 	add.w	r3, r7, #12
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	480a      	ldr	r0, [pc, #40]	; (8019d1c <HAL_PCD_MspInit+0x98>)
 8019cf4:	f7eb fcd6 	bl	80056a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8019cf8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8019cfc:	f7ff ffa8 	bl	8019c50 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8019d00:	2200      	movs	r2, #0
 8019d02:	2105      	movs	r1, #5
 8019d04:	2014      	movs	r0, #20
 8019d06:	f7eb fa61 	bl	80051cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019d0a:	2014      	movs	r0, #20
 8019d0c:	f7eb fa78 	bl	8005200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019d10:	bf00      	nop
 8019d12:	3720      	adds	r7, #32
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}
 8019d18:	40006800 	.word	0x40006800
 8019d1c:	48000800 	.word	0x48000800

08019d20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b082      	sub	sp, #8
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8019d34:	4619      	mov	r1, r3
 8019d36:	4610      	mov	r0, r2
 8019d38:	f7f6 fc27 	bl	801058a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019d3c:	bf00      	nop
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}

08019d44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b082      	sub	sp, #8
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
 8019d4c:	460b      	mov	r3, r1
 8019d4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8019d56:	78fa      	ldrb	r2, [r7, #3]
 8019d58:	6879      	ldr	r1, [r7, #4]
 8019d5a:	4613      	mov	r3, r2
 8019d5c:	009b      	lsls	r3, r3, #2
 8019d5e:	4413      	add	r3, r2
 8019d60:	00db      	lsls	r3, r3, #3
 8019d62:	440b      	add	r3, r1
 8019d64:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8019d68:	681a      	ldr	r2, [r3, #0]
 8019d6a:	78fb      	ldrb	r3, [r7, #3]
 8019d6c:	4619      	mov	r1, r3
 8019d6e:	f7f6 fc61 	bl	8010634 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8019d72:	bf00      	nop
 8019d74:	3708      	adds	r7, #8
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bd80      	pop	{r7, pc}

08019d7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d7a:	b580      	push	{r7, lr}
 8019d7c:	b082      	sub	sp, #8
 8019d7e:	af00      	add	r7, sp, #0
 8019d80:	6078      	str	r0, [r7, #4]
 8019d82:	460b      	mov	r3, r1
 8019d84:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8019d8c:	78fa      	ldrb	r2, [r7, #3]
 8019d8e:	6879      	ldr	r1, [r7, #4]
 8019d90:	4613      	mov	r3, r2
 8019d92:	009b      	lsls	r3, r3, #2
 8019d94:	4413      	add	r3, r2
 8019d96:	00db      	lsls	r3, r3, #3
 8019d98:	440b      	add	r3, r1
 8019d9a:	333c      	adds	r3, #60	; 0x3c
 8019d9c:	681a      	ldr	r2, [r3, #0]
 8019d9e:	78fb      	ldrb	r3, [r7, #3]
 8019da0:	4619      	mov	r1, r3
 8019da2:	f7f6 fcaa 	bl	80106fa <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8019da6:	bf00      	nop
 8019da8:	3708      	adds	r7, #8
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}

08019dae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dae:	b580      	push	{r7, lr}
 8019db0:	b082      	sub	sp, #8
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f7f6 fdbe 	bl	801093e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8019dc2:	bf00      	nop
 8019dc4:	3708      	adds	r7, #8
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bd80      	pop	{r7, pc}

08019dca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dca:	b580      	push	{r7, lr}
 8019dcc:	b084      	sub	sp, #16
 8019dce:	af00      	add	r7, sp, #0
 8019dd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019dd2:	2301      	movs	r3, #1
 8019dd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	689b      	ldr	r3, [r3, #8]
 8019dda:	2b02      	cmp	r3, #2
 8019ddc:	d001      	beq.n	8019de2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8019dde:	f7e8 ff6b 	bl	8002cb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8019de8:	7bfa      	ldrb	r2, [r7, #15]
 8019dea:	4611      	mov	r1, r2
 8019dec:	4618      	mov	r0, r3
 8019dee:	f7f6 fd68 	bl	80108c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7f6 fd14 	bl	8010826 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8019dfe:	bf00      	nop
 8019e00:	3710      	adds	r7, #16
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}
	...

08019e08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b082      	sub	sp, #8
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7f6 fd63 	bl	80108e2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	699b      	ldr	r3, [r3, #24]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d005      	beq.n	8019e30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e24:	4b04      	ldr	r3, [pc, #16]	; (8019e38 <HAL_PCD_SuspendCallback+0x30>)
 8019e26:	691b      	ldr	r3, [r3, #16]
 8019e28:	4a03      	ldr	r2, [pc, #12]	; (8019e38 <HAL_PCD_SuspendCallback+0x30>)
 8019e2a:	f043 0306 	orr.w	r3, r3, #6
 8019e2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8019e30:	bf00      	nop
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}
 8019e38:	e000ed00 	.word	0xe000ed00

08019e3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b082      	sub	sp, #8
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	699b      	ldr	r3, [r3, #24]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d007      	beq.n	8019e5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e4c:	4b08      	ldr	r3, [pc, #32]	; (8019e70 <HAL_PCD_ResumeCallback+0x34>)
 8019e4e:	691b      	ldr	r3, [r3, #16]
 8019e50:	4a07      	ldr	r2, [pc, #28]	; (8019e70 <HAL_PCD_ResumeCallback+0x34>)
 8019e52:	f023 0306 	bic.w	r3, r3, #6
 8019e56:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019e58:	f000 f9ca 	bl	801a1f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8019e62:	4618      	mov	r0, r3
 8019e64:	f7f6 fd53 	bl	801090e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8019e68:	bf00      	nop
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}
 8019e70:	e000ed00 	.word	0xe000ed00

08019e74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019e74:	b580      	push	{r7, lr}
 8019e76:	b082      	sub	sp, #8
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8019e7c:	4a1f      	ldr	r2, [pc, #124]	; (8019efc <USBD_LL_Init+0x88>)
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	4a1d      	ldr	r2, [pc, #116]	; (8019efc <USBD_LL_Init+0x88>)
 8019e88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8019e8c:	f7ee f942 	bl	8008114 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8019e90:	4b1a      	ldr	r3, [pc, #104]	; (8019efc <USBD_LL_Init+0x88>)
 8019e92:	4a1b      	ldr	r2, [pc, #108]	; (8019f00 <USBD_LL_Init+0x8c>)
 8019e94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019e96:	4b19      	ldr	r3, [pc, #100]	; (8019efc <USBD_LL_Init+0x88>)
 8019e98:	2208      	movs	r2, #8
 8019e9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019e9c:	4b17      	ldr	r3, [pc, #92]	; (8019efc <USBD_LL_Init+0x88>)
 8019e9e:	2202      	movs	r2, #2
 8019ea0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019ea2:	4b16      	ldr	r3, [pc, #88]	; (8019efc <USBD_LL_Init+0x88>)
 8019ea4:	2202      	movs	r2, #2
 8019ea6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8019ea8:	4b14      	ldr	r3, [pc, #80]	; (8019efc <USBD_LL_Init+0x88>)
 8019eaa:	2200      	movs	r2, #0
 8019eac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019eae:	4b13      	ldr	r3, [pc, #76]	; (8019efc <USBD_LL_Init+0x88>)
 8019eb0:	2200      	movs	r2, #0
 8019eb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019eb4:	4b11      	ldr	r3, [pc, #68]	; (8019efc <USBD_LL_Init+0x88>)
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019eba:	4b10      	ldr	r3, [pc, #64]	; (8019efc <USBD_LL_Init+0x88>)
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019ec0:	480e      	ldr	r0, [pc, #56]	; (8019efc <USBD_LL_Init+0x88>)
 8019ec2:	f7ec fc13 	bl	80066ec <HAL_PCD_Init>
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d001      	beq.n	8019ed0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8019ecc:	f7e8 fef4 	bl	8002cb8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019ed6:	2318      	movs	r3, #24
 8019ed8:	2200      	movs	r2, #0
 8019eda:	2100      	movs	r1, #0
 8019edc:	f7ee f88e 	bl	8007ffc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019ee6:	2358      	movs	r3, #88	; 0x58
 8019ee8:	2200      	movs	r2, #0
 8019eea:	2180      	movs	r1, #128	; 0x80
 8019eec:	f7ee f886 	bl	8007ffc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8019ef0:	2300      	movs	r3, #0
}
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	3708      	adds	r7, #8
 8019ef6:	46bd      	mov	sp, r7
 8019ef8:	bd80      	pop	{r7, pc}
 8019efa:	bf00      	nop
 8019efc:	2000a740 	.word	0x2000a740
 8019f00:	40006800 	.word	0x40006800

08019f04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b084      	sub	sp, #16
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f10:	2300      	movs	r3, #0
 8019f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7ec fccb 	bl	80068b6 <HAL_PCD_Start>
 8019f20:	4603      	mov	r3, r0
 8019f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f24:	7bfb      	ldrb	r3, [r7, #15]
 8019f26:	4618      	mov	r0, r3
 8019f28:	f000 f968 	bl	801a1fc <USBD_Get_USB_Status>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	3710      	adds	r7, #16
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}

08019f3a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8019f3a:	b580      	push	{r7, lr}
 8019f3c:	b084      	sub	sp, #16
 8019f3e:	af00      	add	r7, sp, #0
 8019f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f42:	2300      	movs	r3, #0
 8019f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f46:	2300      	movs	r3, #0
 8019f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7ec fcd2 	bl	80068fa <HAL_PCD_Stop>
 8019f56:	4603      	mov	r3, r0
 8019f58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f5a:	7bfb      	ldrb	r3, [r7, #15]
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	f000 f94d 	bl	801a1fc <USBD_Get_USB_Status>
 8019f62:	4603      	mov	r3, r0
 8019f64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f66:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f68:	4618      	mov	r0, r3
 8019f6a:	3710      	adds	r7, #16
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bd80      	pop	{r7, pc}

08019f70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b084      	sub	sp, #16
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	6078      	str	r0, [r7, #4]
 8019f78:	4608      	mov	r0, r1
 8019f7a:	4611      	mov	r1, r2
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	4603      	mov	r3, r0
 8019f80:	70fb      	strb	r3, [r7, #3]
 8019f82:	460b      	mov	r3, r1
 8019f84:	70bb      	strb	r3, [r7, #2]
 8019f86:	4613      	mov	r3, r2
 8019f88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019f98:	78bb      	ldrb	r3, [r7, #2]
 8019f9a:	883a      	ldrh	r2, [r7, #0]
 8019f9c:	78f9      	ldrb	r1, [r7, #3]
 8019f9e:	f7ec fe1a 	bl	8006bd6 <HAL_PCD_EP_Open>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fa6:	7bfb      	ldrb	r3, [r7, #15]
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f000 f927 	bl	801a1fc <USBD_Get_USB_Status>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	3710      	adds	r7, #16
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}

08019fbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b084      	sub	sp, #16
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	460b      	mov	r3, r1
 8019fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fc8:	2300      	movs	r3, #0
 8019fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fcc:	2300      	movs	r3, #0
 8019fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019fd6:	78fa      	ldrb	r2, [r7, #3]
 8019fd8:	4611      	mov	r1, r2
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7ec fee1 	bl	8006da2 <HAL_PCD_EP_SetStall>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fe4:	7bfb      	ldrb	r3, [r7, #15]
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f000 f908 	bl	801a1fc <USBD_Get_USB_Status>
 8019fec:	4603      	mov	r3, r0
 8019fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3710      	adds	r7, #16
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}

08019ffa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ffa:	b580      	push	{r7, lr}
 8019ffc:	b084      	sub	sp, #16
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	6078      	str	r0, [r7, #4]
 801a002:	460b      	mov	r3, r1
 801a004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a006:	2300      	movs	r3, #0
 801a008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a00a:	2300      	movs	r3, #0
 801a00c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a014:	78fa      	ldrb	r2, [r7, #3]
 801a016:	4611      	mov	r1, r2
 801a018:	4618      	mov	r0, r3
 801a01a:	f7ec ff14 	bl	8006e46 <HAL_PCD_EP_ClrStall>
 801a01e:	4603      	mov	r3, r0
 801a020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a022:	7bfb      	ldrb	r3, [r7, #15]
 801a024:	4618      	mov	r0, r3
 801a026:	f000 f8e9 	bl	801a1fc <USBD_Get_USB_Status>
 801a02a:	4603      	mov	r3, r0
 801a02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a02e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a030:	4618      	mov	r0, r3
 801a032:	3710      	adds	r7, #16
 801a034:	46bd      	mov	sp, r7
 801a036:	bd80      	pop	{r7, pc}

0801a038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a038:	b480      	push	{r7}
 801a03a:	b085      	sub	sp, #20
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
 801a040:	460b      	mov	r3, r1
 801a042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a04a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a04c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a050:	2b00      	cmp	r3, #0
 801a052:	da0c      	bge.n	801a06e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a054:	78fb      	ldrb	r3, [r7, #3]
 801a056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a05a:	68f9      	ldr	r1, [r7, #12]
 801a05c:	1c5a      	adds	r2, r3, #1
 801a05e:	4613      	mov	r3, r2
 801a060:	009b      	lsls	r3, r3, #2
 801a062:	4413      	add	r3, r2
 801a064:	00db      	lsls	r3, r3, #3
 801a066:	440b      	add	r3, r1
 801a068:	3302      	adds	r3, #2
 801a06a:	781b      	ldrb	r3, [r3, #0]
 801a06c:	e00b      	b.n	801a086 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a06e:	78fb      	ldrb	r3, [r7, #3]
 801a070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a074:	68f9      	ldr	r1, [r7, #12]
 801a076:	4613      	mov	r3, r2
 801a078:	009b      	lsls	r3, r3, #2
 801a07a:	4413      	add	r3, r2
 801a07c:	00db      	lsls	r3, r3, #3
 801a07e:	440b      	add	r3, r1
 801a080:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801a084:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a086:	4618      	mov	r0, r3
 801a088:	3714      	adds	r7, #20
 801a08a:	46bd      	mov	sp, r7
 801a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a090:	4770      	bx	lr

0801a092 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a092:	b580      	push	{r7, lr}
 801a094:	b084      	sub	sp, #16
 801a096:	af00      	add	r7, sp, #0
 801a098:	6078      	str	r0, [r7, #4]
 801a09a:	460b      	mov	r3, r1
 801a09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a09e:	2300      	movs	r3, #0
 801a0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0a2:	2300      	movs	r3, #0
 801a0a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a0ac:	78fa      	ldrb	r2, [r7, #3]
 801a0ae:	4611      	mov	r1, r2
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f7ec fd6b 	bl	8006b8c <HAL_PCD_SetAddress>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0ba:	7bfb      	ldrb	r3, [r7, #15]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f000 f89d 	bl	801a1fc <USBD_Get_USB_Status>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	3710      	adds	r7, #16
 801a0cc:	46bd      	mov	sp, r7
 801a0ce:	bd80      	pop	{r7, pc}

0801a0d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b086      	sub	sp, #24
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	60f8      	str	r0, [r7, #12]
 801a0d8:	607a      	str	r2, [r7, #4]
 801a0da:	603b      	str	r3, [r7, #0]
 801a0dc:	460b      	mov	r3, r1
 801a0de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a0ee:	7af9      	ldrb	r1, [r7, #11]
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	687a      	ldr	r2, [r7, #4]
 801a0f4:	f7ec fe12 	bl	8006d1c <HAL_PCD_EP_Transmit>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a0fc:	7dfb      	ldrb	r3, [r7, #23]
 801a0fe:	4618      	mov	r0, r3
 801a100:	f000 f87c 	bl	801a1fc <USBD_Get_USB_Status>
 801a104:	4603      	mov	r3, r0
 801a106:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a108:	7dbb      	ldrb	r3, [r7, #22]
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	3718      	adds	r7, #24
 801a10e:	46bd      	mov	sp, r7
 801a110:	bd80      	pop	{r7, pc}

0801a112 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a112:	b580      	push	{r7, lr}
 801a114:	b086      	sub	sp, #24
 801a116:	af00      	add	r7, sp, #0
 801a118:	60f8      	str	r0, [r7, #12]
 801a11a:	607a      	str	r2, [r7, #4]
 801a11c:	603b      	str	r3, [r7, #0]
 801a11e:	460b      	mov	r3, r1
 801a120:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a122:	2300      	movs	r3, #0
 801a124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a126:	2300      	movs	r3, #0
 801a128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a130:	7af9      	ldrb	r1, [r7, #11]
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	687a      	ldr	r2, [r7, #4]
 801a136:	f7ec fdb4 	bl	8006ca2 <HAL_PCD_EP_Receive>
 801a13a:	4603      	mov	r3, r0
 801a13c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a13e:	7dfb      	ldrb	r3, [r7, #23]
 801a140:	4618      	mov	r0, r3
 801a142:	f000 f85b 	bl	801a1fc <USBD_Get_USB_Status>
 801a146:	4603      	mov	r3, r0
 801a148:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a14a:	7dbb      	ldrb	r3, [r7, #22]
}
 801a14c:	4618      	mov	r0, r3
 801a14e:	3718      	adds	r7, #24
 801a150:	46bd      	mov	sp, r7
 801a152:	bd80      	pop	{r7, pc}

0801a154 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b082      	sub	sp, #8
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
 801a15c:	460b      	mov	r3, r1
 801a15e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801a160:	78fb      	ldrb	r3, [r7, #3]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d002      	beq.n	801a16c <HAL_PCDEx_LPM_Callback+0x18>
 801a166:	2b01      	cmp	r3, #1
 801a168:	d013      	beq.n	801a192 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801a16a:	e023      	b.n	801a1b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	699b      	ldr	r3, [r3, #24]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d007      	beq.n	801a184 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a174:	f000 f83c 	bl	801a1f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a178:	4b10      	ldr	r3, [pc, #64]	; (801a1bc <HAL_PCDEx_LPM_Callback+0x68>)
 801a17a:	691b      	ldr	r3, [r3, #16]
 801a17c:	4a0f      	ldr	r2, [pc, #60]	; (801a1bc <HAL_PCDEx_LPM_Callback+0x68>)
 801a17e:	f023 0306 	bic.w	r3, r3, #6
 801a182:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7f6 fbbf 	bl	801090e <USBD_LL_Resume>
    break;
 801a190:	e010      	b.n	801a1b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801a198:	4618      	mov	r0, r3
 801a19a:	f7f6 fba2 	bl	80108e2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	699b      	ldr	r3, [r3, #24]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d005      	beq.n	801a1b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a1a6:	4b05      	ldr	r3, [pc, #20]	; (801a1bc <HAL_PCDEx_LPM_Callback+0x68>)
 801a1a8:	691b      	ldr	r3, [r3, #16]
 801a1aa:	4a04      	ldr	r2, [pc, #16]	; (801a1bc <HAL_PCDEx_LPM_Callback+0x68>)
 801a1ac:	f043 0306 	orr.w	r3, r3, #6
 801a1b0:	6113      	str	r3, [r2, #16]
    break;
 801a1b2:	bf00      	nop
}
 801a1b4:	bf00      	nop
 801a1b6:	3708      	adds	r7, #8
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}
 801a1bc:	e000ed00 	.word	0xe000ed00

0801a1c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a1c0:	b480      	push	{r7}
 801a1c2:	b083      	sub	sp, #12
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a1c8:	4b03      	ldr	r3, [pc, #12]	; (801a1d8 <USBD_static_malloc+0x18>)
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	370c      	adds	r7, #12
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d4:	4770      	bx	lr
 801a1d6:	bf00      	nop
 801a1d8:	20009888 	.word	0x20009888

0801a1dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a1dc:	b480      	push	{r7}
 801a1de:	b083      	sub	sp, #12
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]

}
 801a1e4:	bf00      	nop
 801a1e6:	370c      	adds	r7, #12
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ee:	4770      	bx	lr

0801a1f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a1f4:	f7e8 fd62 	bl	8002cbc <SystemClock_Config>
}
 801a1f8:	bf00      	nop
 801a1fa:	bd80      	pop	{r7, pc}

0801a1fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a1fc:	b480      	push	{r7}
 801a1fe:	b085      	sub	sp, #20
 801a200:	af00      	add	r7, sp, #0
 801a202:	4603      	mov	r3, r0
 801a204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a206:	2300      	movs	r3, #0
 801a208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a20a:	79fb      	ldrb	r3, [r7, #7]
 801a20c:	2b03      	cmp	r3, #3
 801a20e:	d817      	bhi.n	801a240 <USBD_Get_USB_Status+0x44>
 801a210:	a201      	add	r2, pc, #4	; (adr r2, 801a218 <USBD_Get_USB_Status+0x1c>)
 801a212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a216:	bf00      	nop
 801a218:	0801a229 	.word	0x0801a229
 801a21c:	0801a22f 	.word	0x0801a22f
 801a220:	0801a235 	.word	0x0801a235
 801a224:	0801a23b 	.word	0x0801a23b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a228:	2300      	movs	r3, #0
 801a22a:	73fb      	strb	r3, [r7, #15]
    break;
 801a22c:	e00b      	b.n	801a246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a22e:	2303      	movs	r3, #3
 801a230:	73fb      	strb	r3, [r7, #15]
    break;
 801a232:	e008      	b.n	801a246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a234:	2301      	movs	r3, #1
 801a236:	73fb      	strb	r3, [r7, #15]
    break;
 801a238:	e005      	b.n	801a246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a23a:	2303      	movs	r3, #3
 801a23c:	73fb      	strb	r3, [r7, #15]
    break;
 801a23e:	e002      	b.n	801a246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a240:	2303      	movs	r3, #3
 801a242:	73fb      	strb	r3, [r7, #15]
    break;
 801a244:	bf00      	nop
  }
  return usb_status;
 801a246:	7bfb      	ldrb	r3, [r7, #15]
}
 801a248:	4618      	mov	r0, r3
 801a24a:	3714      	adds	r7, #20
 801a24c:	46bd      	mov	sp, r7
 801a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a252:	4770      	bx	lr

0801a254 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a254:	b480      	push	{r7}
 801a256:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a258:	4b05      	ldr	r3, [pc, #20]	; (801a270 <UTIL_LPM_Init+0x1c>)
 801a25a:	2200      	movs	r2, #0
 801a25c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a25e:	4b05      	ldr	r3, [pc, #20]	; (801a274 <UTIL_LPM_Init+0x20>)
 801a260:	2200      	movs	r2, #0
 801a262:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a264:	bf00      	nop
 801a266:	46bd      	mov	sp, r7
 801a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26c:	4770      	bx	lr
 801a26e:	bf00      	nop
 801a270:	20009ca8 	.word	0x20009ca8
 801a274:	20009cac 	.word	0x20009cac

0801a278 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a278:	b480      	push	{r7}
 801a27a:	b087      	sub	sp, #28
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
 801a280:	460b      	mov	r3, r1
 801a282:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a284:	f3ef 8310 	mrs	r3, PRIMASK
 801a288:	613b      	str	r3, [r7, #16]
  return(result);
 801a28a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a28c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a28e:	b672      	cpsid	i
}
 801a290:	bf00      	nop
  
  switch(state)
 801a292:	78fb      	ldrb	r3, [r7, #3]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d008      	beq.n	801a2aa <UTIL_LPM_SetOffMode+0x32>
 801a298:	2b01      	cmp	r3, #1
 801a29a:	d10e      	bne.n	801a2ba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a29c:	4b0d      	ldr	r3, [pc, #52]	; (801a2d4 <UTIL_LPM_SetOffMode+0x5c>)
 801a29e:	681a      	ldr	r2, [r3, #0]
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	4313      	orrs	r3, r2
 801a2a4:	4a0b      	ldr	r2, [pc, #44]	; (801a2d4 <UTIL_LPM_SetOffMode+0x5c>)
 801a2a6:	6013      	str	r3, [r2, #0]
      break;
 801a2a8:	e008      	b.n	801a2bc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	43da      	mvns	r2, r3
 801a2ae:	4b09      	ldr	r3, [pc, #36]	; (801a2d4 <UTIL_LPM_SetOffMode+0x5c>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	4013      	ands	r3, r2
 801a2b4:	4a07      	ldr	r2, [pc, #28]	; (801a2d4 <UTIL_LPM_SetOffMode+0x5c>)
 801a2b6:	6013      	str	r3, [r2, #0]
      break;
 801a2b8:	e000      	b.n	801a2bc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a2ba:	bf00      	nop
 801a2bc:	697b      	ldr	r3, [r7, #20]
 801a2be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	f383 8810 	msr	PRIMASK, r3
}
 801a2c6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a2c8:	bf00      	nop
 801a2ca:	371c      	adds	r7, #28
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d2:	4770      	bx	lr
 801a2d4:	20009cac 	.word	0x20009cac

0801a2d8 <__libc_init_array>:
 801a2d8:	b570      	push	{r4, r5, r6, lr}
 801a2da:	4d0d      	ldr	r5, [pc, #52]	; (801a310 <__libc_init_array+0x38>)
 801a2dc:	4c0d      	ldr	r4, [pc, #52]	; (801a314 <__libc_init_array+0x3c>)
 801a2de:	1b64      	subs	r4, r4, r5
 801a2e0:	10a4      	asrs	r4, r4, #2
 801a2e2:	2600      	movs	r6, #0
 801a2e4:	42a6      	cmp	r6, r4
 801a2e6:	d109      	bne.n	801a2fc <__libc_init_array+0x24>
 801a2e8:	4d0b      	ldr	r5, [pc, #44]	; (801a318 <__libc_init_array+0x40>)
 801a2ea:	4c0c      	ldr	r4, [pc, #48]	; (801a31c <__libc_init_array+0x44>)
 801a2ec:	f000 f8f6 	bl	801a4dc <_init>
 801a2f0:	1b64      	subs	r4, r4, r5
 801a2f2:	10a4      	asrs	r4, r4, #2
 801a2f4:	2600      	movs	r6, #0
 801a2f6:	42a6      	cmp	r6, r4
 801a2f8:	d105      	bne.n	801a306 <__libc_init_array+0x2e>
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a300:	4798      	blx	r3
 801a302:	3601      	adds	r6, #1
 801a304:	e7ee      	b.n	801a2e4 <__libc_init_array+0xc>
 801a306:	f855 3b04 	ldr.w	r3, [r5], #4
 801a30a:	4798      	blx	r3
 801a30c:	3601      	adds	r6, #1
 801a30e:	e7f2      	b.n	801a2f6 <__libc_init_array+0x1e>
 801a310:	0801abb8 	.word	0x0801abb8
 801a314:	0801abb8 	.word	0x0801abb8
 801a318:	0801abb8 	.word	0x0801abb8
 801a31c:	0801abd8 	.word	0x0801abd8

0801a320 <__retarget_lock_acquire_recursive>:
 801a320:	4770      	bx	lr

0801a322 <__retarget_lock_release_recursive>:
 801a322:	4770      	bx	lr

0801a324 <memcpy>:
 801a324:	440a      	add	r2, r1
 801a326:	4291      	cmp	r1, r2
 801a328:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a32c:	d100      	bne.n	801a330 <memcpy+0xc>
 801a32e:	4770      	bx	lr
 801a330:	b510      	push	{r4, lr}
 801a332:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a336:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a33a:	4291      	cmp	r1, r2
 801a33c:	d1f9      	bne.n	801a332 <memcpy+0xe>
 801a33e:	bd10      	pop	{r4, pc}

0801a340 <memset>:
 801a340:	4402      	add	r2, r0
 801a342:	4603      	mov	r3, r0
 801a344:	4293      	cmp	r3, r2
 801a346:	d100      	bne.n	801a34a <memset+0xa>
 801a348:	4770      	bx	lr
 801a34a:	f803 1b01 	strb.w	r1, [r3], #1
 801a34e:	e7f9      	b.n	801a344 <memset+0x4>

0801a350 <_free_r>:
 801a350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a352:	2900      	cmp	r1, #0
 801a354:	d048      	beq.n	801a3e8 <_free_r+0x98>
 801a356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a35a:	9001      	str	r0, [sp, #4]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	f1a1 0404 	sub.w	r4, r1, #4
 801a362:	bfb8      	it	lt
 801a364:	18e4      	addlt	r4, r4, r3
 801a366:	f000 f8ad 	bl	801a4c4 <__malloc_lock>
 801a36a:	4a20      	ldr	r2, [pc, #128]	; (801a3ec <_free_r+0x9c>)
 801a36c:	9801      	ldr	r0, [sp, #4]
 801a36e:	6813      	ldr	r3, [r2, #0]
 801a370:	4615      	mov	r5, r2
 801a372:	b933      	cbnz	r3, 801a382 <_free_r+0x32>
 801a374:	6063      	str	r3, [r4, #4]
 801a376:	6014      	str	r4, [r2, #0]
 801a378:	b003      	add	sp, #12
 801a37a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a37e:	f000 b8a7 	b.w	801a4d0 <__malloc_unlock>
 801a382:	42a3      	cmp	r3, r4
 801a384:	d90b      	bls.n	801a39e <_free_r+0x4e>
 801a386:	6821      	ldr	r1, [r4, #0]
 801a388:	1862      	adds	r2, r4, r1
 801a38a:	4293      	cmp	r3, r2
 801a38c:	bf04      	itt	eq
 801a38e:	681a      	ldreq	r2, [r3, #0]
 801a390:	685b      	ldreq	r3, [r3, #4]
 801a392:	6063      	str	r3, [r4, #4]
 801a394:	bf04      	itt	eq
 801a396:	1852      	addeq	r2, r2, r1
 801a398:	6022      	streq	r2, [r4, #0]
 801a39a:	602c      	str	r4, [r5, #0]
 801a39c:	e7ec      	b.n	801a378 <_free_r+0x28>
 801a39e:	461a      	mov	r2, r3
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	b10b      	cbz	r3, 801a3a8 <_free_r+0x58>
 801a3a4:	42a3      	cmp	r3, r4
 801a3a6:	d9fa      	bls.n	801a39e <_free_r+0x4e>
 801a3a8:	6811      	ldr	r1, [r2, #0]
 801a3aa:	1855      	adds	r5, r2, r1
 801a3ac:	42a5      	cmp	r5, r4
 801a3ae:	d10b      	bne.n	801a3c8 <_free_r+0x78>
 801a3b0:	6824      	ldr	r4, [r4, #0]
 801a3b2:	4421      	add	r1, r4
 801a3b4:	1854      	adds	r4, r2, r1
 801a3b6:	42a3      	cmp	r3, r4
 801a3b8:	6011      	str	r1, [r2, #0]
 801a3ba:	d1dd      	bne.n	801a378 <_free_r+0x28>
 801a3bc:	681c      	ldr	r4, [r3, #0]
 801a3be:	685b      	ldr	r3, [r3, #4]
 801a3c0:	6053      	str	r3, [r2, #4]
 801a3c2:	4421      	add	r1, r4
 801a3c4:	6011      	str	r1, [r2, #0]
 801a3c6:	e7d7      	b.n	801a378 <_free_r+0x28>
 801a3c8:	d902      	bls.n	801a3d0 <_free_r+0x80>
 801a3ca:	230c      	movs	r3, #12
 801a3cc:	6003      	str	r3, [r0, #0]
 801a3ce:	e7d3      	b.n	801a378 <_free_r+0x28>
 801a3d0:	6825      	ldr	r5, [r4, #0]
 801a3d2:	1961      	adds	r1, r4, r5
 801a3d4:	428b      	cmp	r3, r1
 801a3d6:	bf04      	itt	eq
 801a3d8:	6819      	ldreq	r1, [r3, #0]
 801a3da:	685b      	ldreq	r3, [r3, #4]
 801a3dc:	6063      	str	r3, [r4, #4]
 801a3de:	bf04      	itt	eq
 801a3e0:	1949      	addeq	r1, r1, r5
 801a3e2:	6021      	streq	r1, [r4, #0]
 801a3e4:	6054      	str	r4, [r2, #4]
 801a3e6:	e7c7      	b.n	801a378 <_free_r+0x28>
 801a3e8:	b003      	add	sp, #12
 801a3ea:	bd30      	pop	{r4, r5, pc}
 801a3ec:	20009cb0 	.word	0x20009cb0

0801a3f0 <cleanup_glue>:
 801a3f0:	b538      	push	{r3, r4, r5, lr}
 801a3f2:	460c      	mov	r4, r1
 801a3f4:	6809      	ldr	r1, [r1, #0]
 801a3f6:	4605      	mov	r5, r0
 801a3f8:	b109      	cbz	r1, 801a3fe <cleanup_glue+0xe>
 801a3fa:	f7ff fff9 	bl	801a3f0 <cleanup_glue>
 801a3fe:	4621      	mov	r1, r4
 801a400:	4628      	mov	r0, r5
 801a402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a406:	f7ff bfa3 	b.w	801a350 <_free_r>
	...

0801a40c <_reclaim_reent>:
 801a40c:	4b2c      	ldr	r3, [pc, #176]	; (801a4c0 <_reclaim_reent+0xb4>)
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	4283      	cmp	r3, r0
 801a412:	b570      	push	{r4, r5, r6, lr}
 801a414:	4604      	mov	r4, r0
 801a416:	d051      	beq.n	801a4bc <_reclaim_reent+0xb0>
 801a418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a41a:	b143      	cbz	r3, 801a42e <_reclaim_reent+0x22>
 801a41c:	68db      	ldr	r3, [r3, #12]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d14a      	bne.n	801a4b8 <_reclaim_reent+0xac>
 801a422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a424:	6819      	ldr	r1, [r3, #0]
 801a426:	b111      	cbz	r1, 801a42e <_reclaim_reent+0x22>
 801a428:	4620      	mov	r0, r4
 801a42a:	f7ff ff91 	bl	801a350 <_free_r>
 801a42e:	6961      	ldr	r1, [r4, #20]
 801a430:	b111      	cbz	r1, 801a438 <_reclaim_reent+0x2c>
 801a432:	4620      	mov	r0, r4
 801a434:	f7ff ff8c 	bl	801a350 <_free_r>
 801a438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a43a:	b111      	cbz	r1, 801a442 <_reclaim_reent+0x36>
 801a43c:	4620      	mov	r0, r4
 801a43e:	f7ff ff87 	bl	801a350 <_free_r>
 801a442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a444:	b111      	cbz	r1, 801a44c <_reclaim_reent+0x40>
 801a446:	4620      	mov	r0, r4
 801a448:	f7ff ff82 	bl	801a350 <_free_r>
 801a44c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a44e:	b111      	cbz	r1, 801a456 <_reclaim_reent+0x4a>
 801a450:	4620      	mov	r0, r4
 801a452:	f7ff ff7d 	bl	801a350 <_free_r>
 801a456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a458:	b111      	cbz	r1, 801a460 <_reclaim_reent+0x54>
 801a45a:	4620      	mov	r0, r4
 801a45c:	f7ff ff78 	bl	801a350 <_free_r>
 801a460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a462:	b111      	cbz	r1, 801a46a <_reclaim_reent+0x5e>
 801a464:	4620      	mov	r0, r4
 801a466:	f7ff ff73 	bl	801a350 <_free_r>
 801a46a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a46c:	b111      	cbz	r1, 801a474 <_reclaim_reent+0x68>
 801a46e:	4620      	mov	r0, r4
 801a470:	f7ff ff6e 	bl	801a350 <_free_r>
 801a474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a476:	b111      	cbz	r1, 801a47e <_reclaim_reent+0x72>
 801a478:	4620      	mov	r0, r4
 801a47a:	f7ff ff69 	bl	801a350 <_free_r>
 801a47e:	69a3      	ldr	r3, [r4, #24]
 801a480:	b1e3      	cbz	r3, 801a4bc <_reclaim_reent+0xb0>
 801a482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a484:	4620      	mov	r0, r4
 801a486:	4798      	blx	r3
 801a488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a48a:	b1b9      	cbz	r1, 801a4bc <_reclaim_reent+0xb0>
 801a48c:	4620      	mov	r0, r4
 801a48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a492:	f7ff bfad 	b.w	801a3f0 <cleanup_glue>
 801a496:	5949      	ldr	r1, [r1, r5]
 801a498:	b941      	cbnz	r1, 801a4ac <_reclaim_reent+0xa0>
 801a49a:	3504      	adds	r5, #4
 801a49c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a49e:	2d80      	cmp	r5, #128	; 0x80
 801a4a0:	68d9      	ldr	r1, [r3, #12]
 801a4a2:	d1f8      	bne.n	801a496 <_reclaim_reent+0x8a>
 801a4a4:	4620      	mov	r0, r4
 801a4a6:	f7ff ff53 	bl	801a350 <_free_r>
 801a4aa:	e7ba      	b.n	801a422 <_reclaim_reent+0x16>
 801a4ac:	680e      	ldr	r6, [r1, #0]
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f7ff ff4e 	bl	801a350 <_free_r>
 801a4b4:	4631      	mov	r1, r6
 801a4b6:	e7ef      	b.n	801a498 <_reclaim_reent+0x8c>
 801a4b8:	2500      	movs	r5, #0
 801a4ba:	e7ef      	b.n	801a49c <_reclaim_reent+0x90>
 801a4bc:	bd70      	pop	{r4, r5, r6, pc}
 801a4be:	bf00      	nop
 801a4c0:	20000108 	.word	0x20000108

0801a4c4 <__malloc_lock>:
 801a4c4:	4801      	ldr	r0, [pc, #4]	; (801a4cc <__malloc_lock+0x8>)
 801a4c6:	f7ff bf2b 	b.w	801a320 <__retarget_lock_acquire_recursive>
 801a4ca:	bf00      	nop
 801a4cc:	2000aa38 	.word	0x2000aa38

0801a4d0 <__malloc_unlock>:
 801a4d0:	4801      	ldr	r0, [pc, #4]	; (801a4d8 <__malloc_unlock+0x8>)
 801a4d2:	f7ff bf26 	b.w	801a322 <__retarget_lock_release_recursive>
 801a4d6:	bf00      	nop
 801a4d8:	2000aa38 	.word	0x2000aa38

0801a4dc <_init>:
 801a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4de:	bf00      	nop
 801a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4e2:	bc08      	pop	{r3}
 801a4e4:	469e      	mov	lr, r3
 801a4e6:	4770      	bx	lr

0801a4e8 <_fini>:
 801a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ea:	bf00      	nop
 801a4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4ee:	bc08      	pop	{r3}
 801a4f0:	469e      	mov	lr, r3
 801a4f2:	4770      	bx	lr
