
captivatesEnv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012064  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  080121a4  080121a4  000221a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0801248c  0801248c  0002248c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012494  08012494  00022494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000004  08012498  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000054bc  200001f0  08012684  000301f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200056ac  08012684  000356ac  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000541fc  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00009138  00000000  00000000  0008441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00003270  00000000  00000000  0008d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002f10  00000000  00000000  000907c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037a38  00000000  00000000  000936d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003f177  00000000  00000000  000cb110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011d86d  00000000  00000000  0010a287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00227af4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000d54c  00000000  00000000  00227b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801218c 	.word	0x0801218c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0801218c 	.word	0x0801218c

08000180 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800018c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4313      	orrs	r3, r2
 8000196:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800019c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4013      	ands	r3, r2
 80001a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a4:	68fb      	ldr	r3, [r7, #12]
}
 80001a6:	bf00      	nop
 80001a8:	3714      	adds	r7, #20
 80001aa:	46bd      	mov	sp, r7
 80001ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001b0:	4770      	bx	lr
	...

080001b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ba:	463b      	mov	r3, r7
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
 80001c8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ca:	4b29      	ldr	r3, [pc, #164]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001cc:	4a29      	ldr	r2, [pc, #164]	; (8000274 <MX_ADC1_Init+0xc0>)
 80001ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001d6:	4b26      	ldr	r3, [pc, #152]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001d8:	2200      	movs	r2, #0
 80001da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001de:	2200      	movs	r2, #0
 80001e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001ea:	2204      	movs	r2, #4
 80001ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_ADC1_Init+0xbc>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000202:	2200      	movs	r2, #0
 8000204:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <MX_ADC1_Init+0xbc>)
 800020a:	2200      	movs	r2, #0
 800020c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_ADC1_Init+0xbc>)
 800021e:	2200      	movs	r2, #0
 8000220:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000224:	2200      	movs	r2, #0
 8000226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800022a:	4811      	ldr	r0, [pc, #68]	; (8000270 <MX_ADC1_Init+0xbc>)
 800022c:	f001 fe08 	bl	8001e40 <HAL_ADC_Init>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000236:	f000 fe01 	bl	8000e3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_ADC1_Init+0xc4>)
 800023c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800023e:	2306      	movs	r3, #6
 8000240:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000246:	237f      	movs	r3, #127	; 0x7f
 8000248:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800024a:	2304      	movs	r3, #4
 800024c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <MX_ADC1_Init+0xbc>)
 8000258:	f001 ff3e 	bl	80020d8 <HAL_ADC_ConfigChannel>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000262:	f000 fdeb 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20003b10 	.word	0x20003b10
 8000274:	50040000 	.word	0x50040000
 8000278:	19200040 	.word	0x19200040

0800027c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_ADC_MspInit+0x54>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d113      	bne.n	80002c6 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800029e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80002a2:	f7ff ff6d 	bl	8000180 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ff6a 	bl	8000180 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4619      	mov	r1, r3
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c2:	f002 fbaf 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002c6:	bf00      	nop
 80002c8:	3720      	adds	r7, #32
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	50040000 	.word	0x50040000

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800031c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800033e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000368:	d101      	bne.n	800036e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800036a:	2301      	movs	r3, #1
 800036c:	e000      	b.n	8000370 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800037e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800038e:	d101      	bne.n	8000394 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000390:	2301      	movs	r3, #1
 8000392:	e000      	b.n	8000396 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003c4:	68fb      	ldr	r3, [r7, #12]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	041b      	lsls	r3, r3, #16
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	431a      	orrs	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	605a      	str	r2, [r3, #4]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	615a      	str	r2, [r3, #20]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	615a      	str	r2, [r3, #20]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	619a      	str	r2, [r3, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <LL_LPM_EnableSleep+0x1c>)
 80004a2:	f023 0304 	bic.w	r3, r3, #4
 80004a6:	6113      	str	r3, [r2, #16]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <MX_APPE_Config+0x18>)
 80004be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80004c4:	f000 f806 	bl	80004d4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80004c8:	f000 f846 	bl	8000558 <Config_HSE>

  return;
 80004cc:	bf00      	nop
}
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	58004000 	.word	0x58004000

080004d4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004d8:	f000 f804 	bl	80004e4 <Reset_BackupDomain>

  Reset_IPCC();
 80004dc:	f000 f81a 	bl	8000514 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e0:	bf00      	nop
}
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004e8:	f7ff ff34 	bl	8000354 <LL_RCC_IsActiveFlag_PINRST>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d00d      	beq.n	800050e <Reset_BackupDomain+0x2a>
 80004f2:	f7ff ff42 	bl	800037a <LL_RCC_IsActiveFlag_SFTRST>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d108      	bne.n	800050e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80004fc:	f004 ffb8 	bl	8005470 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000500:	f004 ffb6 	bl	8005470 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000504:	f7ff ff04 	bl	8000310 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000508:	f7ff ff13 	bl	8000332 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800050c:	bf00      	nop
 800050e:	bf00      	nop
}
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000518:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800051c:	f7ff ff40 	bl	80003a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000520:	213f      	movs	r1, #63	; 0x3f
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <Reset_IPCC+0x40>)
 8000524:	f7ff ff9b 	bl	800045e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000528:	213f      	movs	r1, #63	; 0x3f
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <Reset_IPCC+0x40>)
 800052c:	f7ff ffa5 	bl	800047a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000530:	213f      	movs	r1, #63	; 0x3f
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <Reset_IPCC+0x40>)
 8000534:	f7ff ff4d 	bl	80003d2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000538:	213f      	movs	r1, #63	; 0x3f
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <Reset_IPCC+0x40>)
 800053c:	f7ff ff6c 	bl	8000418 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000540:	213f      	movs	r1, #63	; 0x3f
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <Reset_IPCC+0x40>)
 8000544:	f7ff ff57 	bl	80003f6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <Reset_IPCC+0x40>)
 800054c:	f7ff ff76 	bl	800043c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000550:	bf00      	nop
}
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58000c00 	.word	0x58000c00

08000558 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800055e:	2000      	movs	r0, #0
 8000560:	f00c fda6 	bl	800d0b0 <OTP_Read>
 8000564:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d005      	beq.n	8000578 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	799b      	ldrb	r3, [r3, #6]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff feaf 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
}
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f001 faaa 	bl	8001ae0 <HAL_GetTick>
 800058c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000598:	d00a      	beq.n	80005b0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800059a:	f001 fab9 	bl	8001b10 <HAL_GetTickFreq>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005a8:	e002      	b.n	80005b0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80005aa:	f7ff ff75 	bl	8000498 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80005ae:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80005b0:	f001 fa96 	bl	8001ae0 <HAL_GetTick>
 80005b4:	4602      	mov	r2, r0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d8f4      	bhi.n	80005aa <HAL_Delay+0x2a>
  }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of messageI2C_Lock */
  messageI2C_LockHandle = osMutexNew(&messageI2C_Lock_attributes);
 80005d0:	480f      	ldr	r0, [pc, #60]	; (8000610 <_Z16MX_FREERTOS_Initv+0x44>)
 80005d2:	f00d fb4b 	bl	800dc6c <osMutexNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <_Z16MX_FREERTOS_Initv+0x48>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	/* creation of lightsSimpleQueue */
	lightsComplexQueueHandle = osMessageQueueNew(3, sizeof(union ColorComplex),
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <_Z16MX_FREERTOS_Initv+0x4c>)
 80005de:	2112      	movs	r1, #18
 80005e0:	2003      	movs	r0, #3
 80005e2:	f00d fbc9 	bl	800dd78 <osMessageQueueNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <_Z16MX_FREERTOS_Initv+0x50>)
 80005ea:	6013      	str	r3, [r2, #0]
			&lightsComplexQueue_attributes);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <_Z16MX_FREERTOS_Initv+0x54>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <_Z16MX_FREERTOS_Initv+0x58>)
 80005f2:	f00d f8cb 	bl	800d78c <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <_Z16MX_FREERTOS_Initv+0x5c>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of frontLightsThre */
//  frontLightsThreHandle = osThreadNew(ThreadFstrontLightsComplexTask, NULL, &frontLightsThre_attributes);

  /* creation of thermopileTask */
  thermopileTaskHandle = osThreadNew(Thermopile_Task, NULL, &thermopileTask_attributes);
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <_Z16MX_FREERTOS_Initv+0x60>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <_Z16MX_FREERTOS_Initv+0x64>)
 8000602:	f00d f8c3 	bl	800d78c <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <_Z16MX_FREERTOS_Initv+0x68>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	080122e4 	.word	0x080122e4
 8000614:	20000218 	.word	0x20000218
 8000618:	08012284 	.word	0x08012284
 800061c:	2000020c 	.word	0x2000020c
 8000620:	0801229c 	.word	0x0801229c
 8000624:	08000639 	.word	0x08000639
 8000628:	20000210 	.word	0x20000210
 800062c:	080122c0 	.word	0x080122c0
 8000630:	08001561 	.word	0x08001561
 8000634:	20000214 	.word	0x20000214

08000638 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f00d fa03 	bl	800da4e <osDelay>

	while(1){
		ledStartupSequence();
 8000648:	f000 f9e2 	bl	8000a10 <ledStartupSequence>
		osDelay(1500);
 800064c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000650:	f00d f9fd 	bl	800da4e <osDelay>
		ledStartupSequence();
 8000654:	e7f8      	b.n	8000648 <_Z16StartDefaultTaskPv+0x10>

08000656 <LL_AHB2_GRP1_EnableClock>:
{
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800065e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800066e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <MX_GPIO_Init>:

/** Configure pins
     PA1   ------> SharedAnalog_PA1
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ffda 	bl	8000656 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2004      	movs	r0, #4
 80006a4:	f7ff ffd7 	bl	8000656 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff ffd4 	bl	8000656 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	2008      	movs	r0, #8
 80006b0:	f7ff ffd1 	bl	8000656 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_1_8V_Pin|MEM_WP_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80006ba:	481d      	ldr	r0, [pc, #116]	; (8000730 <MX_GPIO_Init+0xa8>)
 80006bc:	f002 fb22 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_SIG_Pin;
 80006c0:	2302      	movs	r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c4:	2303      	movs	r3, #3
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BLINK_SIG_GPIO_Port, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f002 f9a6 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_1_8V_Pin|MEM_WP_Pin;
 80006d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <MX_GPIO_Init+0xa8>)
 80006f0:	f002 f998 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PA9_Pin;
 80006f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PA9_GPIO_Port, &GPIO_InitStruct);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f002 f98b 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = PD4_Pin|PD9_Pin;
 800070e:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xac>)
 8000722:	f002 f97f 	bl	8002a24 <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000800 	.word	0x48000800
 8000734:	48000c00 	.word	0x48000c00

08000738 <LL_AHB2_GRP1_EnableClock>:
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4013      	ands	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075c:	68fb      	ldr	r3, [r7, #12]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800076a:	b480      	push	{r7}
 800076c:	b085      	sub	sp, #20
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000776:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000786:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d8:	f002 fad0 	bl	8002d7c <HAL_I2C_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f000 fb2b 	bl	8000e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ea:	f002 ffef 	bl	80037cc <HAL_I2CEx_ConfigAnalogFilter>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 fb22 	bl	8000e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fc:	f003 f831 	bl	8003862 <HAL_I2CEx_ConfigDigitalFilter>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 fb19 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20003bc0 	.word	0x20003bc0
 8000814:	40005400 	.word	0x40005400
 8000818:	10707dbc 	.word	0x10707dbc

0800081c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C3_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C3_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C3_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C3_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C3_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_I2C3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_I2C3_Init+0x74>)
 8000858:	f002 fa90 	bl	8002d7c <HAL_I2C_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 faeb 	bl	8000e3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_I2C3_Init+0x74>)
 800086a:	f002 ffaf 	bl	80037cc <HAL_I2CEx_ConfigAnalogFilter>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 fae2 	bl	8000e3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_I2C3_Init+0x74>)
 800087c:	f002 fff1 	bl	8003862 <HAL_I2CEx_ConfigDigitalFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 fad9 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20003b74 	.word	0x20003b74
 8000894:	40005c00 	.word	0x40005c00
 8000898:	10707dbc 	.word	0x10707dbc

0800089c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09c      	sub	sp, #112	; 0x70
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2250      	movs	r2, #80	; 0x50
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f011 fc5d 	bl	801217c <memset>
  if(i2cHandle->Instance==I2C1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2d      	ldr	r2, [pc, #180]	; (800097c <HAL_I2C_MspInit+0xe0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d127      	bne.n	800091c <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008cc:	2304      	movs	r3, #4
 80008ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f006 fb5e 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008e6:	f000 faa9 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2002      	movs	r0, #2
 80008ec:	f7ff ff24 	bl	8000738 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80008f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f6:	2312      	movs	r3, #18
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000902:	2304      	movs	r3, #4
 8000904:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800090a:	4619      	mov	r1, r3
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <HAL_I2C_MspInit+0xe4>)
 800090e:	f002 f889 	bl	8002a24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000912:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000916:	f7ff ff28 	bl	800076a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800091a:	e02a      	b.n	8000972 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <HAL_I2C_MspInit+0xe8>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d125      	bne.n	8000972 <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000926:	2308      	movs	r3, #8
 8000928:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800092a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4618      	mov	r0, r3
 8000936:	f006 fb31 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8000940:	f000 fa7c 	bl	8000e3c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	2004      	movs	r0, #4
 8000946:	f7ff fef7 	bl	8000738 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800094a:	2303      	movs	r3, #3
 800094c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800095a:	2304      	movs	r3, #4
 800095c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000962:	4619      	mov	r1, r3
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <HAL_I2C_MspInit+0xec>)
 8000966:	f002 f85d 	bl	8002a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800096a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800096e:	f7ff fefc 	bl	800076a <LL_APB1_GRP1_EnableClock>
}
 8000972:	bf00      	nop
 8000974:	3770      	adds	r7, #112	; 0x70
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40005400 	.word	0x40005400
 8000980:	48000400 	.word	0x48000400
 8000984:	40005c00 	.word	0x40005c00
 8000988:	48000800 	.word	0x48000800

0800098c <LL_AHB3_GRP1_EnableClock>:
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800099a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80009a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_IPCC_Init+0x20>)
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <MX_IPCC_Init+0x24>)
 80009c8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_IPCC_Init+0x20>)
 80009cc:	f002 ff96 	bl	80038fc <HAL_IPCC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80009d6:	f000 fa31 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20003c0c 	.word	0x20003c0c
 80009e4:	58000c00 	.word	0x58000c00

080009e8 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <HAL_IPCC_MspInit+0x24>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d103      	bne.n	8000a02 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80009fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009fe:	f7ff ffc5 	bl	800098c <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	58000c00 	.word	0x58000c00

08000a10 <ledStartupSequence>:
{
  HAL_GPIO_TogglePin(GPIO_PORT_DONGLE[Led], GPIO_PIN_DONGLE[Led]);
}
#endif

void ledStartupSequence(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000a14:	4864      	ldr	r0, [pc, #400]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a16:	f000 f8ed 	bl	8000bf4 <resetColor>

	receivedColor.colors_indiv.left_front_b = 255;
 8000a1a:	4b63      	ldr	r3, [pc, #396]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	705a      	strb	r2, [r3, #1]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000a20:	4b62      	ldr	r3, [pc, #392]	; (8000bac <ledStartupSequence+0x19c>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	495f      	ldr	r1, [pc, #380]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a2a:	f00d fa19 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor););
	osDelay(LED_START_SEQ_INTERVAL);
 8000a2e:	20c8      	movs	r0, #200	; 0xc8
 8000a30:	f00d f80d 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.left_front_b = 0;
 8000a34:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	705a      	strb	r2, [r3, #1]
	receivedColor.colors_indiv.left_front_g = 255;
 8000a3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	701a      	strb	r2, [r3, #0]

	receivedColor.colors_indiv.left_top_b = 255;
 8000a40:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	709a      	strb	r2, [r3, #2]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000a46:	4b59      	ldr	r3, [pc, #356]	; (8000bac <ledStartupSequence+0x19c>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4956      	ldr	r1, [pc, #344]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a50:	f00d fa06 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000a54:	20c8      	movs	r0, #200	; 0xc8
 8000a56:	f00c fffa 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.left_front_g = 0;
 8000a5a:	4b53      	ldr	r3, [pc, #332]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
	receivedColor.colors_indiv.left_front_r = 255;
 8000a60:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a62:	22ff      	movs	r2, #255	; 0xff
 8000a64:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_b = 0;
 8000a66:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	709a      	strb	r2, [r3, #2]
	receivedColor.colors_indiv.left_top_g = 255;
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	70da      	strb	r2, [r3, #3]

	receivedColor.colors_indiv.left_side_b = 255;
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	711a      	strb	r2, [r3, #4]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000a78:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <ledStartupSequence+0x19c>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4949      	ldr	r1, [pc, #292]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a82:	f00d f9ed 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000a86:	20c8      	movs	r0, #200	; 0xc8
 8000a88:	f00c ffe1 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.left_front_r = 0;
 8000a8c:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	719a      	strb	r2, [r3, #6]

	receivedColor.colors_indiv.left_top_g = 0;
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	70da      	strb	r2, [r3, #3]
	receivedColor.colors_indiv.left_top_r = 255;
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <ledStartupSequence+0x198>)
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_b = 0;
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.left_side_g = 255;
 8000aa4:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aa6:	22ff      	movs	r2, #255	; 0xff
 8000aa8:	715a      	strb	r2, [r3, #5]

	receivedColor.colors_indiv.right_side_b = 255;
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <ledStartupSequence+0x19c>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	493b      	ldr	r1, [pc, #236]	; (8000ba8 <ledStartupSequence+0x198>)
 8000aba:	f00d f9d1 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000abe:	20c8      	movs	r0, #200	; 0xc8
 8000ac0:	f00c ffc5 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.left_top_r = 0;
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	71da      	strb	r2, [r3, #7]

	receivedColor.colors_indiv.left_side_g = 0;
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <ledStartupSequence+0x198>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.left_side_r = 255;
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_b = 0;
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	735a      	strb	r2, [r3, #13]
	receivedColor.colors_indiv.right_side_g = 255;
 8000adc:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	739a      	strb	r2, [r3, #14]

	receivedColor.colors_indiv.right_top_b = 255;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <ledStartupSequence+0x198>)
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	72da      	strb	r2, [r3, #11]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <ledStartupSequence+0x19c>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2200      	movs	r2, #0
 8000af0:	492d      	ldr	r1, [pc, #180]	; (8000ba8 <ledStartupSequence+0x198>)
 8000af2:	f00d f9b5 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000af6:	20c8      	movs	r0, #200	; 0xc8
 8000af8:	f00c ffa9 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.left_side_r = 0;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <ledStartupSequence+0x198>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	721a      	strb	r2, [r3, #8]

	receivedColor.colors_indiv.right_side_g = 0;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.right_side_r = 255;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_b = 0;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	72da      	strb	r2, [r3, #11]
	receivedColor.colors_indiv.right_top_g = 255;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	731a      	strb	r2, [r3, #12]

	receivedColor.colors_indiv.right_front_b = 255;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	729a      	strb	r2, [r3, #10]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <ledStartupSequence+0x19c>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b2a:	f00d f999 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b2e:	20c8      	movs	r0, #200	; 0xc8
 8000b30:	f00c ff8d 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.right_side_r = 0;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	745a      	strb	r2, [r3, #17]

	receivedColor.colors_indiv.right_top_g = 0;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	731a      	strb	r2, [r3, #12]
	receivedColor.colors_indiv.right_top_r = 255;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_b = 0;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	729a      	strb	r2, [r3, #10]
	receivedColor.colors_indiv.right_front_g = 255;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	725a      	strb	r2, [r3, #9]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <ledStartupSequence+0x19c>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b5c:	f00d f980 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b60:	20c8      	movs	r0, #200	; 0xc8
 8000b62:	f00c ff74 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.right_top_r = 0;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	741a      	strb	r2, [r3, #16]

	receivedColor.colors_indiv.right_front_g = 0;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	725a      	strb	r2, [r3, #9]
	receivedColor.colors_indiv.right_front_r = 255;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <ledStartupSequence+0x19c>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b82:	f00d f96d 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);
	osDelay(LED_START_SEQ_INTERVAL);
 8000b86:	20c8      	movs	r0, #200	; 0xc8
 8000b88:	f00c ff61 	bl	800da4e <osDelay>

	receivedColor.colors_indiv.right_front_r = 0;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	73da      	strb	r2, [r3, #15]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <ledStartupSequence+0x19c>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4903      	ldr	r1, [pc, #12]	; (8000ba8 <ledStartupSequence+0x198>)
 8000b9c:	f00d f960 	bl	800de60 <osMessageQueuePut>
//	FrontLightsSet(&receivedColor);

	ledDisconnectNotification();
 8000ba0:	f000 f806 	bl	8000bb0 <ledDisconnectNotification>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20003c60 	.word	0x20003c60
 8000bac:	2000020c 	.word	0x2000020c

08000bb0 <ledDisconnectNotification>:

void ledDisconnectNotification(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	resetColor(&receivedColor);
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bb6:	f000 f81d 	bl	8000bf4 <resetColor>

	receivedColor.colors_indiv.left_side_g = 0;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	715a      	strb	r2, [r3, #5]
	receivedColor.colors_indiv.right_side_g = 0;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	739a      	strb	r2, [r3, #14]
	receivedColor.colors_indiv.left_side_b = 50;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bc8:	2232      	movs	r2, #50	; 0x32
 8000bca:	711a      	strb	r2, [r3, #4]
	receivedColor.colors_indiv.right_side_b = 50;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bce:	2232      	movs	r2, #50	; 0x32
 8000bd0:	735a      	strb	r2, [r3, #13]
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <ledDisconnectNotification+0x40>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4904      	ldr	r1, [pc, #16]	; (8000bec <ledDisconnectNotification+0x3c>)
 8000bdc:	f00d f940 	bl	800de60 <osMessageQueuePut>
	osDelay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f00c ff34 	bl	800da4e <osDelay>
//	FrontLightsSet(&receivedColor);
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20003c60 	.word	0x20003c60
 8000bf0:	2000020c 	.word	0x2000020c

08000bf4 <resetColor>:
	receivedColor.colors_indiv.left_front_r = 255;
	receivedColor.colors_indiv.right_front_r = 255;
	osMessageQueuePut(lightsComplexQueueHandle, &receivedColor, 0, 0);
}

void resetColor(union ColorComplex * colorComplex){
 8000bf4:	b4b0      	push	{r4, r5, r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	memcpy(colorComplex,&EmptyColorComplex,sizeof(union ColorComplex));;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <resetColor+0x28>)
 8000c00:	461d      	mov	r5, r3
 8000c02:	4614      	mov	r4, r2
 8000c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c06:	6028      	str	r0, [r5, #0]
 8000c08:	6069      	str	r1, [r5, #4]
 8000c0a:	60aa      	str	r2, [r5, #8]
 8000c0c:	60eb      	str	r3, [r5, #12]
 8000c0e:	8823      	ldrh	r3, [r4, #0]
 8000c10:	822b      	strh	r3, [r5, #16]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bcb0      	pop	{r4, r5, r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	080122f4 	.word	0x080122f4

08000c20 <LL_RCC_LSE_SetDriveCapability>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c30:	f023 0218 	bic.w	r2, r3, #24
 8000c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c50:	f000 ff12 	bl	8001a78 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8000c54:	f7ff fc30 	bl	80004b8 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c58:	f000 f822 	bl	8000ca0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000c5c:	f000 f8a0 	bl	8000da0 <_Z24PeriphCommonClock_Configv>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8000c60:	f7ff feae 	bl	80009c0 <MX_IPCC_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c64:	f7ff fd10 	bl	8000688 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000c68:	f7ff faa4 	bl	80001b4 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000c6c:	f7ff fd96 	bl	800079c <MX_I2C1_Init>
	MX_I2C3_Init();
 8000c70:	f7ff fdd4 	bl	800081c <MX_I2C3_Init>
	MX_RF_Init();
 8000c74:	f000 f8e7 	bl	8000e46 <MX_RF_Init>
	MX_RTC_Init();
 8000c78:	f000 f916 	bl	8000ea8 <MX_RTC_Init>
	MX_SAI1_Init();
 8000c7c:	f000 f984 	bl	8000f88 <MX_SAI1_Init>
	MX_SPI1_Init();
 8000c80:	f000 fa4c 	bl	800111c <MX_SPI1_Init>
	MX_SPI2_Init();
 8000c84:	f000 fa88 	bl	8001198 <MX_SPI2_Init>
	MX_TIM16_Init();
 8000c88:	f000 fdfa 	bl	8001880 <MX_TIM16_Init>
	MX_USB_Device_Init();
 8000c8c:	f010 f8ce 	bl	8010e2c <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8000c90:	f00c fd32 	bl	800d6f8 <osKernelInitialize>
	MX_FREERTOS_Init();
 8000c94:	f7ff fc9a 	bl	80005cc <_Z16MX_FREERTOS_Initv>
	/* Start scheduler */
	osKernelStart();
 8000c98:	f00c fd52 	bl	800d740 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c9c:	e7fe      	b.n	8000c9c <main+0x50>
	...

08000ca0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
extern "C" void SystemClock_Config(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b09a      	sub	sp, #104	; 0x68
 8000ca4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2248      	movs	r2, #72	; 0x48
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f011 fa64 	bl	801217c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000cc6:	f004 fbd3 	bl	8005470 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff ffa8 	bl	8000c20 <LL_RCC_LSE_SetDriveCapability>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <SystemClock_Config+0xfc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cd8:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <SystemClock_Config+0xfc>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <SystemClock_Config+0xfc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000cec:	232f      	movs	r3, #47	; 0x2f
 8000cee:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI1 | RCC_OSCILLATORTYPE_HSE
			| RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d10:	2305      	movs	r3, #5
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 8000d20:	2320      	movs	r3, #32
 8000d22:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d28:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d2e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d34:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 ff48 	bl	8005bd0 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xb4>
		Error_Handler();
 8000d50:	f000 f874 	bl	8000e3c <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000d54:	236f      	movs	r3, #111	; 0x6f
 8000d56:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2103      	movs	r1, #3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 fab7 	bl	80062e8 <HAL_RCC_ClockConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bf14      	ite	ne
 8000d80:	2301      	movne	r3, #1
 8000d82:	2300      	moveq	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xee>
		Error_Handler();
 8000d8a:	f000 f857 	bl	8000e3c <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000d8e:	f006 fe92 	bl	8007ab6 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000d92:	bf00      	nop
 8000d94:	3768      	adds	r7, #104	; 0x68
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58000400 	.word	0x58000400

08000da0 <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b094      	sub	sp, #80	; 0x50
 8000da4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000da6:	463b      	mov	r3, r7
 8000da8:	2250      	movs	r2, #80	; 0x50
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f011 f9e5 	bl	801217c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 8000db2:	f44f 5355 	mov.w	r3, #13632	; 0x3540
 8000db6:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP | RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_USB
			| RCC_PERIPHCLK_ADC;
	PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000db8:	2318      	movs	r3, #24
 8000dba:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc6:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000dc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dcc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_Z24PeriphCommonClock_Configv+0x74>)
 8000dd0:	617b      	str	r3, [r7, #20]
			| RCC_PLLSAI1_USBCLK | RCC_PLLSAI1_ADCCLK;
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000de2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000dec:	2310      	movs	r3, #16
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000df0:	463b      	mov	r3, r7
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 f8d2 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf14      	ite	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	2300      	moveq	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <_Z24PeriphCommonClock_Configv+0x6c>
		Error_Handler();
 8000e08:	f000 f818 	bl	8000e3c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8000e0c:	bf00      	nop
 8000e0e:	3750      	adds	r7, #80	; 0x50
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	11010000 	.word	0x11010000

08000e18 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e2a:	f000 fe45 	bl	8001ab8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>

08000e46 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_RCC_EnableRTC>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_APB1_GRP1_EnableClock>:
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_RTC_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000eba:	220f      	movs	r2, #15
 8000ebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000ec0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000ec4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_RTC_Init+0x4c>)
 8000ee0:	f007 f8ae 	bl	8008040 <HAL_RTC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000eea:	f7ff ffa7 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20003c88 	.word	0x20003c88
 8000ef8:	40002800 	.word	0x40002800

08000efc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b096      	sub	sp, #88	; 0x58
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	2250      	movs	r2, #80	; 0x50
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f011 f935 	bl	801217c <memset>
  if(rtcHandle->Instance==RTC)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_RTC_MspInit+0x54>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d115      	bne.n	8000f48 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f20:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f26:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 f835 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f38:	f7ff ff80 	bl	8000e3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3c:	f7ff ff8a 	bl	8000e54 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f44:	f7ff ff97 	bl	8000e76 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3758      	adds	r7, #88	; 0x58
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40002800 	.word	0x40002800

08000f54 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f78:	68fb      	ldr	r3, [r7, #12]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <MX_SAI1_Init+0x6c>)
 8000f90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <MX_SAI1_Init+0x70>)
 8000fba:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_SAI1_Init+0x68>)
 8000fde:	f007 f91d 	bl	800821c <HAL_SAI_InitProtocol>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8000fe8:	f7ff ff28 	bl	8000e3c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20003cac 	.word	0x20003cac
 8000ff4:	40015404 	.word	0x40015404
 8000ff8:	0002ee00 	.word	0x0002ee00

08000ffc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <HAL_SAI_MspInit+0x78>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12d      	bne.n	800106a <HAL_SAI_MspInit+0x6e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_SAI_MspInit+0x7c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001016:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800101a:	f7ff ff9b 	bl	8000f54 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_SAI_MspInit+0x7c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_SAI_MspInit+0x7c>)
 8001026:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB13     ------> SAI1_SCK_A
    PB12     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001028:	2308      	movs	r3, #8
 800102a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001038:	230d      	movs	r3, #13
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <HAL_SAI_MspInit+0x80>)
 8001044:	f001 fcee 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001048:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800104c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800105a:	230d      	movs	r3, #13
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <HAL_SAI_MspInit+0x84>)
 8001066:	f001 fcdd 	bl	8002a24 <HAL_GPIO_Init>

    }
}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40015404 	.word	0x40015404
 8001078:	2000021c 	.word	0x2000021c
 800107c:	48000800 	.word	0x48000800
 8001080:	48000400 	.word	0x48000400

08001084 <LL_AHB2_GRP1_EnableClock>:
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4313      	orrs	r3, r2
 800109a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800109c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_APB1_GRP1_EnableClock>:
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_APB2_GRP1_EnableClock>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_SPI1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_SPI1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_SPI1_Init+0x74>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_SPI1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_SPI1_Init+0x74>)
 8001136:	f44f 7240 	mov.w	r2, #768	; 0x300
 800113a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_SPI1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_SPI1_Init+0x74>)
 800114a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800114e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_SPI1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SPI1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_SPI1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SPI1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_SPI1_Init+0x74>)
 800116a:	2207      	movs	r2, #7
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SPI1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_SPI1_Init+0x74>)
 8001176:	2208      	movs	r2, #8
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_SPI1_Init+0x74>)
 800117c:	f007 fb80 	bl	8008880 <HAL_SPI_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f7ff fe59 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20003da8 	.word	0x20003da8
 8001194:	40013000 	.word	0x40013000

08001198 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_SPI2_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <MX_SPI2_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_SPI2_Init+0x74>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_SPI2_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_SPI2_Init+0x74>)
 80011b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_SPI2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_SPI2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_SPI2_Init+0x74>)
 80011c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SPI2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_SPI2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SPI2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_SPI2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SPI2_Init+0x74>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_SPI2_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SPI2_Init+0x74>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_SPI2_Init+0x74>)
 80011f8:	f007 fb42 	bl	8008880 <HAL_SPI_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001202:	f7ff fe1b 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20003d44 	.word	0x20003d44
 8001210:	40003800 	.word	0x40003800

08001214 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_SPI_MspInit+0xe4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12c      	bne.n	8001290 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001236:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800123a:	f7ff ff55 	bl	80010e8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2002      	movs	r0, #2
 8001240:	f7ff ff20 	bl	8001084 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff1d 	bl	8001084 <LL_AHB2_GRP1_EnableClock>
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3;
 800124a:	2338      	movs	r3, #56	; 0x38
 800124c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125a:	2305      	movs	r3, #5
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4619      	mov	r1, r3
 8001264:	4825      	ldr	r0, [pc, #148]	; (80012fc <HAL_SPI_MspInit+0xe8>)
 8001266:	f001 fbdd 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800126a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800127c:	2305      	movs	r3, #5
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f001 fbcb 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800128e:	e02f      	b.n	80012f0 <HAL_SPI_MspInit+0xdc>
  else if(spiHandle->Instance==SPI2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_SPI_MspInit+0xec>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12a      	bne.n	80012f0 <HAL_SPI_MspInit+0xdc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800129a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800129e:	f7ff ff0a 	bl	80010b6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	2008      	movs	r0, #8
 80012a4:	f7ff feee 	bl	8001084 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff feeb 	bl	8001084 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ae:	2303      	movs	r3, #3
 80012b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012be:	2305      	movs	r3, #5
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <HAL_SPI_MspInit+0xf0>)
 80012ca:	f001 fbab 	bl	8002a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e0:	2305      	movs	r3, #5
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <HAL_SPI_MspInit+0xe8>)
 80012ec:	f001 fb9a 	bl	8002a24 <HAL_GPIO_Init>
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013000 	.word	0x40013000
 80012fc:	48000400 	.word	0x48000400
 8001300:	40003800 	.word	0x40003800
 8001304:	48000c00 	.word	0x48000c00

08001308 <LL_AHB3_GRP1_EnableClock>:
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800133e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001342:	f7ff ffe1 	bl	8001308 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	210f      	movs	r1, #15
 800134a:	f06f 0001 	mvn.w	r0, #1
 800134e:	f001 fb41 	bl	80029d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2105      	movs	r1, #5
 8001356:	202e      	movs	r0, #46	; 0x2e
 8001358:	f001 fb3c 	bl	80029d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800135c:	202e      	movs	r0, #46	; 0x2e
 800135e:	f001 fb53 	bl	8002a08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}

08001366 <LL_APB2_GRP1_EnableClock>:
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4313      	orrs	r3, r2
 800137c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001382:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4013      	ands	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	2019      	movs	r0, #25
 80013ae:	f001 fb11 	bl	80029d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013b2:	2019      	movs	r0, #25
 80013b4:	f001 fb28 	bl	8002a08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013bc:	f7ff ffd3 	bl	8001366 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c0:	f107 0208 	add.w	r2, r7, #8
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 f962 	bl	8006694 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013d0:	f005 f94a 	bl	8006668 <HAL_RCC_GetPCLK2Freq>
 80013d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <HAL_InitTick+0x8c>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	0c9b      	lsrs	r3, r3, #18
 80013e0:	3b01      	subs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_InitTick+0x90>)
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_InitTick+0x94>)
 80013e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_InitTick+0x90>)
 80013ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <HAL_InitTick+0x90>)
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_InitTick+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_InitTick+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <HAL_InitTick+0x90>)
 8001406:	f007 fade 	bl	80089c6 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d104      	bne.n	800141a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_InitTick+0x90>)
 8001412:	f007 fb2f 	bl	8008a74 <HAL_TIM_Base_Start_IT>
 8001416:	4603      	mov	r3, r0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3730      	adds	r7, #48	; 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	431bde83 	.word	0x431bde83
 8001428:	20003e0c 	.word	0x20003e0c
 800142c:	40012c00 	.word	0x40012c00

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <USB_LP_IRQHandler+0x10>)
 8001462:	f002 fbd8 	bl	8003c16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200053b8 	.word	0x200053b8

08001470 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001476:	f007 fbac 	bl	8008bd2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800147c:	f007 fba9 	bl	8008bd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20003e0c 	.word	0x20003e0c
 8001488:	20003e58 	.word	0x20003e58

0800148c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001490:	f001 fc50 	bl	8002d34 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <SystemInit+0x98>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <SystemInit+0x98>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <SystemInit+0x9c>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e2:	f023 0305 	bic.w	r3, r3, #5
 80014e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <SystemInit+0xa0>)
 8001504:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <SystemInit+0xa0>)
 800150c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	faf6fefb 	.word	0xfaf6fefb
 8001538:	22041000 	.word	0x22041000

0800153c <_ZN8CALIPILEC1Ev>:
#define cycTime_60ms  0x01
#define cycTime_120ms 0x02
#define cycTime_140ms 0x03


class CALIPILE
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	721a      	strb	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <Thermopile_Task>:
void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp);

uint16_t thermIdx;
uint32_t thermID;

void Thermopile_Task(void *argument) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	SensorPacket *packet = NULL;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
	uint32_t flags;

	initThermopiles(&tp_nose_tip,		THERMOPLE_NOSE_TIP,			&hi2c1,	THERMOPLE_NOSE_TIP_ID);
 800156c:	2301      	movs	r3, #1
 800156e:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <Thermopile_Task+0x144>)
 8001570:	210c      	movs	r1, #12
 8001572:	484d      	ldr	r0, [pc, #308]	; (80016a8 <Thermopile_Task+0x148>)
 8001574:	f000 f8b0 	bl	80016d8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_nose_bridge,	THERMOPLE_NOSE_BRIDGE,		&hi2c1, THERMOPLE_NOSE_BRIDGE_ID);
 8001578:	2302      	movs	r3, #2
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <Thermopile_Task+0x144>)
 800157c:	210d      	movs	r1, #13
 800157e:	484b      	ldr	r0, [pc, #300]	; (80016ac <Thermopile_Task+0x14c>)
 8001580:	f000 f8aa 	bl	80016d8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_front,	THERMOPLE_TEMPLE_FRONT_ADDR,&hi2c3, THERMOPLE_TEMPLE_FRONT_ADDR_ID);
 8001584:	2303      	movs	r3, #3
 8001586:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <Thermopile_Task+0x150>)
 8001588:	210f      	movs	r1, #15
 800158a:	484a      	ldr	r0, [pc, #296]	; (80016b4 <Thermopile_Task+0x154>)
 800158c:	f000 f8a4 	bl	80016d8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_mid,		THERMOPLE_TEMPLE_MID_ADDR,	&hi2c3, THERMOPLE_TEMPLE_MID_ADDR_ID);
 8001590:	2304      	movs	r3, #4
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <Thermopile_Task+0x150>)
 8001594:	210e      	movs	r1, #14
 8001596:	4848      	ldr	r0, [pc, #288]	; (80016b8 <Thermopile_Task+0x158>)
 8001598:	f000 f89e 	bl	80016d8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>
	initThermopiles(&tp_temple_back,	THERMOPLE_TEMPLE_BACK_ADDR,	&hi2c3, THERMOPLE_TEMPLE_BACK_ADDR_ID);
 800159c:	2305      	movs	r3, #5
 800159e:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <Thermopile_Task+0x150>)
 80015a0:	210c      	movs	r1, #12
 80015a2:	4846      	ldr	r0, [pc, #280]	; (80016bc <Thermopile_Task+0x15c>)
 80015a4:	f000 f898 	bl	80016d8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>

	header.payloadLength = MAX_THERMOPILE_SAMPLES_PACKET
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <Thermopile_Task+0x160>)
 80015aa:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 80015ae:	60da      	str	r2, [r3, #12]
			* sizeof(thermopile_packet);
	header.reserved[0] = THERMOPILE_SAMPLE_PERIOD_MS;
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <Thermopile_Task+0x160>)
 80015b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b6:	611a      	str	r2, [r3, #16]
	header.reserved[1] = THERMOPILE_CNT;
 80015b8:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <Thermopile_Task+0x160>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	615a      	str	r2, [r3, #20]

	thermIdx = 0;
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <Thermopile_Task+0x164>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	801a      	strh	r2, [r3, #0]
	thermID = 0;
 80015c4:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <Thermopile_Task+0x168>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

	periodicThermopileTimer_id = osTimerNew(triggerThermopileSample,
 80015ca:	2300      	movs	r3, #0
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	483e      	ldr	r0, [pc, #248]	; (80016cc <Thermopile_Task+0x16c>)
 80015d2:	f00c fa6d 	bl	800dab0 <osTimerNew>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a3d      	ldr	r2, [pc, #244]	; (80016d0 <Thermopile_Task+0x170>)
 80015da:	6013      	str	r3, [r2, #0]
			osTimerPeriodic, NULL, NULL);
	osTimerStart(periodicThermopileTimer_id, THERMOPILE_SAMPLE_PERIOD_MS);
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <Thermopile_Task+0x170>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00c fadf 	bl	800dba8 <osTimerStart>

	while (1) {

		flags = osThreadFlagsWait(GRAB_SAMPLE_BIT | TERMINATE_THREAD_BIT,
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ee:	2100      	movs	r1, #0
 80015f0:	f44f 7040 	mov.w	r0, #768	; 0x300
 80015f4:	f00c f9aa 	bl	800d94c <osThreadFlagsWait>
 80015f8:	60b8      	str	r0, [r7, #8]
				osFlagsWaitAny, osWaitForever);

		if ((flags & GRAB_SAMPLE_BIT) == GRAB_SAMPLE_BIT) {
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d040      	beq.n	8001686 <Thermopile_Task+0x126>

			// sample nose
			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_tip);
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <Thermopile_Task+0x164>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4a30      	ldr	r2, [pc, #192]	; (80016d4 <Thermopile_Task+0x174>)
 8001614:	4413      	add	r3, r2
 8001616:	4924      	ldr	r1, [pc, #144]	; (80016a8 <Thermopile_Task+0x148>)
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f880 	bl	800171e <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			grabThermopileSamples(&thermopileData[thermIdx], &tp_nose_bridge);
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <Thermopile_Task+0x164>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <Thermopile_Task+0x174>)
 800162e:	4413      	add	r3, r2
 8001630:	491e      	ldr	r1, [pc, #120]	; (80016ac <Thermopile_Task+0x14c>)
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f873 	bl	800171e <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);

			// sample temple
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_front);
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <Thermopile_Task+0x164>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <Thermopile_Task+0x174>)
 8001648:	4413      	add	r3, r2
 800164a:	491a      	ldr	r1, [pc, #104]	; (80016b4 <Thermopile_Task+0x154>)
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f866 	bl	800171e <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);
//
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_mid);
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <Thermopile_Task+0x164>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <Thermopile_Task+0x174>)
 8001662:	4413      	add	r3, r2
 8001664:	4914      	ldr	r1, [pc, #80]	; (80016b8 <Thermopile_Task+0x158>)
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f859 	bl	800171e <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);
//
			grabThermopileSamples(&thermopileData[thermIdx], &tp_temple_back);
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <Thermopile_Task+0x164>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <Thermopile_Task+0x174>)
 800167c:	4413      	add	r3, r2
 800167e:	490f      	ldr	r1, [pc, #60]	; (80016bc <Thermopile_Task+0x15c>)
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f84c 	bl	800171e <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>
//			queueThermopilePkt(&thermopileData[thermIdx]);
		}

		if ((flags & TERMINATE_THREAD_BIT) == TERMINATE_THREAD_BIT) {
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0ac      	beq.n	80015ea <Thermopile_Task+0x8a>
			osTimerDelete(periodicThermopileTimer_id);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <Thermopile_Task+0x170>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f00c fab5 	bl	800dc04 <osTimerDelete>
			break;
 800169a:	bf00      	nop
		}
	}

}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20003bc0 	.word	0x20003bc0
 80016a8:	20000410 	.word	0x20000410
 80016ac:	20000434 	.word	0x20000434
 80016b0:	20003b74 	.word	0x20003b74
 80016b4:	20000458 	.word	0x20000458
 80016b8:	2000047c 	.word	0x2000047c
 80016bc:	200004a0 	.word	0x200004a0
 80016c0:	200003e8 	.word	0x200003e8
 80016c4:	200004c4 	.word	0x200004c4
 80016c8:	200004c8 	.word	0x200004c8
 80016cc:	08001795 	.word	0x08001795
 80016d0:	2000040c 	.word	0x2000040c
 80016d4:	20000220 	.word	0x20000220

080016d8 <_Z15initThermopilesP8CALIPILEhP19__I2C_HandleTypeDefh>:

void initThermopiles(CALIPILE *tp, uint8_t address, I2C_HandleTypeDef* i2c_handle, uint8_t descriptor){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	460b      	mov	r3, r1
 80016e6:	72fb      	strb	r3, [r7, #11]
 80016e8:	4613      	mov	r3, r2
 80016ea:	72bb      	strb	r3, [r7, #10]

	uint16_t Tcounts = 0x83; // set threshold for over temperature interrupt, 0x83 == 67072 counts
 80016ec:	2383      	movs	r3, #131	; 0x83
 80016ee:	82fb      	strh	r3, [r7, #22]
	uint32_t flags = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
	//	uint8_t intStatus;


	tp->setup((uint8_t) address, i2c_handle, descriptor);
 80016f4:	7abb      	ldrb	r3, [r7, #10]
 80016f6:	7af9      	ldrb	r1, [r7, #11]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f00b fd00 	bl	800d100 <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>
	tp->wake();
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f00b fd18 	bl	800d136 <_ZN8CALIPILE4wakeEv>
	tp->readEEPROM(); // Verify protocol number and checksum and get calibration constants
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f00b fd26 	bl	800d158 <_ZN8CALIPILE10readEEPROMEv>
	//  tp_outer.initMotion(tcLP1, tcLP2, LPsource, cycTime); // configure presence and motion interrupts
	tp->initTempThr(Tcounts);  // choose something ~5% above TPAMB
 800170c:	8afb      	ldrh	r3, [r7, #22]
 800170e:	4619      	mov	r1, r3
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f00b fe1f 	bl	800d354 <_ZN8CALIPILE11initTempThrEt>
	// read interrupt status register(s) to unlatch interrupt before entering main loop
//	intStatus  = tp.checkIntStatus(); //dont do if not using interrupts

}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_Z21grabThermopileSamplesP18thermopile_packetsP8CALIPILE>:
		thermID++;
		thermIdx = 0;
	}
}

void grabThermopileSamples(thermopile_packet *data, CALIPILE *tp) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
	data->descriptor = tp->descriptor;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	701a      	strb	r2, [r3, #0]
	data->timestamp = HAL_GetTick();
 8001730:	f000 f9d6 	bl	8001ae0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	605a      	str	r2, [r3, #4]
	data->ambientRaw = tp->getTPAMB();
 800173a:	6838      	ldr	r0, [r7, #0]
 800173c:	f00b fe4a 	bl	800d3d4 <_ZN8CALIPILE8getTPAMBEv>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	811a      	strh	r2, [r3, #8]
	data->objectRaw = tp->getTPOBJ();
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f00b fe63 	bl	800d414 <_ZN8CALIPILE8getTPOBJEv>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
	data->ambientTemp = tp->getTamb(data->ambientRaw);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	891b      	ldrh	r3, [r3, #8]
 8001758:	4619      	mov	r1, r3
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f00b fe82 	bl	800d464 <_ZN8CALIPILE7getTambEt>
 8001760:	eef0 7a40 	vmov.f32	s15, s0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a04 	vstr	s15, [r3, #16]
	data->objectTemp = tp->getTobj(data->objectRaw, data->ambientTemp);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edd3 7a04 	vldr	s15, [r3, #16]
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	4611      	mov	r1, r2
 800177a:	6838      	ldr	r0, [r7, #0]
 800177c:	f00b fea4 	bl	800d4c8 <_ZN8CALIPILE7getTobjEmf>
 8001780:	eef0 7a40 	vmov.f32	s15, s0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <triggerThermopileSample>:

static void triggerThermopileSample(void *argument) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(thermopileTaskHandle, GRAB_SAMPLE_BIT);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <triggerThermopileSample+0x20>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00c f883 	bl	800d8b0 <osThreadFlagsSet>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000214 	.word	0x20000214

080017b8 <_Z41__static_initialization_and_destruction_0ii>:
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d113      	bne.n	80017f0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10e      	bne.n	80017f0 <_Z41__static_initialization_and_destruction_0ii+0x38>
CALIPILE tp_nose_tip;
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80017d4:	f7ff feb2 	bl	800153c <_ZN8CALIPILEC1Ev>
CALIPILE tp_nose_bridge;
 80017d8:	4808      	ldr	r0, [pc, #32]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80017da:	f7ff feaf 	bl	800153c <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_front;
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80017e0:	f7ff feac 	bl	800153c <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_mid;
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80017e6:	f7ff fea9 	bl	800153c <_ZN8CALIPILEC1Ev>
CALIPILE tp_temple_back;
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80017ec:	f7ff fea6 	bl	800153c <_ZN8CALIPILEC1Ev>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000410 	.word	0x20000410
 80017fc:	20000434 	.word	0x20000434
 8001800:	20000458 	.word	0x20000458
 8001804:	2000047c 	.word	0x2000047c
 8001808:	200004a0 	.word	0x200004a0

0800180c <_GLOBAL__sub_I_periodicThermopileTimer_id>:
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
 8001810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff ffcf 	bl	80017b8 <_Z41__static_initialization_and_destruction_0ii>
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_AHB2_GRP1_EnableClock>:
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800182a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001840:	68fb      	ldr	r3, [r7, #12]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_APB2_GRP1_EnableClock>:
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001886:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2234      	movs	r2, #52	; 0x34
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f010 fc6b 	bl	801217c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_TIM16_Init+0xec>)
 80018a8:	4a31      	ldr	r2, [pc, #196]	; (8001970 <MX_TIM16_Init+0xf0>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_TIM16_Init+0xec>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <MX_TIM16_Init+0xec>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80018b8:	4b2c      	ldr	r3, [pc, #176]	; (800196c <MX_TIM16_Init+0xec>)
 80018ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <MX_TIM16_Init+0xec>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <MX_TIM16_Init+0xec>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <MX_TIM16_Init+0xec>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018d2:	4826      	ldr	r0, [pc, #152]	; (800196c <MX_TIM16_Init+0xec>)
 80018d4:	f007 f877 	bl	80089c6 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018de:	f7ff faad 	bl	8000e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018e2:	4822      	ldr	r0, [pc, #136]	; (800196c <MX_TIM16_Init+0xec>)
 80018e4:	f007 f914 	bl	8008b10 <HAL_TIM_PWM_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018ee:	f7ff faa5 	bl	8000e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f2:	2360      	movs	r3, #96	; 0x60
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018fe:	2300      	movs	r3, #0
 8001900:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001912:	2200      	movs	r2, #0
 8001914:	4619      	mov	r1, r3
 8001916:	4815      	ldr	r0, [pc, #84]	; (800196c <MX_TIM16_Init+0xec>)
 8001918:	f007 fa7a 	bl	8008e10 <HAL_TIM_PWM_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001922:	f7ff fa8b 	bl	8000e3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800193a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM16_Init+0xec>)
 800194e:	f007 fe7d 	bl	800964c <HAL_TIMEx_ConfigBreakDeadTime>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001958:	f7ff fa70 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM16_Init+0xec>)
 800195e:	f000 f825 	bl	80019ac <HAL_TIM_MspPostInit>

}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	; 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20003e58 	.word	0x20003e58
 8001970:	40014400 	.word	0x40014400

08001974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_TIM_Base_MspInit+0x34>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10b      	bne.n	800199e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001986:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800198a:	f7ff ff60 	bl	800184e <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	210f      	movs	r1, #15
 8001992:	2019      	movs	r0, #25
 8001994:	f001 f81e 	bl	80029d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001998:	2019      	movs	r0, #25
 800199a:	f001 f835 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40014400 	.word	0x40014400

080019ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_TIM_MspPostInit+0x54>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d113      	bne.n	80019f6 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2002      	movs	r0, #2
 80019d0:	f7ff ff24 	bl	800181c <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = BLINK_PWM_Pin;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80019e6:	230e      	movs	r3, #14
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLINK_PWM_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4619      	mov	r1, r3
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <HAL_TIM_MspPostInit+0x58>)
 80019f2:	f001 f817 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40014400 	.word	0x40014400
 8001a04:	48000400 	.word	0x48000400

08001a08 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a08:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0c:	3304      	adds	r3, #4

08001a0e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a10:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a12:	d3f9      	bcc.n	8001a08 <CopyDataInit>
  bx lr
 8001a14:	4770      	bx	lr

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a16:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a18:	3004      	adds	r0, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a1a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>
  bx lr
 8001a1e:	4770      	bx	lr

08001a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001a22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a24:	f7ff fd38 	bl	8001498 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopForever+0x8>)
 8001a2a:	490c      	ldr	r1, [pc, #48]	; (8001a5c <LoopForever+0xc>)
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <LoopForever+0x10>)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f7ff ffed 	bl	8001a0e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <LoopForever+0x14>)
 8001a36:	490c      	ldr	r1, [pc, #48]	; (8001a68 <LoopForever+0x18>)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f7ff ffee 	bl	8001a1a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a3e:	480b      	ldr	r0, [pc, #44]	; (8001a6c <LoopForever+0x1c>)
 8001a40:	490b      	ldr	r1, [pc, #44]	; (8001a70 <LoopForever+0x20>)
 8001a42:	2300      	movs	r3, #0
 8001a44:	f7ff ffe9 	bl	8001a1a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a48:	f010 fb66 	bl	8012118 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a4c:	f7ff f8fe 	bl	8000c4c <main>

08001a50 <LoopForever>:

LoopForever:
  b LoopForever
 8001a50:	e7fe      	b.n	8001a50 <LoopForever>
 8001a52:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a54:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	200001f0 	.word	0x200001f0
 8001a60:	08012498 	.word	0x08012498
  INIT_BSS _sbss, _ebss
 8001a64:	200001f0 	.word	0x200001f0
 8001a68:	200056ac 	.word	0x200056ac
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a6c:	20030000 	.word	0x20030000
 8001a70:	20030000 	.word	0x20030000

08001a74 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_Init+0x3c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <HAL_Init+0x3c>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8e:	2003      	movs	r0, #3
 8001a90:	f000 ff95 	bl	80029be <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a94:	200f      	movs	r0, #15
 8001a96:	f7ff fc7f 	bl	8001398 <HAL_InitTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	e001      	b.n	8001aaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa6:	f7ff fc48 	bl	800133a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	58004000 	.word	0x58004000

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2000000c 	.word	0x2000000c
 8001adc:	20003ea4 	.word	0x20003ea4

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20003ea4 	.word	0x20003ea4

08001af8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_GetTickPrio+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTickFreq+0x14>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	2000000c 	.word	0x2000000c

08001b28 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3360      	adds	r3, #96	; 0x60
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <LL_ADC_SetOffset+0x44>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	03fff000 	.word	0x03fff000

08001bd8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3360      	adds	r3, #96	; 0x60
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	; 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3330      	adds	r3, #48	; 0x30
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	211f      	movs	r1, #31
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 011f 	and.w	r1, r3, #31
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3314      	adds	r3, #20
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	0e5b      	lsrs	r3, r3, #25
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0d1b      	lsrs	r3, r3, #20
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2107      	movs	r1, #7
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0d1b      	lsrs	r3, r3, #20
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0318 	and.w	r3, r3, #24
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d0c:	40d9      	lsrs	r1, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	400b      	ands	r3, r1
 8001d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d16:	431a      	orrs	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	0007ffff 	.word	0x0007ffff

08001d30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6093      	str	r3, [r2, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001db8:	d101      	bne.n	8001dbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <LL_ADC_IsEnabled+0x18>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <LL_ADC_IsEnabled+0x1a>
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d101      	bne.n	8001e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e12e      	b.n	80020bc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7fe fa05 	bl	800027c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff65 	bl	8001d54 <LL_ADC_IsDeepPowerDownEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff4b 	bl	8001d30 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff80 	bl	8001da4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d115      	bne.n	8001ed6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff64 	bl	8001d7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_ADC_Init+0x284>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	4a83      	ldr	r2, [pc, #524]	; (80020c8 <HAL_ADC_Init+0x288>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff62 	bl	8001da4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff73 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 8001f0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80c7 	bne.w	80020aa <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 80c3 	bne.w	80020aa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f2c:	f043 0202 	orr.w	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff47 	bl	8001dcc <LL_ADC_IsEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f44:	4861      	ldr	r0, [pc, #388]	; (80020cc <HAL_ADC_Init+0x28c>)
 8001f46:	f7ff ff41 	bl	8001dcc <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4619      	mov	r1, r3
 8001f56:	485e      	ldr	r0, [pc, #376]	; (80020d0 <HAL_ADC_Init+0x290>)
 8001f58:	f7ff fde6 	bl	8001b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e5b      	ldrb	r3, [r3, #25]
 8001f60:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f66:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f6c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f72:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001f7c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d106      	bne.n	8001f9c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	3b01      	subs	r3, #1
 8001f94:	045b      	lsls	r3, r3, #17
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4b45      	ldr	r3, [pc, #276]	; (80020d4 <HAL_ADC_Init+0x294>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff0e 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 8001fd6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff1b 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 8001fe2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d13d      	bne.n	8002066 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d13a      	bne.n	8002066 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200c:	f023 0302 	bic.w	r3, r3, #2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	69b9      	ldr	r1, [r7, #24]
 8002016:	430b      	orrs	r3, r1
 8002018:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002020:	2b01      	cmp	r3, #1
 8002022:	d118      	bne.n	8002056 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800202e:	f023 0304 	bic.w	r3, r3, #4
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002046:	430a      	orrs	r2, r1
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	e007      	b.n	8002066 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10c      	bne.n	8002088 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f023 010f 	bic.w	r1, r3, #15
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
 8002086:	e007      	b.n	8002098 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 020f 	bic.w	r2, r2, #15
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f023 0303 	bic.w	r3, r3, #3
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
 80020a8:	e007      	b.n	80020ba <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f043 0210 	orr.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000004 	.word	0x20000004
 80020c8:	053e2d63 	.word	0x053e2d63
 80020cc:	50040000 	.word	0x50040000
 80020d0:	50040300 	.word	0x50040300
 80020d4:	fff0c007 	.word	0xfff0c007

080020d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0b6      	sub	sp, #216	; 0xd8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x22>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e39f      	b.n	800283a <HAL_ADC_ConfigChannel+0x762>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fe73 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 8384 	bne.w	800281c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	f7ff fd8a 	bl	8001c3a <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe61 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 8002130:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe6d 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 800213e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002142:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 81a6 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 81a1 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fd95 	bl	8001c92 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00a      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219a:	f7ff fcf9 	bl	8001b90 <LL_ADC_SetOffset>
 800219e:	e17b      	b.n	8002498 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fd16 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0xf4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fd0b 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x132>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fd00 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80021fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x14a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e018      	b.n	8002254 <HAL_ADC_ConfigChannel+0x17c>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800223e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800224a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fccf 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fcb3 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x1ba>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fca8 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	e01e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x1f8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fc9d 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80022c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x210>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	e018      	b.n	800231a <HAL_ADC_ConfigChannel+0x242>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc6c 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc50 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002338:	4603      	mov	r3, r0
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x280>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fc45 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	e01e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x2be>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fc3a 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800237a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800237e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800238a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x2d6>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	0e9b      	lsrs	r3, r3, #26
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	e016      	b.n	80023dc <HAL_ADC_ConfigChannel+0x304>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e004      	b.n	80023dc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80023d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fc0b 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2103      	movs	r1, #3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fbef 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x342>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2103      	movs	r1, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fbe4 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	e017      	b.n	800244a <HAL_ADC_ConfigChannel+0x372>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fbd9 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x38a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	e011      	b.n	8002486 <HAL_ADC_ConfigChannel+0x3ae>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002472:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	429a      	cmp	r2, r3
 8002488:	d106      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	2103      	movs	r1, #3
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fbb6 	bl	8001c04 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fc95 	bl	8001dcc <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 81c2 	bne.w	800282e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7ff fc16 	bl	8001ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	; (80026fc <HAL_ADC_ConfigChannel+0x624>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f040 8130 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x418>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e019      	b.n	8002524 <HAL_ADC_ConfigChannel+0x44c>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002500:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b09      	cmp	r3, #9
 800251c:	bf94      	ite	ls
 800251e:	2301      	movls	r3, #1
 8002520:	2300      	movhi	r3, #0
 8002522:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002524:	2b00      	cmp	r3, #0
 8002526:	d079      	beq.n	800261c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x46c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	069b      	lsls	r3, r3, #26
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002542:	e015      	b.n	8002570 <HAL_ADC_ConfigChannel+0x498>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x4b8>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	e017      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x4e8>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x50e>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	e018      	b.n	8002618 <HAL_ADC_ConfigChannel+0x540>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002618:	430b      	orrs	r3, r1
 800261a:	e080      	b.n	800271e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x560>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	e015      	b.n	8002664 <HAL_ADC_ConfigChannel+0x58c>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x5ac>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x5dc>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	61fb      	str	r3, [r7, #28]
  return result;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10d      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x608>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	e01d      	b.n	800271c <HAL_ADC_ConfigChannel+0x644>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	613b      	str	r3, [r7, #16]
  return result;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e005      	b.n	8002708 <HAL_ADC_ConfigChannel+0x630>
 80026fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	430b      	orrs	r3, r1
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6892      	ldr	r2, [r2, #8]
 8002722:	4619      	mov	r1, r3
 8002724:	f7ff fab5 	bl	8001c92 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b45      	ldr	r3, [pc, #276]	; (8002844 <HAL_ADC_ConfigChannel+0x76c>)
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07c      	beq.n	800282e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	4844      	ldr	r0, [pc, #272]	; (8002848 <HAL_ADC_ConfigChannel+0x770>)
 8002736:	f7ff fa1d 	bl	8001b74 <LL_ADC_GetCommonPathInternalCh>
 800273a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800273e:	4843      	ldr	r0, [pc, #268]	; (800284c <HAL_ADC_ConfigChannel+0x774>)
 8002740:	f7ff fb44 	bl	8001dcc <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d15e      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <HAL_ADC_ConfigChannel+0x778>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d127      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x6cc>
 8002754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d121      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a39      	ldr	r2, [pc, #228]	; (800284c <HAL_ADC_ConfigChannel+0x774>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d161      	bne.n	800282e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800276a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800276e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002772:	4619      	mov	r1, r3
 8002774:	4834      	ldr	r0, [pc, #208]	; (8002848 <HAL_ADC_ConfigChannel+0x770>)
 8002776:	f7ff f9ea 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_ADC_ConfigChannel+0x77c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	4a35      	ldr	r2, [pc, #212]	; (8002858 <HAL_ADC_ConfigChannel+0x780>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002794:	e002      	b.n	800279c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3b01      	subs	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a2:	e044      	b.n	800282e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	; (800285c <HAL_ADC_ConfigChannel+0x784>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d113      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x6fe>
 80027ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_ADC_ConfigChannel+0x774>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d134      	bne.n	800282e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027cc:	4619      	mov	r1, r3
 80027ce:	481e      	ldr	r0, [pc, #120]	; (8002848 <HAL_ADC_ConfigChannel+0x770>)
 80027d0:	f7ff f9bd 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d4:	e02b      	b.n	800282e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <HAL_ADC_ConfigChannel+0x788>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d126      	bne.n	800282e <HAL_ADC_ConfigChannel+0x756>
 80027e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d120      	bne.n	800282e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_ADC_ConfigChannel+0x774>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11b      	bne.n	800282e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027fe:	4619      	mov	r1, r3
 8002800:	4811      	ldr	r0, [pc, #68]	; (8002848 <HAL_ADC_ConfigChannel+0x770>)
 8002802:	f7ff f9a4 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
 8002806:	e012      	b.n	800282e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800281a:	e008      	b.n	800282e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002836:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800283a:	4618      	mov	r0, r3
 800283c:	37d8      	adds	r7, #216	; 0xd8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	80080000 	.word	0x80080000
 8002848:	50040300 	.word	0x50040300
 800284c:	50040000 	.word	0x50040000
 8002850:	c7520000 	.word	0xc7520000
 8002854:	20000004 	.word	0x20000004
 8002858:	053e2d63 	.word	0x053e2d63
 800285c:	cb840000 	.word	0xcb840000
 8002860:	80000001 	.word	0x80000001

08002864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800288c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	60d3      	str	r3, [r2, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <__NVIC_GetPriorityGrouping+0x18>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 0307 	and.w	r3, r3, #7
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	db0b      	blt.n	80028f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <__NVIC_EnableIRQ+0x38>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2001      	movs	r0, #1
 80028ea:	fa00 f202 	lsl.w	r2, r0, r2
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	; (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	; (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f1c3 0307 	rsb	r3, r3, #7
 8002972:	2b04      	cmp	r3, #4
 8002974:	bf28      	it	cs
 8002976:	2304      	movcs	r3, #4
 8002978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3304      	adds	r3, #4
 800297e:	2b06      	cmp	r3, #6
 8002980:	d902      	bls.n	8002988 <NVIC_EncodePriority+0x30>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3b03      	subs	r3, #3
 8002986:	e000      	b.n	800298a <NVIC_EncodePriority+0x32>
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	401a      	ands	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43d9      	mvns	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	4313      	orrs	r3, r2
         );
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff4c 	bl	8002864 <__NVIC_SetPriorityGrouping>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e2:	f7ff ff63 	bl	80028ac <__NVIC_GetPriorityGrouping>
 80029e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	6978      	ldr	r0, [r7, #20]
 80029ee:	f7ff ffb3 	bl	8002958 <NVIC_EncodePriority>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff82 	bl	8002904 <__NVIC_SetPriority>
}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff56 	bl	80028c8 <__NVIC_EnableIRQ>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a32:	e14c      	b.n	8002cce <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 813e 	beq.w	8002cc8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d005      	beq.n	8002a64 <HAL_GPIO_Init+0x40>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d130      	bne.n	8002ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0201 	and.w	r2, r3, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d017      	beq.n	8002b02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d123      	bne.n	8002b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8098 	beq.w	8002cc8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x2c8>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	220f      	movs	r2, #15
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bc2:	d019      	beq.n	8002bf8 <HAL_GPIO_Init+0x1d4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_GPIO_Init+0x2cc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_GPIO_Init+0x1d0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_GPIO_Init+0x2d0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_GPIO_Init+0x1cc>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2d4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <HAL_GPIO_Init+0x1c8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_GPIO_Init+0x2d8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_GPIO_Init+0x1c4>
 8002be4:	2304      	movs	r3, #4
 8002be6:	e008      	b.n	8002bfa <HAL_GPIO_Init+0x1d6>
 8002be8:	2307      	movs	r3, #7
 8002bea:	e006      	b.n	8002bfa <HAL_GPIO_Init+0x1d6>
 8002bec:	2303      	movs	r3, #3
 8002bee:	e004      	b.n	8002bfa <HAL_GPIO_Init+0x1d6>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e002      	b.n	8002bfa <HAL_GPIO_Init+0x1d6>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_GPIO_Init+0x1d6>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	f002 0203 	and.w	r2, r2, #3
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	4093      	lsls	r3, r2
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c0a:	4938      	ldr	r1, [pc, #224]	; (8002cec <HAL_GPIO_Init+0x2c8>)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c3c:	4a30      	ldr	r2, [pc, #192]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c66:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cc0:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x2dc>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aeab 	bne.w	8002a34 <HAL_GPIO_Init+0x10>
  }
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	48000400 	.word	0x48000400
 8002cf4:	48000800 	.word	0x48000800
 8002cf8:	48000c00 	.word	0x48000c00
 8002cfc:	48001000 	.word	0x48001000
 8002d00:	58000800 	.word	0x58000800

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_HSEM_IRQHandler+0x30>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_HSEM_IRQHandler+0x30>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <HAL_HSEM_IRQHandler+0x30>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_HSEM_IRQHandler+0x30>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f807 	bl	8002d68 <HAL_HSEM_FreeCallback>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	58001500 	.word	0x58001500

08002d68 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e081      	b.n	8002e92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fd7a 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ddc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	e006      	b.n	8002e04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d104      	bne.n	8002e16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69d9      	ldr	r1, [r3, #28]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	f040 80f9 	bne.w	80030b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_I2C_Mem_Write+0x34>
 8002eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ed      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Mem_Write+0x4e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e0e6      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fdf5 	bl	8001ae0 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2319      	movs	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fac3 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0d1      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2221      	movs	r2, #33	; 0x21
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f3c:	88f8      	ldrh	r0, [r7, #6]
 8002f3e:	893a      	ldrh	r2, [r7, #8]
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f9d3 	bl	80032f8 <I2C_RequestMemoryWrite>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0a9      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d90e      	bls.n	8002f8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	22ff      	movs	r2, #255	; 0xff
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fbef 	bl	8003768 <I2C_TransferConfig>
 8002f8a:	e00f      	b.n	8002fac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fbde 	bl	8003768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 faad 	bl	8003510 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e07b      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	781a      	ldrb	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d034      	beq.n	8003064 <HAL_I2C_Mem_Write+0x1c8>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d130      	bne.n	8003064 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fa3f 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e04d      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2bff      	cmp	r3, #255	; 0xff
 8003024:	d90e      	bls.n	8003044 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8979      	ldrh	r1, [r7, #10]
 8003034:	2300      	movs	r3, #0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fb93 	bl	8003768 <I2C_TransferConfig>
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fb82 	bl	8003768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d19e      	bne.n	8002fac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa8c 	bl	8003590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e01a      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_I2C_Mem_Write+0x224>)
 8003096:	400b      	ands	r3, r1
 8003098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	fe00e800 	.word	0xfe00e800

080030c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	817b      	strh	r3, [r7, #10]
 80030d6:	460b      	mov	r3, r1
 80030d8:	813b      	strh	r3, [r7, #8]
 80030da:	4613      	mov	r3, r2
 80030dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	f040 80fd 	bne.w	80032e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_I2C_Mem_Read+0x34>
 80030f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0f1      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Mem_Read+0x4e>
 800310e:	2302      	movs	r3, #2
 8003110:	e0ea      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800311a:	f7fe fce1 	bl	8001ae0 <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2319      	movs	r3, #25
 8003126:	2201      	movs	r2, #1
 8003128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f9af 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d5      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2222      	movs	r2, #34	; 0x22
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2240      	movs	r2, #64	; 0x40
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a3a      	ldr	r2, [r7, #32]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003164:	88f8      	ldrh	r0, [r7, #6]
 8003166:	893a      	ldrh	r2, [r7, #8]
 8003168:	8979      	ldrh	r1, [r7, #10]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	4603      	mov	r3, r0
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f913 	bl	80033a0 <I2C_RequestMemoryRead>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0ad      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2bff      	cmp	r3, #255	; 0xff
 8003194:	d90e      	bls.n	80031b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <HAL_I2C_Mem_Read+0x22c>)
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fadb 	bl	8003768 <I2C_TransferConfig>
 80031b2:	e00f      	b.n	80031d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_I2C_Mem_Read+0x22c>)
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 faca 	bl	8003768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2200      	movs	r2, #0
 80031dc:	2104      	movs	r1, #4
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f956 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07c      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d034      	beq.n	8003294 <HAL_I2C_Mem_Read+0x1d0>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d130      	bne.n	8003294 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f927 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e04d      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2bff      	cmp	r3, #255	; 0xff
 8003254:	d90e      	bls.n	8003274 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	22ff      	movs	r2, #255	; 0xff
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa7b 	bl	8003768 <I2C_TransferConfig>
 8003272:	e00f      	b.n	8003294 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	b2da      	uxtb	r2, r3
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fa6a 	bl	8003768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d19a      	bne.n	80031d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f974 	bl	8003590 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e01a      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2220      	movs	r2, #32
 80032b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_I2C_Mem_Read+0x230>)
 80032c6:	400b      	ands	r3, r1
 80032c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	80002400 	.word	0x80002400
 80032f4:	fe00e800 	.word	0xfe00e800

080032f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	460b      	mov	r3, r1
 800330c:	813b      	strh	r3, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	8979      	ldrh	r1, [r7, #10]
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <I2C_RequestMemoryWrite+0xa4>)
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fa21 	bl	8003768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8f0 	bl	8003510 <I2C_WaitOnTXISFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02c      	b.n	8003394 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	629a      	str	r2, [r3, #40]	; 0x28
 800334a:	e015      	b.n	8003378 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800334c:	893b      	ldrh	r3, [r7, #8]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	b29b      	uxth	r3, r3
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	69b9      	ldr	r1, [r7, #24]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f8d6 	bl	8003510 <I2C_WaitOnTXISFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e012      	b.n	8003394 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2200      	movs	r2, #0
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f884 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	80002000 	.word	0x80002000

080033a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	817b      	strh	r3, [r7, #10]
 80033b2:	460b      	mov	r3, r1
 80033b4:	813b      	strh	r3, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <I2C_RequestMemoryRead+0xa4>)
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2300      	movs	r3, #0
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f9ce 	bl	8003768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	69b9      	ldr	r1, [r7, #24]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f89d 	bl	8003510 <I2C_WaitOnTXISFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e02c      	b.n	800343a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033e6:	893b      	ldrh	r3, [r7, #8]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
 80033f0:	e015      	b.n	800341e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033f2:	893b      	ldrh	r3, [r7, #8]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f883 	bl	8003510 <I2C_WaitOnTXISFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e012      	b.n	800343a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2200      	movs	r2, #0
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f831 	bl	8003490 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	80002000 	.word	0x80002000

08003448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2200      	movs	r2, #0
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	619a      	str	r2, [r3, #24]
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	e022      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a8:	d01e      	beq.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fb19 	bl	8001ae0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d113      	bne.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e00f      	b.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	429a      	cmp	r2, r3
 8003504:	d0cd      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351c:	e02c      	b.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f870 	bl	8003608 <I2C_IsErrorOccurred>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e02a      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003538:	d01e      	beq.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fad1 	bl	8001ae0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d1cb      	bne.n	800351e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800359c:	e028      	b.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f830 	bl	8003608 <I2C_IsErrorOccurred>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e026      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe fa95 	bl	8001ae0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d113      	bne.n	80035f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d1cf      	bne.n	800359e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d040      	beq.n	80036b0 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800363c:	d01d      	beq.n	800367a <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800364c:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800364e:	e014      	b.n	800367a <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d010      	beq.n	800367a <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fe fa42 	bl	8001ae0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <I2C_IsErrorOccurred+0x66>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f043 0320 	orr.w	r3, r3, #32
 8003674:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b20      	cmp	r3, #32
 8003686:	d002      	beq.n	800368e <I2C_IsErrorOccurred+0x86>
 8003688:	7ffb      	ldrb	r3, [r7, #31]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0e0      	beq.n	8003650 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800368e:	7ffb      	ldrb	r3, [r7, #31]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2220      	movs	r2, #32
 800369a:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2210      	movs	r2, #16
 80036a2:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8003718:	7ffb      	ldrb	r3, [r7, #31]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01c      	beq.n	8003758 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff fe92 	bl	8003448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <I2C_IsErrorOccurred+0x15c>)
 8003730:	400b      	ands	r3, r1
 8003732:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	431a      	orrs	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003758:	7ffb      	ldrb	r3, [r7, #31]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	fe00e800 	.word	0xfe00e800

08003768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	4613      	mov	r3, r2
 8003778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003780:	7a7b      	ldrb	r3, [r7, #9]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003788:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	4313      	orrs	r3, r2
 8003792:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003796:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	0d5b      	lsrs	r3, r3, #21
 80037a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <I2C_TransferConfig+0x60>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	43db      	mvns	r3, r3
 80037ac:	ea02 0103 	and.w	r1, r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	03ff63ff 	.word	0x03ff63ff

080037cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d138      	bne.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e032      	b.n	8003856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800381e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	d139      	bne.n	80038ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003882:	2302      	movs	r3, #2
 8003884:	e033      	b.n	80038ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2224      	movs	r2, #36	; 0x24
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01e      	beq.n	800394c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <HAL_IPCC_Init+0x60>)
 8003910:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd f862 	bl	80009e8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003924:	68b8      	ldr	r0, [r7, #8]
 8003926:	f000 f85b 	bl	80039e0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f82c 	bl	8003994 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800394a:	e001      	b.n	8003950 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	58000c00 	.word	0x58000c00

08003960 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e00f      	b.n	80039c2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <IPCC_SetDefaultCallbacks+0x44>)
 80039ac:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3306      	adds	r3, #6
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <IPCC_SetDefaultCallbacks+0x48>)
 80039ba:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d9ec      	bls.n	80039a2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	08003961 	.word	0x08003961
 80039dc:	0800397b 	.word	0x0800397b

080039e0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80039f4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0a:	b08b      	sub	sp, #44	; 0x2c
 8003a0c:	af06      	add	r7, sp, #24
 8003a0e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0d7      	b.n	8003bca <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f00d fc0e 	bl	8011250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2203      	movs	r2, #3
 8003a38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f005 fec8 	bl	80097d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	e04c      	b.n	8003ae6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	b298      	uxth	r0, r3
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3336      	adds	r3, #54	; 0x36
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3303      	adds	r3, #3
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3338      	adds	r3, #56	; 0x38
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	333c      	adds	r3, #60	; 0x3c
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	3340      	adds	r3, #64	; 0x40
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d3ad      	bcc.n	8003a4c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e044      	b.n	8003b80 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d3b5      	bcc.n	8003af6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	687e      	ldr	r6, [r7, #4]
 8003b92:	466d      	mov	r5, sp
 8003b94:	f106 0410 	add.w	r4, r6, #16
 8003b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	602b      	str	r3, [r5, #0]
 8003ba0:	1d33      	adds	r3, r6, #4
 8003ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba4:	6838      	ldr	r0, [r7, #0]
 8003ba6:	f005 fe31 	bl	800980c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f001 fc29 	bl	800541a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_PCD_Start+0x16>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e012      	b.n	8003c0e <HAL_PCD_Start+0x3c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 fdd7 	bl	80097a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f007 fd8c 	bl	800b71c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f007 fd91 	bl	800b74a <USB_ReadInterrupts>
 8003c28:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb26 	bl	8004286 <PCD_EP_ISR_Handler>

    return;
 8003c3a:	e110      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f00d fb99 	bl	8011396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c64:	2100      	movs	r1, #0
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8fc 	bl	8003e64 <HAL_PCD_SetAddress>

    return;
 8003c6c:	e0f7      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c90:	e0e5      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003cb4:	e0d3      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d034      	beq.n	8003d2a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0204 	bic.w	r2, r2, #4
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0208 	bic.w	r2, r2, #8
 8003cea:	b292      	uxth	r2, r2
 8003cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d02:	2100      	movs	r1, #0
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f00d fd3d 	bl	8011784 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f00d fb7c 	bl	8011408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d22:	b292      	uxth	r2, r2
 8003d24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d28:	e099      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d027      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	b292      	uxth	r2, r2
 8003d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d5e:	b292      	uxth	r2, r2
 8003d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0204 	orr.w	r2, r2, #4
 8003d76:	b292      	uxth	r2, r2
 8003d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f00d fb29 	bl	80113d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d82:	e06c      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d040      	beq.n	8003e10 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da0:	b292      	uxth	r2, r2
 8003da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d12b      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0204 	orr.w	r2, r2, #4
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0208 	orr.w	r2, r2, #8
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003dfe:	2101      	movs	r1, #1
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00d fcbf 	bl	8011784 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003e06:	e02a      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f00d fae3 	bl	80113d4 <HAL_PCD_SuspendCallback>
    return;
 8003e0e:	e026      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00f      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00d faa1 	bl	801137a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003e38:	e011      	b.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00c      	beq.n	8003e5e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e56:	b292      	uxth	r2, r2
 8003e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e5c:	bf00      	nop
  }
}
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_PCD_SetAddress+0x1a>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e013      	b.n	8003ea6 <HAL_PCD_SetAddress+0x42>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f007 fc2c 	bl	800b6f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	4611      	mov	r1, r2
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	70fb      	strb	r3, [r7, #3]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	803b      	strh	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0e      	bge.n	8003ef2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	705a      	strb	r2, [r3, #1]
 8003ef0:	e00e      	b.n	8003f10 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 0207 	and.w	r2, r3, #7
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f1c:	883a      	ldrh	r2, [r7, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	78ba      	ldrb	r2, [r7, #2]
 8003f26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f3a:	78bb      	ldrb	r3, [r7, #2]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d102      	bne.n	8003f46 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_PCD_EP_Open+0xa6>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e00e      	b.n	8003f72 <HAL_PCD_EP_Open+0xc4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f005 fc74 	bl	8009850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003f70:	7afb      	ldrb	r3, [r7, #11]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da0e      	bge.n	8003fac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	705a      	strb	r2, [r3, #1]
 8003faa:	e00e      	b.n	8003fca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 0207 	and.w	r2, r3, #7
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_EP_Close+0x6a>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e00e      	b.n	8004002 <HAL_PCD_EP_Close+0x88>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f005 ffc0 	bl	8009f78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	460b      	mov	r3, r1
 8004018:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	f003 0207 	and.w	r2, r3, #7
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800404a:	7afb      	ldrb	r3, [r7, #11]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	b2da      	uxtb	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004056:	7afb      	ldrb	r3, [r7, #11]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	4618      	mov	r0, r3
 8004068:	f006 f973 	bl	800a352 <USB_EPStartXfer>
 800406c:	e005      	b.n	800407a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	4618      	mov	r0, r3
 8004076:	f006 f96c 	bl	800a352 <USB_EPStartXfer>
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 0207 	and.w	r2, r3, #7
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	460b      	mov	r3, r1
 80040c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	7afb      	ldrb	r3, [r7, #11]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2201      	movs	r2, #1
 80040fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004100:	7afb      	ldrb	r3, [r7, #11]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	b2da      	uxtb	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800410c:	7afb      	ldrb	r3, [r7, #11]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	4618      	mov	r0, r3
 800411e:	f006 f918 	bl	800a352 <USB_EPStartXfer>
 8004122:	e005      	b.n	8004130 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6979      	ldr	r1, [r7, #20]
 800412a:	4618      	mov	r0, r3
 800412c:	f006 f911 	bl	800a352 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 0207 	and.w	r2, r3, #7
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d901      	bls.n	8004158 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e03e      	b.n	80041d6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800415c:	2b00      	cmp	r3, #0
 800415e:	da0e      	bge.n	800417e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	705a      	strb	r2, [r3, #1]
 800417c:	e00c      	b.n	8004198 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_PCD_EP_SetStall+0x7e>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e00e      	b.n	80041d6 <HAL_PCD_EP_SetStall+0x9c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68f9      	ldr	r1, [r7, #12]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f007 f995 	bl	800b4f6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d901      	bls.n	80041fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e040      	b.n	800427e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004200:	2b00      	cmp	r3, #0
 8004202:	da0e      	bge.n	8004222 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	705a      	strb	r2, [r3, #1]
 8004220:	e00e      	b.n	8004240 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 0207 	and.w	r2, r3, #7
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_PCD_EP_ClrStall+0x82>
 800425c:	2302      	movs	r3, #2
 800425e:	e00e      	b.n	800427e <HAL_PCD_EP_ClrStall+0xa0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f007 f992 	bl	800b598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b096      	sub	sp, #88	; 0x58
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800428e:	e39c      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004298:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800429c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80042aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 815e 	bne.w	8004570 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80042b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d150      	bne.n	8004362 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d0:	81fb      	strh	r3, [r7, #14]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3328      	adds	r3, #40	; 0x28
 80042e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	4413      	add	r3, r2
 8004304:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	441a      	add	r2, r3
 800431c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004320:	2100      	movs	r1, #0
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f00d f80f 	bl	8011346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 834a 	beq.w	80049ca <PCD_EP_ISR_Handler+0x744>
 8004336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 8345 	bne.w	80049ca <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800434c:	b2da      	uxtb	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b292      	uxth	r2, r2
 8004354:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004360:	e333      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004368:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004374:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437c:	2b00      	cmp	r3, #0
 800437e:	d032      	beq.n	80043e6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004388:	b29b      	uxth	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	4413      	add	r3, r2
 800439a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f007 fa17 	bl	800b7ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043cc:	4013      	ands	r3, r2
 80043ce:	823b      	strh	r3, [r7, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	8a3a      	ldrh	r2, [r7, #16]
 80043d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043da:	b292      	uxth	r2, r2
 80043dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f00c ff84 	bl	80112ec <HAL_PCD_SetupStageCallback>
 80043e4:	e2f1      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043e6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f280 82ed 	bge.w	80049ca <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043fc:	4013      	ands	r3, r2
 80043fe:	83fb      	strh	r3, [r7, #30]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	8bfa      	ldrh	r2, [r7, #30]
 8004406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800440a:	b292      	uxth	r2, r2
 800440c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	4413      	add	r3, r2
 8004428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d019      	beq.n	8004472 <PCD_EP_ISR_Handler+0x1ec>
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d015      	beq.n	8004472 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444c:	6959      	ldr	r1, [r3, #20]
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004454:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004456:	b29b      	uxth	r3, r3
 8004458:	f007 f9c9 	bl	800b7ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	441a      	add	r2, r3
 8004466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004468:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800446a:	2100      	movs	r1, #0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f00c ff4f 	bl	8011310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 82a3 	bne.w	80049ca <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	4413      	add	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b3e      	cmp	r3, #62	; 0x3e
 80044aa:	d918      	bls.n	80044de <PCD_EP_ISR_Handler+0x258>
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	647b      	str	r3, [r7, #68]	; 0x44
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <PCD_EP_ISR_Handler+0x240>
 80044c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c2:	3b01      	subs	r3, #1
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e029      	b.n	8004532 <PCD_EP_ISR_Handler+0x2ac>
 80044de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d112      	bne.n	800450c <PCD_EP_ISR_Handler+0x286>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004504:	b29a      	uxth	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	e012      	b.n	8004532 <PCD_EP_ISR_Handler+0x2ac>
 800450c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <PCD_EP_ISR_Handler+0x2a0>
 8004520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004522:	3301      	adds	r3, #1
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
 8004526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004528:	b29b      	uxth	r3, r3
 800452a:	029b      	lsls	r3, r3, #10
 800452c:	b29a      	uxth	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	827b      	strh	r3, [r7, #18]
 8004544:	8a7b      	ldrh	r3, [r7, #18]
 8004546:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800454a:	827b      	strh	r3, [r7, #18]
 800454c:	8a7b      	ldrh	r3, [r7, #18]
 800454e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004552:	827b      	strh	r3, [r7, #18]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	8a7b      	ldrh	r3, [r7, #18]
 800455a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456a:	b29b      	uxth	r3, r3
 800456c:	8013      	strh	r3, [r2, #0]
 800456e:	e22c      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004584:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004588:	2b00      	cmp	r3, #0
 800458a:	f280 80f6 	bge.w	800477a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045a4:	4013      	ands	r3, r2
 80045a6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80045bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045c0:	b292      	uxth	r2, r2
 80045c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80045c4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80045da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045dc:	7b1b      	ldrb	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d123      	bne.n	800462a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004606:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800460a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 808e 	beq.w	8004730 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	6959      	ldr	r1, [r3, #20]
 800461c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461e:	88da      	ldrh	r2, [r3, #6]
 8004620:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004624:	f007 f8e3 	bl	800b7ee <USB_ReadPMA>
 8004628:	e082      	b.n	8004730 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	78db      	ldrb	r3, [r3, #3]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d10a      	bne.n	8004648 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004632:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004636:	461a      	mov	r2, r3
 8004638:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9d3 	bl	80049e6 <HAL_PCD_EP_DB_Receive>
 8004640:	4603      	mov	r3, r0
 8004642:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004646:	e073      	b.n	8004730 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80046ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02c      	beq.n	8004730 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	6959      	ldr	r1, [r3, #20]
 80046de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e0:	891a      	ldrh	r2, [r3, #8]
 80046e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046e6:	f007 f882 	bl	800b7ee <USB_ReadPMA>
 80046ea:	e021      	b.n	8004730 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4413      	add	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4413      	add	r3, r2
 8004706:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004710:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004714:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004722:	6959      	ldr	r1, [r3, #20]
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	895a      	ldrh	r2, [r3, #10]
 8004728:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800472c:	f007 f85f 	bl	800b7ee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004738:	441a      	add	r2, r3
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004746:	441a      	add	r2, r3
 8004748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800474c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <PCD_EP_ISR_Handler+0x4da>
 8004754:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	429a      	cmp	r2, r3
 800475e:	d206      	bcs.n	800476e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f00c fdd2 	bl	8011310 <HAL_PCD_DataOutStageCallback>
 800476c:	e005      	b.n	800477a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004774:	4618      	mov	r0, r3
 8004776:	f005 fdec 	bl	800a352 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800477a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8121 	beq.w	80049ca <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004788:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	78db      	ldrb	r3, [r3, #3]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f000 80a2 	beq.w	8004926 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80047e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ea:	7b1b      	ldrb	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8093 	beq.w	8004918 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d046      	beq.n	800488c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d126      	bne.n	8004854 <PCD_EP_ISR_Handler+0x5ce>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	4413      	add	r3, r2
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	00da      	lsls	r2, r3, #3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	4413      	add	r3, r2
 8004828:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004838:	b29a      	uxth	r2, r3
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484c:	b29a      	uxth	r2, r3
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e061      	b.n	8004918 <PCD_EP_ISR_Handler+0x692>
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d15d      	bne.n	8004918 <PCD_EP_ISR_Handler+0x692>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486a:	b29b      	uxth	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	4413      	add	r3, r2
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	00da      	lsls	r2, r3, #3
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	4413      	add	r3, r2
 800487e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	2200      	movs	r2, #0
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e045      	b.n	8004918 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d126      	bne.n	80048e8 <PCD_EP_ISR_Handler+0x662>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ae:	4413      	add	r3, r2
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	4413      	add	r3, r2
 80048bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	801a      	strh	r2, [r3, #0]
 80048e6:	e017      	b.n	8004918 <PCD_EP_ISR_Handler+0x692>
 80048e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d113      	bne.n	8004918 <PCD_EP_ISR_Handler+0x692>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fe:	4413      	add	r3, r2
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	00da      	lsls	r2, r3, #3
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	4413      	add	r3, r2
 800490c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	2200      	movs	r2, #0
 8004916:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f00c fd11 	bl	8011346 <HAL_PCD_DataInStageCallback>
 8004924:	e051      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004926:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d144      	bne.n	80049bc <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	4413      	add	r3, r2
 800494c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004956:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800495a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004962:	429a      	cmp	r2, r3
 8004964:	d907      	bls.n	8004976 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004972:	619a      	str	r2, [r3, #24]
 8004974:	e002      	b.n	800497c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8004976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004978:	2200      	movs	r2, #0
 800497a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f00c fcdb 	bl	8011346 <HAL_PCD_DataInStageCallback>
 8004990:	e01b      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800499a:	441a      	add	r2, r3
 800499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80049a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80049a8:	441a      	add	r2, r3
 80049aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80049b4:	4618      	mov	r0, r3
 80049b6:	f005 fccc 	bl	800a352 <USB_EPStartXfer>
 80049ba:	e006      	b.n	80049ca <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80049bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049c0:	461a      	mov	r2, r3
 80049c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f917 	bl	8004bf8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f6ff ac5a 	blt.w	8004290 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3758      	adds	r7, #88	; 0x58
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b088      	sub	sp, #32
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d07c      	beq.n	8004af8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4413      	add	r3, r2
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	4413      	add	r3, r2
 8004a18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	8b7b      	ldrh	r3, [r7, #26]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d306      	bcc.n	8004a3c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	8b7b      	ldrh	r3, [r7, #26]
 8004a34:	1ad2      	subs	r2, r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	619a      	str	r2, [r3, #24]
 8004a3a:	e002      	b.n	8004a42 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d123      	bne.n	8004a92 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	833b      	strh	r3, [r7, #24]
 8004a66:	8b3b      	ldrh	r3, [r7, #24]
 8004a68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a6c:	833b      	strh	r3, [r7, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	8b3b      	ldrh	r3, [r7, #24]
 8004a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01f      	beq.n	8004adc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	82fb      	strh	r3, [r7, #22]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8afb      	ldrh	r3, [r7, #22]
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8085 	beq.w	8004bee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6959      	ldr	r1, [r3, #20]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	891a      	ldrh	r2, [r3, #8]
 8004af0:	8b7b      	ldrh	r3, [r7, #26]
 8004af2:	f006 fe7c 	bl	800b7ee <USB_ReadPMA>
 8004af6:	e07a      	b.n	8004bee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	8b7b      	ldrh	r3, [r7, #26]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d306      	bcc.n	8004b36 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	8b7b      	ldrh	r3, [r7, #26]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	619a      	str	r2, [r3, #24]
 8004b34:	e002      	b.n	8004b3c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d123      	bne.n	8004b8c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	83fb      	strh	r3, [r7, #30]
 8004b60:	8bfb      	ldrh	r3, [r7, #30]
 8004b62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b66:	83fb      	strh	r3, [r7, #30]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	8bfb      	ldrh	r3, [r7, #30]
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d11f      	bne.n	8004bd6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	83bb      	strh	r3, [r7, #28]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	8bbb      	ldrh	r3, [r7, #28]
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bd6:	8b7b      	ldrh	r3, [r7, #26]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6959      	ldr	r1, [r3, #20]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	895a      	ldrh	r2, [r3, #10]
 8004be8:	8b7b      	ldrh	r3, [r7, #26]
 8004bea:	f006 fe00 	bl	800b7ee <USB_ReadPMA>
    }
  }

  return count;
 8004bee:	8b7b      	ldrh	r3, [r7, #26]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b0a2      	sub	sp, #136	; 0x88
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 81c5 	beq.w	8004f9c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d907      	bls.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	e002      	b.n	8004c5c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 80b9 	bne.w	8004dd8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d126      	bne.n	8004cbc <HAL_PCD_EP_DB_Transmit+0xc4>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	4413      	add	r3, r2
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	00da      	lsls	r2, r3, #3
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	4413      	add	r3, r2
 8004c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	801a      	strh	r2, [r3, #0]
 8004cba:	e01a      	b.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d116      	bne.n	8004cf2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	4413      	add	r3, r2
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	00da      	lsls	r2, r3, #3
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2200      	movs	r2, #0
 8004cf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d126      	bne.n	8004d4e <HAL_PCD_EP_DB_Transmit+0x156>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	00da      	lsls	r2, r3, #3
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4413      	add	r3, r2
 8004d22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	801a      	strh	r2, [r3, #0]
 8004d4c:	e017      	b.n	8004d7e <HAL_PCD_EP_DB_Transmit+0x186>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	785b      	ldrb	r3, [r3, #1]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d113      	bne.n	8004d7e <HAL_PCD_EP_DB_Transmit+0x186>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	4413      	add	r3, r2
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	00da      	lsls	r2, r3, #3
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f00c fade 	bl	8011346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 82d2 	beq.w	800533a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	827b      	strh	r3, [r7, #18]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	8a7b      	ldrh	r3, [r7, #18]
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
 8004dd6:	e2b0      	b.n	800533a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d021      	beq.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 8284 	bne.w	800533a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e48:	441a      	add	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6a1a      	ldr	r2, [r3, #32]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d309      	bcc.n	8004e6e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e66:	1ad2      	subs	r2, r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	621a      	str	r2, [r3, #32]
 8004e6c:	e015      	b.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d107      	bne.n	8004e86 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004e76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e84:	e009      	b.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d155      	bne.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x356>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	4413      	add	r3, r2
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00da      	lsls	r2, r3, #3
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ece:	d916      	bls.n	8004efe <HAL_PCD_EP_DB_Transmit+0x306>
 8004ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	e043      	b.n	8004f86 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d112      	bne.n	8004f2a <HAL_PCD_EP_DB_Transmit+0x332>
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e02d      	b.n	8004f86 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_PCD_EP_DB_Transmit+0x348>
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e01b      	b.n	8004f86 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d117      	bne.n	8004f86 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	4413      	add	r3, r2
 8004f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	00da      	lsls	r2, r3, #3
 8004f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f76:	4413      	add	r3, r2
 8004f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6959      	ldr	r1, [r3, #20]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	891a      	ldrh	r2, [r3, #8]
 8004f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f006 fbe8 	bl	800b76a <USB_WritePMA>
 8004f9a:	e1ce      	b.n	800533a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	699a      	ldr	r2, [r3, #24]
 8004fc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d307      	bcc.n	8004fe0 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	619a      	str	r2, [r3, #24]
 8004fde:	e002      	b.n	8004fe6 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f040 80c4 	bne.w	8005178 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d126      	bne.n	8005046 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800500c:	4413      	add	r3, r2
 800500e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	00da      	lsls	r2, r3, #3
 8005016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005018:	4413      	add	r3, r2
 800501a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800501e:	667b      	str	r3, [r7, #100]	; 0x64
 8005020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502a:	b29a      	uxth	r2, r3
 800502c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e01a      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x484>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d116      	bne.n	800507c <HAL_PCD_EP_DB_Transmit+0x484>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	673b      	str	r3, [r7, #112]	; 0x70
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005062:	4413      	add	r3, r2
 8005064:	673b      	str	r3, [r7, #112]	; 0x70
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	00da      	lsls	r2, r3, #3
 800506c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800506e:	4413      	add	r3, r2
 8005070:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005074:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005078:	2200      	movs	r2, #0
 800507a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d12f      	bne.n	80050ea <HAL_PCD_EP_DB_Transmit+0x4f2>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050a2:	4413      	add	r3, r2
 80050a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	00da      	lsls	r2, r3, #3
 80050ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050b2:	4413      	add	r3, r2
 80050b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050ce:	801a      	strh	r2, [r3, #0]
 80050d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	e017      	b.n	800511a <HAL_PCD_EP_DB_Transmit+0x522>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d113      	bne.n	800511a <HAL_PCD_EP_DB_Transmit+0x522>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005100:	4413      	add	r3, r2
 8005102:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	00da      	lsls	r2, r3, #3
 800510a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800510c:	4413      	add	r3, r2
 800510e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005112:	67bb      	str	r3, [r7, #120]	; 0x78
 8005114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005116:	2200      	movs	r2, #0
 8005118:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f00c f910 	bl	8011346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8104 	bne.w	800533a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b29b      	uxth	r3, r3
 8005144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]
 8005176:	e0e0      	b.n	800533a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d121      	bne.n	80051c6 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80051b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	f040 80b4 	bne.w	800533a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051da:	441a      	add	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051e8:	441a      	add	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d309      	bcc.n	800520e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	621a      	str	r2, [r3, #32]
 800520c:	e015      	b.n	800523a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d107      	bne.n	8005226 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005216:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800521a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005224:	e009      	b.n	800523a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2200      	movs	r2, #0
 8005230:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	663b      	str	r3, [r7, #96]	; 0x60
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d155      	bne.n	80052f4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	65bb      	str	r3, [r7, #88]	; 0x58
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525c:	4413      	add	r3, r2
 800525e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	00da      	lsls	r2, r3, #3
 8005266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005268:	4413      	add	r3, r2
 800526a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800526e:	657b      	str	r3, [r7, #84]	; 0x54
 8005270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005272:	2b3e      	cmp	r3, #62	; 0x3e
 8005274:	d916      	bls.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	677b      	str	r3, [r7, #116]	; 0x74
 800527c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_PCD_EP_DB_Transmit+0x694>
 8005286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005288:	3b01      	subs	r3, #1
 800528a:	677b      	str	r3, [r7, #116]	; 0x74
 800528c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528e:	b29b      	uxth	r3, r3
 8005290:	029b      	lsls	r3, r3, #10
 8005292:	b29b      	uxth	r3, r3
 8005294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529c:	b29a      	uxth	r2, r3
 800529e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e040      	b.n	8005326 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d112      	bne.n	80052d0 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80052aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	e02a      	b.n	8005326 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	677b      	str	r3, [r7, #116]	; 0x74
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80052e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e2:	3301      	adds	r3, #1
 80052e4:	677b      	str	r3, [r7, #116]	; 0x74
 80052e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	029b      	lsls	r3, r3, #10
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e018      	b.n	8005326 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d114      	bne.n	8005326 <HAL_PCD_EP_DB_Transmit+0x72e>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800530a:	4413      	add	r3, r2
 800530c:	663b      	str	r3, [r7, #96]	; 0x60
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	00da      	lsls	r2, r3, #3
 8005314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005316:	4413      	add	r3, r2
 8005318:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800531c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	b29a      	uxth	r2, r3
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	895a      	ldrh	r2, [r3, #10]
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	b29b      	uxth	r3, r3
 8005336:	f006 fa18 	bl	800b76a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	823b      	strh	r3, [r7, #16]
 8005356:	8a3b      	ldrh	r3, [r7, #16]
 8005358:	f083 0310 	eor.w	r3, r3, #16
 800535c:	823b      	strh	r3, [r7, #16]
 800535e:	8a3b      	ldrh	r3, [r7, #16]
 8005360:	f083 0320 	eor.w	r3, r3, #32
 8005364:	823b      	strh	r3, [r7, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	8a3b      	ldrh	r3, [r7, #16]
 8005376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	b29b      	uxth	r3, r3
 8005388:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3788      	adds	r7, #136	; 0x88
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	4613      	mov	r3, r2
 80053a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80053a6:	897b      	ldrh	r3, [r7, #10]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b2:	897b      	ldrh	r3, [r7, #10]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e009      	b.n	80053de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053ca:	897a      	ldrh	r2, [r7, #10]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053de:	893b      	ldrh	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2200      	movs	r2, #0
 80053e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	80da      	strh	r2, [r3, #6]
 80053f2:	e00b      	b.n	800540c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2201      	movs	r2, #1
 80053f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	b29a      	uxth	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800543e:	b29b      	uxth	r3, r3
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005452:	b29b      	uxth	r3, r3
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a04      	ldr	r2, [pc, #16]	; (800548c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	58000400 	.word	0x58000400

08005490 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005494:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	58000400 	.word	0x58000400

080054ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80054b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ba:	6053      	str	r3, [r2, #4]
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	58000400 	.word	0x58000400

080054cc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80054d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054de:	d101      	bne.n	80054e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_RCC_HSE_Enable>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_RCC_HSE_Disable>:
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800551c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_RCC_HSE_IsReady>:
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800553e:	d101      	bne.n	8005544 <LL_RCC_HSE_IsReady+0x18>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <LL_RCC_HSE_IsReady+0x1a>
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_RCC_HSI_Enable>:
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	6013      	str	r3, [r2, #0]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_RCC_HSI_Disable>:
{
 800556e:	b480      	push	{r7}
 8005570:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005580:	6013      	str	r3, [r2, #0]
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_HSI_IsReady>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559e:	d101      	bne.n	80055a4 <LL_RCC_HSI_IsReady+0x18>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <LL_RCC_HSI_IsReady+0x1a>
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_RCC_HSI48_Enable>:
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80055f2:	bf00      	nop
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_RCC_HSI48_Disable>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <LL_RCC_HSI48_IsReady>:
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d101      	bne.n	8005636 <LL_RCC_HSI48_IsReady+0x18>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <LL_RCC_HSI48_IsReady+0x1a>
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_RCC_LSE_Enable>:
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800565a:	bf00      	nop
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LL_RCC_LSE_Disable>:
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_RCC_LSE_EnableBypass>:
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_LSE_DisableBypass>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <LL_RCC_LSE_IsReady>:
{
 80056ca:	b480      	push	{r7}
 80056cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80056ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d101      	bne.n	80056e2 <LL_RCC_LSE_IsReady+0x18>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <LL_RCC_LSE_IsReady+0x1a>
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_RCC_LSI1_Enable>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005706:	bf00      	nop
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_RCC_LSI1_Disable>:
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_RCC_LSI1_IsReady>:
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d101      	bne.n	800574a <LL_RCC_LSI1_IsReady+0x18>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <LL_RCC_LSI1_IsReady+0x1a>
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_LSI2_Enable>:
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005766:	f043 0304 	orr.w	r3, r3, #4
 800576a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_RCC_LSI2_Disable>:
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005788:	f023 0304 	bic.w	r3, r3, #4
 800578c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <LL_RCC_LSI2_IsReady>:
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d101      	bne.n	80057b2 <LL_RCC_LSI2_IsReady+0x18>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <LL_RCC_LSI2_IsReady+0x1a>
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <LL_RCC_LSI2_SetTrimming>:
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80057c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_MSI_Enable>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6013      	str	r3, [r2, #0]
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <LL_RCC_MSI_Disable>:
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	6013      	str	r3, [r2, #0]
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_RCC_MSI_IsReady>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b02      	cmp	r3, #2
 8005838:	d101      	bne.n	800583e <LL_RCC_MSI_IsReady+0x16>
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <LL_RCC_MSI_IsReady+0x18>
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <LL_RCC_MSI_SetRange>:
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <LL_RCC_MSI_GetRange>:
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005882:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2bb0      	cmp	r3, #176	; 0xb0
 8005888:	d901      	bls.n	800588e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800588a:	23b0      	movs	r3, #176	; 0xb0
 800588c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800588e:	687b      	ldr	r3, [r7, #4]
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_RCC_MSI_SetCalibTrimming>:
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_RCC_SetSysClkSource>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 0203 	bic.w	r2, r3, #3
 80058d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_GetSysClkSource>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 030c 	and.w	r3, r3, #12
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_RCC_SetAHBPrescaler>:
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_C2_RCC_SetAHBPrescaler>:
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800593e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <LL_RCC_SetAHB4Prescaler>:
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005966:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <LL_RCC_SetAPB1Prescaler>:
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800599a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	608b      	str	r3, [r1, #8]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <LL_RCC_SetAPB2Prescaler>:
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	608b      	str	r3, [r1, #8]
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <LL_RCC_GetAHBPrescaler>:
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_C2_RCC_GetAHBPrescaler>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <LL_RCC_GetAHB4Prescaler>:
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_GetAPB1Prescaler>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <LL_RCC_GetAPB2Prescaler>:
{
 8005a3e:	b480      	push	{r7}
 8005a40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <LL_RCC_PLL_Enable>:
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a68:	6013      	str	r3, [r2, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_PLL_Disable>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a86:	6013      	str	r3, [r2, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <LL_RCC_PLL_IsReady>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aa4:	d101      	bne.n	8005aaa <LL_RCC_PLL_IsReady+0x18>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <LL_RCC_PLL_IsReady+0x1a>
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_PLL_GetN>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <LL_RCC_PLL_GetR>:
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <LL_RCC_PLL_GetDivider>:
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_RCC_PLL_GetMainSource>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2a:	d101      	bne.n	8005b30 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b44:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b50:	d101      	bne.n	8005b56 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b76:	d101      	bne.n	8005b7c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b9a:	d101      	bne.n	8005ba0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bbe:	d101      	bne.n	8005bc4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b08d      	sub	sp, #52	; 0x34
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e37e      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8092 	beq.w	8005d14 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf0:	f7ff fe7d 	bl	80058ee <LL_RCC_GetSysClkSource>
 8005bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bf6:	f7ff ff83 	bl	8005b00 <LL_RCC_PLL_GetMainSource>
 8005bfa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_RCC_OscConfig+0x3e>
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b0c      	cmp	r3, #12
 8005c06:	d14c      	bne.n	8005ca2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d149      	bne.n	8005ca2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c0e:	f7ff fe0b 	bl	8005828 <LL_RCC_MSI_IsReady>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x54>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e35d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005c28:	f7ff fe23 	bl	8005872 <LL_RCC_MSI_GetRange>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	d914      	bls.n	8005c5c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fd5e 	bl	80066f8 <RCC_SetFlashLatencyFromMSIRange>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e34c      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fdfd 	bl	800584a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fe21 	bl	800589c <LL_RCC_MSI_SetCalibTrimming>
 8005c5a:	e013      	b.n	8005c84 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fdf2 	bl	800584a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fe16 	bl	800589c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fd3f 	bl	80066f8 <RCC_SetFlashLatencyFromMSIRange>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e32d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c84:	f000 fcdc 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4ab3      	ldr	r2, [pc, #716]	; (8005f58 <HAL_RCC_OscConfig+0x388>)
 8005c8c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c8e:	4bb3      	ldr	r3, [pc, #716]	; (8005f5c <HAL_RCC_OscConfig+0x38c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fb fb80 	bl	8001398 <HAL_InitTick>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d039      	beq.n	8005d12 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e31e      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01e      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005caa:	f7ff fd9f 	bl	80057ec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cae:	f7fb ff17 	bl	8001ae0 <HAL_GetTick>
 8005cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cb6:	f7fb ff13 	bl	8001ae0 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e30b      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005cc8:	f7ff fdae 	bl	8005828 <LL_RCC_MSI_IsReady>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f1      	beq.n	8005cb6 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fdb7 	bl	800584a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fddb 	bl	800589c <LL_RCC_MSI_SetCalibTrimming>
 8005ce6:	e015      	b.n	8005d14 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ce8:	f7ff fd8f 	bl	800580a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005cec:	f7fb fef8 	bl	8001ae0 <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cf4:	f7fb fef4 	bl	8001ae0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e2ec      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d06:	f7ff fd8f 	bl	8005828 <LL_RCC_MSI_IsReady>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f1      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x124>
 8005d10:	e000      	b.n	8005d14 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d12:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d04e      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d20:	f7ff fde5 	bl	80058ee <LL_RCC_GetSysClkSource>
 8005d24:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d26:	f7ff feeb 	bl	8005b00 <LL_RCC_PLL_GetMainSource>
 8005d2a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d005      	beq.n	8005d3e <HAL_RCC_OscConfig+0x16e>
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d10d      	bne.n	8005d54 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d10a      	bne.n	8005d54 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d3e:	f7ff fbf5 	bl	800552c <LL_RCC_HSE_IsReady>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d039      	beq.n	8005dbc <HAL_RCC_OscConfig+0x1ec>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d135      	bne.n	8005dbc <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e2c5      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d102      	bne.n	8005d64 <HAL_RCC_OscConfig+0x194>
 8005d5e:	f7ff fbc7 	bl	80054f0 <LL_RCC_HSE_Enable>
 8005d62:	e001      	b.n	8005d68 <HAL_RCC_OscConfig+0x198>
 8005d64:	f7ff fbd3 	bl	800550e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d012      	beq.n	8005d96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fb feb6 	bl	8001ae0 <HAL_GetTick>
 8005d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fb feb2 	bl	8001ae0 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e2aa      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005d8a:	f7ff fbcf 	bl	800552c <LL_RCC_HSE_IsReady>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f1      	beq.n	8005d78 <HAL_RCC_OscConfig+0x1a8>
 8005d94:	e013      	b.n	8005dbe <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fb fea3 	bl	8001ae0 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9e:	f7fb fe9f 	bl	8001ae0 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b64      	cmp	r3, #100	; 0x64
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e297      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005db0:	f7ff fbbc 	bl	800552c <LL_RCC_HSE_IsReady>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f1      	bne.n	8005d9e <HAL_RCC_OscConfig+0x1ce>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d051      	beq.n	8005e6e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dca:	f7ff fd90 	bl	80058ee <LL_RCC_GetSysClkSource>
 8005dce:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd0:	f7ff fe96 	bl	8005b00 <LL_RCC_PLL_GetMainSource>
 8005dd4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d005      	beq.n	8005de8 <HAL_RCC_OscConfig+0x218>
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b0c      	cmp	r3, #12
 8005de0:	d113      	bne.n	8005e0a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d110      	bne.n	8005e0a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de8:	f7ff fbd0 	bl	800558c <LL_RCC_HSI_IsReady>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_RCC_OscConfig+0x22e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e270      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fbd4 	bl	80055b0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e08:	e031      	b.n	8005e6e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d019      	beq.n	8005e46 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e12:	f7ff fb9d 	bl	8005550 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e16:	f7fb fe63 	bl	8001ae0 <HAL_GetTick>
 8005e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e1e:	f7fb fe5f 	bl	8001ae0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e257      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e30:	f7ff fbac 	bl	800558c <LL_RCC_HSI_IsReady>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f1      	beq.n	8005e1e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fbb6 	bl	80055b0 <LL_RCC_HSI_SetCalibTrimming>
 8005e44:	e013      	b.n	8005e6e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e46:	f7ff fb92 	bl	800556e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fb fe49 	bl	8001ae0 <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e52:	f7fb fe45 	bl	8001ae0 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e23d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005e64:	f7ff fb92 	bl	800558c <LL_RCC_HSI_IsReady>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f1      	bne.n	8005e52 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80a3 	beq.w	8005fce <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d076      	beq.n	8005f7e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d046      	beq.n	8005f2a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005e9c:	f7ff fc49 	bl	8005732 <LL_RCC_LSI1_IsReady>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d113      	bne.n	8005ece <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005ea6:	f7ff fc22 	bl	80056ee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005eaa:	f7fb fe19 	bl	8001ae0 <HAL_GetTick>
 8005eae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005eb2:	f7fb fe15 	bl	8001ae0 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e20d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005ec4:	f7ff fc35 	bl	8005732 <LL_RCC_LSI1_IsReady>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f1      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005ece:	f7ff fc42 	bl	8005756 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fb fe05 	bl	8001ae0 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005eda:	f7fb fe01 	bl	8001ae0 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1f9      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005eec:	f7ff fc55 	bl	800579a <LL_RCC_LSI2_IsReady>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f1      	beq.n	8005eda <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fc5f 	bl	80057be <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f00:	f7ff fc06 	bl	8005710 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fb fdec 	bl	8001ae0 <HAL_GetTick>
 8005f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f0c:	f7fb fde8 	bl	8001ae0 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1e0      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f1e:	f7ff fc08 	bl	8005732 <LL_RCC_LSI1_IsReady>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f1      	bne.n	8005f0c <HAL_RCC_OscConfig+0x33c>
 8005f28:	e051      	b.n	8005fce <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005f2a:	f7ff fbe0 	bl	80056ee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2e:	f7fb fdd7 	bl	8001ae0 <HAL_GetTick>
 8005f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f36:	f7fb fdd3 	bl	8001ae0 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1cb      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005f48:	f7ff fbf3 	bl	8005732 <LL_RCC_LSI1_IsReady>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f1      	beq.n	8005f36 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005f52:	f7ff fc11 	bl	8005778 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005f56:	e00c      	b.n	8005f72 <HAL_RCC_OscConfig+0x3a2>
 8005f58:	20000004 	.word	0x20000004
 8005f5c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f60:	f7fb fdbe 	bl	8001ae0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e1b6      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005f72:	f7ff fc12 	bl	800579a <LL_RCC_LSI2_IsReady>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1f1      	bne.n	8005f60 <HAL_RCC_OscConfig+0x390>
 8005f7c:	e027      	b.n	8005fce <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005f7e:	f7ff fbfb 	bl	8005778 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f82:	f7fb fdad 	bl	8001ae0 <HAL_GetTick>
 8005f86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f8a:	f7fb fda9 	bl	8001ae0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e1a1      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005f9c:	f7ff fbfd 	bl	800579a <LL_RCC_LSI2_IsReady>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f1      	bne.n	8005f8a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005fa6:	f7ff fbb3 	bl	8005710 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005faa:	f7fb fd99 	bl	8001ae0 <HAL_GetTick>
 8005fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fb2:	f7fb fd95 	bl	8001ae0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e18d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005fc4:	f7ff fbb5 	bl	8005732 <LL_RCC_LSI1_IsReady>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f1      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d05b      	beq.n	8006092 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fda:	4bb5      	ldr	r3, [pc, #724]	; (80062b0 <HAL_RCC_OscConfig+0x6e0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d114      	bne.n	8006010 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005fe6:	f7ff fa43 	bl	8005470 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fea:	f7fb fd79 	bl	8001ae0 <HAL_GetTick>
 8005fee:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff2:	f7fb fd75 	bl	8001ae0 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e16d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006004:	4baa      	ldr	r3, [pc, #680]	; (80062b0 <HAL_RCC_OscConfig+0x6e0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d102      	bne.n	800601e <HAL_RCC_OscConfig+0x44e>
 8006018:	f7ff fb13 	bl	8005642 <LL_RCC_LSE_Enable>
 800601c:	e00c      	b.n	8006038 <HAL_RCC_OscConfig+0x468>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b05      	cmp	r3, #5
 8006024:	d104      	bne.n	8006030 <HAL_RCC_OscConfig+0x460>
 8006026:	f7ff fb2e 	bl	8005686 <LL_RCC_LSE_EnableBypass>
 800602a:	f7ff fb0a 	bl	8005642 <LL_RCC_LSE_Enable>
 800602e:	e003      	b.n	8006038 <HAL_RCC_OscConfig+0x468>
 8006030:	f7ff fb18 	bl	8005664 <LL_RCC_LSE_Disable>
 8006034:	f7ff fb38 	bl	80056a8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d014      	beq.n	800606a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fb fd4e 	bl	8001ae0 <HAL_GetTick>
 8006044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006046:	e00a      	b.n	800605e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006048:	f7fb fd4a 	bl	8001ae0 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	f241 3288 	movw	r2, #5000	; 0x1388
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e140      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800605e:	f7ff fb34 	bl	80056ca <LL_RCC_LSE_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0ef      	beq.n	8006048 <HAL_RCC_OscConfig+0x478>
 8006068:	e013      	b.n	8006092 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606a:	f7fb fd39 	bl	8001ae0 <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006070:	e00a      	b.n	8006088 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006072:	f7fb fd35 	bl	8001ae0 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e12b      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006088:	f7ff fb1f 	bl	80056ca <LL_RCC_LSE_IsReady>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1ef      	bne.n	8006072 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d02c      	beq.n	80060f8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060a6:	f7ff fa98 	bl	80055da <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060aa:	f7fb fd19 	bl	8001ae0 <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060b2:	f7fb fd15 	bl	8001ae0 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e10d      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80060c4:	f7ff faab 	bl	800561e <LL_RCC_HSI48_IsReady>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f1      	beq.n	80060b2 <HAL_RCC_OscConfig+0x4e2>
 80060ce:	e013      	b.n	80060f8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060d0:	f7ff fa94 	bl	80055fc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fb fd04 	bl	8001ae0 <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060dc:	f7fb fd00 	bl	8001ae0 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0f8      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80060ee:	f7ff fa96 	bl	800561e <LL_RCC_HSI48_IsReady>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f1      	bne.n	80060dc <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80ee 	beq.w	80062de <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006102:	f7ff fbf4 	bl	80058ee <LL_RCC_GetSysClkSource>
 8006106:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2b02      	cmp	r3, #2
 8006116:	f040 80af 	bne.w	8006278 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0203 	and.w	r2, r3, #3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	429a      	cmp	r2, r3
 8006126:	d123      	bne.n	8006170 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d11c      	bne.n	8006170 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006142:	429a      	cmp	r2, r3
 8006144:	d114      	bne.n	8006170 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d10d      	bne.n	8006170 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d106      	bne.n	8006170 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d05d      	beq.n	800622c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d058      	beq.n	8006228 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0ab      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006188:	f7ff fc74 	bl	8005a74 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800618c:	f7fb fca8 	bl	8001ae0 <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006194:	f7fb fca4 	bl	8001ae0 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e09c      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1ef      	bne.n	8006194 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <HAL_RCC_OscConfig+0x6e4>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061c6:	4311      	orrs	r1, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061cc:	0212      	lsls	r2, r2, #8
 80061ce:	4311      	orrs	r1, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061d4:	4311      	orrs	r1, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061da:	4311      	orrs	r1, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061e0:	430a      	orrs	r2, r1
 80061e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061ea:	f7ff fc34 	bl	8005a56 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061fe:	f7fb fc6f 	bl	8001ae0 <HAL_GetTick>
 8006202:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006206:	f7fb fc6b 	bl	8001ae0 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e063      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0ef      	beq.n	8006206 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006226:	e05a      	b.n	80062de <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e059      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800622c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d151      	bne.n	80062de <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800623a:	f7ff fc0c 	bl	8005a56 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800623e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800624e:	f7fb fc47 	bl	8001ae0 <HAL_GetTick>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006256:	f7fb fc43 	bl	8001ae0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e03b      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <HAL_RCC_OscConfig+0x686>
 8006276:	e032      	b.n	80062de <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b0c      	cmp	r3, #12
 800627c:	d02d      	beq.n	80062da <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627e:	f7ff fbf9 	bl	8005a74 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80062a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fb fc1b 	bl	8001ae0 <HAL_GetTick>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ac:	e00d      	b.n	80062ca <HAL_RCC_OscConfig+0x6fa>
 80062ae:	bf00      	nop
 80062b0:	58000400 	.word	0x58000400
 80062b4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fb fc12 	bl	8001ae0 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e00a      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1ef      	bne.n	80062b8 <HAL_RCC_OscConfig+0x6e8>
 80062d8:	e001      	b.n	80062de <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3734      	adds	r7, #52	; 0x34
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}

080062e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e12d      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062fc:	4b98      	ldr	r3, [pc, #608]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d91b      	bls.n	8006342 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630a:	4b95      	ldr	r3, [pc, #596]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 0207 	bic.w	r2, r3, #7
 8006312:	4993      	ldr	r1, [pc, #588]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fb fbe1 	bl	8001ae0 <HAL_GetTick>
 800631e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006320:	e008      	b.n	8006334 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006322:	f7fb fbdd 	bl	8001ae0 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e111      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006334:	4b8a      	ldr	r3, [pc, #552]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d1ef      	bne.n	8006322 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff fad7 	bl	8005906 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006358:	f7fb fbc2 	bl	8001ae0 <HAL_GetTick>
 800635c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006360:	f7fb fbbe 	bl	8001ae0 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e0f2      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006372:	f7ff fbd1 	bl	8005b18 <LL_RCC_IsActiveFlag_HPRE>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0f1      	beq.n	8006360 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d016      	beq.n	80063b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff face 	bl	800592e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006392:	f7fb fba5 	bl	8001ae0 <HAL_GetTick>
 8006396:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006398:	e008      	b.n	80063ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800639a:	f7fb fba1 	bl	8001ae0 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e0d5      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80063ac:	f7ff fbc6 	bl	8005b3c <LL_RCC_IsActiveFlag_C2HPRE>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f1      	beq.n	800639a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d016      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fac7 	bl	800595a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063cc:	f7fb fb88 	bl	8001ae0 <HAL_GetTick>
 80063d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063d4:	f7fb fb84 	bl	8001ae0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e0b8      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063e6:	f7ff fbbc 	bl	8005b62 <LL_RCC_IsActiveFlag_SHDHPRE>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f1      	beq.n	80063d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d016      	beq.n	800642a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fac1 	bl	8005988 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006406:	f7fb fb6b 	bl	8001ae0 <HAL_GetTick>
 800640a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800640e:	f7fb fb67 	bl	8001ae0 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e09b      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006420:	f7ff fbb2 	bl	8005b88 <LL_RCC_IsActiveFlag_PPRE1>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f1      	beq.n	800640e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d017      	beq.n	8006466 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fab7 	bl	80059b0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006442:	f7fb fb4d 	bl	8001ae0 <HAL_GetTick>
 8006446:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800644a:	f7fb fb49 	bl	8001ae0 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e07d      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800645c:	f7ff fba6 	bl	8005bac <LL_RCC_IsActiveFlag_PPRE2>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f1      	beq.n	800644a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d043      	beq.n	80064fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d106      	bne.n	8006488 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800647a:	f7ff f857 	bl	800552c <LL_RCC_HSE_IsReady>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11e      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e067      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b03      	cmp	r3, #3
 800648e:	d106      	bne.n	800649e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006490:	f7ff faff 	bl	8005a92 <LL_RCC_PLL_IsReady>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d113      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e05c      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064a6:	f7ff f9bf 	bl	8005828 <LL_RCC_MSI_IsReady>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d108      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e051      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80064b4:	f7ff f86a 	bl	800558c <LL_RCC_HSI_IsReady>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e04a      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff f9fd 	bl	80058c6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064cc:	f7fb fb08 	bl	8001ae0 <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d4:	f7fb fb04 	bl	8001ae0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e036      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ea:	f7ff fa00 	bl	80058ee <LL_RCC_GetSysClkSource>
 80064ee:	4602      	mov	r2, r0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d1ec      	bne.n	80064d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064fa:	4b19      	ldr	r3, [pc, #100]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d21b      	bcs.n	8006540 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f023 0207 	bic.w	r2, r3, #7
 8006510:	4913      	ldr	r1, [pc, #76]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	4313      	orrs	r3, r2
 8006516:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006518:	f7fb fae2 	bl	8001ae0 <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800651e:	e008      	b.n	8006532 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006520:	f7fb fade 	bl	8001ae0 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e012      	b.n	8006558 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_RCC_ClockConfig+0x278>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d1ef      	bne.n	8006520 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006540:	f000 f87e 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006544:	4603      	mov	r3, r0
 8006546:	4a07      	ldr	r2, [pc, #28]	; (8006564 <HAL_RCC_ClockConfig+0x27c>)
 8006548:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800654a:	f7fb fad5 	bl	8001af8 <HAL_GetTickPrio>
 800654e:	4603      	mov	r3, r0
 8006550:	4618      	mov	r0, r3
 8006552:	f7fa ff21 	bl	8001398 <HAL_InitTick>
 8006556:	4603      	mov	r3, r0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	58004000 	.word	0x58004000
 8006564:	20000004 	.word	0x20000004

08006568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006568:	b590      	push	{r4, r7, lr}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800656e:	f7ff f9be 	bl	80058ee <LL_RCC_GetSysClkSource>
 8006572:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800657a:	f7ff f97a 	bl	8005872 <LL_RCC_MSI_GetRange>
 800657e:	4603      	mov	r3, r0
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e04b      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d102      	bne.n	800659c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006596:	4b28      	ldr	r3, [pc, #160]	; (8006638 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e045      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d10a      	bne.n	80065b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065a2:	f7fe ff93 	bl	80054cc <LL_RCC_HSE_IsEnabledDiv2>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d102      	bne.n	80065b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80065ac:	4b22      	ldr	r3, [pc, #136]	; (8006638 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e03a      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80065b2:	4b22      	ldr	r3, [pc, #136]	; (800663c <HAL_RCC_GetSysClockFreq+0xd4>)
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	e037      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80065b8:	f7ff faa2 	bl	8005b00 <LL_RCC_PLL_GetMainSource>
 80065bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d003      	beq.n	80065cc <HAL_RCC_GetSysClockFreq+0x64>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d003      	beq.n	80065d2 <HAL_RCC_GetSysClockFreq+0x6a>
 80065ca:	e00d      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80065cc:	4b1a      	ldr	r3, [pc, #104]	; (8006638 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065ce:	60bb      	str	r3, [r7, #8]
        break;
 80065d0:	e015      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065d2:	f7fe ff7b 	bl	80054cc <LL_RCC_HSE_IsEnabledDiv2>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d102      	bne.n	80065e2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80065dc:	4b16      	ldr	r3, [pc, #88]	; (8006638 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065de:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80065e0:	e00d      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80065e2:	4b16      	ldr	r3, [pc, #88]	; (800663c <HAL_RCC_GetSysClockFreq+0xd4>)
 80065e4:	60bb      	str	r3, [r7, #8]
        break;
 80065e6:	e00a      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80065e8:	f7ff f943 	bl	8005872 <LL_RCC_MSI_GetRange>
 80065ec:	4603      	mov	r3, r0
 80065ee:	091b      	lsrs	r3, r3, #4
 80065f0:	f003 030f 	and.w	r3, r3, #15
 80065f4:	4a0f      	ldr	r2, [pc, #60]	; (8006634 <HAL_RCC_GetSysClockFreq+0xcc>)
 80065f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065fa:	60bb      	str	r3, [r7, #8]
        break;
 80065fc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80065fe:	f7ff fa5a 	bl	8005ab6 <LL_RCC_PLL_GetN>
 8006602:	4602      	mov	r2, r0
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	fb03 f402 	mul.w	r4, r3, r2
 800660a:	f7ff fa6d 	bl	8005ae8 <LL_RCC_PLL_GetDivider>
 800660e:	4603      	mov	r3, r0
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	3301      	adds	r3, #1
 8006614:	fbb4 f4f3 	udiv	r4, r4, r3
 8006618:	f7ff fa5a 	bl	8005ad0 <LL_RCC_PLL_GetR>
 800661c:	4603      	mov	r3, r0
 800661e:	0f5b      	lsrs	r3, r3, #29
 8006620:	3301      	adds	r3, #1
 8006622:	fbb4 f3f3 	udiv	r3, r4, r3
 8006626:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bd90      	pop	{r4, r7, pc}
 8006632:	bf00      	nop
 8006634:	08012368 	.word	0x08012368
 8006638:	00f42400 	.word	0x00f42400
 800663c:	01e84800 	.word	0x01e84800

08006640 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006640:	b598      	push	{r3, r4, r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006644:	f7ff ff90 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8006648:	4604      	mov	r4, r0
 800664a:	f7ff f9c5 	bl	80059d8 <LL_RCC_GetAHBPrescaler>
 800664e:	4603      	mov	r3, r0
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	4a03      	ldr	r2, [pc, #12]	; (8006664 <HAL_RCC_GetHCLKFreq+0x24>)
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006660:	4618      	mov	r0, r3
 8006662:	bd98      	pop	{r3, r4, r7, pc}
 8006664:	08012308 	.word	0x08012308

08006668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006668:	b598      	push	{r3, r4, r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800666c:	f7ff ffe8 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006670:	4604      	mov	r4, r0
 8006672:	f7ff f9e4 	bl	8005a3e <LL_RCC_GetAPB2Prescaler>
 8006676:	4603      	mov	r3, r0
 8006678:	0adb      	lsrs	r3, r3, #11
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	4a04      	ldr	r2, [pc, #16]	; (8006690 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	fa24 f303 	lsr.w	r3, r4, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd98      	pop	{r3, r4, r7, pc}
 8006690:	08012348 	.word	0x08012348

08006694 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	226f      	movs	r2, #111	; 0x6f
 80066a2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80066a4:	f7ff f923 	bl	80058ee <LL_RCC_GetSysClkSource>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80066ae:	f7ff f993 	bl	80059d8 <LL_RCC_GetAHBPrescaler>
 80066b2:	4602      	mov	r2, r0
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80066b8:	f7ff f9b5 	bl	8005a26 <LL_RCC_GetAPB1Prescaler>
 80066bc:	4602      	mov	r2, r0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80066c2:	f7ff f9bc 	bl	8005a3e <LL_RCC_GetAPB2Prescaler>
 80066c6:	4602      	mov	r2, r0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80066cc:	f7ff f990 	bl	80059f0 <LL_C2_RCC_GetAHBPrescaler>
 80066d0:	4602      	mov	r2, r0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80066d6:	f7ff f998 	bl	8005a0a <LL_RCC_GetAHB4Prescaler>
 80066da:	4602      	mov	r2, r0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_RCC_GetClockConfig+0x60>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0207 	and.w	r2, r3, #7
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	58004000 	.word	0x58004000

080066f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80066f8:	b590      	push	{r4, r7, lr}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2bb0      	cmp	r3, #176	; 0xb0
 8006704:	d903      	bls.n	800670e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006706:	4b15      	ldr	r3, [pc, #84]	; (800675c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e007      	b.n	800671e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	4a11      	ldr	r2, [pc, #68]	; (800675c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800671e:	f7ff f974 	bl	8005a0a <LL_RCC_GetAHB4Prescaler>
 8006722:	4603      	mov	r3, r0
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
 8006740:	0c9c      	lsrs	r4, r3, #18
 8006742:	f7fe fea5 	bl	8005490 <HAL_PWREx_GetVoltageRange>
 8006746:	4603      	mov	r3, r0
 8006748:	4619      	mov	r1, r3
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f80c 	bl	8006768 <RCC_SetFlashLatency>
 8006750:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	08012368 	.word	0x08012368
 8006760:	08012308 	.word	0x08012308
 8006764:	431bde83 	.word	0x431bde83

08006768 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b093      	sub	sp, #76	; 0x4c
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006772:	4b39      	ldr	r3, [pc, #228]	; (8006858 <RCC_SetFlashLatency+0xf0>)
 8006774:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800677a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800677e:	4a37      	ldr	r2, [pc, #220]	; (800685c <RCC_SetFlashLatency+0xf4>)
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	ca07      	ldmia	r2, {r0, r1, r2}
 8006786:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800678a:	4b35      	ldr	r3, [pc, #212]	; (8006860 <RCC_SetFlashLatency+0xf8>)
 800678c:	f107 040c 	add.w	r4, r7, #12
 8006790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006796:	2300      	movs	r3, #0
 8006798:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a0:	d11c      	bne.n	80067dc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	643b      	str	r3, [r7, #64]	; 0x40
 80067a6:	e015      	b.n	80067d4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067b0:	4413      	add	r3, r2
 80067b2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d808      	bhi.n	80067ce <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067c4:	4413      	add	r3, r2
 80067c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067ca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80067cc:	e022      	b.n	8006814 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d0:	3301      	adds	r3, #1
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d9e6      	bls.n	80067a8 <RCC_SetFlashLatency+0x40>
 80067da:	e01b      	b.n	8006814 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e0:	e015      	b.n	800680e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80067e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067ea:	4413      	add	r3, r2
 80067ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d808      	bhi.n	8006808 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067fe:	4413      	add	r3, r2
 8006800:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006804:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006806:	e005      	b.n	8006814 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680a:	3301      	adds	r3, #1
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	2b02      	cmp	r3, #2
 8006812:	d9e6      	bls.n	80067e2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006814:	4b13      	ldr	r3, [pc, #76]	; (8006864 <RCC_SetFlashLatency+0xfc>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f023 0207 	bic.w	r2, r3, #7
 800681c:	4911      	ldr	r1, [pc, #68]	; (8006864 <RCC_SetFlashLatency+0xfc>)
 800681e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006820:	4313      	orrs	r3, r2
 8006822:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006824:	f7fb f95c 	bl	8001ae0 <HAL_GetTick>
 8006828:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800682a:	e008      	b.n	800683e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800682c:	f7fb f958 	bl	8001ae0 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e007      	b.n	800684e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <RCC_SetFlashLatency+0xfc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006848:	429a      	cmp	r2, r3
 800684a:	d1ef      	bne.n	800682c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	374c      	adds	r7, #76	; 0x4c
 8006852:	46bd      	mov	sp, r7
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	bf00      	nop
 8006858:	080121f4 	.word	0x080121f4
 800685c:	08012204 	.word	0x08012204
 8006860:	08012210 	.word	0x08012210
 8006864:	58004000 	.word	0x58004000

08006868 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800686c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800687a:	d101      	bne.n	8006880 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <LL_RCC_HSE_IsReady>:
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689e:	d101      	bne.n	80068a4 <LL_RCC_HSE_IsReady+0x18>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <LL_RCC_HSE_IsReady+0x1a>
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <LL_RCC_HSI_IsReady>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80068b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c2:	d101      	bne.n	80068c8 <LL_RCC_HSI_IsReady+0x18>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <LL_RCC_HSI_IsReady+0x1a>
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <LL_RCC_HSI48_IsReady>:
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80068d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d101      	bne.n	80068ec <LL_RCC_HSI48_IsReady+0x18>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <LL_RCC_HSI48_IsReady+0x1a>
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_RCC_LSE_IsEnabled>:
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <LL_RCC_LSE_IsEnabled+0x18>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <LL_RCC_LSE_IsEnabled+0x1a>
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <LL_RCC_LSE_IsReady>:
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d101      	bne.n	8006934 <LL_RCC_LSE_IsReady+0x18>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <LL_RCC_LSE_IsReady+0x1a>
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_RCC_LSI1_IsReady>:
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d101      	bne.n	8006958 <LL_RCC_LSI1_IsReady+0x18>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <LL_RCC_LSI1_IsReady+0x1a>
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_LSI2_IsReady>:
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b08      	cmp	r3, #8
 8006976:	d101      	bne.n	800697c <LL_RCC_LSI2_IsReady+0x18>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <LL_RCC_LSI2_IsReady+0x1a>
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <LL_RCC_MSI_IsReady>:
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800698c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d101      	bne.n	800699e <LL_RCC_MSI_IsReady+0x16>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <LL_RCC_MSI_IsReady+0x18>
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <LL_RCC_MSI_EnablePLLMode>:
{
 80069aa:	b480      	push	{r7}
 80069ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80069ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069b8:	f043 0304 	orr.w	r3, r3, #4
 80069bc:	6013      	str	r3, [r2, #0]
}
 80069be:	bf00      	nop
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <LL_RCC_MSI_GetRange>:
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069d8:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2bb0      	cmp	r3, #176	; 0xb0
 80069de:	d901      	bls.n	80069e4 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80069e0:	23b0      	movs	r3, #176	; 0xb0
 80069e2:	607b      	str	r3, [r7, #4]
  return msiRange;
 80069e4:	687b      	ldr	r3, [r7, #4]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <LL_RCC_SetRFWKPClockSource>:
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <LL_RCC_GetRFWKPClockSource>:
{
 8006a1e:	b480      	push	{r7}
 8006a20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8006a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <LL_RCC_GetAHBPrescaler>:
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <LL_RCC_GetAPB1Prescaler>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_RCC_GetAPB2Prescaler>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <LL_RCC_SetSMPSClockSource>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	f023 0203 	bic.w	r2, r3, #3
 8006a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_RCC_GetSMPSClockSource>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <LL_RCC_SetSMPSPrescaler>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <LL_RCC_GetSMPSPrescaler>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	f003 0330 	and.w	r3, r3, #48	; 0x30
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_RCC_SetUSARTClockSource>:
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	f023 0203 	bic.w	r2, r3, #3
 8006b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <LL_RCC_SetLPUARTClockSource>:
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <LL_RCC_SetI2CClockSource>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b70:	43db      	mvns	r3, r3
 8006b72:	401a      	ands	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_SetLPTIMClockSource>:
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0c1b      	lsrs	r3, r3, #16
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	401a      	ands	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <LL_RCC_SetSAIClockSource>:
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_RCC_SetRNGClockSource>:
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <LL_RCC_SetCLK48ClockSource>:
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <LL_RCC_SetUSBClockSource>:
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff ffe3 	bl	8006c1e <LL_RCC_SetCLK48ClockSource>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <LL_RCC_SetADCClockSource>:
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_GetUSARTClockSource>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4013      	ands	r3, r2
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <LL_RCC_GetLPUARTClockSource>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4013      	ands	r3, r2
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <LL_RCC_GetI2CClockSource>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8006cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	091a      	lsrs	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4313      	orrs	r3, r2
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_RCC_GetLPTIMClockSource>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4013      	ands	r3, r2
 8006d08:	0c1a      	lsrs	r2, r3, #16
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4313      	orrs	r3, r2
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <LL_RCC_GetSAIClockSource>:
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4013      	ands	r3, r2
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <LL_RCC_GetRNGClockSource>:
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4013      	ands	r3, r2
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_GetCLK48ClockSource>:
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4013      	ands	r3, r2
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <LL_RCC_GetUSBClockSource>:
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ffe9 	bl	8006d5a <LL_RCC_GetCLK48ClockSource>
 8006d88:	4603      	mov	r3, r0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <LL_RCC_GetADCClockSource>:
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8006d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4013      	ands	r3, r2
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <LL_RCC_SetRTCClockSource>:
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <LL_RCC_GetRTCClockSource>:
{
 8006dde:	b480      	push	{r7}
 8006de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <LL_RCC_ForceBackupDomainReset>:
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e10:	bf00      	nop
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e32:	bf00      	nop
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_RCC_PLL_IsReady>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e4e:	d101      	bne.n	8006e54 <LL_RCC_PLL_IsReady+0x18>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <LL_RCC_PLL_IsReady+0x1a>
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <LL_RCC_PLL_GetN>:
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_RCC_PLL_GetP>:
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <LL_RCC_PLL_GetQ>:
{
 8006e92:	b480      	push	{r7}
 8006e94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8006e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <LL_RCC_PLL_GetDivider>:
{
 8006eaa:	b480      	push	{r7}
 8006eac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <LL_RCC_PLLSAI1_Enable>:
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ed4:	6013      	str	r3, [r2, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <LL_RCC_PLLSAI1_Disable>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ef2:	6013      	str	r3, [r2, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <LL_RCC_PLLSAI1_IsReady>:
{
 8006efe:	b480      	push	{r7}
 8006f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f10:	d101      	bne.n	8006f16 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <LL_RCC_PLLSAI1_GetN>:
{
 8006f22:	b480      	push	{r7}
 8006f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8006f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <LL_RCC_PLLSAI1_GetP>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 8006f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <LL_RCC_PLLSAI1_GetQ>:
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8006f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_RCC_PLLSAI1_GetR>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 8006f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <LL_RCC_PLL_GetMainSource>:
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006fa8:	2300      	movs	r3, #0
 8006faa:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d034      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fc0:	d021      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006fc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fc6:	d81b      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fcc:	d01d      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fd2:	d815      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fdc:	d110      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fec:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006fee:	e00d      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fd64 	bl	8007ac2 <RCCEx_PLLSAI1_ConfigNP>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ffe:	e005      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	77fb      	strb	r3, [r7, #31]
        break;
 8007004:	e002      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007006:	bf00      	nop
 8007008:	e000      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800700a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700c:	7ffb      	ldrb	r3, [r7, #31]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d105      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fdd5 	bl	8006bc6 <LL_RCC_SetSAIClockSource>
 800701c:	e001      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	7ffb      	ldrb	r3, [r7, #31]
 8007020:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800702a:	2b00      	cmp	r3, #0
 800702c:	d046      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800702e:	f7ff fed6 	bl	8006dde <LL_RCC_GetRTCClockSource>
 8007032:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	429a      	cmp	r2, r3
 800703c:	d03c      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800703e:	f7fe fa17 	bl	8005470 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d105      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff feb0 	bl	8006db2 <LL_RCC_SetRTCClockSource>
 8007052:	e02e      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800705e:	f7ff fecb 	bl	8006df8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007062:	f7ff feda 	bl	8006e1a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800707e:	f7ff fc3b 	bl	80068f8 <LL_RCC_LSE_IsEnabled>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d114      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007088:	f7fa fd2a 	bl	8001ae0 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800708e:	e00b      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007090:	f7fa fd26 	bl	8001ae0 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	; 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d902      	bls.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	77fb      	strb	r3, [r7, #31]
              break;
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80070a8:	f7ff fc38 	bl	800691c <LL_RCC_LSE_IsReady>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d1ee      	bne.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80070b2:	7ffb      	ldrb	r3, [r7, #31]
 80070b4:	77bb      	strb	r3, [r7, #30]
 80070b6:	e001      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7ffb      	ldrb	r3, [r7, #31]
 80070ba:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fd17 	bl	8006b00 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff fd22 	bl	8006b2c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7ff fd4a 	bl	8006b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fd3f 	bl	8006b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fd17 	bl	8006b58 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fd0c 	bl	8006b58 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d022      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fd7a 	bl	8006c4a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800715e:	d107      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800716a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800716e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007178:	d10b      	bne.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fcfa 	bl	8007b78 <RCCEx_PLLSAI1_ConfigNQ>
 8007184:	4603      	mov	r3, r0
 8007186:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007188:	7ffb      	ldrb	r3, [r7, #31]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800719a:	2b00      	cmp	r3, #0
 800719c:	d02b      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a6:	d008      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b0:	d003      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fd17 	bl	8006bf2 <LL_RCC_SetRNGClockSource>
 80071c4:	e00a      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7ff fd0e 	bl	8006bf2 <LL_RCC_SetRNGClockSource>
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff fd21 	bl	8006c1e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80071e4:	d107      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80071e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d022      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff fd2a 	bl	8006c60 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007214:	d107      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007224:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800722e:	d10b      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fcfa 	bl	8007c2e <RCCEx_PLLSAI1_ConfigNR>
 800723a:	4603      	mov	r3, r0
 800723c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800723e:	7ffb      	ldrb	r3, [r7, #31]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8007244:	7ffb      	ldrb	r3, [r7, #31]
 8007246:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fbca 	bl	80069f2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fc26 	bl	8006ac0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fc01 	bl	8006a80 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800727e:	7fbb      	ldrb	r3, [r7, #30]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3720      	adds	r7, #32
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b093      	sub	sp, #76	; 0x4c
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	647b      	str	r3, [r7, #68]	; 0x44
  
#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8007294:	f7ff fc28 	bl	8006ae8 <LL_RCC_GetSMPSPrescaler>
 8007298:	4603      	mov	r3, r0
 800729a:	091b      	lsrs	r3, r3, #4
 800729c:	643b      	str	r3, [r7, #64]	; 0x40
#endif
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a4:	d12d      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 80072a6:	f7ff fd9a 	bl	8006dde <LL_RCC_GetRTCClockSource>
 80072aa:	6138      	str	r0, [r7, #16]
    
    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b2:	d109      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80072b4:	f7ff fb32 	bl	800691c <LL_RCC_LSE_IsReady>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	f040 83d8 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80072c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c4:	647b      	str	r3, [r7, #68]	; 0x44
 80072c6:	e3d3      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ce:	d110      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80072d0:	f7ff fb36 	bl	8006940 <LL_RCC_LSI1_IsReady>
 80072d4:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80072d6:	f7ff fb45 	bl	8006964 <LL_RCC_LSI2_IsReady>
 80072da:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d003      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	f040 83c3 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 80072ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072ee:	647b      	str	r3, [r7, #68]	; 0x44
 80072f0:	e3be      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f8:	f040 83ba 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 32U;
 80072fc:	4bba      	ldr	r3, [pc, #744]	; (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007300:	e3b6      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d130      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8007308:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 800730c:	f7ff fd05 	bl	8006d1a <LL_RCC_GetSAIClockSource>
 8007310:	4603      	mov	r3, r0
 8007312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007316:	d008      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731c:	d822      	bhi.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00c      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8007322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007326:	d013      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007328:	e01c      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
    case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
      if (LL_RCC_HSI_IsReady() == 1U)
 800732a:	f7ff fac1 	bl	80068b0 <LL_RCC_HSI_IsReady>
 800732e:	4603      	mov	r3, r0
 8007330:	2b01      	cmp	r3, #1
 8007332:	f040 837e 	bne.w	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      {
        frequency = HSI_VALUE;
 8007336:	4bad      	ldr	r3, [pc, #692]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800733a:	e37a      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
      
#if defined(SAI1)
    case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800733c:	f7ff fddf 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007340:	4603      	mov	r3, r0
 8007342:	2b01      	cmp	r3, #1
 8007344:	f040 8377 	bne.w	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8007348:	f000 fdce 	bl	8007ee8 <RCC_PLLSAI1_GetFreqDomain_P>
 800734c:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800734e:	e372      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
#endif
      
    case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8007350:	f7ff fd74 	bl	8006e3c <LL_RCC_PLL_IsReady>
 8007354:	4603      	mov	r3, r0
 8007356:	2b01      	cmp	r3, #1
 8007358:	f040 836f 	bne.w	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      {
        frequency = RCC_PLL_GetFreqDomain_P();
 800735c:	f000 fcc2 	bl	8007ce4 <RCC_PLL_GetFreqDomain_P>
 8007360:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007362:	e36a      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
      
    default: /* External input clock used as SAI1 clock source */
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007364:	4ba2      	ldr	r3, [pc, #648]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8007366:	647b      	str	r3, [r7, #68]	; 0x44
      break;
 8007368:	e382      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007370:	d168      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 8007372:	f000 fb87 	bl	8007a84 <HAL_RCCEx_GetRngCLKSource>
 8007376:	61f8      	str	r0, [r7, #28]
    
    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737e:	d110      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007380:	f7ff fade 	bl	8006940 <LL_RCC_LSI1_IsReady>
 8007384:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007386:	f7ff faed 	bl	8006964 <LL_RCC_LSI2_IsReady>
 800738a:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d003      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b01      	cmp	r3, #1
 8007396:	f040 836b 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800739a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800739e:	647b      	str	r3, [r7, #68]	; 0x44
 80073a0:	e366      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a8:	d109      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80073aa:	f7ff fab7 	bl	800691c <LL_RCC_LSE_IsReady>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 835d 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80073b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ba:	647b      	str	r3, [r7, #68]	; 0x44
 80073bc:	e358      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80073c4:	d10e      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80073c6:	f7ff fd39 	bl	8006e3c <LL_RCC_PLL_IsReady>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 834f 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80073d2:	f000 fcdd 	bl	8007d90 <RCC_PLL_GetFreqDomain_Q>
 80073d6:	4603      	mov	r3, r0
 80073d8:	4a86      	ldr	r2, [pc, #536]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	647b      	str	r3, [r7, #68]	; 0x44
 80073e2:	e345      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 80073ea:	d114      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80073ec:	f7ff facc 	bl	8006988 <LL_RCC_MSI_IsReady>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	f040 833c 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80073f8:	f7ff fae6 	bl	80069c8 <LL_RCC_MSI_GetRange>
 80073fc:	4603      	mov	r3, r0
 80073fe:	091b      	lsrs	r3, r3, #4
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	4a7c      	ldr	r2, [pc, #496]	; (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740a:	4a7a      	ldr	r2, [pc, #488]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800740c:	fba2 2303 	umull	r2, r3, r2, r3
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	647b      	str	r3, [r7, #68]	; 0x44
 8007414:	e32c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
 800741c:	d109      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800741e:	f7ff fd6e 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	f040 8323 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800742a:	f000 fdb3 	bl	8007f94 <RCC_PLLSAI1_GetFreqDomain_Q>
 800742e:	6478      	str	r0, [r7, #68]	; 0x44
 8007430:	e31e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 8007432:	f7ff fa4f 	bl	80068d4 <LL_RCC_HSI48_IsReady>
 8007436:	4603      	mov	r3, r0
 8007438:	2b01      	cmp	r3, #1
 800743a:	f040 8319 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI48_VALUE / 3U;
 800743e:	4b6b      	ldr	r3, [pc, #428]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
 8007442:	e315      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      /* Nothing to do as frequency already initialized to 0U */
#endif
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744a:	d13f      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 800744c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8007450:	f7ff fc93 	bl	8006d7a <LL_RCC_GetUSBClockSource>
 8007454:	4603      	mov	r3, r0
 8007456:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800745a:	d01d      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800745c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007460:	d82b      	bhi.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8007462:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007466:	d003      	beq.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8007468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800746c:	d00a      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800746e:	e024      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
    case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007470:	f7ff fd45 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007474:	4603      	mov	r3, r0
 8007476:	2b01      	cmp	r3, #1
 8007478:	f040 82e1 	bne.w	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 800747c:	f000 fd8a 	bl	8007f94 <RCC_PLLSAI1_GetFreqDomain_Q>
 8007480:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007482:	e2dc      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
#endif
      
    case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady() == 1U)
 8007484:	f7ff fcda 	bl	8006e3c <LL_RCC_PLL_IsReady>
 8007488:	4603      	mov	r3, r0
 800748a:	2b01      	cmp	r3, #1
 800748c:	f040 82d9 	bne.w	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      {
        frequency = RCC_PLL_GetFreqDomain_Q();
 8007490:	f000 fc7e 	bl	8007d90 <RCC_PLL_GetFreqDomain_Q>
 8007494:	6478      	str	r0, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007496:	e2d4      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
      
    case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
      if (LL_RCC_MSI_IsReady() == 1U)
 8007498:	f7ff fa76 	bl	8006988 <LL_RCC_MSI_IsReady>
 800749c:	4603      	mov	r3, r0
 800749e:	2b01      	cmp	r3, #1
 80074a0:	f040 82d1 	bne.w	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80074a4:	f7ff fa90 	bl	80069c8 <LL_RCC_MSI_GetRange>
 80074a8:	4603      	mov	r3, r0
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	4a51      	ldr	r2, [pc, #324]	; (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 80074b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b6:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80074b8:	e2c5      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      
    default: /* HSI48 clock used as USB clock source */
      if (LL_RCC_HSI48_IsReady() == 1U)
 80074ba:	f7ff fa0b 	bl	80068d4 <LL_RCC_HSI48_IsReady>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	f040 82c2 	bne.w	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
      {
        frequency = HSI48_VALUE;
 80074c6:	4b4d      	ldr	r3, [pc, #308]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 80074c8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80074ca:	e2be      	b.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d140      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80074d2:	2003      	movs	r0, #3
 80074d4:	f7ff fbda 	bl	8006c8c <LL_RCC_GetUSARTClockSource>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d013      	beq.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d81b      	bhi.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d002      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d004      	beq.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80074ea:	e016      	b.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
    case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80074ec:	f7ff f83c 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 80074f0:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80074f2:	e2bd      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80074f4:	f7ff f9dc 	bl	80068b0 <LL_RCC_HSI_IsReady>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	f040 82a7 	bne.w	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      {
        frequency = HSI_VALUE;
 8007500:	4b3a      	ldr	r3, [pc, #232]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007502:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007504:	e2a3      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
      
    case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007506:	f7ff fa09 	bl	800691c <LL_RCC_LSE_IsReady>
 800750a:	4603      	mov	r3, r0
 800750c:	2b01      	cmp	r3, #1
 800750e:	f040 82a0 	bne.w	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      {
        frequency = LSE_VALUE;
 8007512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007516:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007518:	e29b      	b.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
      
    default: /* USART1 Clock is PCLK2 */
      frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800751a:	f7ff f825 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 800751e:	4604      	mov	r4, r0
 8007520:	f7ff fa8a 	bl	8006a38 <LL_RCC_GetAHBPrescaler>
 8007524:	4603      	mov	r3, r0
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	4a34      	ldr	r2, [pc, #208]	; (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800752e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007532:	fbb4 f4f3 	udiv	r4, r4, r3
 8007536:	f7ff fa97 	bl	8006a68 <LL_RCC_GetAPB2Prescaler>
 800753a:	4603      	mov	r3, r0
 800753c:	0adb      	lsrs	r3, r3, #11
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	4a30      	ldr	r2, [pc, #192]	; (8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8007544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	fa24 f303 	lsr.w	r3, r4, r3
 8007550:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB2Prescaler());
      break;
 8007552:	e28d      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d156      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 800755a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800755e:	f7ff fba5 	bl	8006cac <LL_RCC_GetLPUARTClockSource>
 8007562:	4603      	mov	r3, r0
 8007564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007568:	d016      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800756a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800756e:	d81d      	bhi.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8007570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007574:	d003      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757a:	d004      	beq.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800757c:	e016      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 800757e:	f7fe fff3 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8007582:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007584:	e274      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8007586:	f7ff f993 	bl	80068b0 <LL_RCC_HSI_IsReady>
 800758a:	4603      	mov	r3, r0
 800758c:	2b01      	cmp	r3, #1
 800758e:	f040 8262 	bne.w	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      {
        frequency = HSI_VALUE;
 8007592:	4b16      	ldr	r3, [pc, #88]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8007594:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 8007596:	e25e      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
      
    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8007598:	f7ff f9c0 	bl	800691c <LL_RCC_LSE_IsReady>
 800759c:	4603      	mov	r3, r0
 800759e:	2b01      	cmp	r3, #1
 80075a0:	f040 825b 	bne.w	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = LSE_VALUE;
 80075a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075a8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 80075aa:	e256      	b.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      
    default: /* LPUART1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 80075ac:	f7fe ffdc 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 80075b0:	4604      	mov	r4, r0
 80075b2:	f7ff fa41 	bl	8006a38 <LL_RCC_GetAHBPrescaler>
 80075b6:	4603      	mov	r3, r0
 80075b8:	091b      	lsrs	r3, r3, #4
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	4a10      	ldr	r2, [pc, #64]	; (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80075c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80075c8:	f7ff fa42 	bl	8006a50 <LL_RCC_GetAPB1Prescaler>
 80075cc:	4603      	mov	r3, r0
 80075ce:	0a1b      	lsrs	r3, r3, #8
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80075d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	fa24 f303 	lsr.w	r3, r4, r3
 80075e2:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80075e4:	e244      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 80075e6:	bf00      	nop
 80075e8:	000f4240 	.word	0x000f4240
 80075ec:	00f42400 	.word	0x00f42400
 80075f0:	001fff68 	.word	0x001fff68
 80075f4:	aaaaaaab 	.word	0xaaaaaaab
 80075f8:	08012368 	.word	0x08012368
 80075fc:	02dc6c00 	.word	0x02dc6c00
 8007600:	08012308 	.word	0x08012308
 8007604:	08012348 	.word	0x08012348
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800760e:	d12a      	bne.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8007610:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8007614:	f7ff fbbd 	bl	8006d92 <LL_RCC_GetADCClockSource>
 8007618:	4603      	mov	r3, r0
 800761a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800761e:	d014      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007624:	f200 821b 	bhi.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
 8007628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800762c:	d003      	beq.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800762e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007632:	d00e      	beq.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
      
    default: /* No clock used as ADC clock source */
      break;
 8007634:	e213      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007636:	f7ff fc62 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 800763a:	4603      	mov	r3, r0
 800763c:	2b01      	cmp	r3, #1
 800763e:	f040 8210 	bne.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        frequency = RCC_PLLSAI1_GetFreqDomain_R();
 8007642:	f000 fbfb 	bl	8007e3c <RCC_PLLSAI1_GetFreqDomain_R>
 8007646:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007648:	e20b      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      frequency = HAL_RCC_GetSysClockFreq();
 800764a:	f7fe ff8d 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 800764e:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007650:	e20e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      if (LL_RCC_PLL_IsReady() == 1U)
 8007652:	f7ff fbf3 	bl	8006e3c <LL_RCC_PLL_IsReady>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	f040 8204 	bne.w	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
        frequency = RCC_PLL_GetFreqDomain_P();
 800765e:	f000 fb41 	bl	8007ce4 <RCC_PLL_GetFreqDomain_P>
 8007662:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 8007664:	e1ff      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b04      	cmp	r3, #4
 800766a:	d135      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 800766c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8007670:	f7ff fb2c 	bl	8006ccc <LL_RCC_GetI2CClockSource>
 8007674:	4603      	mov	r3, r0
 8007676:	4ab7      	ldr	r2, [pc, #732]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800767c:	4ab6      	ldr	r2, [pc, #728]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8007682:	e00c      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
    case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 8007684:	f7fe ff70 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8007688:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 800768a:	e1f1      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 800768c:	f7ff f910 	bl	80068b0 <LL_RCC_HSI_IsReady>
 8007690:	4603      	mov	r3, r0
 8007692:	2b01      	cmp	r3, #1
 8007694:	f040 81e9 	bne.w	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      {
        frequency = HSI_VALUE;
 8007698:	4bb0      	ldr	r3, [pc, #704]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800769a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800769c:	e1e5      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
      
    default: /* I2C1 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 800769e:	f7fe ff63 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 80076a2:	4604      	mov	r4, r0
 80076a4:	f7ff f9c8 	bl	8006a38 <LL_RCC_GetAHBPrescaler>
 80076a8:	4603      	mov	r3, r0
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	4aab      	ldr	r2, [pc, #684]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80076b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80076ba:	f7ff f9c9 	bl	8006a50 <LL_RCC_GetAPB1Prescaler>
 80076be:	4603      	mov	r3, r0
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	4aa7      	ldr	r2, [pc, #668]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80076c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	fa24 f303 	lsr.w	r3, r4, r3
 80076d4:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 80076d6:	e1cb      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d135      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 80076de:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80076e2:	f7ff faf3 	bl	8006ccc <LL_RCC_GetI2CClockSource>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4a9f      	ldr	r2, [pc, #636]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80076ee:	4a9f      	ldr	r2, [pc, #636]	; (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80076f4:	e00c      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
    {
    case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
      frequency = HAL_RCC_GetSysClockFreq();
 80076f6:	f7fe ff37 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 80076fa:	6478      	str	r0, [r7, #68]	; 0x44
      break;
 80076fc:	e1b8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      
    case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 80076fe:	f7ff f8d7 	bl	80068b0 <LL_RCC_HSI_IsReady>
 8007702:	4603      	mov	r3, r0
 8007704:	2b01      	cmp	r3, #1
 8007706:	f040 81b2 	bne.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      {
        frequency = HSI_VALUE;
 800770a:	4b94      	ldr	r3, [pc, #592]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800770c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
      break;
 800770e:	e1ae      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
      
    default: /* I2C3 Clock is PCLK1 */
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), \
 8007710:	f7fe ff2a 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8007714:	4604      	mov	r4, r0
 8007716:	f7ff f98f 	bl	8006a38 <LL_RCC_GetAHBPrescaler>
 800771a:	4603      	mov	r3, r0
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	4a8f      	ldr	r2, [pc, #572]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007728:	fbb4 f4f3 	udiv	r4, r4, r3
 800772c:	f7ff f990 	bl	8006a50 <LL_RCC_GetAPB1Prescaler>
 8007730:	4603      	mov	r3, r0
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	4a8a      	ldr	r2, [pc, #552]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	fa24 f303 	lsr.w	r3, r4, r3
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
        LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
      break;
 8007748:	e192      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
#endif
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b10      	cmp	r3, #16
 800774e:	d151      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8007750:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8007754:	f7ff face 	bl	8006cf4 <LL_RCC_GetLPTIMClockSource>
 8007758:	62b8      	str	r0, [r7, #40]	; 0x28
    
    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	4a84      	ldr	r2, [pc, #528]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d110      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007762:	f7ff f8ed 	bl	8006940 <LL_RCC_LSI1_IsReady>
 8007766:	6278      	str	r0, [r7, #36]	; 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007768:	f7ff f8fc 	bl	8006964 <LL_RCC_LSI2_IsReady>
 800776c:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b01      	cmp	r3, #1
 8007772:	d003      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	2b01      	cmp	r3, #1
 8007778:	f040 817a 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 800777c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
 8007782:	e175      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	4a7b      	ldr	r2, [pc, #492]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d108      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 800778c:	f7ff f890 	bl	80068b0 <LL_RCC_HSI_IsReady>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	f040 816c 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8007798:	4b70      	ldr	r3, [pc, #448]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800779a:	647b      	str	r3, [r7, #68]	; 0x44
 800779c:	e168      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80077a4:	d109      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x532>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80077a6:	f7ff f8b9 	bl	800691c <LL_RCC_LSE_IsReady>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 815f 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80077b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b6:	647b      	str	r3, [r7, #68]	; 0x44
 80077b8:	e15a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 80077ba:	f7fe fed5 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff f93a 	bl	8006a38 <LL_RCC_GetAHBPrescaler>
 80077c4:	4603      	mov	r3, r0
 80077c6:	091b      	lsrs	r3, r3, #4
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	4a64      	ldr	r2, [pc, #400]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80077ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80077d6:	f7ff f93b 	bl	8006a50 <LL_RCC_GetAPB1Prescaler>
 80077da:	4603      	mov	r3, r0
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	4a60      	ldr	r2, [pc, #384]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 80077e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	fa24 f303 	lsr.w	r3, r4, r3
 80077f0:	647b      	str	r3, [r7, #68]	; 0x44
 80077f2:	e13d      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d151      	bne.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 80077fa:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80077fe:	f7ff fa79 	bl	8006cf4 <LL_RCC_GetLPTIMClockSource>
 8007802:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	4a5c      	ldr	r2, [pc, #368]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d110      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800780c:	f7ff f898 	bl	8006940 <LL_RCC_LSI1_IsReady>
 8007810:	6338      	str	r0, [r7, #48]	; 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007812:	f7ff f8a7 	bl	8006964 <LL_RCC_LSI2_IsReady>
 8007816:	62f8      	str	r0, [r7, #44]	; 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2b01      	cmp	r3, #1
 800781c:	d003      	beq.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b01      	cmp	r3, #1
 8007822:	f040 8125 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSI_VALUE;
 8007826:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800782a:	647b      	str	r3, [r7, #68]	; 0x44
 800782c:	e120      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	4a52      	ldr	r2, [pc, #328]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d108      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007836:	f7ff f83b 	bl	80068b0 <LL_RCC_HSI_IsReady>
 800783a:	4603      	mov	r3, r0
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 8117 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE;
 8007842:	4b46      	ldr	r3, [pc, #280]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8007844:	647b      	str	r3, [r7, #68]	; 0x44
 8007846:	e113      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8007848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800784e:	d109      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007850:	f7ff f864 	bl	800691c <LL_RCC_LSE_IsReady>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	f040 810a 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 800785c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007860:	647b      	str	r3, [r7, #68]	; 0x44
 8007862:	e105      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()), LL_RCC_GetAPB1Prescaler());
 8007864:	f7fe fe80 	bl	8006568 <HAL_RCC_GetSysClockFreq>
 8007868:	4604      	mov	r4, r0
 800786a:	f7ff f8e5 	bl	8006a38 <LL_RCC_GetAHBPrescaler>
 800786e:	4603      	mov	r3, r0
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	4a3a      	ldr	r2, [pc, #232]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007880:	f7ff f8e6 	bl	8006a50 <LL_RCC_GetAPB1Prescaler>
 8007884:	4603      	mov	r3, r0
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	4a35      	ldr	r2, [pc, #212]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>)
 800788e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007892:	f003 031f 	and.w	r3, r3, #31
 8007896:	fa24 f303 	lsr.w	r3, r4, r3
 800789a:	647b      	str	r3, [r7, #68]	; 0x44
 800789c:	e0e8      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a4:	d119      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x652>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 80078a6:	f7ff f8ba 	bl	8006a1e <LL_RCC_GetRFWKPClockSource>
 80078aa:	63b8      	str	r0, [r7, #56]	; 0x38
    
    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078b2:	d109      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80078b4:	f7ff f832 	bl	800691c <LL_RCC_LSE_IsReady>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	f040 80d8 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = LSE_VALUE;
 80078c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c4:	647b      	str	r3, [r7, #68]	; 0x44
 80078c6:	e0d3      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078ce:	f040 80cf 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HSE_VALUE / 1024U;
 80078d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80078d6:	647b      	str	r3, [r7, #68]	; 0x44
 80078d8:	e0ca      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e0:	f040 80c6 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 80078e4:	f7ff f8e0 	bl	8006aa8 <LL_RCC_GetSMPSClockSource>
 80078e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    
    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d115      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 80078f0:	f7fe ffde 	bl	80068b0 <LL_RCC_HSI_IsReady>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	f040 80ba 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 80078fc:	4920      	ldr	r1, [pc, #128]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80078fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007900:	4613      	mov	r3, r2
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	440b      	add	r3, r1
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a13      	ldr	r2, [pc, #76]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	647b      	str	r3, [r7, #68]	; 0x44
 800791a:	e0a9      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 800791c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007922:	d131      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8007924:	f7fe ffb2 	bl	800688c <LL_RCC_HSE_IsReady>
 8007928:	4603      	mov	r3, r0
 800792a:	2b01      	cmp	r3, #1
 800792c:	f040 80a0 	bne.w	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8007930:	4913      	ldr	r1, [pc, #76]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8007932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007934:	4613      	mov	r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	440b      	add	r3, r1
 800793e:	3314      	adds	r3, #20
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007944:	fbb2 f3f3 	udiv	r3, r2, r3
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 800794a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	647b      	str	r3, [r7, #68]	; 0x44
 8007950:	e08e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8007952:	bf00      	nop
 8007954:	00030100 	.word	0x00030100
 8007958:	00030200 	.word	0x00030200
 800795c:	00f42400 	.word	0x00f42400
 8007960:	08012308 	.word	0x08012308
 8007964:	08012348 	.word	0x08012348
 8007968:	00301000 	.word	0x00301000
 800796c:	00302000 	.word	0x00302000
 8007970:	000c0004 	.word	0x000c0004
 8007974:	000c0008 	.word	0x000c0008
 8007978:	00300010 	.word	0x00300010
 800797c:	00300020 	.word	0x00300020
 8007980:	080123a8 	.word	0x080123a8
 8007984:	01e84800 	.word	0x01e84800
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800798e:	d16f      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      switch (LL_RCC_MSI_GetRange())
 8007990:	f7ff f81a 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007994:	4603      	mov	r3, r0
 8007996:	2bb0      	cmp	r3, #176	; 0xb0
 8007998:	d037      	beq.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800799a:	2bb0      	cmp	r3, #176	; 0xb0
 800799c:	d844      	bhi.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800799e:	2ba0      	cmp	r3, #160	; 0xa0
 80079a0:	d024      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 80079a2:	2ba0      	cmp	r3, #160	; 0xa0
 80079a4:	d840      	bhi.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d002      	beq.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80079aa:	2b90      	cmp	r3, #144	; 0x90
 80079ac:	d00f      	beq.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        break;
      case LL_RCC_MSIRANGE_11:
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
        break;
      default:
        break;
 80079ae:	e03b      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 80079b0:	4b32      	ldr	r3, [pc, #200]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80079b2:	6a19      	ldr	r1, [r3, #32]
 80079b4:	4832      	ldr	r0, [pc, #200]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80079b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079b8:	4613      	mov	r3, r2
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	4413      	add	r3, r2
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	4403      	add	r3, r0
 80079c2:	3310      	adds	r3, #16
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80079cc:	e02d      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 80079ce:	4b2b      	ldr	r3, [pc, #172]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80079d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80079d2:	482b      	ldr	r0, [pc, #172]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80079d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079d6:	4613      	mov	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	4413      	add	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4403      	add	r3, r0
 80079e0:	330c      	adds	r3, #12
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80079e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80079ea:	e01e      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 80079ec:	4b23      	ldr	r3, [pc, #140]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 80079ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80079f0:	4823      	ldr	r0, [pc, #140]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80079f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079f4:	4613      	mov	r3, r2
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	4403      	add	r3, r0
 80079fe:	3308      	adds	r3, #8
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a06:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a0e:	481c      	ldr	r0, [pc, #112]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	4403      	add	r3, r0
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a24:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        break;
 8007a28:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2c:	085b      	lsrs	r3, r3, #1
 8007a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a30:	e01e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a32:	bf00      	nop
 8007a34:	e01c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a36:	bf00      	nop
 8007a38:	e01a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a3a:	bf00      	nop
 8007a3c:	e018      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a3e:	bf00      	nop
 8007a40:	e016      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a42:	bf00      	nop
 8007a44:	e014      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a46:	bf00      	nop
 8007a48:	e012      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a4a:	bf00      	nop
 8007a4c:	e010      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e00e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a52:	bf00      	nop
 8007a54:	e00c      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a56:	bf00      	nop
 8007a58:	e00a      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a5e:	bf00      	nop
 8007a60:	e006      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a62:	bf00      	nop
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a66:	bf00      	nop
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
      break;
 8007a6e:	bf00      	nop
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif
  return (frequency);
 8007a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	374c      	adds	r7, #76	; 0x4c
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd90      	pop	{r4, r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	08012368 	.word	0x08012368
 8007a80:	080123a8 	.word	0x080123a8

08007a84 <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8007a8a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8007a8e:	f7ff f954 	bl	8006d3a <LL_RCC_GetRNGClockSource>
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d108      	bne.n	8007aac <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8007a9a:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8007a9e:	f7ff f95c 	bl	8006d5a <LL_RCC_GetCLK48ClockSource>
 8007aa2:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8007aac:	687b      	ldr	r3, [r7, #4]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007aba:	f7fe ff76 	bl	80069aa <LL_RCC_MSI_EnablePLLMode>
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007ace:	f7ff fa07 	bl	8006ee0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ad2:	f7fa f805 	bl	8001ae0 <HAL_GetTick>
 8007ad6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ad8:	e009      	b.n	8007aee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ada:	f7fa f801 	bl	8001ae0 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d902      	bls.n	8007aee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	73fb      	strb	r3, [r7, #15]
      break;
 8007aec:	e004      	b.n	8007af8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007aee:	f7ff fa06 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1f0      	bne.n	8007ada <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d137      	bne.n	8007b6e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b12:	4313      	orrs	r3, r2
 8007b14:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b2c:	f7ff f9c9 	bl	8006ec2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b30:	f7f9 ffd6 	bl	8001ae0 <HAL_GetTick>
 8007b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b36:	e009      	b.n	8007b4c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b38:	f7f9 ffd2 	bl	8001ae0 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d902      	bls.n	8007b4c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	73fb      	strb	r3, [r7, #15]
        break;
 8007b4a:	e004      	b.n	8007b56 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b4c:	f7ff f9d7 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d1f0      	bne.n	8007b38 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d108      	bne.n	8007b6e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007b84:	f7ff f9ac 	bl	8006ee0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b88:	f7f9 ffaa 	bl	8001ae0 <HAL_GetTick>
 8007b8c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007b8e:	e009      	b.n	8007ba4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b90:	f7f9 ffa6 	bl	8001ae0 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d902      	bls.n	8007ba4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	e004      	b.n	8007bae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ba4:	f7ff f9ab 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d137      	bne.n	8007c24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bde:	4313      	orrs	r3, r2
 8007be0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007be2:	f7ff f96e 	bl	8006ec2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be6:	f7f9 ff7b 	bl	8001ae0 <HAL_GetTick>
 8007bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007bec:	e009      	b.n	8007c02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bee:	f7f9 ff77 	bl	8001ae0 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d902      	bls.n	8007c02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	73fb      	strb	r3, [r7, #15]
        break;
 8007c00:	e004      	b.n	8007c0c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007c02:	f7ff f97c 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d1f0      	bne.n	8007bee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d108      	bne.n	8007c24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c20:	4313      	orrs	r3, r2
 8007c22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007c3a:	f7ff f951 	bl	8006ee0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c3e:	f7f9 ff4f 	bl	8001ae0 <HAL_GetTick>
 8007c42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c44:	e009      	b.n	8007c5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c46:	f7f9 ff4b 	bl	8001ae0 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d902      	bls.n	8007c5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
      break;
 8007c58:	e004      	b.n	8007c64 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007c5a:	f7ff f950 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f0      	bne.n	8007c46 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d137      	bne.n	8007cda <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c94:	4313      	orrs	r3, r2
 8007c96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007c98:	f7ff f913 	bl	8006ec2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9c:	f7f9 ff20 	bl	8001ae0 <HAL_GetTick>
 8007ca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ca2:	e009      	b.n	8007cb8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ca4:	f7f9 ff1c 	bl	8001ae0 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d902      	bls.n	8007cb8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8007cb6:	e004      	b.n	8007cc2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007cb8:	f7ff f921 	bl	8006efe <LL_RCC_PLLSAI1_IsReady>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d1f0      	bne.n	8007ca4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d108      	bne.n	8007cda <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007cea:	f7ff f94b 	bl	8006f84 <LL_RCC_PLL_GetMainSource>
 8007cee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d017      	beq.n	8007d26 <RCC_PLL_GetFreqDomain_P+0x42>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d81f      	bhi.n	8007d3c <RCC_PLL_GetFreqDomain_P+0x58>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d003      	beq.n	8007d0a <RCC_PLL_GetFreqDomain_P+0x26>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d00b      	beq.n	8007d20 <RCC_PLL_GetFreqDomain_P+0x3c>
 8007d08:	e018      	b.n	8007d3c <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d0a:	f7fe fe5d 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	091b      	lsrs	r3, r3, #4
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	4a1b      	ldr	r2, [pc, #108]	; (8007d84 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1c:	607b      	str	r3, [r7, #4]
      break;
 8007d1e:	e018      	b.n	8007d52 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007d20:	4b19      	ldr	r3, [pc, #100]	; (8007d88 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8007d22:	607b      	str	r3, [r7, #4]
      break;
 8007d24:	e015      	b.n	8007d52 <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d26:	f7fe fd9f 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d102      	bne.n	8007d36 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007d30:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <RCC_PLL_GetFreqDomain_P+0xa4>)
 8007d32:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007d34:	e00d      	b.n	8007d52 <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007d36:	4b15      	ldr	r3, [pc, #84]	; (8007d8c <RCC_PLL_GetFreqDomain_P+0xa8>)
 8007d38:	607b      	str	r3, [r7, #4]
      break;
 8007d3a:	e00a      	b.n	8007d52 <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007d3c:	f7fe fe44 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007d40:	4603      	mov	r3, r0
 8007d42:	091b      	lsrs	r3, r3, #4
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	4a0e      	ldr	r2, [pc, #56]	; (8007d84 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8007d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4e:	607b      	str	r3, [r7, #4]
      break;
 8007d50:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007d52:	f7ff f885 	bl	8006e60 <LL_RCC_PLL_GetN>
 8007d56:	4602      	mov	r2, r0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	fb03 f402 	mul.w	r4, r3, r2
 8007d5e:	f7ff f8a4 	bl	8006eaa <LL_RCC_PLL_GetDivider>
 8007d62:	4603      	mov	r3, r0
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	3301      	adds	r3, #1
 8007d68:	fbb4 f4f3 	udiv	r4, r4, r3
 8007d6c:	f7ff f885 	bl	8006e7a <LL_RCC_PLL_GetP>
 8007d70:	4603      	mov	r3, r0
 8007d72:	0c5b      	lsrs	r3, r3, #17
 8007d74:	3301      	adds	r3, #1
 8007d76:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd90      	pop	{r4, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	08012368 	.word	0x08012368
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	01e84800 	.word	0x01e84800

08007d90 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007d96:	f7ff f8f5 	bl	8006f84 <LL_RCC_PLL_GetMainSource>
 8007d9a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d017      	beq.n	8007dd2 <RCC_PLL_GetFreqDomain_Q+0x42>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d81f      	bhi.n	8007de8 <RCC_PLL_GetFreqDomain_Q+0x58>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d003      	beq.n	8007db6 <RCC_PLL_GetFreqDomain_Q+0x26>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d00b      	beq.n	8007dcc <RCC_PLL_GetFreqDomain_Q+0x3c>
 8007db4:	e018      	b.n	8007de8 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007db6:	f7fe fe07 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	091b      	lsrs	r3, r3, #4
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dc8:	607b      	str	r3, [r7, #4]
      break;
 8007dca:	e018      	b.n	8007dfe <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8007dce:	607b      	str	r3, [r7, #4]
      break;
 8007dd0:	e015      	b.n	8007dfe <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007dd2:	f7fe fd49 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d102      	bne.n	8007de2 <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007ddc:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 8007dde:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8007de0:	e00d      	b.n	8007dfe <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8007de2:	4b15      	ldr	r3, [pc, #84]	; (8007e38 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 8007de4:	607b      	str	r3, [r7, #4]
      break;
 8007de6:	e00a      	b.n	8007dfe <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007de8:	f7fe fdee 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007dec:	4603      	mov	r3, r0
 8007dee:	091b      	lsrs	r3, r3, #4
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	4a0e      	ldr	r2, [pc, #56]	; (8007e30 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8007df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dfa:	607b      	str	r3, [r7, #4]
      break;
 8007dfc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007dfe:	f7ff f82f 	bl	8006e60 <LL_RCC_PLL_GetN>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	fb03 f402 	mul.w	r4, r3, r2
 8007e0a:	f7ff f84e 	bl	8006eaa <LL_RCC_PLL_GetDivider>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	091b      	lsrs	r3, r3, #4
 8007e12:	3301      	adds	r3, #1
 8007e14:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e18:	f7ff f83b 	bl	8006e92 <LL_RCC_PLL_GetQ>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	0e5b      	lsrs	r3, r3, #25
 8007e20:	3301      	adds	r3, #1
 8007e22:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd90      	pop	{r4, r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	08012368 	.word	0x08012368
 8007e34:	00f42400 	.word	0x00f42400
 8007e38:	01e84800 	.word	0x01e84800

08007e3c <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8007e3c:	b590      	push	{r4, r7, lr}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007e42:	f7ff f89f 	bl	8006f84 <LL_RCC_PLL_GetMainSource>
 8007e46:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d017      	beq.n	8007e7e <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d81f      	bhi.n	8007e94 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d003      	beq.n	8007e62 <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d00b      	beq.n	8007e78 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8007e60:	e018      	b.n	8007e94 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e62:	f7fe fdb1 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007e66:	4603      	mov	r3, r0
 8007e68:	091b      	lsrs	r3, r3, #4
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	4a1b      	ldr	r2, [pc, #108]	; (8007edc <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8007e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e74:	607b      	str	r3, [r7, #4]
      break;
 8007e76:	e018      	b.n	8007eaa <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8007e7a:	607b      	str	r3, [r7, #4]
      break;
 8007e7c:	e015      	b.n	8007eaa <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e7e:	f7fe fcf3 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d102      	bne.n	8007e8e <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007e88:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8007e8a:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007e8c:	e00d      	b.n	8007eaa <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 8007e8e:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 8007e90:	607b      	str	r3, [r7, #4]
      break;
 8007e92:	e00a      	b.n	8007eaa <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e94:	f7fe fd98 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	4a0e      	ldr	r2, [pc, #56]	; (8007edc <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8007ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea6:	607b      	str	r3, [r7, #4]
      break;
 8007ea8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007eaa:	f7ff f83a 	bl	8006f22 <LL_RCC_PLLSAI1_GetN>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	fb03 f402 	mul.w	r4, r3, r2
 8007eb6:	f7fe fff8 	bl	8006eaa <LL_RCC_PLL_GetDivider>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	091b      	lsrs	r3, r3, #4
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	fbb4 f4f3 	udiv	r4, r4, r3
 8007ec4:	f7ff f852 	bl	8006f6c <LL_RCC_PLLSAI1_GetR>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	0f5b      	lsrs	r3, r3, #29
 8007ecc:	3301      	adds	r3, #1
 8007ece:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd90      	pop	{r4, r7, pc}
 8007eda:	bf00      	nop
 8007edc:	08012368 	.word	0x08012368
 8007ee0:	00f42400 	.word	0x00f42400
 8007ee4:	01e84800 	.word	0x01e84800

08007ee8 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007eee:	f7ff f849 	bl	8006f84 <LL_RCC_PLL_GetMainSource>
 8007ef2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d017      	beq.n	8007f2a <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d81f      	bhi.n	8007f40 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d003      	beq.n	8007f0e <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d00b      	beq.n	8007f24 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8007f0c:	e018      	b.n	8007f40 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007f0e:	f7fe fd5b 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007f12:	4603      	mov	r3, r0
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f20:	607b      	str	r3, [r7, #4]
      break;
 8007f22:	e018      	b.n	8007f56 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007f24:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007f26:	607b      	str	r3, [r7, #4]
      break;
 8007f28:	e015      	b.n	8007f56 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007f2a:	f7fe fc9d 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d102      	bne.n	8007f3a <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007f34:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8007f36:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007f38:	e00d      	b.n	8007f56 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8007f3a:	4b15      	ldr	r3, [pc, #84]	; (8007f90 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8007f3c:	607b      	str	r3, [r7, #4]
      break;
 8007f3e:	e00a      	b.n	8007f56 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007f40:	f7fe fd42 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007f44:	4603      	mov	r3, r0
 8007f46:	091b      	lsrs	r3, r3, #4
 8007f48:	f003 030f 	and.w	r3, r3, #15
 8007f4c:	4a0e      	ldr	r2, [pc, #56]	; (8007f88 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8007f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f52:	607b      	str	r3, [r7, #4]
      break;
 8007f54:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007f56:	f7fe ffe4 	bl	8006f22 <LL_RCC_PLLSAI1_GetN>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	fb03 f402 	mul.w	r4, r3, r2
 8007f62:	f7fe ffa2 	bl	8006eaa <LL_RCC_PLL_GetDivider>
 8007f66:	4603      	mov	r3, r0
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007f70:	f7fe ffe4 	bl	8006f3c <LL_RCC_PLLSAI1_GetP>
 8007f74:	4603      	mov	r3, r0
 8007f76:	0c5b      	lsrs	r3, r3, #17
 8007f78:	3301      	adds	r3, #1
 8007f7a:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd90      	pop	{r4, r7, pc}
 8007f86:	bf00      	nop
 8007f88:	08012368 	.word	0x08012368
 8007f8c:	00f42400 	.word	0x00f42400
 8007f90:	01e84800 	.word	0x01e84800

08007f94 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8007f94:	b590      	push	{r4, r7, lr}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007f9a:	f7fe fff3 	bl	8006f84 <LL_RCC_PLL_GetMainSource>
 8007f9e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d017      	beq.n	8007fd6 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d81f      	bhi.n	8007fec <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d003      	beq.n	8007fba <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d00b      	beq.n	8007fd0 <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8007fb8:	e018      	b.n	8007fec <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007fba:	f7fe fd05 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	091b      	lsrs	r3, r3, #4
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8007fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fcc:	607b      	str	r3, [r7, #4]
      break;
 8007fce:	e018      	b.n	8008002 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8007fd0:	4b19      	ldr	r3, [pc, #100]	; (8008038 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8007fd2:	607b      	str	r3, [r7, #4]
      break;
 8007fd4:	e015      	b.n	8008002 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007fd6:	f7fe fc47 	bl	8006868 <LL_RCC_HSE_IsEnabledDiv2>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d102      	bne.n	8007fe6 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8007fe0:	4b15      	ldr	r3, [pc, #84]	; (8008038 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 8007fe2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8007fe4:	e00d      	b.n	8008002 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8007fe6:	4b15      	ldr	r3, [pc, #84]	; (800803c <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 8007fe8:	607b      	str	r3, [r7, #4]
      break;
 8007fea:	e00a      	b.n	8008002 <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007fec:	f7fe fcec 	bl	80069c8 <LL_RCC_MSI_GetRange>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	091b      	lsrs	r3, r3, #4
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	4a0e      	ldr	r2, [pc, #56]	; (8008034 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8007ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ffe:	607b      	str	r3, [r7, #4]
      break;
 8008000:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008002:	f7fe ff8e 	bl	8006f22 <LL_RCC_PLLSAI1_GetN>
 8008006:	4602      	mov	r2, r0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	fb03 f402 	mul.w	r4, r3, r2
 800800e:	f7fe ff4c 	bl	8006eaa <LL_RCC_PLL_GetDivider>
 8008012:	4603      	mov	r3, r0
 8008014:	091b      	lsrs	r3, r3, #4
 8008016:	3301      	adds	r3, #1
 8008018:	fbb4 f4f3 	udiv	r4, r4, r3
 800801c:	f7fe ff9a 	bl	8006f54 <LL_RCC_PLLSAI1_GetQ>
 8008020:	4603      	mov	r3, r0
 8008022:	0e5b      	lsrs	r3, r3, #25
 8008024:	3301      	adds	r3, #1
 8008026:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	bd90      	pop	{r4, r7, pc}
 8008032:	bf00      	nop
 8008034:	08012368 	.word	0x08012368
 8008038:	00f42400 	.word	0x00f42400
 800803c:	01e84800 	.word	0x01e84800

08008040 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e090      	b.n	8008174 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7f8 ff48 	bl	8000efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	22ca      	movs	r2, #202	; 0xca
 800807a:	625a      	str	r2, [r3, #36]	; 0x24
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2253      	movs	r2, #83	; 0x53
 8008082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f89f 	bl	80081c8 <RTC_EnterInitMode>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2204      	movs	r2, #4
 800809c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e067      	b.n	8008174 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	6812      	ldr	r2, [r2, #0]
 80080ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6899      	ldr	r1, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	431a      	orrs	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	68d2      	ldr	r2, [r2, #12]
 80080de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6919      	ldr	r1, [r3, #16]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	041a      	lsls	r2, r3, #16
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008102:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0203 	bic.w	r2, r2, #3
 8008112:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d113      	bne.n	8008162 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f81e 	bl	800817c <HAL_RTC_WaitForSynchro>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00d      	beq.n	8008162 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	22ff      	movs	r2, #255	; 0xff
 800814c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e008      	b.n	8008174 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	22ff      	movs	r2, #255	; 0xff
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8008172:	2300      	movs	r3, #0
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008192:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008194:	f7f9 fca4 	bl	8001ae0 <HAL_GetTick>
 8008198:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800819a:	e009      	b.n	80081b0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800819c:	f7f9 fca0 	bl	8001ae0 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081aa:	d901      	bls.n	80081b0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e007      	b.n	80081c0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ee      	beq.n	800819c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d119      	bne.n	8008212 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081e8:	f7f9 fc7a 	bl	8001ae0 <HAL_GetTick>
 80081ec:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081ee:	e009      	b.n	8008204 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80081f0:	f7f9 fc76 	bl	8001ae0 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081fe:	d901      	bls.n	8008204 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e007      	b.n	8008214 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0ee      	beq.n	80081f0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d904      	bls.n	800823a <HAL_SAI_InitProtocol+0x1e>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3b03      	subs	r3, #3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d812      	bhi.n	800825e <HAL_SAI_InitProtocol+0x42>
 8008238:	e008      	b.n	800824c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f9af 	bl	80085a4 <SAI_InitI2S>
 8008246:	4603      	mov	r3, r0
 8008248:	75fb      	strb	r3, [r7, #23]
      break;
 800824a:	e00b      	b.n	8008264 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fa58 	bl	8008708 <SAI_InitPCM>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]
      break;
 800825c:	e002      	b.n	8008264 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
      break;
 8008262:	bf00      	nop
  }

  if (status == HAL_OK)
 8008264:	7dfb      	ldrb	r3, [r7, #23]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f808 	bl	8008280 <HAL_SAI_Init>
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008274:	7dfb      	ldrb	r3, [r7, #23]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e17c      	b.n	800858c <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008298:	2b01      	cmp	r3, #1
 800829a:	d10e      	bne.n	80082ba <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a5c      	ldr	r2, [pc, #368]	; (8008414 <HAL_SAI_Init+0x194>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d107      	bne.n	80082b6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d103      	bne.n	80082b6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e168      	b.n	800858c <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7f8 fe94 	bl	8000ffc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fa99 	bl	800880c <SAI_Disable>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e153      	b.n	800858c <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_SAI_Init+0x7a>
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d003      	beq.n	8008300 <HAL_SAI_Init+0x80>
 80082f8:	e006      	b.n	8008308 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
      break;
 80082fe:	e006      	b.n	800830e <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008304:	61bb      	str	r3, [r7, #24]
      break;
 8008306:	e002      	b.n	800830e <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]
      break;
 800830c:	bf00      	nop
  }

  SAI1->GCR = 0;
 800830e:	4b42      	ldr	r3, [pc, #264]	; (8008418 <HAL_SAI_Init+0x198>)
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d062      	beq.n	80083e2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800831c:	2040      	movs	r0, #64	; 0x40
 800831e:	f7fe ffb3 	bl	8007288 <HAL_RCCEx_GetPeriphCLKFreq>
 8008322:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800832c:	d120      	bne.n	8008370 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	2b04      	cmp	r3, #4
 8008334:	d102      	bne.n	800833c <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8008336:	2340      	movs	r3, #64	; 0x40
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	e00a      	b.n	8008352 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008340:	2b08      	cmp	r3, #8
 8008342:	d103      	bne.n	800834c <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8008344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008348:	613b      	str	r3, [r7, #16]
 800834a:	e002      	b.n	8008352 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008350:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	4619      	mov	r1, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	fb02 f303 	mul.w	r3, r2, r3
 8008368:	fbb1 f3f3 	udiv	r3, r1, r3
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	e017      	b.n	80083a0 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008378:	d101      	bne.n	800837e <HAL_SAI_Init+0xfe>
 800837a:	2302      	movs	r3, #2
 800837c:	e000      	b.n	8008380 <HAL_SAI_Init+0x100>
 800837e:	2301      	movs	r3, #1
 8008380:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	4619      	mov	r1, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	fb02 f303 	mul.w	r3, r2, r3
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	fbb1 f3f3 	udiv	r3, r1, r3
 800839e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4a1e      	ldr	r2, [pc, #120]	; (800841c <HAL_SAI_Init+0x19c>)
 80083a4:	fba2 2303 	umull	r2, r3, r2, r3
 80083a8:	08da      	lsrs	r2, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80083ae:	6979      	ldr	r1, [r7, #20]
 80083b0:	4b1a      	ldr	r3, [pc, #104]	; (800841c <HAL_SAI_Init+0x19c>)
 80083b2:	fba3 2301 	umull	r2, r3, r3, r1
 80083b6:	08da      	lsrs	r2, r3, #3
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	1aca      	subs	r2, r1, r3
 80083c2:	2a08      	cmp	r2, #8
 80083c4:	d904      	bls.n	80083d0 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d104      	bne.n	80083e2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	085a      	lsrs	r2, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_SAI_Init+0x172>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d109      	bne.n	8008406 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_SAI_Init+0x17e>
 80083fa:	2300      	movs	r3, #0
 80083fc:	e001      	b.n	8008402 <HAL_SAI_Init+0x182>
 80083fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	e00e      	b.n	8008424 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840a:	2b01      	cmp	r3, #1
 800840c:	d108      	bne.n	8008420 <HAL_SAI_Init+0x1a0>
 800840e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008412:	e006      	b.n	8008422 <HAL_SAI_Init+0x1a2>
 8008414:	40015404 	.word	0x40015404
 8008418:	40015400 	.word	0x40015400
 800841c:	cccccccd 	.word	0xcccccccd
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b59      	ldr	r3, [pc, #356]	; (8008594 <HAL_SAI_Init+0x314>)
 8008430:	400b      	ands	r3, r1
 8008432:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008448:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844e:	431a      	orrs	r2, r3
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800845c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008468:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	051b      	lsls	r3, r3, #20
 8008470:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008476:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008494:	f023 030f 	bic.w	r3, r3, #15
 8008498:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6859      	ldr	r1, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	69da      	ldr	r2, [r3, #28]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a8:	431a      	orrs	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	430a      	orrs	r2, r1
 80084b6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6899      	ldr	r1, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b35      	ldr	r3, [pc, #212]	; (8008598 <HAL_SAI_Init+0x318>)
 80084c4:	400b      	ands	r3, r1
 80084c6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6899      	ldr	r1, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80084d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80084de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 80084e4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ea:	3b01      	subs	r3, #1
 80084ec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80084ee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68d9      	ldr	r1, [r3, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008506:	400b      	ands	r3, r1
 8008508:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68d9      	ldr	r1, [r3, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008518:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800851e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008520:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008526:	3b01      	subs	r3, #1
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a18      	ldr	r2, [pc, #96]	; (800859c <HAL_SAI_Init+0x31c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d119      	bne.n	8008572 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800853e:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <HAL_SAI_Init+0x320>)
 8008540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008542:	4a17      	ldr	r2, [pc, #92]	; (80085a0 <HAL_SAI_Init+0x320>)
 8008544:	f023 0301 	bic.w	r3, r3, #1
 8008548:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10e      	bne.n	8008572 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855c:	3b01      	subs	r3, #1
 800855e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008560:	490f      	ldr	r1, [pc, #60]	; (80085a0 <HAL_SAI_Init+0x320>)
 8008562:	4313      	orrs	r3, r2
 8008564:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008566:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <HAL_SAI_Init+0x320>)
 8008568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856a:	4a0d      	ldr	r2, [pc, #52]	; (80085a0 <HAL_SAI_Init+0x320>)
 800856c:	f043 0301 	orr.w	r3, r3, #1
 8008570:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	f005c010 	.word	0xf005c010
 8008598:	fff88000 	.word	0xfff88000
 800859c:	40015404 	.word	0x40015404
 80085a0:	40015400 	.word	0x40015400

080085a4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <SAI_InitI2S+0x2e>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d103      	bne.n	80085da <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	651a      	str	r2, [r3, #80]	; 0x50
 80085d8:	e002      	b.n	80085e0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2201      	movs	r2, #1
 80085de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80085e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ee:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e077      	b.n	80086fa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d107      	bne.n	8008620 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800861c:	665a      	str	r2, [r3, #100]	; 0x64
 800861e:	e006      	b.n	800862e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008626:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	665a      	str	r2, [r3, #100]	; 0x64
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d84f      	bhi.n	80086d4 <SAI_InitI2S+0x130>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <SAI_InitI2S+0x98>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	0800866f 	.word	0x0800866f
 8008644:	08008691 	.word	0x08008691
 8008648:	080086b3 	.word	0x080086b3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2280      	movs	r2, #128	; 0x80
 8008650:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	011a      	lsls	r2, r3, #4
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2240      	movs	r2, #64	; 0x40
 800866a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800866c:	e035      	b.n	80086da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2280      	movs	r2, #128	; 0x80
 8008672:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	019a      	lsls	r2, r3, #6
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	085b      	lsrs	r3, r3, #1
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2280      	movs	r2, #128	; 0x80
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800868e:	e024      	b.n	80086da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	22c0      	movs	r2, #192	; 0xc0
 8008694:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	019a      	lsls	r2, r3, #6
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2280      	movs	r2, #128	; 0x80
 80086ae:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80086b0:	e013      	b.n	80086da <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	22e0      	movs	r2, #224	; 0xe0
 80086b6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	019a      	lsls	r2, r3, #6
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2280      	movs	r2, #128	; 0x80
 80086d0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80086d2:	e002      	b.n	80086da <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]
      break;
 80086d8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d10b      	bne.n	80086f8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d102      	bne.n	80086ec <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2210      	movs	r2, #16
 80086ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d102      	bne.n	80086f8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2208      	movs	r2, #8
 80086f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop

08008708 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <SAI_InitPCM+0x2e>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d103      	bne.n	800873e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	651a      	str	r2, [r3, #80]	; 0x50
 800873c:	e002      	b.n	8008744 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008750:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008758:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800876c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b04      	cmp	r3, #4
 8008772:	d103      	bne.n	800877c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	659a      	str	r2, [r3, #88]	; 0x58
 800877a:	e002      	b.n	8008782 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	220d      	movs	r2, #13
 8008780:	659a      	str	r2, [r3, #88]	; 0x58
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b03      	cmp	r3, #3
 8008786:	d837      	bhi.n	80087f8 <SAI_InitPCM+0xf0>
 8008788:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <SAI_InitPCM+0x88>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087b7 	.word	0x080087b7
 8008798:	080087cd 	.word	0x080087cd
 800879c:	080087e3 	.word	0x080087e3
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2280      	movs	r2, #128	; 0x80
 80087a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	011a      	lsls	r2, r3, #4
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2240      	movs	r2, #64	; 0x40
 80087b2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80087b4:	e023      	b.n	80087fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2280      	movs	r2, #128	; 0x80
 80087ba:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2280      	movs	r2, #128	; 0x80
 80087c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80087ca:	e018      	b.n	80087fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	22c0      	movs	r2, #192	; 0xc0
 80087d0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2280      	movs	r2, #128	; 0x80
 80087de:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80087e0:	e00d      	b.n	80087fe <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	22e0      	movs	r2, #224	; 0xe0
 80087e6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2280      	movs	r2, #128	; 0x80
 80087f4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80087f6:	e002      	b.n	80087fe <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]
      break;
 80087fc:	bf00      	nop
  }

  return status;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008800:	4618      	mov	r0, r3
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008814:	4b18      	ldr	r3, [pc, #96]	; (8008878 <SAI_Disable+0x6c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a18      	ldr	r2, [pc, #96]	; (800887c <SAI_Disable+0x70>)
 800881a:	fba2 2303 	umull	r2, r3, r2, r3
 800881e:	0b1b      	lsrs	r3, r3, #12
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008836:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008844:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	72fb      	strb	r3, [r7, #11]
      break;
 8008852:	e009      	b.n	8008868 <SAI_Disable+0x5c>
    }
    count--;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b01      	subs	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e7      	bne.n	8008838 <SAI_Disable+0x2c>

  return status;
 8008868:	7afb      	ldrb	r3, [r7, #11]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000004 	.word	0x20000004
 800887c:	95cbec1b 	.word	0x95cbec1b

08008880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e095      	b.n	80089be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d108      	bne.n	80088ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a2:	d009      	beq.n	80088b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	61da      	str	r2, [r3, #28]
 80088aa:	e005      	b.n	80088b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7f8 fc9e 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088f8:	d902      	bls.n	8008900 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	e002      	b.n	8008906 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008904:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800890e:	d007      	beq.n	8008920 <HAL_SPI_Init+0xa0>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008918:	d002      	beq.n	8008920 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	ea42 0103 	orr.w	r1, r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	0c1b      	lsrs	r3, r3, #16
 800897c:	f003 0204 	and.w	r2, r3, #4
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800899c:	ea42 0103 	orr.w	r1, r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e049      	b.n	8008a6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7f8 ffc1 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2202      	movs	r2, #2
 80089f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3304      	adds	r3, #4
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f000 fb3f 	bl	8009088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d001      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e036      	b.n	8008afa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <HAL_TIM_Base_Start_IT+0x94>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <HAL_TIM_Base_Start_IT+0x44>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab6:	d115      	bne.n	8008ae4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <HAL_TIM_Base_Start_IT+0x98>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b06      	cmp	r3, #6
 8008ac8:	d015      	beq.n	8008af6 <HAL_TIM_Base_Start_IT+0x82>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad0:	d011      	beq.n	8008af6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0201 	orr.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae2:	e008      	b.n	8008af6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0201 	orr.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e000      	b.n	8008af8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40012c00 	.word	0x40012c00
 8008b0c:	00010007 	.word	0x00010007

08008b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e049      	b.n	8008bb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d106      	bne.n	8008b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f841 	bl	8008bbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f000 fa9a 	bl	8009088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d122      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d11b      	bne.n	8008c2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f06f 0202 	mvn.w	r2, #2
 8008bfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fa19 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008c1a:	e005      	b.n	8008c28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fa0b 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa1c 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b04      	cmp	r3, #4
 8008c3a:	d122      	bne.n	8008c82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d11b      	bne.n	8008c82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f06f 0204 	mvn.w	r2, #4
 8008c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f9ef 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008c6e:	e005      	b.n	8008c7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f9e1 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f9f2 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d122      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d11b      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f06f 0208 	mvn.w	r2, #8
 8008ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2204      	movs	r2, #4
 8008cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9c5 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008cc2:	e005      	b.n	8008cd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f9b7 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9c8 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d122      	bne.n	8008d2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f003 0310 	and.w	r3, r3, #16
 8008cee:	2b10      	cmp	r3, #16
 8008cf0:	d11b      	bne.n	8008d2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f06f 0210 	mvn.w	r2, #16
 8008cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2208      	movs	r2, #8
 8008d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f99b 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008d16:	e005      	b.n	8008d24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f98d 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f99e 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d10e      	bne.n	8008d56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d107      	bne.n	8008d56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f06f 0201 	mvn.w	r2, #1
 8008d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f8 f861 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b80      	cmp	r3, #128	; 0x80
 8008d62:	d10e      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6e:	2b80      	cmp	r3, #128	; 0x80
 8008d70:	d107      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fcff 	bl	8009780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d90:	d10e      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9c:	2b80      	cmp	r3, #128	; 0x80
 8008d9e:	d107      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fcf2 	bl	8009794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	d10e      	bne.n	8008ddc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d107      	bne.n	8008ddc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f94c 	bl	8009074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d10e      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d107      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f06f 0220 	mvn.w	r2, #32
 8008e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fcb2 	bl	800976c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e0ff      	b.n	800902e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b14      	cmp	r3, #20
 8008e3a:	f200 80f0 	bhi.w	800901e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e99 	.word	0x08008e99
 8008e48:	0800901f 	.word	0x0800901f
 8008e4c:	0800901f 	.word	0x0800901f
 8008e50:	0800901f 	.word	0x0800901f
 8008e54:	08008ed9 	.word	0x08008ed9
 8008e58:	0800901f 	.word	0x0800901f
 8008e5c:	0800901f 	.word	0x0800901f
 8008e60:	0800901f 	.word	0x0800901f
 8008e64:	08008f1b 	.word	0x08008f1b
 8008e68:	0800901f 	.word	0x0800901f
 8008e6c:	0800901f 	.word	0x0800901f
 8008e70:	0800901f 	.word	0x0800901f
 8008e74:	08008f5b 	.word	0x08008f5b
 8008e78:	0800901f 	.word	0x0800901f
 8008e7c:	0800901f 	.word	0x0800901f
 8008e80:	0800901f 	.word	0x0800901f
 8008e84:	08008f9d 	.word	0x08008f9d
 8008e88:	0800901f 	.word	0x0800901f
 8008e8c:	0800901f 	.word	0x0800901f
 8008e90:	0800901f 	.word	0x0800901f
 8008e94:	08008fdd 	.word	0x08008fdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f956 	bl	8009150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0208 	orr.w	r2, r2, #8
 8008eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	699a      	ldr	r2, [r3, #24]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0204 	bic.w	r2, r2, #4
 8008ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6999      	ldr	r1, [r3, #24]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	619a      	str	r2, [r3, #24]
      break;
 8008ed6:	e0a5      	b.n	8009024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f9b2 	bl	8009248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699a      	ldr	r2, [r3, #24]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6999      	ldr	r1, [r3, #24]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	021a      	lsls	r2, r3, #8
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	619a      	str	r2, [r3, #24]
      break;
 8008f18:	e084      	b.n	8009024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fa0b 	bl	800933c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69da      	ldr	r2, [r3, #28]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f042 0208 	orr.w	r2, r2, #8
 8008f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69da      	ldr	r2, [r3, #28]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0204 	bic.w	r2, r2, #4
 8008f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	69d9      	ldr	r1, [r3, #28]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	691a      	ldr	r2, [r3, #16]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	61da      	str	r2, [r3, #28]
      break;
 8008f58:	e064      	b.n	8009024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fa63 	bl	800942c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69da      	ldr	r2, [r3, #28]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	69d9      	ldr	r1, [r3, #28]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	021a      	lsls	r2, r3, #8
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	61da      	str	r2, [r3, #28]
      break;
 8008f9a:	e043      	b.n	8009024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 faa0 	bl	80094e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0208 	orr.w	r2, r2, #8
 8008fb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 0204 	bic.w	r2, r2, #4
 8008fc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fda:	e023      	b.n	8009024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68b9      	ldr	r1, [r7, #8]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 fad8 	bl	8009598 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	021a      	lsls	r2, r3, #8
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800901c:	e002      	b.n	8009024 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	75fb      	strb	r3, [r7, #23]
      break;
 8009022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop

08009038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a2a      	ldr	r2, [pc, #168]	; (8009144 <TIM_Base_SetConfig+0xbc>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_Base_SetConfig+0x20>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a6:	d108      	bne.n	80090ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a21      	ldr	r2, [pc, #132]	; (8009144 <TIM_Base_SetConfig+0xbc>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00b      	beq.n	80090da <TIM_Base_SetConfig+0x52>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c8:	d007      	beq.n	80090da <TIM_Base_SetConfig+0x52>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a1e      	ldr	r2, [pc, #120]	; (8009148 <TIM_Base_SetConfig+0xc0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d003      	beq.n	80090da <TIM_Base_SetConfig+0x52>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a1d      	ldr	r2, [pc, #116]	; (800914c <TIM_Base_SetConfig+0xc4>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d108      	bne.n	80090ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a0c      	ldr	r2, [pc, #48]	; (8009144 <TIM_Base_SetConfig+0xbc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d007      	beq.n	8009128 <TIM_Base_SetConfig+0xa0>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a0b      	ldr	r2, [pc, #44]	; (8009148 <TIM_Base_SetConfig+0xc0>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_Base_SetConfig+0xa0>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a0a      	ldr	r2, [pc, #40]	; (800914c <TIM_Base_SetConfig+0xc4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d103      	bne.n	8009130 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	691a      	ldr	r2, [r3, #16]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	615a      	str	r2, [r3, #20]
}
 8009136:	bf00      	nop
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	40012c00 	.word	0x40012c00
 8009148:	40014400 	.word	0x40014400
 800914c:	40014800 	.word	0x40014800

08009150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	f023 0201 	bic.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800917e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0303 	bic.w	r3, r3, #3
 800918a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f023 0302 	bic.w	r3, r3, #2
 800919c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a24      	ldr	r2, [pc, #144]	; (800923c <TIM_OC1_SetConfig+0xec>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d007      	beq.n	80091c0 <TIM_OC1_SetConfig+0x70>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a23      	ldr	r2, [pc, #140]	; (8009240 <TIM_OC1_SetConfig+0xf0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d003      	beq.n	80091c0 <TIM_OC1_SetConfig+0x70>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a22      	ldr	r2, [pc, #136]	; (8009244 <TIM_OC1_SetConfig+0xf4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d10c      	bne.n	80091da <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f023 0308 	bic.w	r3, r3, #8
 80091c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f023 0304 	bic.w	r3, r3, #4
 80091d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a17      	ldr	r2, [pc, #92]	; (800923c <TIM_OC1_SetConfig+0xec>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d007      	beq.n	80091f2 <TIM_OC1_SetConfig+0xa2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a17      	ldr	r2, [pc, #92]	; (8009244 <TIM_OC1_SetConfig+0xf4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d003      	beq.n	80091f2 <TIM_OC1_SetConfig+0xa2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a14      	ldr	r2, [pc, #80]	; (8009240 <TIM_OC1_SetConfig+0xf0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d111      	bne.n	8009216 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4313      	orrs	r3, r2
 8009214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	621a      	str	r2, [r3, #32]
}
 8009230:	bf00      	nop
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	40012c00 	.word	0x40012c00
 8009240:	40014800 	.word	0x40014800
 8009244:	40014400 	.word	0x40014400

08009248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f023 0210 	bic.w	r2, r3, #16
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f023 0320 	bic.w	r3, r3, #32
 8009296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a22      	ldr	r2, [pc, #136]	; (8009330 <TIM_OC2_SetConfig+0xe8>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d10d      	bne.n	80092c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	4313      	orrs	r3, r2
 80092be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a19      	ldr	r2, [pc, #100]	; (8009330 <TIM_OC2_SetConfig+0xe8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_OC2_SetConfig+0x98>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a18      	ldr	r2, [pc, #96]	; (8009334 <TIM_OC2_SetConfig+0xec>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_OC2_SetConfig+0x98>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a17      	ldr	r2, [pc, #92]	; (8009338 <TIM_OC2_SetConfig+0xf0>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d113      	bne.n	8009308 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	4313      	orrs	r3, r2
 8009306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685a      	ldr	r2, [r3, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	621a      	str	r2, [r3, #32]
}
 8009322:	bf00      	nop
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	40012c00 	.word	0x40012c00
 8009334:	40014400 	.word	0x40014400
 8009338:	40014800 	.word	0x40014800

0800933c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800936a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0303 	bic.w	r3, r3, #3
 8009376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	4313      	orrs	r3, r2
 8009380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4313      	orrs	r3, r2
 8009394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a21      	ldr	r2, [pc, #132]	; (8009420 <TIM_OC3_SetConfig+0xe4>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d10d      	bne.n	80093ba <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a18      	ldr	r2, [pc, #96]	; (8009420 <TIM_OC3_SetConfig+0xe4>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d007      	beq.n	80093d2 <TIM_OC3_SetConfig+0x96>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a17      	ldr	r2, [pc, #92]	; (8009424 <TIM_OC3_SetConfig+0xe8>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_OC3_SetConfig+0x96>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a16      	ldr	r2, [pc, #88]	; (8009428 <TIM_OC3_SetConfig+0xec>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d113      	bne.n	80093fa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	621a      	str	r2, [r3, #32]
}
 8009414:	bf00      	nop
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	40012c00 	.word	0x40012c00
 8009424:	40014400 	.word	0x40014400
 8009428:	40014800 	.word	0x40014800

0800942c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800945a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	4313      	orrs	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800947a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	031b      	lsls	r3, r3, #12
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	4313      	orrs	r3, r2
 8009486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a14      	ldr	r2, [pc, #80]	; (80094dc <TIM_OC4_SetConfig+0xb0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d007      	beq.n	80094a0 <TIM_OC4_SetConfig+0x74>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a13      	ldr	r2, [pc, #76]	; (80094e0 <TIM_OC4_SetConfig+0xb4>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC4_SetConfig+0x74>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a12      	ldr	r2, [pc, #72]	; (80094e4 <TIM_OC4_SetConfig+0xb8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d109      	bne.n	80094b4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	019b      	lsls	r3, r3, #6
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	621a      	str	r2, [r3, #32]
}
 80094ce:	bf00      	nop
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40012c00 	.word	0x40012c00
 80094e0:	40014400 	.word	0x40014400
 80094e4:	40014800 	.word	0x40014800

080094e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800952c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a13      	ldr	r2, [pc, #76]	; (800958c <TIM_OC5_SetConfig+0xa4>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <TIM_OC5_SetConfig+0x6a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a12      	ldr	r2, [pc, #72]	; (8009590 <TIM_OC5_SetConfig+0xa8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <TIM_OC5_SetConfig+0x6a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a11      	ldr	r2, [pc, #68]	; (8009594 <TIM_OC5_SetConfig+0xac>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d109      	bne.n	8009566 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009558:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	4313      	orrs	r3, r2
 8009564:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	621a      	str	r2, [r3, #32]
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	40012c00 	.word	0x40012c00
 8009590:	40014400 	.word	0x40014400
 8009594:	40014800 	.word	0x40014800

08009598 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	051b      	lsls	r3, r3, #20
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a14      	ldr	r2, [pc, #80]	; (8009640 <TIM_OC6_SetConfig+0xa8>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d007      	beq.n	8009604 <TIM_OC6_SetConfig+0x6c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a13      	ldr	r2, [pc, #76]	; (8009644 <TIM_OC6_SetConfig+0xac>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d003      	beq.n	8009604 <TIM_OC6_SetConfig+0x6c>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a12      	ldr	r2, [pc, #72]	; (8009648 <TIM_OC6_SetConfig+0xb0>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d109      	bne.n	8009618 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800960a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	029b      	lsls	r3, r3, #10
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	621a      	str	r2, [r3, #32]
}
 8009632:	bf00      	nop
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop
 8009640:	40012c00 	.word	0x40012c00
 8009644:	40014400 	.word	0x40014400
 8009648:	40014800 	.word	0x40014800

0800964c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009664:	2302      	movs	r3, #2
 8009666:	e078      	b.n	800975a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	041b      	lsls	r3, r3, #16
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a20      	ldr	r2, [pc, #128]	; (8009768 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d106      	bne.n	80096fa <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a1a      	ldr	r2, [pc, #104]	; (8009768 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d121      	bne.n	8009748 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	051b      	lsls	r3, r3, #20
 8009710:	4313      	orrs	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	4313      	orrs	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a0c      	ldr	r2, [pc, #48]	; (8009768 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d106      	bne.n	8009748 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40012c00 	.word	0x40012c00

0800976c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80097bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80097e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	43db      	mvns	r3, r3
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4013      	ands	r3, r2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800980c:	b084      	sub	sp, #16
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	f107 0014 	add.w	r0, r7, #20
 800981a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	b004      	add	sp, #16
 800984c:	4770      	bx	lr
	...

08009850 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009850:	b480      	push	{r7}
 8009852:	b09d      	sub	sp, #116	; 0x74
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009876:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	78db      	ldrb	r3, [r3, #3]
 800987e:	2b03      	cmp	r3, #3
 8009880:	d81f      	bhi.n	80098c2 <USB_ActivateEndpoint+0x72>
 8009882:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <USB_ActivateEndpoint+0x38>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	08009899 	.word	0x08009899
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098cb 	.word	0x080098cb
 8009894:	080098a7 	.word	0x080098a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009898:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800989c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098a4:	e012      	b.n	80098cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80098a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80098ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098b2:	e00b      	b.n	80098cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80098b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098c0:	e004      	b.n	80098cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80098c8:	e000      	b.n	80098cc <USB_ActivateEndpoint+0x7c>
      break;
 80098ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	441a      	add	r2, r3
 80098d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009906:	b21a      	sxth	r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	b21b      	sxth	r3, r3
 800990e:	4313      	orrs	r3, r2
 8009910:	b21b      	sxth	r3, r3
 8009912:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	441a      	add	r2, r3
 8009920:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009934:	b29b      	uxth	r3, r3
 8009936:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	7b1b      	ldrb	r3, [r3, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f040 8149 	bne.w	8009bd4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8084 	beq.w	8009a54 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	61bb      	str	r3, [r7, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009956:	b29b      	uxth	r3, r3
 8009958:	461a      	mov	r2, r3
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	4413      	add	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	00da      	lsls	r2, r3, #3
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	88db      	ldrh	r3, [r3, #6]
 8009974:	085b      	lsrs	r3, r3, #1
 8009976:	b29b      	uxth	r3, r3
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	827b      	strh	r3, [r7, #18]
 800998e:	8a7b      	ldrh	r3, [r7, #18]
 8009990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01b      	beq.n	80099d0 <USB_ActivateEndpoint+0x180>
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ae:	823b      	strh	r3, [r7, #16]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	441a      	add	r2, r3
 80099ba:	8a3b      	ldrh	r3, [r7, #16]
 80099bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	78db      	ldrb	r3, [r3, #3]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d020      	beq.n	8009a1a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ee:	81bb      	strh	r3, [r7, #12]
 80099f0:	89bb      	ldrh	r3, [r7, #12]
 80099f2:	f083 0320 	eor.w	r3, r3, #32
 80099f6:	81bb      	strh	r3, [r7, #12]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	441a      	add	r2, r3
 8009a02:	89bb      	ldrh	r3, [r7, #12]
 8009a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	8013      	strh	r3, [r2, #0]
 8009a18:	e2a6      	b.n	8009f68 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a30:	81fb      	strh	r3, [r7, #14]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	441a      	add	r2, r3
 8009a3c:	89fb      	ldrh	r3, [r7, #14]
 8009a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	8013      	strh	r3, [r2, #0]
 8009a52:	e289      	b.n	8009f68 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	633b      	str	r3, [r7, #48]	; 0x30
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	461a      	mov	r2, r3
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	4413      	add	r3, r2
 8009a66:	633b      	str	r3, [r7, #48]	; 0x30
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	00da      	lsls	r2, r3, #3
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	88db      	ldrh	r3, [r3, #6]
 8009a7c:	085b      	lsrs	r3, r3, #1
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	4413      	add	r3, r2
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	00da      	lsls	r2, r3, #3
 8009aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab2:	d918      	bls.n	8009ae6 <USB_ActivateEndpoint+0x296>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	095b      	lsrs	r3, r3, #5
 8009aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	f003 031f 	and.w	r3, r3, #31
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <USB_ActivateEndpoint+0x27e>
 8009ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aca:	3b01      	subs	r3, #1
 8009acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	029b      	lsls	r3, r3, #10
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	e029      	b.n	8009b3a <USB_ActivateEndpoint+0x2ea>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d112      	bne.n	8009b14 <USB_ActivateEndpoint+0x2c4>
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	801a      	strh	r2, [r3, #0]
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	e012      	b.n	8009b3a <USB_ActivateEndpoint+0x2ea>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <USB_ActivateEndpoint+0x2de>
 8009b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	029b      	lsls	r3, r3, #10
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01b      	beq.n	8009b8a <USB_ActivateEndpoint+0x33a>
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b68:	843b      	strh	r3, [r7, #32]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	441a      	add	r2, r3
 8009b74:	8c3b      	ldrh	r3, [r7, #32]
 8009b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba0:	83fb      	strh	r3, [r7, #30]
 8009ba2:	8bfb      	ldrh	r3, [r7, #30]
 8009ba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ba8:	83fb      	strh	r3, [r7, #30]
 8009baa:	8bfb      	ldrh	r3, [r7, #30]
 8009bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009bb0:	83fb      	strh	r3, [r7, #30]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	441a      	add	r2, r3
 8009bbc:	8bfb      	ldrh	r3, [r7, #30]
 8009bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	8013      	strh	r3, [r2, #0]
 8009bd2:	e1c9      	b.n	8009f68 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	78db      	ldrb	r3, [r3, #3]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d11e      	bne.n	8009c1a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	441a      	add	r2, r3
 8009c00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	8013      	strh	r3, [r2, #0]
 8009c18:	e01d      	b.n	8009c56 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c30:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	441a      	add	r2, r3
 8009c3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	461a      	mov	r2, r3
 8009c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c66:	4413      	add	r3, r2
 8009c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	00da      	lsls	r2, r3, #3
 8009c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	891b      	ldrh	r3, [r3, #8]
 8009c7e:	085b      	lsrs	r3, r3, #1
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c9a:	4413      	add	r3, r2
 8009c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	00da      	lsls	r2, r3, #3
 8009ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cac:	653b      	str	r3, [r7, #80]	; 0x50
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	895b      	ldrh	r3, [r3, #10]
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cbc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f040 8093 	bne.w	8009dee <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d01b      	beq.n	8009d1c <USB_ActivateEndpoint+0x4cc>
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	441a      	add	r2, r3
 8009d06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009d2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d01b      	beq.n	8009d6c <USB_ActivateEndpoint+0x51c>
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d82:	873b      	strh	r3, [r7, #56]	; 0x38
 8009d84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d8a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009d8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d92:	873b      	strh	r3, [r7, #56]	; 0x38
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dca:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	441a      	add	r2, r3
 8009dd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	8013      	strh	r3, [r2, #0]
 8009dec:	e0bc      	b.n	8009f68 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009dfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d01d      	beq.n	8009e46 <USB_ActivateEndpoint+0x5f6>
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	441a      	add	r2, r3
 8009e2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009e56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01d      	beq.n	8009e9e <USB_ActivateEndpoint+0x64e>
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	441a      	add	r2, r3
 8009e86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	78db      	ldrb	r3, [r3, #3]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d024      	beq.n	8009ef0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ebc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009ec0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009ec4:	f083 0320 	eor.w	r3, r3, #32
 8009ec8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	441a      	add	r2, r3
 8009ed6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	8013      	strh	r3, [r2, #0]
 8009eee:	e01d      	b.n	8009f2c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	441a      	add	r2, r3
 8009f14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	441a      	add	r2, r3
 8009f50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3774      	adds	r7, #116	; 0x74
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b08d      	sub	sp, #52	; 0x34
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	7b1b      	ldrb	r3, [r3, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f040 808e 	bne.w	800a0a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d044      	beq.n	800a01e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	81bb      	strh	r3, [r7, #12]
 8009fa2:	89bb      	ldrh	r3, [r7, #12]
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d01b      	beq.n	8009fe4 <USB_DeactivateEndpoint+0x6c>
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc2:	817b      	strh	r3, [r7, #10]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	441a      	add	r2, r3
 8009fce:	897b      	ldrh	r3, [r7, #10]
 8009fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ffa:	813b      	strh	r3, [r7, #8]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	441a      	add	r2, r3
 800a006:	893b      	ldrh	r3, [r7, #8]
 800a008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a018:	b29b      	uxth	r3, r3
 800a01a:	8013      	strh	r3, [r2, #0]
 800a01c:	e192      	b.n	800a344 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	827b      	strh	r3, [r7, #18]
 800a02c:	8a7b      	ldrh	r3, [r7, #18]
 800a02e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01b      	beq.n	800a06e <USB_DeactivateEndpoint+0xf6>
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29b      	uxth	r3, r3
 800a044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04c:	823b      	strh	r3, [r7, #16]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	441a      	add	r2, r3
 800a058:	8a3b      	ldrh	r3, [r7, #16]
 800a05a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a084:	81fb      	strh	r3, [r7, #14]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	441a      	add	r2, r3
 800a090:	89fb      	ldrh	r3, [r7, #14]
 800a092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a09a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8013      	strh	r3, [r2, #0]
 800a0a6:	e14d      	b.n	800a344 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	785b      	ldrb	r3, [r3, #1]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 80a5 	bne.w	800a1fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	843b      	strh	r3, [r7, #32]
 800a0c0:	8c3b      	ldrh	r3, [r7, #32]
 800a0c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d01b      	beq.n	800a102 <USB_DeactivateEndpoint+0x18a>
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e0:	83fb      	strh	r3, [r7, #30]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	441a      	add	r2, r3
 800a0ec:	8bfb      	ldrh	r3, [r7, #30]
 800a0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	83bb      	strh	r3, [r7, #28]
 800a110:	8bbb      	ldrh	r3, [r7, #28]
 800a112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01b      	beq.n	800a152 <USB_DeactivateEndpoint+0x1da>
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	b29b      	uxth	r3, r3
 800a128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a12c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a130:	837b      	strh	r3, [r7, #26]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	441a      	add	r2, r3
 800a13c:	8b7b      	ldrh	r3, [r7, #26]
 800a13e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a14a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a14e:	b29b      	uxth	r3, r3
 800a150:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a168:	833b      	strh	r3, [r7, #24]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	441a      	add	r2, r3
 800a174:	8b3b      	ldrh	r3, [r7, #24]
 800a176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a17e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a186:	b29b      	uxth	r3, r3
 800a188:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a19c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a0:	82fb      	strh	r3, [r7, #22]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	441a      	add	r2, r3
 800a1ac:	8afb      	ldrh	r3, [r7, #22]
 800a1ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1d8:	82bb      	strh	r3, [r7, #20]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	8abb      	ldrh	r3, [r7, #20]
 800a1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	8013      	strh	r3, [r2, #0]
 800a1fa:	e0a3      	b.n	800a344 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a20a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a20c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01b      	beq.n	800a24c <USB_DeactivateEndpoint+0x2d4>
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	b29b      	uxth	r3, r3
 800a222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	441a      	add	r2, r3
 800a236:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a23c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a248:	b29b      	uxth	r3, r3
 800a24a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a25a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01b      	beq.n	800a29c <USB_DeactivateEndpoint+0x324>
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	b29b      	uxth	r3, r3
 800a272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	441a      	add	r2, r3
 800a286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a28c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a298:	b29b      	uxth	r3, r3
 800a29a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	441a      	add	r2, r3
 800a2be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	441a      	add	r2, r3
 800a2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	b29b      	uxth	r3, r3
 800a30a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a322:	847b      	strh	r3, [r7, #34]	; 0x22
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	441a      	add	r2, r3
 800a32e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a340:	b29b      	uxth	r3, r3
 800a342:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3734      	adds	r7, #52	; 0x34
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b0c2      	sub	sp, #264	; 0x108
 800a356:	af00      	add	r7, sp, #0
 800a358:	1d3b      	adds	r3, r7, #4
 800a35a:	6018      	str	r0, [r3, #0]
 800a35c:	463b      	mov	r3, r7
 800a35e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a360:	463b      	mov	r3, r7
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	785b      	ldrb	r3, [r3, #1]
 800a366:	2b01      	cmp	r3, #1
 800a368:	f040 8509 	bne.w	800ad7e <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a36c:	463b      	mov	r3, r7
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	463b      	mov	r3, r7
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d905      	bls.n	800a388 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a37c:	463b      	mov	r3, r7
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a386:	e004      	b.n	800a392 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a388:	463b      	mov	r3, r7
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a392:	463b      	mov	r3, r7
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	7b1b      	ldrb	r3, [r3, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d128      	bne.n	800a3ee <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a39c:	463b      	mov	r3, r7
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6959      	ldr	r1, [r3, #20]
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	88da      	ldrh	r2, [r3, #6]
 800a3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	1d38      	adds	r0, r7, #4
 800a3b0:	6800      	ldr	r0, [r0, #0]
 800a3b2:	f001 f9da 	bl	800b76a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a3b6:	1d3b      	adds	r3, r7, #4
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	613b      	str	r3, [r7, #16]
 800a3bc:	1d3b      	adds	r3, r7, #4
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	613b      	str	r3, [r7, #16]
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	00da      	lsls	r2, r3, #3
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	f000 bc9f 	b.w	800ad2c <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	78db      	ldrb	r3, [r3, #3]
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	f040 8347 	bne.w	800aa88 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6a1a      	ldr	r2, [r3, #32]
 800a400:	463b      	mov	r3, r7
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	429a      	cmp	r2, r3
 800a408:	f240 82eb 	bls.w	800a9e2 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a40c:	1d3b      	adds	r3, r7, #4
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	463b      	mov	r3, r7
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a426:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a42a:	1d3b      	adds	r3, r7, #4
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	463b      	mov	r3, r7
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	441a      	add	r2, r3
 800a438:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a43c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a444:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a450:	463b      	mov	r3, r7
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6a1a      	ldr	r2, [r3, #32]
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45a:	1ad2      	subs	r2, r2, r3
 800a45c:	463b      	mov	r3, r7
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a462:	1d3b      	adds	r3, r7, #4
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	463b      	mov	r3, r7
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29b      	uxth	r3, r3
 800a474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 8159 	beq.w	800a730 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a47e:	1d3b      	adds	r3, r7, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	633b      	str	r3, [r7, #48]	; 0x30
 800a484:	463b      	mov	r3, r7
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d164      	bne.n	800a558 <USB_EPStartXfer+0x206>
 800a48e:	1d3b      	adds	r3, r7, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	62bb      	str	r3, [r7, #40]	; 0x28
 800a494:	1d3b      	adds	r3, r7, #4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	4413      	add	r3, r2
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4a6:	463b      	mov	r3, r7
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	00da      	lsls	r2, r3, #3
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a4be:	d91c      	bls.n	800a4fa <USB_EPStartXfer+0x1a8>
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c4:	095b      	lsrs	r3, r3, #5
 800a4c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ce:	f003 031f 	and.w	r3, r3, #31
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d104      	bne.n	800a4e0 <USB_EPStartXfer+0x18e>
 800a4d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	029b      	lsls	r3, r3, #10
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	801a      	strh	r2, [r3, #0]
 800a4f8:	e04a      	b.n	800a590 <USB_EPStartXfer+0x23e>
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d112      	bne.n	800a528 <USB_EPStartXfer+0x1d6>
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	b29b      	uxth	r3, r3
 800a518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a51c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a520:	b29a      	uxth	r2, r3
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	801a      	strh	r2, [r3, #0]
 800a526:	e033      	b.n	800a590 <USB_EPStartXfer+0x23e>
 800a528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a52c:	085b      	lsrs	r3, r3, #1
 800a52e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d004      	beq.n	800a548 <USB_EPStartXfer+0x1f6>
 800a53e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a542:	3301      	adds	r3, #1
 800a544:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a548:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	029b      	lsls	r3, r3, #10
 800a550:	b29a      	uxth	r2, r3
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	801a      	strh	r2, [r3, #0]
 800a556:	e01b      	b.n	800a590 <USB_EPStartXfer+0x23e>
 800a558:	463b      	mov	r3, r7
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d116      	bne.n	800a590 <USB_EPStartXfer+0x23e>
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	4413      	add	r3, r2
 800a572:	633b      	str	r3, [r7, #48]	; 0x30
 800a574:	463b      	mov	r3, r7
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	00da      	lsls	r2, r3, #3
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	4413      	add	r3, r2
 800a580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a590:	463b      	mov	r3, r7
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	895b      	ldrh	r3, [r3, #10]
 800a596:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a59a:	463b      	mov	r3, r7
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6959      	ldr	r1, [r3, #20]
 800a5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5aa:	1d38      	adds	r0, r7, #4
 800a5ac:	6800      	ldr	r0, [r0, #0]
 800a5ae:	f001 f8dc 	bl	800b76a <USB_WritePMA>
            ep->xfer_buff += len;
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695a      	ldr	r2, [r3, #20]
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5bc:	441a      	add	r2, r3
 800a5be:	463b      	mov	r3, r7
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6a1a      	ldr	r2, [r3, #32]
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d909      	bls.n	800a5e8 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800a5d4:	463b      	mov	r3, r7
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6a1a      	ldr	r2, [r3, #32]
 800a5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	463b      	mov	r3, r7
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	621a      	str	r2, [r3, #32]
 800a5e6:	e008      	b.n	800a5fa <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800a5e8:	463b      	mov	r3, r7
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a5f2:	463b      	mov	r3, r7
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5fa:	463b      	mov	r3, r7
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d164      	bne.n	800a6ce <USB_EPStartXfer+0x37c>
 800a604:	1d3b      	adds	r3, r7, #4
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	1d3b      	adds	r3, r7, #4
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a612:	b29b      	uxth	r3, r3
 800a614:	461a      	mov	r2, r3
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	4413      	add	r3, r2
 800a61a:	61bb      	str	r3, [r7, #24]
 800a61c:	463b      	mov	r3, r7
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	00da      	lsls	r2, r3, #3
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	4413      	add	r3, r2
 800a628:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a632:	2b3e      	cmp	r3, #62	; 0x3e
 800a634:	d91c      	bls.n	800a670 <USB_EPStartXfer+0x31e>
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	f003 031f 	and.w	r3, r3, #31
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <USB_EPStartXfer+0x304>
 800a64c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a650:	3b01      	subs	r3, #1
 800a652:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	029b      	lsls	r3, r3, #10
 800a65e:	b29b      	uxth	r3, r3
 800a660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a668:	b29a      	uxth	r2, r3
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	801a      	strh	r2, [r3, #0]
 800a66e:	e04d      	b.n	800a70c <USB_EPStartXfer+0x3ba>
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a674:	2b00      	cmp	r3, #0
 800a676:	d112      	bne.n	800a69e <USB_EPStartXfer+0x34c>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a682:	b29a      	uxth	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	801a      	strh	r2, [r3, #0]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a696:	b29a      	uxth	r2, r3
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	801a      	strh	r2, [r3, #0]
 800a69c:	e036      	b.n	800a70c <USB_EPStartXfer+0x3ba>
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d004      	beq.n	800a6be <USB_EPStartXfer+0x36c>
 800a6b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	029b      	lsls	r3, r3, #10
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	801a      	strh	r2, [r3, #0]
 800a6cc:	e01e      	b.n	800a70c <USB_EPStartXfer+0x3ba>
 800a6ce:	463b      	mov	r3, r7
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d119      	bne.n	800a70c <USB_EPStartXfer+0x3ba>
 800a6d8:	1d3b      	adds	r3, r7, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	623b      	str	r3, [r7, #32]
 800a6de:	1d3b      	adds	r3, r7, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	623b      	str	r3, [r7, #32]
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	00da      	lsls	r2, r3, #3
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	b29a      	uxth	r2, r3
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a70c:	463b      	mov	r3, r7
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	891b      	ldrh	r3, [r3, #8]
 800a712:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a716:	463b      	mov	r3, r7
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6959      	ldr	r1, [r3, #20]
 800a71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a720:	b29b      	uxth	r3, r3
 800a722:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a726:	1d38      	adds	r0, r7, #4
 800a728:	6800      	ldr	r0, [r0, #0]
 800a72a:	f001 f81e 	bl	800b76a <USB_WritePMA>
 800a72e:	e2fd      	b.n	800ad2c <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a730:	463b      	mov	r3, r7
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	785b      	ldrb	r3, [r3, #1]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d164      	bne.n	800a804 <USB_EPStartXfer+0x4b2>
 800a73a:	1d3b      	adds	r3, r7, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a740:	1d3b      	adds	r3, r7, #4
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a748:	b29b      	uxth	r3, r3
 800a74a:	461a      	mov	r2, r3
 800a74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a74e:	4413      	add	r3, r2
 800a750:	64bb      	str	r3, [r7, #72]	; 0x48
 800a752:	463b      	mov	r3, r7
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	00da      	lsls	r2, r3, #3
 800a75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a75c:	4413      	add	r3, r2
 800a75e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a762:	647b      	str	r3, [r7, #68]	; 0x44
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a768:	2b3e      	cmp	r3, #62	; 0x3e
 800a76a:	d91c      	bls.n	800a7a6 <USB_EPStartXfer+0x454>
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a770:	095b      	lsrs	r3, r3, #5
 800a772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a77a:	f003 031f 	and.w	r3, r3, #31
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d104      	bne.n	800a78c <USB_EPStartXfer+0x43a>
 800a782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a786:	3b01      	subs	r3, #1
 800a788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a78c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a790:	b29b      	uxth	r3, r3
 800a792:	029b      	lsls	r3, r3, #10
 800a794:	b29b      	uxth	r3, r3
 800a796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a2:	801a      	strh	r2, [r3, #0]
 800a7a4:	e04d      	b.n	800a842 <USB_EPStartXfer+0x4f0>
 800a7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d112      	bne.n	800a7d4 <USB_EPStartXfer+0x482>
 800a7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	e036      	b.n	800a842 <USB_EPStartXfer+0x4f0>
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d8:	085b      	lsrs	r3, r3, #1
 800a7da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <USB_EPStartXfer+0x4a2>
 800a7ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	029b      	lsls	r3, r3, #10
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a800:	801a      	strh	r2, [r3, #0]
 800a802:	e01e      	b.n	800a842 <USB_EPStartXfer+0x4f0>
 800a804:	463b      	mov	r3, r7
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d119      	bne.n	800a842 <USB_EPStartXfer+0x4f0>
 800a80e:	1d3b      	adds	r3, r7, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	653b      	str	r3, [r7, #80]	; 0x50
 800a814:	1d3b      	adds	r3, r7, #4
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	461a      	mov	r2, r3
 800a820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a822:	4413      	add	r3, r2
 800a824:	653b      	str	r3, [r7, #80]	; 0x50
 800a826:	463b      	mov	r3, r7
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	00da      	lsls	r2, r3, #3
 800a82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a830:	4413      	add	r3, r2
 800a832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a836:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a842:	463b      	mov	r3, r7
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	891b      	ldrh	r3, [r3, #8]
 800a848:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a84c:	463b      	mov	r3, r7
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6959      	ldr	r1, [r3, #20]
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a856:	b29b      	uxth	r3, r3
 800a858:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a85c:	1d38      	adds	r0, r7, #4
 800a85e:	6800      	ldr	r0, [r0, #0]
 800a860:	f000 ff83 	bl	800b76a <USB_WritePMA>
            ep->xfer_buff += len;
 800a864:	463b      	mov	r3, r7
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	695a      	ldr	r2, [r3, #20]
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86e:	441a      	add	r2, r3
 800a870:	463b      	mov	r3, r7
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a876:	463b      	mov	r3, r7
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6a1a      	ldr	r2, [r3, #32]
 800a87c:	463b      	mov	r3, r7
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	429a      	cmp	r2, r3
 800a884:	d909      	bls.n	800a89a <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800a886:	463b      	mov	r3, r7
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6a1a      	ldr	r2, [r3, #32]
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a890:	1ad2      	subs	r2, r2, r3
 800a892:	463b      	mov	r3, r7
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	621a      	str	r2, [r3, #32]
 800a898:	e008      	b.n	800a8ac <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a89a:	463b      	mov	r3, r7
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a8a4:	463b      	mov	r3, r7
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8ac:	1d3b      	adds	r3, r7, #4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8b2:	463b      	mov	r3, r7
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	785b      	ldrb	r3, [r3, #1]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d164      	bne.n	800a986 <USB_EPStartXfer+0x634>
 800a8bc:	1d3b      	adds	r3, r7, #4
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8c2:	1d3b      	adds	r3, r7, #4
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	4413      	add	r3, r2
 800a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8d4:	463b      	mov	r3, r7
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	00da      	lsls	r2, r3, #3
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	4413      	add	r3, r2
 800a8e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ea:	2b3e      	cmp	r3, #62	; 0x3e
 800a8ec:	d91c      	bls.n	800a928 <USB_EPStartXfer+0x5d6>
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fc:	f003 031f 	and.w	r3, r3, #31
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <USB_EPStartXfer+0x5bc>
 800a904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a908:	3b01      	subs	r3, #1
 800a90a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a912:	b29b      	uxth	r3, r3
 800a914:	029b      	lsls	r3, r3, #10
 800a916:	b29b      	uxth	r3, r3
 800a918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a91c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a920:	b29a      	uxth	r2, r3
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	801a      	strh	r2, [r3, #0]
 800a926:	e04a      	b.n	800a9be <USB_EPStartXfer+0x66c>
 800a928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d112      	bne.n	800a956 <USB_EPStartXfer+0x604>
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	b29b      	uxth	r3, r3
 800a936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93e:	801a      	strh	r2, [r3, #0]
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	b29b      	uxth	r3, r3
 800a946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a94a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a94e:	b29a      	uxth	r2, r3
 800a950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a952:	801a      	strh	r2, [r3, #0]
 800a954:	e033      	b.n	800a9be <USB_EPStartXfer+0x66c>
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <USB_EPStartXfer+0x624>
 800a96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a970:	3301      	adds	r3, #1
 800a972:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	029b      	lsls	r3, r3, #10
 800a97e:	b29a      	uxth	r2, r3
 800a980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	e01b      	b.n	800a9be <USB_EPStartXfer+0x66c>
 800a986:	463b      	mov	r3, r7
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d116      	bne.n	800a9be <USB_EPStartXfer+0x66c>
 800a990:	1d3b      	adds	r3, r7, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a998:	b29b      	uxth	r3, r3
 800a99a:	461a      	mov	r2, r3
 800a99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a99e:	4413      	add	r3, r2
 800a9a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	00da      	lsls	r2, r3, #3
 800a9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9be:	463b      	mov	r3, r7
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	895b      	ldrh	r3, [r3, #10]
 800a9c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6959      	ldr	r1, [r3, #20]
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9d8:	1d38      	adds	r0, r7, #4
 800a9da:	6800      	ldr	r0, [r0, #0]
 800a9dc:	f000 fec5 	bl	800b76a <USB_WritePMA>
 800a9e0:	e1a4      	b.n	800ad2c <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a9ec:	1d3b      	adds	r3, r7, #4
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	463b      	mov	r3, r7
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa0a:	1d3b      	adds	r3, r7, #4
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	463b      	mov	r3, r7
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	441a      	add	r2, r3
 800aa18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa30:	1d3b      	adds	r3, r7, #4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa36:	1d3b      	adds	r3, r7, #4
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	461a      	mov	r2, r3
 800aa42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa44:	4413      	add	r3, r2
 800aa46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa48:	463b      	mov	r3, r7
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	00da      	lsls	r2, r3, #3
 800aa50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa52:	4413      	add	r3, r2
 800aa54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa58:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa64:	463b      	mov	r3, r7
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	891b      	ldrh	r3, [r3, #8]
 800aa6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa6e:	463b      	mov	r3, r7
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6959      	ldr	r1, [r3, #20]
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa7e:	1d38      	adds	r0, r7, #4
 800aa80:	6800      	ldr	r0, [r0, #0]
 800aa82:	f000 fe72 	bl	800b76a <USB_WritePMA>
 800aa86:	e151      	b.n	800ad2c <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aa88:	463b      	mov	r3, r7
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6a1a      	ldr	r2, [r3, #32]
 800aa8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa92:	1ad2      	subs	r2, r2, r3
 800aa94:	463b      	mov	r3, r7
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aa9a:	1d3b      	adds	r3, r7, #4
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	463b      	mov	r3, r7
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 809b 	beq.w	800abec <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	673b      	str	r3, [r7, #112]	; 0x70
 800aabc:	463b      	mov	r3, r7
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d164      	bne.n	800ab90 <USB_EPStartXfer+0x83e>
 800aac6:	1d3b      	adds	r3, r7, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	66bb      	str	r3, [r7, #104]	; 0x68
 800aacc:	1d3b      	adds	r3, r7, #4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	461a      	mov	r2, r3
 800aad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aada:	4413      	add	r3, r2
 800aadc:	66bb      	str	r3, [r7, #104]	; 0x68
 800aade:	463b      	mov	r3, r7
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	00da      	lsls	r2, r3, #3
 800aae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aae8:	4413      	add	r3, r2
 800aaea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaee:	667b      	str	r3, [r7, #100]	; 0x64
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf4:	2b3e      	cmp	r3, #62	; 0x3e
 800aaf6:	d91c      	bls.n	800ab32 <USB_EPStartXfer+0x7e0>
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafc:	095b      	lsrs	r3, r3, #5
 800aafe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab06:	f003 031f 	and.w	r3, r3, #31
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d104      	bne.n	800ab18 <USB_EPStartXfer+0x7c6>
 800ab0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab12:	3b01      	subs	r3, #1
 800ab14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	029b      	lsls	r3, r3, #10
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab2e:	801a      	strh	r2, [r3, #0]
 800ab30:	e04a      	b.n	800abc8 <USB_EPStartXfer+0x876>
 800ab32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d112      	bne.n	800ab60 <USB_EPStartXfer+0x80e>
 800ab3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab5c:	801a      	strh	r2, [r3, #0]
 800ab5e:	e033      	b.n	800abc8 <USB_EPStartXfer+0x876>
 800ab60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab64:	085b      	lsrs	r3, r3, #1
 800ab66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d004      	beq.n	800ab80 <USB_EPStartXfer+0x82e>
 800ab76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	029b      	lsls	r3, r3, #10
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	e01b      	b.n	800abc8 <USB_EPStartXfer+0x876>
 800ab90:	463b      	mov	r3, r7
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	785b      	ldrb	r3, [r3, #1]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d116      	bne.n	800abc8 <USB_EPStartXfer+0x876>
 800ab9a:	1d3b      	adds	r3, r7, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	461a      	mov	r2, r3
 800aba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aba8:	4413      	add	r3, r2
 800abaa:	673b      	str	r3, [r7, #112]	; 0x70
 800abac:	463b      	mov	r3, r7
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	00da      	lsls	r2, r3, #3
 800abb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abb6:	4413      	add	r3, r2
 800abb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800abc8:	463b      	mov	r3, r7
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	895b      	ldrh	r3, [r3, #10]
 800abce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abd2:	463b      	mov	r3, r7
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6959      	ldr	r1, [r3, #20]
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abdc:	b29b      	uxth	r3, r3
 800abde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800abe2:	1d38      	adds	r0, r7, #4
 800abe4:	6800      	ldr	r0, [r0, #0]
 800abe6:	f000 fdc0 	bl	800b76a <USB_WritePMA>
 800abea:	e09f      	b.n	800ad2c <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abec:	463b      	mov	r3, r7
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d164      	bne.n	800acc0 <USB_EPStartXfer+0x96e>
 800abf6:	1d3b      	adds	r3, r7, #4
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800abfc:	1d3b      	adds	r3, r7, #4
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac0a:	4413      	add	r3, r2
 800ac0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac0e:	463b      	mov	r3, r7
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	00da      	lsls	r2, r3, #3
 800ac16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac18:	4413      	add	r3, r2
 800ac1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac1e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac24:	2b3e      	cmp	r3, #62	; 0x3e
 800ac26:	d91c      	bls.n	800ac62 <USB_EPStartXfer+0x910>
 800ac28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2c:	095b      	lsrs	r3, r3, #5
 800ac2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac36:	f003 031f 	and.w	r3, r3, #31
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d104      	bne.n	800ac48 <USB_EPStartXfer+0x8f6>
 800ac3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac42:	3b01      	subs	r3, #1
 800ac44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	029b      	lsls	r3, r3, #10
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac5e:	801a      	strh	r2, [r3, #0]
 800ac60:	e053      	b.n	800ad0a <USB_EPStartXfer+0x9b8>
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d112      	bne.n	800ac90 <USB_EPStartXfer+0x93e>
 800ac6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac78:	801a      	strh	r2, [r3, #0]
 800ac7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac8c:	801a      	strh	r2, [r3, #0]
 800ac8e:	e03c      	b.n	800ad0a <USB_EPStartXfer+0x9b8>
 800ac90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <USB_EPStartXfer+0x95e>
 800aca6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acaa:	3301      	adds	r3, #1
 800acac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	029b      	lsls	r3, r3, #10
 800acb8:	b29a      	uxth	r2, r3
 800acba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acbc:	801a      	strh	r2, [r3, #0]
 800acbe:	e024      	b.n	800ad0a <USB_EPStartXfer+0x9b8>
 800acc0:	463b      	mov	r3, r7
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d11f      	bne.n	800ad0a <USB_EPStartXfer+0x9b8>
 800acca:	1d3b      	adds	r3, r7, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800acd2:	1d3b      	adds	r3, r7, #4
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acda:	b29b      	uxth	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ace2:	4413      	add	r3, r2
 800ace4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ace8:	463b      	mov	r3, r7
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	00da      	lsls	r2, r3, #3
 800acf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acf4:	4413      	add	r3, r2
 800acf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	891b      	ldrh	r3, [r3, #8]
 800ad10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad14:	463b      	mov	r3, r7
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6959      	ldr	r1, [r3, #20]
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad24:	1d38      	adds	r0, r7, #4
 800ad26:	6800      	ldr	r0, [r0, #0]
 800ad28:	f000 fd1f 	bl	800b76a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad2c:	1d3b      	adds	r3, r7, #4
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	463b      	mov	r3, r7
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad46:	817b      	strh	r3, [r7, #10]
 800ad48:	897b      	ldrh	r3, [r7, #10]
 800ad4a:	f083 0310 	eor.w	r3, r3, #16
 800ad4e:	817b      	strh	r3, [r7, #10]
 800ad50:	897b      	ldrh	r3, [r7, #10]
 800ad52:	f083 0320 	eor.w	r3, r3, #32
 800ad56:	817b      	strh	r3, [r7, #10]
 800ad58:	1d3b      	adds	r3, r7, #4
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	463b      	mov	r3, r7
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	441a      	add	r2, r3
 800ad66:	897b      	ldrh	r3, [r7, #10]
 800ad68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	8013      	strh	r3, [r2, #0]
 800ad7c:	e3b5      	b.n	800b4ea <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ad7e:	463b      	mov	r3, r7
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	7b1b      	ldrb	r3, [r3, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f040 8090 	bne.w	800aeaa <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	699a      	ldr	r2, [r3, #24]
 800ad90:	463b      	mov	r3, r7
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d90e      	bls.n	800adb8 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800ad9a:	463b      	mov	r3, r7
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ada4:	463b      	mov	r3, r7
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	1ad2      	subs	r2, r2, r3
 800adb0:	463b      	mov	r3, r7
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	619a      	str	r2, [r3, #24]
 800adb6:	e008      	b.n	800adca <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800adb8:	463b      	mov	r3, r7
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800adc2:	463b      	mov	r3, r7
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2200      	movs	r2, #0
 800adc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800adca:	1d3b      	adds	r3, r7, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800add2:	1d3b      	adds	r3, r7, #4
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adda:	b29b      	uxth	r3, r3
 800addc:	461a      	mov	r2, r3
 800adde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ade2:	4413      	add	r3, r2
 800ade4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ade8:	463b      	mov	r3, r7
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	00da      	lsls	r2, r3, #3
 800adf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800adf4:	4413      	add	r3, r2
 800adf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800adfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae02:	2b3e      	cmp	r3, #62	; 0x3e
 800ae04:	d91d      	bls.n	800ae42 <USB_EPStartXfer+0xaf0>
 800ae06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0a:	095b      	lsrs	r3, r3, #5
 800ae0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae14:	f003 031f 	and.w	r3, r3, #31
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d104      	bne.n	800ae26 <USB_EPStartXfer+0xad4>
 800ae1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae20:	3b01      	subs	r3, #1
 800ae22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae3e:	801a      	strh	r2, [r3, #0]
 800ae40:	e325      	b.n	800b48e <USB_EPStartXfer+0x113c>
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d116      	bne.n	800ae78 <USB_EPStartXfer+0xb26>
 800ae4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae5c:	801a      	strh	r2, [r3, #0]
 800ae5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae74:	801a      	strh	r2, [r3, #0]
 800ae76:	e30a      	b.n	800b48e <USB_EPStartXfer+0x113c>
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7c:	085b      	lsrs	r3, r3, #1
 800ae7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <USB_EPStartXfer+0xb46>
 800ae8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae92:	3301      	adds	r3, #1
 800ae94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	029b      	lsls	r3, r3, #10
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aea6:	801a      	strh	r2, [r3, #0]
 800aea8:	e2f1      	b.n	800b48e <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aeaa:	463b      	mov	r3, r7
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	78db      	ldrb	r3, [r3, #3]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	f040 818f 	bne.w	800b1d4 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	785b      	ldrb	r3, [r3, #1]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d175      	bne.n	800afac <USB_EPStartXfer+0xc5a>
 800aec0:	1d3b      	adds	r3, r7, #4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aec8:	1d3b      	adds	r3, r7, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	461a      	mov	r2, r3
 800aed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aed8:	4413      	add	r3, r2
 800aeda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aede:	463b      	mov	r3, r7
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	00da      	lsls	r2, r3, #3
 800aee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aeea:	4413      	add	r3, r2
 800aeec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aef4:	463b      	mov	r3, r7
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	2b3e      	cmp	r3, #62	; 0x3e
 800aefc:	d91f      	bls.n	800af3e <USB_EPStartXfer+0xbec>
 800aefe:	463b      	mov	r3, r7
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	095b      	lsrs	r3, r3, #5
 800af06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af0a:	463b      	mov	r3, r7
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	f003 031f 	and.w	r3, r3, #31
 800af14:	2b00      	cmp	r3, #0
 800af16:	d104      	bne.n	800af22 <USB_EPStartXfer+0xbd0>
 800af18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1c:	3b01      	subs	r3, #1
 800af1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af26:	b29b      	uxth	r3, r3
 800af28:	029b      	lsls	r3, r3, #10
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af34:	b29a      	uxth	r2, r3
 800af36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af3a:	801a      	strh	r2, [r3, #0]
 800af3c:	e05c      	b.n	800aff8 <USB_EPStartXfer+0xca6>
 800af3e:	463b      	mov	r3, r7
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d116      	bne.n	800af76 <USB_EPStartXfer+0xc24>
 800af48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	b29b      	uxth	r3, r3
 800af50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af54:	b29a      	uxth	r2, r3
 800af56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af5a:	801a      	strh	r2, [r3, #0]
 800af5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29b      	uxth	r3, r3
 800af64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af72:	801a      	strh	r2, [r3, #0]
 800af74:	e040      	b.n	800aff8 <USB_EPStartXfer+0xca6>
 800af76:	463b      	mov	r3, r7
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	085b      	lsrs	r3, r3, #1
 800af7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af82:	463b      	mov	r3, r7
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <USB_EPStartXfer+0xc48>
 800af90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af94:	3301      	adds	r3, #1
 800af96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	029b      	lsls	r3, r3, #10
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afa8:	801a      	strh	r2, [r3, #0]
 800afaa:	e025      	b.n	800aff8 <USB_EPStartXfer+0xca6>
 800afac:	463b      	mov	r3, r7
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d120      	bne.n	800aff8 <USB_EPStartXfer+0xca6>
 800afb6:	1d3b      	adds	r3, r7, #4
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afbe:	1d3b      	adds	r3, r7, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	461a      	mov	r2, r3
 800afca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afce:	4413      	add	r3, r2
 800afd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afd4:	463b      	mov	r3, r7
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	00da      	lsls	r2, r3, #3
 800afdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afe0:	4413      	add	r3, r2
 800afe2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800afe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afea:	463b      	mov	r3, r7
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aff6:	801a      	strh	r2, [r3, #0]
 800aff8:	1d3b      	adds	r3, r7, #4
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b000:	463b      	mov	r3, r7
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d175      	bne.n	800b0f6 <USB_EPStartXfer+0xda4>
 800b00a:	1d3b      	adds	r3, r7, #4
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b012:	1d3b      	adds	r3, r7, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b022:	4413      	add	r3, r2
 800b024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b028:	463b      	mov	r3, r7
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	00da      	lsls	r2, r3, #3
 800b030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b034:	4413      	add	r3, r2
 800b036:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b03a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b03e:	463b      	mov	r3, r7
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	2b3e      	cmp	r3, #62	; 0x3e
 800b046:	d91f      	bls.n	800b088 <USB_EPStartXfer+0xd36>
 800b048:	463b      	mov	r3, r7
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	095b      	lsrs	r3, r3, #5
 800b050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b054:	463b      	mov	r3, r7
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d104      	bne.n	800b06c <USB_EPStartXfer+0xd1a>
 800b062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b066:	3b01      	subs	r3, #1
 800b068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b070:	b29b      	uxth	r3, r3
 800b072:	029b      	lsls	r3, r3, #10
 800b074:	b29b      	uxth	r3, r3
 800b076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b07e:	b29a      	uxth	r2, r3
 800b080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b084:	801a      	strh	r2, [r3, #0]
 800b086:	e058      	b.n	800b13a <USB_EPStartXfer+0xde8>
 800b088:	463b      	mov	r3, r7
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d116      	bne.n	800b0c0 <USB_EPStartXfer+0xd6e>
 800b092:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0a4:	801a      	strh	r2, [r3, #0]
 800b0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0bc:	801a      	strh	r2, [r3, #0]
 800b0be:	e03c      	b.n	800b13a <USB_EPStartXfer+0xde8>
 800b0c0:	463b      	mov	r3, r7
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	085b      	lsrs	r3, r3, #1
 800b0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0cc:	463b      	mov	r3, r7
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d004      	beq.n	800b0e4 <USB_EPStartXfer+0xd92>
 800b0da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0de:	3301      	adds	r3, #1
 800b0e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	029b      	lsls	r3, r3, #10
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0f2:	801a      	strh	r2, [r3, #0]
 800b0f4:	e021      	b.n	800b13a <USB_EPStartXfer+0xde8>
 800b0f6:	463b      	mov	r3, r7
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d11c      	bne.n	800b13a <USB_EPStartXfer+0xde8>
 800b100:	1d3b      	adds	r3, r7, #4
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b108:	b29b      	uxth	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b110:	4413      	add	r3, r2
 800b112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b116:	463b      	mov	r3, r7
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	00da      	lsls	r2, r3, #3
 800b11e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b122:	4413      	add	r3, r2
 800b124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b12c:	463b      	mov	r3, r7
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	b29a      	uxth	r2, r3
 800b134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b138:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b13a:	463b      	mov	r3, r7
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69db      	ldr	r3, [r3, #28]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 81a4 	beq.w	800b48e <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b146:	1d3b      	adds	r3, r7, #4
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	463b      	mov	r3, r7
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b15a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b15e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <USB_EPStartXfer+0xe20>
 800b166:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10d      	bne.n	800b18e <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b172:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f040 8187 	bne.w	800b48e <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b180:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f040 8180 	bne.w	800b48e <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b18e:	1d3b      	adds	r3, r7, #4
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	463b      	mov	r3, r7
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b1ac:	1d3b      	adds	r3, r7, #4
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	441a      	add	r2, r3
 800b1ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b1be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	8013      	strh	r3, [r2, #0]
 800b1d2:	e15c      	b.n	800b48e <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	78db      	ldrb	r3, [r3, #3]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	f040 8155 	bne.w	800b48a <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	699a      	ldr	r2, [r3, #24]
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d90e      	bls.n	800b20e <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 800b1f0:	463b      	mov	r3, r7
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	699a      	ldr	r2, [r3, #24]
 800b200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b204:	1ad2      	subs	r2, r2, r3
 800b206:	463b      	mov	r3, r7
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	619a      	str	r2, [r3, #24]
 800b20c:	e008      	b.n	800b220 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 800b20e:	463b      	mov	r3, r7
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b218:	463b      	mov	r3, r7
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2200      	movs	r2, #0
 800b21e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b220:	463b      	mov	r3, r7
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	785b      	ldrb	r3, [r3, #1]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d16f      	bne.n	800b30a <USB_EPStartXfer+0xfb8>
 800b22a:	1d3b      	adds	r3, r7, #4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b232:	1d3b      	adds	r3, r7, #4
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b242:	4413      	add	r3, r2
 800b244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b248:	463b      	mov	r3, r7
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	00da      	lsls	r2, r3, #3
 800b250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b254:	4413      	add	r3, r2
 800b256:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b25a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b262:	2b3e      	cmp	r3, #62	; 0x3e
 800b264:	d91d      	bls.n	800b2a2 <USB_EPStartXfer+0xf50>
 800b266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26a:	095b      	lsrs	r3, r3, #5
 800b26c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b274:	f003 031f 	and.w	r3, r3, #31
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d104      	bne.n	800b286 <USB_EPStartXfer+0xf34>
 800b27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b280:	3b01      	subs	r3, #1
 800b282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	029b      	lsls	r3, r3, #10
 800b28e:	b29b      	uxth	r3, r3
 800b290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b298:	b29a      	uxth	r2, r3
 800b29a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b29e:	801a      	strh	r2, [r3, #0]
 800b2a0:	e058      	b.n	800b354 <USB_EPStartXfer+0x1002>
 800b2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d116      	bne.n	800b2d8 <USB_EPStartXfer+0xf86>
 800b2aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2bc:	801a      	strh	r2, [r3, #0]
 800b2be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2d4:	801a      	strh	r2, [r3, #0]
 800b2d6:	e03d      	b.n	800b354 <USB_EPStartXfer+0x1002>
 800b2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2dc:	085b      	lsrs	r3, r3, #1
 800b2de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <USB_EPStartXfer+0xfa6>
 800b2ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	029b      	lsls	r3, r3, #10
 800b300:	b29a      	uxth	r2, r3
 800b302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b306:	801a      	strh	r2, [r3, #0]
 800b308:	e024      	b.n	800b354 <USB_EPStartXfer+0x1002>
 800b30a:	463b      	mov	r3, r7
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d11f      	bne.n	800b354 <USB_EPStartXfer+0x1002>
 800b314:	1d3b      	adds	r3, r7, #4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b31c:	1d3b      	adds	r3, r7, #4
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b324:	b29b      	uxth	r3, r3
 800b326:	461a      	mov	r2, r3
 800b328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b32c:	4413      	add	r3, r2
 800b32e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b332:	463b      	mov	r3, r7
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	00da      	lsls	r2, r3, #3
 800b33a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b33e:	4413      	add	r3, r2
 800b340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b352:	801a      	strh	r2, [r3, #0]
 800b354:	1d3b      	adds	r3, r7, #4
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b35c:	463b      	mov	r3, r7
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	785b      	ldrb	r3, [r3, #1]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d16f      	bne.n	800b446 <USB_EPStartXfer+0x10f4>
 800b366:	1d3b      	adds	r3, r7, #4
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b36e:	1d3b      	adds	r3, r7, #4
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b376:	b29b      	uxth	r3, r3
 800b378:	461a      	mov	r2, r3
 800b37a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b37e:	4413      	add	r3, r2
 800b380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b384:	463b      	mov	r3, r7
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	00da      	lsls	r2, r3, #3
 800b38c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b390:	4413      	add	r3, r2
 800b392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39e:	2b3e      	cmp	r3, #62	; 0x3e
 800b3a0:	d91d      	bls.n	800b3de <USB_EPStartXfer+0x108c>
 800b3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a6:	095b      	lsrs	r3, r3, #5
 800b3a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b0:	f003 031f 	and.w	r3, r3, #31
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d104      	bne.n	800b3c2 <USB_EPStartXfer+0x1070>
 800b3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	029b      	lsls	r3, r3, #10
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3da:	801a      	strh	r2, [r3, #0]
 800b3dc:	e057      	b.n	800b48e <USB_EPStartXfer+0x113c>
 800b3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d116      	bne.n	800b414 <USB_EPStartXfer+0x10c2>
 800b3e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	b29b      	uxth	r3, r3
 800b402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	e03c      	b.n	800b48e <USB_EPStartXfer+0x113c>
 800b414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b418:	085b      	lsrs	r3, r3, #1
 800b41a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d004      	beq.n	800b434 <USB_EPStartXfer+0x10e2>
 800b42a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b42e:	3301      	adds	r3, #1
 800b430:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b438:	b29b      	uxth	r3, r3
 800b43a:	029b      	lsls	r3, r3, #10
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b442:	801a      	strh	r2, [r3, #0]
 800b444:	e023      	b.n	800b48e <USB_EPStartXfer+0x113c>
 800b446:	463b      	mov	r3, r7
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	785b      	ldrb	r3, [r3, #1]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d11e      	bne.n	800b48e <USB_EPStartXfer+0x113c>
 800b450:	1d3b      	adds	r3, r7, #4
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b458:	b29b      	uxth	r3, r3
 800b45a:	461a      	mov	r2, r3
 800b45c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b460:	4413      	add	r3, r2
 800b462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b466:	463b      	mov	r3, r7
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	00da      	lsls	r2, r3, #3
 800b46e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b472:	4413      	add	r3, r2
 800b474:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b480:	b29a      	uxth	r2, r3
 800b482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b486:	801a      	strh	r2, [r3, #0]
 800b488:	e001      	b.n	800b48e <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e02e      	b.n	800b4ec <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b48e:	1d3b      	adds	r3, r7, #4
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	463b      	mov	r3, r7
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b4ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b4b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b4b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b4b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b4bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b4c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b4c4:	1d3b      	adds	r3, r7, #4
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	441a      	add	r2, r3
 800b4d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b4d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b085      	sub	sp, #20
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	785b      	ldrb	r3, [r3, #1]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d020      	beq.n	800b54a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b51a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b51e:	81bb      	strh	r3, [r7, #12]
 800b520:	89bb      	ldrh	r3, [r7, #12]
 800b522:	f083 0310 	eor.w	r3, r3, #16
 800b526:	81bb      	strh	r3, [r7, #12]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	441a      	add	r2, r3
 800b532:	89bb      	ldrh	r3, [r7, #12]
 800b534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b53c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b544:	b29b      	uxth	r3, r3
 800b546:	8013      	strh	r3, [r2, #0]
 800b548:	e01f      	b.n	800b58a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b55c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b560:	81fb      	strh	r3, [r7, #14]
 800b562:	89fb      	ldrh	r3, [r7, #14]
 800b564:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b568:	81fb      	strh	r3, [r7, #14]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	441a      	add	r2, r3
 800b574:	89fb      	ldrh	r3, [r7, #14]
 800b576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b57a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b57e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b586:	b29b      	uxth	r3, r3
 800b588:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b598:	b480      	push	{r7}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	7b1b      	ldrb	r3, [r3, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 809d 	bne.w	800b6e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d04c      	beq.n	800b64e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	823b      	strh	r3, [r7, #16]
 800b5c2:	8a3b      	ldrh	r3, [r7, #16]
 800b5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01b      	beq.n	800b604 <USB_EPClearStall+0x6c>
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e2:	81fb      	strh	r3, [r7, #14]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	441a      	add	r2, r3
 800b5ee:	89fb      	ldrh	r3, [r7, #14]
 800b5f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b600:	b29b      	uxth	r3, r3
 800b602:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	78db      	ldrb	r3, [r3, #3]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d06c      	beq.n	800b6e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b61e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b622:	81bb      	strh	r3, [r7, #12]
 800b624:	89bb      	ldrh	r3, [r7, #12]
 800b626:	f083 0320 	eor.w	r3, r3, #32
 800b62a:	81bb      	strh	r3, [r7, #12]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	441a      	add	r2, r3
 800b636:	89bb      	ldrh	r3, [r7, #12]
 800b638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b63c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b648:	b29b      	uxth	r3, r3
 800b64a:	8013      	strh	r3, [r2, #0]
 800b64c:	e04b      	b.n	800b6e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	4413      	add	r3, r2
 800b658:	881b      	ldrh	r3, [r3, #0]
 800b65a:	82fb      	strh	r3, [r7, #22]
 800b65c:	8afb      	ldrh	r3, [r7, #22]
 800b65e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d01b      	beq.n	800b69e <USB_EPClearStall+0x106>
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	b29b      	uxth	r3, r3
 800b674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b67c:	82bb      	strh	r3, [r7, #20]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	441a      	add	r2, r3
 800b688:	8abb      	ldrh	r3, [r7, #20]
 800b68a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b68e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	881b      	ldrh	r3, [r3, #0]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b4:	827b      	strh	r3, [r7, #18]
 800b6b6:	8a7b      	ldrh	r3, [r7, #18]
 800b6b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b6bc:	827b      	strh	r3, [r7, #18]
 800b6be:	8a7b      	ldrh	r3, [r7, #18]
 800b6c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b6c4:	827b      	strh	r3, [r7, #18]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	441a      	add	r2, r3
 800b6d0:	8a7b      	ldrh	r3, [r7, #18]
 800b6d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	371c      	adds	r7, #28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d103      	bne.n	800b70e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2280      	movs	r2, #128	; 0x80
 800b70a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b734:	b29a      	uxth	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b085      	sub	sp, #20
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b758:	b29b      	uxth	r3, r3
 800b75a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b75c:	68fb      	ldr	r3, [r7, #12]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b08d      	sub	sp, #52	; 0x34
 800b76e:	af00      	add	r7, sp, #0
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	60b9      	str	r1, [r7, #8]
 800b774:	4611      	mov	r1, r2
 800b776:	461a      	mov	r2, r3
 800b778:	460b      	mov	r3, r1
 800b77a:	80fb      	strh	r3, [r7, #6]
 800b77c:	4613      	mov	r3, r2
 800b77e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b780:	88bb      	ldrh	r3, [r7, #4]
 800b782:	3301      	adds	r3, #1
 800b784:	085b      	lsrs	r3, r3, #1
 800b786:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b790:	88fa      	ldrh	r2, [r7, #6]
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b79a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a0:	e01b      	b.n	800b7da <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	021b      	lsls	r3, r3, #8
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	3302      	adds	r3, #2
 800b7cc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1e0      	bne.n	800b7a2 <USB_WritePMA+0x38>
  }
}
 800b7e0:	bf00      	nop
 800b7e2:	bf00      	nop
 800b7e4:	3734      	adds	r7, #52	; 0x34
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b08b      	sub	sp, #44	; 0x2c
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	80fb      	strh	r3, [r7, #6]
 800b800:	4613      	mov	r3, r2
 800b802:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b804:	88bb      	ldrh	r3, [r7, #4]
 800b806:	085b      	lsrs	r3, r3, #1
 800b808:	b29b      	uxth	r3, r3
 800b80a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b814:	88fa      	ldrh	r2, [r7, #6]
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b81e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	627b      	str	r3, [r7, #36]	; 0x24
 800b824:	e018      	b.n	800b858 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	3302      	adds	r3, #2
 800b832:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	b2da      	uxtb	r2, r3
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	3301      	adds	r3, #1
 800b840:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	b2da      	uxtb	r2, r3
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	3301      	adds	r3, #1
 800b850:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	3b01      	subs	r3, #1
 800b856:	627b      	str	r3, [r7, #36]	; 0x24
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1e3      	bne.n	800b826 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b85e:	88bb      	ldrh	r3, [r7, #4]
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	b29b      	uxth	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d007      	beq.n	800b87a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	b29b      	uxth	r3, r3
 800b870:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	b2da      	uxtb	r2, r3
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	701a      	strb	r2, [r3, #0]
  }
}
 800b87a:	bf00      	nop
 800b87c:	372c      	adds	r7, #44	; 0x2c
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	460b      	mov	r3, r1
 800b890:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b892:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b896:	f005 ffab 	bl	80117f0 <USBD_static_malloc>
 800b89a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e066      	b.n	800b97c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	7c1b      	ldrb	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d119      	bne.n	800b8f2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	2181      	movs	r1, #129	; 0x81
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f005 fe37 	bl	801153a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	2101      	movs	r1, #1
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f005 fe2d 	bl	801153a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2210      	movs	r2, #16
 800b8ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b8f0:	e016      	b.n	800b920 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8f2:	2340      	movs	r3, #64	; 0x40
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	2181      	movs	r1, #129	; 0x81
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f005 fe1e 	bl	801153a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b904:	2340      	movs	r3, #64	; 0x40
 800b906:	2202      	movs	r2, #2
 800b908:	2101      	movs	r1, #1
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f005 fe15 	bl	801153a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2210      	movs	r2, #16
 800b91c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b920:	2308      	movs	r3, #8
 800b922:	2203      	movs	r2, #3
 800b924:	2182      	movs	r1, #130	; 0x82
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f005 fe07 	bl	801153a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7c1b      	ldrb	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b95c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b960:	2101      	movs	r1, #1
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f005 fed9 	bl	801171a <USBD_LL_PrepareReceive>
 800b968:	e007      	b.n	800b97a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b970:	2340      	movs	r3, #64	; 0x40
 800b972:	2101      	movs	r1, #1
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f005 fed0 	bl	801171a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b990:	2181      	movs	r1, #129	; 0x81
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f005 fdf7 	bl	8011586 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b99e:	2101      	movs	r1, #1
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f005 fdf0 	bl	8011586 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b9ae:	2182      	movs	r1, #130	; 0x82
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f005 fde8 	bl	8011586 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00e      	beq.n	800b9ee <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f005 ff13 	bl	801180c <USBD_static_free>
    pdev->pClassData = NULL;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e0af      	b.n	800bb80 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d03f      	beq.n	800baac <USBD_CDC_Setup+0xb4>
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	f040 809f 	bne.w	800bb70 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d02e      	beq.n	800ba98 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b25b      	sxtb	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	da16      	bge.n	800ba72 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ba50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	88d2      	ldrh	r2, [r2, #6]
 800ba56:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	88db      	ldrh	r3, [r3, #6]
 800ba5c:	2b07      	cmp	r3, #7
 800ba5e:	bf28      	it	cs
 800ba60:	2307      	movcs	r3, #7
 800ba62:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	89fa      	ldrh	r2, [r7, #14]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f001 fa9f 	bl	800cfae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ba70:	e085      	b.n	800bb7e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	785a      	ldrb	r2, [r3, #1]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	88db      	ldrh	r3, [r3, #6]
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ba88:	6939      	ldr	r1, [r7, #16]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	88db      	ldrh	r3, [r3, #6]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 fab8 	bl	800d006 <USBD_CtlPrepareRx>
      break;
 800ba96:	e072      	b.n	800bb7e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	7850      	ldrb	r0, [r2, #1]
 800baa4:	2200      	movs	r2, #0
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	4798      	blx	r3
      break;
 800baaa:	e068      	b.n	800bb7e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	785b      	ldrb	r3, [r3, #1]
 800bab0:	2b0b      	cmp	r3, #11
 800bab2:	d852      	bhi.n	800bb5a <USBD_CDC_Setup+0x162>
 800bab4:	a201      	add	r2, pc, #4	; (adr r2, 800babc <USBD_CDC_Setup+0xc4>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800baed 	.word	0x0800baed
 800bac0:	0800bb69 	.word	0x0800bb69
 800bac4:	0800bb5b 	.word	0x0800bb5b
 800bac8:	0800bb5b 	.word	0x0800bb5b
 800bacc:	0800bb5b 	.word	0x0800bb5b
 800bad0:	0800bb5b 	.word	0x0800bb5b
 800bad4:	0800bb5b 	.word	0x0800bb5b
 800bad8:	0800bb5b 	.word	0x0800bb5b
 800badc:	0800bb5b 	.word	0x0800bb5b
 800bae0:	0800bb5b 	.word	0x0800bb5b
 800bae4:	0800bb17 	.word	0x0800bb17
 800bae8:	0800bb41 	.word	0x0800bb41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d107      	bne.n	800bb08 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800baf8:	f107 030a 	add.w	r3, r7, #10
 800bafc:	2202      	movs	r2, #2
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 fa54 	bl	800cfae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb06:	e032      	b.n	800bb6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 f9de 	bl	800cecc <USBD_CtlError>
            ret = USBD_FAIL;
 800bb10:	2303      	movs	r3, #3
 800bb12:	75fb      	strb	r3, [r7, #23]
          break;
 800bb14:	e02b      	b.n	800bb6e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d107      	bne.n	800bb32 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb22:	f107 030d 	add.w	r3, r7, #13
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 fa3f 	bl	800cfae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb30:	e01d      	b.n	800bb6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 f9c9 	bl	800cecc <USBD_CtlError>
            ret = USBD_FAIL;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb3e:	e016      	b.n	800bb6e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d00f      	beq.n	800bb6c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f001 f9bc 	bl	800cecc <USBD_CtlError>
            ret = USBD_FAIL;
 800bb54:	2303      	movs	r3, #3
 800bb56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb58:	e008      	b.n	800bb6c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f001 f9b5 	bl	800cecc <USBD_CtlError>
          ret = USBD_FAIL;
 800bb62:	2303      	movs	r3, #3
 800bb64:	75fb      	strb	r3, [r7, #23]
          break;
 800bb66:	e002      	b.n	800bb6e <USBD_CDC_Setup+0x176>
          break;
 800bb68:	bf00      	nop
 800bb6a:	e008      	b.n	800bb7e <USBD_CDC_Setup+0x186>
          break;
 800bb6c:	bf00      	nop
      }
      break;
 800bb6e:	e006      	b.n	800bb7e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f001 f9aa 	bl	800cecc <USBD_CtlError>
      ret = USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e04f      	b.n	800bc4a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bbb2:	78fa      	ldrb	r2, [r7, #3]
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	3318      	adds	r3, #24
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d029      	beq.n	800bc1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	3318      	adds	r3, #24
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	78f9      	ldrb	r1, [r7, #3]
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	440b      	add	r3, r1
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4403      	add	r3, r0
 800bbe8:	3338      	adds	r3, #56	; 0x38
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbf0:	fb03 f301 	mul.w	r3, r3, r1
 800bbf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d110      	bne.n	800bc1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bbfa:	78fa      	ldrb	r2, [r7, #3]
 800bbfc:	6879      	ldr	r1, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	3318      	adds	r3, #24
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc0e:	78f9      	ldrb	r1, [r7, #3]
 800bc10:	2300      	movs	r3, #0
 800bc12:	2200      	movs	r2, #0
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f005 fd5f 	bl	80116d8 <USBD_LL_Transmit>
 800bc1a:	e015      	b.n	800bc48 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e015      	b.n	800bca0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc74:	78fb      	ldrb	r3, [r7, #3]
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f005 fd6f 	bl	801175c <USBD_LL_GetRxDataSize>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e01b      	b.n	800bcfa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d015      	beq.n	800bcf8 <USBD_CDC_EP0_RxReady+0x50>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bcd2:	2bff      	cmp	r3, #255	; 0xff
 800bcd4:	d010      	beq.n	800bcf8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bce4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bcec:	b292      	uxth	r2, r2
 800bcee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	22ff      	movs	r2, #255	; 0xff
 800bcf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2243      	movs	r2, #67	; 0x43
 800bd10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bd12:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20000098 	.word	0x20000098

0800bd24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2243      	movs	r2, #67	; 0x43
 800bd30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bd32:	4b03      	ldr	r3, [pc, #12]	; (800bd40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	20000054 	.word	0x20000054

0800bd44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2243      	movs	r2, #67	; 0x43
 800bd50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bd52:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	200000dc 	.word	0x200000dc

0800bd64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	220a      	movs	r2, #10
 800bd70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd72:	4b03      	ldr	r3, [pc, #12]	; (800bd80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	20000010 	.word	0x20000010

0800bd84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e004      	b.n	800bda2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b087      	sub	sp, #28
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	60f8      	str	r0, [r7, #12]
 800bdb6:	60b9      	str	r1, [r7, #8]
 800bdb8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e008      	b.n	800bdde <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bdea:	b480      	push	{r7}
 800bdec:	b085      	sub	sp, #20
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdfa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800be02:	2303      	movs	r3, #3
 800be04:	e004      	b.n	800be10 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be36:	2303      	movs	r3, #3
 800be38:	e016      	b.n	800be68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	7c1b      	ldrb	r3, [r3, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d109      	bne.n	800be56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be4c:	2101      	movs	r1, #1
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f005 fc63 	bl	801171a <USBD_LL_PrepareReceive>
 800be54:	e007      	b.n	800be66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be5c:	2340      	movs	r3, #64	; 0x40
 800be5e:	2101      	movs	r1, #1
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f005 fc5a 	bl	801171a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	4613      	mov	r3, r2
 800be7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800be84:	2303      	movs	r3, #3
 800be86:	e01f      	b.n	800bec8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	79fa      	ldrb	r2, [r7, #7]
 800beba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f005 fabf 	bl	8011440 <USBD_LL_Init>
 800bec2:	4603      	mov	r3, r0
 800bec4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800beda:	2300      	movs	r3, #0
 800bedc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e016      	b.n	800bf16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00b      	beq.n	800bf14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	f107 020e 	add.w	r2, r7, #14
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f005 faec 	bl	8011504 <USBD_LL_Start>
 800bf2c:	4603      	mov	r3, r0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b083      	sub	sp, #12
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d009      	beq.n	800bf7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	78fa      	ldrb	r2, [r7, #3]
 800bf70:	4611      	mov	r1, r2
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
 800bf76:	4603      	mov	r3, r0
 800bf78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	78fa      	ldrb	r2, [r7, #3]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	4798      	blx	r3
  }

  return USBD_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 ff46 	bl	800ce58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bfe8:	f003 031f 	and.w	r3, r3, #31
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d01a      	beq.n	800c026 <USBD_LL_SetupStage+0x72>
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d822      	bhi.n	800c03a <USBD_LL_SetupStage+0x86>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <USBD_LL_SetupStage+0x4a>
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d00a      	beq.n	800c012 <USBD_LL_SetupStage+0x5e>
 800bffc:	e01d      	b.n	800c03a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f9ee 	bl	800c3e8 <USBD_StdDevReq>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
      break;
 800c010:	e020      	b.n	800c054 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fa52 	bl	800c4c4 <USBD_StdItfReq>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]
      break;
 800c024:	e016      	b.n	800c054 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fa91 	bl	800c556 <USBD_StdEPReq>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
      break;
 800c038:	e00c      	b.n	800c054 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c044:	b2db      	uxtb	r3, r3
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f005 fabb 	bl	80115c4 <USBD_LL_StallEP>
 800c04e:	4603      	mov	r3, r0
 800c050:	73fb      	strb	r3, [r7, #15]
      break;
 800c052:	bf00      	nop
  }

  return ret;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	460b      	mov	r3, r1
 800c068:	607a      	str	r2, [r7, #4]
 800c06a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c06c:	7afb      	ldrb	r3, [r7, #11]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d138      	bne.n	800c0e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c078:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c080:	2b03      	cmp	r3, #3
 800c082:	d14a      	bne.n	800c11a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d913      	bls.n	800c0b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	689a      	ldr	r2, [r3, #8]
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	1ad2      	subs	r2, r2, r3
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	68da      	ldr	r2, [r3, #12]
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	bf28      	it	cs
 800c0aa:	4613      	movcs	r3, r2
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	6879      	ldr	r1, [r7, #4]
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 ffc5 	bl	800d040 <USBD_CtlContinueRx>
 800c0b6:	e030      	b.n	800c11a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d10b      	bne.n	800c0dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d005      	beq.n	800c0dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 ffc0 	bl	800d062 <USBD_CtlSendStatus>
 800c0e2:	e01a      	b.n	800c11a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d114      	bne.n	800c11a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00e      	beq.n	800c11a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	7afa      	ldrb	r2, [r7, #11]
 800c106:	4611      	mov	r1, r2
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	4798      	blx	r3
 800c10c:	4603      	mov	r3, r0
 800c10e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c116:	7dfb      	ldrb	r3, [r7, #23]
 800c118:	e000      	b.n	800c11c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	460b      	mov	r3, r1
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c132:	7afb      	ldrb	r3, [r7, #11]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d16b      	bne.n	800c210 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3314      	adds	r3, #20
 800c13c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c144:	2b02      	cmp	r3, #2
 800c146:	d156      	bne.n	800c1f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	429a      	cmp	r2, r3
 800c152:	d914      	bls.n	800c17e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	1ad2      	subs	r2, r2, r3
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	461a      	mov	r2, r3
 800c168:	6879      	ldr	r1, [r7, #4]
 800c16a:	68f8      	ldr	r0, [r7, #12]
 800c16c:	f000 ff3a 	bl	800cfe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c170:	2300      	movs	r3, #0
 800c172:	2200      	movs	r2, #0
 800c174:	2100      	movs	r1, #0
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f005 facf 	bl	801171a <USBD_LL_PrepareReceive>
 800c17c:	e03b      	b.n	800c1f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	429a      	cmp	r2, r3
 800c188:	d11c      	bne.n	800c1c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c192:	429a      	cmp	r2, r3
 800c194:	d316      	bcc.n	800c1c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d20f      	bcs.n	800c1c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 ff1b 	bl	800cfe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f005 faac 	bl	801171a <USBD_LL_PrepareReceive>
 800c1c2:	e018      	b.n	800c1f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d10b      	bne.n	800c1e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d005      	beq.n	800c1e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1e8:	2180      	movs	r1, #128	; 0x80
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f005 f9ea 	bl	80115c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 ff49 	bl	800d088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d122      	bne.n	800c246 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff fe98 	bl	800bf36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c20e:	e01a      	b.n	800c246 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d114      	bne.n	800c246 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c222:	695b      	ldr	r3, [r3, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	7afa      	ldrb	r2, [r7, #11]
 800c232:	4611      	mov	r1, r2
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	4798      	blx	r3
 800c238:	4603      	mov	r3, r0
 800c23a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	e000      	b.n	800c248 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c280:	2303      	movs	r3, #3
 800c282:	e02f      	b.n	800c2e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00f      	beq.n	800c2ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d009      	beq.n	800c2ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	6852      	ldr	r2, [r2, #4]
 800c2a6:	b2d2      	uxtb	r2, r2
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2ae:	2340      	movs	r3, #64	; 0x40
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f005 f940 	bl	801153a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2240      	movs	r2, #64	; 0x40
 800c2c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2ca:	2340      	movs	r3, #64	; 0x40
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2180      	movs	r1, #128	; 0x80
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f005 f932 	bl	801153a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2240      	movs	r2, #64	; 0x40
 800c2e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	78fa      	ldrb	r2, [r7, #3]
 800c2fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2204      	movs	r2, #4
 800c326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b04      	cmp	r3, #4
 800c34a:	d106      	bne.n	800c35a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e012      	b.n	800c3a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b03      	cmp	r3, #3
 800c388:	d10b      	bne.n	800c3a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3ca:	8a3b      	ldrh	r3, [r7, #16]
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	b21a      	sxth	r2, r3
 800c3d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	b21b      	sxth	r3, r3
 800c3d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3da:	89fb      	ldrh	r3, [r7, #14]
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	371c      	adds	r7, #28
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c3fe:	2b40      	cmp	r3, #64	; 0x40
 800c400:	d005      	beq.n	800c40e <USBD_StdDevReq+0x26>
 800c402:	2b40      	cmp	r3, #64	; 0x40
 800c404:	d853      	bhi.n	800c4ae <USBD_StdDevReq+0xc6>
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00b      	beq.n	800c422 <USBD_StdDevReq+0x3a>
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	d14f      	bne.n	800c4ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	4798      	blx	r3
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
      break;
 800c420:	e04a      	b.n	800c4b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	785b      	ldrb	r3, [r3, #1]
 800c426:	2b09      	cmp	r3, #9
 800c428:	d83b      	bhi.n	800c4a2 <USBD_StdDevReq+0xba>
 800c42a:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <USBD_StdDevReq+0x48>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c485 	.word	0x0800c485
 800c434:	0800c499 	.word	0x0800c499
 800c438:	0800c4a3 	.word	0x0800c4a3
 800c43c:	0800c48f 	.word	0x0800c48f
 800c440:	0800c4a3 	.word	0x0800c4a3
 800c444:	0800c463 	.word	0x0800c463
 800c448:	0800c459 	.word	0x0800c459
 800c44c:	0800c4a3 	.word	0x0800c4a3
 800c450:	0800c47b 	.word	0x0800c47b
 800c454:	0800c46d 	.word	0x0800c46d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f9de 	bl	800c81c <USBD_GetDescriptor>
          break;
 800c460:	e024      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fb6d 	bl	800cb44 <USBD_SetAddress>
          break;
 800c46a:	e01f      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fbac 	bl	800cbcc <USBD_SetConfig>
 800c474:	4603      	mov	r3, r0
 800c476:	73fb      	strb	r3, [r7, #15]
          break;
 800c478:	e018      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fc4b 	bl	800cd18 <USBD_GetConfig>
          break;
 800c482:	e013      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fc7c 	bl	800cd84 <USBD_GetStatus>
          break;
 800c48c:	e00e      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fcab 	bl	800cdec <USBD_SetFeature>
          break;
 800c496:	e009      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fcba 	bl	800ce14 <USBD_ClrFeature>
          break;
 800c4a0:	e004      	b.n	800c4ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fd11 	bl	800cecc <USBD_CtlError>
          break;
 800c4aa:	bf00      	nop
      }
      break;
 800c4ac:	e004      	b.n	800c4b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fd0b 	bl	800cecc <USBD_CtlError>
      break;
 800c4b6:	bf00      	nop
  }

  return ret;
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop

0800c4c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4da:	2b40      	cmp	r3, #64	; 0x40
 800c4dc:	d005      	beq.n	800c4ea <USBD_StdItfReq+0x26>
 800c4de:	2b40      	cmp	r3, #64	; 0x40
 800c4e0:	d82f      	bhi.n	800c542 <USBD_StdItfReq+0x7e>
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <USBD_StdItfReq+0x26>
 800c4e6:	2b20      	cmp	r3, #32
 800c4e8:	d12b      	bne.n	800c542 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d81d      	bhi.n	800c534 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	889b      	ldrh	r3, [r3, #4]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d813      	bhi.n	800c52a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	4798      	blx	r3
 800c510:	4603      	mov	r3, r0
 800c512:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	88db      	ldrh	r3, [r3, #6]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d110      	bne.n	800c53e <USBD_StdItfReq+0x7a>
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10d      	bne.n	800c53e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fd9d 	bl	800d062 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c528:	e009      	b.n	800c53e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fccd 	bl	800cecc <USBD_CtlError>
          break;
 800c532:	e004      	b.n	800c53e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fcc8 	bl	800cecc <USBD_CtlError>
          break;
 800c53c:	e000      	b.n	800c540 <USBD_StdItfReq+0x7c>
          break;
 800c53e:	bf00      	nop
      }
      break;
 800c540:	e004      	b.n	800c54c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fcc1 	bl	800cecc <USBD_CtlError>
      break;
 800c54a:	bf00      	nop
  }

  return ret;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	889b      	ldrh	r3, [r3, #4]
 800c568:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c572:	2b40      	cmp	r3, #64	; 0x40
 800c574:	d007      	beq.n	800c586 <USBD_StdEPReq+0x30>
 800c576:	2b40      	cmp	r3, #64	; 0x40
 800c578:	f200 8145 	bhi.w	800c806 <USBD_StdEPReq+0x2b0>
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00c      	beq.n	800c59a <USBD_StdEPReq+0x44>
 800c580:	2b20      	cmp	r3, #32
 800c582:	f040 8140 	bne.w	800c806 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	4798      	blx	r3
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
      break;
 800c598:	e13a      	b.n	800c810 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	785b      	ldrb	r3, [r3, #1]
 800c59e:	2b03      	cmp	r3, #3
 800c5a0:	d007      	beq.n	800c5b2 <USBD_StdEPReq+0x5c>
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	f300 8129 	bgt.w	800c7fa <USBD_StdEPReq+0x2a4>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d07f      	beq.n	800c6ac <USBD_StdEPReq+0x156>
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d03c      	beq.n	800c62a <USBD_StdEPReq+0xd4>
 800c5b0:	e123      	b.n	800c7fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d002      	beq.n	800c5c4 <USBD_StdEPReq+0x6e>
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d016      	beq.n	800c5f0 <USBD_StdEPReq+0x9a>
 800c5c2:	e02c      	b.n	800c61e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00d      	beq.n	800c5e6 <USBD_StdEPReq+0x90>
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
 800c5cc:	2b80      	cmp	r3, #128	; 0x80
 800c5ce:	d00a      	beq.n	800c5e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5d0:	7bbb      	ldrb	r3, [r7, #14]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f004 fff5 	bl	80115c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5da:	2180      	movs	r1, #128	; 0x80
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f004 fff1 	bl	80115c4 <USBD_LL_StallEP>
 800c5e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5e4:	e020      	b.n	800c628 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fc6f 	bl	800cecc <USBD_CtlError>
              break;
 800c5ee:	e01b      	b.n	800c628 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	885b      	ldrh	r3, [r3, #2]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10e      	bne.n	800c616 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <USBD_StdEPReq+0xc0>
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	2b80      	cmp	r3, #128	; 0x80
 800c602:	d008      	beq.n	800c616 <USBD_StdEPReq+0xc0>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	88db      	ldrh	r3, [r3, #6]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d104      	bne.n	800c616 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c60c:	7bbb      	ldrb	r3, [r7, #14]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f004 ffd7 	bl	80115c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fd23 	bl	800d062 <USBD_CtlSendStatus>

              break;
 800c61c:	e004      	b.n	800c628 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fc53 	bl	800cecc <USBD_CtlError>
              break;
 800c626:	bf00      	nop
          }
          break;
 800c628:	e0ec      	b.n	800c804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b02      	cmp	r3, #2
 800c634:	d002      	beq.n	800c63c <USBD_StdEPReq+0xe6>
 800c636:	2b03      	cmp	r3, #3
 800c638:	d016      	beq.n	800c668 <USBD_StdEPReq+0x112>
 800c63a:	e030      	b.n	800c69e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00d      	beq.n	800c65e <USBD_StdEPReq+0x108>
 800c642:	7bbb      	ldrb	r3, [r7, #14]
 800c644:	2b80      	cmp	r3, #128	; 0x80
 800c646:	d00a      	beq.n	800c65e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f004 ffb9 	bl	80115c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c652:	2180      	movs	r1, #128	; 0x80
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f004 ffb5 	bl	80115c4 <USBD_LL_StallEP>
 800c65a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c65c:	e025      	b.n	800c6aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fc33 	bl	800cecc <USBD_CtlError>
              break;
 800c666:	e020      	b.n	800c6aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	885b      	ldrh	r3, [r3, #2]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d11b      	bne.n	800c6a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c676:	2b00      	cmp	r3, #0
 800c678:	d004      	beq.n	800c684 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f004 ffbf 	bl	8011602 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fcec 	bl	800d062 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	4798      	blx	r3
 800c698:	4603      	mov	r3, r0
 800c69a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c69c:	e004      	b.n	800c6a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 fc13 	bl	800cecc <USBD_CtlError>
              break;
 800c6a6:	e000      	b.n	800c6aa <USBD_StdEPReq+0x154>
              break;
 800c6a8:	bf00      	nop
          }
          break;
 800c6aa:	e0ab      	b.n	800c804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d002      	beq.n	800c6be <USBD_StdEPReq+0x168>
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d032      	beq.n	800c722 <USBD_StdEPReq+0x1cc>
 800c6bc:	e097      	b.n	800c7ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d007      	beq.n	800c6d4 <USBD_StdEPReq+0x17e>
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	2b80      	cmp	r3, #128	; 0x80
 800c6c8:	d004      	beq.n	800c6d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fbfd 	bl	800cecc <USBD_CtlError>
                break;
 800c6d2:	e091      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	da0b      	bge.n	800c6f4 <USBD_StdEPReq+0x19e>
 800c6dc:	7bbb      	ldrb	r3, [r7, #14]
 800c6de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	3310      	adds	r3, #16
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	e00b      	b.n	800c70c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
 800c6f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4413      	add	r3, r2
 800c70a:	3304      	adds	r3, #4
 800c70c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2202      	movs	r2, #2
 800c718:	4619      	mov	r1, r3
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fc47 	bl	800cfae <USBD_CtlSendData>
              break;
 800c720:	e06a      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c726:	2b00      	cmp	r3, #0
 800c728:	da11      	bge.n	800c74e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	f003 020f 	and.w	r2, r3, #15
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	3324      	adds	r3, #36	; 0x24
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d117      	bne.n	800c774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fbc0 	bl	800cecc <USBD_CtlError>
                  break;
 800c74c:	e054      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	f003 020f 	and.w	r2, r3, #15
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	4613      	mov	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	440b      	add	r3, r1
 800c760:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d104      	bne.n	800c774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 fbad 	bl	800cecc <USBD_CtlError>
                  break;
 800c772:	e041      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da0b      	bge.n	800c794 <USBD_StdEPReq+0x23e>
 800c77c:	7bbb      	ldrb	r3, [r7, #14]
 800c77e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c782:	4613      	mov	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	3310      	adds	r3, #16
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	4413      	add	r3, r2
 800c790:	3304      	adds	r3, #4
 800c792:	e00b      	b.n	800c7ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c79a:	4613      	mov	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	3304      	adds	r3, #4
 800c7ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <USBD_StdEPReq+0x264>
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b80      	cmp	r3, #128	; 0x80
 800c7b8:	d103      	bne.n	800c7c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	e00e      	b.n	800c7e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f004 ff3a 	bl	8011640 <USBD_LL_IsStallEP>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	e002      	b.n	800c7e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fbe1 	bl	800cfae <USBD_CtlSendData>
              break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fb6b 	bl	800cecc <USBD_CtlError>
              break;
 800c7f6:	bf00      	nop
          }
          break;
 800c7f8:	e004      	b.n	800c804 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fb65 	bl	800cecc <USBD_CtlError>
          break;
 800c802:	bf00      	nop
      }
      break;
 800c804:	e004      	b.n	800c810 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fb5f 	bl	800cecc <USBD_CtlError>
      break;
 800c80e:	bf00      	nop
  }

  return ret;
 800c810:	7bfb      	ldrb	r3, [r7, #15]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	0a1b      	lsrs	r3, r3, #8
 800c838:	b29b      	uxth	r3, r3
 800c83a:	3b01      	subs	r3, #1
 800c83c:	2b0e      	cmp	r3, #14
 800c83e:	f200 8152 	bhi.w	800cae6 <USBD_GetDescriptor+0x2ca>
 800c842:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <USBD_GetDescriptor+0x2c>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c8b9 	.word	0x0800c8b9
 800c84c:	0800c8d1 	.word	0x0800c8d1
 800c850:	0800c911 	.word	0x0800c911
 800c854:	0800cae7 	.word	0x0800cae7
 800c858:	0800cae7 	.word	0x0800cae7
 800c85c:	0800ca87 	.word	0x0800ca87
 800c860:	0800cab3 	.word	0x0800cab3
 800c864:	0800cae7 	.word	0x0800cae7
 800c868:	0800cae7 	.word	0x0800cae7
 800c86c:	0800cae7 	.word	0x0800cae7
 800c870:	0800cae7 	.word	0x0800cae7
 800c874:	0800cae7 	.word	0x0800cae7
 800c878:	0800cae7 	.word	0x0800cae7
 800c87c:	0800cae7 	.word	0x0800cae7
 800c880:	0800c885 	.word	0x0800c885
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	7c12      	ldrb	r2, [r2, #16]
 800c89c:	f107 0108 	add.w	r1, r7, #8
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8a6:	e126      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fb0e 	bl	800cecc <USBD_CtlError>
        err++;
 800c8b0:	7afb      	ldrb	r3, [r7, #11]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	72fb      	strb	r3, [r7, #11]
      break;
 800c8b6:	e11e      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	7c12      	ldrb	r2, [r2, #16]
 800c8c4:	f107 0108 	add.w	r1, r7, #8
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4798      	blx	r3
 800c8cc:	60f8      	str	r0, [r7, #12]
      break;
 800c8ce:	e112      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	7c1b      	ldrb	r3, [r3, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10d      	bne.n	800c8f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e0:	f107 0208 	add.w	r2, r7, #8
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c8f2:	e100      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fc:	f107 0208 	add.w	r2, r7, #8
 800c900:	4610      	mov	r0, r2
 800c902:	4798      	blx	r3
 800c904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3301      	adds	r3, #1
 800c90a:	2202      	movs	r2, #2
 800c90c:	701a      	strb	r2, [r3, #0]
      break;
 800c90e:	e0f2      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	885b      	ldrh	r3, [r3, #2]
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b05      	cmp	r3, #5
 800c918:	f200 80ac 	bhi.w	800ca74 <USBD_GetDescriptor+0x258>
 800c91c:	a201      	add	r2, pc, #4	; (adr r2, 800c924 <USBD_GetDescriptor+0x108>)
 800c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c922:	bf00      	nop
 800c924:	0800c93d 	.word	0x0800c93d
 800c928:	0800c971 	.word	0x0800c971
 800c92c:	0800c9a5 	.word	0x0800c9a5
 800c930:	0800c9d9 	.word	0x0800c9d9
 800c934:	0800ca0d 	.word	0x0800ca0d
 800c938:	0800ca41 	.word	0x0800ca41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00b      	beq.n	800c960 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	7c12      	ldrb	r2, [r2, #16]
 800c954:	f107 0108 	add.w	r1, r7, #8
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
 800c95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c95e:	e091      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fab2 	bl	800cecc <USBD_CtlError>
            err++;
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	3301      	adds	r3, #1
 800c96c:	72fb      	strb	r3, [r7, #11]
          break;
 800c96e:	e089      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	7c12      	ldrb	r2, [r2, #16]
 800c988:	f107 0108 	add.w	r1, r7, #8
 800c98c:	4610      	mov	r0, r2
 800c98e:	4798      	blx	r3
 800c990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c992:	e077      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fa98 	bl	800cecc <USBD_CtlError>
            err++;
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c9a2:	e06f      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00b      	beq.n	800c9c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	7c12      	ldrb	r2, [r2, #16]
 800c9bc:	f107 0108 	add.w	r1, r7, #8
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	4798      	blx	r3
 800c9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9c6:	e05d      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa7e 	bl	800cecc <USBD_CtlError>
            err++;
 800c9d0:	7afb      	ldrb	r3, [r7, #11]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c9d6:	e055      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00b      	beq.n	800c9fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7c12      	ldrb	r2, [r2, #16]
 800c9f0:	f107 0108 	add.w	r1, r7, #8
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	4798      	blx	r3
 800c9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9fa:	e043      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fa64 	bl	800cecc <USBD_CtlError>
            err++;
 800ca04:	7afb      	ldrb	r3, [r7, #11]
 800ca06:	3301      	adds	r3, #1
 800ca08:	72fb      	strb	r3, [r7, #11]
          break;
 800ca0a:	e03b      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00b      	beq.n	800ca30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	7c12      	ldrb	r2, [r2, #16]
 800ca24:	f107 0108 	add.w	r1, r7, #8
 800ca28:	4610      	mov	r0, r2
 800ca2a:	4798      	blx	r3
 800ca2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca2e:	e029      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fa4a 	bl	800cecc <USBD_CtlError>
            err++;
 800ca38:	7afb      	ldrb	r3, [r7, #11]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca3e:	e021      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00b      	beq.n	800ca64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	7c12      	ldrb	r2, [r2, #16]
 800ca58:	f107 0108 	add.w	r1, r7, #8
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	4798      	blx	r3
 800ca60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca62:	e00f      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fa30 	bl	800cecc <USBD_CtlError>
            err++;
 800ca6c:	7afb      	ldrb	r3, [r7, #11]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	72fb      	strb	r3, [r7, #11]
          break;
 800ca72:	e007      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fa28 	bl	800cecc <USBD_CtlError>
          err++;
 800ca7c:	7afb      	ldrb	r3, [r7, #11]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ca82:	bf00      	nop
      }
      break;
 800ca84:	e037      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7c1b      	ldrb	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d109      	bne.n	800caa2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca96:	f107 0208 	add.w	r2, r7, #8
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4798      	blx	r3
 800ca9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800caa0:	e029      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fa11 	bl	800cecc <USBD_CtlError>
        err++;
 800caaa:	7afb      	ldrb	r3, [r7, #11]
 800caac:	3301      	adds	r3, #1
 800caae:	72fb      	strb	r3, [r7, #11]
      break;
 800cab0:	e021      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7c1b      	ldrb	r3, [r3, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10d      	bne.n	800cad6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac2:	f107 0208 	add.w	r2, r7, #8
 800cac6:	4610      	mov	r0, r2
 800cac8:	4798      	blx	r3
 800caca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	2207      	movs	r2, #7
 800cad2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cad4:	e00f      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f9f7 	bl	800cecc <USBD_CtlError>
        err++;
 800cade:	7afb      	ldrb	r3, [r7, #11]
 800cae0:	3301      	adds	r3, #1
 800cae2:	72fb      	strb	r3, [r7, #11]
      break;
 800cae4:	e007      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f9ef 	bl	800cecc <USBD_CtlError>
      err++;
 800caee:	7afb      	ldrb	r3, [r7, #11]
 800caf0:	3301      	adds	r3, #1
 800caf2:	72fb      	strb	r3, [r7, #11]
      break;
 800caf4:	bf00      	nop
  }

  if (err != 0U)
 800caf6:	7afb      	ldrb	r3, [r7, #11]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d11e      	bne.n	800cb3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	88db      	ldrh	r3, [r3, #6]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d016      	beq.n	800cb32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cb04:	893b      	ldrh	r3, [r7, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00e      	beq.n	800cb28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	88da      	ldrh	r2, [r3, #6]
 800cb0e:	893b      	ldrh	r3, [r7, #8]
 800cb10:	4293      	cmp	r3, r2
 800cb12:	bf28      	it	cs
 800cb14:	4613      	movcs	r3, r2
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb1a:	893b      	ldrh	r3, [r7, #8]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	68f9      	ldr	r1, [r7, #12]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fa44 	bl	800cfae <USBD_CtlSendData>
 800cb26:	e009      	b.n	800cb3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f9ce 	bl	800cecc <USBD_CtlError>
 800cb30:	e004      	b.n	800cb3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fa95 	bl	800d062 <USBD_CtlSendStatus>
 800cb38:	e000      	b.n	800cb3c <USBD_GetDescriptor+0x320>
    return;
 800cb3a:	bf00      	nop
  }
}
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop

0800cb44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	889b      	ldrh	r3, [r3, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d131      	bne.n	800cbba <USBD_SetAddress+0x76>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	88db      	ldrh	r3, [r3, #6]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d12d      	bne.n	800cbba <USBD_SetAddress+0x76>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	885b      	ldrh	r3, [r3, #2]
 800cb62:	2b7f      	cmp	r3, #127	; 0x7f
 800cb64:	d829      	bhi.n	800cbba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	885b      	ldrh	r3, [r3, #2]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d104      	bne.n	800cb88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f9a3 	bl	800cecc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb86:	e01d      	b.n	800cbc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7bfa      	ldrb	r2, [r7, #15]
 800cb8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f004 fd80 	bl	801169a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fa61 	bl	800d062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbae:	e009      	b.n	800cbc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbb8:	e004      	b.n	800cbc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f985 	bl	800cecc <USBD_CtlError>
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	bf00      	nop
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	885b      	ldrh	r3, [r3, #2]
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	4b4c      	ldr	r3, [pc, #304]	; (800cd14 <USBD_SetConfig+0x148>)
 800cbe2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cbe4:	4b4b      	ldr	r3, [pc, #300]	; (800cd14 <USBD_SetConfig+0x148>)
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d905      	bls.n	800cbf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f96c 	bl	800cecc <USBD_CtlError>
    return USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e088      	b.n	800cd0a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d002      	beq.n	800cc0a <USBD_SetConfig+0x3e>
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d025      	beq.n	800cc54 <USBD_SetConfig+0x88>
 800cc08:	e071      	b.n	800ccee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc0a:	4b42      	ldr	r3, [pc, #264]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01c      	beq.n	800cc4c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cc12:	4b40      	ldr	r3, [pc, #256]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc1c:	4b3d      	ldr	r3, [pc, #244]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff f992 	bl	800bf4c <USBD_SetClassConfig>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d004      	beq.n	800cc3c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f949 	bl	800cecc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc3a:	e065      	b.n	800cd08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 fa10 	bl	800d062 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2203      	movs	r2, #3
 800cc46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc4a:	e05d      	b.n	800cd08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fa08 	bl	800d062 <USBD_CtlSendStatus>
      break;
 800cc52:	e059      	b.n	800cd08 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc54:	4b2f      	ldr	r3, [pc, #188]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d112      	bne.n	800cc82 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2202      	movs	r2, #2
 800cc60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cc64:	4b2b      	ldr	r3, [pc, #172]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc6e:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff f985 	bl	800bf84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f9f1 	bl	800d062 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc80:	e042      	b.n	800cd08 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cc82:	4b24      	ldr	r3, [pc, #144]	; (800cd14 <USBD_SetConfig+0x148>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d02a      	beq.n	800cce6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff f973 	bl	800bf84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc9e:	4b1d      	ldr	r3, [pc, #116]	; (800cd14 <USBD_SetConfig+0x148>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cca8:	4b1a      	ldr	r3, [pc, #104]	; (800cd14 <USBD_SetConfig+0x148>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7ff f94c 	bl	800bf4c <USBD_SetClassConfig>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00f      	beq.n	800ccde <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f903 	bl	800cecc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff f958 	bl	800bf84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ccdc:	e014      	b.n	800cd08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f9bf 	bl	800d062 <USBD_CtlSendStatus>
      break;
 800cce4:	e010      	b.n	800cd08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f9bb 	bl	800d062 <USBD_CtlSendStatus>
      break;
 800ccec:	e00c      	b.n	800cd08 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 f8eb 	bl	800cecc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccf6:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <USBD_SetConfig+0x148>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff f941 	bl	800bf84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd02:	2303      	movs	r3, #3
 800cd04:	73fb      	strb	r3, [r7, #15]
      break;
 800cd06:	bf00      	nop
  }

  return ret;
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	200004cc 	.word	0x200004cc

0800cd18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	88db      	ldrh	r3, [r3, #6]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d004      	beq.n	800cd34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f8cd 	bl	800cecc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd32:	e023      	b.n	800cd7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	dc02      	bgt.n	800cd46 <USBD_GetConfig+0x2e>
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	dc03      	bgt.n	800cd4c <USBD_GetConfig+0x34>
 800cd44:	e015      	b.n	800cd72 <USBD_GetConfig+0x5a>
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d00b      	beq.n	800cd62 <USBD_GetConfig+0x4a>
 800cd4a:	e012      	b.n	800cd72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	3308      	adds	r3, #8
 800cd56:	2201      	movs	r2, #1
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f927 	bl	800cfae <USBD_CtlSendData>
        break;
 800cd60:	e00c      	b.n	800cd7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	3304      	adds	r3, #4
 800cd66:	2201      	movs	r2, #1
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f91f 	bl	800cfae <USBD_CtlSendData>
        break;
 800cd70:	e004      	b.n	800cd7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd72:	6839      	ldr	r1, [r7, #0]
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f8a9 	bl	800cecc <USBD_CtlError>
        break;
 800cd7a:	bf00      	nop
}
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	3b01      	subs	r3, #1
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d81e      	bhi.n	800cdda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	88db      	ldrh	r3, [r3, #6]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d004      	beq.n	800cdae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f890 	bl	800cecc <USBD_CtlError>
        break;
 800cdac:	e01a      	b.n	800cde4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d005      	beq.n	800cdca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	f043 0202 	orr.w	r2, r3, #2
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	330c      	adds	r3, #12
 800cdce:	2202      	movs	r2, #2
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f8eb 	bl	800cfae <USBD_CtlSendData>
      break;
 800cdd8:	e004      	b.n	800cde4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f875 	bl	800cecc <USBD_CtlError>
      break;
 800cde2:	bf00      	nop
  }
}
 800cde4:	bf00      	nop
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	885b      	ldrh	r3, [r3, #2]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d106      	bne.n	800ce0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f92b 	bl	800d062 <USBD_CtlSendStatus>
  }
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d80b      	bhi.n	800ce44 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	885b      	ldrh	r3, [r3, #2]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d10c      	bne.n	800ce4e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f910 	bl	800d062 <USBD_CtlSendStatus>
      }
      break;
 800ce42:	e004      	b.n	800ce4e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f840 	bl	800cecc <USBD_CtlError>
      break;
 800ce4c:	e000      	b.n	800ce50 <USBD_ClrFeature+0x3c>
      break;
 800ce4e:	bf00      	nop
  }
}
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	781a      	ldrb	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3301      	adds	r3, #1
 800ce72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	781a      	ldrb	r2, [r3, #0]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7ff fa92 	bl	800c3ac <SWAPBYTE>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	3301      	adds	r3, #1
 800ce94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7ff fa85 	bl	800c3ac <SWAPBYTE>
 800cea2:	4603      	mov	r3, r0
 800cea4:	461a      	mov	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	3301      	adds	r3, #1
 800ceae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff fa78 	bl	800c3ac <SWAPBYTE>
 800cebc:	4603      	mov	r3, r0
 800cebe:	461a      	mov	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	80da      	strh	r2, [r3, #6]
}
 800cec4:	bf00      	nop
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ced6:	2180      	movs	r1, #128	; 0x80
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f004 fb73 	bl	80115c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cede:	2100      	movs	r1, #0
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f004 fb6f 	bl	80115c4 <USBD_LL_StallEP>
}
 800cee6:	bf00      	nop
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b086      	sub	sp, #24
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d036      	beq.n	800cf72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf08:	6938      	ldr	r0, [r7, #16]
 800cf0a:	f000 f836 	bl	800cf7a <USBD_GetLen>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	3301      	adds	r3, #1
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	005b      	lsls	r3, r3, #1
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	4413      	add	r3, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	7812      	ldrb	r2, [r2, #0]
 800cf26:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf28:	7dfb      	ldrb	r3, [r7, #23]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	68ba      	ldr	r2, [r7, #8]
 800cf32:	4413      	add	r3, r2
 800cf34:	2203      	movs	r2, #3
 800cf36:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf3e:	e013      	b.n	800cf68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf40:	7dfb      	ldrb	r3, [r7, #23]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	4413      	add	r3, r2
 800cf46:	693a      	ldr	r2, [r7, #16]
 800cf48:	7812      	ldrb	r2, [r2, #0]
 800cf4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	613b      	str	r3, [r7, #16]
    idx++;
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	3301      	adds	r3, #1
 800cf56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	2200      	movs	r2, #0
 800cf60:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	3301      	adds	r3, #1
 800cf66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1e7      	bne.n	800cf40 <USBD_GetString+0x52>
 800cf70:	e000      	b.n	800cf74 <USBD_GetString+0x86>
    return;
 800cf72:	bf00      	nop
  }
}
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf7a:	b480      	push	{r7}
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf82:	2300      	movs	r3, #0
 800cf84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf8a:	e005      	b.n	800cf98 <USBD_GetLen+0x1e>
  {
    len++;
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	3301      	adds	r3, #1
 800cf96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1f5      	bne.n	800cf8c <USBD_GetLen+0x12>
  }

  return len;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3714      	adds	r7, #20
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b084      	sub	sp, #16
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2202      	movs	r2, #2
 800cfbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f004 fb7f 	bl	80116d8 <USBD_LL_Transmit>

  return USBD_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	2100      	movs	r1, #0
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f004 fb6e 	bl	80116d8 <USBD_LL_Transmit>

  return USBD_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2203      	movs	r2, #3
 800d016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	2100      	movs	r1, #0
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f004 fb72 	bl	801171a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	2100      	movs	r1, #0
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f004 fb61 	bl	801171a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2204      	movs	r2, #4
 800d06e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d072:	2300      	movs	r3, #0
 800d074:	2200      	movs	r2, #0
 800d076:	2100      	movs	r1, #0
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f004 fb2d 	bl	80116d8 <USBD_LL_Transmit>

  return USBD_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2205      	movs	r2, #5
 800d094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d098:	2300      	movs	r3, #0
 800d09a:	2200      	movs	r2, #0
 800d09c:	2100      	movs	r1, #0
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f004 fb3b 	bl	801171a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
	...

0800d0b0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <OTP_Read+0x48>)
 800d0bc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d0be:	e002      	b.n	800d0c6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3b08      	subs	r3, #8
 800d0c4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3307      	adds	r3, #7
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	79fa      	ldrb	r2, [r7, #7]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d003      	beq.n	800d0da <OTP_Read+0x2a>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	4a09      	ldr	r2, [pc, #36]	; (800d0fc <OTP_Read+0x4c>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d1f2      	bne.n	800d0c0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3307      	adds	r3, #7
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	79fa      	ldrb	r2, [r7, #7]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d001      	beq.n	800d0ea <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3714      	adds	r7, #20
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	1fff73f8 	.word	0x1fff73f8
 800d0fc:	1fff7000 	.word	0x1fff7000

0800d100 <_ZN8CALIPILE5setupEhP19__I2C_HandleTypeDefh>:
#include "CaliPile.h"
#include "math.h"

#define delay			HAL_Delay

void CALIPILE::setup(uint8_t i2c_address, I2C_HandleTypeDef *i2c_handle, uint8_t identifier) {
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	607a      	str	r2, [r7, #4]
 800d10a:	461a      	mov	r2, r3
 800d10c:	460b      	mov	r3, r1
 800d10e:	72fb      	strb	r3, [r7, #11]
 800d110:	4613      	mov	r3, r2
 800d112:	72bb      	strb	r3, [r7, #10]
	i2c_han = i2c_handle;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	605a      	str	r2, [r3, #4]
	i2c_addr = i2c_address << 1;
 800d11a:	7afb      	ldrb	r3, [r7, #11]
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	721a      	strb	r2, [r3, #8]
	descriptor = identifier;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	7aba      	ldrb	r2, [r7, #10]
 800d128:	701a      	strb	r2, [r3, #0]
}
 800d12a:	bf00      	nop
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <_ZN8CALIPILE4wakeEv>:

void CALIPILE::wake() {
 800d136:	b580      	push	{r7, lr}
 800d138:	b082      	sub	sp, #8
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
	writeByte(0x00, 0x04, 0x00);  // issue general call and reload command
 800d13e:	2300      	movs	r3, #0
 800d140:	2204      	movs	r2, #4
 800d142:	2100      	movs	r1, #0
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f9fd 	bl	800d544 <_ZN8CALIPILE9writeByteEhhh>
	delay(1);
 800d14a:	2001      	movs	r0, #1
 800d14c:	f7f3 fa18 	bl	8000580 <HAL_Delay>
}
 800d150:	bf00      	nop
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_ZN8CALIPILE10readEEPROMEv>:

void CALIPILE::readEEPROM()
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	ed2d 8b02 	vpush	{d8}
 800d15e:	b088      	sub	sp, #32
 800d160:	af02      	add	r7, sp, #8
 800d162:	6078      	str	r0, [r7, #4]

	uint8_t rawData[2] = {0, 0};
 800d164:	2300      	movs	r3, #0
 800d166:	81bb      	strh	r3, [r7, #12]
	/* Start of EEPROM operations, just have to do once *************************************************** */
	// Check EEPROM protocol number as a test of I2C communication
	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x80);// enable EEPROM read
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	7a19      	ldrb	r1, [r3, #8]
 800d16c:	2380      	movs	r3, #128	; 0x80
 800d16e:	221f      	movs	r2, #31
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f9e7 	bl	800d544 <_ZN8CALIPILE9writeByteEhhh>

	uint8_t c = readByte(i2c_addr, CALIPILE_EEPROM_PROTOCOL);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	7a1b      	ldrb	r3, [r3, #8]
 800d17a:	2220      	movs	r2, #32
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f9f7 	bl	800d572 <_ZN8CALIPILE8readByteEhh>
 800d184:	4603      	mov	r3, r0
 800d186:	73fb      	strb	r3, [r7, #15]
	//Serial.print("CaliPile EEPROM protocol number is "); //Serial.println(c);
	//Serial.println("CaliPile EEPROM protocol number should be 3");

	uint8_t d = readByte(i2c_addr, CALIPILE_SLAVE_ADDRESS);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7a1b      	ldrb	r3, [r3, #8]
 800d18c:	223f      	movs	r2, #63	; 0x3f
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f9ee 	bl	800d572 <_ZN8CALIPILE8readByteEhh>
 800d196:	4603      	mov	r3, r0
 800d198:	73bb      	strb	r3, [r7, #14]
	//Serial.println("CaliPile EEPROM slave address should be 140");
	//Serial.println(" ");

	// Read the EEPROM calibration constants

	_LOOKUP = readByte(i2c_addr, CALIPILE_EEPROM_LOOKUPNUM);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	7a1b      	ldrb	r3, [r3, #8]
 800d19e:	2229      	movs	r2, #41	; 0x29
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f9e5 	bl	800d572 <_ZN8CALIPILE8readByteEhh>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	765a      	strb	r2, [r3, #25]
	//Serial.print("CaliPile LookUpNumber is "); //Serial.println(_LOOKUP);

	readBytes(i2c_addr, CALIPILE_EEPROM_PTAT25, 2, &rawData[0]);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7a19      	ldrb	r1, [r3, #8]
 800d1b4:	f107 030c 	add.w	r3, r7, #12
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	222a      	movs	r2, #42	; 0x2a
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f9ec 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	_PTAT25 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d1c4:	7b3b      	ldrb	r3, [r7, #12]
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	b21a      	sxth	r2, r3
 800d1ca:	7b7b      	ldrb	r3, [r7, #13]
 800d1cc:	b21b      	sxth	r3, r3
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	b21b      	sxth	r3, r3
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	815a      	strh	r2, [r3, #10]
	//Serial.print("CaliPile PTAT25 is "); //Serial.println(_PTAT25);

	readBytes(i2c_addr, CALIPILE_EEPROM_M, 2, &rawData[0]);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7a19      	ldrb	r1, [r3, #8]
 800d1dc:	f107 030c 	add.w	r3, r7, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	222c      	movs	r2, #44	; 0x2c
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f9d8 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	_M = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d1ec:	7b3b      	ldrb	r3, [r7, #12]
 800d1ee:	021b      	lsls	r3, r3, #8
 800d1f0:	b21a      	sxth	r2, r3
 800d1f2:	7b7b      	ldrb	r3, [r7, #13]
 800d1f4:	b21b      	sxth	r3, r3
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	b21b      	sxth	r3, r3
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	819a      	strh	r2, [r3, #12]
	_M /= 100;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	899b      	ldrh	r3, [r3, #12]
 800d204:	4a4f      	ldr	r2, [pc, #316]	; (800d344 <_ZN8CALIPILE10readEEPROMEv+0x1ec>)
 800d206:	fba2 2303 	umull	r2, r3, r2, r3
 800d20a:	095b      	lsrs	r3, r3, #5
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	819a      	strh	r2, [r3, #12]
	//Serial.print("CaliPile M is "); //Serial.println(_M);

	readBytes(i2c_addr, CALIPILE_EEPROM_U0, 2, &rawData[0]);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	7a19      	ldrb	r1, [r3, #8]
 800d216:	f107 030c 	add.w	r3, r7, #12
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	2302      	movs	r3, #2
 800d21e:	222e      	movs	r2, #46	; 0x2e
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f9bb 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	_U0 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d226:	7b3b      	ldrb	r3, [r7, #12]
 800d228:	021b      	lsls	r3, r3, #8
 800d22a:	b21a      	sxth	r2, r3
 800d22c:	7b7b      	ldrb	r3, [r7, #13]
 800d22e:	b21b      	sxth	r3, r3
 800d230:	4313      	orrs	r3, r2
 800d232:	b21b      	sxth	r3, r3
 800d234:	b29a      	uxth	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	81da      	strh	r2, [r3, #14]
	_U0 += 32768;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	89db      	ldrh	r3, [r3, #14]
 800d23e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	81da      	strh	r2, [r3, #14]
	//Serial.print("CaliPile U0 is "); //Serial.println(_U0);

	readBytes(i2c_addr, CALIPILE_EEPROM_UOUT1, 2, &rawData[0]);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7a19      	ldrb	r1, [r3, #8]
 800d24c:	f107 030c 	add.w	r3, r7, #12
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	2302      	movs	r3, #2
 800d254:	2230      	movs	r2, #48	; 0x30
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f9a0 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	_UOUT1 = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d25c:	7b3b      	ldrb	r3, [r7, #12]
 800d25e:	021b      	lsls	r3, r3, #8
 800d260:	7b7a      	ldrb	r2, [r7, #13]
 800d262:	4313      	orrs	r3, r2
 800d264:	461a      	mov	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	615a      	str	r2, [r3, #20]
	_UOUT1 *= 2;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	005a      	lsls	r2, r3, #1
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	615a      	str	r2, [r3, #20]
	//Serial.print("CaliPile UOUT1 is "); //Serial.println(_UOUT1);

	_TOBJ1 = readByte(i2c_addr, CALIPILE_EEPROM_TOBJ1);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7a1b      	ldrb	r3, [r3, #8]
 800d278:	2232      	movs	r2, #50	; 0x32
 800d27a:	4619      	mov	r1, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f978 	bl	800d572 <_ZN8CALIPILE8readByteEhh>
 800d282:	4603      	mov	r3, r0
 800d284:	461a      	mov	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	761a      	strb	r2, [r3, #24]
	//Serial.print("CaliPile TOBJ1 is "); //Serial.println(_TOBJ1);

	readBytes(i2c_addr, CALIPILE_EEPROM_CHECKSUM, 2, &rawData[0]);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	7a19      	ldrb	r1, [r3, #8]
 800d28e:	f107 030c 	add.w	r3, r7, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	2302      	movs	r3, #2
 800d296:	2221      	movs	r2, #33	; 0x21
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f97f 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	_CHECKSUM = ( (uint16_t) rawData[0] << 8) | rawData[1];
 800d29e:	7b3b      	ldrb	r3, [r7, #12]
 800d2a0:	021b      	lsls	r3, r3, #8
 800d2a2:	b21a      	sxth	r2, r3
 800d2a4:	7b7b      	ldrb	r3, [r7, #13]
 800d2a6:	b21b      	sxth	r3, r3
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	b21b      	sxth	r3, r3
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	821a      	strh	r2, [r3, #16]
	//Serial.print("CaliPile CHECKSUM is supposed to be "); //Serial.println(_CHECKSUM);

	// Calculate the checksum
	uint16_t sum = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d2b6:	2323      	movs	r3, #35	; 0x23
 800d2b8:	613b      	str	r3, [r7, #16]
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	2b3f      	cmp	r3, #63	; 0x3f
 800d2be:	dc10      	bgt.n	800d2e2 <_ZN8CALIPILE10readEEPROMEv+0x18a>
	{
		sum += readByte(i2c_addr, ii);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	7a1b      	ldrb	r3, [r3, #8]
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	b2d2      	uxtb	r2, r2
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f951 	bl	800d572 <_ZN8CALIPILE8readByteEhh>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	8afb      	ldrh	r3, [r7, #22]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	82fb      	strh	r3, [r7, #22]
	for(int ii = 35; ii < 64; ii++)
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	613b      	str	r3, [r7, #16]
 800d2e0:	e7eb      	b.n	800d2ba <_ZN8CALIPILE10readEEPROMEv+0x162>
	}
	//Serial.print("CaliPile CHECKSUM is "); //Serial.println(sum + c);

	writeByte(i2c_addr, CALIPILE_EEPROM_CONTROL, 0x00); // disable EEPROM read
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	7a19      	ldrb	r1, [r3, #8]
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	221f      	movs	r2, #31
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f92a 	bl	800d544 <_ZN8CALIPILE9writeByteEhhh>
	/* End of EEPROM operations, just have to do once *************************************************** */

	// Construct needed calibration constants (just need to calculate once)
	_k = ( (float) (_UOUT1 - _U0) )/(powf((float)(_TOBJ1 + 273.15f), 3.8f) - powf(25.0f + 273.15f, 3.8f) );
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	695b      	ldr	r3, [r3, #20]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	89d2      	ldrh	r2, [r2, #14]
 800d2f8:	1a9b      	subs	r3, r3, r2
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7e1b      	ldrb	r3, [r3, #24]
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d30e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800d348 <_ZN8CALIPILE10readEEPROMEv+0x1f0>
 800d312:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d316:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d34c <_ZN8CALIPILE10readEEPROMEv+0x1f4>
 800d31a:	eeb0 0a67 	vmov.f32	s0, s15
 800d31e:	f004 fab1 	bl	8011884 <powf>
 800d322:	eef0 7a40 	vmov.f32	s15, s0
 800d326:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800d350 <_ZN8CALIPILE10readEEPROMEv+0x1f8>
 800d32a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d32e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800d338:	bf00      	nop
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	ecbd 8b02 	vpop	{d8}
 800d342:	bd80      	pop	{r7, pc}
 800d344:	51eb851f 	.word	0x51eb851f
 800d348:	43889333 	.word	0x43889333
 800d34c:	40733333 	.word	0x40733333
 800d350:	4f16b4e3 	.word	0x4f16b4e3

0800d354 <_ZN8CALIPILE11initTempThrEt>:
	// select motion threshold
	writeByte(i2c_addr, CALIPILE_TP_PRES_THLD, 0x22);// presence threshold, set at 50 counts
	writeByte(i2c_addr, CALIPILE_TP_MOT_THLD, 0x0A);// motion threshold, set at 10 counts
}

void CALIPILE::initTempThr(uint16_t Tcounts) {
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af02      	add	r7, sp, #8
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	807b      	strh	r3, [r7, #2]
	uint8_t rawData[2] = {0, 0};
 800d360:	2300      	movs	r3, #0
 800d362:	813b      	strh	r3, [r7, #8]
	// specify the over temperature interrupt threshold (2 bytes)
	writeByte(i2c_addr, CALIPILE_TPOT_THR, Tcounts);// 0x83 means 67,072 counts as threshold
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	7a19      	ldrb	r1, [r3, #8]
 800d368:	887b      	ldrh	r3, [r7, #2]
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	221c      	movs	r2, #28
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f8e8 	bl	800d544 <_ZN8CALIPILE9writeByteEhhh>
	writeByte(i2c_addr, (CALIPILE_TPOT_THR + 1), 0x00);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7a19      	ldrb	r1, [r3, #8]
 800d378:	2300      	movs	r3, #0
 800d37a:	221d      	movs	r2, #29
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f8e1 	bl	800d544 <_ZN8CALIPILE9writeByteEhhh>
	uint8_t temp = readByte(i2c_addr, CALIPILE_SRC_SELECT);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	7a1b      	ldrb	r3, [r3, #8]
 800d386:	221a      	movs	r2, #26
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f8f1 	bl	800d572 <_ZN8CALIPILE8readByteEhh>
 800d390:	4603      	mov	r3, r0
 800d392:	73fb      	strb	r3, [r7, #15]
	writeByte(i2c_addr, CALIPILE_SRC_SELECT, temp | 0x10);// interrupt on exceeding threshold
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7a19      	ldrb	r1, [r3, #8]
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	f043 0310 	orr.w	r3, r3, #16
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	221a      	movs	r2, #26
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f8ce 	bl	800d544 <_ZN8CALIPILE9writeByteEhhh>
	// Verify threshold set
	readBytes(i2c_addr, CALIPILE_TPOT_THR, 2, &rawData[0]);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7a19      	ldrb	r1, [r3, #8]
 800d3ac:	f107 0308 	add.w	r3, r7, #8
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	221c      	movs	r2, #28
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f8f0 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t TPOTTHR = ((uint16_t) rawData[0] << 8) | rawData[1];
 800d3bc:	7a3b      	ldrb	r3, [r7, #8]
 800d3be:	021b      	lsls	r3, r3, #8
 800d3c0:	b21a      	sxth	r2, r3
 800d3c2:	7a7b      	ldrb	r3, [r7, #9]
 800d3c4:	b21b      	sxth	r3, r3
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	b21b      	sxth	r3, r3
 800d3ca:	81bb      	strh	r3, [r7, #12]
	//Serial.print("Overtemp threshold = "); //Serial.println(TPOTTHR * 2);
}
 800d3cc:	bf00      	nop
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <_ZN8CALIPILE8getTPAMBEv>:

uint16_t CALIPILE::getTPAMB() {
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	6078      	str	r0, [r7, #4]
	uint8_t rawData[2] = {0, 0};
 800d3dc:	2300      	movs	r3, #0
 800d3de:	81bb      	strh	r3, [r7, #12]
	readBytes(i2c_addr, CALIPILE_TPAMBIENT, 2, &rawData[0]);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	7a19      	ldrb	r1, [r3, #8]
 800d3e4:	f107 030c 	add.w	r3, r7, #12
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	2203      	movs	r2, #3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f8d4 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	uint16_t temp = ( (uint16_t)(rawData[0] & 0x7F) << 8) | rawData[1];
 800d3f4:	7b3b      	ldrb	r3, [r7, #12]
 800d3f6:	021b      	lsls	r3, r3, #8
 800d3f8:	b21b      	sxth	r3, r3
 800d3fa:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d3fe:	b21a      	sxth	r2, r3
 800d400:	7b7b      	ldrb	r3, [r7, #13]
 800d402:	b21b      	sxth	r3, r3
 800d404:	4313      	orrs	r3, r2
 800d406:	b21b      	sxth	r3, r3
 800d408:	81fb      	strh	r3, [r7, #14]
	return temp;
 800d40a:	89fb      	ldrh	r3, [r7, #14]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <_ZN8CALIPILE8getTPOBJEv>:

uint32_t CALIPILE::getTPOBJ() {
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af02      	add	r7, sp, #8
 800d41a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[3] = {0, 0, 0};
 800d41c:	4b10      	ldr	r3, [pc, #64]	; (800d460 <_ZN8CALIPILE8getTPOBJEv+0x4c>)
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	723b      	strb	r3, [r7, #8]
 800d422:	f107 0309 	add.w	r3, r7, #9
 800d426:	2200      	movs	r2, #0
 800d428:	801a      	strh	r2, [r3, #0]
	readBytes(i2c_addr, CALIPILE_TPOBJECT, 3, &rawData[0]);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	7a19      	ldrb	r1, [r3, #8]
 800d42e:	f107 0308 	add.w	r3, r7, #8
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	2303      	movs	r3, #3
 800d436:	2201      	movs	r2, #1
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f8af 	bl	800d59c <_ZN8CALIPILE9readBytesEhhhPh>
	uint32_t temp = ( (uint32_t) ( (uint32_t)rawData[0] << 24) | ( (uint32_t)rawData[1] << 16) | ( (uint32_t)rawData[2] & 0x80) << 8) >> 15;
 800d43e:	7a3b      	ldrb	r3, [r7, #8]
 800d440:	061a      	lsls	r2, r3, #24
 800d442:	7a7b      	ldrb	r3, [r7, #9]
 800d444:	041b      	lsls	r3, r3, #16
 800d446:	431a      	orrs	r2, r3
 800d448:	7abb      	ldrb	r3, [r7, #10]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d450:	4313      	orrs	r3, r2
 800d452:	0bdb      	lsrs	r3, r3, #15
 800d454:	60fb      	str	r3, [r7, #12]
	return temp;
 800d456:	68fb      	ldr	r3, [r7, #12]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	08012220 	.word	0x08012220

0800d464 <_ZN8CALIPILE7getTambEt>:
uint8_t CALIPILE::getTPAMBSHK() {
	uint8_t temp = readByte(i2c_addr, CALIPILE_TPAMB_SHOCK);
	return temp;
}

float CALIPILE::getTamb(uint16_t TPAMB) {
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	460b      	mov	r3, r1
 800d46e:	807b      	strh	r3, [r7, #2]
	float temp = 298.15f + ((float)TPAMB - (float) _PTAT25) * (1.0f/(float) _M);
 800d470:	887b      	ldrh	r3, [r7, #2]
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	895b      	ldrh	r3, [r3, #10]
 800d47e:	ee07 3a90 	vmov	s15, r3
 800d482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d486:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	899b      	ldrh	r3, [r3, #12]
 800d48e:	ee07 3a90 	vmov	s15, r3
 800d492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d496:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d49a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800d4c4 <_ZN8CALIPILE7getTambEt+0x60>
 800d4a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4aa:	edc7 7a03 	vstr	s15, [r7, #12]
	return temp;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	ee07 3a90 	vmov	s15, r3
}
 800d4b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d4b8:	3714      	adds	r7, #20
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	43951333 	.word	0x43951333

0800d4c8 <_ZN8CALIPILE7getTobjEmf>:

float CALIPILE::getTobj(uint32_t TPOBJ, float Tamb) {
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp0 = powf(Tamb, 3.8f);
 800d4d6:	eddf 0a19 	vldr	s1, [pc, #100]	; 800d53c <_ZN8CALIPILE7getTobjEmf+0x74>
 800d4da:	ed97 0a01 	vldr	s0, [r7, #4]
 800d4de:	f004 f9d1 	bl	8011884 <powf>
 800d4e2:	ed87 0a07 	vstr	s0, [r7, #28]
	float temp1 = ( ((float) TPOBJ) - ((float) _U0) ) / _k;
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	ee07 3a90 	vmov	s15, r3
 800d4ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	89db      	ldrh	r3, [r3, #14]
 800d4f4:	ee07 3a90 	vmov	s15, r3
 800d4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	ed93 7a07 	vldr	s14, [r3, #28]
 800d506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d50a:	edc7 7a06 	vstr	s15, [r7, #24]
	float temp3 = powf( (temp0 + temp1), 0.2631578947f );
 800d50e:	ed97 7a07 	vldr	s14, [r7, #28]
 800d512:	edd7 7a06 	vldr	s15, [r7, #24]
 800d516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d51a:	eddf 0a09 	vldr	s1, [pc, #36]	; 800d540 <_ZN8CALIPILE7getTobjEmf+0x78>
 800d51e:	eeb0 0a67 	vmov.f32	s0, s15
 800d522:	f004 f9af 	bl	8011884 <powf>
 800d526:	ed87 0a05 	vstr	s0, [r7, #20]
	return temp3;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	ee07 3a90 	vmov	s15, r3
}
 800d530:	eeb0 0a67 	vmov.f32	s0, s15
 800d534:	3720      	adds	r7, #32
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	40733333 	.word	0x40733333
 800d540:	3e86bca2 	.word	0x3e86bca2

0800d544 <_ZN8CALIPILE9writeByteEhhh>:
//	//Serial.println("done\n");
//
//}

// I2C read/write functions for the BMP280 sensors
void CALIPILE::writeByte(uint8_t address, uint8_t subAddress, uint8_t data) {
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	4608      	mov	r0, r1
 800d54e:	4611      	mov	r1, r2
 800d550:	461a      	mov	r2, r3
 800d552:	4603      	mov	r3, r0
 800d554:	70fb      	strb	r3, [r7, #3]
 800d556:	460b      	mov	r3, r1
 800d558:	70bb      	strb	r3, [r7, #2]
 800d55a:	4613      	mov	r3, r2
 800d55c:	707b      	strb	r3, [r7, #1]
	writeRegister(subAddress, &data, 1);
 800d55e:	1c7a      	adds	r2, r7, #1
 800d560:	78b9      	ldrb	r1, [r7, #2]
 800d562:	2301      	movs	r3, #1
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f85a 	bl	800d61e <_ZN8CALIPILE13writeRegisterEhPht>
}
 800d56a:	bf00      	nop
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <_ZN8CALIPILE8readByteEhh>:

uint8_t CALIPILE::readByte(uint8_t address, uint8_t subAddress) {
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	460b      	mov	r3, r1
 800d57c:	70fb      	strb	r3, [r7, #3]
 800d57e:	4613      	mov	r3, r2
 800d580:	70bb      	strb	r3, [r7, #2]
	uint8_t temp[1];
	readRegister(subAddress, &temp[0], 1);
 800d582:	78bb      	ldrb	r3, [r7, #2]
 800d584:	b299      	uxth	r1, r3
 800d586:	f107 020c 	add.w	r2, r7, #12
 800d58a:	2301      	movs	r3, #1
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 f81e 	bl	800d5ce <_ZN8CALIPILE12readRegisterEtPht>
	return temp[0];
 800d592:	7b3b      	ldrb	r3, [r7, #12]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <_ZN8CALIPILE9readBytesEhhhPh>:

void CALIPILE::readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	70fb      	strb	r3, [r7, #3]
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	70bb      	strb	r3, [r7, #2]
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	707b      	strb	r3, [r7, #1]
	readRegister(subAddress, dest, count);
 800d5b6:	78bb      	ldrb	r3, [r7, #2]
 800d5b8:	b299      	uxth	r1, r3
 800d5ba:	787b      	ldrb	r3, [r7, #1]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	693a      	ldr	r2, [r7, #16]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f804 	bl	800d5ce <_ZN8CALIPILE12readRegisterEtPht>
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <_ZN8CALIPILE12readRegisterEtPht>:
	} else {
		return false;
	}
}

bool CALIPILE::readRegister(uint16_t mem_addr, uint8_t *dest, uint16_t size) {
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b088      	sub	sp, #32
 800d5d2:	af04      	add	r7, sp, #16
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	460b      	mov	r3, r1
 800d5dc:	817b      	strh	r3, [r7, #10]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Read(i2c_han, i2c_addr, mem_addr, 1, dest, size, 10)) {
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6858      	ldr	r0, [r3, #4]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	7a1b      	ldrb	r3, [r3, #8]
 800d5ea:	b299      	uxth	r1, r3
 800d5ec:	897a      	ldrh	r2, [r7, #10]
 800d5ee:	230a      	movs	r3, #10
 800d5f0:	9302      	str	r3, [sp, #8]
 800d5f2:	893b      	ldrh	r3, [r7, #8]
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	f7f5 fd62 	bl	80030c4 <HAL_I2C_Mem_Read>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	bf0c      	ite	eq
 800d606:	2301      	moveq	r3, #1
 800d608:	2300      	movne	r3, #0
 800d60a:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <_ZN8CALIPILE12readRegisterEtPht+0x46>
		return true;
 800d610:	2301      	movs	r3, #1
 800d612:	e000      	b.n	800d616 <_ZN8CALIPILE12readRegisterEtPht+0x48>
	} else {
		return false;
 800d614:	2300      	movs	r3, #0
	}
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <_ZN8CALIPILE13writeRegisterEhPht>:

bool CALIPILE::writeRegister(uint8_t mem_addr, uint8_t *val, uint16_t size) {
 800d61e:	b580      	push	{r7, lr}
 800d620:	b088      	sub	sp, #32
 800d622:	af04      	add	r7, sp, #16
 800d624:	60f8      	str	r0, [r7, #12]
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	461a      	mov	r2, r3
 800d62a:	460b      	mov	r3, r1
 800d62c:	72fb      	strb	r3, [r7, #11]
 800d62e:	4613      	mov	r3, r2
 800d630:	813b      	strh	r3, [r7, #8]
	if (HAL_OK
			== HAL_I2C_Mem_Write(i2c_han, i2c_addr, mem_addr, 1, val, size, 10)) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6858      	ldr	r0, [r3, #4]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	7a1b      	ldrb	r3, [r3, #8]
 800d63a:	b299      	uxth	r1, r3
 800d63c:	7afb      	ldrb	r3, [r7, #11]
 800d63e:	b29a      	uxth	r2, r3
 800d640:	230a      	movs	r3, #10
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	893b      	ldrh	r3, [r7, #8]
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	2301      	movs	r3, #1
 800d64e:	f7f5 fc25 	bl	8002e9c <HAL_I2C_Mem_Write>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	bf0c      	ite	eq
 800d658:	2301      	moveq	r3, #1
 800d65a:	2300      	movne	r3, #0
 800d65c:	b2db      	uxtb	r3, r3
	if (HAL_OK
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <_ZN8CALIPILE13writeRegisterEhPht+0x48>
		return true;
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <_ZN8CALIPILE13writeRegisterEhPht+0x4a>
	} else {
		return false;
 800d666:	2300      	movs	r3, #0
	}
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <__NVIC_SetPriority>:
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d680:	2b00      	cmp	r3, #0
 800d682:	db0a      	blt.n	800d69a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	b2da      	uxtb	r2, r3
 800d688:	490c      	ldr	r1, [pc, #48]	; (800d6bc <__NVIC_SetPriority+0x4c>)
 800d68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d68e:	0112      	lsls	r2, r2, #4
 800d690:	b2d2      	uxtb	r2, r2
 800d692:	440b      	add	r3, r1
 800d694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d698:	e00a      	b.n	800d6b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	4908      	ldr	r1, [pc, #32]	; (800d6c0 <__NVIC_SetPriority+0x50>)
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	f003 030f 	and.w	r3, r3, #15
 800d6a6:	3b04      	subs	r3, #4
 800d6a8:	0112      	lsls	r2, r2, #4
 800d6aa:	b2d2      	uxtb	r2, r2
 800d6ac:	440b      	add	r3, r1
 800d6ae:	761a      	strb	r2, [r3, #24]
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	e000e100 	.word	0xe000e100
 800d6c0:	e000ed00 	.word	0xe000ed00

0800d6c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d6c8:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <SysTick_Handler+0x1c>)
 800d6ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d6cc:	f002 f8a0 	bl	800f810 <xTaskGetSchedulerState>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d001      	beq.n	800d6da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d6d6:	f003 f92f 	bl	8010938 <xPortSysTickHandler>
  }
}
 800d6da:	bf00      	nop
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	e000e010 	.word	0xe000e010

0800d6e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	f06f 0004 	mvn.w	r0, #4
 800d6ee:	f7ff ffbf 	bl	800d670 <__NVIC_SetPriority>
#endif
}
 800d6f2:	bf00      	nop
 800d6f4:	bd80      	pop	{r7, pc}
	...

0800d6f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6fe:	f3ef 8305 	mrs	r3, IPSR
 800d702:	603b      	str	r3, [r7, #0]
  return(result);
 800d704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d70a:	f06f 0305 	mvn.w	r3, #5
 800d70e:	607b      	str	r3, [r7, #4]
 800d710:	e00c      	b.n	800d72c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <osKernelInitialize+0x44>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d105      	bne.n	800d726 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d71a:	4b08      	ldr	r3, [pc, #32]	; (800d73c <osKernelInitialize+0x44>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d720:	2300      	movs	r3, #0
 800d722:	607b      	str	r3, [r7, #4]
 800d724:	e002      	b.n	800d72c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d72a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d72c:	687b      	ldr	r3, [r7, #4]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	200004d0 	.word	0x200004d0

0800d740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d746:	f3ef 8305 	mrs	r3, IPSR
 800d74a:	603b      	str	r3, [r7, #0]
  return(result);
 800d74c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d752:	f06f 0305 	mvn.w	r3, #5
 800d756:	607b      	str	r3, [r7, #4]
 800d758:	e010      	b.n	800d77c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d75a:	4b0b      	ldr	r3, [pc, #44]	; (800d788 <osKernelStart+0x48>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d109      	bne.n	800d776 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d762:	f7ff ffbf 	bl	800d6e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d766:	4b08      	ldr	r3, [pc, #32]	; (800d788 <osKernelStart+0x48>)
 800d768:	2202      	movs	r2, #2
 800d76a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d76c:	f001 fc08 	bl	800ef80 <vTaskStartScheduler>
      stat = osOK;
 800d770:	2300      	movs	r3, #0
 800d772:	607b      	str	r3, [r7, #4]
 800d774:	e002      	b.n	800d77c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d77a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d77c:	687b      	ldr	r3, [r7, #4]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	200004d0 	.word	0x200004d0

0800d78c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08e      	sub	sp, #56	; 0x38
 800d790:	af04      	add	r7, sp, #16
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d798:	2300      	movs	r3, #0
 800d79a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d79c:	f3ef 8305 	mrs	r3, IPSR
 800d7a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d7a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d17e      	bne.n	800d8a6 <osThreadNew+0x11a>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d07b      	beq.n	800d8a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d7ae:	2380      	movs	r3, #128	; 0x80
 800d7b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d7b2:	2318      	movs	r3, #24
 800d7b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d7ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d045      	beq.n	800d852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <osThreadNew+0x48>
        name = attr->name;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d008      	beq.n	800d7fa <osThreadNew+0x6e>
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b38      	cmp	r3, #56	; 0x38
 800d7ec:	d805      	bhi.n	800d7fa <osThreadNew+0x6e>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <osThreadNew+0x72>
        return (NULL);
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	e054      	b.n	800d8a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	089b      	lsrs	r3, r3, #2
 800d80c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00e      	beq.n	800d834 <osThreadNew+0xa8>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	2b5b      	cmp	r3, #91	; 0x5b
 800d81c:	d90a      	bls.n	800d834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d822:	2b00      	cmp	r3, #0
 800d824:	d006      	beq.n	800d834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <osThreadNew+0xa8>
        mem = 1;
 800d82e:	2301      	movs	r3, #1
 800d830:	61bb      	str	r3, [r7, #24]
 800d832:	e010      	b.n	800d856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10c      	bne.n	800d856 <osThreadNew+0xca>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d108      	bne.n	800d856 <osThreadNew+0xca>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d104      	bne.n	800d856 <osThreadNew+0xca>
          mem = 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	61bb      	str	r3, [r7, #24]
 800d850:	e001      	b.n	800d856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d852:	2300      	movs	r3, #0
 800d854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d110      	bne.n	800d87e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d864:	9202      	str	r2, [sp, #8]
 800d866:	9301      	str	r3, [sp, #4]
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	6a3a      	ldr	r2, [r7, #32]
 800d870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f001 f9ae 	bl	800ebd4 <xTaskCreateStatic>
 800d878:	4603      	mov	r3, r0
 800d87a:	613b      	str	r3, [r7, #16]
 800d87c:	e013      	b.n	800d8a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d110      	bne.n	800d8a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	b29a      	uxth	r2, r3
 800d888:	f107 0310 	add.w	r3, r7, #16
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f001 f9f9 	bl	800ec8e <xTaskCreate>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d001      	beq.n	800d8a6 <osThreadNew+0x11a>
            hTask = NULL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8a6:	693b      	ldr	r3, [r7, #16]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3728      	adds	r7, #40	; 0x28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af02      	add	r7, sp, #8
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <osThreadFlagsSet+0x1a>
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	da03      	bge.n	800d8d2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800d8ca:	f06f 0303 	mvn.w	r3, #3
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	e035      	b.n	800d93e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800d8d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8d8:	f3ef 8305 	mrs	r3, IPSR
 800d8dc:	613b      	str	r3, [r7, #16]
  return(result);
 800d8de:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d01f      	beq.n	800d924 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800d8e8:	f107 0308 	add.w	r3, r7, #8
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	6978      	ldr	r0, [r7, #20]
 800d8f6:	f002 f929 	bl	800fb4c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800d8fa:	f107 030c 	add.w	r3, r7, #12
 800d8fe:	2200      	movs	r2, #0
 800d900:	9200      	str	r2, [sp, #0]
 800d902:	2200      	movs	r2, #0
 800d904:	2100      	movs	r1, #0
 800d906:	6978      	ldr	r0, [r7, #20]
 800d908:	f002 f920 	bl	800fb4c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d015      	beq.n	800d93e <osThreadFlagsSet+0x8e>
 800d912:	4b0d      	ldr	r3, [pc, #52]	; (800d948 <osThreadFlagsSet+0x98>)
 800d914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	e00c      	b.n	800d93e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800d924:	2300      	movs	r3, #0
 800d926:	2201      	movs	r2, #1
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6978      	ldr	r0, [r7, #20]
 800d92c:	f002 f856 	bl	800f9dc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	2200      	movs	r2, #0
 800d936:	2100      	movs	r1, #0
 800d938:	6978      	ldr	r0, [r7, #20]
 800d93a:	f002 f84f 	bl	800f9dc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800d93e:	68fb      	ldr	r3, [r7, #12]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3718      	adds	r7, #24
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	e000ed04 	.word	0xe000ed04

0800d94c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08c      	sub	sp, #48	; 0x30
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d958:	f3ef 8305 	mrs	r3, IPSR
 800d95c:	617b      	str	r3, [r7, #20]
  return(result);
 800d95e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800d960:	2b00      	cmp	r3, #0
 800d962:	d003      	beq.n	800d96c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800d964:	f06f 0305 	mvn.w	r3, #5
 800d968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d96a:	e06b      	b.n	800da44 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	da03      	bge.n	800d97a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800d972:	f06f 0303 	mvn.w	r3, #3
 800d976:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d978:	e064      	b.n	800da44 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800d984:	2300      	movs	r3, #0
 800d986:	62bb      	str	r3, [r7, #40]	; 0x28
 800d988:	e001      	b.n	800d98e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800d98e:	2300      	movs	r3, #0
 800d990:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800d996:	f001 fc05 	bl	800f1a4 <xTaskGetTickCount>
 800d99a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800d99c:	f107 0210 	add.w	r2, r7, #16
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	f001 ffbf 	bl	800f928 <xTaskNotifyWait>
 800d9aa:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d137      	bne.n	800da22 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800d9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00c      	beq.n	800d9e6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d032      	beq.n	800da3e <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10f      	bne.n	800d9fe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800d9de:	f06f 0302 	mvn.w	r3, #2
 800d9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800d9e4:	e02e      	b.n	800da44 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d128      	bne.n	800da42 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d103      	bne.n	800d9fe <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800d9f6:	f06f 0302 	mvn.w	r3, #2
 800d9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800d9fc:	e022      	b.n	800da44 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800d9fe:	f001 fbd1 	bl	800f1a4 <xTaskGetTickCount>
 800da02:	4602      	mov	r2, r0
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800da0a:	69ba      	ldr	r2, [r7, #24]
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	429a      	cmp	r2, r3
 800da10:	d902      	bls.n	800da18 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	627b      	str	r3, [r7, #36]	; 0x24
 800da16:	e00e      	b.n	800da36 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800da18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	627b      	str	r3, [r7, #36]	; 0x24
 800da20:	e009      	b.n	800da36 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d103      	bne.n	800da30 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800da28:	f06f 0302 	mvn.w	r3, #2
 800da2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da2e:	e002      	b.n	800da36 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800da30:	f06f 0301 	mvn.w	r3, #1
 800da34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1af      	bne.n	800d99c <osThreadFlagsWait+0x50>
 800da3c:	e002      	b.n	800da44 <osThreadFlagsWait+0xf8>
            break;
 800da3e:	bf00      	nop
 800da40:	e000      	b.n	800da44 <osThreadFlagsWait+0xf8>
            break;
 800da42:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800da46:	4618      	mov	r0, r3
 800da48:	3730      	adds	r7, #48	; 0x30
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800da4e:	b580      	push	{r7, lr}
 800da50:	b084      	sub	sp, #16
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da56:	f3ef 8305 	mrs	r3, IPSR
 800da5a:	60bb      	str	r3, [r7, #8]
  return(result);
 800da5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d003      	beq.n	800da6a <osDelay+0x1c>
    stat = osErrorISR;
 800da62:	f06f 0305 	mvn.w	r3, #5
 800da66:	60fb      	str	r3, [r7, #12]
 800da68:	e007      	b.n	800da7a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <osDelay+0x2c>
      vTaskDelay(ticks);
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f001 fa4f 	bl	800ef18 <vTaskDelay>
    }
  }

  return (stat);
 800da7a:	68fb      	ldr	r3, [r7, #12]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f002 fd75 	bl	801057c <pvTimerGetTimerID>
 800da92:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	6852      	ldr	r2, [r2, #4]
 800daa2:	4610      	mov	r0, r2
 800daa4:	4798      	blx	r3
  }
}
 800daa6:	bf00      	nop
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
	...

0800dab0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08c      	sub	sp, #48	; 0x30
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	607a      	str	r2, [r7, #4]
 800daba:	603b      	str	r3, [r7, #0]
 800dabc:	460b      	mov	r3, r1
 800dabe:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800dac0:	2300      	movs	r3, #0
 800dac2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac4:	f3ef 8305 	mrs	r3, IPSR
 800dac8:	613b      	str	r3, [r7, #16]
  return(result);
 800daca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d163      	bne.n	800db98 <osTimerNew+0xe8>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d060      	beq.n	800db98 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800dad6:	2008      	movs	r0, #8
 800dad8:	f002 ffbe 	bl	8010a58 <pvPortMalloc>
 800dadc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d059      	beq.n	800db98 <osTimerNew+0xe8>
      callb->func = func;
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800daf0:	7afb      	ldrb	r3, [r7, #11]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <osTimerNew+0x4c>
        reload = pdFALSE;
 800daf6:	2300      	movs	r3, #0
 800daf8:	61fb      	str	r3, [r7, #28]
 800dafa:	e001      	b.n	800db00 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800dafc:	2301      	movs	r3, #1
 800dafe:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800db00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db04:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800db06:	2300      	movs	r3, #0
 800db08:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01c      	beq.n	800db4a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <osTimerNew+0x6e>
          name = attr->name;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d006      	beq.n	800db34 <osTimerNew+0x84>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	2b2b      	cmp	r3, #43	; 0x2b
 800db2c:	d902      	bls.n	800db34 <osTimerNew+0x84>
          mem = 1;
 800db2e:	2301      	movs	r3, #1
 800db30:	61bb      	str	r3, [r7, #24]
 800db32:	e00c      	b.n	800db4e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d108      	bne.n	800db4e <osTimerNew+0x9e>
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <osTimerNew+0x9e>
            mem = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	61bb      	str	r3, [r7, #24]
 800db48:	e001      	b.n	800db4e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d10c      	bne.n	800db6e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	4b12      	ldr	r3, [pc, #72]	; (800dba4 <osTimerNew+0xf4>)
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	69fa      	ldr	r2, [r7, #28]
 800db62:	2101      	movs	r1, #1
 800db64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db66:	f002 f98a 	bl	800fe7e <xTimerCreateStatic>
 800db6a:	6238      	str	r0, [r7, #32]
 800db6c:	e00b      	b.n	800db86 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d108      	bne.n	800db86 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800db74:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <osTimerNew+0xf4>)
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	69fa      	ldr	r2, [r7, #28]
 800db7c:	2101      	movs	r1, #1
 800db7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db80:	f002 f95c 	bl	800fe3c <xTimerCreate>
 800db84:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d105      	bne.n	800db98 <osTimerNew+0xe8>
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d002      	beq.n	800db98 <osTimerNew+0xe8>
        vPortFree (callb);
 800db92:	6978      	ldr	r0, [r7, #20]
 800db94:	f003 f82c 	bl	8010bf0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800db98:	6a3b      	ldr	r3, [r7, #32]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3728      	adds	r7, #40	; 0x28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	0800da85 	.word	0x0800da85

0800dba8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af02      	add	r7, sp, #8
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbb6:	f3ef 8305 	mrs	r3, IPSR
 800dbba:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d003      	beq.n	800dbca <osTimerStart+0x22>
    stat = osErrorISR;
 800dbc2:	f06f 0305 	mvn.w	r3, #5
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	e017      	b.n	800dbfa <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d103      	bne.n	800dbd8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800dbd0:	f06f 0303 	mvn.w	r3, #3
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e010      	b.n	800dbfa <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800dbd8:	2300      	movs	r3, #0
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	2104      	movs	r1, #4
 800dbe2:	6938      	ldr	r0, [r7, #16]
 800dbe4:	f002 f9c4 	bl	800ff70 <xTimerGenericCommand>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d102      	bne.n	800dbf4 <osTimerStart+0x4c>
      stat = osOK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]
 800dbf2:	e002      	b.n	800dbfa <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800dbf4:	f06f 0302 	mvn.w	r3, #2
 800dbf8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dbfa:	697b      	ldr	r3, [r7, #20]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <osTimerDelete>:
  }

  return (running);
}

osStatus_t osTimerDelete (osTimerId_t timer_id) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc10:	f3ef 8305 	mrs	r3, IPSR
 800dc14:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  TimerCallback_t *callb;

  if (IS_IRQ()) {
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <osTimerDelete+0x20>
    stat = osErrorISR;
 800dc1c:	f06f 0305 	mvn.w	r3, #5
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	e01e      	b.n	800dc62 <osTimerDelete+0x5e>
  }
  else if (hTimer == NULL) {
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d103      	bne.n	800dc32 <osTimerDelete+0x2e>
    stat = osErrorParameter;
 800dc2a:	f06f 0303 	mvn.w	r3, #3
 800dc2e:	617b      	str	r3, [r7, #20]
 800dc30:	e017      	b.n	800dc62 <osTimerDelete+0x5e>
  }
  else {
    callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dc32:	6938      	ldr	r0, [r7, #16]
 800dc34:	f002 fca2 	bl	801057c <pvTimerGetTimerID>
 800dc38:	60f8      	str	r0, [r7, #12]

    if (xTimerDelete (hTimer, 0) == pdPASS) {
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	2200      	movs	r2, #0
 800dc42:	2105      	movs	r1, #5
 800dc44:	6938      	ldr	r0, [r7, #16]
 800dc46:	f002 f993 	bl	800ff70 <xTimerGenericCommand>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d105      	bne.n	800dc5c <osTimerDelete+0x58>
      vPortFree (callb);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f002 ffcd 	bl	8010bf0 <vPortFree>
      stat = osOK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	e002      	b.n	800dc62 <osTimerDelete+0x5e>
    } else {
      stat = osErrorResource;
 800dc5c:	f06f 0302 	mvn.w	r3, #2
 800dc60:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800dc62:	697b      	ldr	r3, [r7, #20]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3718      	adds	r7, #24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc78:	f3ef 8305 	mrs	r3, IPSR
 800dc7c:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc7e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d174      	bne.n	800dd6e <osMutexNew+0x102>
    if (attr != NULL) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <osMutexNew+0x26>
      type = attr->attr_bits;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	61bb      	str	r3, [r7, #24]
 800dc90:	e001      	b.n	800dc96 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800dc92:	2300      	movs	r3, #0
 800dc94:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <osMutexNew+0x3a>
      rmtx = 1U;
 800dca0:	2301      	movs	r3, #1
 800dca2:	617b      	str	r3, [r7, #20]
 800dca4:	e001      	b.n	800dcaa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800dca6:	2300      	movs	r3, #0
 800dca8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	f003 0308 	and.w	r3, r3, #8
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d15c      	bne.n	800dd6e <osMutexNew+0x102>
      mem = -1;
 800dcb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcb8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d015      	beq.n	800dcec <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d006      	beq.n	800dcd6 <osMutexNew+0x6a>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	2b4f      	cmp	r3, #79	; 0x4f
 800dcce:	d902      	bls.n	800dcd6 <osMutexNew+0x6a>
          mem = 1;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	613b      	str	r3, [r7, #16]
 800dcd4:	e00c      	b.n	800dcf0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d108      	bne.n	800dcf0 <osMutexNew+0x84>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d104      	bne.n	800dcf0 <osMutexNew+0x84>
            mem = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	613b      	str	r3, [r7, #16]
 800dcea:	e001      	b.n	800dcf0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d112      	bne.n	800dd1c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d007      	beq.n	800dd0c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	4619      	mov	r1, r3
 800dd02:	2004      	movs	r0, #4
 800dd04:	f000 fb63 	bl	800e3ce <xQueueCreateMutexStatic>
 800dd08:	61f8      	str	r0, [r7, #28]
 800dd0a:	e016      	b.n	800dd3a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	4619      	mov	r1, r3
 800dd12:	2001      	movs	r0, #1
 800dd14:	f000 fb5b 	bl	800e3ce <xQueueCreateMutexStatic>
 800dd18:	61f8      	str	r0, [r7, #28]
 800dd1a:	e00e      	b.n	800dd3a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10b      	bne.n	800dd3a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d004      	beq.n	800dd32 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dd28:	2004      	movs	r0, #4
 800dd2a:	f000 fb38 	bl	800e39e <xQueueCreateMutex>
 800dd2e:	61f8      	str	r0, [r7, #28]
 800dd30:	e003      	b.n	800dd3a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800dd32:	2001      	movs	r0, #1
 800dd34:	f000 fb33 	bl	800e39e <xQueueCreateMutex>
 800dd38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00c      	beq.n	800dd5a <osMutexNew+0xee>
        if (attr != NULL) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <osMutexNew+0xe2>
          name = attr->name;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	e001      	b.n	800dd52 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	69f8      	ldr	r0, [r7, #28]
 800dd56:	f000 fedf 	bl	800eb18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d006      	beq.n	800dd6e <osMutexNew+0x102>
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d003      	beq.n	800dd6e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	f043 0301 	orr.w	r3, r3, #1
 800dd6c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dd6e:	69fb      	ldr	r3, [r7, #28]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3720      	adds	r7, #32
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08a      	sub	sp, #40	; 0x28
 800dd7c:	af02      	add	r7, sp, #8
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dd84:	2300      	movs	r3, #0
 800dd86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd88:	f3ef 8305 	mrs	r3, IPSR
 800dd8c:	613b      	str	r3, [r7, #16]
  return(result);
 800dd8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d15f      	bne.n	800de54 <osMessageQueueNew+0xdc>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d05c      	beq.n	800de54 <osMessageQueueNew+0xdc>
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d059      	beq.n	800de54 <osMessageQueueNew+0xdc>
    mem = -1;
 800dda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dda4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d029      	beq.n	800de00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d012      	beq.n	800ddda <osMessageQueueNew+0x62>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	2b4f      	cmp	r3, #79	; 0x4f
 800ddba:	d90e      	bls.n	800ddda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00a      	beq.n	800ddda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	695a      	ldr	r2, [r3, #20]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	68b9      	ldr	r1, [r7, #8]
 800ddcc:	fb01 f303 	mul.w	r3, r1, r3
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d302      	bcc.n	800ddda <osMessageQueueNew+0x62>
        mem = 1;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	61bb      	str	r3, [r7, #24]
 800ddd8:	e014      	b.n	800de04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d110      	bne.n	800de04 <osMessageQueueNew+0x8c>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10c      	bne.n	800de04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d108      	bne.n	800de04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d104      	bne.n	800de04 <osMessageQueueNew+0x8c>
          mem = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	61bb      	str	r3, [r7, #24]
 800ddfe:	e001      	b.n	800de04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d10b      	bne.n	800de22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	691a      	ldr	r2, [r3, #16]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	2100      	movs	r1, #0
 800de14:	9100      	str	r1, [sp, #0]
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f000 f9d1 	bl	800e1c0 <xQueueGenericCreateStatic>
 800de1e:	61f8      	str	r0, [r7, #28]
 800de20:	e008      	b.n	800de34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d105      	bne.n	800de34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800de28:	2200      	movs	r2, #0
 800de2a:	68b9      	ldr	r1, [r7, #8]
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f000 fa3f 	bl	800e2b0 <xQueueGenericCreate>
 800de32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00c      	beq.n	800de54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d003      	beq.n	800de48 <osMessageQueueNew+0xd0>
        name = attr->name;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	e001      	b.n	800de4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800de4c:	6979      	ldr	r1, [r7, #20]
 800de4e:	69f8      	ldr	r0, [r7, #28]
 800de50:	f000 fe62 	bl	800eb18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800de54:	69fb      	ldr	r3, [r7, #28]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3720      	adds	r7, #32
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
	...

0800de60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	603b      	str	r3, [r7, #0]
 800de6c:	4613      	mov	r3, r2
 800de6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de78:	f3ef 8305 	mrs	r3, IPSR
 800de7c:	617b      	str	r3, [r7, #20]
  return(result);
 800de7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800de80:	2b00      	cmp	r3, #0
 800de82:	d028      	beq.n	800ded6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d005      	beq.n	800de96 <osMessageQueuePut+0x36>
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <osMessageQueuePut+0x36>
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800de96:	f06f 0303 	mvn.w	r3, #3
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	e038      	b.n	800df10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800de9e:	2300      	movs	r3, #0
 800dea0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dea2:	f107 0210 	add.w	r2, r7, #16
 800dea6:	2300      	movs	r3, #0
 800dea8:	68b9      	ldr	r1, [r7, #8]
 800deaa:	69b8      	ldr	r0, [r7, #24]
 800deac:	f000 fba8 	bl	800e600 <xQueueGenericSendFromISR>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d003      	beq.n	800debe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800deb6:	f06f 0302 	mvn.w	r3, #2
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	e028      	b.n	800df10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d025      	beq.n	800df10 <osMessageQueuePut+0xb0>
 800dec4:	4b15      	ldr	r3, [pc, #84]	; (800df1c <osMessageQueuePut+0xbc>)
 800dec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	e01c      	b.n	800df10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <osMessageQueuePut+0x82>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d103      	bne.n	800deea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dee2:	f06f 0303 	mvn.w	r3, #3
 800dee6:	61fb      	str	r3, [r7, #28]
 800dee8:	e012      	b.n	800df10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800deea:	2300      	movs	r3, #0
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	68b9      	ldr	r1, [r7, #8]
 800def0:	69b8      	ldr	r0, [r7, #24]
 800def2:	f000 fa87 	bl	800e404 <xQueueGenericSend>
 800def6:	4603      	mov	r3, r0
 800def8:	2b01      	cmp	r3, #1
 800defa:	d009      	beq.n	800df10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800df02:	f06f 0301 	mvn.w	r3, #1
 800df06:	61fb      	str	r3, [r7, #28]
 800df08:	e002      	b.n	800df10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800df0a:	f06f 0302 	mvn.w	r3, #2
 800df0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800df10:	69fb      	ldr	r3, [r7, #28]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3720      	adds	r7, #32
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	e000ed04 	.word	0xe000ed04

0800df20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4a07      	ldr	r2, [pc, #28]	; (800df4c <vApplicationGetIdleTaskMemory+0x2c>)
 800df30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	4a06      	ldr	r2, [pc, #24]	; (800df50 <vApplicationGetIdleTaskMemory+0x30>)
 800df36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2280      	movs	r2, #128	; 0x80
 800df3c:	601a      	str	r2, [r3, #0]
}
 800df3e:	bf00      	nop
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	200004d4 	.word	0x200004d4
 800df50:	20000530 	.word	0x20000530

0800df54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	4a07      	ldr	r2, [pc, #28]	; (800df80 <vApplicationGetTimerTaskMemory+0x2c>)
 800df64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	4a06      	ldr	r2, [pc, #24]	; (800df84 <vApplicationGetTimerTaskMemory+0x30>)
 800df6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df72:	601a      	str	r2, [r3, #0]
}
 800df74:	bf00      	nop
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	20000730 	.word	0x20000730
 800df84:	2000078c 	.word	0x2000078c

0800df88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f103 0208 	add.w	r2, r3, #8
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f103 0208 	add.w	r2, r3, #8
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f103 0208 	add.w	r2, r3, #8
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b085      	sub	sp, #20
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	689a      	ldr	r2, [r3, #8]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	689b      	ldr	r3, [r3, #8]
 800e004:	683a      	ldr	r2, [r7, #0]
 800e006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	1c5a      	adds	r2, r3, #1
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	601a      	str	r2, [r3, #0]
}
 800e01e:	bf00      	nop
 800e020:	3714      	adds	r7, #20
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e040:	d103      	bne.n	800e04a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	e00c      	b.n	800e064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3308      	adds	r3, #8
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	e002      	b.n	800e058 <vListInsert+0x2e>
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	60fb      	str	r3, [r7, #12]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	429a      	cmp	r2, r3
 800e062:	d2f6      	bcs.n	800e052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	601a      	str	r2, [r3, #0]
}
 800e090:	bf00      	nop
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	6892      	ldr	r2, [r2, #8]
 800e0b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	6852      	ldr	r2, [r2, #4]
 800e0bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d103      	bne.n	800e0d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	689a      	ldr	r2, [r3, #8]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	1e5a      	subs	r2, r3, #1
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10a      	bne.n	800e11a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e116:	bf00      	nop
 800e118:	e7fe      	b.n	800e118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e11a:	f002 fb7b 	bl	8010814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e126:	68f9      	ldr	r1, [r7, #12]
 800e128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e12a:	fb01 f303 	mul.w	r3, r1, r3
 800e12e:	441a      	add	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e14a:	3b01      	subs	r3, #1
 800e14c:	68f9      	ldr	r1, [r7, #12]
 800e14e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e150:	fb01 f303 	mul.w	r3, r1, r3
 800e154:	441a      	add	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	22ff      	movs	r2, #255	; 0xff
 800e15e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	22ff      	movs	r2, #255	; 0xff
 800e166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d114      	bne.n	800e19a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d01a      	beq.n	800e1ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	3310      	adds	r3, #16
 800e17c:	4618      	mov	r0, r3
 800e17e:	f001 f989 	bl	800f494 <xTaskRemoveFromEventList>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d012      	beq.n	800e1ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e188:	4b0c      	ldr	r3, [pc, #48]	; (800e1bc <xQueueGenericReset+0xcc>)
 800e18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18e:	601a      	str	r2, [r3, #0]
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	e009      	b.n	800e1ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3310      	adds	r3, #16
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff fef2 	bl	800df88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	3324      	adds	r3, #36	; 0x24
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7ff feed 	bl	800df88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e1ae:	f002 fb61 	bl	8010874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e1b2:	2301      	movs	r3, #1
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	e000ed04 	.word	0xe000ed04

0800e1c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08e      	sub	sp, #56	; 0x38
 800e1c4:	af02      	add	r7, sp, #8
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	607a      	str	r2, [r7, #4]
 800e1cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10a      	bne.n	800e1ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e1e6:	bf00      	nop
 800e1e8:	e7fe      	b.n	800e1e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10a      	bne.n	800e206 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <xQueueGenericCreateStatic+0x52>
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <xQueueGenericCreateStatic+0x56>
 800e212:	2301      	movs	r3, #1
 800e214:	e000      	b.n	800e218 <xQueueGenericCreateStatic+0x58>
 800e216:	2300      	movs	r3, #0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10a      	bne.n	800e232 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	623b      	str	r3, [r7, #32]
}
 800e22e:	bf00      	nop
 800e230:	e7fe      	b.n	800e230 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <xQueueGenericCreateStatic+0x7e>
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d101      	bne.n	800e242 <xQueueGenericCreateStatic+0x82>
 800e23e:	2301      	movs	r3, #1
 800e240:	e000      	b.n	800e244 <xQueueGenericCreateStatic+0x84>
 800e242:	2300      	movs	r3, #0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d10a      	bne.n	800e25e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	61fb      	str	r3, [r7, #28]
}
 800e25a:	bf00      	nop
 800e25c:	e7fe      	b.n	800e25c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e25e:	2350      	movs	r3, #80	; 0x50
 800e260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2b50      	cmp	r3, #80	; 0x50
 800e266:	d00a      	beq.n	800e27e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26c:	f383 8811 	msr	BASEPRI, r3
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	f3bf 8f4f 	dsb	sy
 800e278:	61bb      	str	r3, [r7, #24]
}
 800e27a:	bf00      	nop
 800e27c:	e7fe      	b.n	800e27c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e27e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00d      	beq.n	800e2a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	2201      	movs	r2, #1
 800e28e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e292:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	4613      	mov	r3, r2
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	68b9      	ldr	r1, [r7, #8]
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f000 f83f 	bl	800e324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3730      	adds	r7, #48	; 0x30
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08a      	sub	sp, #40	; 0x28
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10a      	bne.n	800e2da <xQueueGenericCreate+0x2a>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	613b      	str	r3, [r7, #16]
}
 800e2d6:	bf00      	nop
 800e2d8:	e7fe      	b.n	800e2d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	fb02 f303 	mul.w	r3, r2, r3
 800e2e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	3350      	adds	r3, #80	; 0x50
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f002 fbb5 	bl	8010a58 <pvPortMalloc>
 800e2ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d011      	beq.n	800e31a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	3350      	adds	r3, #80	; 0x50
 800e2fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	2200      	movs	r2, #0
 800e304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e308:	79fa      	ldrb	r2, [r7, #7]
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	4613      	mov	r3, r2
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	68b9      	ldr	r1, [r7, #8]
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 f805 	bl	800e324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e31a:	69bb      	ldr	r3, [r7, #24]
	}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3720      	adds	r7, #32
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	601a      	str	r2, [r3, #0]
 800e33e:	e002      	b.n	800e346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e352:	2101      	movs	r1, #1
 800e354:	69b8      	ldr	r0, [r7, #24]
 800e356:	f7ff fecb 	bl	800e0f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e362:	bf00      	nop
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b082      	sub	sp, #8
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00e      	beq.n	800e396 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e38a:	2300      	movs	r3, #0
 800e38c:	2200      	movs	r2, #0
 800e38e:	2100      	movs	r1, #0
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 f837 	bl	800e404 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e396:	bf00      	nop
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b086      	sub	sp, #24
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	617b      	str	r3, [r7, #20]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	6939      	ldr	r1, [r7, #16]
 800e3b6:	6978      	ldr	r0, [r7, #20]
 800e3b8:	f7ff ff7a 	bl	800e2b0 <xQueueGenericCreate>
 800e3bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff ffd3 	bl	800e36a <prvInitialiseMutex>

		return xNewQueue;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
	}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3718      	adds	r7, #24
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b088      	sub	sp, #32
 800e3d2:	af02      	add	r7, sp, #8
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	6039      	str	r1, [r7, #0]
 800e3d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	6939      	ldr	r1, [r7, #16]
 800e3ec:	6978      	ldr	r0, [r7, #20]
 800e3ee:	f7ff fee7 	bl	800e1c0 <xQueueGenericCreateStatic>
 800e3f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7ff ffb8 	bl	800e36a <prvInitialiseMutex>

		return xNewQueue;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
	}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08e      	sub	sp, #56	; 0x38
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e412:	2300      	movs	r3, #0
 800e414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10a      	bne.n	800e436 <xQueueGenericSend+0x32>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e432:	bf00      	nop
 800e434:	e7fe      	b.n	800e434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d103      	bne.n	800e444 <xQueueGenericSend+0x40>
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <xQueueGenericSend+0x44>
 800e444:	2301      	movs	r3, #1
 800e446:	e000      	b.n	800e44a <xQueueGenericSend+0x46>
 800e448:	2300      	movs	r3, #0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10a      	bne.n	800e464 <xQueueGenericSend+0x60>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b02      	cmp	r3, #2
 800e468:	d103      	bne.n	800e472 <xQueueGenericSend+0x6e>
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d101      	bne.n	800e476 <xQueueGenericSend+0x72>
 800e472:	2301      	movs	r3, #1
 800e474:	e000      	b.n	800e478 <xQueueGenericSend+0x74>
 800e476:	2300      	movs	r3, #0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d10a      	bne.n	800e492 <xQueueGenericSend+0x8e>
	__asm volatile
 800e47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e480:	f383 8811 	msr	BASEPRI, r3
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	623b      	str	r3, [r7, #32]
}
 800e48e:	bf00      	nop
 800e490:	e7fe      	b.n	800e490 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e492:	f001 f9bd 	bl	800f810 <xTaskGetSchedulerState>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <xQueueGenericSend+0x9e>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <xQueueGenericSend+0xa2>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <xQueueGenericSend+0xa4>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10a      	bne.n	800e4c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	61fb      	str	r3, [r7, #28]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4c2:	f002 f9a7 	bl	8010814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d302      	bcc.n	800e4d8 <xQueueGenericSend+0xd4>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d129      	bne.n	800e52c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4de:	f000 fa0b 	bl	800e8f8 <prvCopyDataToQueue>
 800e4e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d010      	beq.n	800e50e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	3324      	adds	r3, #36	; 0x24
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 ffcf 	bl	800f494 <xTaskRemoveFromEventList>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d013      	beq.n	800e524 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4fc:	4b3f      	ldr	r3, [pc, #252]	; (800e5fc <xQueueGenericSend+0x1f8>)
 800e4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	e00a      	b.n	800e524 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	2b00      	cmp	r3, #0
 800e512:	d007      	beq.n	800e524 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e514:	4b39      	ldr	r3, [pc, #228]	; (800e5fc <xQueueGenericSend+0x1f8>)
 800e516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e51a:	601a      	str	r2, [r3, #0]
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e524:	f002 f9a6 	bl	8010874 <vPortExitCritical>
				return pdPASS;
 800e528:	2301      	movs	r3, #1
 800e52a:	e063      	b.n	800e5f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d103      	bne.n	800e53a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e532:	f002 f99f 	bl	8010874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e536:	2300      	movs	r3, #0
 800e538:	e05c      	b.n	800e5f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e540:	f107 0314 	add.w	r3, r7, #20
 800e544:	4618      	mov	r0, r3
 800e546:	f001 f809 	bl	800f55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e54a:	2301      	movs	r3, #1
 800e54c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e54e:	f002 f991 	bl	8010874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e552:	f000 fd7b 	bl	800f04c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e556:	f002 f95d 	bl	8010814 <vPortEnterCritical>
 800e55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e560:	b25b      	sxtb	r3, r3
 800e562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e566:	d103      	bne.n	800e570 <xQueueGenericSend+0x16c>
 800e568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56a:	2200      	movs	r2, #0
 800e56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e576:	b25b      	sxtb	r3, r3
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e57c:	d103      	bne.n	800e586 <xQueueGenericSend+0x182>
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	2200      	movs	r2, #0
 800e582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e586:	f002 f975 	bl	8010874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e58a:	1d3a      	adds	r2, r7, #4
 800e58c:	f107 0314 	add.w	r3, r7, #20
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f000 fff8 	bl	800f588 <xTaskCheckForTimeOut>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d124      	bne.n	800e5e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e59e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5a0:	f000 faa2 	bl	800eae8 <prvIsQueueFull>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d018      	beq.n	800e5dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	3310      	adds	r3, #16
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 ff1e 	bl	800f3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ba:	f000 fa2d 	bl	800ea18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5be:	f000 fd53 	bl	800f068 <xTaskResumeAll>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f47f af7c 	bne.w	800e4c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e5ca:	4b0c      	ldr	r3, [pc, #48]	; (800e5fc <xQueueGenericSend+0x1f8>)
 800e5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	e772      	b.n	800e4c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5de:	f000 fa1b 	bl	800ea18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5e2:	f000 fd41 	bl	800f068 <xTaskResumeAll>
 800e5e6:	e76c      	b.n	800e4c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ea:	f000 fa15 	bl	800ea18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ee:	f000 fd3b 	bl	800f068 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3738      	adds	r7, #56	; 0x38
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	e000ed04 	.word	0xe000ed04

0800e600 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b090      	sub	sp, #64	; 0x40
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
 800e60c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d103      	bne.n	800e63c <xQueueGenericSendFromISR+0x3c>
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <xQueueGenericSendFromISR+0x40>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <xQueueGenericSendFromISR+0x42>
 800e640:	2300      	movs	r3, #0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10a      	bne.n	800e65c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e658:	bf00      	nop
 800e65a:	e7fe      	b.n	800e65a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d103      	bne.n	800e66a <xQueueGenericSendFromISR+0x6a>
 800e662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e666:	2b01      	cmp	r3, #1
 800e668:	d101      	bne.n	800e66e <xQueueGenericSendFromISR+0x6e>
 800e66a:	2301      	movs	r3, #1
 800e66c:	e000      	b.n	800e670 <xQueueGenericSendFromISR+0x70>
 800e66e:	2300      	movs	r3, #0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10a      	bne.n	800e68a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	623b      	str	r3, [r7, #32]
}
 800e686:	bf00      	nop
 800e688:	e7fe      	b.n	800e688 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e68a:	f002 f9a5 	bl	80109d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e68e:	f3ef 8211 	mrs	r2, BASEPRI
 800e692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e696:	f383 8811 	msr	BASEPRI, r3
 800e69a:	f3bf 8f6f 	isb	sy
 800e69e:	f3bf 8f4f 	dsb	sy
 800e6a2:	61fa      	str	r2, [r7, #28]
 800e6a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d302      	bcc.n	800e6bc <xQueueGenericSendFromISR+0xbc>
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b02      	cmp	r3, #2
 800e6ba:	d12f      	bne.n	800e71c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e6d2:	f000 f911 	bl	800e8f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6de:	d112      	bne.n	800e706 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d016      	beq.n	800e716 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	3324      	adds	r3, #36	; 0x24
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f000 fed1 	bl	800f494 <xTaskRemoveFromEventList>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00e      	beq.n	800e716 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e007      	b.n	800e716 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e706:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e70a:	3301      	adds	r3, #1
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	b25a      	sxtb	r2, r3
 800e710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e716:	2301      	movs	r3, #1
 800e718:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e71a:	e001      	b.n	800e720 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e722:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e72a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3740      	adds	r7, #64	; 0x40
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
	...

0800e738 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b08c      	sub	sp, #48	; 0x30
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e744:	2300      	movs	r3, #0
 800e746:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10a      	bne.n	800e768 <xQueueReceive+0x30>
	__asm volatile
 800e752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	623b      	str	r3, [r7, #32]
}
 800e764:	bf00      	nop
 800e766:	e7fe      	b.n	800e766 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d103      	bne.n	800e776 <xQueueReceive+0x3e>
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <xQueueReceive+0x42>
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <xQueueReceive+0x44>
 800e77a:	2300      	movs	r3, #0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10a      	bne.n	800e796 <xQueueReceive+0x5e>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	61fb      	str	r3, [r7, #28]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e796:	f001 f83b 	bl	800f810 <xTaskGetSchedulerState>
 800e79a:	4603      	mov	r3, r0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <xQueueReceive+0x6e>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <xQueueReceive+0x72>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	e000      	b.n	800e7ac <xQueueReceive+0x74>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10a      	bne.n	800e7c6 <xQueueReceive+0x8e>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	61bb      	str	r3, [r7, #24]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7c6:	f002 f825 	bl	8010814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d01f      	beq.n	800e816 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7da:	f000 f8f7 	bl	800e9cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e0:	1e5a      	subs	r2, r3, #1
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00f      	beq.n	800e80e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f0:	3310      	adds	r3, #16
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f000 fe4e 	bl	800f494 <xTaskRemoveFromEventList>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7fe:	4b3d      	ldr	r3, [pc, #244]	; (800e8f4 <xQueueReceive+0x1bc>)
 800e800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e804:	601a      	str	r2, [r3, #0]
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e80e:	f002 f831 	bl	8010874 <vPortExitCritical>
				return pdPASS;
 800e812:	2301      	movs	r3, #1
 800e814:	e069      	b.n	800e8ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d103      	bne.n	800e824 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e81c:	f002 f82a 	bl	8010874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e820:	2300      	movs	r3, #0
 800e822:	e062      	b.n	800e8ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d106      	bne.n	800e838 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e82a:	f107 0310 	add.w	r3, r7, #16
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 fe94 	bl	800f55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e834:	2301      	movs	r3, #1
 800e836:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e838:	f002 f81c 	bl	8010874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e83c:	f000 fc06 	bl	800f04c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e840:	f001 ffe8 	bl	8010814 <vPortEnterCritical>
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e84a:	b25b      	sxtb	r3, r3
 800e84c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e850:	d103      	bne.n	800e85a <xQueueReceive+0x122>
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	2200      	movs	r2, #0
 800e856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e860:	b25b      	sxtb	r3, r3
 800e862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e866:	d103      	bne.n	800e870 <xQueueReceive+0x138>
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e870:	f002 f800 	bl	8010874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e874:	1d3a      	adds	r2, r7, #4
 800e876:	f107 0310 	add.w	r3, r7, #16
 800e87a:	4611      	mov	r1, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 fe83 	bl	800f588 <xTaskCheckForTimeOut>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d123      	bne.n	800e8d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e88a:	f000 f917 	bl	800eabc <prvIsQueueEmpty>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d017      	beq.n	800e8c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	3324      	adds	r3, #36	; 0x24
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	4611      	mov	r1, r2
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 fda9 	bl	800f3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8a4:	f000 f8b8 	bl	800ea18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8a8:	f000 fbde 	bl	800f068 <xTaskResumeAll>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d189      	bne.n	800e7c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e8b2:	4b10      	ldr	r3, [pc, #64]	; (800e8f4 <xQueueReceive+0x1bc>)
 800e8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	e780      	b.n	800e7c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c6:	f000 f8a7 	bl	800ea18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8ca:	f000 fbcd 	bl	800f068 <xTaskResumeAll>
 800e8ce:	e77a      	b.n	800e7c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e8d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d2:	f000 f8a1 	bl	800ea18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8d6:	f000 fbc7 	bl	800f068 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8dc:	f000 f8ee 	bl	800eabc <prvIsQueueEmpty>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f43f af6f 	beq.w	800e7c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e8e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3730      	adds	r7, #48	; 0x30
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	e000ed04 	.word	0xe000ed04

0800e8f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e904:	2300      	movs	r3, #0
 800e906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10d      	bne.n	800e932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d14d      	bne.n	800e9ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	4618      	mov	r0, r3
 800e924:	f000 ff92 	bl	800f84c <xTaskPriorityDisinherit>
 800e928:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	609a      	str	r2, [r3, #8]
 800e930:	e043      	b.n	800e9ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d119      	bne.n	800e96c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6858      	ldr	r0, [r3, #4]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e940:	461a      	mov	r2, r3
 800e942:	68b9      	ldr	r1, [r7, #8]
 800e944:	f003 fc0c 	bl	8012160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	685a      	ldr	r2, [r3, #4]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e950:	441a      	add	r2, r3
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	685a      	ldr	r2, [r3, #4]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d32b      	bcc.n	800e9ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	605a      	str	r2, [r3, #4]
 800e96a:	e026      	b.n	800e9ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	68d8      	ldr	r0, [r3, #12]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e974:	461a      	mov	r2, r3
 800e976:	68b9      	ldr	r1, [r7, #8]
 800e978:	f003 fbf2 	bl	8012160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	68da      	ldr	r2, [r3, #12]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e984:	425b      	negs	r3, r3
 800e986:	441a      	add	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	429a      	cmp	r2, r3
 800e996:	d207      	bcs.n	800e9a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	689a      	ldr	r2, [r3, #8]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a0:	425b      	negs	r3, r3
 800e9a2:	441a      	add	r2, r3
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d105      	bne.n	800e9ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	1c5a      	adds	r2, r3, #1
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e9c2:	697b      	ldr	r3, [r7, #20]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d018      	beq.n	800ea10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e6:	441a      	add	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d303      	bcc.n	800ea00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68d9      	ldr	r1, [r3, #12]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6838      	ldr	r0, [r7, #0]
 800ea0c:	f003 fba8 	bl	8012160 <memcpy>
	}
}
 800ea10:	bf00      	nop
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea20:	f001 fef8 	bl	8010814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea2c:	e011      	b.n	800ea52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d012      	beq.n	800ea5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3324      	adds	r3, #36	; 0x24
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 fd2a 	bl	800f494 <xTaskRemoveFromEventList>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ea46:	f000 fe01 	bl	800f64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	dce9      	bgt.n	800ea2e <prvUnlockQueue+0x16>
 800ea5a:	e000      	b.n	800ea5e <prvUnlockQueue+0x46>
					break;
 800ea5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	22ff      	movs	r2, #255	; 0xff
 800ea62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea66:	f001 ff05 	bl	8010874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea6a:	f001 fed3 	bl	8010814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea76:	e011      	b.n	800ea9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	691b      	ldr	r3, [r3, #16]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d012      	beq.n	800eaa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	3310      	adds	r3, #16
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 fd05 	bl	800f494 <xTaskRemoveFromEventList>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d001      	beq.n	800ea94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea90:	f000 fddc 	bl	800f64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
 800ea96:	3b01      	subs	r3, #1
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dce9      	bgt.n	800ea78 <prvUnlockQueue+0x60>
 800eaa4:	e000      	b.n	800eaa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eaa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	22ff      	movs	r2, #255	; 0xff
 800eaac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eab0:	f001 fee0 	bl	8010874 <vPortExitCritical>
}
 800eab4:	bf00      	nop
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eac4:	f001 fea6 	bl	8010814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d102      	bne.n	800ead6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ead0:	2301      	movs	r3, #1
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	e001      	b.n	800eada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ead6:	2300      	movs	r3, #0
 800ead8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eada:	f001 fecb 	bl	8010874 <vPortExitCritical>

	return xReturn;
 800eade:	68fb      	ldr	r3, [r7, #12]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eaf0:	f001 fe90 	bl	8010814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d102      	bne.n	800eb06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb00:	2301      	movs	r3, #1
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	e001      	b.n	800eb0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb06:	2300      	movs	r3, #0
 800eb08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb0a:	f001 feb3 	bl	8010874 <vPortExitCritical>

	return xReturn;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb22:	2300      	movs	r3, #0
 800eb24:	60fb      	str	r3, [r7, #12]
 800eb26:	e014      	b.n	800eb52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb28:	4a0f      	ldr	r2, [pc, #60]	; (800eb68 <vQueueAddToRegistry+0x50>)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10b      	bne.n	800eb4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb34:	490c      	ldr	r1, [pc, #48]	; (800eb68 <vQueueAddToRegistry+0x50>)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb3e:	4a0a      	ldr	r2, [pc, #40]	; (800eb68 <vQueueAddToRegistry+0x50>)
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	4413      	add	r3, r2
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eb4a:	e006      	b.n	800eb5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2b07      	cmp	r3, #7
 800eb56:	d9e7      	bls.n	800eb28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb58:	bf00      	nop
 800eb5a:	bf00      	nop
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	20003ea8 	.word	0x20003ea8

0800eb6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b086      	sub	sp, #24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb7c:	f001 fe4a 	bl	8010814 <vPortEnterCritical>
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb86:	b25b      	sxtb	r3, r3
 800eb88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb8c:	d103      	bne.n	800eb96 <vQueueWaitForMessageRestricted+0x2a>
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb9c:	b25b      	sxtb	r3, r3
 800eb9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eba2:	d103      	bne.n	800ebac <vQueueWaitForMessageRestricted+0x40>
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebac:	f001 fe62 	bl	8010874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d106      	bne.n	800ebc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	3324      	adds	r3, #36	; 0x24
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	68b9      	ldr	r1, [r7, #8]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 fc3b 	bl	800f43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ebc6:	6978      	ldr	r0, [r7, #20]
 800ebc8:	f7ff ff26 	bl	800ea18 <prvUnlockQueue>
	}
 800ebcc:	bf00      	nop
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b08e      	sub	sp, #56	; 0x38
 800ebd8:	af04      	add	r7, sp, #16
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
 800ebe0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ebe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10a      	bne.n	800ebfe <xTaskCreateStatic+0x2a>
	__asm volatile
 800ebe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebec:	f383 8811 	msr	BASEPRI, r3
 800ebf0:	f3bf 8f6f 	isb	sy
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	623b      	str	r3, [r7, #32]
}
 800ebfa:	bf00      	nop
 800ebfc:	e7fe      	b.n	800ebfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10a      	bne.n	800ec1a <xTaskCreateStatic+0x46>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec08:	f383 8811 	msr	BASEPRI, r3
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	f3bf 8f4f 	dsb	sy
 800ec14:	61fb      	str	r3, [r7, #28]
}
 800ec16:	bf00      	nop
 800ec18:	e7fe      	b.n	800ec18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec1a:	235c      	movs	r3, #92	; 0x5c
 800ec1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2b5c      	cmp	r3, #92	; 0x5c
 800ec22:	d00a      	beq.n	800ec3a <xTaskCreateStatic+0x66>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	61bb      	str	r3, [r7, #24]
}
 800ec36:	bf00      	nop
 800ec38:	e7fe      	b.n	800ec38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d01e      	beq.n	800ec80 <xTaskCreateStatic+0xac>
 800ec42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d01b      	beq.n	800ec80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec54:	2202      	movs	r2, #2
 800ec56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	9303      	str	r3, [sp, #12]
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec60:	9302      	str	r3, [sp, #8]
 800ec62:	f107 0314 	add.w	r3, r7, #20
 800ec66:	9301      	str	r3, [sp, #4]
 800ec68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	68b9      	ldr	r1, [r7, #8]
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 f850 	bl	800ed18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec7a:	f000 f8dd 	bl	800ee38 <prvAddNewTaskToReadyList>
 800ec7e:	e001      	b.n	800ec84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ec80:	2300      	movs	r3, #0
 800ec82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec84:	697b      	ldr	r3, [r7, #20]
	}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3728      	adds	r7, #40	; 0x28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b08c      	sub	sp, #48	; 0x30
 800ec92:	af04      	add	r7, sp, #16
 800ec94:	60f8      	str	r0, [r7, #12]
 800ec96:	60b9      	str	r1, [r7, #8]
 800ec98:	603b      	str	r3, [r7, #0]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f001 fed8 	bl	8010a58 <pvPortMalloc>
 800eca8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00e      	beq.n	800ecce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ecb0:	205c      	movs	r0, #92	; 0x5c
 800ecb2:	f001 fed1 	bl	8010a58 <pvPortMalloc>
 800ecb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	631a      	str	r2, [r3, #48]	; 0x30
 800ecc4:	e005      	b.n	800ecd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ecc6:	6978      	ldr	r0, [r7, #20]
 800ecc8:	f001 ff92 	bl	8010bf0 <vPortFree>
 800eccc:	e001      	b.n	800ecd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d017      	beq.n	800ed08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ece0:	88fa      	ldrh	r2, [r7, #6]
 800ece2:	2300      	movs	r3, #0
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	9302      	str	r3, [sp, #8]
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	9301      	str	r3, [sp, #4]
 800ecee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	68b9      	ldr	r1, [r7, #8]
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f000 f80e 	bl	800ed18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecfc:	69f8      	ldr	r0, [r7, #28]
 800ecfe:	f000 f89b 	bl	800ee38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed02:	2301      	movs	r3, #1
 800ed04:	61bb      	str	r3, [r7, #24]
 800ed06:	e002      	b.n	800ed0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3720      	adds	r7, #32
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b088      	sub	sp, #32
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
 800ed24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	461a      	mov	r2, r3
 800ed30:	21a5      	movs	r1, #165	; 0xa5
 800ed32:	f003 fa23 	bl	801217c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed40:	3b01      	subs	r3, #1
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4413      	add	r3, r2
 800ed46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	f023 0307 	bic.w	r3, r3, #7
 800ed4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	f003 0307 	and.w	r3, r3, #7
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00a      	beq.n	800ed70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	617b      	str	r3, [r7, #20]
}
 800ed6c:	bf00      	nop
 800ed6e:	e7fe      	b.n	800ed6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d01f      	beq.n	800edb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed76:	2300      	movs	r3, #0
 800ed78:	61fb      	str	r3, [r7, #28]
 800ed7a:	e012      	b.n	800eda2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	4413      	add	r3, r2
 800ed82:	7819      	ldrb	r1, [r3, #0]
 800ed84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	4413      	add	r3, r2
 800ed8a:	3334      	adds	r3, #52	; 0x34
 800ed8c:	460a      	mov	r2, r1
 800ed8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	4413      	add	r3, r2
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d006      	beq.n	800edaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	61fb      	str	r3, [r7, #28]
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	2b0f      	cmp	r3, #15
 800eda6:	d9e9      	bls.n	800ed7c <prvInitialiseNewTask+0x64>
 800eda8:	e000      	b.n	800edac <prvInitialiseNewTask+0x94>
			{
				break;
 800edaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800edac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800edb4:	e003      	b.n	800edbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	2b37      	cmp	r3, #55	; 0x37
 800edc2:	d901      	bls.n	800edc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800edc4:	2337      	movs	r3, #55	; 0x37
 800edc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	2200      	movs	r2, #0
 800edd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eddc:	3304      	adds	r3, #4
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff f8f2 	bl	800dfc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ede4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede6:	3318      	adds	r3, #24
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff f8ed 	bl	800dfc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800edee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee06:	2200      	movs	r2, #0
 800ee08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee12:	683a      	ldr	r2, [r7, #0]
 800ee14:	68f9      	ldr	r1, [r7, #12]
 800ee16:	69b8      	ldr	r0, [r7, #24]
 800ee18:	f001 fbd0 	bl	80105bc <pxPortInitialiseStack>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d002      	beq.n	800ee2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee2e:	bf00      	nop
 800ee30:	3720      	adds	r7, #32
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
	...

0800ee38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee40:	f001 fce8 	bl	8010814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee44:	4b2d      	ldr	r3, [pc, #180]	; (800eefc <prvAddNewTaskToReadyList+0xc4>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	3301      	adds	r3, #1
 800ee4a:	4a2c      	ldr	r2, [pc, #176]	; (800eefc <prvAddNewTaskToReadyList+0xc4>)
 800ee4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee4e:	4b2c      	ldr	r3, [pc, #176]	; (800ef00 <prvAddNewTaskToReadyList+0xc8>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d109      	bne.n	800ee6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee56:	4a2a      	ldr	r2, [pc, #168]	; (800ef00 <prvAddNewTaskToReadyList+0xc8>)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee5c:	4b27      	ldr	r3, [pc, #156]	; (800eefc <prvAddNewTaskToReadyList+0xc4>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d110      	bne.n	800ee86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee64:	f000 fc16 	bl	800f694 <prvInitialiseTaskLists>
 800ee68:	e00d      	b.n	800ee86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee6a:	4b26      	ldr	r3, [pc, #152]	; (800ef04 <prvAddNewTaskToReadyList+0xcc>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d109      	bne.n	800ee86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee72:	4b23      	ldr	r3, [pc, #140]	; (800ef00 <prvAddNewTaskToReadyList+0xc8>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d802      	bhi.n	800ee86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee80:	4a1f      	ldr	r2, [pc, #124]	; (800ef00 <prvAddNewTaskToReadyList+0xc8>)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee86:	4b20      	ldr	r3, [pc, #128]	; (800ef08 <prvAddNewTaskToReadyList+0xd0>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	4a1e      	ldr	r2, [pc, #120]	; (800ef08 <prvAddNewTaskToReadyList+0xd0>)
 800ee8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee90:	4b1d      	ldr	r3, [pc, #116]	; (800ef08 <prvAddNewTaskToReadyList+0xd0>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9c:	4b1b      	ldr	r3, [pc, #108]	; (800ef0c <prvAddNewTaskToReadyList+0xd4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d903      	bls.n	800eeac <prvAddNewTaskToReadyList+0x74>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea8:	4a18      	ldr	r2, [pc, #96]	; (800ef0c <prvAddNewTaskToReadyList+0xd4>)
 800eeaa:	6013      	str	r3, [r2, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4a15      	ldr	r2, [pc, #84]	; (800ef10 <prvAddNewTaskToReadyList+0xd8>)
 800eeba:	441a      	add	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3304      	adds	r3, #4
 800eec0:	4619      	mov	r1, r3
 800eec2:	4610      	mov	r0, r2
 800eec4:	f7ff f88d 	bl	800dfe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eec8:	f001 fcd4 	bl	8010874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eecc:	4b0d      	ldr	r3, [pc, #52]	; (800ef04 <prvAddNewTaskToReadyList+0xcc>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00e      	beq.n	800eef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eed4:	4b0a      	ldr	r3, [pc, #40]	; (800ef00 <prvAddNewTaskToReadyList+0xc8>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eede:	429a      	cmp	r2, r3
 800eee0:	d207      	bcs.n	800eef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eee2:	4b0c      	ldr	r3, [pc, #48]	; (800ef14 <prvAddNewTaskToReadyList+0xdc>)
 800eee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee8:	601a      	str	r2, [r3, #0]
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eef2:	bf00      	nop
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20001060 	.word	0x20001060
 800ef00:	20000b8c 	.word	0x20000b8c
 800ef04:	2000106c 	.word	0x2000106c
 800ef08:	2000107c 	.word	0x2000107c
 800ef0c:	20001068 	.word	0x20001068
 800ef10:	20000b90 	.word	0x20000b90
 800ef14:	e000ed04 	.word	0xe000ed04

0800ef18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef20:	2300      	movs	r3, #0
 800ef22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d017      	beq.n	800ef5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef2a:	4b13      	ldr	r3, [pc, #76]	; (800ef78 <vTaskDelay+0x60>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d00a      	beq.n	800ef48 <vTaskDelay+0x30>
	__asm volatile
 800ef32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef36:	f383 8811 	msr	BASEPRI, r3
 800ef3a:	f3bf 8f6f 	isb	sy
 800ef3e:	f3bf 8f4f 	dsb	sy
 800ef42:	60bb      	str	r3, [r7, #8]
}
 800ef44:	bf00      	nop
 800ef46:	e7fe      	b.n	800ef46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ef48:	f000 f880 	bl	800f04c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 fed8 	bl	800fd04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef54:	f000 f888 	bl	800f068 <xTaskResumeAll>
 800ef58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d107      	bne.n	800ef70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ef60:	4b06      	ldr	r3, [pc, #24]	; (800ef7c <vTaskDelay+0x64>)
 800ef62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef70:	bf00      	nop
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	20001088 	.word	0x20001088
 800ef7c:	e000ed04 	.word	0xe000ed04

0800ef80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b08a      	sub	sp, #40	; 0x28
 800ef84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef8e:	463a      	mov	r2, r7
 800ef90:	1d39      	adds	r1, r7, #4
 800ef92:	f107 0308 	add.w	r3, r7, #8
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fe ffc2 	bl	800df20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	9202      	str	r2, [sp, #8]
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	2300      	movs	r3, #0
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	2300      	movs	r3, #0
 800efac:	460a      	mov	r2, r1
 800efae:	4921      	ldr	r1, [pc, #132]	; (800f034 <vTaskStartScheduler+0xb4>)
 800efb0:	4821      	ldr	r0, [pc, #132]	; (800f038 <vTaskStartScheduler+0xb8>)
 800efb2:	f7ff fe0f 	bl	800ebd4 <xTaskCreateStatic>
 800efb6:	4603      	mov	r3, r0
 800efb8:	4a20      	ldr	r2, [pc, #128]	; (800f03c <vTaskStartScheduler+0xbc>)
 800efba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800efbc:	4b1f      	ldr	r3, [pc, #124]	; (800f03c <vTaskStartScheduler+0xbc>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800efc4:	2301      	movs	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	e001      	b.n	800efce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800efca:	2300      	movs	r3, #0
 800efcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d102      	bne.n	800efda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800efd4:	f000 feea 	bl	800fdac <xTimerCreateTimerTask>
 800efd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d116      	bne.n	800f00e <vTaskStartScheduler+0x8e>
	__asm volatile
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	613b      	str	r3, [r7, #16]
}
 800eff2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eff4:	4b12      	ldr	r3, [pc, #72]	; (800f040 <vTaskStartScheduler+0xc0>)
 800eff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800effa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800effc:	4b11      	ldr	r3, [pc, #68]	; (800f044 <vTaskStartScheduler+0xc4>)
 800effe:	2201      	movs	r2, #1
 800f000:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f002:	4b11      	ldr	r3, [pc, #68]	; (800f048 <vTaskStartScheduler+0xc8>)
 800f004:	2200      	movs	r2, #0
 800f006:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f008:	f001 fb62 	bl	80106d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f00c:	e00e      	b.n	800f02c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f014:	d10a      	bne.n	800f02c <vTaskStartScheduler+0xac>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	60fb      	str	r3, [r7, #12]
}
 800f028:	bf00      	nop
 800f02a:	e7fe      	b.n	800f02a <vTaskStartScheduler+0xaa>
}
 800f02c:	bf00      	nop
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	08012224 	.word	0x08012224
 800f038:	0800f665 	.word	0x0800f665
 800f03c:	20001084 	.word	0x20001084
 800f040:	20001080 	.word	0x20001080
 800f044:	2000106c 	.word	0x2000106c
 800f048:	20001064 	.word	0x20001064

0800f04c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f04c:	b480      	push	{r7}
 800f04e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f050:	4b04      	ldr	r3, [pc, #16]	; (800f064 <vTaskSuspendAll+0x18>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	3301      	adds	r3, #1
 800f056:	4a03      	ldr	r2, [pc, #12]	; (800f064 <vTaskSuspendAll+0x18>)
 800f058:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f05a:	bf00      	nop
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr
 800f064:	20001088 	.word	0x20001088

0800f068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f072:	2300      	movs	r3, #0
 800f074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f076:	4b42      	ldr	r3, [pc, #264]	; (800f180 <xTaskResumeAll+0x118>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10a      	bne.n	800f094 <xTaskResumeAll+0x2c>
	__asm volatile
 800f07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	603b      	str	r3, [r7, #0]
}
 800f090:	bf00      	nop
 800f092:	e7fe      	b.n	800f092 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f094:	f001 fbbe 	bl	8010814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f098:	4b39      	ldr	r3, [pc, #228]	; (800f180 <xTaskResumeAll+0x118>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	4a38      	ldr	r2, [pc, #224]	; (800f180 <xTaskResumeAll+0x118>)
 800f0a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0a2:	4b37      	ldr	r3, [pc, #220]	; (800f180 <xTaskResumeAll+0x118>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d162      	bne.n	800f170 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f0aa:	4b36      	ldr	r3, [pc, #216]	; (800f184 <xTaskResumeAll+0x11c>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d05e      	beq.n	800f170 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0b2:	e02f      	b.n	800f114 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0b4:	4b34      	ldr	r3, [pc, #208]	; (800f188 <xTaskResumeAll+0x120>)
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	3318      	adds	r3, #24
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe ffeb 	bl	800e09c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fe ffe6 	bl	800e09c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d4:	4b2d      	ldr	r3, [pc, #180]	; (800f18c <xTaskResumeAll+0x124>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d903      	bls.n	800f0e4 <xTaskResumeAll+0x7c>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e0:	4a2a      	ldr	r2, [pc, #168]	; (800f18c <xTaskResumeAll+0x124>)
 800f0e2:	6013      	str	r3, [r2, #0]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4413      	add	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4a27      	ldr	r2, [pc, #156]	; (800f190 <xTaskResumeAll+0x128>)
 800f0f2:	441a      	add	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	f7fe ff71 	bl	800dfe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f104:	4b23      	ldr	r3, [pc, #140]	; (800f194 <xTaskResumeAll+0x12c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d302      	bcc.n	800f114 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f10e:	4b22      	ldr	r3, [pc, #136]	; (800f198 <xTaskResumeAll+0x130>)
 800f110:	2201      	movs	r2, #1
 800f112:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f114:	4b1c      	ldr	r3, [pc, #112]	; (800f188 <xTaskResumeAll+0x120>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1cb      	bne.n	800f0b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d001      	beq.n	800f126 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f122:	f000 fb55 	bl	800f7d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f126:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <xTaskResumeAll+0x134>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d010      	beq.n	800f154 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f132:	f000 f847 	bl	800f1c4 <xTaskIncrementTick>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f13c:	4b16      	ldr	r3, [pc, #88]	; (800f198 <xTaskResumeAll+0x130>)
 800f13e:	2201      	movs	r2, #1
 800f140:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	3b01      	subs	r3, #1
 800f146:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1f1      	bne.n	800f132 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f14e:	4b13      	ldr	r3, [pc, #76]	; (800f19c <xTaskResumeAll+0x134>)
 800f150:	2200      	movs	r2, #0
 800f152:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f154:	4b10      	ldr	r3, [pc, #64]	; (800f198 <xTaskResumeAll+0x130>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d009      	beq.n	800f170 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f15c:	2301      	movs	r3, #1
 800f15e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f160:	4b0f      	ldr	r3, [pc, #60]	; (800f1a0 <xTaskResumeAll+0x138>)
 800f162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f170:	f001 fb80 	bl	8010874 <vPortExitCritical>

	return xAlreadyYielded;
 800f174:	68bb      	ldr	r3, [r7, #8]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	20001088 	.word	0x20001088
 800f184:	20001060 	.word	0x20001060
 800f188:	20001020 	.word	0x20001020
 800f18c:	20001068 	.word	0x20001068
 800f190:	20000b90 	.word	0x20000b90
 800f194:	20000b8c 	.word	0x20000b8c
 800f198:	20001074 	.word	0x20001074
 800f19c:	20001070 	.word	0x20001070
 800f1a0:	e000ed04 	.word	0xe000ed04

0800f1a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f1aa:	4b05      	ldr	r3, [pc, #20]	; (800f1c0 <xTaskGetTickCount+0x1c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f1b0:	687b      	ldr	r3, [r7, #4]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	370c      	adds	r7, #12
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	20001064 	.word	0x20001064

0800f1c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1ce:	4b4f      	ldr	r3, [pc, #316]	; (800f30c <xTaskIncrementTick+0x148>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f040 808f 	bne.w	800f2f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f1d8:	4b4d      	ldr	r3, [pc, #308]	; (800f310 <xTaskIncrementTick+0x14c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1e0:	4a4b      	ldr	r2, [pc, #300]	; (800f310 <xTaskIncrementTick+0x14c>)
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d120      	bne.n	800f22e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1ec:	4b49      	ldr	r3, [pc, #292]	; (800f314 <xTaskIncrementTick+0x150>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00a      	beq.n	800f20c <xTaskIncrementTick+0x48>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	603b      	str	r3, [r7, #0]
}
 800f208:	bf00      	nop
 800f20a:	e7fe      	b.n	800f20a <xTaskIncrementTick+0x46>
 800f20c:	4b41      	ldr	r3, [pc, #260]	; (800f314 <xTaskIncrementTick+0x150>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	4b41      	ldr	r3, [pc, #260]	; (800f318 <xTaskIncrementTick+0x154>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4a3f      	ldr	r2, [pc, #252]	; (800f314 <xTaskIncrementTick+0x150>)
 800f218:	6013      	str	r3, [r2, #0]
 800f21a:	4a3f      	ldr	r2, [pc, #252]	; (800f318 <xTaskIncrementTick+0x154>)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6013      	str	r3, [r2, #0]
 800f220:	4b3e      	ldr	r3, [pc, #248]	; (800f31c <xTaskIncrementTick+0x158>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	3301      	adds	r3, #1
 800f226:	4a3d      	ldr	r2, [pc, #244]	; (800f31c <xTaskIncrementTick+0x158>)
 800f228:	6013      	str	r3, [r2, #0]
 800f22a:	f000 fad1 	bl	800f7d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f22e:	4b3c      	ldr	r3, [pc, #240]	; (800f320 <xTaskIncrementTick+0x15c>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	429a      	cmp	r2, r3
 800f236:	d349      	bcc.n	800f2cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f238:	4b36      	ldr	r3, [pc, #216]	; (800f314 <xTaskIncrementTick+0x150>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d104      	bne.n	800f24c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f242:	4b37      	ldr	r3, [pc, #220]	; (800f320 <xTaskIncrementTick+0x15c>)
 800f244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f248:	601a      	str	r2, [r3, #0]
					break;
 800f24a:	e03f      	b.n	800f2cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f24c:	4b31      	ldr	r3, [pc, #196]	; (800f314 <xTaskIncrementTick+0x150>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	429a      	cmp	r2, r3
 800f262:	d203      	bcs.n	800f26c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f264:	4a2e      	ldr	r2, [pc, #184]	; (800f320 <xTaskIncrementTick+0x15c>)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f26a:	e02f      	b.n	800f2cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	3304      	adds	r3, #4
 800f270:	4618      	mov	r0, r3
 800f272:	f7fe ff13 	bl	800e09c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	3318      	adds	r3, #24
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe ff0a 	bl	800e09c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f28c:	4b25      	ldr	r3, [pc, #148]	; (800f324 <xTaskIncrementTick+0x160>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	429a      	cmp	r2, r3
 800f292:	d903      	bls.n	800f29c <xTaskIncrementTick+0xd8>
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f298:	4a22      	ldr	r2, [pc, #136]	; (800f324 <xTaskIncrementTick+0x160>)
 800f29a:	6013      	str	r3, [r2, #0]
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	4413      	add	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4a1f      	ldr	r2, [pc, #124]	; (800f328 <xTaskIncrementTick+0x164>)
 800f2aa:	441a      	add	r2, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	f7fe fe95 	bl	800dfe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2bc:	4b1b      	ldr	r3, [pc, #108]	; (800f32c <xTaskIncrementTick+0x168>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d3b8      	bcc.n	800f238 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2ca:	e7b5      	b.n	800f238 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f2cc:	4b17      	ldr	r3, [pc, #92]	; (800f32c <xTaskIncrementTick+0x168>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d2:	4915      	ldr	r1, [pc, #84]	; (800f328 <xTaskIncrementTick+0x164>)
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	440b      	add	r3, r1
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d901      	bls.n	800f2e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f2e8:	4b11      	ldr	r3, [pc, #68]	; (800f330 <xTaskIncrementTick+0x16c>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d007      	beq.n	800f300 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	617b      	str	r3, [r7, #20]
 800f2f4:	e004      	b.n	800f300 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f2f6:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <xTaskIncrementTick+0x170>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	4a0d      	ldr	r2, [pc, #52]	; (800f334 <xTaskIncrementTick+0x170>)
 800f2fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f300:	697b      	ldr	r3, [r7, #20]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3718      	adds	r7, #24
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20001088 	.word	0x20001088
 800f310:	20001064 	.word	0x20001064
 800f314:	20001018 	.word	0x20001018
 800f318:	2000101c 	.word	0x2000101c
 800f31c:	20001078 	.word	0x20001078
 800f320:	20001080 	.word	0x20001080
 800f324:	20001068 	.word	0x20001068
 800f328:	20000b90 	.word	0x20000b90
 800f32c:	20000b8c 	.word	0x20000b8c
 800f330:	20001074 	.word	0x20001074
 800f334:	20001070 	.word	0x20001070

0800f338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f33e:	4b28      	ldr	r3, [pc, #160]	; (800f3e0 <vTaskSwitchContext+0xa8>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d003      	beq.n	800f34e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f346:	4b27      	ldr	r3, [pc, #156]	; (800f3e4 <vTaskSwitchContext+0xac>)
 800f348:	2201      	movs	r2, #1
 800f34a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f34c:	e041      	b.n	800f3d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f34e:	4b25      	ldr	r3, [pc, #148]	; (800f3e4 <vTaskSwitchContext+0xac>)
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f354:	4b24      	ldr	r3, [pc, #144]	; (800f3e8 <vTaskSwitchContext+0xb0>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60fb      	str	r3, [r7, #12]
 800f35a:	e010      	b.n	800f37e <vTaskSwitchContext+0x46>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10a      	bne.n	800f378 <vTaskSwitchContext+0x40>
	__asm volatile
 800f362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	607b      	str	r3, [r7, #4]
}
 800f374:	bf00      	nop
 800f376:	e7fe      	b.n	800f376 <vTaskSwitchContext+0x3e>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	60fb      	str	r3, [r7, #12]
 800f37e:	491b      	ldr	r1, [pc, #108]	; (800f3ec <vTaskSwitchContext+0xb4>)
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	440b      	add	r3, r1
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d0e4      	beq.n	800f35c <vTaskSwitchContext+0x24>
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	4613      	mov	r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4a13      	ldr	r2, [pc, #76]	; (800f3ec <vTaskSwitchContext+0xb4>)
 800f39e:	4413      	add	r3, r2
 800f3a0:	60bb      	str	r3, [r7, #8]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	605a      	str	r2, [r3, #4]
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	685a      	ldr	r2, [r3, #4]
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d104      	bne.n	800f3c2 <vTaskSwitchContext+0x8a>
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	605a      	str	r2, [r3, #4]
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	4a09      	ldr	r2, [pc, #36]	; (800f3f0 <vTaskSwitchContext+0xb8>)
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	4a06      	ldr	r2, [pc, #24]	; (800f3e8 <vTaskSwitchContext+0xb0>)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6013      	str	r3, [r2, #0]
}
 800f3d2:	bf00      	nop
 800f3d4:	3714      	adds	r7, #20
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	20001088 	.word	0x20001088
 800f3e4:	20001074 	.word	0x20001074
 800f3e8:	20001068 	.word	0x20001068
 800f3ec:	20000b90 	.word	0x20000b90
 800f3f0:	20000b8c 	.word	0x20000b8c

0800f3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	60fb      	str	r3, [r7, #12]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f41a:	4b07      	ldr	r3, [pc, #28]	; (800f438 <vTaskPlaceOnEventList+0x44>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3318      	adds	r3, #24
 800f420:	4619      	mov	r1, r3
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7fe fe01 	bl	800e02a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f428:	2101      	movs	r1, #1
 800f42a:	6838      	ldr	r0, [r7, #0]
 800f42c:	f000 fc6a 	bl	800fd04 <prvAddCurrentTaskToDelayedList>
}
 800f430:	bf00      	nop
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	20000b8c 	.word	0x20000b8c

0800f43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10a      	bne.n	800f464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	617b      	str	r3, [r7, #20]
}
 800f460:	bf00      	nop
 800f462:	e7fe      	b.n	800f462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f464:	4b0a      	ldr	r3, [pc, #40]	; (800f490 <vTaskPlaceOnEventListRestricted+0x54>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	3318      	adds	r3, #24
 800f46a:	4619      	mov	r1, r3
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f7fe fdb8 	bl	800dfe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f47c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f47e:	6879      	ldr	r1, [r7, #4]
 800f480:	68b8      	ldr	r0, [r7, #8]
 800f482:	f000 fc3f 	bl	800fd04 <prvAddCurrentTaskToDelayedList>
	}
 800f486:	bf00      	nop
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20000b8c 	.word	0x20000b8c

0800f494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10a      	bne.n	800f4c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	60fb      	str	r3, [r7, #12]
}
 800f4bc:	bf00      	nop
 800f4be:	e7fe      	b.n	800f4be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	3318      	adds	r3, #24
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fe fde9 	bl	800e09c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ca:	4b1e      	ldr	r3, [pc, #120]	; (800f544 <xTaskRemoveFromEventList+0xb0>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d11d      	bne.n	800f50e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	3304      	adds	r3, #4
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fe fde0 	bl	800e09c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e0:	4b19      	ldr	r3, [pc, #100]	; (800f548 <xTaskRemoveFromEventList+0xb4>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d903      	bls.n	800f4f0 <xTaskRemoveFromEventList+0x5c>
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ec:	4a16      	ldr	r2, [pc, #88]	; (800f548 <xTaskRemoveFromEventList+0xb4>)
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4a13      	ldr	r2, [pc, #76]	; (800f54c <xTaskRemoveFromEventList+0xb8>)
 800f4fe:	441a      	add	r2, r3
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	3304      	adds	r3, #4
 800f504:	4619      	mov	r1, r3
 800f506:	4610      	mov	r0, r2
 800f508:	f7fe fd6b 	bl	800dfe2 <vListInsertEnd>
 800f50c:	e005      	b.n	800f51a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	3318      	adds	r3, #24
 800f512:	4619      	mov	r1, r3
 800f514:	480e      	ldr	r0, [pc, #56]	; (800f550 <xTaskRemoveFromEventList+0xbc>)
 800f516:	f7fe fd64 	bl	800dfe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f51e:	4b0d      	ldr	r3, [pc, #52]	; (800f554 <xTaskRemoveFromEventList+0xc0>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f524:	429a      	cmp	r2, r3
 800f526:	d905      	bls.n	800f534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f52c:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <xTaskRemoveFromEventList+0xc4>)
 800f52e:	2201      	movs	r2, #1
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	e001      	b.n	800f538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f534:	2300      	movs	r3, #0
 800f536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f538:	697b      	ldr	r3, [r7, #20]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	20001088 	.word	0x20001088
 800f548:	20001068 	.word	0x20001068
 800f54c:	20000b90 	.word	0x20000b90
 800f550:	20001020 	.word	0x20001020
 800f554:	20000b8c 	.word	0x20000b8c
 800f558:	20001074 	.word	0x20001074

0800f55c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f564:	4b06      	ldr	r3, [pc, #24]	; (800f580 <vTaskInternalSetTimeOutState+0x24>)
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <vTaskInternalSetTimeOutState+0x28>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	605a      	str	r2, [r3, #4]
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	20001078 	.word	0x20001078
 800f584:	20001064 	.word	0x20001064

0800f588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10a      	bne.n	800f5ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	613b      	str	r3, [r7, #16]
}
 800f5aa:	bf00      	nop
 800f5ac:	e7fe      	b.n	800f5ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10a      	bne.n	800f5ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	f383 8811 	msr	BASEPRI, r3
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	f3bf 8f4f 	dsb	sy
 800f5c4:	60fb      	str	r3, [r7, #12]
}
 800f5c6:	bf00      	nop
 800f5c8:	e7fe      	b.n	800f5c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f5ca:	f001 f923 	bl	8010814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f5ce:	4b1d      	ldr	r3, [pc, #116]	; (800f644 <xTaskCheckForTimeOut+0xbc>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	69ba      	ldr	r2, [r7, #24]
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5e6:	d102      	bne.n	800f5ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	61fb      	str	r3, [r7, #28]
 800f5ec:	e023      	b.n	800f636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	4b15      	ldr	r3, [pc, #84]	; (800f648 <xTaskCheckForTimeOut+0xc0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d007      	beq.n	800f60a <xTaskCheckForTimeOut+0x82>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	69ba      	ldr	r2, [r7, #24]
 800f600:	429a      	cmp	r2, r3
 800f602:	d302      	bcc.n	800f60a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f604:	2301      	movs	r3, #1
 800f606:	61fb      	str	r3, [r7, #28]
 800f608:	e015      	b.n	800f636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	697a      	ldr	r2, [r7, #20]
 800f610:	429a      	cmp	r2, r3
 800f612:	d20b      	bcs.n	800f62c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	1ad2      	subs	r2, r2, r3
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff ff9b 	bl	800f55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f626:	2300      	movs	r3, #0
 800f628:	61fb      	str	r3, [r7, #28]
 800f62a:	e004      	b.n	800f636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	2200      	movs	r2, #0
 800f630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f632:	2301      	movs	r3, #1
 800f634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f636:	f001 f91d 	bl	8010874 <vPortExitCritical>

	return xReturn;
 800f63a:	69fb      	ldr	r3, [r7, #28]
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3720      	adds	r7, #32
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	20001064 	.word	0x20001064
 800f648:	20001078 	.word	0x20001078

0800f64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f64c:	b480      	push	{r7}
 800f64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f650:	4b03      	ldr	r3, [pc, #12]	; (800f660 <vTaskMissedYield+0x14>)
 800f652:	2201      	movs	r2, #1
 800f654:	601a      	str	r2, [r3, #0]
}
 800f656:	bf00      	nop
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	20001074 	.word	0x20001074

0800f664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f66c:	f000 f852 	bl	800f714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f670:	4b06      	ldr	r3, [pc, #24]	; (800f68c <prvIdleTask+0x28>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d9f9      	bls.n	800f66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f678:	4b05      	ldr	r3, [pc, #20]	; (800f690 <prvIdleTask+0x2c>)
 800f67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f67e:	601a      	str	r2, [r3, #0]
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f688:	e7f0      	b.n	800f66c <prvIdleTask+0x8>
 800f68a:	bf00      	nop
 800f68c:	20000b90 	.word	0x20000b90
 800f690:	e000ed04 	.word	0xe000ed04

0800f694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f69a:	2300      	movs	r3, #0
 800f69c:	607b      	str	r3, [r7, #4]
 800f69e:	e00c      	b.n	800f6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	4413      	add	r3, r2
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4a12      	ldr	r2, [pc, #72]	; (800f6f4 <prvInitialiseTaskLists+0x60>)
 800f6ac:	4413      	add	r3, r2
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fe fc6a 	bl	800df88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	607b      	str	r3, [r7, #4]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b37      	cmp	r3, #55	; 0x37
 800f6be:	d9ef      	bls.n	800f6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6c0:	480d      	ldr	r0, [pc, #52]	; (800f6f8 <prvInitialiseTaskLists+0x64>)
 800f6c2:	f7fe fc61 	bl	800df88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6c6:	480d      	ldr	r0, [pc, #52]	; (800f6fc <prvInitialiseTaskLists+0x68>)
 800f6c8:	f7fe fc5e 	bl	800df88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6cc:	480c      	ldr	r0, [pc, #48]	; (800f700 <prvInitialiseTaskLists+0x6c>)
 800f6ce:	f7fe fc5b 	bl	800df88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6d2:	480c      	ldr	r0, [pc, #48]	; (800f704 <prvInitialiseTaskLists+0x70>)
 800f6d4:	f7fe fc58 	bl	800df88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6d8:	480b      	ldr	r0, [pc, #44]	; (800f708 <prvInitialiseTaskLists+0x74>)
 800f6da:	f7fe fc55 	bl	800df88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6de:	4b0b      	ldr	r3, [pc, #44]	; (800f70c <prvInitialiseTaskLists+0x78>)
 800f6e0:	4a05      	ldr	r2, [pc, #20]	; (800f6f8 <prvInitialiseTaskLists+0x64>)
 800f6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6e4:	4b0a      	ldr	r3, [pc, #40]	; (800f710 <prvInitialiseTaskLists+0x7c>)
 800f6e6:	4a05      	ldr	r2, [pc, #20]	; (800f6fc <prvInitialiseTaskLists+0x68>)
 800f6e8:	601a      	str	r2, [r3, #0]
}
 800f6ea:	bf00      	nop
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20000b90 	.word	0x20000b90
 800f6f8:	20000ff0 	.word	0x20000ff0
 800f6fc:	20001004 	.word	0x20001004
 800f700:	20001020 	.word	0x20001020
 800f704:	20001034 	.word	0x20001034
 800f708:	2000104c 	.word	0x2000104c
 800f70c:	20001018 	.word	0x20001018
 800f710:	2000101c 	.word	0x2000101c

0800f714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f71a:	e019      	b.n	800f750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f71c:	f001 f87a 	bl	8010814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f720:	4b10      	ldr	r3, [pc, #64]	; (800f764 <prvCheckTasksWaitingTermination+0x50>)
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	3304      	adds	r3, #4
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fe fcb5 	bl	800e09c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f732:	4b0d      	ldr	r3, [pc, #52]	; (800f768 <prvCheckTasksWaitingTermination+0x54>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	3b01      	subs	r3, #1
 800f738:	4a0b      	ldr	r2, [pc, #44]	; (800f768 <prvCheckTasksWaitingTermination+0x54>)
 800f73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f73c:	4b0b      	ldr	r3, [pc, #44]	; (800f76c <prvCheckTasksWaitingTermination+0x58>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	3b01      	subs	r3, #1
 800f742:	4a0a      	ldr	r2, [pc, #40]	; (800f76c <prvCheckTasksWaitingTermination+0x58>)
 800f744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f746:	f001 f895 	bl	8010874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f810 	bl	800f770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f750:	4b06      	ldr	r3, [pc, #24]	; (800f76c <prvCheckTasksWaitingTermination+0x58>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1e1      	bne.n	800f71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f758:	bf00      	nop
 800f75a:	bf00      	nop
 800f75c:	3708      	adds	r7, #8
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	20001034 	.word	0x20001034
 800f768:	20001060 	.word	0x20001060
 800f76c:	20001048 	.word	0x20001048

0800f770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d108      	bne.n	800f794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f786:	4618      	mov	r0, r3
 800f788:	f001 fa32 	bl	8010bf0 <vPortFree>
				vPortFree( pxTCB );
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f001 fa2f 	bl	8010bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f792:	e018      	b.n	800f7c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d103      	bne.n	800f7a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f001 fa26 	bl	8010bf0 <vPortFree>
	}
 800f7a4:	e00f      	b.n	800f7c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7ac:	2b02      	cmp	r3, #2
 800f7ae:	d00a      	beq.n	800f7c6 <prvDeleteTCB+0x56>
	__asm volatile
 800f7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b4:	f383 8811 	msr	BASEPRI, r3
 800f7b8:	f3bf 8f6f 	isb	sy
 800f7bc:	f3bf 8f4f 	dsb	sy
 800f7c0:	60fb      	str	r3, [r7, #12]
}
 800f7c2:	bf00      	nop
 800f7c4:	e7fe      	b.n	800f7c4 <prvDeleteTCB+0x54>
	}
 800f7c6:	bf00      	nop
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
	...

0800f7d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7d6:	4b0c      	ldr	r3, [pc, #48]	; (800f808 <prvResetNextTaskUnblockTime+0x38>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d104      	bne.n	800f7ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7e0:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <prvResetNextTaskUnblockTime+0x3c>)
 800f7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7e8:	e008      	b.n	800f7fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ea:	4b07      	ldr	r3, [pc, #28]	; (800f808 <prvResetNextTaskUnblockTime+0x38>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4a04      	ldr	r2, [pc, #16]	; (800f80c <prvResetNextTaskUnblockTime+0x3c>)
 800f7fa:	6013      	str	r3, [r2, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	20001018 	.word	0x20001018
 800f80c:	20001080 	.word	0x20001080

0800f810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f816:	4b0b      	ldr	r3, [pc, #44]	; (800f844 <xTaskGetSchedulerState+0x34>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d102      	bne.n	800f824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f81e:	2301      	movs	r3, #1
 800f820:	607b      	str	r3, [r7, #4]
 800f822:	e008      	b.n	800f836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f824:	4b08      	ldr	r3, [pc, #32]	; (800f848 <xTaskGetSchedulerState+0x38>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d102      	bne.n	800f832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f82c:	2302      	movs	r3, #2
 800f82e:	607b      	str	r3, [r7, #4]
 800f830:	e001      	b.n	800f836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f832:	2300      	movs	r3, #0
 800f834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f836:	687b      	ldr	r3, [r7, #4]
	}
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	2000106c 	.word	0x2000106c
 800f848:	20001088 	.word	0x20001088

0800f84c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f858:	2300      	movs	r3, #0
 800f85a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d056      	beq.n	800f910 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f862:	4b2e      	ldr	r3, [pc, #184]	; (800f91c <xTaskPriorityDisinherit+0xd0>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d00a      	beq.n	800f882 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	60fb      	str	r3, [r7, #12]
}
 800f87e:	bf00      	nop
 800f880:	e7fe      	b.n	800f880 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f886:	2b00      	cmp	r3, #0
 800f888:	d10a      	bne.n	800f8a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88e:	f383 8811 	msr	BASEPRI, r3
 800f892:	f3bf 8f6f 	isb	sy
 800f896:	f3bf 8f4f 	dsb	sy
 800f89a:	60bb      	str	r3, [r7, #8]
}
 800f89c:	bf00      	nop
 800f89e:	e7fe      	b.n	800f89e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8a4:	1e5a      	subs	r2, r3, #1
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d02c      	beq.n	800f910 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d128      	bne.n	800f910 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fe fbea 	bl	800e09c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e0:	4b0f      	ldr	r3, [pc, #60]	; (800f920 <xTaskPriorityDisinherit+0xd4>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d903      	bls.n	800f8f0 <xTaskPriorityDisinherit+0xa4>
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ec:	4a0c      	ldr	r2, [pc, #48]	; (800f920 <xTaskPriorityDisinherit+0xd4>)
 800f8ee:	6013      	str	r3, [r2, #0]
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4413      	add	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4a09      	ldr	r2, [pc, #36]	; (800f924 <xTaskPriorityDisinherit+0xd8>)
 800f8fe:	441a      	add	r2, r3
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	3304      	adds	r3, #4
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	f7fe fb6b 	bl	800dfe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f90c:	2301      	movs	r3, #1
 800f90e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f910:	697b      	ldr	r3, [r7, #20]
	}
 800f912:	4618      	mov	r0, r3
 800f914:	3718      	adds	r7, #24
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	20000b8c 	.word	0x20000b8c
 800f920:	20001068 	.word	0x20001068
 800f924:	20000b90 	.word	0x20000b90

0800f928 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b086      	sub	sp, #24
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
 800f934:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f936:	f000 ff6d 	bl	8010814 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f93a:	4b26      	ldr	r3, [pc, #152]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b02      	cmp	r3, #2
 800f946:	d01a      	beq.n	800f97e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f948:	4b22      	ldr	r3, [pc, #136]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	43d2      	mvns	r2, r2
 800f952:	400a      	ands	r2, r1
 800f954:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f956:	4b1f      	ldr	r3, [pc, #124]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00b      	beq.n	800f97e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f966:	2101      	movs	r1, #1
 800f968:	6838      	ldr	r0, [r7, #0]
 800f96a:	f000 f9cb 	bl	800fd04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f96e:	4b1a      	ldr	r3, [pc, #104]	; (800f9d8 <xTaskNotifyWait+0xb0>)
 800f970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f974:	601a      	str	r2, [r3, #0]
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f97e:	f000 ff79 	bl	8010874 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f982:	f000 ff47 	bl	8010814 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d004      	beq.n	800f996 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f98c:	4b11      	ldr	r3, [pc, #68]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f996:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	d002      	beq.n	800f9aa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	617b      	str	r3, [r7, #20]
 800f9a8:	e008      	b.n	800f9bc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f9aa:	4b0a      	ldr	r3, [pc, #40]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f9b0:	68ba      	ldr	r2, [r7, #8]
 800f9b2:	43d2      	mvns	r2, r2
 800f9b4:	400a      	ands	r2, r1
 800f9b6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f9bc:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <xTaskNotifyWait+0xac>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f9c6:	f000 ff55 	bl	8010874 <vPortExitCritical>

		return xReturn;
 800f9ca:	697b      	ldr	r3, [r7, #20]
	}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	20000b8c 	.word	0x20000b8c
 800f9d8:	e000ed04 	.word	0xe000ed04

0800f9dc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08a      	sub	sp, #40	; 0x28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	603b      	str	r3, [r7, #0]
 800f9e8:	4613      	mov	r3, r2
 800f9ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d10a      	bne.n	800fa0c <xTaskGenericNotify+0x30>
	__asm volatile
 800f9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	61bb      	str	r3, [r7, #24]
}
 800fa08:	bf00      	nop
 800fa0a:	e7fe      	b.n	800fa0a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800fa10:	f000 ff00 	bl	8010814 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d003      	beq.n	800fa22 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fa1a:	6a3b      	ldr	r3, [r7, #32]
 800fa1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fa28:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800fa32:	79fb      	ldrb	r3, [r7, #7]
 800fa34:	2b04      	cmp	r3, #4
 800fa36:	d828      	bhi.n	800fa8a <xTaskGenericNotify+0xae>
 800fa38:	a201      	add	r2, pc, #4	; (adr r2, 800fa40 <xTaskGenericNotify+0x64>)
 800fa3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3e:	bf00      	nop
 800fa40:	0800faab 	.word	0x0800faab
 800fa44:	0800fa55 	.word	0x0800fa55
 800fa48:	0800fa63 	.word	0x0800fa63
 800fa4c:	0800fa6f 	.word	0x0800fa6f
 800fa50:	0800fa77 	.word	0x0800fa77
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fa54:	6a3b      	ldr	r3, [r7, #32]
 800fa56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	431a      	orrs	r2, r3
 800fa5c:	6a3b      	ldr	r3, [r7, #32]
 800fa5e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fa60:	e026      	b.n	800fab0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fa62:	6a3b      	ldr	r3, [r7, #32]
 800fa64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fa6c:	e020      	b.n	800fab0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fa6e:	6a3b      	ldr	r3, [r7, #32]
 800fa70:	68ba      	ldr	r2, [r7, #8]
 800fa72:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fa74:	e01c      	b.n	800fab0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fa76:	7ffb      	ldrb	r3, [r7, #31]
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	d003      	beq.n	800fa84 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fa7c:	6a3b      	ldr	r3, [r7, #32]
 800fa7e:	68ba      	ldr	r2, [r7, #8]
 800fa80:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fa82:	e015      	b.n	800fab0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800fa84:	2300      	movs	r3, #0
 800fa86:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fa88:	e012      	b.n	800fab0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fa8a:	6a3b      	ldr	r3, [r7, #32]
 800fa8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa92:	d00c      	beq.n	800faae <xTaskGenericNotify+0xd2>
	__asm volatile
 800fa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	617b      	str	r3, [r7, #20]
}
 800faa6:	bf00      	nop
 800faa8:	e7fe      	b.n	800faa8 <xTaskGenericNotify+0xcc>
					break;
 800faaa:	bf00      	nop
 800faac:	e000      	b.n	800fab0 <xTaskGenericNotify+0xd4>

					break;
 800faae:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fab0:	7ffb      	ldrb	r3, [r7, #31]
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d13a      	bne.n	800fb2c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	3304      	adds	r3, #4
 800faba:	4618      	mov	r0, r3
 800fabc:	f7fe faee 	bl	800e09c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac4:	4b1d      	ldr	r3, [pc, #116]	; (800fb3c <xTaskGenericNotify+0x160>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d903      	bls.n	800fad4 <xTaskGenericNotify+0xf8>
 800facc:	6a3b      	ldr	r3, [r7, #32]
 800face:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fad0:	4a1a      	ldr	r2, [pc, #104]	; (800fb3c <xTaskGenericNotify+0x160>)
 800fad2:	6013      	str	r3, [r2, #0]
 800fad4:	6a3b      	ldr	r3, [r7, #32]
 800fad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fad8:	4613      	mov	r3, r2
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	4413      	add	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	4a17      	ldr	r2, [pc, #92]	; (800fb40 <xTaskGenericNotify+0x164>)
 800fae2:	441a      	add	r2, r3
 800fae4:	6a3b      	ldr	r3, [r7, #32]
 800fae6:	3304      	adds	r3, #4
 800fae8:	4619      	mov	r1, r3
 800faea:	4610      	mov	r0, r2
 800faec:	f7fe fa79 	bl	800dfe2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800faf0:	6a3b      	ldr	r3, [r7, #32]
 800faf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00a      	beq.n	800fb0e <xTaskGenericNotify+0x132>
	__asm volatile
 800faf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafc:	f383 8811 	msr	BASEPRI, r3
 800fb00:	f3bf 8f6f 	isb	sy
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	613b      	str	r3, [r7, #16]
}
 800fb0a:	bf00      	nop
 800fb0c:	e7fe      	b.n	800fb0c <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb12:	4b0c      	ldr	r3, [pc, #48]	; (800fb44 <xTaskGenericNotify+0x168>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d907      	bls.n	800fb2c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fb1c:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <xTaskGenericNotify+0x16c>)
 800fb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fb2c:	f000 fea2 	bl	8010874 <vPortExitCritical>

		return xReturn;
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3728      	adds	r7, #40	; 0x28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	20001068 	.word	0x20001068
 800fb40:	20000b90 	.word	0x20000b90
 800fb44:	20000b8c 	.word	0x20000b8c
 800fb48:	e000ed04 	.word	0xe000ed04

0800fb4c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08e      	sub	sp, #56	; 0x38
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	603b      	str	r3, [r7, #0]
 800fb58:	4613      	mov	r3, r2
 800fb5a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d10a      	bne.n	800fb7c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800fb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb78:	bf00      	nop
 800fb7a:	e7fe      	b.n	800fb7a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb7c:	f000 ff2c 	bl	80109d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800fb84:	f3ef 8211 	mrs	r2, BASEPRI
 800fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	623a      	str	r2, [r7, #32]
 800fb9a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800fb9c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d003      	beq.n	800fbae <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800fbb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbba:	2202      	movs	r2, #2
 800fbbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800fbc0:	79fb      	ldrb	r3, [r7, #7]
 800fbc2:	2b04      	cmp	r3, #4
 800fbc4:	d828      	bhi.n	800fc18 <xTaskGenericNotifyFromISR+0xcc>
 800fbc6:	a201      	add	r2, pc, #4	; (adr r2, 800fbcc <xTaskGenericNotifyFromISR+0x80>)
 800fbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbcc:	0800fc39 	.word	0x0800fc39
 800fbd0:	0800fbe1 	.word	0x0800fbe1
 800fbd4:	0800fbef 	.word	0x0800fbef
 800fbd8:	0800fbfb 	.word	0x0800fbfb
 800fbdc:	0800fc03 	.word	0x0800fc03
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	431a      	orrs	r2, r3
 800fbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fbec:	e027      	b.n	800fc3e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fbf8:	e021      	b.n	800fc3e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800fc00:	e01d      	b.n	800fc3e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fc02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d003      	beq.n	800fc12 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fc10:	e015      	b.n	800fc3e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800fc16:	e012      	b.n	800fc3e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc20:	d00c      	beq.n	800fc3c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800fc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc26:	f383 8811 	msr	BASEPRI, r3
 800fc2a:	f3bf 8f6f 	isb	sy
 800fc2e:	f3bf 8f4f 	dsb	sy
 800fc32:	61bb      	str	r3, [r7, #24]
}
 800fc34:	bf00      	nop
 800fc36:	e7fe      	b.n	800fc36 <xTaskGenericNotifyFromISR+0xea>
					break;
 800fc38:	bf00      	nop
 800fc3a:	e000      	b.n	800fc3e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800fc3c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fc3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d146      	bne.n	800fcd4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00a      	beq.n	800fc64 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800fc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	617b      	str	r3, [r7, #20]
}
 800fc60:	bf00      	nop
 800fc62:	e7fe      	b.n	800fc62 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc64:	4b21      	ldr	r3, [pc, #132]	; (800fcec <xTaskGenericNotifyFromISR+0x1a0>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d11d      	bne.n	800fca8 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6e:	3304      	adds	r3, #4
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fe fa13 	bl	800e09c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc7a:	4b1d      	ldr	r3, [pc, #116]	; (800fcf0 <xTaskGenericNotifyFromISR+0x1a4>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d903      	bls.n	800fc8a <xTaskGenericNotifyFromISR+0x13e>
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc86:	4a1a      	ldr	r2, [pc, #104]	; (800fcf0 <xTaskGenericNotifyFromISR+0x1a4>)
 800fc88:	6013      	str	r3, [r2, #0]
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc8e:	4613      	mov	r3, r2
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4413      	add	r3, r2
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	4a17      	ldr	r2, [pc, #92]	; (800fcf4 <xTaskGenericNotifyFromISR+0x1a8>)
 800fc98:	441a      	add	r2, r3
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	3304      	adds	r3, #4
 800fc9e:	4619      	mov	r1, r3
 800fca0:	4610      	mov	r0, r2
 800fca2:	f7fe f99e 	bl	800dfe2 <vListInsertEnd>
 800fca6:	e005      	b.n	800fcb4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcaa:	3318      	adds	r3, #24
 800fcac:	4619      	mov	r1, r3
 800fcae:	4812      	ldr	r0, [pc, #72]	; (800fcf8 <xTaskGenericNotifyFromISR+0x1ac>)
 800fcb0:	f7fe f997 	bl	800dfe2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb8:	4b10      	ldr	r3, [pc, #64]	; (800fcfc <xTaskGenericNotifyFromISR+0x1b0>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d908      	bls.n	800fcd4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fcc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d002      	beq.n	800fcce <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcca:	2201      	movs	r2, #1
 800fccc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fcce:	4b0c      	ldr	r3, [pc, #48]	; (800fd00 <xTaskGenericNotifyFromISR+0x1b4>)
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	601a      	str	r2, [r3, #0]
 800fcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	f383 8811 	msr	BASEPRI, r3
}
 800fcde:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800fce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3738      	adds	r7, #56	; 0x38
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	20001088 	.word	0x20001088
 800fcf0:	20001068 	.word	0x20001068
 800fcf4:	20000b90 	.word	0x20000b90
 800fcf8:	20001020 	.word	0x20001020
 800fcfc:	20000b8c 	.word	0x20000b8c
 800fd00:	20001074 	.word	0x20001074

0800fd04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd0e:	4b21      	ldr	r3, [pc, #132]	; (800fd94 <prvAddCurrentTaskToDelayedList+0x90>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd14:	4b20      	ldr	r3, [pc, #128]	; (800fd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	3304      	adds	r3, #4
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe f9be 	bl	800e09c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd26:	d10a      	bne.n	800fd3e <prvAddCurrentTaskToDelayedList+0x3a>
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d007      	beq.n	800fd3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd2e:	4b1a      	ldr	r3, [pc, #104]	; (800fd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	3304      	adds	r3, #4
 800fd34:	4619      	mov	r1, r3
 800fd36:	4819      	ldr	r0, [pc, #100]	; (800fd9c <prvAddCurrentTaskToDelayedList+0x98>)
 800fd38:	f7fe f953 	bl	800dfe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd3c:	e026      	b.n	800fd8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4413      	add	r3, r2
 800fd44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd46:	4b14      	ldr	r3, [pc, #80]	; (800fd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd4e:	68ba      	ldr	r2, [r7, #8]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d209      	bcs.n	800fd6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd56:	4b12      	ldr	r3, [pc, #72]	; (800fda0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	4b0f      	ldr	r3, [pc, #60]	; (800fd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3304      	adds	r3, #4
 800fd60:	4619      	mov	r1, r3
 800fd62:	4610      	mov	r0, r2
 800fd64:	f7fe f961 	bl	800e02a <vListInsert>
}
 800fd68:	e010      	b.n	800fd8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd6a:	4b0e      	ldr	r3, [pc, #56]	; (800fda4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	4b0a      	ldr	r3, [pc, #40]	; (800fd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	3304      	adds	r3, #4
 800fd74:	4619      	mov	r1, r3
 800fd76:	4610      	mov	r0, r2
 800fd78:	f7fe f957 	bl	800e02a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d202      	bcs.n	800fd8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd86:	4a08      	ldr	r2, [pc, #32]	; (800fda8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	6013      	str	r3, [r2, #0]
}
 800fd8c:	bf00      	nop
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	20001064 	.word	0x20001064
 800fd98:	20000b8c 	.word	0x20000b8c
 800fd9c:	2000104c 	.word	0x2000104c
 800fda0:	2000101c 	.word	0x2000101c
 800fda4:	20001018 	.word	0x20001018
 800fda8:	20001080 	.word	0x20001080

0800fdac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08a      	sub	sp, #40	; 0x28
 800fdb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fdb6:	f000 fba1 	bl	80104fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fdba:	4b1c      	ldr	r3, [pc, #112]	; (800fe2c <xTimerCreateTimerTask+0x80>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d021      	beq.n	800fe06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fdca:	1d3a      	adds	r2, r7, #4
 800fdcc:	f107 0108 	add.w	r1, r7, #8
 800fdd0:	f107 030c 	add.w	r3, r7, #12
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fe f8bd 	bl	800df54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fdda:	6879      	ldr	r1, [r7, #4]
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	9202      	str	r2, [sp, #8]
 800fde2:	9301      	str	r3, [sp, #4]
 800fde4:	2302      	movs	r3, #2
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	2300      	movs	r3, #0
 800fdea:	460a      	mov	r2, r1
 800fdec:	4910      	ldr	r1, [pc, #64]	; (800fe30 <xTimerCreateTimerTask+0x84>)
 800fdee:	4811      	ldr	r0, [pc, #68]	; (800fe34 <xTimerCreateTimerTask+0x88>)
 800fdf0:	f7fe fef0 	bl	800ebd4 <xTaskCreateStatic>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	4a10      	ldr	r2, [pc, #64]	; (800fe38 <xTimerCreateTimerTask+0x8c>)
 800fdf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fdfa:	4b0f      	ldr	r3, [pc, #60]	; (800fe38 <xTimerCreateTimerTask+0x8c>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe02:	2301      	movs	r3, #1
 800fe04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10a      	bne.n	800fe22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fe0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	613b      	str	r3, [r7, #16]
}
 800fe1e:	bf00      	nop
 800fe20:	e7fe      	b.n	800fe20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fe22:	697b      	ldr	r3, [r7, #20]
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3718      	adds	r7, #24
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	200010bc 	.word	0x200010bc
 800fe30:	0801222c 	.word	0x0801222c
 800fe34:	080100a5 	.word	0x080100a5
 800fe38:	200010c0 	.word	0x200010c0

0800fe3c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b088      	sub	sp, #32
 800fe40:	af02      	add	r7, sp, #8
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800fe4a:	202c      	movs	r0, #44	; 0x2c
 800fe4c:	f000 fe04 	bl	8010a58 <pvPortMalloc>
 800fe50:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00d      	beq.n	800fe74 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	9301      	str	r3, [sp, #4]
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	68b9      	ldr	r1, [r7, #8]
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f000 f843 	bl	800fefa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fe74:	697b      	ldr	r3, [r7, #20]
	}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3718      	adds	r7, #24
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b08a      	sub	sp, #40	; 0x28
 800fe82:	af02      	add	r7, sp, #8
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	60b9      	str	r1, [r7, #8]
 800fe88:	607a      	str	r2, [r7, #4]
 800fe8a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800fe8c:	232c      	movs	r3, #44	; 0x2c
 800fe8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	2b2c      	cmp	r3, #44	; 0x2c
 800fe94:	d00a      	beq.n	800feac <xTimerCreateStatic+0x2e>
	__asm volatile
 800fe96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9a:	f383 8811 	msr	BASEPRI, r3
 800fe9e:	f3bf 8f6f 	isb	sy
 800fea2:	f3bf 8f4f 	dsb	sy
 800fea6:	61bb      	str	r3, [r7, #24]
}
 800fea8:	bf00      	nop
 800feaa:	e7fe      	b.n	800feaa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800feac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800feae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10a      	bne.n	800feca <xTimerCreateStatic+0x4c>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	617b      	str	r3, [r7, #20]
}
 800fec6:	bf00      	nop
 800fec8:	e7fe      	b.n	800fec8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800feca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fecc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00d      	beq.n	800fef0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	2202      	movs	r2, #2
 800fed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	68b9      	ldr	r1, [r7, #8]
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	f000 f805 	bl	800fefa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fef0:	69fb      	ldr	r3, [r7, #28]
	}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3720      	adds	r7, #32
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b086      	sub	sp, #24
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	60f8      	str	r0, [r7, #12]
 800ff02:	60b9      	str	r1, [r7, #8]
 800ff04:	607a      	str	r2, [r7, #4]
 800ff06:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	617b      	str	r3, [r7, #20]
}
 800ff20:	bf00      	nop
 800ff22:	e7fe      	b.n	800ff22 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d01e      	beq.n	800ff68 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ff2a:	f000 fae7 	bl	80104fc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ff2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff30:	68fa      	ldr	r2, [r7, #12]
 800ff32:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	6a3a      	ldr	r2, [r7, #32]
 800ff44:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	3304      	adds	r3, #4
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fe f83c 	bl	800dfc8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d008      	beq.n	800ff68 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff5c:	f043 0304 	orr.w	r3, r3, #4
 800ff60:	b2da      	uxtb	r2, r3
 800ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ff68:	bf00      	nop
 800ff6a:	3718      	adds	r7, #24
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08a      	sub	sp, #40	; 0x28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
 800ff7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10a      	bne.n	800ff9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	623b      	str	r3, [r7, #32]
}
 800ff9a:	bf00      	nop
 800ff9c:	e7fe      	b.n	800ff9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ff9e:	4b1a      	ldr	r3, [pc, #104]	; (8010008 <xTimerGenericCommand+0x98>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d02a      	beq.n	800fffc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	2b05      	cmp	r3, #5
 800ffb6:	dc18      	bgt.n	800ffea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ffb8:	f7ff fc2a 	bl	800f810 <xTaskGetSchedulerState>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	d109      	bne.n	800ffd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ffc2:	4b11      	ldr	r3, [pc, #68]	; (8010008 <xTimerGenericCommand+0x98>)
 800ffc4:	6818      	ldr	r0, [r3, #0]
 800ffc6:	f107 0110 	add.w	r1, r7, #16
 800ffca:	2300      	movs	r3, #0
 800ffcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffce:	f7fe fa19 	bl	800e404 <xQueueGenericSend>
 800ffd2:	6278      	str	r0, [r7, #36]	; 0x24
 800ffd4:	e012      	b.n	800fffc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ffd6:	4b0c      	ldr	r3, [pc, #48]	; (8010008 <xTimerGenericCommand+0x98>)
 800ffd8:	6818      	ldr	r0, [r3, #0]
 800ffda:	f107 0110 	add.w	r1, r7, #16
 800ffde:	2300      	movs	r3, #0
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f7fe fa0f 	bl	800e404 <xQueueGenericSend>
 800ffe6:	6278      	str	r0, [r7, #36]	; 0x24
 800ffe8:	e008      	b.n	800fffc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ffea:	4b07      	ldr	r3, [pc, #28]	; (8010008 <xTimerGenericCommand+0x98>)
 800ffec:	6818      	ldr	r0, [r3, #0]
 800ffee:	f107 0110 	add.w	r1, r7, #16
 800fff2:	2300      	movs	r3, #0
 800fff4:	683a      	ldr	r2, [r7, #0]
 800fff6:	f7fe fb03 	bl	800e600 <xQueueGenericSendFromISR>
 800fffa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3728      	adds	r7, #40	; 0x28
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	200010bc 	.word	0x200010bc

0801000c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b088      	sub	sp, #32
 8010010:	af02      	add	r7, sp, #8
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010016:	4b22      	ldr	r3, [pc, #136]	; (80100a0 <prvProcessExpiredTimer+0x94>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	3304      	adds	r3, #4
 8010024:	4618      	mov	r0, r3
 8010026:	f7fe f839 	bl	800e09c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010030:	f003 0304 	and.w	r3, r3, #4
 8010034:	2b00      	cmp	r3, #0
 8010036:	d022      	beq.n	801007e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	699a      	ldr	r2, [r3, #24]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	18d1      	adds	r1, r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	6978      	ldr	r0, [r7, #20]
 8010046:	f000 f8d1 	bl	80101ec <prvInsertTimerInActiveList>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d01f      	beq.n	8010090 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010050:	2300      	movs	r3, #0
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	2300      	movs	r3, #0
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	2100      	movs	r1, #0
 801005a:	6978      	ldr	r0, [r7, #20]
 801005c:	f7ff ff88 	bl	800ff70 <xTimerGenericCommand>
 8010060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d113      	bne.n	8010090 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006c:	f383 8811 	msr	BASEPRI, r3
 8010070:	f3bf 8f6f 	isb	sy
 8010074:	f3bf 8f4f 	dsb	sy
 8010078:	60fb      	str	r3, [r7, #12]
}
 801007a:	bf00      	nop
 801007c:	e7fe      	b.n	801007c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010084:	f023 0301 	bic.w	r3, r3, #1
 8010088:	b2da      	uxtb	r2, r3
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	6a1b      	ldr	r3, [r3, #32]
 8010094:	6978      	ldr	r0, [r7, #20]
 8010096:	4798      	blx	r3
}
 8010098:	bf00      	nop
 801009a:	3718      	adds	r7, #24
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	200010b4 	.word	0x200010b4

080100a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80100ac:	f107 0308 	add.w	r3, r7, #8
 80100b0:	4618      	mov	r0, r3
 80100b2:	f000 f857 	bl	8010164 <prvGetNextExpireTime>
 80100b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	4619      	mov	r1, r3
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f000 f803 	bl	80100c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80100c2:	f000 f8d5 	bl	8010270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80100c6:	e7f1      	b.n	80100ac <prvTimerTask+0x8>

080100c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80100d2:	f7fe ffbb 	bl	800f04c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80100d6:	f107 0308 	add.w	r3, r7, #8
 80100da:	4618      	mov	r0, r3
 80100dc:	f000 f866 	bl	80101ac <prvSampleTimeNow>
 80100e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d130      	bne.n	801014a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d10a      	bne.n	8010104 <prvProcessTimerOrBlockTask+0x3c>
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d806      	bhi.n	8010104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80100f6:	f7fe ffb7 	bl	800f068 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80100fa:	68f9      	ldr	r1, [r7, #12]
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff ff85 	bl	801000c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010102:	e024      	b.n	801014e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d008      	beq.n	801011c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801010a:	4b13      	ldr	r3, [pc, #76]	; (8010158 <prvProcessTimerOrBlockTask+0x90>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <prvProcessTimerOrBlockTask+0x50>
 8010114:	2301      	movs	r3, #1
 8010116:	e000      	b.n	801011a <prvProcessTimerOrBlockTask+0x52>
 8010118:	2300      	movs	r3, #0
 801011a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801011c:	4b0f      	ldr	r3, [pc, #60]	; (801015c <prvProcessTimerOrBlockTask+0x94>)
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	4619      	mov	r1, r3
 801012a:	f7fe fd1f 	bl	800eb6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801012e:	f7fe ff9b 	bl	800f068 <xTaskResumeAll>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10a      	bne.n	801014e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010138:	4b09      	ldr	r3, [pc, #36]	; (8010160 <prvProcessTimerOrBlockTask+0x98>)
 801013a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	f3bf 8f6f 	isb	sy
}
 8010148:	e001      	b.n	801014e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801014a:	f7fe ff8d 	bl	800f068 <xTaskResumeAll>
}
 801014e:	bf00      	nop
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	200010b8 	.word	0x200010b8
 801015c:	200010bc 	.word	0x200010bc
 8010160:	e000ed04 	.word	0xe000ed04

08010164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801016c:	4b0e      	ldr	r3, [pc, #56]	; (80101a8 <prvGetNextExpireTime+0x44>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d101      	bne.n	801017a <prvGetNextExpireTime+0x16>
 8010176:	2201      	movs	r2, #1
 8010178:	e000      	b.n	801017c <prvGetNextExpireTime+0x18>
 801017a:	2200      	movs	r2, #0
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d105      	bne.n	8010194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010188:	4b07      	ldr	r3, [pc, #28]	; (80101a8 <prvGetNextExpireTime+0x44>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	60fb      	str	r3, [r7, #12]
 8010192:	e001      	b.n	8010198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010194:	2300      	movs	r3, #0
 8010196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010198:	68fb      	ldr	r3, [r7, #12]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	200010b4 	.word	0x200010b4

080101ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80101b4:	f7fe fff6 	bl	800f1a4 <xTaskGetTickCount>
 80101b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80101ba:	4b0b      	ldr	r3, [pc, #44]	; (80101e8 <prvSampleTimeNow+0x3c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d205      	bcs.n	80101d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80101c4:	f000 f936 	bl	8010434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2201      	movs	r2, #1
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	e002      	b.n	80101d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80101d6:	4a04      	ldr	r2, [pc, #16]	; (80101e8 <prvSampleTimeNow+0x3c>)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80101dc:	68fb      	ldr	r3, [r7, #12]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	200010c4 	.word	0x200010c4

080101ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80101fa:	2300      	movs	r3, #0
 80101fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	429a      	cmp	r2, r3
 8010210:	d812      	bhi.n	8010238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	1ad2      	subs	r2, r2, r3
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	699b      	ldr	r3, [r3, #24]
 801021c:	429a      	cmp	r2, r3
 801021e:	d302      	bcc.n	8010226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010220:	2301      	movs	r3, #1
 8010222:	617b      	str	r3, [r7, #20]
 8010224:	e01b      	b.n	801025e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <prvInsertTimerInActiveList+0x7c>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	3304      	adds	r3, #4
 801022e:	4619      	mov	r1, r3
 8010230:	4610      	mov	r0, r2
 8010232:	f7fd fefa 	bl	800e02a <vListInsert>
 8010236:	e012      	b.n	801025e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	429a      	cmp	r2, r3
 801023e:	d206      	bcs.n	801024e <prvInsertTimerInActiveList+0x62>
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	429a      	cmp	r2, r3
 8010246:	d302      	bcc.n	801024e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010248:	2301      	movs	r3, #1
 801024a:	617b      	str	r3, [r7, #20]
 801024c:	e007      	b.n	801025e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801024e:	4b07      	ldr	r3, [pc, #28]	; (801026c <prvInsertTimerInActiveList+0x80>)
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	3304      	adds	r3, #4
 8010256:	4619      	mov	r1, r3
 8010258:	4610      	mov	r0, r2
 801025a:	f7fd fee6 	bl	800e02a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801025e:	697b      	ldr	r3, [r7, #20]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3718      	adds	r7, #24
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	200010b8 	.word	0x200010b8
 801026c:	200010b4 	.word	0x200010b4

08010270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b08e      	sub	sp, #56	; 0x38
 8010274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010276:	e0ca      	b.n	801040e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	da18      	bge.n	80102b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801027e:	1d3b      	adds	r3, r7, #4
 8010280:	3304      	adds	r3, #4
 8010282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010286:	2b00      	cmp	r3, #0
 8010288:	d10a      	bne.n	80102a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	61fb      	str	r3, [r7, #28]
}
 801029c:	bf00      	nop
 801029e:	e7fe      	b.n	801029e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80102a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102a6:	6850      	ldr	r0, [r2, #4]
 80102a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102aa:	6892      	ldr	r2, [r2, #8]
 80102ac:	4611      	mov	r1, r2
 80102ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f2c0 80aa 	blt.w	801040c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80102bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102be:	695b      	ldr	r3, [r3, #20]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d004      	beq.n	80102ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	3304      	adds	r3, #4
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fd fee7 	bl	800e09c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80102ce:	463b      	mov	r3, r7
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7ff ff6b 	bl	80101ac <prvSampleTimeNow>
 80102d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b09      	cmp	r3, #9
 80102dc:	f200 8097 	bhi.w	801040e <prvProcessReceivedCommands+0x19e>
 80102e0:	a201      	add	r2, pc, #4	; (adr r2, 80102e8 <prvProcessReceivedCommands+0x78>)
 80102e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e6:	bf00      	nop
 80102e8:	08010311 	.word	0x08010311
 80102ec:	08010311 	.word	0x08010311
 80102f0:	08010311 	.word	0x08010311
 80102f4:	08010385 	.word	0x08010385
 80102f8:	08010399 	.word	0x08010399
 80102fc:	080103e3 	.word	0x080103e3
 8010300:	08010311 	.word	0x08010311
 8010304:	08010311 	.word	0x08010311
 8010308:	08010385 	.word	0x08010385
 801030c:	08010399 	.word	0x08010399
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010316:	f043 0301 	orr.w	r3, r3, #1
 801031a:	b2da      	uxtb	r2, r3
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010326:	699b      	ldr	r3, [r3, #24]
 8010328:	18d1      	adds	r1, r2, r3
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010330:	f7ff ff5c 	bl	80101ec <prvInsertTimerInActiveList>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d069      	beq.n	801040e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	6a1b      	ldr	r3, [r3, #32]
 801033e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010348:	f003 0304 	and.w	r3, r3, #4
 801034c:	2b00      	cmp	r3, #0
 801034e:	d05e      	beq.n	801040e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010354:	699b      	ldr	r3, [r3, #24]
 8010356:	441a      	add	r2, r3
 8010358:	2300      	movs	r3, #0
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	2300      	movs	r3, #0
 801035e:	2100      	movs	r1, #0
 8010360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010362:	f7ff fe05 	bl	800ff70 <xTimerGenericCommand>
 8010366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010368:	6a3b      	ldr	r3, [r7, #32]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d14f      	bne.n	801040e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801036e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	61bb      	str	r3, [r7, #24]
}
 8010380:	bf00      	nop
 8010382:	e7fe      	b.n	8010382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801038a:	f023 0301 	bic.w	r3, r3, #1
 801038e:	b2da      	uxtb	r2, r3
 8010390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010396:	e03a      	b.n	801040e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801039e:	f043 0301 	orr.w	r3, r3, #1
 80103a2:	b2da      	uxtb	r2, r3
 80103a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80103aa:	68ba      	ldr	r2, [r7, #8]
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b2:	699b      	ldr	r3, [r3, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d10a      	bne.n	80103ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80103b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	617b      	str	r3, [r7, #20]
}
 80103ca:	bf00      	nop
 80103cc:	e7fe      	b.n	80103cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80103ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d0:	699a      	ldr	r2, [r3, #24]
 80103d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d4:	18d1      	adds	r1, r2, r3
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103dc:	f7ff ff06 	bl	80101ec <prvInsertTimerInActiveList>
					break;
 80103e0:	e015      	b.n	801040e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80103e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103e8:	f003 0302 	and.w	r3, r3, #2
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d103      	bne.n	80103f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80103f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103f2:	f000 fbfd 	bl	8010bf0 <vPortFree>
 80103f6:	e00a      	b.n	801040e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103fe:	f023 0301 	bic.w	r3, r3, #1
 8010402:	b2da      	uxtb	r2, r3
 8010404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801040a:	e000      	b.n	801040e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801040c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801040e:	4b08      	ldr	r3, [pc, #32]	; (8010430 <prvProcessReceivedCommands+0x1c0>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	1d39      	adds	r1, r7, #4
 8010414:	2200      	movs	r2, #0
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe f98e 	bl	800e738 <xQueueReceive>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	f47f af2a 	bne.w	8010278 <prvProcessReceivedCommands+0x8>
	}
}
 8010424:	bf00      	nop
 8010426:	bf00      	nop
 8010428:	3730      	adds	r7, #48	; 0x30
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	200010bc 	.word	0x200010bc

08010434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b088      	sub	sp, #32
 8010438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801043a:	e048      	b.n	80104ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801043c:	4b2d      	ldr	r3, [pc, #180]	; (80104f4 <prvSwitchTimerLists+0xc0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010446:	4b2b      	ldr	r3, [pc, #172]	; (80104f4 <prvSwitchTimerLists+0xc0>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	3304      	adds	r3, #4
 8010454:	4618      	mov	r0, r3
 8010456:	f7fd fe21 	bl	800e09c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6a1b      	ldr	r3, [r3, #32]
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010468:	f003 0304 	and.w	r3, r3, #4
 801046c:	2b00      	cmp	r3, #0
 801046e:	d02e      	beq.n	80104ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	693a      	ldr	r2, [r7, #16]
 8010476:	4413      	add	r3, r2
 8010478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	429a      	cmp	r2, r3
 8010480:	d90e      	bls.n	80104a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801048e:	4b19      	ldr	r3, [pc, #100]	; (80104f4 <prvSwitchTimerLists+0xc0>)
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3304      	adds	r3, #4
 8010496:	4619      	mov	r1, r3
 8010498:	4610      	mov	r0, r2
 801049a:	f7fd fdc6 	bl	800e02a <vListInsert>
 801049e:	e016      	b.n	80104ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104a0:	2300      	movs	r3, #0
 80104a2:	9300      	str	r3, [sp, #0]
 80104a4:	2300      	movs	r3, #0
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	2100      	movs	r1, #0
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f7ff fd60 	bl	800ff70 <xTimerGenericCommand>
 80104b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d10a      	bne.n	80104ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80104b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104bc:	f383 8811 	msr	BASEPRI, r3
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	603b      	str	r3, [r7, #0]
}
 80104ca:	bf00      	nop
 80104cc:	e7fe      	b.n	80104cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80104ce:	4b09      	ldr	r3, [pc, #36]	; (80104f4 <prvSwitchTimerLists+0xc0>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1b1      	bne.n	801043c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80104d8:	4b06      	ldr	r3, [pc, #24]	; (80104f4 <prvSwitchTimerLists+0xc0>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80104de:	4b06      	ldr	r3, [pc, #24]	; (80104f8 <prvSwitchTimerLists+0xc4>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a04      	ldr	r2, [pc, #16]	; (80104f4 <prvSwitchTimerLists+0xc0>)
 80104e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80104e6:	4a04      	ldr	r2, [pc, #16]	; (80104f8 <prvSwitchTimerLists+0xc4>)
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	6013      	str	r3, [r2, #0]
}
 80104ec:	bf00      	nop
 80104ee:	3718      	adds	r7, #24
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200010b4 	.word	0x200010b4
 80104f8:	200010b8 	.word	0x200010b8

080104fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010502:	f000 f987 	bl	8010814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010506:	4b15      	ldr	r3, [pc, #84]	; (801055c <prvCheckForValidListAndQueue+0x60>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d120      	bne.n	8010550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801050e:	4814      	ldr	r0, [pc, #80]	; (8010560 <prvCheckForValidListAndQueue+0x64>)
 8010510:	f7fd fd3a 	bl	800df88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010514:	4813      	ldr	r0, [pc, #76]	; (8010564 <prvCheckForValidListAndQueue+0x68>)
 8010516:	f7fd fd37 	bl	800df88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801051a:	4b13      	ldr	r3, [pc, #76]	; (8010568 <prvCheckForValidListAndQueue+0x6c>)
 801051c:	4a10      	ldr	r2, [pc, #64]	; (8010560 <prvCheckForValidListAndQueue+0x64>)
 801051e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010520:	4b12      	ldr	r3, [pc, #72]	; (801056c <prvCheckForValidListAndQueue+0x70>)
 8010522:	4a10      	ldr	r2, [pc, #64]	; (8010564 <prvCheckForValidListAndQueue+0x68>)
 8010524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010526:	2300      	movs	r3, #0
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	4b11      	ldr	r3, [pc, #68]	; (8010570 <prvCheckForValidListAndQueue+0x74>)
 801052c:	4a11      	ldr	r2, [pc, #68]	; (8010574 <prvCheckForValidListAndQueue+0x78>)
 801052e:	2110      	movs	r1, #16
 8010530:	200a      	movs	r0, #10
 8010532:	f7fd fe45 	bl	800e1c0 <xQueueGenericCreateStatic>
 8010536:	4603      	mov	r3, r0
 8010538:	4a08      	ldr	r2, [pc, #32]	; (801055c <prvCheckForValidListAndQueue+0x60>)
 801053a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801053c:	4b07      	ldr	r3, [pc, #28]	; (801055c <prvCheckForValidListAndQueue+0x60>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d005      	beq.n	8010550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010544:	4b05      	ldr	r3, [pc, #20]	; (801055c <prvCheckForValidListAndQueue+0x60>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	490b      	ldr	r1, [pc, #44]	; (8010578 <prvCheckForValidListAndQueue+0x7c>)
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe fae4 	bl	800eb18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010550:	f000 f990 	bl	8010874 <vPortExitCritical>
}
 8010554:	bf00      	nop
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	200010bc 	.word	0x200010bc
 8010560:	2000108c 	.word	0x2000108c
 8010564:	200010a0 	.word	0x200010a0
 8010568:	200010b4 	.word	0x200010b4
 801056c:	200010b8 	.word	0x200010b8
 8010570:	20001168 	.word	0x20001168
 8010574:	200010c8 	.word	0x200010c8
 8010578:	08012234 	.word	0x08012234

0801057c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b086      	sub	sp, #24
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10a      	bne.n	80105a4 <pvTimerGetTimerID+0x28>
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010592:	f383 8811 	msr	BASEPRI, r3
 8010596:	f3bf 8f6f 	isb	sy
 801059a:	f3bf 8f4f 	dsb	sy
 801059e:	60fb      	str	r3, [r7, #12]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80105a4:	f000 f936 	bl	8010814 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	69db      	ldr	r3, [r3, #28]
 80105ac:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80105ae:	f000 f961 	bl	8010874 <vPortExitCritical>

	return pvReturn;
 80105b2:	693b      	ldr	r3, [r7, #16]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3718      	adds	r7, #24
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	3b04      	subs	r3, #4
 80105cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80105d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	3b04      	subs	r3, #4
 80105da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	f023 0201 	bic.w	r2, r3, #1
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3b04      	subs	r3, #4
 80105ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80105ec:	4a0c      	ldr	r2, [pc, #48]	; (8010620 <pxPortInitialiseStack+0x64>)
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3b14      	subs	r3, #20
 80105f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3b04      	subs	r3, #4
 8010602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f06f 0202 	mvn.w	r2, #2
 801060a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3b20      	subs	r3, #32
 8010610:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010612:	68fb      	ldr	r3, [r7, #12]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3714      	adds	r7, #20
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr
 8010620:	08010625 	.word	0x08010625

08010624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010624:	b480      	push	{r7}
 8010626:	b085      	sub	sp, #20
 8010628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801062e:	4b12      	ldr	r3, [pc, #72]	; (8010678 <prvTaskExitError+0x54>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010636:	d00a      	beq.n	801064e <prvTaskExitError+0x2a>
	__asm volatile
 8010638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063c:	f383 8811 	msr	BASEPRI, r3
 8010640:	f3bf 8f6f 	isb	sy
 8010644:	f3bf 8f4f 	dsb	sy
 8010648:	60fb      	str	r3, [r7, #12]
}
 801064a:	bf00      	nop
 801064c:	e7fe      	b.n	801064c <prvTaskExitError+0x28>
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	60bb      	str	r3, [r7, #8]
}
 8010660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010662:	bf00      	nop
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0fc      	beq.n	8010664 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801066a:	bf00      	nop
 801066c:	bf00      	nop
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr
 8010678:	20000120 	.word	0x20000120
 801067c:	00000000 	.word	0x00000000

08010680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010680:	4b07      	ldr	r3, [pc, #28]	; (80106a0 <pxCurrentTCBConst2>)
 8010682:	6819      	ldr	r1, [r3, #0]
 8010684:	6808      	ldr	r0, [r1, #0]
 8010686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068a:	f380 8809 	msr	PSP, r0
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f04f 0000 	mov.w	r0, #0
 8010696:	f380 8811 	msr	BASEPRI, r0
 801069a:	4770      	bx	lr
 801069c:	f3af 8000 	nop.w

080106a0 <pxCurrentTCBConst2>:
 80106a0:	20000b8c 	.word	0x20000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80106a4:	bf00      	nop
 80106a6:	bf00      	nop

080106a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80106a8:	4808      	ldr	r0, [pc, #32]	; (80106cc <prvPortStartFirstTask+0x24>)
 80106aa:	6800      	ldr	r0, [r0, #0]
 80106ac:	6800      	ldr	r0, [r0, #0]
 80106ae:	f380 8808 	msr	MSP, r0
 80106b2:	f04f 0000 	mov.w	r0, #0
 80106b6:	f380 8814 	msr	CONTROL, r0
 80106ba:	b662      	cpsie	i
 80106bc:	b661      	cpsie	f
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	f3bf 8f6f 	isb	sy
 80106c6:	df00      	svc	0
 80106c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80106ca:	bf00      	nop
 80106cc:	e000ed08 	.word	0xe000ed08

080106d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b086      	sub	sp, #24
 80106d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80106d6:	4b46      	ldr	r3, [pc, #280]	; (80107f0 <xPortStartScheduler+0x120>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a46      	ldr	r2, [pc, #280]	; (80107f4 <xPortStartScheduler+0x124>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d10a      	bne.n	80106f6 <xPortStartScheduler+0x26>
	__asm volatile
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	613b      	str	r3, [r7, #16]
}
 80106f2:	bf00      	nop
 80106f4:	e7fe      	b.n	80106f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80106f6:	4b3e      	ldr	r3, [pc, #248]	; (80107f0 <xPortStartScheduler+0x120>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a3f      	ldr	r2, [pc, #252]	; (80107f8 <xPortStartScheduler+0x128>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d10a      	bne.n	8010716 <xPortStartScheduler+0x46>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	60fb      	str	r3, [r7, #12]
}
 8010712:	bf00      	nop
 8010714:	e7fe      	b.n	8010714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010716:	4b39      	ldr	r3, [pc, #228]	; (80107fc <xPortStartScheduler+0x12c>)
 8010718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	b2db      	uxtb	r3, r3
 8010720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	22ff      	movs	r2, #255	; 0xff
 8010726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	b2db      	uxtb	r3, r3
 801072e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	b2db      	uxtb	r3, r3
 8010734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010738:	b2da      	uxtb	r2, r3
 801073a:	4b31      	ldr	r3, [pc, #196]	; (8010800 <xPortStartScheduler+0x130>)
 801073c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801073e:	4b31      	ldr	r3, [pc, #196]	; (8010804 <xPortStartScheduler+0x134>)
 8010740:	2207      	movs	r2, #7
 8010742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010744:	e009      	b.n	801075a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010746:	4b2f      	ldr	r3, [pc, #188]	; (8010804 <xPortStartScheduler+0x134>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	3b01      	subs	r3, #1
 801074c:	4a2d      	ldr	r2, [pc, #180]	; (8010804 <xPortStartScheduler+0x134>)
 801074e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010750:	78fb      	ldrb	r3, [r7, #3]
 8010752:	b2db      	uxtb	r3, r3
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	b2db      	uxtb	r3, r3
 8010758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801075a:	78fb      	ldrb	r3, [r7, #3]
 801075c:	b2db      	uxtb	r3, r3
 801075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010762:	2b80      	cmp	r3, #128	; 0x80
 8010764:	d0ef      	beq.n	8010746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010766:	4b27      	ldr	r3, [pc, #156]	; (8010804 <xPortStartScheduler+0x134>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f1c3 0307 	rsb	r3, r3, #7
 801076e:	2b04      	cmp	r3, #4
 8010770:	d00a      	beq.n	8010788 <xPortStartScheduler+0xb8>
	__asm volatile
 8010772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	60bb      	str	r3, [r7, #8]
}
 8010784:	bf00      	nop
 8010786:	e7fe      	b.n	8010786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010788:	4b1e      	ldr	r3, [pc, #120]	; (8010804 <xPortStartScheduler+0x134>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	021b      	lsls	r3, r3, #8
 801078e:	4a1d      	ldr	r2, [pc, #116]	; (8010804 <xPortStartScheduler+0x134>)
 8010790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010792:	4b1c      	ldr	r3, [pc, #112]	; (8010804 <xPortStartScheduler+0x134>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801079a:	4a1a      	ldr	r2, [pc, #104]	; (8010804 <xPortStartScheduler+0x134>)
 801079c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80107a6:	4b18      	ldr	r3, [pc, #96]	; (8010808 <xPortStartScheduler+0x138>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4a17      	ldr	r2, [pc, #92]	; (8010808 <xPortStartScheduler+0x138>)
 80107ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80107b2:	4b15      	ldr	r3, [pc, #84]	; (8010808 <xPortStartScheduler+0x138>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a14      	ldr	r2, [pc, #80]	; (8010808 <xPortStartScheduler+0x138>)
 80107b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80107bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80107be:	f000 f8dd 	bl	801097c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80107c2:	4b12      	ldr	r3, [pc, #72]	; (801080c <xPortStartScheduler+0x13c>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80107c8:	f000 f8fc 	bl	80109c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80107cc:	4b10      	ldr	r3, [pc, #64]	; (8010810 <xPortStartScheduler+0x140>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4a0f      	ldr	r2, [pc, #60]	; (8010810 <xPortStartScheduler+0x140>)
 80107d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80107d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80107d8:	f7ff ff66 	bl	80106a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80107dc:	f7fe fdac 	bl	800f338 <vTaskSwitchContext>
	prvTaskExitError();
 80107e0:	f7ff ff20 	bl	8010624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	e000ed00 	.word	0xe000ed00
 80107f4:	410fc271 	.word	0x410fc271
 80107f8:	410fc270 	.word	0x410fc270
 80107fc:	e000e400 	.word	0xe000e400
 8010800:	200011b8 	.word	0x200011b8
 8010804:	200011bc 	.word	0x200011bc
 8010808:	e000ed20 	.word	0xe000ed20
 801080c:	20000120 	.word	0x20000120
 8010810:	e000ef34 	.word	0xe000ef34

08010814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	607b      	str	r3, [r7, #4]
}
 801082c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801082e:	4b0f      	ldr	r3, [pc, #60]	; (801086c <vPortEnterCritical+0x58>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	3301      	adds	r3, #1
 8010834:	4a0d      	ldr	r2, [pc, #52]	; (801086c <vPortEnterCritical+0x58>)
 8010836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010838:	4b0c      	ldr	r3, [pc, #48]	; (801086c <vPortEnterCritical+0x58>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2b01      	cmp	r3, #1
 801083e:	d10f      	bne.n	8010860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010840:	4b0b      	ldr	r3, [pc, #44]	; (8010870 <vPortEnterCritical+0x5c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	b2db      	uxtb	r3, r3
 8010846:	2b00      	cmp	r3, #0
 8010848:	d00a      	beq.n	8010860 <vPortEnterCritical+0x4c>
	__asm volatile
 801084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084e:	f383 8811 	msr	BASEPRI, r3
 8010852:	f3bf 8f6f 	isb	sy
 8010856:	f3bf 8f4f 	dsb	sy
 801085a:	603b      	str	r3, [r7, #0]
}
 801085c:	bf00      	nop
 801085e:	e7fe      	b.n	801085e <vPortEnterCritical+0x4a>
	}
}
 8010860:	bf00      	nop
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	20000120 	.word	0x20000120
 8010870:	e000ed04 	.word	0xe000ed04

08010874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801087a:	4b12      	ldr	r3, [pc, #72]	; (80108c4 <vPortExitCritical+0x50>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d10a      	bne.n	8010898 <vPortExitCritical+0x24>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	607b      	str	r3, [r7, #4]
}
 8010894:	bf00      	nop
 8010896:	e7fe      	b.n	8010896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010898:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <vPortExitCritical+0x50>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	3b01      	subs	r3, #1
 801089e:	4a09      	ldr	r2, [pc, #36]	; (80108c4 <vPortExitCritical+0x50>)
 80108a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80108a2:	4b08      	ldr	r3, [pc, #32]	; (80108c4 <vPortExitCritical+0x50>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d105      	bne.n	80108b6 <vPortExitCritical+0x42>
 80108aa:	2300      	movs	r3, #0
 80108ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	f383 8811 	msr	BASEPRI, r3
}
 80108b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80108b6:	bf00      	nop
 80108b8:	370c      	adds	r7, #12
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	20000120 	.word	0x20000120
	...

080108d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80108d0:	f3ef 8009 	mrs	r0, PSP
 80108d4:	f3bf 8f6f 	isb	sy
 80108d8:	4b15      	ldr	r3, [pc, #84]	; (8010930 <pxCurrentTCBConst>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	f01e 0f10 	tst.w	lr, #16
 80108e0:	bf08      	it	eq
 80108e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80108e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ea:	6010      	str	r0, [r2, #0]
 80108ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80108f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80108f4:	f380 8811 	msr	BASEPRI, r0
 80108f8:	f3bf 8f4f 	dsb	sy
 80108fc:	f3bf 8f6f 	isb	sy
 8010900:	f7fe fd1a 	bl	800f338 <vTaskSwitchContext>
 8010904:	f04f 0000 	mov.w	r0, #0
 8010908:	f380 8811 	msr	BASEPRI, r0
 801090c:	bc09      	pop	{r0, r3}
 801090e:	6819      	ldr	r1, [r3, #0]
 8010910:	6808      	ldr	r0, [r1, #0]
 8010912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010916:	f01e 0f10 	tst.w	lr, #16
 801091a:	bf08      	it	eq
 801091c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010920:	f380 8809 	msr	PSP, r0
 8010924:	f3bf 8f6f 	isb	sy
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop
 801092c:	f3af 8000 	nop.w

08010930 <pxCurrentTCBConst>:
 8010930:	20000b8c 	.word	0x20000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010934:	bf00      	nop
 8010936:	bf00      	nop

08010938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	607b      	str	r3, [r7, #4]
}
 8010950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010952:	f7fe fc37 	bl	800f1c4 <xTaskIncrementTick>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d003      	beq.n	8010964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801095c:	4b06      	ldr	r3, [pc, #24]	; (8010978 <xPortSysTickHandler+0x40>)
 801095e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010962:	601a      	str	r2, [r3, #0]
 8010964:	2300      	movs	r3, #0
 8010966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	f383 8811 	msr	BASEPRI, r3
}
 801096e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010970:	bf00      	nop
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	e000ed04 	.word	0xe000ed04

0801097c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801097c:	b480      	push	{r7}
 801097e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010980:	4b0b      	ldr	r3, [pc, #44]	; (80109b0 <vPortSetupTimerInterrupt+0x34>)
 8010982:	2200      	movs	r2, #0
 8010984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010986:	4b0b      	ldr	r3, [pc, #44]	; (80109b4 <vPortSetupTimerInterrupt+0x38>)
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801098c:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <vPortSetupTimerInterrupt+0x3c>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a0a      	ldr	r2, [pc, #40]	; (80109bc <vPortSetupTimerInterrupt+0x40>)
 8010992:	fba2 2303 	umull	r2, r3, r2, r3
 8010996:	099b      	lsrs	r3, r3, #6
 8010998:	4a09      	ldr	r2, [pc, #36]	; (80109c0 <vPortSetupTimerInterrupt+0x44>)
 801099a:	3b01      	subs	r3, #1
 801099c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801099e:	4b04      	ldr	r3, [pc, #16]	; (80109b0 <vPortSetupTimerInterrupt+0x34>)
 80109a0:	2207      	movs	r2, #7
 80109a2:	601a      	str	r2, [r3, #0]
}
 80109a4:	bf00      	nop
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	e000e010 	.word	0xe000e010
 80109b4:	e000e018 	.word	0xe000e018
 80109b8:	20000004 	.word	0x20000004
 80109bc:	10624dd3 	.word	0x10624dd3
 80109c0:	e000e014 	.word	0xe000e014

080109c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80109c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80109d4 <vPortEnableVFP+0x10>
 80109c8:	6801      	ldr	r1, [r0, #0]
 80109ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80109ce:	6001      	str	r1, [r0, #0]
 80109d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80109d2:	bf00      	nop
 80109d4:	e000ed88 	.word	0xe000ed88

080109d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80109de:	f3ef 8305 	mrs	r3, IPSR
 80109e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2b0f      	cmp	r3, #15
 80109e8:	d914      	bls.n	8010a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80109ea:	4a17      	ldr	r2, [pc, #92]	; (8010a48 <vPortValidateInterruptPriority+0x70>)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	4413      	add	r3, r2
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80109f4:	4b15      	ldr	r3, [pc, #84]	; (8010a4c <vPortValidateInterruptPriority+0x74>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	7afa      	ldrb	r2, [r7, #11]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d20a      	bcs.n	8010a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	607b      	str	r3, [r7, #4]
}
 8010a10:	bf00      	nop
 8010a12:	e7fe      	b.n	8010a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010a14:	4b0e      	ldr	r3, [pc, #56]	; (8010a50 <vPortValidateInterruptPriority+0x78>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010a1c:	4b0d      	ldr	r3, [pc, #52]	; (8010a54 <vPortValidateInterruptPriority+0x7c>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d90a      	bls.n	8010a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	603b      	str	r3, [r7, #0]
}
 8010a36:	bf00      	nop
 8010a38:	e7fe      	b.n	8010a38 <vPortValidateInterruptPriority+0x60>
	}
 8010a3a:	bf00      	nop
 8010a3c:	3714      	adds	r7, #20
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop
 8010a48:	e000e3f0 	.word	0xe000e3f0
 8010a4c:	200011b8 	.word	0x200011b8
 8010a50:	e000ed0c 	.word	0xe000ed0c
 8010a54:	200011bc 	.word	0x200011bc

08010a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b08a      	sub	sp, #40	; 0x28
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010a60:	2300      	movs	r3, #0
 8010a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010a64:	f7fe faf2 	bl	800f04c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010a68:	4b5b      	ldr	r3, [pc, #364]	; (8010bd8 <pvPortMalloc+0x180>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d101      	bne.n	8010a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010a70:	f000 f920 	bl	8010cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a74:	4b59      	ldr	r3, [pc, #356]	; (8010bdc <pvPortMalloc+0x184>)
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4013      	ands	r3, r2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f040 8093 	bne.w	8010ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d01d      	beq.n	8010ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010a88:	2208      	movs	r2, #8
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f003 0307 	and.w	r3, r3, #7
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d014      	beq.n	8010ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f023 0307 	bic.w	r3, r3, #7
 8010aa0:	3308      	adds	r3, #8
 8010aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f003 0307 	and.w	r3, r3, #7
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00a      	beq.n	8010ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8010aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab2:	f383 8811 	msr	BASEPRI, r3
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	f3bf 8f4f 	dsb	sy
 8010abe:	617b      	str	r3, [r7, #20]
}
 8010ac0:	bf00      	nop
 8010ac2:	e7fe      	b.n	8010ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d06e      	beq.n	8010ba8 <pvPortMalloc+0x150>
 8010aca:	4b45      	ldr	r3, [pc, #276]	; (8010be0 <pvPortMalloc+0x188>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d869      	bhi.n	8010ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010ad4:	4b43      	ldr	r3, [pc, #268]	; (8010be4 <pvPortMalloc+0x18c>)
 8010ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010ad8:	4b42      	ldr	r3, [pc, #264]	; (8010be4 <pvPortMalloc+0x18c>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010ade:	e004      	b.n	8010aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d903      	bls.n	8010afc <pvPortMalloc+0xa4>
 8010af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d1f1      	bne.n	8010ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010afc:	4b36      	ldr	r3, [pc, #216]	; (8010bd8 <pvPortMalloc+0x180>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d050      	beq.n	8010ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010b06:	6a3b      	ldr	r3, [r7, #32]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	2208      	movs	r2, #8
 8010b0c:	4413      	add	r3, r2
 8010b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b12:	681a      	ldr	r2, [r3, #0]
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1a:	685a      	ldr	r2, [r3, #4]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	1ad2      	subs	r2, r2, r3
 8010b20:	2308      	movs	r3, #8
 8010b22:	005b      	lsls	r3, r3, #1
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d91f      	bls.n	8010b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	f003 0307 	and.w	r3, r3, #7
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00a      	beq.n	8010b50 <pvPortMalloc+0xf8>
	__asm volatile
 8010b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	613b      	str	r3, [r7, #16]
}
 8010b4c:	bf00      	nop
 8010b4e:	e7fe      	b.n	8010b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	1ad2      	subs	r2, r2, r3
 8010b58:	69bb      	ldr	r3, [r7, #24]
 8010b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010b62:	69b8      	ldr	r0, [r7, #24]
 8010b64:	f000 f908 	bl	8010d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010b68:	4b1d      	ldr	r3, [pc, #116]	; (8010be0 <pvPortMalloc+0x188>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	4a1b      	ldr	r2, [pc, #108]	; (8010be0 <pvPortMalloc+0x188>)
 8010b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010b76:	4b1a      	ldr	r3, [pc, #104]	; (8010be0 <pvPortMalloc+0x188>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	4b1b      	ldr	r3, [pc, #108]	; (8010be8 <pvPortMalloc+0x190>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d203      	bcs.n	8010b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b82:	4b17      	ldr	r3, [pc, #92]	; (8010be0 <pvPortMalloc+0x188>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4a18      	ldr	r2, [pc, #96]	; (8010be8 <pvPortMalloc+0x190>)
 8010b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	4b13      	ldr	r3, [pc, #76]	; (8010bdc <pvPortMalloc+0x184>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	431a      	orrs	r2, r3
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010b9e:	4b13      	ldr	r3, [pc, #76]	; (8010bec <pvPortMalloc+0x194>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	4a11      	ldr	r2, [pc, #68]	; (8010bec <pvPortMalloc+0x194>)
 8010ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ba8:	f7fe fa5e 	bl	800f068 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	f003 0307 	and.w	r3, r3, #7
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00a      	beq.n	8010bcc <pvPortMalloc+0x174>
	__asm volatile
 8010bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bba:	f383 8811 	msr	BASEPRI, r3
 8010bbe:	f3bf 8f6f 	isb	sy
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	60fb      	str	r3, [r7, #12]
}
 8010bc8:	bf00      	nop
 8010bca:	e7fe      	b.n	8010bca <pvPortMalloc+0x172>
	return pvReturn;
 8010bcc:	69fb      	ldr	r3, [r7, #28]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3728      	adds	r7, #40	; 0x28
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	200038d8 	.word	0x200038d8
 8010bdc:	200038ec 	.word	0x200038ec
 8010be0:	200038dc 	.word	0x200038dc
 8010be4:	200038d0 	.word	0x200038d0
 8010be8:	200038e0 	.word	0x200038e0
 8010bec:	200038e4 	.word	0x200038e4

08010bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d04d      	beq.n	8010c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c02:	2308      	movs	r3, #8
 8010c04:	425b      	negs	r3, r3
 8010c06:	697a      	ldr	r2, [r7, #20]
 8010c08:	4413      	add	r3, r2
 8010c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	685a      	ldr	r2, [r3, #4]
 8010c14:	4b24      	ldr	r3, [pc, #144]	; (8010ca8 <vPortFree+0xb8>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	4013      	ands	r3, r2
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10a      	bne.n	8010c34 <vPortFree+0x44>
	__asm volatile
 8010c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
 8010c2e:	60fb      	str	r3, [r7, #12]
}
 8010c30:	bf00      	nop
 8010c32:	e7fe      	b.n	8010c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00a      	beq.n	8010c52 <vPortFree+0x62>
	__asm volatile
 8010c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	60bb      	str	r3, [r7, #8]
}
 8010c4e:	bf00      	nop
 8010c50:	e7fe      	b.n	8010c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	685a      	ldr	r2, [r3, #4]
 8010c56:	4b14      	ldr	r3, [pc, #80]	; (8010ca8 <vPortFree+0xb8>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4013      	ands	r3, r2
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d01e      	beq.n	8010c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d11a      	bne.n	8010c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	4b0e      	ldr	r3, [pc, #56]	; (8010ca8 <vPortFree+0xb8>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	43db      	mvns	r3, r3
 8010c72:	401a      	ands	r2, r3
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c78:	f7fe f9e8 	bl	800f04c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	685a      	ldr	r2, [r3, #4]
 8010c80:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <vPortFree+0xbc>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4413      	add	r3, r2
 8010c86:	4a09      	ldr	r2, [pc, #36]	; (8010cac <vPortFree+0xbc>)
 8010c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c8a:	6938      	ldr	r0, [r7, #16]
 8010c8c:	f000 f874 	bl	8010d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010c90:	4b07      	ldr	r3, [pc, #28]	; (8010cb0 <vPortFree+0xc0>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	3301      	adds	r3, #1
 8010c96:	4a06      	ldr	r2, [pc, #24]	; (8010cb0 <vPortFree+0xc0>)
 8010c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010c9a:	f7fe f9e5 	bl	800f068 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c9e:	bf00      	nop
 8010ca0:	3718      	adds	r7, #24
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	200038ec 	.word	0x200038ec
 8010cac:	200038dc 	.word	0x200038dc
 8010cb0:	200038e8 	.word	0x200038e8

08010cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010cba:	f242 7310 	movw	r3, #10000	; 0x2710
 8010cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010cc0:	4b27      	ldr	r3, [pc, #156]	; (8010d60 <prvHeapInit+0xac>)
 8010cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f003 0307 	and.w	r3, r3, #7
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00c      	beq.n	8010ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3307      	adds	r3, #7
 8010cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f023 0307 	bic.w	r3, r3, #7
 8010cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010cdc:	68ba      	ldr	r2, [r7, #8]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	4a1f      	ldr	r2, [pc, #124]	; (8010d60 <prvHeapInit+0xac>)
 8010ce4:	4413      	add	r3, r2
 8010ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010cec:	4a1d      	ldr	r2, [pc, #116]	; (8010d64 <prvHeapInit+0xb0>)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010cf2:	4b1c      	ldr	r3, [pc, #112]	; (8010d64 <prvHeapInit+0xb0>)
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010d00:	2208      	movs	r2, #8
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	1a9b      	subs	r3, r3, r2
 8010d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f023 0307 	bic.w	r3, r3, #7
 8010d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	4a15      	ldr	r2, [pc, #84]	; (8010d68 <prvHeapInit+0xb4>)
 8010d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010d16:	4b14      	ldr	r3, [pc, #80]	; (8010d68 <prvHeapInit+0xb4>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d1e:	4b12      	ldr	r3, [pc, #72]	; (8010d68 <prvHeapInit+0xb4>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2200      	movs	r2, #0
 8010d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	1ad2      	subs	r2, r2, r3
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d34:	4b0c      	ldr	r3, [pc, #48]	; (8010d68 <prvHeapInit+0xb4>)
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	4a0a      	ldr	r2, [pc, #40]	; (8010d6c <prvHeapInit+0xb8>)
 8010d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	4a09      	ldr	r2, [pc, #36]	; (8010d70 <prvHeapInit+0xbc>)
 8010d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d4c:	4b09      	ldr	r3, [pc, #36]	; (8010d74 <prvHeapInit+0xc0>)
 8010d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010d52:	601a      	str	r2, [r3, #0]
}
 8010d54:	bf00      	nop
 8010d56:	3714      	adds	r7, #20
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	200011c0 	.word	0x200011c0
 8010d64:	200038d0 	.word	0x200038d0
 8010d68:	200038d8 	.word	0x200038d8
 8010d6c:	200038e0 	.word	0x200038e0
 8010d70:	200038dc 	.word	0x200038dc
 8010d74:	200038ec 	.word	0x200038ec

08010d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b085      	sub	sp, #20
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d80:	4b28      	ldr	r3, [pc, #160]	; (8010e24 <prvInsertBlockIntoFreeList+0xac>)
 8010d82:	60fb      	str	r3, [r7, #12]
 8010d84:	e002      	b.n	8010d8c <prvInsertBlockIntoFreeList+0x14>
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	60fb      	str	r3, [r7, #12]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d8f7      	bhi.n	8010d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	4413      	add	r3, r2
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d108      	bne.n	8010dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	685a      	ldr	r2, [r3, #4]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	685b      	ldr	r3, [r3, #4]
 8010db0:	441a      	add	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	68ba      	ldr	r2, [r7, #8]
 8010dc4:	441a      	add	r2, r3
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d118      	bne.n	8010e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681a      	ldr	r2, [r3, #0]
 8010dd2:	4b15      	ldr	r3, [pc, #84]	; (8010e28 <prvInsertBlockIntoFreeList+0xb0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d00d      	beq.n	8010df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	685a      	ldr	r2, [r3, #4]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	441a      	add	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	601a      	str	r2, [r3, #0]
 8010df4:	e008      	b.n	8010e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010df6:	4b0c      	ldr	r3, [pc, #48]	; (8010e28 <prvInsertBlockIntoFreeList+0xb0>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	e003      	b.n	8010e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d002      	beq.n	8010e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e16:	bf00      	nop
 8010e18:	3714      	adds	r7, #20
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	200038d0 	.word	0x200038d0
 8010e28:	200038d8 	.word	0x200038d8

08010e2c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010e30:	2200      	movs	r2, #0
 8010e32:	4912      	ldr	r1, [pc, #72]	; (8010e7c <MX_USB_Device_Init+0x50>)
 8010e34:	4812      	ldr	r0, [pc, #72]	; (8010e80 <MX_USB_Device_Init+0x54>)
 8010e36:	f7fb f81b 	bl	800be70 <USBD_Init>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d001      	beq.n	8010e44 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010e40:	f7ef fffc 	bl	8000e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010e44:	490f      	ldr	r1, [pc, #60]	; (8010e84 <MX_USB_Device_Init+0x58>)
 8010e46:	480e      	ldr	r0, [pc, #56]	; (8010e80 <MX_USB_Device_Init+0x54>)
 8010e48:	f7fb f842 	bl	800bed0 <USBD_RegisterClass>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d001      	beq.n	8010e56 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010e52:	f7ef fff3 	bl	8000e3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010e56:	490c      	ldr	r1, [pc, #48]	; (8010e88 <MX_USB_Device_Init+0x5c>)
 8010e58:	4809      	ldr	r0, [pc, #36]	; (8010e80 <MX_USB_Device_Init+0x54>)
 8010e5a:	f7fa ff93 	bl	800bd84 <USBD_CDC_RegisterInterface>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d001      	beq.n	8010e68 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010e64:	f7ef ffea 	bl	8000e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010e68:	4805      	ldr	r0, [pc, #20]	; (8010e80 <MX_USB_Device_Init+0x54>)
 8010e6a:	f7fb f858 	bl	800bf1e <USBD_Start>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d001      	beq.n	8010e78 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010e74:	f7ef ffe2 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010e78:	bf00      	nop
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	20000138 	.word	0x20000138
 8010e80:	20003ee8 	.word	0x20003ee8
 8010e84:	2000001c 	.word	0x2000001c
 8010e88:	20000124 	.word	0x20000124

08010e8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010e90:	2200      	movs	r2, #0
 8010e92:	4905      	ldr	r1, [pc, #20]	; (8010ea8 <CDC_Init_FS+0x1c>)
 8010e94:	4805      	ldr	r0, [pc, #20]	; (8010eac <CDC_Init_FS+0x20>)
 8010e96:	f7fa ff8a 	bl	800bdae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010e9a:	4905      	ldr	r1, [pc, #20]	; (8010eb0 <CDC_Init_FS+0x24>)
 8010e9c:	4803      	ldr	r0, [pc, #12]	; (8010eac <CDC_Init_FS+0x20>)
 8010e9e:	f7fa ffa4 	bl	800bdea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ea2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	200049b8 	.word	0x200049b8
 8010eac:	20003ee8 	.word	0x20003ee8
 8010eb0:	200041b8 	.word	0x200041b8

08010eb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010eb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b083      	sub	sp, #12
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	4603      	mov	r3, r0
 8010ecc:	6039      	str	r1, [r7, #0]
 8010ece:	71fb      	strb	r3, [r7, #7]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	2b23      	cmp	r3, #35	; 0x23
 8010ed8:	d84a      	bhi.n	8010f70 <CDC_Control_FS+0xac>
 8010eda:	a201      	add	r2, pc, #4	; (adr r2, 8010ee0 <CDC_Control_FS+0x1c>)
 8010edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee0:	08010f71 	.word	0x08010f71
 8010ee4:	08010f71 	.word	0x08010f71
 8010ee8:	08010f71 	.word	0x08010f71
 8010eec:	08010f71 	.word	0x08010f71
 8010ef0:	08010f71 	.word	0x08010f71
 8010ef4:	08010f71 	.word	0x08010f71
 8010ef8:	08010f71 	.word	0x08010f71
 8010efc:	08010f71 	.word	0x08010f71
 8010f00:	08010f71 	.word	0x08010f71
 8010f04:	08010f71 	.word	0x08010f71
 8010f08:	08010f71 	.word	0x08010f71
 8010f0c:	08010f71 	.word	0x08010f71
 8010f10:	08010f71 	.word	0x08010f71
 8010f14:	08010f71 	.word	0x08010f71
 8010f18:	08010f71 	.word	0x08010f71
 8010f1c:	08010f71 	.word	0x08010f71
 8010f20:	08010f71 	.word	0x08010f71
 8010f24:	08010f71 	.word	0x08010f71
 8010f28:	08010f71 	.word	0x08010f71
 8010f2c:	08010f71 	.word	0x08010f71
 8010f30:	08010f71 	.word	0x08010f71
 8010f34:	08010f71 	.word	0x08010f71
 8010f38:	08010f71 	.word	0x08010f71
 8010f3c:	08010f71 	.word	0x08010f71
 8010f40:	08010f71 	.word	0x08010f71
 8010f44:	08010f71 	.word	0x08010f71
 8010f48:	08010f71 	.word	0x08010f71
 8010f4c:	08010f71 	.word	0x08010f71
 8010f50:	08010f71 	.word	0x08010f71
 8010f54:	08010f71 	.word	0x08010f71
 8010f58:	08010f71 	.word	0x08010f71
 8010f5c:	08010f71 	.word	0x08010f71
 8010f60:	08010f71 	.word	0x08010f71
 8010f64:	08010f71 	.word	0x08010f71
 8010f68:	08010f71 	.word	0x08010f71
 8010f6c:	08010f71 	.word	0x08010f71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010f70:	bf00      	nop
  }

  return (USBD_OK);
 8010f72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	370c      	adds	r7, #12
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr

08010f80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010f8a:	6879      	ldr	r1, [r7, #4]
 8010f8c:	4805      	ldr	r0, [pc, #20]	; (8010fa4 <CDC_Receive_FS+0x24>)
 8010f8e:	f7fa ff2c 	bl	800bdea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010f92:	4804      	ldr	r0, [pc, #16]	; (8010fa4 <CDC_Receive_FS+0x24>)
 8010f94:	f7fa ff42 	bl	800be1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010f98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3708      	adds	r7, #8
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20003ee8 	.word	0x20003ee8

08010fa8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b087      	sub	sp, #28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	371c      	adds	r7, #28
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr
	...

08010fcc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	6039      	str	r1, [r7, #0]
 8010fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	2212      	movs	r2, #18
 8010fdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010fde:	4b03      	ldr	r3, [pc, #12]	; (8010fec <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr
 8010fec:	20000158 	.word	0x20000158

08010ff0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	6039      	str	r1, [r7, #0]
 8010ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2204      	movs	r2, #4
 8011000:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011002:	4b03      	ldr	r3, [pc, #12]	; (8011010 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011004:	4618      	mov	r0, r3
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr
 8011010:	2000016c 	.word	0x2000016c

08011014 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	4603      	mov	r3, r0
 801101c:	6039      	str	r1, [r7, #0]
 801101e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011020:	79fb      	ldrb	r3, [r7, #7]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d105      	bne.n	8011032 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	4907      	ldr	r1, [pc, #28]	; (8011048 <USBD_CDC_ProductStrDescriptor+0x34>)
 801102a:	4808      	ldr	r0, [pc, #32]	; (801104c <USBD_CDC_ProductStrDescriptor+0x38>)
 801102c:	f7fb ff5f 	bl	800ceee <USBD_GetString>
 8011030:	e004      	b.n	801103c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011032:	683a      	ldr	r2, [r7, #0]
 8011034:	4904      	ldr	r1, [pc, #16]	; (8011048 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011036:	4805      	ldr	r0, [pc, #20]	; (801104c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011038:	f7fb ff59 	bl	800ceee <USBD_GetString>
  }
  return USBD_StrDesc;
 801103c:	4b02      	ldr	r3, [pc, #8]	; (8011048 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801103e:	4618      	mov	r0, r3
 8011040:	3708      	adds	r7, #8
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	200051b8 	.word	0x200051b8
 801104c:	0801223c 	.word	0x0801223c

08011050 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	4603      	mov	r3, r0
 8011058:	6039      	str	r1, [r7, #0]
 801105a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	4904      	ldr	r1, [pc, #16]	; (8011070 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011060:	4804      	ldr	r0, [pc, #16]	; (8011074 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011062:	f7fb ff44 	bl	800ceee <USBD_GetString>
  return USBD_StrDesc;
 8011066:	4b02      	ldr	r3, [pc, #8]	; (8011070 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011068:	4618      	mov	r0, r3
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}
 8011070:	200051b8 	.word	0x200051b8
 8011074:	08012254 	.word	0x08012254

08011078 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	4603      	mov	r3, r0
 8011080:	6039      	str	r1, [r7, #0]
 8011082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	221a      	movs	r2, #26
 8011088:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801108a:	f000 f843 	bl	8011114 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801108e:	4b02      	ldr	r3, [pc, #8]	; (8011098 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	20000170 	.word	0x20000170

0801109c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	4603      	mov	r3, r0
 80110a4:	6039      	str	r1, [r7, #0]
 80110a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80110a8:	79fb      	ldrb	r3, [r7, #7]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d105      	bne.n	80110ba <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	4907      	ldr	r1, [pc, #28]	; (80110d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80110b2:	4808      	ldr	r0, [pc, #32]	; (80110d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80110b4:	f7fb ff1b 	bl	800ceee <USBD_GetString>
 80110b8:	e004      	b.n	80110c4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80110ba:	683a      	ldr	r2, [r7, #0]
 80110bc:	4904      	ldr	r1, [pc, #16]	; (80110d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80110be:	4805      	ldr	r0, [pc, #20]	; (80110d4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80110c0:	f7fb ff15 	bl	800ceee <USBD_GetString>
  }
  return USBD_StrDesc;
 80110c4:	4b02      	ldr	r3, [pc, #8]	; (80110d0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	200051b8 	.word	0x200051b8
 80110d4:	08012268 	.word	0x08012268

080110d8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	4603      	mov	r3, r0
 80110e0:	6039      	str	r1, [r7, #0]
 80110e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80110e4:	79fb      	ldrb	r3, [r7, #7]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d105      	bne.n	80110f6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80110ea:	683a      	ldr	r2, [r7, #0]
 80110ec:	4907      	ldr	r1, [pc, #28]	; (801110c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80110ee:	4808      	ldr	r0, [pc, #32]	; (8011110 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80110f0:	f7fb fefd 	bl	800ceee <USBD_GetString>
 80110f4:	e004      	b.n	8011100 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80110f6:	683a      	ldr	r2, [r7, #0]
 80110f8:	4904      	ldr	r1, [pc, #16]	; (801110c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80110fa:	4805      	ldr	r0, [pc, #20]	; (8011110 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80110fc:	f7fb fef7 	bl	800ceee <USBD_GetString>
  }
  return USBD_StrDesc;
 8011100:	4b02      	ldr	r3, [pc, #8]	; (801110c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011102:	4618      	mov	r0, r3
 8011104:	3708      	adds	r7, #8
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	200051b8 	.word	0x200051b8
 8011110:	08012274 	.word	0x08012274

08011114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801111a:	4b0f      	ldr	r3, [pc, #60]	; (8011158 <Get_SerialNum+0x44>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011120:	4b0e      	ldr	r3, [pc, #56]	; (801115c <Get_SerialNum+0x48>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011126:	4b0e      	ldr	r3, [pc, #56]	; (8011160 <Get_SerialNum+0x4c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4413      	add	r3, r2
 8011132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d009      	beq.n	801114e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801113a:	2208      	movs	r2, #8
 801113c:	4909      	ldr	r1, [pc, #36]	; (8011164 <Get_SerialNum+0x50>)
 801113e:	68f8      	ldr	r0, [r7, #12]
 8011140:	f000 f814 	bl	801116c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011144:	2204      	movs	r2, #4
 8011146:	4908      	ldr	r1, [pc, #32]	; (8011168 <Get_SerialNum+0x54>)
 8011148:	68b8      	ldr	r0, [r7, #8]
 801114a:	f000 f80f 	bl	801116c <IntToUnicode>
  }
}
 801114e:	bf00      	nop
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	1fff7590 	.word	0x1fff7590
 801115c:	1fff7594 	.word	0x1fff7594
 8011160:	1fff7598 	.word	0x1fff7598
 8011164:	20000172 	.word	0x20000172
 8011168:	20000182 	.word	0x20000182

0801116c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801116c:	b480      	push	{r7}
 801116e:	b087      	sub	sp, #28
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	4613      	mov	r3, r2
 8011178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801117a:	2300      	movs	r3, #0
 801117c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801117e:	2300      	movs	r3, #0
 8011180:	75fb      	strb	r3, [r7, #23]
 8011182:	e027      	b.n	80111d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	0f1b      	lsrs	r3, r3, #28
 8011188:	2b09      	cmp	r3, #9
 801118a:	d80b      	bhi.n	80111a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	0f1b      	lsrs	r3, r3, #28
 8011190:	b2da      	uxtb	r2, r3
 8011192:	7dfb      	ldrb	r3, [r7, #23]
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	4619      	mov	r1, r3
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	440b      	add	r3, r1
 801119c:	3230      	adds	r2, #48	; 0x30
 801119e:	b2d2      	uxtb	r2, r2
 80111a0:	701a      	strb	r2, [r3, #0]
 80111a2:	e00a      	b.n	80111ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	0f1b      	lsrs	r3, r3, #28
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	7dfb      	ldrb	r3, [r7, #23]
 80111ac:	005b      	lsls	r3, r3, #1
 80111ae:	4619      	mov	r1, r3
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	440b      	add	r3, r1
 80111b4:	3237      	adds	r2, #55	; 0x37
 80111b6:	b2d2      	uxtb	r2, r2
 80111b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80111c0:	7dfb      	ldrb	r3, [r7, #23]
 80111c2:	005b      	lsls	r3, r3, #1
 80111c4:	3301      	adds	r3, #1
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	4413      	add	r3, r2
 80111ca:	2200      	movs	r2, #0
 80111cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80111ce:	7dfb      	ldrb	r3, [r7, #23]
 80111d0:	3301      	adds	r3, #1
 80111d2:	75fb      	strb	r3, [r7, #23]
 80111d4:	7dfa      	ldrb	r2, [r7, #23]
 80111d6:	79fb      	ldrb	r3, [r7, #7]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d3d3      	bcc.n	8011184 <IntToUnicode+0x18>
  }
}
 80111dc:	bf00      	nop
 80111de:	bf00      	nop
 80111e0:	371c      	adds	r7, #28
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr

080111ea <LL_AHB2_GRP1_EnableClock>:
{
 80111ea:	b480      	push	{r7}
 80111ec:	b085      	sub	sp, #20
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80111f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	4313      	orrs	r3, r2
 8011200:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4013      	ands	r3, r2
 801120c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801120e:	68fb      	ldr	r3, [r7, #12]
}
 8011210:	bf00      	nop
 8011212:	3714      	adds	r7, #20
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <LL_APB1_GRP1_EnableClock>:
{
 801121c:	b480      	push	{r7}
 801121e:	b085      	sub	sp, #20
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011228:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801122a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4313      	orrs	r3, r2
 8011232:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4013      	ands	r3, r2
 801123e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011240:	68fb      	ldr	r3, [r7, #12]
}
 8011242:	bf00      	nop
 8011244:	3714      	adds	r7, #20
 8011246:	46bd      	mov	sp, r7
 8011248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124c:	4770      	bx	lr
	...

08011250 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b088      	sub	sp, #32
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011258:	f107 030c 	add.w	r3, r7, #12
 801125c:	2200      	movs	r2, #0
 801125e:	601a      	str	r2, [r3, #0]
 8011260:	605a      	str	r2, [r3, #4]
 8011262:	609a      	str	r2, [r3, #8]
 8011264:	60da      	str	r2, [r3, #12]
 8011266:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a1d      	ldr	r2, [pc, #116]	; (80112e4 <HAL_PCD_MspInit+0x94>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d134      	bne.n	80112dc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011272:	2001      	movs	r0, #1
 8011274:	f7ff ffb9 	bl	80111ea <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011278:	2004      	movs	r0, #4
 801127a:	f7ff ffb6 	bl	80111ea <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    PC9     ------> USB_NOE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801127e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011284:	2302      	movs	r3, #2
 8011286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011288:	2300      	movs	r3, #0
 801128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801128c:	2300      	movs	r3, #0
 801128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011290:	230a      	movs	r3, #10
 8011292:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011294:	f107 030c 	add.w	r3, r7, #12
 8011298:	4619      	mov	r1, r3
 801129a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801129e:	f7f1 fbc1 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80112a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112a8:	2302      	movs	r3, #2
 80112aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112ac:	2300      	movs	r3, #0
 80112ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112b0:	2300      	movs	r3, #0
 80112b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80112b4:	230a      	movs	r3, #10
 80112b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80112b8:	f107 030c 	add.w	r3, r7, #12
 80112bc:	4619      	mov	r1, r3
 80112be:	480a      	ldr	r0, [pc, #40]	; (80112e8 <HAL_PCD_MspInit+0x98>)
 80112c0:	f7f1 fbb0 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80112c4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80112c8:	f7ff ffa8 	bl	801121c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80112cc:	2200      	movs	r2, #0
 80112ce:	2105      	movs	r1, #5
 80112d0:	2014      	movs	r0, #20
 80112d2:	f7f1 fb7f 	bl	80029d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80112d6:	2014      	movs	r0, #20
 80112d8:	f7f1 fb96 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80112dc:	bf00      	nop
 80112de:	3720      	adds	r7, #32
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	40006800 	.word	0x40006800
 80112e8:	48000800 	.word	0x48000800

080112ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011300:	4619      	mov	r1, r3
 8011302:	4610      	mov	r0, r2
 8011304:	f7fa fe56 	bl	800bfb4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	460b      	mov	r3, r1
 801131a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011322:	78fa      	ldrb	r2, [r7, #3]
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	4613      	mov	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4413      	add	r3, r2
 801132c:	00db      	lsls	r3, r3, #3
 801132e:	440b      	add	r3, r1
 8011330:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	78fb      	ldrb	r3, [r7, #3]
 8011338:	4619      	mov	r1, r3
 801133a:	f7fa fe90 	bl	800c05e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801133e:	bf00      	nop
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011346:	b580      	push	{r7, lr}
 8011348:	b082      	sub	sp, #8
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
 801134e:	460b      	mov	r3, r1
 8011350:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011358:	78fa      	ldrb	r2, [r7, #3]
 801135a:	6879      	ldr	r1, [r7, #4]
 801135c:	4613      	mov	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4413      	add	r3, r2
 8011362:	00db      	lsls	r3, r3, #3
 8011364:	440b      	add	r3, r1
 8011366:	333c      	adds	r3, #60	; 0x3c
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	78fb      	ldrb	r3, [r7, #3]
 801136c:	4619      	mov	r1, r3
 801136e:	f7fa fed9 	bl	800c124 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011372:	bf00      	nop
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}

0801137a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801137a:	b580      	push	{r7, lr}
 801137c:	b082      	sub	sp, #8
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011388:	4618      	mov	r0, r3
 801138a:	f7fa ffed 	bl	800c368 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801138e:	bf00      	nop
 8011390:	3708      	adds	r7, #8
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b084      	sub	sp, #16
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801139e:	2301      	movs	r3, #1
 80113a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	2b02      	cmp	r3, #2
 80113a8:	d001      	beq.n	80113ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80113aa:	f7ef fd47 	bl	8000e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80113b4:	7bfa      	ldrb	r2, [r7, #15]
 80113b6:	4611      	mov	r1, r2
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fa ff97 	bl	800c2ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7fa ff43 	bl	800c250 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80113ca:	bf00      	nop
 80113cc:	3710      	adds	r7, #16
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
	...

080113d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fa ff92 	bl	800c30c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	699b      	ldr	r3, [r3, #24]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d005      	beq.n	80113fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113f0:	4b04      	ldr	r3, [pc, #16]	; (8011404 <HAL_PCD_SuspendCallback+0x30>)
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	4a03      	ldr	r2, [pc, #12]	; (8011404 <HAL_PCD_SuspendCallback+0x30>)
 80113f6:	f043 0306 	orr.w	r3, r3, #6
 80113fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80113fc:	bf00      	nop
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	e000ed00 	.word	0xe000ed00

08011408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d007      	beq.n	8011428 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011418:	4b08      	ldr	r3, [pc, #32]	; (801143c <HAL_PCD_ResumeCallback+0x34>)
 801141a:	691b      	ldr	r3, [r3, #16]
 801141c:	4a07      	ldr	r2, [pc, #28]	; (801143c <HAL_PCD_ResumeCallback+0x34>)
 801141e:	f023 0306 	bic.w	r3, r3, #6
 8011422:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011424:	f000 f9fc 	bl	8011820 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801142e:	4618      	mov	r0, r3
 8011430:	f7fa ff82 	bl	800c338 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011434:	bf00      	nop
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	e000ed00 	.word	0xe000ed00

08011440 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011448:	4a2c      	ldr	r2, [pc, #176]	; (80114fc <USBD_LL_Init+0xbc>)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4a2a      	ldr	r2, [pc, #168]	; (80114fc <USBD_LL_Init+0xbc>)
 8011454:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011458:	f7f4 f828 	bl	80054ac <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801145c:	4b27      	ldr	r3, [pc, #156]	; (80114fc <USBD_LL_Init+0xbc>)
 801145e:	4a28      	ldr	r2, [pc, #160]	; (8011500 <USBD_LL_Init+0xc0>)
 8011460:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011462:	4b26      	ldr	r3, [pc, #152]	; (80114fc <USBD_LL_Init+0xbc>)
 8011464:	2208      	movs	r2, #8
 8011466:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011468:	4b24      	ldr	r3, [pc, #144]	; (80114fc <USBD_LL_Init+0xbc>)
 801146a:	2202      	movs	r2, #2
 801146c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801146e:	4b23      	ldr	r3, [pc, #140]	; (80114fc <USBD_LL_Init+0xbc>)
 8011470:	2202      	movs	r2, #2
 8011472:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011474:	4b21      	ldr	r3, [pc, #132]	; (80114fc <USBD_LL_Init+0xbc>)
 8011476:	2200      	movs	r2, #0
 8011478:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801147a:	4b20      	ldr	r3, [pc, #128]	; (80114fc <USBD_LL_Init+0xbc>)
 801147c:	2200      	movs	r2, #0
 801147e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011480:	4b1e      	ldr	r3, [pc, #120]	; (80114fc <USBD_LL_Init+0xbc>)
 8011482:	2200      	movs	r2, #0
 8011484:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011486:	4b1d      	ldr	r3, [pc, #116]	; (80114fc <USBD_LL_Init+0xbc>)
 8011488:	2200      	movs	r2, #0
 801148a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801148c:	481b      	ldr	r0, [pc, #108]	; (80114fc <USBD_LL_Init+0xbc>)
 801148e:	f7f2 fabb 	bl	8003a08 <HAL_PCD_Init>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d001      	beq.n	801149c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011498:	f7ef fcd0 	bl	8000e3c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114a2:	2318      	movs	r3, #24
 80114a4:	2200      	movs	r2, #0
 80114a6:	2100      	movs	r1, #0
 80114a8:	f7f3 ff74 	bl	8005394 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114b2:	2358      	movs	r3, #88	; 0x58
 80114b4:	2200      	movs	r2, #0
 80114b6:	2180      	movs	r1, #128	; 0x80
 80114b8:	f7f3 ff6c 	bl	8005394 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114c2:	23c0      	movs	r3, #192	; 0xc0
 80114c4:	2200      	movs	r2, #0
 80114c6:	2181      	movs	r1, #129	; 0x81
 80114c8:	f7f3 ff64 	bl	8005394 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80114d6:	2200      	movs	r2, #0
 80114d8:	2101      	movs	r1, #1
 80114da:	f7f3 ff5b 	bl	8005394 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80114e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114e8:	2200      	movs	r2, #0
 80114ea:	2182      	movs	r1, #130	; 0x82
 80114ec:	f7f3 ff52 	bl	8005394 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80114f0:	2300      	movs	r3, #0
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3708      	adds	r7, #8
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	200053b8 	.word	0x200053b8
 8011500:	40006800 	.word	0x40006800

08011504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801150c:	2300      	movs	r3, #0
 801150e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801151a:	4618      	mov	r0, r3
 801151c:	f7f2 fb59 	bl	8003bd2 <HAL_PCD_Start>
 8011520:	4603      	mov	r3, r0
 8011522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011524:	7bfb      	ldrb	r3, [r7, #15]
 8011526:	4618      	mov	r0, r3
 8011528:	f000 f980 	bl	801182c <USBD_Get_USB_Status>
 801152c:	4603      	mov	r3, r0
 801152e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011530:	7bbb      	ldrb	r3, [r7, #14]
}
 8011532:	4618      	mov	r0, r3
 8011534:	3710      	adds	r7, #16
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b084      	sub	sp, #16
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
 8011542:	4608      	mov	r0, r1
 8011544:	4611      	mov	r1, r2
 8011546:	461a      	mov	r2, r3
 8011548:	4603      	mov	r3, r0
 801154a:	70fb      	strb	r3, [r7, #3]
 801154c:	460b      	mov	r3, r1
 801154e:	70bb      	strb	r3, [r7, #2]
 8011550:	4613      	mov	r3, r2
 8011552:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011554:	2300      	movs	r3, #0
 8011556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011558:	2300      	movs	r3, #0
 801155a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011562:	78bb      	ldrb	r3, [r7, #2]
 8011564:	883a      	ldrh	r2, [r7, #0]
 8011566:	78f9      	ldrb	r1, [r7, #3]
 8011568:	f7f2 fca1 	bl	8003eae <HAL_PCD_EP_Open>
 801156c:	4603      	mov	r3, r0
 801156e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	4618      	mov	r0, r3
 8011574:	f000 f95a 	bl	801182c <USBD_Get_USB_Status>
 8011578:	4603      	mov	r3, r0
 801157a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801157c:	7bbb      	ldrb	r3, [r7, #14]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b084      	sub	sp, #16
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	460b      	mov	r3, r1
 8011590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011592:	2300      	movs	r3, #0
 8011594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011596:	2300      	movs	r3, #0
 8011598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115a0:	78fa      	ldrb	r2, [r7, #3]
 80115a2:	4611      	mov	r1, r2
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7f2 fce8 	bl	8003f7a <HAL_PCD_EP_Close>
 80115aa:	4603      	mov	r3, r0
 80115ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115ae:	7bfb      	ldrb	r3, [r7, #15]
 80115b0:	4618      	mov	r0, r3
 80115b2:	f000 f93b 	bl	801182c <USBD_Get_USB_Status>
 80115b6:	4603      	mov	r3, r0
 80115b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3710      	adds	r7, #16
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	460b      	mov	r3, r1
 80115ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115d0:	2300      	movs	r3, #0
 80115d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115de:	78fa      	ldrb	r2, [r7, #3]
 80115e0:	4611      	mov	r1, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7f2 fda9 	bl	800413a <HAL_PCD_EP_SetStall>
 80115e8:	4603      	mov	r3, r0
 80115ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115ec:	7bfb      	ldrb	r3, [r7, #15]
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 f91c 	bl	801182c <USBD_Get_USB_Status>
 80115f4:	4603      	mov	r3, r0
 80115f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b084      	sub	sp, #16
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	460b      	mov	r3, r1
 801160c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801160e:	2300      	movs	r3, #0
 8011610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801161c:	78fa      	ldrb	r2, [r7, #3]
 801161e:	4611      	mov	r1, r2
 8011620:	4618      	mov	r0, r3
 8011622:	f7f2 fddc 	bl	80041de <HAL_PCD_EP_ClrStall>
 8011626:	4603      	mov	r3, r0
 8011628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801162a:	7bfb      	ldrb	r3, [r7, #15]
 801162c:	4618      	mov	r0, r3
 801162e:	f000 f8fd 	bl	801182c <USBD_Get_USB_Status>
 8011632:	4603      	mov	r3, r0
 8011634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011636:	7bbb      	ldrb	r3, [r7, #14]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3710      	adds	r7, #16
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	460b      	mov	r3, r1
 801164a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011652:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011658:	2b00      	cmp	r3, #0
 801165a:	da0c      	bge.n	8011676 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801165c:	78fb      	ldrb	r3, [r7, #3]
 801165e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011662:	68f9      	ldr	r1, [r7, #12]
 8011664:	1c5a      	adds	r2, r3, #1
 8011666:	4613      	mov	r3, r2
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	4413      	add	r3, r2
 801166c:	00db      	lsls	r3, r3, #3
 801166e:	440b      	add	r3, r1
 8011670:	3302      	adds	r3, #2
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	e00b      	b.n	801168e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011676:	78fb      	ldrb	r3, [r7, #3]
 8011678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801167c:	68f9      	ldr	r1, [r7, #12]
 801167e:	4613      	mov	r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	4413      	add	r3, r2
 8011684:	00db      	lsls	r3, r3, #3
 8011686:	440b      	add	r3, r1
 8011688:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801168c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801168e:	4618      	mov	r0, r3
 8011690:	3714      	adds	r7, #20
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr

0801169a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b084      	sub	sp, #16
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
 80116a2:	460b      	mov	r3, r1
 80116a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116a6:	2300      	movs	r3, #0
 80116a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116aa:	2300      	movs	r3, #0
 80116ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80116b4:	78fa      	ldrb	r2, [r7, #3]
 80116b6:	4611      	mov	r1, r2
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7f2 fbd3 	bl	8003e64 <HAL_PCD_SetAddress>
 80116be:	4603      	mov	r3, r0
 80116c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116c2:	7bfb      	ldrb	r3, [r7, #15]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f000 f8b1 	bl	801182c <USBD_Get_USB_Status>
 80116ca:	4603      	mov	r3, r0
 80116cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3710      	adds	r7, #16
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	607a      	str	r2, [r7, #4]
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	460b      	mov	r3, r1
 80116e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116e8:	2300      	movs	r3, #0
 80116ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116ec:	2300      	movs	r3, #0
 80116ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116f6:	7af9      	ldrb	r1, [r7, #11]
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	687a      	ldr	r2, [r7, #4]
 80116fc:	f7f2 fcda 	bl	80040b4 <HAL_PCD_EP_Transmit>
 8011700:	4603      	mov	r3, r0
 8011702:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011704:	7dfb      	ldrb	r3, [r7, #23]
 8011706:	4618      	mov	r0, r3
 8011708:	f000 f890 	bl	801182c <USBD_Get_USB_Status>
 801170c:	4603      	mov	r3, r0
 801170e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011710:	7dbb      	ldrb	r3, [r7, #22]
}
 8011712:	4618      	mov	r0, r3
 8011714:	3718      	adds	r7, #24
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	607a      	str	r2, [r7, #4]
 8011724:	603b      	str	r3, [r7, #0]
 8011726:	460b      	mov	r3, r1
 8011728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801172a:	2300      	movs	r3, #0
 801172c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801172e:	2300      	movs	r3, #0
 8011730:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011738:	7af9      	ldrb	r1, [r7, #11]
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	f7f2 fc64 	bl	800400a <HAL_PCD_EP_Receive>
 8011742:	4603      	mov	r3, r0
 8011744:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011746:	7dfb      	ldrb	r3, [r7, #23]
 8011748:	4618      	mov	r0, r3
 801174a:	f000 f86f 	bl	801182c <USBD_Get_USB_Status>
 801174e:	4603      	mov	r3, r0
 8011750:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011752:	7dbb      	ldrb	r3, [r7, #22]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3718      	adds	r7, #24
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	460b      	mov	r3, r1
 8011766:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801176e:	78fa      	ldrb	r2, [r7, #3]
 8011770:	4611      	mov	r1, r2
 8011772:	4618      	mov	r0, r3
 8011774:	f7f2 fc86 	bl	8004084 <HAL_PCD_EP_GetRxCount>
 8011778:	4603      	mov	r3, r0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3708      	adds	r7, #8
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
	...

08011784 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011790:	78fb      	ldrb	r3, [r7, #3]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d002      	beq.n	801179c <HAL_PCDEx_LPM_Callback+0x18>
 8011796:	2b01      	cmp	r3, #1
 8011798:	d013      	beq.n	80117c2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801179a:	e023      	b.n	80117e4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d007      	beq.n	80117b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80117a4:	f000 f83c 	bl	8011820 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117a8:	4b10      	ldr	r3, [pc, #64]	; (80117ec <HAL_PCDEx_LPM_Callback+0x68>)
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	4a0f      	ldr	r2, [pc, #60]	; (80117ec <HAL_PCDEx_LPM_Callback+0x68>)
 80117ae:	f023 0306 	bic.w	r3, r3, #6
 80117b2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fa fdbc 	bl	800c338 <USBD_LL_Resume>
    break;
 80117c0:	e010      	b.n	80117e4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fa fd9f 	bl	800c30c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d005      	beq.n	80117e2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117d6:	4b05      	ldr	r3, [pc, #20]	; (80117ec <HAL_PCDEx_LPM_Callback+0x68>)
 80117d8:	691b      	ldr	r3, [r3, #16]
 80117da:	4a04      	ldr	r2, [pc, #16]	; (80117ec <HAL_PCDEx_LPM_Callback+0x68>)
 80117dc:	f043 0306 	orr.w	r3, r3, #6
 80117e0:	6113      	str	r3, [r2, #16]
    break;
 80117e2:	bf00      	nop
}
 80117e4:	bf00      	nop
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	e000ed00 	.word	0xe000ed00

080117f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80117f8:	4b03      	ldr	r3, [pc, #12]	; (8011808 <USBD_static_malloc+0x18>)
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	370c      	adds	r7, #12
 80117fe:	46bd      	mov	sp, r7
 8011800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop
 8011808:	200038f0 	.word	0x200038f0

0801180c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]

}
 8011814:	bf00      	nop
 8011816:	370c      	adds	r7, #12
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr

08011820 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011824:	f7ef fa3c 	bl	8000ca0 <SystemClock_Config>
}
 8011828:	bf00      	nop
 801182a:	bd80      	pop	{r7, pc}

0801182c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801182c:	b480      	push	{r7}
 801182e:	b085      	sub	sp, #20
 8011830:	af00      	add	r7, sp, #0
 8011832:	4603      	mov	r3, r0
 8011834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011836:	2300      	movs	r3, #0
 8011838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801183a:	79fb      	ldrb	r3, [r7, #7]
 801183c:	2b03      	cmp	r3, #3
 801183e:	d817      	bhi.n	8011870 <USBD_Get_USB_Status+0x44>
 8011840:	a201      	add	r2, pc, #4	; (adr r2, 8011848 <USBD_Get_USB_Status+0x1c>)
 8011842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011846:	bf00      	nop
 8011848:	08011859 	.word	0x08011859
 801184c:	0801185f 	.word	0x0801185f
 8011850:	08011865 	.word	0x08011865
 8011854:	0801186b 	.word	0x0801186b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011858:	2300      	movs	r3, #0
 801185a:	73fb      	strb	r3, [r7, #15]
    break;
 801185c:	e00b      	b.n	8011876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801185e:	2303      	movs	r3, #3
 8011860:	73fb      	strb	r3, [r7, #15]
    break;
 8011862:	e008      	b.n	8011876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011864:	2301      	movs	r3, #1
 8011866:	73fb      	strb	r3, [r7, #15]
    break;
 8011868:	e005      	b.n	8011876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801186a:	2303      	movs	r3, #3
 801186c:	73fb      	strb	r3, [r7, #15]
    break;
 801186e:	e002      	b.n	8011876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011870:	2303      	movs	r3, #3
 8011872:	73fb      	strb	r3, [r7, #15]
    break;
 8011874:	bf00      	nop
  }
  return usb_status;
 8011876:	7bfb      	ldrb	r3, [r7, #15]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3714      	adds	r7, #20
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <powf>:
 8011884:	b508      	push	{r3, lr}
 8011886:	ed2d 8b04 	vpush	{d8-d9}
 801188a:	eeb0 9a40 	vmov.f32	s18, s0
 801188e:	eef0 8a60 	vmov.f32	s17, s1
 8011892:	f000 f88f 	bl	80119b4 <__ieee754_powf>
 8011896:	4b43      	ldr	r3, [pc, #268]	; (80119a4 <powf+0x120>)
 8011898:	f993 3000 	ldrsb.w	r3, [r3]
 801189c:	3301      	adds	r3, #1
 801189e:	eeb0 8a40 	vmov.f32	s16, s0
 80118a2:	d012      	beq.n	80118ca <powf+0x46>
 80118a4:	eef4 8a68 	vcmp.f32	s17, s17
 80118a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ac:	d60d      	bvs.n	80118ca <powf+0x46>
 80118ae:	eeb4 9a49 	vcmp.f32	s18, s18
 80118b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b6:	d70d      	bvc.n	80118d4 <powf+0x50>
 80118b8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80118c4:	bf08      	it	eq
 80118c6:	eeb0 8a67 	vmoveq.f32	s16, s15
 80118ca:	eeb0 0a48 	vmov.f32	s0, s16
 80118ce:	ecbd 8b04 	vpop	{d8-d9}
 80118d2:	bd08      	pop	{r3, pc}
 80118d4:	eddf 9a34 	vldr	s19, [pc, #208]	; 80119a8 <powf+0x124>
 80118d8:	eeb4 9a69 	vcmp.f32	s18, s19
 80118dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e0:	d116      	bne.n	8011910 <powf+0x8c>
 80118e2:	eef4 8a69 	vcmp.f32	s17, s19
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	d057      	beq.n	801199c <powf+0x118>
 80118ec:	eeb0 0a68 	vmov.f32	s0, s17
 80118f0:	f000 fb2a 	bl	8011f48 <finitef>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d0e8      	beq.n	80118ca <powf+0x46>
 80118f8:	eef4 8ae9 	vcmpe.f32	s17, s19
 80118fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011900:	d5e3      	bpl.n	80118ca <powf+0x46>
 8011902:	f000 fc03 	bl	801210c <__errno>
 8011906:	2321      	movs	r3, #33	; 0x21
 8011908:	6003      	str	r3, [r0, #0]
 801190a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80119ac <powf+0x128>
 801190e:	e7dc      	b.n	80118ca <powf+0x46>
 8011910:	f000 fb1a 	bl	8011f48 <finitef>
 8011914:	bb50      	cbnz	r0, 801196c <powf+0xe8>
 8011916:	eeb0 0a49 	vmov.f32	s0, s18
 801191a:	f000 fb15 	bl	8011f48 <finitef>
 801191e:	b328      	cbz	r0, 801196c <powf+0xe8>
 8011920:	eeb0 0a68 	vmov.f32	s0, s17
 8011924:	f000 fb10 	bl	8011f48 <finitef>
 8011928:	b300      	cbz	r0, 801196c <powf+0xe8>
 801192a:	eeb4 8a48 	vcmp.f32	s16, s16
 801192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011932:	d706      	bvc.n	8011942 <powf+0xbe>
 8011934:	f000 fbea 	bl	801210c <__errno>
 8011938:	2321      	movs	r3, #33	; 0x21
 801193a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801193e:	6003      	str	r3, [r0, #0]
 8011940:	e7c3      	b.n	80118ca <powf+0x46>
 8011942:	f000 fbe3 	bl	801210c <__errno>
 8011946:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801194a:	2322      	movs	r3, #34	; 0x22
 801194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011950:	6003      	str	r3, [r0, #0]
 8011952:	d508      	bpl.n	8011966 <powf+0xe2>
 8011954:	eeb0 0a68 	vmov.f32	s0, s17
 8011958:	f000 fb0a 	bl	8011f70 <rintf>
 801195c:	eeb4 0a68 	vcmp.f32	s0, s17
 8011960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011964:	d1d1      	bne.n	801190a <powf+0x86>
 8011966:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80119b0 <powf+0x12c>
 801196a:	e7ae      	b.n	80118ca <powf+0x46>
 801196c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011974:	d1a9      	bne.n	80118ca <powf+0x46>
 8011976:	eeb0 0a49 	vmov.f32	s0, s18
 801197a:	f000 fae5 	bl	8011f48 <finitef>
 801197e:	2800      	cmp	r0, #0
 8011980:	d0a3      	beq.n	80118ca <powf+0x46>
 8011982:	eeb0 0a68 	vmov.f32	s0, s17
 8011986:	f000 fadf 	bl	8011f48 <finitef>
 801198a:	2800      	cmp	r0, #0
 801198c:	d09d      	beq.n	80118ca <powf+0x46>
 801198e:	f000 fbbd 	bl	801210c <__errno>
 8011992:	2322      	movs	r3, #34	; 0x22
 8011994:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80119a8 <powf+0x124>
 8011998:	6003      	str	r3, [r0, #0]
 801199a:	e796      	b.n	80118ca <powf+0x46>
 801199c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80119a0:	e793      	b.n	80118ca <powf+0x46>
 80119a2:	bf00      	nop
 80119a4:	2000018a 	.word	0x2000018a
 80119a8:	00000000 	.word	0x00000000
 80119ac:	ff800000 	.word	0xff800000
 80119b0:	7f800000 	.word	0x7f800000

080119b4 <__ieee754_powf>:
 80119b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b8:	ee10 5a90 	vmov	r5, s1
 80119bc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80119c0:	ed2d 8b02 	vpush	{d8}
 80119c4:	eeb0 8a40 	vmov.f32	s16, s0
 80119c8:	eef0 8a60 	vmov.f32	s17, s1
 80119cc:	f000 8291 	beq.w	8011ef2 <__ieee754_powf+0x53e>
 80119d0:	ee10 8a10 	vmov	r8, s0
 80119d4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80119d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80119dc:	dc06      	bgt.n	80119ec <__ieee754_powf+0x38>
 80119de:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80119e2:	dd0a      	ble.n	80119fa <__ieee754_powf+0x46>
 80119e4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80119e8:	f000 8283 	beq.w	8011ef2 <__ieee754_powf+0x53e>
 80119ec:	ecbd 8b02 	vpop	{d8}
 80119f0:	48d8      	ldr	r0, [pc, #864]	; (8011d54 <__ieee754_powf+0x3a0>)
 80119f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119f6:	f000 bab5 	b.w	8011f64 <nanf>
 80119fa:	f1b8 0f00 	cmp.w	r8, #0
 80119fe:	da1f      	bge.n	8011a40 <__ieee754_powf+0x8c>
 8011a00:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8011a04:	da2e      	bge.n	8011a64 <__ieee754_powf+0xb0>
 8011a06:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8011a0a:	f2c0 827b 	blt.w	8011f04 <__ieee754_powf+0x550>
 8011a0e:	15fb      	asrs	r3, r7, #23
 8011a10:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011a14:	fa47 f603 	asr.w	r6, r7, r3
 8011a18:	fa06 f303 	lsl.w	r3, r6, r3
 8011a1c:	42bb      	cmp	r3, r7
 8011a1e:	f040 8271 	bne.w	8011f04 <__ieee754_powf+0x550>
 8011a22:	f006 0601 	and.w	r6, r6, #1
 8011a26:	f1c6 0602 	rsb	r6, r6, #2
 8011a2a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8011a2e:	d120      	bne.n	8011a72 <__ieee754_powf+0xbe>
 8011a30:	2d00      	cmp	r5, #0
 8011a32:	f280 8264 	bge.w	8011efe <__ieee754_powf+0x54a>
 8011a36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011a3a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8011a3e:	e00d      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011a40:	2600      	movs	r6, #0
 8011a42:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011a46:	d1f0      	bne.n	8011a2a <__ieee754_powf+0x76>
 8011a48:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011a4c:	f000 8251 	beq.w	8011ef2 <__ieee754_powf+0x53e>
 8011a50:	dd0a      	ble.n	8011a68 <__ieee754_powf+0xb4>
 8011a52:	2d00      	cmp	r5, #0
 8011a54:	f280 8250 	bge.w	8011ef8 <__ieee754_powf+0x544>
 8011a58:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8011d58 <__ieee754_powf+0x3a4>
 8011a5c:	ecbd 8b02 	vpop	{d8}
 8011a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a64:	2602      	movs	r6, #2
 8011a66:	e7ec      	b.n	8011a42 <__ieee754_powf+0x8e>
 8011a68:	2d00      	cmp	r5, #0
 8011a6a:	daf5      	bge.n	8011a58 <__ieee754_powf+0xa4>
 8011a6c:	eeb1 0a68 	vneg.f32	s0, s17
 8011a70:	e7f4      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011a72:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8011a76:	d102      	bne.n	8011a7e <__ieee754_powf+0xca>
 8011a78:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011a7c:	e7ee      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011a7e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8011a82:	eeb0 0a48 	vmov.f32	s0, s16
 8011a86:	d108      	bne.n	8011a9a <__ieee754_powf+0xe6>
 8011a88:	f1b8 0f00 	cmp.w	r8, #0
 8011a8c:	db05      	blt.n	8011a9a <__ieee754_powf+0xe6>
 8011a8e:	ecbd 8b02 	vpop	{d8}
 8011a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a96:	f000 ba4d 	b.w	8011f34 <__ieee754_sqrtf>
 8011a9a:	f000 fa4e 	bl	8011f3a <fabsf>
 8011a9e:	b124      	cbz	r4, 8011aaa <__ieee754_powf+0xf6>
 8011aa0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8011aa4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011aa8:	d117      	bne.n	8011ada <__ieee754_powf+0x126>
 8011aaa:	2d00      	cmp	r5, #0
 8011aac:	bfbc      	itt	lt
 8011aae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8011ab2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011ab6:	f1b8 0f00 	cmp.w	r8, #0
 8011aba:	dacf      	bge.n	8011a5c <__ieee754_powf+0xa8>
 8011abc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8011ac0:	ea54 0306 	orrs.w	r3, r4, r6
 8011ac4:	d104      	bne.n	8011ad0 <__ieee754_powf+0x11c>
 8011ac6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011aca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011ace:	e7c5      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011ad0:	2e01      	cmp	r6, #1
 8011ad2:	d1c3      	bne.n	8011a5c <__ieee754_powf+0xa8>
 8011ad4:	eeb1 0a40 	vneg.f32	s0, s0
 8011ad8:	e7c0      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011ada:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8011ade:	3801      	subs	r0, #1
 8011ae0:	ea56 0300 	orrs.w	r3, r6, r0
 8011ae4:	d104      	bne.n	8011af0 <__ieee754_powf+0x13c>
 8011ae6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011aea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011aee:	e7b5      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011af0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8011af4:	dd6b      	ble.n	8011bce <__ieee754_powf+0x21a>
 8011af6:	4b99      	ldr	r3, [pc, #612]	; (8011d5c <__ieee754_powf+0x3a8>)
 8011af8:	429c      	cmp	r4, r3
 8011afa:	dc06      	bgt.n	8011b0a <__ieee754_powf+0x156>
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	daab      	bge.n	8011a58 <__ieee754_powf+0xa4>
 8011b00:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8011d60 <__ieee754_powf+0x3ac>
 8011b04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011b08:	e7a8      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011b0a:	4b96      	ldr	r3, [pc, #600]	; (8011d64 <__ieee754_powf+0x3b0>)
 8011b0c:	429c      	cmp	r4, r3
 8011b0e:	dd02      	ble.n	8011b16 <__ieee754_powf+0x162>
 8011b10:	2d00      	cmp	r5, #0
 8011b12:	dcf5      	bgt.n	8011b00 <__ieee754_powf+0x14c>
 8011b14:	e7a0      	b.n	8011a58 <__ieee754_powf+0xa4>
 8011b16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011b1e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8011d68 <__ieee754_powf+0x3b4>
 8011b22:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011b26:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011b2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011b2e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011b32:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b3a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8011d6c <__ieee754_powf+0x3b8>
 8011b3e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8011b42:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8011d70 <__ieee754_powf+0x3bc>
 8011b46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011b4a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8011d74 <__ieee754_powf+0x3c0>
 8011b4e:	eef0 6a67 	vmov.f32	s13, s15
 8011b52:	eee0 6a07 	vfma.f32	s13, s0, s14
 8011b56:	ee16 3a90 	vmov	r3, s13
 8011b5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011b5e:	f023 030f 	bic.w	r3, r3, #15
 8011b62:	ee00 3a90 	vmov	s1, r3
 8011b66:	eee0 0a47 	vfms.f32	s1, s0, s14
 8011b6a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011b6e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8011b72:	f025 050f 	bic.w	r5, r5, #15
 8011b76:	ee07 5a10 	vmov	s14, r5
 8011b7a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011b7e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8011b82:	ee07 3a90 	vmov	s15, r3
 8011b86:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011b8a:	3e01      	subs	r6, #1
 8011b8c:	ea56 0200 	orrs.w	r2, r6, r0
 8011b90:	ee07 5a10 	vmov	s14, r5
 8011b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b98:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011b9c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8011ba0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011ba4:	ee17 4a10 	vmov	r4, s14
 8011ba8:	bf08      	it	eq
 8011baa:	eeb0 8a40 	vmoveq.f32	s16, s0
 8011bae:	2c00      	cmp	r4, #0
 8011bb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011bb4:	f340 8184 	ble.w	8011ec0 <__ieee754_powf+0x50c>
 8011bb8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011bbc:	f340 80fc 	ble.w	8011db8 <__ieee754_powf+0x404>
 8011bc0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8011d60 <__ieee754_powf+0x3ac>
 8011bc4:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011bc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011bcc:	e746      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011bce:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8011bd2:	bf01      	itttt	eq
 8011bd4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8011d78 <__ieee754_powf+0x3c4>
 8011bd8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011bdc:	f06f 0217 	mvneq.w	r2, #23
 8011be0:	ee17 4a90 	vmoveq	r4, s15
 8011be4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8011be8:	bf18      	it	ne
 8011bea:	2200      	movne	r2, #0
 8011bec:	3b7f      	subs	r3, #127	; 0x7f
 8011bee:	4413      	add	r3, r2
 8011bf0:	4a62      	ldr	r2, [pc, #392]	; (8011d7c <__ieee754_powf+0x3c8>)
 8011bf2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8011bf6:	4294      	cmp	r4, r2
 8011bf8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8011bfc:	dd06      	ble.n	8011c0c <__ieee754_powf+0x258>
 8011bfe:	4a60      	ldr	r2, [pc, #384]	; (8011d80 <__ieee754_powf+0x3cc>)
 8011c00:	4294      	cmp	r4, r2
 8011c02:	f340 80a4 	ble.w	8011d4e <__ieee754_powf+0x39a>
 8011c06:	3301      	adds	r3, #1
 8011c08:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011c0c:	2400      	movs	r4, #0
 8011c0e:	4a5d      	ldr	r2, [pc, #372]	; (8011d84 <__ieee754_powf+0x3d0>)
 8011c10:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011c14:	ee07 1a90 	vmov	s15, r1
 8011c18:	ed92 7a00 	vldr	s14, [r2]
 8011c1c:	4a5a      	ldr	r2, [pc, #360]	; (8011d88 <__ieee754_powf+0x3d4>)
 8011c1e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011c22:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011c26:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011c2a:	1049      	asrs	r1, r1, #1
 8011c2c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011c30:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011c34:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8011c38:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8011c3c:	ee06 1a10 	vmov	s12, r1
 8011c40:	ee65 4a26 	vmul.f32	s9, s10, s13
 8011c44:	ee36 7a47 	vsub.f32	s14, s12, s14
 8011c48:	ee14 7a90 	vmov	r7, s9
 8011c4c:	4017      	ands	r7, r2
 8011c4e:	ee05 7a90 	vmov	s11, r7
 8011c52:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8011c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c5a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8011d8c <__ieee754_powf+0x3d8>
 8011c5e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8011c62:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8011c66:	ee25 6a26 	vmul.f32	s12, s10, s13
 8011c6a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8011d90 <__ieee754_powf+0x3dc>
 8011c6e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011c72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8011d94 <__ieee754_powf+0x3e0>
 8011c76:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011c7a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011d68 <__ieee754_powf+0x3b4>
 8011c7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011c82:	eddf 6a45 	vldr	s13, [pc, #276]	; 8011d98 <__ieee754_powf+0x3e4>
 8011c86:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011c8a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8011d9c <__ieee754_powf+0x3e8>
 8011c8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011c92:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8011c96:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8011c9a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011c9e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8011ca2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011ca6:	eef0 7a45 	vmov.f32	s15, s10
 8011caa:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011cb2:	ee17 1a90 	vmov	r1, s15
 8011cb6:	4011      	ands	r1, r2
 8011cb8:	ee07 1a90 	vmov	s15, r1
 8011cbc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8011cc0:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8011cc4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011cc8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011ccc:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011cd0:	eeb0 6a47 	vmov.f32	s12, s14
 8011cd4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8011cd8:	ee16 1a10 	vmov	r1, s12
 8011cdc:	4011      	ands	r1, r2
 8011cde:	ee06 1a90 	vmov	s13, r1
 8011ce2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8011ce6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8011da0 <__ieee754_powf+0x3ec>
 8011cea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011da4 <__ieee754_powf+0x3f0>
 8011cee:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011cf2:	ee06 1a10 	vmov	s12, r1
 8011cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011cfa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8011da8 <__ieee754_powf+0x3f4>
 8011cfe:	492b      	ldr	r1, [pc, #172]	; (8011dac <__ieee754_powf+0x3f8>)
 8011d00:	eea6 7a27 	vfma.f32	s14, s12, s15
 8011d04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011d08:	edd1 7a00 	vldr	s15, [r1]
 8011d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011d10:	ee07 3a90 	vmov	s15, r3
 8011d14:	4b26      	ldr	r3, [pc, #152]	; (8011db0 <__ieee754_powf+0x3fc>)
 8011d16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011d1a:	eef0 7a47 	vmov.f32	s15, s14
 8011d1e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011d22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d26:	edd4 0a00 	vldr	s1, [r4]
 8011d2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d32:	ee17 3a90 	vmov	r3, s15
 8011d36:	4013      	ands	r3, r2
 8011d38:	ee07 3a90 	vmov	s15, r3
 8011d3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011d40:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8011d44:	eee6 6a65 	vfms.f32	s13, s12, s11
 8011d48:	ee77 7a66 	vsub.f32	s15, s14, s13
 8011d4c:	e70f      	b.n	8011b6e <__ieee754_powf+0x1ba>
 8011d4e:	2401      	movs	r4, #1
 8011d50:	e75d      	b.n	8011c0e <__ieee754_powf+0x25a>
 8011d52:	bf00      	nop
 8011d54:	08012408 	.word	0x08012408
 8011d58:	00000000 	.word	0x00000000
 8011d5c:	3f7ffff7 	.word	0x3f7ffff7
 8011d60:	7149f2ca 	.word	0x7149f2ca
 8011d64:	3f800007 	.word	0x3f800007
 8011d68:	3eaaaaab 	.word	0x3eaaaaab
 8011d6c:	3fb8aa3b 	.word	0x3fb8aa3b
 8011d70:	36eca570 	.word	0x36eca570
 8011d74:	3fb8aa00 	.word	0x3fb8aa00
 8011d78:	4b800000 	.word	0x4b800000
 8011d7c:	001cc471 	.word	0x001cc471
 8011d80:	005db3d6 	.word	0x005db3d6
 8011d84:	0801240c 	.word	0x0801240c
 8011d88:	fffff000 	.word	0xfffff000
 8011d8c:	3e6c3255 	.word	0x3e6c3255
 8011d90:	3e53f142 	.word	0x3e53f142
 8011d94:	3e8ba305 	.word	0x3e8ba305
 8011d98:	3edb6db7 	.word	0x3edb6db7
 8011d9c:	3f19999a 	.word	0x3f19999a
 8011da0:	3f76384f 	.word	0x3f76384f
 8011da4:	3f763800 	.word	0x3f763800
 8011da8:	369dc3a0 	.word	0x369dc3a0
 8011dac:	0801241c 	.word	0x0801241c
 8011db0:	08012414 	.word	0x08012414
 8011db4:	3338aa3c 	.word	0x3338aa3c
 8011db8:	f040 8092 	bne.w	8011ee0 <__ieee754_powf+0x52c>
 8011dbc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8011db4 <__ieee754_powf+0x400>
 8011dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011dc4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011dc8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	f73f aef6 	bgt.w	8011bc0 <__ieee754_powf+0x20c>
 8011dd4:	15db      	asrs	r3, r3, #23
 8011dd6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8011dda:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011dde:	4103      	asrs	r3, r0
 8011de0:	4423      	add	r3, r4
 8011de2:	4949      	ldr	r1, [pc, #292]	; (8011f08 <__ieee754_powf+0x554>)
 8011de4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011de8:	3a7f      	subs	r2, #127	; 0x7f
 8011dea:	4111      	asrs	r1, r2
 8011dec:	ea23 0101 	bic.w	r1, r3, r1
 8011df0:	ee07 1a10 	vmov	s14, r1
 8011df4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8011df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011dfc:	f1c2 0217 	rsb	r2, r2, #23
 8011e00:	4110      	asrs	r0, r2
 8011e02:	2c00      	cmp	r4, #0
 8011e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e08:	bfb8      	it	lt
 8011e0a:	4240      	neglt	r0, r0
 8011e0c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011e10:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8011f0c <__ieee754_powf+0x558>
 8011e14:	ee17 3a10 	vmov	r3, s14
 8011e18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011e1c:	f023 030f 	bic.w	r3, r3, #15
 8011e20:	ee07 3a10 	vmov	s14, r3
 8011e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e28:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011e2c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8011f10 <__ieee754_powf+0x55c>
 8011e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e34:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8011e38:	eddf 6a36 	vldr	s13, [pc, #216]	; 8011f14 <__ieee754_powf+0x560>
 8011e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8011e40:	eea7 0a26 	vfma.f32	s0, s14, s13
 8011e44:	eeb0 6a40 	vmov.f32	s12, s0
 8011e48:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011e4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011e50:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011e54:	eddf 6a30 	vldr	s13, [pc, #192]	; 8011f18 <__ieee754_powf+0x564>
 8011e58:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8011f1c <__ieee754_powf+0x568>
 8011e5c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8011e60:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8011f20 <__ieee754_powf+0x56c>
 8011e64:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011e68:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8011f24 <__ieee754_powf+0x570>
 8011e6c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8011e70:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8011f28 <__ieee754_powf+0x574>
 8011e74:	eee6 6a07 	vfma.f32	s13, s12, s14
 8011e78:	eeb0 6a40 	vmov.f32	s12, s0
 8011e7c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8011e80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011e84:	eeb0 7a46 	vmov.f32	s14, s12
 8011e88:	ee77 6a66 	vsub.f32	s13, s14, s13
 8011e8c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8011e90:	eee0 7a27 	vfma.f32	s15, s0, s15
 8011e94:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011ea0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011ea4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011ea8:	ee10 3a10 	vmov	r3, s0
 8011eac:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011eb4:	da1a      	bge.n	8011eec <__ieee754_powf+0x538>
 8011eb6:	f000 f8b7 	bl	8012028 <scalbnf>
 8011eba:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011ebe:	e5cd      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011ec0:	4a1a      	ldr	r2, [pc, #104]	; (8011f2c <__ieee754_powf+0x578>)
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	dd02      	ble.n	8011ecc <__ieee754_powf+0x518>
 8011ec6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8011f30 <__ieee754_powf+0x57c>
 8011eca:	e67b      	b.n	8011bc4 <__ieee754_powf+0x210>
 8011ecc:	d108      	bne.n	8011ee0 <__ieee754_powf+0x52c>
 8011ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011ed2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	f6ff af7b 	blt.w	8011dd4 <__ieee754_powf+0x420>
 8011ede:	e7f2      	b.n	8011ec6 <__ieee754_powf+0x512>
 8011ee0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8011ee4:	f73f af76 	bgt.w	8011dd4 <__ieee754_powf+0x420>
 8011ee8:	2000      	movs	r0, #0
 8011eea:	e78f      	b.n	8011e0c <__ieee754_powf+0x458>
 8011eec:	ee00 3a10 	vmov	s0, r3
 8011ef0:	e7e3      	b.n	8011eba <__ieee754_powf+0x506>
 8011ef2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011ef6:	e5b1      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011ef8:	eeb0 0a68 	vmov.f32	s0, s17
 8011efc:	e5ae      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011efe:	eeb0 0a48 	vmov.f32	s0, s16
 8011f02:	e5ab      	b.n	8011a5c <__ieee754_powf+0xa8>
 8011f04:	2600      	movs	r6, #0
 8011f06:	e590      	b.n	8011a2a <__ieee754_powf+0x76>
 8011f08:	007fffff 	.word	0x007fffff
 8011f0c:	3f317218 	.word	0x3f317218
 8011f10:	35bfbe8c 	.word	0x35bfbe8c
 8011f14:	3f317200 	.word	0x3f317200
 8011f18:	3331bb4c 	.word	0x3331bb4c
 8011f1c:	b5ddea0e 	.word	0xb5ddea0e
 8011f20:	388ab355 	.word	0x388ab355
 8011f24:	bb360b61 	.word	0xbb360b61
 8011f28:	3e2aaaab 	.word	0x3e2aaaab
 8011f2c:	43160000 	.word	0x43160000
 8011f30:	0da24260 	.word	0x0da24260

08011f34 <__ieee754_sqrtf>:
 8011f34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011f38:	4770      	bx	lr

08011f3a <fabsf>:
 8011f3a:	ee10 3a10 	vmov	r3, s0
 8011f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f42:	ee00 3a10 	vmov	s0, r3
 8011f46:	4770      	bx	lr

08011f48 <finitef>:
 8011f48:	b082      	sub	sp, #8
 8011f4a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011f4e:	9801      	ldr	r0, [sp, #4]
 8011f50:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f54:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011f58:	bfac      	ite	ge
 8011f5a:	2000      	movge	r0, #0
 8011f5c:	2001      	movlt	r0, #1
 8011f5e:	b002      	add	sp, #8
 8011f60:	4770      	bx	lr
	...

08011f64 <nanf>:
 8011f64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f6c <nanf+0x8>
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	7fc00000 	.word	0x7fc00000

08011f70 <rintf>:
 8011f70:	ee10 2a10 	vmov	r2, s0
 8011f74:	b513      	push	{r0, r1, r4, lr}
 8011f76:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011f7a:	397f      	subs	r1, #127	; 0x7f
 8011f7c:	2916      	cmp	r1, #22
 8011f7e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011f82:	dc47      	bgt.n	8012014 <rintf+0xa4>
 8011f84:	b32b      	cbz	r3, 8011fd2 <rintf+0x62>
 8011f86:	2900      	cmp	r1, #0
 8011f88:	ee10 3a10 	vmov	r3, s0
 8011f8c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8011f90:	da21      	bge.n	8011fd6 <rintf+0x66>
 8011f92:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8011f96:	425b      	negs	r3, r3
 8011f98:	4921      	ldr	r1, [pc, #132]	; (8012020 <rintf+0xb0>)
 8011f9a:	0a5b      	lsrs	r3, r3, #9
 8011f9c:	0d12      	lsrs	r2, r2, #20
 8011f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011fa2:	0512      	lsls	r2, r2, #20
 8011fa4:	4313      	orrs	r3, r2
 8011fa6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8011faa:	ee07 3a90 	vmov	s15, r3
 8011fae:	edd1 6a00 	vldr	s13, [r1]
 8011fb2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8011fb6:	ed8d 7a01 	vstr	s14, [sp, #4]
 8011fba:	eddd 7a01 	vldr	s15, [sp, #4]
 8011fbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011fc2:	ee17 3a90 	vmov	r3, s15
 8011fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011fca:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8011fce:	ee00 3a10 	vmov	s0, r3
 8011fd2:	b002      	add	sp, #8
 8011fd4:	bd10      	pop	{r4, pc}
 8011fd6:	4a13      	ldr	r2, [pc, #76]	; (8012024 <rintf+0xb4>)
 8011fd8:	410a      	asrs	r2, r1
 8011fda:	4213      	tst	r3, r2
 8011fdc:	d0f9      	beq.n	8011fd2 <rintf+0x62>
 8011fde:	0854      	lsrs	r4, r2, #1
 8011fe0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8011fe4:	d006      	beq.n	8011ff4 <rintf+0x84>
 8011fe6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011fea:	ea23 0304 	bic.w	r3, r3, r4
 8011fee:	fa42 f101 	asr.w	r1, r2, r1
 8011ff2:	430b      	orrs	r3, r1
 8011ff4:	4a0a      	ldr	r2, [pc, #40]	; (8012020 <rintf+0xb0>)
 8011ff6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8011ffa:	ed90 7a00 	vldr	s14, [r0]
 8011ffe:	ee07 3a90 	vmov	s15, r3
 8012002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012006:	edcd 7a01 	vstr	s15, [sp, #4]
 801200a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801200e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012012:	e7de      	b.n	8011fd2 <rintf+0x62>
 8012014:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012018:	d3db      	bcc.n	8011fd2 <rintf+0x62>
 801201a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801201e:	e7d8      	b.n	8011fd2 <rintf+0x62>
 8012020:	08012424 	.word	0x08012424
 8012024:	007fffff 	.word	0x007fffff

08012028 <scalbnf>:
 8012028:	ee10 3a10 	vmov	r3, s0
 801202c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012030:	d025      	beq.n	801207e <scalbnf+0x56>
 8012032:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012036:	d302      	bcc.n	801203e <scalbnf+0x16>
 8012038:	ee30 0a00 	vadd.f32	s0, s0, s0
 801203c:	4770      	bx	lr
 801203e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012042:	d122      	bne.n	801208a <scalbnf+0x62>
 8012044:	4b2a      	ldr	r3, [pc, #168]	; (80120f0 <scalbnf+0xc8>)
 8012046:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80120f4 <scalbnf+0xcc>
 801204a:	4298      	cmp	r0, r3
 801204c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012050:	db16      	blt.n	8012080 <scalbnf+0x58>
 8012052:	ee10 3a10 	vmov	r3, s0
 8012056:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801205a:	3a19      	subs	r2, #25
 801205c:	4402      	add	r2, r0
 801205e:	2afe      	cmp	r2, #254	; 0xfe
 8012060:	dd15      	ble.n	801208e <scalbnf+0x66>
 8012062:	ee10 3a10 	vmov	r3, s0
 8012066:	eddf 7a24 	vldr	s15, [pc, #144]	; 80120f8 <scalbnf+0xd0>
 801206a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80120fc <scalbnf+0xd4>
 801206e:	2b00      	cmp	r3, #0
 8012070:	eeb0 7a67 	vmov.f32	s14, s15
 8012074:	bfb8      	it	lt
 8012076:	eef0 7a66 	vmovlt.f32	s15, s13
 801207a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801207e:	4770      	bx	lr
 8012080:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012100 <scalbnf+0xd8>
 8012084:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012088:	4770      	bx	lr
 801208a:	0dd2      	lsrs	r2, r2, #23
 801208c:	e7e6      	b.n	801205c <scalbnf+0x34>
 801208e:	2a00      	cmp	r2, #0
 8012090:	dd06      	ble.n	80120a0 <scalbnf+0x78>
 8012092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012096:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801209a:	ee00 3a10 	vmov	s0, r3
 801209e:	4770      	bx	lr
 80120a0:	f112 0f16 	cmn.w	r2, #22
 80120a4:	da1a      	bge.n	80120dc <scalbnf+0xb4>
 80120a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80120aa:	4298      	cmp	r0, r3
 80120ac:	ee10 3a10 	vmov	r3, s0
 80120b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120b4:	dd0a      	ble.n	80120cc <scalbnf+0xa4>
 80120b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80120f8 <scalbnf+0xd0>
 80120ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80120fc <scalbnf+0xd4>
 80120be:	eef0 7a40 	vmov.f32	s15, s0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	bf18      	it	ne
 80120c6:	eeb0 0a47 	vmovne.f32	s0, s14
 80120ca:	e7db      	b.n	8012084 <scalbnf+0x5c>
 80120cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012100 <scalbnf+0xd8>
 80120d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012104 <scalbnf+0xdc>
 80120d4:	eef0 7a40 	vmov.f32	s15, s0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	e7f3      	b.n	80120c4 <scalbnf+0x9c>
 80120dc:	3219      	adds	r2, #25
 80120de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80120e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80120e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012108 <scalbnf+0xe0>
 80120ea:	ee07 3a10 	vmov	s14, r3
 80120ee:	e7c4      	b.n	801207a <scalbnf+0x52>
 80120f0:	ffff3cb0 	.word	0xffff3cb0
 80120f4:	4c000000 	.word	0x4c000000
 80120f8:	7149f2ca 	.word	0x7149f2ca
 80120fc:	f149f2ca 	.word	0xf149f2ca
 8012100:	0da24260 	.word	0x0da24260
 8012104:	8da24260 	.word	0x8da24260
 8012108:	33000000 	.word	0x33000000

0801210c <__errno>:
 801210c:	4b01      	ldr	r3, [pc, #4]	; (8012114 <__errno+0x8>)
 801210e:	6818      	ldr	r0, [r3, #0]
 8012110:	4770      	bx	lr
 8012112:	bf00      	nop
 8012114:	2000018c 	.word	0x2000018c

08012118 <__libc_init_array>:
 8012118:	b570      	push	{r4, r5, r6, lr}
 801211a:	4d0d      	ldr	r5, [pc, #52]	; (8012150 <__libc_init_array+0x38>)
 801211c:	4c0d      	ldr	r4, [pc, #52]	; (8012154 <__libc_init_array+0x3c>)
 801211e:	1b64      	subs	r4, r4, r5
 8012120:	10a4      	asrs	r4, r4, #2
 8012122:	2600      	movs	r6, #0
 8012124:	42a6      	cmp	r6, r4
 8012126:	d109      	bne.n	801213c <__libc_init_array+0x24>
 8012128:	4d0b      	ldr	r5, [pc, #44]	; (8012158 <__libc_init_array+0x40>)
 801212a:	4c0c      	ldr	r4, [pc, #48]	; (801215c <__libc_init_array+0x44>)
 801212c:	f000 f82e 	bl	801218c <_init>
 8012130:	1b64      	subs	r4, r4, r5
 8012132:	10a4      	asrs	r4, r4, #2
 8012134:	2600      	movs	r6, #0
 8012136:	42a6      	cmp	r6, r4
 8012138:	d105      	bne.n	8012146 <__libc_init_array+0x2e>
 801213a:	bd70      	pop	{r4, r5, r6, pc}
 801213c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012140:	4798      	blx	r3
 8012142:	3601      	adds	r6, #1
 8012144:	e7ee      	b.n	8012124 <__libc_init_array+0xc>
 8012146:	f855 3b04 	ldr.w	r3, [r5], #4
 801214a:	4798      	blx	r3
 801214c:	3601      	adds	r6, #1
 801214e:	e7f2      	b.n	8012136 <__libc_init_array+0x1e>
 8012150:	0801248c 	.word	0x0801248c
 8012154:	0801248c 	.word	0x0801248c
 8012158:	0801248c 	.word	0x0801248c
 801215c:	08012494 	.word	0x08012494

08012160 <memcpy>:
 8012160:	440a      	add	r2, r1
 8012162:	4291      	cmp	r1, r2
 8012164:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012168:	d100      	bne.n	801216c <memcpy+0xc>
 801216a:	4770      	bx	lr
 801216c:	b510      	push	{r4, lr}
 801216e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012176:	4291      	cmp	r1, r2
 8012178:	d1f9      	bne.n	801216e <memcpy+0xe>
 801217a:	bd10      	pop	{r4, pc}

0801217c <memset>:
 801217c:	4402      	add	r2, r0
 801217e:	4603      	mov	r3, r0
 8012180:	4293      	cmp	r3, r2
 8012182:	d100      	bne.n	8012186 <memset+0xa>
 8012184:	4770      	bx	lr
 8012186:	f803 1b01 	strb.w	r1, [r3], #1
 801218a:	e7f9      	b.n	8012180 <memset+0x4>

0801218c <_init>:
 801218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218e:	bf00      	nop
 8012190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012192:	bc08      	pop	{r3}
 8012194:	469e      	mov	lr, r3
 8012196:	4770      	bx	lr

08012198 <_fini>:
 8012198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219a:	bf00      	nop
 801219c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801219e:	bc08      	pop	{r3}
 80121a0:	469e      	mov	lr, r3
 80121a2:	4770      	bx	lr
